// <autogenerated>
// <copyright file="Sampling.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Sampling section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoSampling { private get; set; }

        // Enable the tables specifically on run
        public bool DoSampleRequestTable { private get; set; }
        public bool DoSampleRequestContactTable { private get; set; }
        public bool DoSampleRequestEventTable { private get; set; }
        public bool DoSampleRequestEventTypeTable { private get; set; }
        public bool DoSampleRequestFileTable { private get; set; }
        public bool DoSampleRequestItemTable { private get; set; }
        public bool DoSampleRequestItemTargetTable { private get; set; }
        public bool DoSampleRequestStateTable { private get; set; }
        public bool DoSampleRequestStatusTable { private get; set; }
        public bool DoSampleRequestTypeTable { private get; set; }

        // Dirty Checking
        public bool SampleRequestDirty { private get; set; }
        public bool SampleRequestContactDirty { private get; set; }
        public bool SampleRequestEventDirty { private get; set; }
        public bool SampleRequestEventTypeDirty { private get; set; }
        public bool SampleRequestFileDirty { private get; set; }
        public bool SampleRequestItemDirty { private get; set; }
        public bool SampleRequestItemTargetDirty { private get; set; }
        public bool SampleRequestStateDirty { private get; set; }
        public bool SampleRequestStatusDirty { private get; set; }
        public bool SampleRequestTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<SampleRequest>>? SampleRequests { get; private set; }
        public Mock<DbSet<SampleRequestContact>>? SampleRequestContacts { get; private set; }
        public Mock<DbSet<SampleRequestEvent>>? SampleRequestEvents { get; private set; }
        public Mock<DbSet<SampleRequestEventType>>? SampleRequestEventTypes { get; private set; }
        public Mock<DbSet<SampleRequestFile>>? SampleRequestFiles { get; private set; }
        public Mock<DbSet<SampleRequestItem>>? SampleRequestItems { get; private set; }
        public Mock<DbSet<SampleRequestItemTarget>>? SampleRequestItemTargets { get; private set; }
        public Mock<DbSet<SampleRequestState>>? SampleRequestStates { get; private set; }
        public Mock<DbSet<SampleRequestStatus>>? SampleRequestStatuses { get; private set; }
        public Mock<DbSet<SampleRequestType>>? SampleRequestTypes { get; private set; }

        // Raw Data
        public List<Mock<SampleRequest>>? RawSampleRequests { get; private set; }
        public List<Mock<SampleRequestContact>>? RawSampleRequestContacts { get; private set; }
        public List<Mock<SampleRequestEvent>>? RawSampleRequestEvents { get; private set; }
        public List<Mock<SampleRequestEventType>>? RawSampleRequestEventTypes { get; private set; }
        public List<Mock<SampleRequestFile>>? RawSampleRequestFiles { get; private set; }
        public List<Mock<SampleRequestItem>>? RawSampleRequestItems { get; private set; }
        public List<Mock<SampleRequestItemTarget>>? RawSampleRequestItemTargets { get; private set; }
        public List<Mock<SampleRequestState>>? RawSampleRequestStates { get; private set; }
        public List<Mock<SampleRequestStatus>>? RawSampleRequestStatuses { get; private set; }
        public List<Mock<SampleRequestType>>? RawSampleRequestTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksSamplingAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoSampling || (DoSampleRequestTable && (!dirtyOnly || SampleRequestDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSampleRequests == null) { throw new InvalidOperationException("Raw SampleRequests was null"); }
                    await InitializeMockSetFromListAsync(SampleRequests, RawSampleRequests).ConfigureAwait(false);
                    context.Setup(m => m.SampleRequests).Returns(() => SampleRequests?.Object!);
                    context.Setup(m => m.Set<SampleRequest>()).Returns(() => SampleRequests?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoSampling || (DoSampleRequestContactTable && (!dirtyOnly || SampleRequestContactDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSampleRequestContacts == null) { throw new InvalidOperationException("Raw SampleRequestContacts was null"); }
                    await InitializeMockSetFromListAsync(SampleRequestContacts, RawSampleRequestContacts).ConfigureAwait(false);
                    context.Setup(m => m.SampleRequestContacts).Returns(() => SampleRequestContacts?.Object!);
                    context.Setup(m => m.Set<SampleRequestContact>()).Returns(() => SampleRequestContacts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoSampling || (DoSampleRequestEventTable && (!dirtyOnly || SampleRequestEventDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSampleRequestEvents == null) { throw new InvalidOperationException("Raw SampleRequestEvents was null"); }
                    await InitializeMockSetFromListAsync(SampleRequestEvents, RawSampleRequestEvents).ConfigureAwait(false);
                    context.Setup(m => m.SampleRequestEvents).Returns(() => SampleRequestEvents?.Object!);
                    context.Setup(m => m.Set<SampleRequestEvent>()).Returns(() => SampleRequestEvents?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoSampling || (DoSampleRequestEventTypeTable && (!dirtyOnly || SampleRequestEventTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSampleRequestEventTypes == null) { throw new InvalidOperationException("Raw SampleRequestEventTypes was null"); }
                    await InitializeMockSetFromListAsync(SampleRequestEventTypes, RawSampleRequestEventTypes).ConfigureAwait(false);
                    context.Setup(m => m.SampleRequestEventTypes).Returns(() => SampleRequestEventTypes?.Object!);
                    context.Setup(m => m.Set<SampleRequestEventType>()).Returns(() => SampleRequestEventTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoSampling || (DoSampleRequestFileTable && (!dirtyOnly || SampleRequestFileDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSampleRequestFiles == null) { throw new InvalidOperationException("Raw SampleRequestFiles was null"); }
                    await InitializeMockSetFromListAsync(SampleRequestFiles, RawSampleRequestFiles).ConfigureAwait(false);
                    context.Setup(m => m.SampleRequestFiles).Returns(() => SampleRequestFiles?.Object!);
                    context.Setup(m => m.Set<SampleRequestFile>()).Returns(() => SampleRequestFiles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoSampling || (DoSampleRequestItemTable && (!dirtyOnly || SampleRequestItemDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSampleRequestItems == null) { throw new InvalidOperationException("Raw SampleRequestItems was null"); }
                    await InitializeMockSetFromListAsync(SampleRequestItems, RawSampleRequestItems).ConfigureAwait(false);
                    context.Setup(m => m.SampleRequestItems).Returns(() => SampleRequestItems?.Object!);
                    context.Setup(m => m.Set<SampleRequestItem>()).Returns(() => SampleRequestItems?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoSampling || (DoSampleRequestItemTargetTable && (!dirtyOnly || SampleRequestItemTargetDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSampleRequestItemTargets == null) { throw new InvalidOperationException("Raw SampleRequestItemTargets was null"); }
                    await InitializeMockSetFromListAsync(SampleRequestItemTargets, RawSampleRequestItemTargets).ConfigureAwait(false);
                    context.Setup(m => m.SampleRequestItemTargets).Returns(() => SampleRequestItemTargets?.Object!);
                    context.Setup(m => m.Set<SampleRequestItemTarget>()).Returns(() => SampleRequestItemTargets?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoSampling || (DoSampleRequestStateTable && (!dirtyOnly || SampleRequestStateDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSampleRequestStates == null) { throw new InvalidOperationException("Raw SampleRequestStates was null"); }
                    await InitializeMockSetFromListAsync(SampleRequestStates, RawSampleRequestStates).ConfigureAwait(false);
                    context.Setup(m => m.SampleRequestStates).Returns(() => SampleRequestStates?.Object!);
                    context.Setup(m => m.Set<SampleRequestState>()).Returns(() => SampleRequestStates?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoSampling || (DoSampleRequestStatusTable && (!dirtyOnly || SampleRequestStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSampleRequestStatuses == null) { throw new InvalidOperationException("Raw SampleRequestStatuses was null"); }
                    await InitializeMockSetFromListAsync(SampleRequestStatuses, RawSampleRequestStatuses).ConfigureAwait(false);
                    context.Setup(m => m.SampleRequestStatuses).Returns(() => SampleRequestStatuses?.Object!);
                    context.Setup(m => m.Set<SampleRequestStatus>()).Returns(() => SampleRequestStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoSampling || (DoSampleRequestTypeTable && (!dirtyOnly || SampleRequestTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSampleRequestTypes == null) { throw new InvalidOperationException("Raw SampleRequestTypes was null"); }
                    await InitializeMockSetFromListAsync(SampleRequestTypes, RawSampleRequestTypes).ConfigureAwait(false);
                    context.Setup(m => m.SampleRequestTypes).Returns(() => SampleRequestTypes?.Object!);
                    context.Setup(m => m.Set<SampleRequestType>()).Returns(() => SampleRequestTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSampleRequestsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SampleRequest>> data)
        {
            if (!DoAll && !DoSampling && !DoSampleRequestTable) { return; }
            SampleRequests ??= new Mock<DbSet<SampleRequest>>();
            await InitializeMockSetFromListAsync(SampleRequests, data).ConfigureAwait(false);
            context.Setup(m => m.SampleRequests).Returns(() => SampleRequests.Object);
            context.Setup(m => m.Set<SampleRequest>()).Returns(() => SampleRequests.Object);
            TableRecordCounts[typeof(SampleRequest)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SampleRequest)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SampleRequest)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSampleRequestContactsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SampleRequestContact>> data)
        {
            if (!DoAll && !DoSampling && !DoSampleRequestContactTable) { return; }
            SampleRequestContacts ??= new Mock<DbSet<SampleRequestContact>>();
            await InitializeMockSetFromListAsync(SampleRequestContacts, data).ConfigureAwait(false);
            context.Setup(m => m.SampleRequestContacts).Returns(() => SampleRequestContacts.Object);
            context.Setup(m => m.Set<SampleRequestContact>()).Returns(() => SampleRequestContacts.Object);
            TableRecordCounts[typeof(SampleRequestContact)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SampleRequestContact)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SampleRequestContact)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSampleRequestEventsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SampleRequestEvent>> data)
        {
            if (!DoAll && !DoSampling && !DoSampleRequestEventTable) { return; }
            SampleRequestEvents ??= new Mock<DbSet<SampleRequestEvent>>();
            await InitializeMockSetFromListAsync(SampleRequestEvents, data).ConfigureAwait(false);
            context.Setup(m => m.SampleRequestEvents).Returns(() => SampleRequestEvents.Object);
            context.Setup(m => m.Set<SampleRequestEvent>()).Returns(() => SampleRequestEvents.Object);
            TableRecordCounts[typeof(SampleRequestEvent)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SampleRequestEvent)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SampleRequestEvent)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SampleRequestEvent)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSampleRequestEventTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SampleRequestEventType>> data)
        {
            if (!DoAll && !DoSampling && !DoSampleRequestEventTypeTable) { return; }
            SampleRequestEventTypes ??= new Mock<DbSet<SampleRequestEventType>>();
            await InitializeMockSetFromListAsync(SampleRequestEventTypes, data).ConfigureAwait(false);
            context.Setup(m => m.SampleRequestEventTypes).Returns(() => SampleRequestEventTypes.Object);
            context.Setup(m => m.Set<SampleRequestEventType>()).Returns(() => SampleRequestEventTypes.Object);
            TableRecordCounts[typeof(SampleRequestEventType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SampleRequestEventType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SampleRequestEventType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SampleRequestEventType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SampleRequestEventType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSampleRequestFilesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SampleRequestFile>> data)
        {
            if (!DoAll && !DoSampling && !DoSampleRequestFileTable) { return; }
            SampleRequestFiles ??= new Mock<DbSet<SampleRequestFile>>();
            await InitializeMockSetFromListAsync(SampleRequestFiles, data).ConfigureAwait(false);
            context.Setup(m => m.SampleRequestFiles).Returns(() => SampleRequestFiles.Object);
            context.Setup(m => m.Set<SampleRequestFile>()).Returns(() => SampleRequestFiles.Object);
            TableRecordCounts[typeof(SampleRequestFile)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SampleRequestFile)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SampleRequestFile)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SampleRequestFile)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSampleRequestItemsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SampleRequestItem>> data)
        {
            if (!DoAll && !DoSampling && !DoSampleRequestItemTable) { return; }
            SampleRequestItems ??= new Mock<DbSet<SampleRequestItem>>();
            await InitializeMockSetFromListAsync(SampleRequestItems, data).ConfigureAwait(false);
            context.Setup(m => m.SampleRequestItems).Returns(() => SampleRequestItems.Object);
            context.Setup(m => m.Set<SampleRequestItem>()).Returns(() => SampleRequestItems.Object);
            TableRecordCounts[typeof(SampleRequestItem)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SampleRequestItem)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SampleRequestItem)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SampleRequestItem)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSampleRequestItemTargetsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SampleRequestItemTarget>> data)
        {
            if (!DoAll && !DoSampling && !DoSampleRequestItemTargetTable) { return; }
            SampleRequestItemTargets ??= new Mock<DbSet<SampleRequestItemTarget>>();
            await InitializeMockSetFromListAsync(SampleRequestItemTargets, data).ConfigureAwait(false);
            context.Setup(m => m.SampleRequestItemTargets).Returns(() => SampleRequestItemTargets.Object);
            context.Setup(m => m.Set<SampleRequestItemTarget>()).Returns(() => SampleRequestItemTargets.Object);
            TableRecordCounts[typeof(SampleRequestItemTarget)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SampleRequestItemTarget)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SampleRequestItemTarget)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSampleRequestStatesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SampleRequestState>> data)
        {
            if (!DoAll && !DoSampling && !DoSampleRequestStateTable) { return; }
            SampleRequestStates ??= new Mock<DbSet<SampleRequestState>>();
            await InitializeMockSetFromListAsync(SampleRequestStates, data).ConfigureAwait(false);
            context.Setup(m => m.SampleRequestStates).Returns(() => SampleRequestStates.Object);
            context.Setup(m => m.Set<SampleRequestState>()).Returns(() => SampleRequestStates.Object);
            TableRecordCounts[typeof(SampleRequestState)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SampleRequestState)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SampleRequestState)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SampleRequestState)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SampleRequestState)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSampleRequestStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SampleRequestStatus>> data)
        {
            if (!DoAll && !DoSampling && !DoSampleRequestStatusTable) { return; }
            SampleRequestStatuses ??= new Mock<DbSet<SampleRequestStatus>>();
            await InitializeMockSetFromListAsync(SampleRequestStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.SampleRequestStatuses).Returns(() => SampleRequestStatuses.Object);
            context.Setup(m => m.Set<SampleRequestStatus>()).Returns(() => SampleRequestStatuses.Object);
            TableRecordCounts[typeof(SampleRequestStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SampleRequestStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SampleRequestStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SampleRequestStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SampleRequestStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSampleRequestTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SampleRequestType>> data)
        {
            if (!DoAll && !DoSampling && !DoSampleRequestTypeTable) { return; }
            SampleRequestTypes ??= new Mock<DbSet<SampleRequestType>>();
            await InitializeMockSetFromListAsync(SampleRequestTypes, data).ConfigureAwait(false);
            context.Setup(m => m.SampleRequestTypes).Returns(() => SampleRequestTypes.Object);
            context.Setup(m => m.Set<SampleRequestType>()).Returns(() => SampleRequestTypes.Object);
            TableRecordCounts[typeof(SampleRequestType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SampleRequestType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SampleRequestType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SampleRequestType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SampleRequestType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy SampleRequest.</summary>
        /// <returns>The new SampleRequest.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SampleRequest>> CreateADummySampleRequestAsync(int id, string? key, string? jsonAttributes = null, DateTime? dueDate = null, decimal subtotalItems = 0m, decimal subtotalShipping = 0m, decimal subtotalTaxes = 0m, decimal subtotalFees = 0m, decimal subtotalHandling = 0m, decimal subtotalDiscounts = 0m, decimal total = 0m, bool? shippingSameAsBilling = null, int? userID = null, int? accountID = null, int statusID = 1, int stateID = 1, int typeID = 1, int? billingContactID = null, int? shippingContactID = null, int? brandID = null!, int? franchiseID = null!, int? salesGroupID = null!, int? storeID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SampleRequest>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ISalesCollectionBase Properties
                mock.Object.DueDate = dueDate;
                mock.Object.SubtotalItems = subtotalItems;
                mock.Object.SubtotalShipping = subtotalShipping;
                mock.Object.SubtotalTaxes = subtotalTaxes;
                mock.Object.SubtotalFees = subtotalFees;
                mock.Object.SubtotalHandling = subtotalHandling;
                mock.Object.SubtotalDiscounts = subtotalDiscounts;
                mock.Object.Total = total;
                mock.Object.ShippingSameAsBilling = shippingSameAsBilling;
                mock.Object.UserID = userID;
                mock.Object.AccountID = accountID;
                mock.Object.StatusID = statusID;
                mock.Object.StateID = stateID;
                mock.Object.TypeID = typeID;
                mock.Object.BillingContactID = billingContactID;
                mock.Object.ShippingContactID = shippingContactID;
                // SampleRequest Properties
                mock.Object.BrandID = brandID;
                mock.Object.FranchiseID = franchiseID;
                mock.Object.SalesGroupID = salesGroupID;
                mock.Object.StoreID = storeID;
                // Dynamic Linking
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => RawSampleRequestFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SampleRequestFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.SampleRequestID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => RawSampleRequestStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => RawSampleRequestStates?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawSampleRequestTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => RawSampleRequestItems?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SampleRequestItem>());
                mock.Setup(m => m.Discounts).Returns(() => RawAppliedSampleRequestDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSampleRequestDiscount>());
                mock.Setup(m => m.Contacts).Returns(() => RawSampleRequestContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SampleRequestContact>());
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => RawAccounts == null || mock.Object.AccountID == null ? null : RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => RawContacts == null || mock.Object.BillingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => RawContacts == null || mock.Object.ShippingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
                // SampleRequest's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.SalesGroup).Returns(() => RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // SampleRequest's Associated Objects
                mock.Setup(m => m.RateQuotes).Returns(() => RawRateQuotes?.Where(x => x.Object.SampleRequestID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RateQuote>());
                mock.Setup(m => m.SalesEvents).Returns(() => RawSampleRequestEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SampleRequestEvent>());
                return mock;
            });
        }

        /// <summary>Creates a dummy SampleRequestContact.</summary>
        /// <returns>The new SampleRequestContact.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SampleRequestContact>> CreateADummySampleRequestContactAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SampleRequestContact>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmAContactRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // SampleRequestContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawSampleRequests?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SampleRequestContact's Related Objects
                // SampleRequestContact's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SampleRequestEvent.</summary>
        /// <returns>The new SampleRequestEvent.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SampleRequestEvent>> CreateADummySampleRequestEventAsync(int id, string? key, string? name, string? desc = null, int masterID = 1, long? oldHash = null, long? newHash = null, int? oldStateID = null, int? newStateID = null, int? oldStatusID = null, int? newStatusID = null, int? oldTypeID = null, int? newTypeID = null, string? oldRecordSerialized = null, string? newRecordSerialized = null, int typeID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SampleRequestEvent>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // ISalesEventBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.OldHash = oldHash;
                mock.Object.NewHash = newHash;
                mock.Object.OldStateID = oldStateID;
                mock.Object.NewStateID = newStateID;
                mock.Object.OldStatusID = oldStatusID;
                mock.Object.NewStatusID = newStatusID;
                mock.Object.OldTypeID = oldTypeID;
                mock.Object.NewTypeID = newTypeID;
                mock.Object.OldRecordSerialized = oldRecordSerialized;
                mock.Object.NewRecordSerialized = newRecordSerialized;
                // SampleRequestEvent Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawSampleRequestEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => RawSampleRequests?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // SampleRequestEvent's Related Objects
                // SampleRequestEvent's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SampleRequestEventType.</summary>
        /// <returns>The new SampleRequestEventType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SampleRequestEventType>> CreateADummySampleRequestEventTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SampleRequestEventType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SampleRequestEventType Properties
                // Dynamic Linking
                // SampleRequestEventType's Related Objects
                // SampleRequestEventType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SampleRequestFile.</summary>
        /// <returns>The new SampleRequestFile.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SampleRequestFile>> CreateADummySampleRequestFileAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SampleRequestFile>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
                // SampleRequestFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawSampleRequests?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SampleRequestFile's Related Objects
                // SampleRequestFile's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SampleRequestItem.</summary>
        /// <returns>The new SampleRequestItem.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SampleRequestItem>> CreateADummySampleRequestItemAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, decimal quantity = 1m, decimal? quantityBackOrdered = 0m, decimal? quantityPreSold = 0m, decimal unitCorePrice = 0m, decimal? unitSoldPrice = null, string? sku = null, string? unitOfMeasure = null, int? productID = null, int? userID = null, int masterID = 1, string forceUniqueLineItemKey = null!, int? originalCurrencyID = null!, int? sellingCurrencyID = null!, decimal? unitCorePriceInSellingCurrency = null!, decimal? unitSoldPriceInSellingCurrency = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SampleRequestItem>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // ISalesItemBase Properties
                mock.Object.Quantity = quantity;
                mock.Object.QuantityBackOrdered = quantityBackOrdered;
                mock.Object.QuantityPreSold = quantityPreSold;
                mock.Object.UnitCorePrice = unitCorePrice;
                mock.Object.UnitSoldPrice = unitSoldPrice;
                mock.Object.Sku = sku;
                mock.Object.UnitOfMeasure = unitOfMeasure;
                mock.Object.ProductID = productID;
                mock.Object.UserID = userID;
                mock.Object.MasterID = masterID;
                // SampleRequestItem Properties
                mock.Object.ForceUniqueLineItemKey = forceUniqueLineItemKey;
                mock.Object.OriginalCurrencyID = originalCurrencyID;
                mock.Object.SellingCurrencyID = sellingCurrencyID;
                mock.Object.UnitCorePriceInSellingCurrency = unitCorePriceInSellingCurrency;
                mock.Object.UnitSoldPriceInSellingCurrency = unitSoldPriceInSellingCurrency;
                // Dynamic Linking
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.SampleRequestItemID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => RawSampleRequests?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => RawProducts == null || mock.Object.ProductID == null ? null : RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => RawAppliedSampleRequestItemDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSampleRequestItemDiscount>());
                mock.Setup(m => m.Targets).Returns(() => RawSampleRequestItemTargets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SampleRequestItemTarget>());
                // SampleRequestItem's Related Objects
                mock.Setup(m => m.OriginalCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginalCurrencyID)?.Object);
                mock.Setup(m => m.SellingCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SellingCurrencyID)?.Object);
                // SampleRequestItem's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SampleRequestItemTarget.</summary>
        /// <returns>The new SampleRequestItemTarget.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SampleRequestItemTarget>> CreateADummySampleRequestItemTargetAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int? brandProductID = null!, int destinationContactID = 1, int masterID = 1, bool nothingToShip = false, int? originProductInventoryLocationSectionID = null!, int? originStoreProductID = null!, int? originVendorProductID = null!, decimal quantity = 0m, int? selectedRateQuoteID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SampleRequestItemTarget>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // SampleRequestItemTarget Properties
                mock.Object.BrandProductID = brandProductID;
                mock.Object.DestinationContactID = destinationContactID;
                mock.Object.MasterID = masterID;
                mock.Object.NothingToShip = nothingToShip;
                mock.Object.OriginProductInventoryLocationSectionID = originProductInventoryLocationSectionID;
                mock.Object.OriginStoreProductID = originStoreProductID;
                mock.Object.OriginVendorProductID = originVendorProductID;
                mock.Object.Quantity = quantity;
                mock.Object.SelectedRateQuoteID = selectedRateQuoteID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // SampleRequestItemTarget's Related Objects
                mock.Setup(m => m.BrandProduct).Returns(() => RawBrandProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandProductID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.Master).Returns(() => RawSampleRequestItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.OriginProductInventoryLocationSection).Returns(() => RawProductInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginProductInventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginStoreProduct).Returns(() => RawStoreProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginStoreProductID)?.Object);
                mock.Setup(m => m.OriginVendorProduct).Returns(() => RawVendorProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginVendorProductID)?.Object);
                mock.Setup(m => m.SelectedRateQuote).Returns(() => RawRateQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SelectedRateQuoteID)?.Object);
                // SampleRequestItemTarget's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SampleRequestState.</summary>
        /// <returns>The new SampleRequestState.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SampleRequestState>> CreateADummySampleRequestStateAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SampleRequestState>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SampleRequestState Properties
                // Dynamic Linking
                // SampleRequestState's Related Objects
                // SampleRequestState's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SampleRequestStatus.</summary>
        /// <returns>The new SampleRequestStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SampleRequestStatus>> CreateADummySampleRequestStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SampleRequestStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SampleRequestStatus Properties
                // Dynamic Linking
                // SampleRequestStatus's Related Objects
                // SampleRequestStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SampleRequestType.</summary>
        /// <returns>The new SampleRequestType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SampleRequestType>> CreateADummySampleRequestTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SampleRequestType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SampleRequestType Properties
                // Dynamic Linking
                // SampleRequestType's Related Objects
                // SampleRequestType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForSampling(MockingSetup mockingSetup)
        {
            Func<SampleRequest> mockFuncSampleRequest = () =>
            {
                var mock = new Mock<SampleRequest>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SampleRequest Properties
                // Dynamic Linking
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => mockingSetup.RawSampleRequestFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SampleRequestFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.SampleRequestID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawSampleRequestStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => mockingSetup.RawSampleRequestStates?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSampleRequestTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => mockingSetup.RawSampleRequestItems?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SampleRequestItem>());
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawAppliedSampleRequestDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSampleRequestDiscount>());
                mock.Setup(m => m.Contacts).Returns(() => mockingSetup.RawSampleRequestContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SampleRequestContact>());
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => mockingSetup.RawAccounts == null || mock.Object.AccountID == null ? null : mockingSetup.RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.BillingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ShippingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.SalesGroup).Returns(() => mockingSetup.RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // SampleRequest's Associated Objects
                mock.Setup(m => m.RateQuotes).Returns(() => mockingSetup.RawRateQuotes?.Where(x => x.Object.SampleRequestID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RateQuote>());
                mock.Setup(m => m.SalesEvents).Returns(() => mockingSetup.RawSampleRequestEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SampleRequestEvent>());
                // SampleRequest's Related Objects
                return mock.Object;
            };
            For<ISampleRequest>().Use(() => mockFuncSampleRequest());
            For<SampleRequest>().Use(() => mockFuncSampleRequest());
            Func<SampleRequestContact> mockFuncSampleRequestContact = () =>
            {
                var mock = new Mock<SampleRequestContact>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SampleRequestContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSampleRequests?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SampleRequestContact's Associated Objects
                // SampleRequestContact's Related Objects
                return mock.Object;
            };
            For<ISampleRequestContact>().Use(() => mockFuncSampleRequestContact());
            For<SampleRequestContact>().Use(() => mockFuncSampleRequestContact());
            Func<SampleRequestEvent> mockFuncSampleRequestEvent = () =>
            {
                var mock = new Mock<SampleRequestEvent>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SampleRequestEvent Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSampleRequestEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSampleRequests?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // SampleRequestEvent's Associated Objects
                // SampleRequestEvent's Related Objects
                return mock.Object;
            };
            For<ISampleRequestEvent>().Use(() => mockFuncSampleRequestEvent());
            For<SampleRequestEvent>().Use(() => mockFuncSampleRequestEvent());
            Func<SampleRequestEventType> mockFuncSampleRequestEventType = () =>
            {
                var mock = new Mock<SampleRequestEventType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SampleRequestEventType Properties
                // Dynamic Linking
                // SampleRequestEventType's Associated Objects
                // SampleRequestEventType's Related Objects
                return mock.Object;
            };
            For<ISampleRequestEventType>().Use(() => mockFuncSampleRequestEventType());
            For<SampleRequestEventType>().Use(() => mockFuncSampleRequestEventType());
            Func<SampleRequestFile> mockFuncSampleRequestFile = () =>
            {
                var mock = new Mock<SampleRequestFile>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SampleRequestFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSampleRequests?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SampleRequestFile's Associated Objects
                // SampleRequestFile's Related Objects
                return mock.Object;
            };
            For<ISampleRequestFile>().Use(() => mockFuncSampleRequestFile());
            For<SampleRequestFile>().Use(() => mockFuncSampleRequestFile());
            Func<SampleRequestItem> mockFuncSampleRequestItem = () =>
            {
                var mock = new Mock<SampleRequestItem>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SampleRequestItem Properties
                // Dynamic Linking
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.SampleRequestItemID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSampleRequests?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => mockingSetup.RawProducts == null || mock.Object.ProductID == null ? null : mockingSetup.RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawAppliedSampleRequestItemDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSampleRequestItemDiscount>());
                mock.Setup(m => m.Targets).Returns(() => mockingSetup.RawSampleRequestItemTargets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SampleRequestItemTarget>());
                mock.Setup(m => m.OriginalCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginalCurrencyID)?.Object);
                mock.Setup(m => m.SellingCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SellingCurrencyID)?.Object);
                // SampleRequestItem's Associated Objects
                // SampleRequestItem's Related Objects
                return mock.Object;
            };
            For<ISampleRequestItem>().Use(() => mockFuncSampleRequestItem());
            For<SampleRequestItem>().Use(() => mockFuncSampleRequestItem());
            Func<SampleRequestItemTarget> mockFuncSampleRequestItemTarget = () =>
            {
                var mock = new Mock<SampleRequestItemTarget>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SampleRequestItemTarget Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.BrandProduct).Returns(() => mockingSetup.RawBrandProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandProductID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSampleRequestItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.OriginProductInventoryLocationSection).Returns(() => mockingSetup.RawProductInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginProductInventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginStoreProduct).Returns(() => mockingSetup.RawStoreProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginStoreProductID)?.Object);
                mock.Setup(m => m.OriginVendorProduct).Returns(() => mockingSetup.RawVendorProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginVendorProductID)?.Object);
                mock.Setup(m => m.SelectedRateQuote).Returns(() => mockingSetup.RawRateQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SelectedRateQuoteID)?.Object);
                // SampleRequestItemTarget's Associated Objects
                // SampleRequestItemTarget's Related Objects
                return mock.Object;
            };
            For<ISampleRequestItemTarget>().Use(() => mockFuncSampleRequestItemTarget());
            For<SampleRequestItemTarget>().Use(() => mockFuncSampleRequestItemTarget());
            Func<SampleRequestState> mockFuncSampleRequestState = () =>
            {
                var mock = new Mock<SampleRequestState>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SampleRequestState Properties
                // Dynamic Linking
                // SampleRequestState's Associated Objects
                // SampleRequestState's Related Objects
                return mock.Object;
            };
            For<ISampleRequestState>().Use(() => mockFuncSampleRequestState());
            For<SampleRequestState>().Use(() => mockFuncSampleRequestState());
            Func<SampleRequestStatus> mockFuncSampleRequestStatus = () =>
            {
                var mock = new Mock<SampleRequestStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SampleRequestStatus Properties
                // Dynamic Linking
                // SampleRequestStatus's Associated Objects
                // SampleRequestStatus's Related Objects
                return mock.Object;
            };
            For<ISampleRequestStatus>().Use(() => mockFuncSampleRequestStatus());
            For<SampleRequestStatus>().Use(() => mockFuncSampleRequestStatus());
            Func<SampleRequestType> mockFuncSampleRequestType = () =>
            {
                var mock = new Mock<SampleRequestType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SampleRequestType Properties
                // Dynamic Linking
                // SampleRequestType's Associated Objects
                // SampleRequestType's Related Objects
                return mock.Object;
            };
            For<ISampleRequestType>().Use(() => mockFuncSampleRequestType());
            For<SampleRequestType>().Use(() => mockFuncSampleRequestType());
        }
    }
}
