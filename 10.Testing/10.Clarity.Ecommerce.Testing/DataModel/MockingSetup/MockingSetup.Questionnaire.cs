// <autogenerated>
// <copyright file="Questionnaire.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Questionnaire section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoQuestionnaire { private get; set; }

        // Enable the tables specifically on run
        public bool DoAnswerTable { private get; set; }
        public bool DoQuestionTable { private get; set; }
        public bool DoQuestionOptionTable { private get; set; }
        public bool DoQuestionTypeTable { private get; set; }

        // Dirty Checking
        public bool AnswerDirty { private get; set; }
        public bool QuestionDirty { private get; set; }
        public bool QuestionOptionDirty { private get; set; }
        public bool QuestionTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<Answer>>? Answers { get; private set; }
        public Mock<DbSet<Question>>? Questions { get; private set; }
        public Mock<DbSet<QuestionOption>>? QuestionOptions { get; private set; }
        public Mock<DbSet<QuestionType>>? QuestionTypes { get; private set; }

        // Raw Data
        public List<Mock<Answer>>? RawAnswers { get; private set; }
        public List<Mock<Question>>? RawQuestions { get; private set; }
        public List<Mock<QuestionOption>>? RawQuestionOptions { get; private set; }
        public List<Mock<QuestionType>>? RawQuestionTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksQuestionnaireAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoQuestionnaire || (DoAnswerTable && (!dirtyOnly || AnswerDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAnswers == null) { throw new InvalidOperationException("Raw Answers was null"); }
                    await InitializeMockSetFromListAsync(Answers, RawAnswers).ConfigureAwait(false);
                    context.Setup(m => m.Answers).Returns(() => Answers?.Object!);
                    context.Setup(m => m.Set<Answer>()).Returns(() => Answers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoQuestionnaire || (DoQuestionTable && (!dirtyOnly || QuestionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawQuestions == null) { throw new InvalidOperationException("Raw Questions was null"); }
                    await InitializeMockSetFromListAsync(Questions, RawQuestions).ConfigureAwait(false);
                    context.Setup(m => m.Questions).Returns(() => Questions?.Object!);
                    context.Setup(m => m.Set<Question>()).Returns(() => Questions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoQuestionnaire || (DoQuestionOptionTable && (!dirtyOnly || QuestionOptionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawQuestionOptions == null) { throw new InvalidOperationException("Raw QuestionOptions was null"); }
                    await InitializeMockSetFromListAsync(QuestionOptions, RawQuestionOptions).ConfigureAwait(false);
                    context.Setup(m => m.QuestionOptions).Returns(() => QuestionOptions?.Object!);
                    context.Setup(m => m.Set<QuestionOption>()).Returns(() => QuestionOptions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoQuestionnaire || (DoQuestionTypeTable && (!dirtyOnly || QuestionTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawQuestionTypes == null) { throw new InvalidOperationException("Raw QuestionTypes was null"); }
                    await InitializeMockSetFromListAsync(QuestionTypes, RawQuestionTypes).ConfigureAwait(false);
                    context.Setup(m => m.QuestionTypes).Returns(() => QuestionTypes?.Object!);
                    context.Setup(m => m.Set<QuestionType>()).Returns(() => QuestionTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAnswersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Answer>> data)
        {
            if (!DoAll && !DoQuestionnaire && !DoAnswerTable) { return; }
            Answers ??= new Mock<DbSet<Answer>>();
            await InitializeMockSetFromListAsync(Answers, data).ConfigureAwait(false);
            context.Setup(m => m.Answers).Returns(() => Answers.Object);
            context.Setup(m => m.Set<Answer>()).Returns(() => Answers.Object);
            TableRecordCounts[typeof(Answer)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Answer)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Answer)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetQuestionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Question>> data)
        {
            if (!DoAll && !DoQuestionnaire && !DoQuestionTable) { return; }
            Questions ??= new Mock<DbSet<Question>>();
            await InitializeMockSetFromListAsync(Questions, data).ConfigureAwait(false);
            context.Setup(m => m.Questions).Returns(() => Questions.Object);
            context.Setup(m => m.Set<Question>()).Returns(() => Questions.Object);
            TableRecordCounts[typeof(Question)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Question)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Question)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetQuestionOptionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<QuestionOption>> data)
        {
            if (!DoAll && !DoQuestionnaire && !DoQuestionOptionTable) { return; }
            QuestionOptions ??= new Mock<DbSet<QuestionOption>>();
            await InitializeMockSetFromListAsync(QuestionOptions, data).ConfigureAwait(false);
            context.Setup(m => m.QuestionOptions).Returns(() => QuestionOptions.Object);
            context.Setup(m => m.Set<QuestionOption>()).Returns(() => QuestionOptions.Object);
            TableRecordCounts[typeof(QuestionOption)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(QuestionOption)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(QuestionOption)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetQuestionTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<QuestionType>> data)
        {
            if (!DoAll && !DoQuestionnaire && !DoQuestionTypeTable) { return; }
            QuestionTypes ??= new Mock<DbSet<QuestionType>>();
            await InitializeMockSetFromListAsync(QuestionTypes, data).ConfigureAwait(false);
            context.Setup(m => m.QuestionTypes).Returns(() => QuestionTypes.Object);
            context.Setup(m => m.Set<QuestionType>()).Returns(() => QuestionTypes.Object);
            TableRecordCounts[typeof(QuestionType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(QuestionType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(QuestionType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(QuestionType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(QuestionType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy Answer.</summary>
        /// <returns>The new Answer.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Answer>> CreateADummyAnswerAsync(int id, string? key, string? jsonAttributes = null, string additionalInformation = null!, int optionID = 1, int questionID = 1, int userID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Answer>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // Answer Properties
                mock.Object.AdditionalInformation = additionalInformation;
                mock.Object.OptionID = optionID;
                mock.Object.QuestionID = questionID;
                mock.Object.UserID = userID;
                // Dynamic Linking
                // Answer's Related Objects
                mock.Setup(m => m.Option).Returns(() => RawQuestionOptions?.FirstOrDefault(x => x.Object.ID == mock.Object.OptionID)?.Object);
                mock.Setup(m => m.Question).Returns(() => RawQuestions?.FirstOrDefault(x => x.Object.ID == mock.Object.QuestionID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // Answer's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Question.</summary>
        /// <returns>The new Question.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Question>> CreateADummyQuestionAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int? brandID = null!, int? nextQuestionID = null!, string questionTranslationKey = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Question>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // Question Properties
                mock.Object.BrandID = brandID;
                mock.Object.NextQuestionID = nextQuestionID;
                mock.Object.QuestionTranslationKey = questionTranslationKey;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawQuestionTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // Question's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.NextQuestion).Returns(() => RawQuestions?.FirstOrDefault(x => x.Object.ID == mock.Object.NextQuestionID)?.Object);
                // Question's Associated Objects
                mock.Setup(m => m.Answers).Returns(() => RawAnswers?.Where(x => x.Object.QuestionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Answer>());
                mock.Setup(m => m.FollowUpQuestionOptions).Returns(() => RawQuestionOptions?.Where(x => x.Object.QuestionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<QuestionOption>());
                mock.Setup(m => m.Options).Returns(() => RawQuestionOptions?.Where(x => x.Object.QuestionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<QuestionOption>());
                mock.Setup(m => m.ParentQuestions).Returns(() => RawQuestions?.Where(x => x.Object.NextQuestionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Question>());
                return mock;
            });
        }

        /// <summary>Creates a dummy QuestionOption.</summary>
        /// <returns>The new QuestionOption.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<QuestionOption>> CreateADummyQuestionOptionAsync(int id, string? key, string? jsonAttributes = null, int? followUpQuestionID = null!, string optionTranslationKey = null!, int questionID = 1, bool requiresAdditionalInformation = false, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<QuestionOption>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // QuestionOption Properties
                mock.Object.FollowUpQuestionID = followUpQuestionID;
                mock.Object.OptionTranslationKey = optionTranslationKey;
                mock.Object.QuestionID = questionID;
                mock.Object.RequiresAdditionalInformation = requiresAdditionalInformation;
                // Dynamic Linking
                // QuestionOption's Related Objects
                mock.Setup(m => m.FollowUpQuestion).Returns(() => RawQuestions?.FirstOrDefault(x => x.Object.ID == mock.Object.FollowUpQuestionID)?.Object);
                mock.Setup(m => m.Question).Returns(() => RawQuestions?.FirstOrDefault(x => x.Object.ID == mock.Object.QuestionID)?.Object);
                // QuestionOption's Associated Objects
                mock.Setup(m => m.Answers).Returns(() => RawAnswers?.Where(x => x.Object.OptionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Answer>());
                return mock;
            });
        }

        /// <summary>Creates a dummy QuestionType.</summary>
        /// <returns>The new QuestionType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<QuestionType>> CreateADummyQuestionTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<QuestionType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // QuestionType Properties
                // Dynamic Linking
                // QuestionType's Related Objects
                // QuestionType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForQuestionnaire(MockingSetup mockingSetup)
        {
            Func<Answer> mockFuncAnswer = () =>
            {
                var mock = new Mock<Answer>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Answer Properties
                // Dynamic Linking
                mock.Setup(m => m.Option).Returns(() => mockingSetup.RawQuestionOptions?.FirstOrDefault(x => x.Object.ID == mock.Object.OptionID)?.Object);
                mock.Setup(m => m.Question).Returns(() => mockingSetup.RawQuestions?.FirstOrDefault(x => x.Object.ID == mock.Object.QuestionID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // Answer's Associated Objects
                // Answer's Related Objects
                return mock.Object;
            };
            For<IAnswer>().Use(() => mockFuncAnswer());
            For<Answer>().Use(() => mockFuncAnswer());
            Func<Question> mockFuncQuestion = () =>
            {
                var mock = new Mock<Question>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Question Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawQuestionTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.NextQuestion).Returns(() => mockingSetup.RawQuestions?.FirstOrDefault(x => x.Object.ID == mock.Object.NextQuestionID)?.Object);
                // Question's Associated Objects
                mock.Setup(m => m.Answers).Returns(() => mockingSetup.RawAnswers?.Where(x => x.Object.QuestionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Answer>());
                mock.Setup(m => m.FollowUpQuestionOptions).Returns(() => mockingSetup.RawQuestionOptions?.Where(x => x.Object.QuestionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<QuestionOption>());
                mock.Setup(m => m.Options).Returns(() => mockingSetup.RawQuestionOptions?.Where(x => x.Object.QuestionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<QuestionOption>());
                mock.Setup(m => m.ParentQuestions).Returns(() => mockingSetup.RawQuestions?.Where(x => x.Object.NextQuestionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Question>());
                // Question's Related Objects
                return mock.Object;
            };
            For<IQuestion>().Use(() => mockFuncQuestion());
            For<Question>().Use(() => mockFuncQuestion());
            Func<QuestionOption> mockFuncQuestionOption = () =>
            {
                var mock = new Mock<QuestionOption>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // QuestionOption Properties
                // Dynamic Linking
                mock.Setup(m => m.FollowUpQuestion).Returns(() => mockingSetup.RawQuestions?.FirstOrDefault(x => x.Object.ID == mock.Object.FollowUpQuestionID)?.Object);
                mock.Setup(m => m.Question).Returns(() => mockingSetup.RawQuestions?.FirstOrDefault(x => x.Object.ID == mock.Object.QuestionID)?.Object);
                // QuestionOption's Associated Objects
                mock.Setup(m => m.Answers).Returns(() => mockingSetup.RawAnswers?.Where(x => x.Object.OptionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Answer>());
                // QuestionOption's Related Objects
                return mock.Object;
            };
            For<IQuestionOption>().Use(() => mockFuncQuestionOption());
            For<QuestionOption>().Use(() => mockFuncQuestionOption());
            Func<QuestionType> mockFuncQuestionType = () =>
            {
                var mock = new Mock<QuestionType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // QuestionType Properties
                // Dynamic Linking
                // QuestionType's Associated Objects
                // QuestionType's Related Objects
                return mock.Object;
            };
            For<IQuestionType>().Use(() => mockFuncQuestionType());
            For<QuestionType>().Use(() => mockFuncQuestionType());
        }
    }
}
