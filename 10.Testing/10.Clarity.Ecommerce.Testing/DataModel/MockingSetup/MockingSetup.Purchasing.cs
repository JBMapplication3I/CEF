// <autogenerated>
// <copyright file="Purchasing.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Purchasing section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoPurchasing { private get; set; }

        // Enable the tables specifically on run
        public bool DoPurchaseOrderTable { private get; set; }
        public bool DoPurchaseOrderContactTable { private get; set; }
        public bool DoPurchaseOrderEventTable { private get; set; }
        public bool DoPurchaseOrderEventTypeTable { private get; set; }
        public bool DoPurchaseOrderFileTable { private get; set; }
        public bool DoPurchaseOrderItemTable { private get; set; }
        public bool DoPurchaseOrderItemTargetTable { private get; set; }
        public bool DoPurchaseOrderStateTable { private get; set; }
        public bool DoPurchaseOrderStatusTable { private get; set; }
        public bool DoPurchaseOrderTypeTable { private get; set; }
        public bool DoSalesOrderPurchaseOrderTable { private get; set; }

        // Dirty Checking
        public bool PurchaseOrderDirty { private get; set; }
        public bool PurchaseOrderContactDirty { private get; set; }
        public bool PurchaseOrderEventDirty { private get; set; }
        public bool PurchaseOrderEventTypeDirty { private get; set; }
        public bool PurchaseOrderFileDirty { private get; set; }
        public bool PurchaseOrderItemDirty { private get; set; }
        public bool PurchaseOrderItemTargetDirty { private get; set; }
        public bool PurchaseOrderStateDirty { private get; set; }
        public bool PurchaseOrderStatusDirty { private get; set; }
        public bool PurchaseOrderTypeDirty { private get; set; }
        public bool SalesOrderPurchaseOrderDirty { private get; set; }

        // Sets
        public Mock<DbSet<PurchaseOrder>>? PurchaseOrders { get; private set; }
        public Mock<DbSet<PurchaseOrderContact>>? PurchaseOrderContacts { get; private set; }
        public Mock<DbSet<PurchaseOrderEvent>>? PurchaseOrderEvents { get; private set; }
        public Mock<DbSet<PurchaseOrderEventType>>? PurchaseOrderEventTypes { get; private set; }
        public Mock<DbSet<PurchaseOrderFile>>? PurchaseOrderFiles { get; private set; }
        public Mock<DbSet<PurchaseOrderItem>>? PurchaseOrderItems { get; private set; }
        public Mock<DbSet<PurchaseOrderItemTarget>>? PurchaseOrderItemTargets { get; private set; }
        public Mock<DbSet<PurchaseOrderState>>? PurchaseOrderStates { get; private set; }
        public Mock<DbSet<PurchaseOrderStatus>>? PurchaseOrderStatuses { get; private set; }
        public Mock<DbSet<PurchaseOrderType>>? PurchaseOrderTypes { get; private set; }
        public Mock<DbSet<SalesOrderPurchaseOrder>>? SalesOrderPurchaseOrders { get; private set; }

        // Raw Data
        public List<Mock<PurchaseOrder>>? RawPurchaseOrders { get; private set; }
        public List<Mock<PurchaseOrderContact>>? RawPurchaseOrderContacts { get; private set; }
        public List<Mock<PurchaseOrderEvent>>? RawPurchaseOrderEvents { get; private set; }
        public List<Mock<PurchaseOrderEventType>>? RawPurchaseOrderEventTypes { get; private set; }
        public List<Mock<PurchaseOrderFile>>? RawPurchaseOrderFiles { get; private set; }
        public List<Mock<PurchaseOrderItem>>? RawPurchaseOrderItems { get; private set; }
        public List<Mock<PurchaseOrderItemTarget>>? RawPurchaseOrderItemTargets { get; private set; }
        public List<Mock<PurchaseOrderState>>? RawPurchaseOrderStates { get; private set; }
        public List<Mock<PurchaseOrderStatus>>? RawPurchaseOrderStatuses { get; private set; }
        public List<Mock<PurchaseOrderType>>? RawPurchaseOrderTypes { get; private set; }
        public List<Mock<SalesOrderPurchaseOrder>>? RawSalesOrderPurchaseOrders { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksPurchasingAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoPurchasing || (DoPurchaseOrderTable && (!dirtyOnly || PurchaseOrderDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPurchaseOrders == null) { throw new InvalidOperationException("Raw PurchaseOrders was null"); }
                    await InitializeMockSetFromListAsync(PurchaseOrders, RawPurchaseOrders).ConfigureAwait(false);
                    context.Setup(m => m.PurchaseOrders).Returns(() => PurchaseOrders?.Object!);
                    context.Setup(m => m.Set<PurchaseOrder>()).Returns(() => PurchaseOrders?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPurchasing || (DoPurchaseOrderContactTable && (!dirtyOnly || PurchaseOrderContactDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPurchaseOrderContacts == null) { throw new InvalidOperationException("Raw PurchaseOrderContacts was null"); }
                    await InitializeMockSetFromListAsync(PurchaseOrderContacts, RawPurchaseOrderContacts).ConfigureAwait(false);
                    context.Setup(m => m.PurchaseOrderContacts).Returns(() => PurchaseOrderContacts?.Object!);
                    context.Setup(m => m.Set<PurchaseOrderContact>()).Returns(() => PurchaseOrderContacts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPurchasing || (DoPurchaseOrderEventTable && (!dirtyOnly || PurchaseOrderEventDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPurchaseOrderEvents == null) { throw new InvalidOperationException("Raw PurchaseOrderEvents was null"); }
                    await InitializeMockSetFromListAsync(PurchaseOrderEvents, RawPurchaseOrderEvents).ConfigureAwait(false);
                    context.Setup(m => m.PurchaseOrderEvents).Returns(() => PurchaseOrderEvents?.Object!);
                    context.Setup(m => m.Set<PurchaseOrderEvent>()).Returns(() => PurchaseOrderEvents?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPurchasing || (DoPurchaseOrderEventTypeTable && (!dirtyOnly || PurchaseOrderEventTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPurchaseOrderEventTypes == null) { throw new InvalidOperationException("Raw PurchaseOrderEventTypes was null"); }
                    await InitializeMockSetFromListAsync(PurchaseOrderEventTypes, RawPurchaseOrderEventTypes).ConfigureAwait(false);
                    context.Setup(m => m.PurchaseOrderEventTypes).Returns(() => PurchaseOrderEventTypes?.Object!);
                    context.Setup(m => m.Set<PurchaseOrderEventType>()).Returns(() => PurchaseOrderEventTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPurchasing || (DoPurchaseOrderFileTable && (!dirtyOnly || PurchaseOrderFileDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPurchaseOrderFiles == null) { throw new InvalidOperationException("Raw PurchaseOrderFiles was null"); }
                    await InitializeMockSetFromListAsync(PurchaseOrderFiles, RawPurchaseOrderFiles).ConfigureAwait(false);
                    context.Setup(m => m.PurchaseOrderFiles).Returns(() => PurchaseOrderFiles?.Object!);
                    context.Setup(m => m.Set<PurchaseOrderFile>()).Returns(() => PurchaseOrderFiles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPurchasing || (DoPurchaseOrderItemTable && (!dirtyOnly || PurchaseOrderItemDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPurchaseOrderItems == null) { throw new InvalidOperationException("Raw PurchaseOrderItems was null"); }
                    await InitializeMockSetFromListAsync(PurchaseOrderItems, RawPurchaseOrderItems).ConfigureAwait(false);
                    context.Setup(m => m.PurchaseOrderItems).Returns(() => PurchaseOrderItems?.Object!);
                    context.Setup(m => m.Set<PurchaseOrderItem>()).Returns(() => PurchaseOrderItems?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPurchasing || (DoPurchaseOrderItemTargetTable && (!dirtyOnly || PurchaseOrderItemTargetDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPurchaseOrderItemTargets == null) { throw new InvalidOperationException("Raw PurchaseOrderItemTargets was null"); }
                    await InitializeMockSetFromListAsync(PurchaseOrderItemTargets, RawPurchaseOrderItemTargets).ConfigureAwait(false);
                    context.Setup(m => m.PurchaseOrderItemTargets).Returns(() => PurchaseOrderItemTargets?.Object!);
                    context.Setup(m => m.Set<PurchaseOrderItemTarget>()).Returns(() => PurchaseOrderItemTargets?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPurchasing || (DoPurchaseOrderStateTable && (!dirtyOnly || PurchaseOrderStateDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPurchaseOrderStates == null) { throw new InvalidOperationException("Raw PurchaseOrderStates was null"); }
                    await InitializeMockSetFromListAsync(PurchaseOrderStates, RawPurchaseOrderStates).ConfigureAwait(false);
                    context.Setup(m => m.PurchaseOrderStates).Returns(() => PurchaseOrderStates?.Object!);
                    context.Setup(m => m.Set<PurchaseOrderState>()).Returns(() => PurchaseOrderStates?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPurchasing || (DoPurchaseOrderStatusTable && (!dirtyOnly || PurchaseOrderStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPurchaseOrderStatuses == null) { throw new InvalidOperationException("Raw PurchaseOrderStatuses was null"); }
                    await InitializeMockSetFromListAsync(PurchaseOrderStatuses, RawPurchaseOrderStatuses).ConfigureAwait(false);
                    context.Setup(m => m.PurchaseOrderStatuses).Returns(() => PurchaseOrderStatuses?.Object!);
                    context.Setup(m => m.Set<PurchaseOrderStatus>()).Returns(() => PurchaseOrderStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPurchasing || (DoPurchaseOrderTypeTable && (!dirtyOnly || PurchaseOrderTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPurchaseOrderTypes == null) { throw new InvalidOperationException("Raw PurchaseOrderTypes was null"); }
                    await InitializeMockSetFromListAsync(PurchaseOrderTypes, RawPurchaseOrderTypes).ConfigureAwait(false);
                    context.Setup(m => m.PurchaseOrderTypes).Returns(() => PurchaseOrderTypes?.Object!);
                    context.Setup(m => m.Set<PurchaseOrderType>()).Returns(() => PurchaseOrderTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPurchasing || (DoSalesOrderPurchaseOrderTable && (!dirtyOnly || SalesOrderPurchaseOrderDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesOrderPurchaseOrders == null) { throw new InvalidOperationException("Raw SalesOrderPurchaseOrders was null"); }
                    await InitializeMockSetFromListAsync(SalesOrderPurchaseOrders, RawSalesOrderPurchaseOrders).ConfigureAwait(false);
                    context.Setup(m => m.SalesOrderPurchaseOrders).Returns(() => SalesOrderPurchaseOrders?.Object!);
                    context.Setup(m => m.Set<SalesOrderPurchaseOrder>()).Returns(() => SalesOrderPurchaseOrders?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPurchaseOrdersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PurchaseOrder>> data)
        {
            if (!DoAll && !DoPurchasing && !DoPurchaseOrderTable) { return; }
            PurchaseOrders ??= new Mock<DbSet<PurchaseOrder>>();
            await InitializeMockSetFromListAsync(PurchaseOrders, data).ConfigureAwait(false);
            context.Setup(m => m.PurchaseOrders).Returns(() => PurchaseOrders.Object);
            context.Setup(m => m.Set<PurchaseOrder>()).Returns(() => PurchaseOrders.Object);
            TableRecordCounts[typeof(PurchaseOrder)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PurchaseOrder)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PurchaseOrder)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPurchaseOrderContactsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PurchaseOrderContact>> data)
        {
            if (!DoAll && !DoPurchasing && !DoPurchaseOrderContactTable) { return; }
            PurchaseOrderContacts ??= new Mock<DbSet<PurchaseOrderContact>>();
            await InitializeMockSetFromListAsync(PurchaseOrderContacts, data).ConfigureAwait(false);
            context.Setup(m => m.PurchaseOrderContacts).Returns(() => PurchaseOrderContacts.Object);
            context.Setup(m => m.Set<PurchaseOrderContact>()).Returns(() => PurchaseOrderContacts.Object);
            TableRecordCounts[typeof(PurchaseOrderContact)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PurchaseOrderContact)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PurchaseOrderContact)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPurchaseOrderEventsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PurchaseOrderEvent>> data)
        {
            if (!DoAll && !DoPurchasing && !DoPurchaseOrderEventTable) { return; }
            PurchaseOrderEvents ??= new Mock<DbSet<PurchaseOrderEvent>>();
            await InitializeMockSetFromListAsync(PurchaseOrderEvents, data).ConfigureAwait(false);
            context.Setup(m => m.PurchaseOrderEvents).Returns(() => PurchaseOrderEvents.Object);
            context.Setup(m => m.Set<PurchaseOrderEvent>()).Returns(() => PurchaseOrderEvents.Object);
            TableRecordCounts[typeof(PurchaseOrderEvent)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PurchaseOrderEvent)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PurchaseOrderEvent)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PurchaseOrderEvent)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPurchaseOrderEventTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PurchaseOrderEventType>> data)
        {
            if (!DoAll && !DoPurchasing && !DoPurchaseOrderEventTypeTable) { return; }
            PurchaseOrderEventTypes ??= new Mock<DbSet<PurchaseOrderEventType>>();
            await InitializeMockSetFromListAsync(PurchaseOrderEventTypes, data).ConfigureAwait(false);
            context.Setup(m => m.PurchaseOrderEventTypes).Returns(() => PurchaseOrderEventTypes.Object);
            context.Setup(m => m.Set<PurchaseOrderEventType>()).Returns(() => PurchaseOrderEventTypes.Object);
            TableRecordCounts[typeof(PurchaseOrderEventType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PurchaseOrderEventType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PurchaseOrderEventType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PurchaseOrderEventType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(PurchaseOrderEventType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPurchaseOrderFilesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PurchaseOrderFile>> data)
        {
            if (!DoAll && !DoPurchasing && !DoPurchaseOrderFileTable) { return; }
            PurchaseOrderFiles ??= new Mock<DbSet<PurchaseOrderFile>>();
            await InitializeMockSetFromListAsync(PurchaseOrderFiles, data).ConfigureAwait(false);
            context.Setup(m => m.PurchaseOrderFiles).Returns(() => PurchaseOrderFiles.Object);
            context.Setup(m => m.Set<PurchaseOrderFile>()).Returns(() => PurchaseOrderFiles.Object);
            TableRecordCounts[typeof(PurchaseOrderFile)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PurchaseOrderFile)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PurchaseOrderFile)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PurchaseOrderFile)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPurchaseOrderItemsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PurchaseOrderItem>> data)
        {
            if (!DoAll && !DoPurchasing && !DoPurchaseOrderItemTable) { return; }
            PurchaseOrderItems ??= new Mock<DbSet<PurchaseOrderItem>>();
            await InitializeMockSetFromListAsync(PurchaseOrderItems, data).ConfigureAwait(false);
            context.Setup(m => m.PurchaseOrderItems).Returns(() => PurchaseOrderItems.Object);
            context.Setup(m => m.Set<PurchaseOrderItem>()).Returns(() => PurchaseOrderItems.Object);
            TableRecordCounts[typeof(PurchaseOrderItem)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PurchaseOrderItem)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PurchaseOrderItem)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PurchaseOrderItem)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPurchaseOrderItemTargetsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PurchaseOrderItemTarget>> data)
        {
            if (!DoAll && !DoPurchasing && !DoPurchaseOrderItemTargetTable) { return; }
            PurchaseOrderItemTargets ??= new Mock<DbSet<PurchaseOrderItemTarget>>();
            await InitializeMockSetFromListAsync(PurchaseOrderItemTargets, data).ConfigureAwait(false);
            context.Setup(m => m.PurchaseOrderItemTargets).Returns(() => PurchaseOrderItemTargets.Object);
            context.Setup(m => m.Set<PurchaseOrderItemTarget>()).Returns(() => PurchaseOrderItemTargets.Object);
            TableRecordCounts[typeof(PurchaseOrderItemTarget)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PurchaseOrderItemTarget)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PurchaseOrderItemTarget)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPurchaseOrderStatesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PurchaseOrderState>> data)
        {
            if (!DoAll && !DoPurchasing && !DoPurchaseOrderStateTable) { return; }
            PurchaseOrderStates ??= new Mock<DbSet<PurchaseOrderState>>();
            await InitializeMockSetFromListAsync(PurchaseOrderStates, data).ConfigureAwait(false);
            context.Setup(m => m.PurchaseOrderStates).Returns(() => PurchaseOrderStates.Object);
            context.Setup(m => m.Set<PurchaseOrderState>()).Returns(() => PurchaseOrderStates.Object);
            TableRecordCounts[typeof(PurchaseOrderState)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PurchaseOrderState)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PurchaseOrderState)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PurchaseOrderState)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(PurchaseOrderState)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPurchaseOrderStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PurchaseOrderStatus>> data)
        {
            if (!DoAll && !DoPurchasing && !DoPurchaseOrderStatusTable) { return; }
            PurchaseOrderStatuses ??= new Mock<DbSet<PurchaseOrderStatus>>();
            await InitializeMockSetFromListAsync(PurchaseOrderStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.PurchaseOrderStatuses).Returns(() => PurchaseOrderStatuses.Object);
            context.Setup(m => m.Set<PurchaseOrderStatus>()).Returns(() => PurchaseOrderStatuses.Object);
            TableRecordCounts[typeof(PurchaseOrderStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PurchaseOrderStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PurchaseOrderStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PurchaseOrderStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(PurchaseOrderStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPurchaseOrderTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PurchaseOrderType>> data)
        {
            if (!DoAll && !DoPurchasing && !DoPurchaseOrderTypeTable) { return; }
            PurchaseOrderTypes ??= new Mock<DbSet<PurchaseOrderType>>();
            await InitializeMockSetFromListAsync(PurchaseOrderTypes, data).ConfigureAwait(false);
            context.Setup(m => m.PurchaseOrderTypes).Returns(() => PurchaseOrderTypes.Object);
            context.Setup(m => m.Set<PurchaseOrderType>()).Returns(() => PurchaseOrderTypes.Object);
            TableRecordCounts[typeof(PurchaseOrderType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PurchaseOrderType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PurchaseOrderType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PurchaseOrderType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(PurchaseOrderType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesOrderPurchaseOrdersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesOrderPurchaseOrder>> data)
        {
            if (!DoAll && !DoPurchasing && !DoSalesOrderPurchaseOrderTable) { return; }
            SalesOrderPurchaseOrders ??= new Mock<DbSet<SalesOrderPurchaseOrder>>();
            await InitializeMockSetFromListAsync(SalesOrderPurchaseOrders, data).ConfigureAwait(false);
            context.Setup(m => m.SalesOrderPurchaseOrders).Returns(() => SalesOrderPurchaseOrders.Object);
            context.Setup(m => m.Set<SalesOrderPurchaseOrder>()).Returns(() => SalesOrderPurchaseOrders.Object);
            TableRecordCounts[typeof(SalesOrderPurchaseOrder)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesOrderPurchaseOrder)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesOrderPurchaseOrder)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy PurchaseOrder.</summary>
        /// <returns>The new PurchaseOrder.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PurchaseOrder>> CreateADummyPurchaseOrderAsync(int id, string? key, string? jsonAttributes = null, DateTime? dueDate = null, decimal subtotalItems = 0m, decimal subtotalShipping = 0m, decimal subtotalTaxes = 0m, decimal subtotalFees = 0m, decimal subtotalHandling = 0m, decimal subtotalDiscounts = 0m, decimal total = 0m, bool? shippingSameAsBilling = null, int? userID = null, int? accountID = null, int statusID = 1, int stateID = 1, int typeID = 1, int? billingContactID = null, int? shippingContactID = null, DateTime? actualReceiptDate = null!, int? brandID = null!, DateTime? estimatedReceiptDate = null!, int? franchiseID = null!, int? inventoryLocationID = null!, DateTime? releaseDate = null!, int? salesGroupID = null!, int? shipCarrierID = null!, int? storeID = null!, string trackingNumber = null!, int? vendorID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PurchaseOrder>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ISalesCollectionBase Properties
                mock.Object.DueDate = dueDate;
                mock.Object.SubtotalItems = subtotalItems;
                mock.Object.SubtotalShipping = subtotalShipping;
                mock.Object.SubtotalTaxes = subtotalTaxes;
                mock.Object.SubtotalFees = subtotalFees;
                mock.Object.SubtotalHandling = subtotalHandling;
                mock.Object.SubtotalDiscounts = subtotalDiscounts;
                mock.Object.Total = total;
                mock.Object.ShippingSameAsBilling = shippingSameAsBilling;
                mock.Object.UserID = userID;
                mock.Object.AccountID = accountID;
                mock.Object.StatusID = statusID;
                mock.Object.StateID = stateID;
                mock.Object.TypeID = typeID;
                mock.Object.BillingContactID = billingContactID;
                mock.Object.ShippingContactID = shippingContactID;
                // PurchaseOrder Properties
                mock.Object.ActualReceiptDate = actualReceiptDate;
                mock.Object.BrandID = brandID;
                mock.Object.EstimatedReceiptDate = estimatedReceiptDate;
                mock.Object.FranchiseID = franchiseID;
                mock.Object.InventoryLocationID = inventoryLocationID;
                mock.Object.ReleaseDate = releaseDate;
                mock.Object.SalesGroupID = salesGroupID;
                mock.Object.ShipCarrierID = shipCarrierID;
                mock.Object.StoreID = storeID;
                mock.Object.TrackingNumber = trackingNumber;
                mock.Object.VendorID = vendorID;
                // Dynamic Linking
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => RawPurchaseOrderFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrderFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.PurchaseOrderID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => RawPurchaseOrderStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => RawPurchaseOrderStates?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawPurchaseOrderTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => RawPurchaseOrderItems?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrderItem>());
                mock.Setup(m => m.Discounts).Returns(() => RawAppliedPurchaseOrderDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedPurchaseOrderDiscount>());
                mock.Setup(m => m.Contacts).Returns(() => RawPurchaseOrderContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrderContact>());
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => RawAccounts == null || mock.Object.AccountID == null ? null : RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => RawContacts == null || mock.Object.BillingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => RawContacts == null || mock.Object.ShippingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
                // PurchaseOrder's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.InventoryLocation).Returns(() => RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.InventoryLocationID)?.Object);
                mock.Setup(m => m.SalesGroup).Returns(() => RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupID)?.Object);
                mock.Setup(m => m.ShipCarrier).Returns(() => RawShipCarriers?.FirstOrDefault(x => x.Object.ID == mock.Object.ShipCarrierID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                mock.Setup(m => m.Vendor).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.VendorID)?.Object);
                // PurchaseOrder's Associated Objects
                mock.Setup(m => m.AssociatedSalesOrders).Returns(() => RawSalesOrderPurchaseOrders?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderPurchaseOrder>());
                mock.Setup(m => m.RateQuotes).Returns(() => RawRateQuotes?.Where(x => x.Object.PurchaseOrderID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RateQuote>());
                mock.Setup(m => m.SalesEvents).Returns(() => RawPurchaseOrderEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrderEvent>());
                return mock;
            });
        }

        /// <summary>Creates a dummy PurchaseOrderContact.</summary>
        /// <returns>The new PurchaseOrderContact.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PurchaseOrderContact>> CreateADummyPurchaseOrderContactAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PurchaseOrderContact>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmAContactRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // PurchaseOrderContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawPurchaseOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PurchaseOrderContact's Related Objects
                // PurchaseOrderContact's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PurchaseOrderEvent.</summary>
        /// <returns>The new PurchaseOrderEvent.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PurchaseOrderEvent>> CreateADummyPurchaseOrderEventAsync(int id, string? key, string? name, string? desc = null, int masterID = 1, long? oldHash = null, long? newHash = null, int? oldStateID = null, int? newStateID = null, int? oldStatusID = null, int? newStatusID = null, int? oldTypeID = null, int? newTypeID = null, string? oldRecordSerialized = null, string? newRecordSerialized = null, int typeID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PurchaseOrderEvent>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // ISalesEventBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.OldHash = oldHash;
                mock.Object.NewHash = newHash;
                mock.Object.OldStateID = oldStateID;
                mock.Object.NewStateID = newStateID;
                mock.Object.OldStatusID = oldStatusID;
                mock.Object.NewStatusID = newStatusID;
                mock.Object.OldTypeID = oldTypeID;
                mock.Object.NewTypeID = newTypeID;
                mock.Object.OldRecordSerialized = oldRecordSerialized;
                mock.Object.NewRecordSerialized = newRecordSerialized;
                // PurchaseOrderEvent Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawPurchaseOrderEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => RawPurchaseOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // PurchaseOrderEvent's Related Objects
                // PurchaseOrderEvent's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PurchaseOrderEventType.</summary>
        /// <returns>The new PurchaseOrderEventType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PurchaseOrderEventType>> CreateADummyPurchaseOrderEventTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PurchaseOrderEventType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // PurchaseOrderEventType Properties
                // Dynamic Linking
                // PurchaseOrderEventType's Related Objects
                // PurchaseOrderEventType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PurchaseOrderFile.</summary>
        /// <returns>The new PurchaseOrderFile.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PurchaseOrderFile>> CreateADummyPurchaseOrderFileAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PurchaseOrderFile>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
                // PurchaseOrderFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawPurchaseOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PurchaseOrderFile's Related Objects
                // PurchaseOrderFile's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PurchaseOrderItem.</summary>
        /// <returns>The new PurchaseOrderItem.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PurchaseOrderItem>> CreateADummyPurchaseOrderItemAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, decimal quantity = 1m, decimal? quantityBackOrdered = 0m, decimal? quantityPreSold = 0m, decimal unitCorePrice = 0m, decimal? unitSoldPrice = null, string? sku = null, string? unitOfMeasure = null, int? productID = null, int? userID = null, int masterID = 1, DateTime? dateReceived = null!, string forceUniqueLineItemKey = null!, int? originalCurrencyID = null!, int? sellingCurrencyID = null!, decimal? unitCorePriceInSellingCurrency = null!, decimal? unitSoldPriceInSellingCurrency = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PurchaseOrderItem>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // ISalesItemBase Properties
                mock.Object.Quantity = quantity;
                mock.Object.QuantityBackOrdered = quantityBackOrdered;
                mock.Object.QuantityPreSold = quantityPreSold;
                mock.Object.UnitCorePrice = unitCorePrice;
                mock.Object.UnitSoldPrice = unitSoldPrice;
                mock.Object.Sku = sku;
                mock.Object.UnitOfMeasure = unitOfMeasure;
                mock.Object.ProductID = productID;
                mock.Object.UserID = userID;
                mock.Object.MasterID = masterID;
                // PurchaseOrderItem Properties
                mock.Object.DateReceived = dateReceived;
                mock.Object.ForceUniqueLineItemKey = forceUniqueLineItemKey;
                mock.Object.OriginalCurrencyID = originalCurrencyID;
                mock.Object.SellingCurrencyID = sellingCurrencyID;
                mock.Object.UnitCorePriceInSellingCurrency = unitCorePriceInSellingCurrency;
                mock.Object.UnitSoldPriceInSellingCurrency = unitSoldPriceInSellingCurrency;
                // Dynamic Linking
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.PurchaseOrderItemID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => RawPurchaseOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => RawProducts == null || mock.Object.ProductID == null ? null : RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => RawAppliedPurchaseOrderItemDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedPurchaseOrderItemDiscount>());
                mock.Setup(m => m.Targets).Returns(() => RawPurchaseOrderItemTargets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrderItemTarget>());
                // PurchaseOrderItem's Related Objects
                mock.Setup(m => m.OriginalCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginalCurrencyID)?.Object);
                mock.Setup(m => m.SellingCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SellingCurrencyID)?.Object);
                // PurchaseOrderItem's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PurchaseOrderItemTarget.</summary>
        /// <returns>The new PurchaseOrderItemTarget.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PurchaseOrderItemTarget>> CreateADummyPurchaseOrderItemTargetAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int? brandProductID = null!, int destinationContactID = 1, int masterID = 1, bool nothingToShip = false, int? originProductInventoryLocationSectionID = null!, int? originStoreProductID = null!, int? originVendorProductID = null!, decimal quantity = 0m, int? selectedRateQuoteID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PurchaseOrderItemTarget>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // PurchaseOrderItemTarget Properties
                mock.Object.BrandProductID = brandProductID;
                mock.Object.DestinationContactID = destinationContactID;
                mock.Object.MasterID = masterID;
                mock.Object.NothingToShip = nothingToShip;
                mock.Object.OriginProductInventoryLocationSectionID = originProductInventoryLocationSectionID;
                mock.Object.OriginStoreProductID = originStoreProductID;
                mock.Object.OriginVendorProductID = originVendorProductID;
                mock.Object.Quantity = quantity;
                mock.Object.SelectedRateQuoteID = selectedRateQuoteID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // PurchaseOrderItemTarget's Related Objects
                mock.Setup(m => m.BrandProduct).Returns(() => RawBrandProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandProductID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.Master).Returns(() => RawPurchaseOrderItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.OriginProductInventoryLocationSection).Returns(() => RawProductInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginProductInventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginStoreProduct).Returns(() => RawStoreProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginStoreProductID)?.Object);
                mock.Setup(m => m.OriginVendorProduct).Returns(() => RawVendorProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginVendorProductID)?.Object);
                mock.Setup(m => m.SelectedRateQuote).Returns(() => RawRateQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SelectedRateQuoteID)?.Object);
                // PurchaseOrderItemTarget's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PurchaseOrderState.</summary>
        /// <returns>The new PurchaseOrderState.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PurchaseOrderState>> CreateADummyPurchaseOrderStateAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PurchaseOrderState>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // PurchaseOrderState Properties
                // Dynamic Linking
                // PurchaseOrderState's Related Objects
                // PurchaseOrderState's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PurchaseOrderStatus.</summary>
        /// <returns>The new PurchaseOrderStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PurchaseOrderStatus>> CreateADummyPurchaseOrderStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PurchaseOrderStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // PurchaseOrderStatus Properties
                // Dynamic Linking
                // PurchaseOrderStatus's Related Objects
                // PurchaseOrderStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PurchaseOrderType.</summary>
        /// <returns>The new PurchaseOrderType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PurchaseOrderType>> CreateADummyPurchaseOrderTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PurchaseOrderType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // PurchaseOrderType Properties
                // Dynamic Linking
                // PurchaseOrderType's Related Objects
                // PurchaseOrderType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesOrderPurchaseOrder.</summary>
        /// <returns>The new SalesOrderPurchaseOrder.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesOrderPurchaseOrder>> CreateADummySalesOrderPurchaseOrderAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesOrderPurchaseOrder>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // SalesOrderPurchaseOrder Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // SalesOrderPurchaseOrder's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawPurchaseOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesOrderPurchaseOrder's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForPurchasing(MockingSetup mockingSetup)
        {
            Func<PurchaseOrder> mockFuncPurchaseOrder = () =>
            {
                var mock = new Mock<PurchaseOrder>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PurchaseOrder Properties
                // Dynamic Linking
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => mockingSetup.RawPurchaseOrderFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrderFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.PurchaseOrderID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawPurchaseOrderStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => mockingSetup.RawPurchaseOrderStates?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawPurchaseOrderTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => mockingSetup.RawPurchaseOrderItems?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrderItem>());
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawAppliedPurchaseOrderDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedPurchaseOrderDiscount>());
                mock.Setup(m => m.Contacts).Returns(() => mockingSetup.RawPurchaseOrderContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrderContact>());
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => mockingSetup.RawAccounts == null || mock.Object.AccountID == null ? null : mockingSetup.RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.BillingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ShippingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.InventoryLocation).Returns(() => mockingSetup.RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.InventoryLocationID)?.Object);
                mock.Setup(m => m.SalesGroup).Returns(() => mockingSetup.RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupID)?.Object);
                mock.Setup(m => m.ShipCarrier).Returns(() => mockingSetup.RawShipCarriers?.FirstOrDefault(x => x.Object.ID == mock.Object.ShipCarrierID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                mock.Setup(m => m.Vendor).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.VendorID)?.Object);
                // PurchaseOrder's Associated Objects
                mock.Setup(m => m.AssociatedSalesOrders).Returns(() => mockingSetup.RawSalesOrderPurchaseOrders?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderPurchaseOrder>());
                mock.Setup(m => m.RateQuotes).Returns(() => mockingSetup.RawRateQuotes?.Where(x => x.Object.PurchaseOrderID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RateQuote>());
                mock.Setup(m => m.SalesEvents).Returns(() => mockingSetup.RawPurchaseOrderEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrderEvent>());
                // PurchaseOrder's Related Objects
                return mock.Object;
            };
            For<IPurchaseOrder>().Use(() => mockFuncPurchaseOrder());
            For<PurchaseOrder>().Use(() => mockFuncPurchaseOrder());
            Func<PurchaseOrderContact> mockFuncPurchaseOrderContact = () =>
            {
                var mock = new Mock<PurchaseOrderContact>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PurchaseOrderContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPurchaseOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PurchaseOrderContact's Associated Objects
                // PurchaseOrderContact's Related Objects
                return mock.Object;
            };
            For<IPurchaseOrderContact>().Use(() => mockFuncPurchaseOrderContact());
            For<PurchaseOrderContact>().Use(() => mockFuncPurchaseOrderContact());
            Func<PurchaseOrderEvent> mockFuncPurchaseOrderEvent = () =>
            {
                var mock = new Mock<PurchaseOrderEvent>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PurchaseOrderEvent Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawPurchaseOrderEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPurchaseOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // PurchaseOrderEvent's Associated Objects
                // PurchaseOrderEvent's Related Objects
                return mock.Object;
            };
            For<IPurchaseOrderEvent>().Use(() => mockFuncPurchaseOrderEvent());
            For<PurchaseOrderEvent>().Use(() => mockFuncPurchaseOrderEvent());
            Func<PurchaseOrderEventType> mockFuncPurchaseOrderEventType = () =>
            {
                var mock = new Mock<PurchaseOrderEventType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PurchaseOrderEventType Properties
                // Dynamic Linking
                // PurchaseOrderEventType's Associated Objects
                // PurchaseOrderEventType's Related Objects
                return mock.Object;
            };
            For<IPurchaseOrderEventType>().Use(() => mockFuncPurchaseOrderEventType());
            For<PurchaseOrderEventType>().Use(() => mockFuncPurchaseOrderEventType());
            Func<PurchaseOrderFile> mockFuncPurchaseOrderFile = () =>
            {
                var mock = new Mock<PurchaseOrderFile>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PurchaseOrderFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPurchaseOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PurchaseOrderFile's Associated Objects
                // PurchaseOrderFile's Related Objects
                return mock.Object;
            };
            For<IPurchaseOrderFile>().Use(() => mockFuncPurchaseOrderFile());
            For<PurchaseOrderFile>().Use(() => mockFuncPurchaseOrderFile());
            Func<PurchaseOrderItem> mockFuncPurchaseOrderItem = () =>
            {
                var mock = new Mock<PurchaseOrderItem>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PurchaseOrderItem Properties
                // Dynamic Linking
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.PurchaseOrderItemID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPurchaseOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => mockingSetup.RawProducts == null || mock.Object.ProductID == null ? null : mockingSetup.RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawAppliedPurchaseOrderItemDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedPurchaseOrderItemDiscount>());
                mock.Setup(m => m.Targets).Returns(() => mockingSetup.RawPurchaseOrderItemTargets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrderItemTarget>());
                mock.Setup(m => m.OriginalCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginalCurrencyID)?.Object);
                mock.Setup(m => m.SellingCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SellingCurrencyID)?.Object);
                // PurchaseOrderItem's Associated Objects
                // PurchaseOrderItem's Related Objects
                return mock.Object;
            };
            For<IPurchaseOrderItem>().Use(() => mockFuncPurchaseOrderItem());
            For<PurchaseOrderItem>().Use(() => mockFuncPurchaseOrderItem());
            Func<PurchaseOrderItemTarget> mockFuncPurchaseOrderItemTarget = () =>
            {
                var mock = new Mock<PurchaseOrderItemTarget>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PurchaseOrderItemTarget Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.BrandProduct).Returns(() => mockingSetup.RawBrandProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandProductID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPurchaseOrderItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.OriginProductInventoryLocationSection).Returns(() => mockingSetup.RawProductInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginProductInventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginStoreProduct).Returns(() => mockingSetup.RawStoreProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginStoreProductID)?.Object);
                mock.Setup(m => m.OriginVendorProduct).Returns(() => mockingSetup.RawVendorProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginVendorProductID)?.Object);
                mock.Setup(m => m.SelectedRateQuote).Returns(() => mockingSetup.RawRateQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SelectedRateQuoteID)?.Object);
                // PurchaseOrderItemTarget's Associated Objects
                // PurchaseOrderItemTarget's Related Objects
                return mock.Object;
            };
            For<IPurchaseOrderItemTarget>().Use(() => mockFuncPurchaseOrderItemTarget());
            For<PurchaseOrderItemTarget>().Use(() => mockFuncPurchaseOrderItemTarget());
            Func<PurchaseOrderState> mockFuncPurchaseOrderState = () =>
            {
                var mock = new Mock<PurchaseOrderState>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PurchaseOrderState Properties
                // Dynamic Linking
                // PurchaseOrderState's Associated Objects
                // PurchaseOrderState's Related Objects
                return mock.Object;
            };
            For<IPurchaseOrderState>().Use(() => mockFuncPurchaseOrderState());
            For<PurchaseOrderState>().Use(() => mockFuncPurchaseOrderState());
            Func<PurchaseOrderStatus> mockFuncPurchaseOrderStatus = () =>
            {
                var mock = new Mock<PurchaseOrderStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PurchaseOrderStatus Properties
                // Dynamic Linking
                // PurchaseOrderStatus's Associated Objects
                // PurchaseOrderStatus's Related Objects
                return mock.Object;
            };
            For<IPurchaseOrderStatus>().Use(() => mockFuncPurchaseOrderStatus());
            For<PurchaseOrderStatus>().Use(() => mockFuncPurchaseOrderStatus());
            Func<PurchaseOrderType> mockFuncPurchaseOrderType = () =>
            {
                var mock = new Mock<PurchaseOrderType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PurchaseOrderType Properties
                // Dynamic Linking
                // PurchaseOrderType's Associated Objects
                // PurchaseOrderType's Related Objects
                return mock.Object;
            };
            For<IPurchaseOrderType>().Use(() => mockFuncPurchaseOrderType());
            For<PurchaseOrderType>().Use(() => mockFuncPurchaseOrderType());
            Func<SalesOrderPurchaseOrder> mockFuncSalesOrderPurchaseOrder = () =>
            {
                var mock = new Mock<SalesOrderPurchaseOrder>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesOrderPurchaseOrder Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawPurchaseOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesOrderPurchaseOrder's Associated Objects
                // SalesOrderPurchaseOrder's Related Objects
                return mock.Object;
            };
            For<ISalesOrderPurchaseOrder>().Use(() => mockFuncSalesOrderPurchaseOrder());
            For<SalesOrderPurchaseOrder>().Use(() => mockFuncSalesOrderPurchaseOrder());
        }
    }
}
