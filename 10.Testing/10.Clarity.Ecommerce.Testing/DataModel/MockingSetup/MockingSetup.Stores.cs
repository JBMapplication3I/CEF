// <autogenerated>
// <copyright file="Stores.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Stores section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoStores { private get; set; }

        // Enable the tables specifically on run
        public bool DoSiteDomainTable { private get; set; }
        public bool DoSiteDomainSocialProviderTable { private get; set; }
        public bool DoSocialProviderTable { private get; set; }
        public bool DoStoreTable { private get; set; }
        public bool DoStoreAccountTable { private get; set; }
        public bool DoStoreBadgeTable { private get; set; }
        public bool DoStoreCategoryTable { private get; set; }
        public bool DoStoreContactTable { private get; set; }
        public bool DoStoreCountryTable { private get; set; }
        public bool DoStoreDistrictTable { private get; set; }
        public bool DoStoreImageTable { private get; set; }
        public bool DoStoreImageTypeTable { private get; set; }
        public bool DoStoreInventoryLocationTable { private get; set; }
        public bool DoStoreInventoryLocationTypeTable { private get; set; }
        public bool DoStoreManufacturerTable { private get; set; }
        public bool DoStoreProductTable { private get; set; }
        public bool DoStoreRegionTable { private get; set; }
        public bool DoStoreSubscriptionTable { private get; set; }
        public bool DoStoreTypeTable { private get; set; }
        public bool DoStoreUserTable { private get; set; }
        public bool DoStoreVendorTable { private get; set; }

        // Dirty Checking
        public bool SiteDomainDirty { private get; set; }
        public bool SiteDomainSocialProviderDirty { private get; set; }
        public bool SocialProviderDirty { private get; set; }
        public bool StoreDirty { private get; set; }
        public bool StoreAccountDirty { private get; set; }
        public bool StoreBadgeDirty { private get; set; }
        public bool StoreCategoryDirty { private get; set; }
        public bool StoreContactDirty { private get; set; }
        public bool StoreCountryDirty { private get; set; }
        public bool StoreDistrictDirty { private get; set; }
        public bool StoreImageDirty { private get; set; }
        public bool StoreImageTypeDirty { private get; set; }
        public bool StoreInventoryLocationDirty { private get; set; }
        public bool StoreInventoryLocationTypeDirty { private get; set; }
        public bool StoreManufacturerDirty { private get; set; }
        public bool StoreProductDirty { private get; set; }
        public bool StoreRegionDirty { private get; set; }
        public bool StoreSubscriptionDirty { private get; set; }
        public bool StoreTypeDirty { private get; set; }
        public bool StoreUserDirty { private get; set; }
        public bool StoreVendorDirty { private get; set; }

        // Sets
        public Mock<DbSet<SiteDomain>>? SiteDomains { get; private set; }
        public Mock<DbSet<SiteDomainSocialProvider>>? SiteDomainSocialProviders { get; private set; }
        public Mock<DbSet<SocialProvider>>? SocialProviders { get; private set; }
        public Mock<DbSet<Store>>? Stores { get; private set; }
        public Mock<DbSet<StoreAccount>>? StoreAccounts { get; private set; }
        public Mock<DbSet<StoreBadge>>? StoreBadges { get; private set; }
        public Mock<DbSet<StoreCategory>>? StoreCategories { get; private set; }
        public Mock<DbSet<StoreContact>>? StoreContacts { get; private set; }
        public Mock<DbSet<StoreCountry>>? StoreCountries { get; private set; }
        public Mock<DbSet<StoreDistrict>>? StoreDistricts { get; private set; }
        public Mock<DbSet<StoreImage>>? StoreImages { get; private set; }
        public Mock<DbSet<StoreImageType>>? StoreImageTypes { get; private set; }
        public Mock<DbSet<StoreInventoryLocation>>? StoreInventoryLocations { get; private set; }
        public Mock<DbSet<StoreInventoryLocationType>>? StoreInventoryLocationTypes { get; private set; }
        public Mock<DbSet<StoreManufacturer>>? StoreManufacturers { get; private set; }
        public Mock<DbSet<StoreProduct>>? StoreProducts { get; private set; }
        public Mock<DbSet<StoreRegion>>? StoreRegions { get; private set; }
        public Mock<DbSet<StoreSubscription>>? StoreSubscriptions { get; private set; }
        public Mock<DbSet<StoreType>>? StoreTypes { get; private set; }
        public Mock<DbSet<StoreUser>>? StoreUsers { get; private set; }
        public Mock<DbSet<StoreVendor>>? StoreVendors { get; private set; }

        // Raw Data
        public List<Mock<SiteDomain>>? RawSiteDomains { get; private set; }
        public List<Mock<SiteDomainSocialProvider>>? RawSiteDomainSocialProviders { get; private set; }
        public List<Mock<SocialProvider>>? RawSocialProviders { get; private set; }
        public List<Mock<Store>>? RawStores { get; private set; }
        public List<Mock<StoreAccount>>? RawStoreAccounts { get; private set; }
        public List<Mock<StoreBadge>>? RawStoreBadges { get; private set; }
        public List<Mock<StoreCategory>>? RawStoreCategories { get; private set; }
        public List<Mock<StoreContact>>? RawStoreContacts { get; private set; }
        public List<Mock<StoreCountry>>? RawStoreCountries { get; private set; }
        public List<Mock<StoreDistrict>>? RawStoreDistricts { get; private set; }
        public List<Mock<StoreImage>>? RawStoreImages { get; private set; }
        public List<Mock<StoreImageType>>? RawStoreImageTypes { get; private set; }
        public List<Mock<StoreInventoryLocation>>? RawStoreInventoryLocations { get; private set; }
        public List<Mock<StoreInventoryLocationType>>? RawStoreInventoryLocationTypes { get; private set; }
        public List<Mock<StoreManufacturer>>? RawStoreManufacturers { get; private set; }
        public List<Mock<StoreProduct>>? RawStoreProducts { get; private set; }
        public List<Mock<StoreRegion>>? RawStoreRegions { get; private set; }
        public List<Mock<StoreSubscription>>? RawStoreSubscriptions { get; private set; }
        public List<Mock<StoreType>>? RawStoreTypes { get; private set; }
        public List<Mock<StoreUser>>? RawStoreUsers { get; private set; }
        public List<Mock<StoreVendor>>? RawStoreVendors { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksStoresAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoStores || (DoSiteDomainTable && (!dirtyOnly || SiteDomainDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSiteDomains == null) { throw new InvalidOperationException("Raw SiteDomains was null"); }
                    await InitializeMockSetFromListAsync(SiteDomains, RawSiteDomains).ConfigureAwait(false);
                    context.Setup(m => m.SiteDomains).Returns(() => SiteDomains?.Object!);
                    context.Setup(m => m.Set<SiteDomain>()).Returns(() => SiteDomains?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoSiteDomainSocialProviderTable && (!dirtyOnly || SiteDomainSocialProviderDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSiteDomainSocialProviders == null) { throw new InvalidOperationException("Raw SiteDomainSocialProviders was null"); }
                    await InitializeMockSetFromListAsync(SiteDomainSocialProviders, RawSiteDomainSocialProviders).ConfigureAwait(false);
                    context.Setup(m => m.SiteDomainSocialProviders).Returns(() => SiteDomainSocialProviders?.Object!);
                    context.Setup(m => m.Set<SiteDomainSocialProvider>()).Returns(() => SiteDomainSocialProviders?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoSocialProviderTable && (!dirtyOnly || SocialProviderDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSocialProviders == null) { throw new InvalidOperationException("Raw SocialProviders was null"); }
                    await InitializeMockSetFromListAsync(SocialProviders, RawSocialProviders).ConfigureAwait(false);
                    context.Setup(m => m.SocialProviders).Returns(() => SocialProviders?.Object!);
                    context.Setup(m => m.Set<SocialProvider>()).Returns(() => SocialProviders?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreTable && (!dirtyOnly || StoreDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStores == null) { throw new InvalidOperationException("Raw Stores was null"); }
                    await InitializeMockSetFromListAsync(Stores, RawStores).ConfigureAwait(false);
                    context.Setup(m => m.Stores).Returns(() => Stores?.Object!);
                    context.Setup(m => m.Set<Store>()).Returns(() => Stores?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreAccountTable && (!dirtyOnly || StoreAccountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreAccounts == null) { throw new InvalidOperationException("Raw StoreAccounts was null"); }
                    await InitializeMockSetFromListAsync(StoreAccounts, RawStoreAccounts).ConfigureAwait(false);
                    context.Setup(m => m.StoreAccounts).Returns(() => StoreAccounts?.Object!);
                    context.Setup(m => m.Set<StoreAccount>()).Returns(() => StoreAccounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreBadgeTable && (!dirtyOnly || StoreBadgeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreBadges == null) { throw new InvalidOperationException("Raw StoreBadges was null"); }
                    await InitializeMockSetFromListAsync(StoreBadges, RawStoreBadges).ConfigureAwait(false);
                    context.Setup(m => m.StoreBadges).Returns(() => StoreBadges?.Object!);
                    context.Setup(m => m.Set<StoreBadge>()).Returns(() => StoreBadges?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreCategoryTable && (!dirtyOnly || StoreCategoryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreCategories == null) { throw new InvalidOperationException("Raw StoreCategories was null"); }
                    await InitializeMockSetFromListAsync(StoreCategories, RawStoreCategories).ConfigureAwait(false);
                    context.Setup(m => m.StoreCategories).Returns(() => StoreCategories?.Object!);
                    context.Setup(m => m.Set<StoreCategory>()).Returns(() => StoreCategories?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreContactTable && (!dirtyOnly || StoreContactDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreContacts == null) { throw new InvalidOperationException("Raw StoreContacts was null"); }
                    await InitializeMockSetFromListAsync(StoreContacts, RawStoreContacts).ConfigureAwait(false);
                    context.Setup(m => m.StoreContacts).Returns(() => StoreContacts?.Object!);
                    context.Setup(m => m.Set<StoreContact>()).Returns(() => StoreContacts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreCountryTable && (!dirtyOnly || StoreCountryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreCountries == null) { throw new InvalidOperationException("Raw StoreCountries was null"); }
                    await InitializeMockSetFromListAsync(StoreCountries, RawStoreCountries).ConfigureAwait(false);
                    context.Setup(m => m.StoreCountries).Returns(() => StoreCountries?.Object!);
                    context.Setup(m => m.Set<StoreCountry>()).Returns(() => StoreCountries?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreDistrictTable && (!dirtyOnly || StoreDistrictDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreDistricts == null) { throw new InvalidOperationException("Raw StoreDistricts was null"); }
                    await InitializeMockSetFromListAsync(StoreDistricts, RawStoreDistricts).ConfigureAwait(false);
                    context.Setup(m => m.StoreDistricts).Returns(() => StoreDistricts?.Object!);
                    context.Setup(m => m.Set<StoreDistrict>()).Returns(() => StoreDistricts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreImageTable && (!dirtyOnly || StoreImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreImages == null) { throw new InvalidOperationException("Raw StoreImages was null"); }
                    await InitializeMockSetFromListAsync(StoreImages, RawStoreImages).ConfigureAwait(false);
                    context.Setup(m => m.StoreImages).Returns(() => StoreImages?.Object!);
                    context.Setup(m => m.Set<StoreImage>()).Returns(() => StoreImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreImageTypeTable && (!dirtyOnly || StoreImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreImageTypes == null) { throw new InvalidOperationException("Raw StoreImageTypes was null"); }
                    await InitializeMockSetFromListAsync(StoreImageTypes, RawStoreImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.StoreImageTypes).Returns(() => StoreImageTypes?.Object!);
                    context.Setup(m => m.Set<StoreImageType>()).Returns(() => StoreImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreInventoryLocationTable && (!dirtyOnly || StoreInventoryLocationDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreInventoryLocations == null) { throw new InvalidOperationException("Raw StoreInventoryLocations was null"); }
                    await InitializeMockSetFromListAsync(StoreInventoryLocations, RawStoreInventoryLocations).ConfigureAwait(false);
                    context.Setup(m => m.StoreInventoryLocations).Returns(() => StoreInventoryLocations?.Object!);
                    context.Setup(m => m.Set<StoreInventoryLocation>()).Returns(() => StoreInventoryLocations?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreInventoryLocationTypeTable && (!dirtyOnly || StoreInventoryLocationTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreInventoryLocationTypes == null) { throw new InvalidOperationException("Raw StoreInventoryLocationTypes was null"); }
                    await InitializeMockSetFromListAsync(StoreInventoryLocationTypes, RawStoreInventoryLocationTypes).ConfigureAwait(false);
                    context.Setup(m => m.StoreInventoryLocationTypes).Returns(() => StoreInventoryLocationTypes?.Object!);
                    context.Setup(m => m.Set<StoreInventoryLocationType>()).Returns(() => StoreInventoryLocationTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreManufacturerTable && (!dirtyOnly || StoreManufacturerDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreManufacturers == null) { throw new InvalidOperationException("Raw StoreManufacturers was null"); }
                    await InitializeMockSetFromListAsync(StoreManufacturers, RawStoreManufacturers).ConfigureAwait(false);
                    context.Setup(m => m.StoreManufacturers).Returns(() => StoreManufacturers?.Object!);
                    context.Setup(m => m.Set<StoreManufacturer>()).Returns(() => StoreManufacturers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreProductTable && (!dirtyOnly || StoreProductDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreProducts == null) { throw new InvalidOperationException("Raw StoreProducts was null"); }
                    await InitializeMockSetFromListAsync(StoreProducts, RawStoreProducts).ConfigureAwait(false);
                    context.Setup(m => m.StoreProducts).Returns(() => StoreProducts?.Object!);
                    context.Setup(m => m.Set<StoreProduct>()).Returns(() => StoreProducts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreRegionTable && (!dirtyOnly || StoreRegionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreRegions == null) { throw new InvalidOperationException("Raw StoreRegions was null"); }
                    await InitializeMockSetFromListAsync(StoreRegions, RawStoreRegions).ConfigureAwait(false);
                    context.Setup(m => m.StoreRegions).Returns(() => StoreRegions?.Object!);
                    context.Setup(m => m.Set<StoreRegion>()).Returns(() => StoreRegions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreSubscriptionTable && (!dirtyOnly || StoreSubscriptionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreSubscriptions == null) { throw new InvalidOperationException("Raw StoreSubscriptions was null"); }
                    await InitializeMockSetFromListAsync(StoreSubscriptions, RawStoreSubscriptions).ConfigureAwait(false);
                    context.Setup(m => m.StoreSubscriptions).Returns(() => StoreSubscriptions?.Object!);
                    context.Setup(m => m.Set<StoreSubscription>()).Returns(() => StoreSubscriptions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreTypeTable && (!dirtyOnly || StoreTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreTypes == null) { throw new InvalidOperationException("Raw StoreTypes was null"); }
                    await InitializeMockSetFromListAsync(StoreTypes, RawStoreTypes).ConfigureAwait(false);
                    context.Setup(m => m.StoreTypes).Returns(() => StoreTypes?.Object!);
                    context.Setup(m => m.Set<StoreType>()).Returns(() => StoreTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreUserTable && (!dirtyOnly || StoreUserDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreUsers == null) { throw new InvalidOperationException("Raw StoreUsers was null"); }
                    await InitializeMockSetFromListAsync(StoreUsers, RawStoreUsers).ConfigureAwait(false);
                    context.Setup(m => m.StoreUsers).Returns(() => StoreUsers?.Object!);
                    context.Setup(m => m.Set<StoreUser>()).Returns(() => StoreUsers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoStores || (DoStoreVendorTable && (!dirtyOnly || StoreVendorDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreVendors == null) { throw new InvalidOperationException("Raw StoreVendors was null"); }
                    await InitializeMockSetFromListAsync(StoreVendors, RawStoreVendors).ConfigureAwait(false);
                    context.Setup(m => m.StoreVendors).Returns(() => StoreVendors?.Object!);
                    context.Setup(m => m.Set<StoreVendor>()).Returns(() => StoreVendors?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSiteDomainsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SiteDomain>> data)
        {
            if (!DoAll && !DoStores && !DoSiteDomainTable) { return; }
            SiteDomains ??= new Mock<DbSet<SiteDomain>>();
            await InitializeMockSetFromListAsync(SiteDomains, data).ConfigureAwait(false);
            context.Setup(m => m.SiteDomains).Returns(() => SiteDomains.Object);
            context.Setup(m => m.Set<SiteDomain>()).Returns(() => SiteDomains.Object);
            TableRecordCounts[typeof(SiteDomain)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SiteDomain)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SiteDomain)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SiteDomain)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSiteDomainSocialProvidersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SiteDomainSocialProvider>> data)
        {
            if (!DoAll && !DoStores && !DoSiteDomainSocialProviderTable) { return; }
            SiteDomainSocialProviders ??= new Mock<DbSet<SiteDomainSocialProvider>>();
            await InitializeMockSetFromListAsync(SiteDomainSocialProviders, data).ConfigureAwait(false);
            context.Setup(m => m.SiteDomainSocialProviders).Returns(() => SiteDomainSocialProviders.Object);
            context.Setup(m => m.Set<SiteDomainSocialProvider>()).Returns(() => SiteDomainSocialProviders.Object);
            TableRecordCounts[typeof(SiteDomainSocialProvider)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SiteDomainSocialProvider)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SiteDomainSocialProvider)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSocialProvidersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SocialProvider>> data)
        {
            if (!DoAll && !DoStores && !DoSocialProviderTable) { return; }
            SocialProviders ??= new Mock<DbSet<SocialProvider>>();
            await InitializeMockSetFromListAsync(SocialProviders, data).ConfigureAwait(false);
            context.Setup(m => m.SocialProviders).Returns(() => SocialProviders.Object);
            context.Setup(m => m.Set<SocialProvider>()).Returns(() => SocialProviders.Object);
            TableRecordCounts[typeof(SocialProvider)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SocialProvider)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SocialProvider)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SocialProvider)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoresAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Store>> data)
        {
            if (!DoAll && !DoStores && !DoStoreTable) { return; }
            Stores ??= new Mock<DbSet<Store>>();
            await InitializeMockSetFromListAsync(Stores, data).ConfigureAwait(false);
            context.Setup(m => m.Stores).Returns(() => Stores.Object);
            context.Setup(m => m.Set<Store>()).Returns(() => Stores.Object);
            TableRecordCounts[typeof(Store)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Store)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Store)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Store)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreAccountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreAccount>> data)
        {
            if (!DoAll && !DoStores && !DoStoreAccountTable) { return; }
            StoreAccounts ??= new Mock<DbSet<StoreAccount>>();
            await InitializeMockSetFromListAsync(StoreAccounts, data).ConfigureAwait(false);
            context.Setup(m => m.StoreAccounts).Returns(() => StoreAccounts.Object);
            context.Setup(m => m.Set<StoreAccount>()).Returns(() => StoreAccounts.Object);
            TableRecordCounts[typeof(StoreAccount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreAccount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreAccount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreBadgesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreBadge>> data)
        {
            if (!DoAll && !DoStores && !DoStoreBadgeTable) { return; }
            StoreBadges ??= new Mock<DbSet<StoreBadge>>();
            await InitializeMockSetFromListAsync(StoreBadges, data).ConfigureAwait(false);
            context.Setup(m => m.StoreBadges).Returns(() => StoreBadges.Object);
            context.Setup(m => m.Set<StoreBadge>()).Returns(() => StoreBadges.Object);
            TableRecordCounts[typeof(StoreBadge)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreBadge)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreBadge)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreCategoriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreCategory>> data)
        {
            if (!DoAll && !DoStores && !DoStoreCategoryTable) { return; }
            StoreCategories ??= new Mock<DbSet<StoreCategory>>();
            await InitializeMockSetFromListAsync(StoreCategories, data).ConfigureAwait(false);
            context.Setup(m => m.StoreCategories).Returns(() => StoreCategories.Object);
            context.Setup(m => m.Set<StoreCategory>()).Returns(() => StoreCategories.Object);
            TableRecordCounts[typeof(StoreCategory)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreCategory)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreCategory)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreContactsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreContact>> data)
        {
            if (!DoAll && !DoStores && !DoStoreContactTable) { return; }
            StoreContacts ??= new Mock<DbSet<StoreContact>>();
            await InitializeMockSetFromListAsync(StoreContacts, data).ConfigureAwait(false);
            context.Setup(m => m.StoreContacts).Returns(() => StoreContacts.Object);
            context.Setup(m => m.Set<StoreContact>()).Returns(() => StoreContacts.Object);
            TableRecordCounts[typeof(StoreContact)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreContact)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreContact)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(StoreContact)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreCountriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreCountry>> data)
        {
            if (!DoAll && !DoStores && !DoStoreCountryTable) { return; }
            StoreCountries ??= new Mock<DbSet<StoreCountry>>();
            await InitializeMockSetFromListAsync(StoreCountries, data).ConfigureAwait(false);
            context.Setup(m => m.StoreCountries).Returns(() => StoreCountries.Object);
            context.Setup(m => m.Set<StoreCountry>()).Returns(() => StoreCountries.Object);
            TableRecordCounts[typeof(StoreCountry)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreCountry)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreCountry)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreDistrictsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreDistrict>> data)
        {
            if (!DoAll && !DoStores && !DoStoreDistrictTable) { return; }
            StoreDistricts ??= new Mock<DbSet<StoreDistrict>>();
            await InitializeMockSetFromListAsync(StoreDistricts, data).ConfigureAwait(false);
            context.Setup(m => m.StoreDistricts).Returns(() => StoreDistricts.Object);
            context.Setup(m => m.Set<StoreDistrict>()).Returns(() => StoreDistricts.Object);
            TableRecordCounts[typeof(StoreDistrict)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreDistrict)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreDistrict)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreImage>> data)
        {
            if (!DoAll && !DoStores && !DoStoreImageTable) { return; }
            StoreImages ??= new Mock<DbSet<StoreImage>>();
            await InitializeMockSetFromListAsync(StoreImages, data).ConfigureAwait(false);
            context.Setup(m => m.StoreImages).Returns(() => StoreImages.Object);
            context.Setup(m => m.Set<StoreImage>()).Returns(() => StoreImages.Object);
            TableRecordCounts[typeof(StoreImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(StoreImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreImageType>> data)
        {
            if (!DoAll && !DoStores && !DoStoreImageTypeTable) { return; }
            StoreImageTypes ??= new Mock<DbSet<StoreImageType>>();
            await InitializeMockSetFromListAsync(StoreImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.StoreImageTypes).Returns(() => StoreImageTypes.Object);
            context.Setup(m => m.Set<StoreImageType>()).Returns(() => StoreImageTypes.Object);
            TableRecordCounts[typeof(StoreImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(StoreImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(StoreImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreInventoryLocationsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreInventoryLocation>> data)
        {
            if (!DoAll && !DoStores && !DoStoreInventoryLocationTable) { return; }
            StoreInventoryLocations ??= new Mock<DbSet<StoreInventoryLocation>>();
            await InitializeMockSetFromListAsync(StoreInventoryLocations, data).ConfigureAwait(false);
            context.Setup(m => m.StoreInventoryLocations).Returns(() => StoreInventoryLocations.Object);
            context.Setup(m => m.Set<StoreInventoryLocation>()).Returns(() => StoreInventoryLocations.Object);
            TableRecordCounts[typeof(StoreInventoryLocation)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreInventoryLocation)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreInventoryLocation)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreInventoryLocationTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreInventoryLocationType>> data)
        {
            if (!DoAll && !DoStores && !DoStoreInventoryLocationTypeTable) { return; }
            StoreInventoryLocationTypes ??= new Mock<DbSet<StoreInventoryLocationType>>();
            await InitializeMockSetFromListAsync(StoreInventoryLocationTypes, data).ConfigureAwait(false);
            context.Setup(m => m.StoreInventoryLocationTypes).Returns(() => StoreInventoryLocationTypes.Object);
            context.Setup(m => m.Set<StoreInventoryLocationType>()).Returns(() => StoreInventoryLocationTypes.Object);
            TableRecordCounts[typeof(StoreInventoryLocationType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreInventoryLocationType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreInventoryLocationType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(StoreInventoryLocationType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(StoreInventoryLocationType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreManufacturersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreManufacturer>> data)
        {
            if (!DoAll && !DoStores && !DoStoreManufacturerTable) { return; }
            StoreManufacturers ??= new Mock<DbSet<StoreManufacturer>>();
            await InitializeMockSetFromListAsync(StoreManufacturers, data).ConfigureAwait(false);
            context.Setup(m => m.StoreManufacturers).Returns(() => StoreManufacturers.Object);
            context.Setup(m => m.Set<StoreManufacturer>()).Returns(() => StoreManufacturers.Object);
            TableRecordCounts[typeof(StoreManufacturer)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreManufacturer)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreManufacturer)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreProductsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreProduct>> data)
        {
            if (!DoAll && !DoStores && !DoStoreProductTable) { return; }
            StoreProducts ??= new Mock<DbSet<StoreProduct>>();
            await InitializeMockSetFromListAsync(StoreProducts, data).ConfigureAwait(false);
            context.Setup(m => m.StoreProducts).Returns(() => StoreProducts.Object);
            context.Setup(m => m.Set<StoreProduct>()).Returns(() => StoreProducts.Object);
            TableRecordCounts[typeof(StoreProduct)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreProduct)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreProduct)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreRegionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreRegion>> data)
        {
            if (!DoAll && !DoStores && !DoStoreRegionTable) { return; }
            StoreRegions ??= new Mock<DbSet<StoreRegion>>();
            await InitializeMockSetFromListAsync(StoreRegions, data).ConfigureAwait(false);
            context.Setup(m => m.StoreRegions).Returns(() => StoreRegions.Object);
            context.Setup(m => m.Set<StoreRegion>()).Returns(() => StoreRegions.Object);
            TableRecordCounts[typeof(StoreRegion)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreRegion)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreRegion)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreSubscriptionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreSubscription>> data)
        {
            if (!DoAll && !DoStores && !DoStoreSubscriptionTable) { return; }
            StoreSubscriptions ??= new Mock<DbSet<StoreSubscription>>();
            await InitializeMockSetFromListAsync(StoreSubscriptions, data).ConfigureAwait(false);
            context.Setup(m => m.StoreSubscriptions).Returns(() => StoreSubscriptions.Object);
            context.Setup(m => m.Set<StoreSubscription>()).Returns(() => StoreSubscriptions.Object);
            TableRecordCounts[typeof(StoreSubscription)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreSubscription)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreSubscription)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreType>> data)
        {
            if (!DoAll && !DoStores && !DoStoreTypeTable) { return; }
            StoreTypes ??= new Mock<DbSet<StoreType>>();
            await InitializeMockSetFromListAsync(StoreTypes, data).ConfigureAwait(false);
            context.Setup(m => m.StoreTypes).Returns(() => StoreTypes.Object);
            context.Setup(m => m.Set<StoreType>()).Returns(() => StoreTypes.Object);
            TableRecordCounts[typeof(StoreType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(StoreType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(StoreType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreUsersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreUser>> data)
        {
            if (!DoAll && !DoStores && !DoStoreUserTable) { return; }
            StoreUsers ??= new Mock<DbSet<StoreUser>>();
            await InitializeMockSetFromListAsync(StoreUsers, data).ConfigureAwait(false);
            context.Setup(m => m.StoreUsers).Returns(() => StoreUsers.Object);
            context.Setup(m => m.Set<StoreUser>()).Returns(() => StoreUsers.Object);
            TableRecordCounts[typeof(StoreUser)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreUser)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreUser)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreVendorsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreVendor>> data)
        {
            if (!DoAll && !DoStores && !DoStoreVendorTable) { return; }
            StoreVendors ??= new Mock<DbSet<StoreVendor>>();
            await InitializeMockSetFromListAsync(StoreVendors, data).ConfigureAwait(false);
            context.Setup(m => m.StoreVendors).Returns(() => StoreVendors.Object);
            context.Setup(m => m.Set<StoreVendor>()).Returns(() => StoreVendors.Object);
            TableRecordCounts[typeof(StoreVendor)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreVendor)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreVendor)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy SiteDomain.</summary>
        /// <returns>The new SiteDomain.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SiteDomain>> CreateADummySiteDomainAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, string alternateUrl1 = null!, string alternateUrl2 = null!, string alternateUrl3 = null!, string catalogContent = null!, string footerContent = null!, string headerContent = null!, string sideBarContent = null!, string url = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SiteDomain>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // SiteDomain Properties
                mock.Object.AlternateUrl1 = alternateUrl1;
                mock.Object.AlternateUrl2 = alternateUrl2;
                mock.Object.AlternateUrl3 = alternateUrl3;
                mock.Object.CatalogContent = catalogContent;
                mock.Object.FooterContent = footerContent;
                mock.Object.HeaderContent = headerContent;
                mock.Object.SideBarContent = sideBarContent;
                mock.Object.Url = url;
                // Dynamic Linking
                // SiteDomain's Related Objects
                // SiteDomain's Associated Objects
                mock.Setup(m => m.Brands).Returns(() => RawBrandSiteDomains?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandSiteDomain>());
                //mock.Setup(m => m.Franchises).Returns(() => RawFranchiseSiteDomains?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseSiteDomain>());
                //mock.Setup(m => m.SiteDomainSocialProviders).Returns(() => RawSiteDomainSocialProviders?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SiteDomainSocialProvider>());
                return mock;
            });
        }

        /// <summary>Creates a dummy SiteDomainSocialProvider.</summary>
        /// <returns>The new SiteDomainSocialProvider.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SiteDomainSocialProvider>> CreateADummySiteDomainSocialProviderAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, string script = null!, int slaveID = 1, string urlValues = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SiteDomainSocialProvider>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // SiteDomainSocialProvider Properties
                mock.Object.MasterID = masterID;
                mock.Object.Script = script;
                mock.Object.SlaveID = slaveID;
                mock.Object.UrlValues = urlValues;
                // Dynamic Linking
                // SiteDomainSocialProvider's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSiteDomains?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawSocialProviders?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SiteDomainSocialProvider's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SocialProvider.</summary>
        /// <returns>The new SocialProvider.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SocialProvider>> CreateADummySocialProviderAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, string url = null!, string urlFormat = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SocialProvider>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // SocialProvider Properties
                mock.Object.Url = url;
                mock.Object.UrlFormat = urlFormat;
                // Dynamic Linking
                // SocialProvider's Related Objects
                // SocialProvider's Associated Objects
                mock.Setup(m => m.SiteDomainSocialProviders).Returns(() => RawSiteDomainSocialProviders?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SiteDomainSocialProvider>());
                return mock;
            });
        }

        /// <summary>Creates a dummy Store.</summary>
        /// <returns>The new Store.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Store>> CreateADummyStoreAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, int typeID = 1, int? contactID = null, string? jsonAttributes = null, string about = null!, bool? displayInStorefront = null!, DateTime? endDate = null!, string externalUrl = null!, int? languageID = null!, decimal? minimumForFreeShippingDollarAmount = null!, decimal? minimumForFreeShippingDollarAmountAfter = null!, int? minimumForFreeShippingDollarAmountBufferCategoryID = null!, int? minimumForFreeShippingDollarAmountBufferProductID = null!, string minimumForFreeShippingDollarAmountIgnoredAcceptedMessage = null!, string minimumForFreeShippingDollarAmountWarningMessage = null!, decimal? minimumForFreeShippingQuantityAmount = null!, decimal? minimumForFreeShippingQuantityAmountAfter = null!, int? minimumForFreeShippingQuantityAmountBufferCategoryID = null!, int? minimumForFreeShippingQuantityAmountBufferProductID = null!, string minimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = null!, string minimumForFreeShippingQuantityAmountWarningMessage = null!, decimal? minimumOrderDollarAmount = null!, decimal? minimumOrderDollarAmountAfter = null!, int? minimumOrderDollarAmountBufferCategoryID = null!, int? minimumOrderDollarAmountBufferProductID = null!, decimal? minimumOrderDollarAmountOverrideFee = null!, string minimumOrderDollarAmountOverrideFeeAcceptedMessage = null!, bool minimumOrderDollarAmountOverrideFeeIsPercent = false, string minimumOrderDollarAmountOverrideFeeWarningMessage = null!, string minimumOrderDollarAmountWarningMessage = null!, decimal? minimumOrderQuantityAmount = null!, decimal? minimumOrderQuantityAmountAfter = null!, int? minimumOrderQuantityAmountBufferCategoryID = null!, int? minimumOrderQuantityAmountBufferProductID = null!, decimal? minimumOrderQuantityAmountOverrideFee = null!, string minimumOrderQuantityAmountOverrideFeeAcceptedMessage = null!, bool minimumOrderQuantityAmountOverrideFeeIsPercent = false, string minimumOrderQuantityAmountOverrideFeeWarningMessage = null!, string minimumOrderQuantityAmountWarningMessage = null!, string missionStatement = null!, string operatingHoursClosedStatement = null!, decimal? operatingHoursFridayEnd = null!, decimal? operatingHoursFridayStart = null!, decimal? operatingHoursMondayEnd = null!, decimal? operatingHoursMondayStart = null!, decimal? operatingHoursSaturdayEnd = null!, decimal? operatingHoursSaturdayStart = null!, decimal? operatingHoursSundayEnd = null!, decimal? operatingHoursSundayStart = null!, decimal? operatingHoursThursdayEnd = null!, decimal? operatingHoursThursdayStart = null!, string operatingHoursTimeZoneId = null!, decimal? operatingHoursTuesdayEnd = null!, decimal? operatingHoursTuesdayStart = null!, decimal? operatingHoursWednesdayEnd = null!, decimal? operatingHoursWednesdayStart = null!, string overview = null!, string slogan = null!, int? sortOrder = null!, DateTime? startDate = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Store>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveANullableContactBase Properties
                mock.Object.ContactID = contactID;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // Store Properties
                mock.Object.About = about;
                mock.Object.DisplayInStorefront = displayInStorefront;
                mock.Object.EndDate = endDate;
                mock.Object.ExternalUrl = externalUrl;
                mock.Object.LanguageID = languageID;
                mock.Object.MinimumForFreeShippingDollarAmount = minimumForFreeShippingDollarAmount;
                mock.Object.MinimumForFreeShippingDollarAmountAfter = minimumForFreeShippingDollarAmountAfter;
                mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID = minimumForFreeShippingDollarAmountBufferCategoryID;
                mock.Object.MinimumForFreeShippingDollarAmountBufferProductID = minimumForFreeShippingDollarAmountBufferProductID;
                mock.Object.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = minimumForFreeShippingDollarAmountIgnoredAcceptedMessage;
                mock.Object.MinimumForFreeShippingDollarAmountWarningMessage = minimumForFreeShippingDollarAmountWarningMessage;
                mock.Object.MinimumForFreeShippingQuantityAmount = minimumForFreeShippingQuantityAmount;
                mock.Object.MinimumForFreeShippingQuantityAmountAfter = minimumForFreeShippingQuantityAmountAfter;
                mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID = minimumForFreeShippingQuantityAmountBufferCategoryID;
                mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID = minimumForFreeShippingQuantityAmountBufferProductID;
                mock.Object.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = minimumForFreeShippingQuantityAmountIgnoredAcceptedMessage;
                mock.Object.MinimumForFreeShippingQuantityAmountWarningMessage = minimumForFreeShippingQuantityAmountWarningMessage;
                mock.Object.MinimumOrderDollarAmount = minimumOrderDollarAmount;
                mock.Object.MinimumOrderDollarAmountAfter = minimumOrderDollarAmountAfter;
                mock.Object.MinimumOrderDollarAmountBufferCategoryID = minimumOrderDollarAmountBufferCategoryID;
                mock.Object.MinimumOrderDollarAmountBufferProductID = minimumOrderDollarAmountBufferProductID;
                mock.Object.MinimumOrderDollarAmountOverrideFee = minimumOrderDollarAmountOverrideFee;
                mock.Object.MinimumOrderDollarAmountOverrideFeeAcceptedMessage = minimumOrderDollarAmountOverrideFeeAcceptedMessage;
                mock.Object.MinimumOrderDollarAmountOverrideFeeIsPercent = minimumOrderDollarAmountOverrideFeeIsPercent;
                mock.Object.MinimumOrderDollarAmountOverrideFeeWarningMessage = minimumOrderDollarAmountOverrideFeeWarningMessage;
                mock.Object.MinimumOrderDollarAmountWarningMessage = minimumOrderDollarAmountWarningMessage;
                mock.Object.MinimumOrderQuantityAmount = minimumOrderQuantityAmount;
                mock.Object.MinimumOrderQuantityAmountAfter = minimumOrderQuantityAmountAfter;
                mock.Object.MinimumOrderQuantityAmountBufferCategoryID = minimumOrderQuantityAmountBufferCategoryID;
                mock.Object.MinimumOrderQuantityAmountBufferProductID = minimumOrderQuantityAmountBufferProductID;
                mock.Object.MinimumOrderQuantityAmountOverrideFee = minimumOrderQuantityAmountOverrideFee;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = minimumOrderQuantityAmountOverrideFeeAcceptedMessage;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeIsPercent = minimumOrderQuantityAmountOverrideFeeIsPercent;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeWarningMessage = minimumOrderQuantityAmountOverrideFeeWarningMessage;
                mock.Object.MinimumOrderQuantityAmountWarningMessage = minimumOrderQuantityAmountWarningMessage;
                mock.Object.MissionStatement = missionStatement;
                mock.Object.OperatingHoursClosedStatement = operatingHoursClosedStatement;
                mock.Object.OperatingHoursFridayEnd = operatingHoursFridayEnd;
                mock.Object.OperatingHoursFridayStart = operatingHoursFridayStart;
                mock.Object.OperatingHoursMondayEnd = operatingHoursMondayEnd;
                mock.Object.OperatingHoursMondayStart = operatingHoursMondayStart;
                mock.Object.OperatingHoursSaturdayEnd = operatingHoursSaturdayEnd;
                mock.Object.OperatingHoursSaturdayStart = operatingHoursSaturdayStart;
                mock.Object.OperatingHoursSundayEnd = operatingHoursSundayEnd;
                mock.Object.OperatingHoursSundayStart = operatingHoursSundayStart;
                mock.Object.OperatingHoursThursdayEnd = operatingHoursThursdayEnd;
                mock.Object.OperatingHoursThursdayStart = operatingHoursThursdayStart;
                mock.Object.OperatingHoursTimeZoneId = operatingHoursTimeZoneId;
                mock.Object.OperatingHoursTuesdayEnd = operatingHoursTuesdayEnd;
                mock.Object.OperatingHoursTuesdayStart = operatingHoursTuesdayStart;
                mock.Object.OperatingHoursWednesdayEnd = operatingHoursWednesdayEnd;
                mock.Object.OperatingHoursWednesdayStart = operatingHoursWednesdayStart;
                mock.Object.Overview = overview;
                mock.Object.Slogan = slogan;
                mock.Object.SortOrder = sortOrder;
                mock.Object.StartDate = startDate;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawStoreTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => RawContacts == null || mock.Object.ContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawStoreImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreImage>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.StoreID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // Store's Related Objects
                mock.Setup(m => m.Language).Returns(() => RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.LanguageID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferProductID)?.Object);
                // Store's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => RawStoreAccounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreAccount>());
                mock.Setup(m => m.Brands).Returns(() => RawBrandStores?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandStore>());
                mock.Setup(m => m.Categories).Returns(() => RawStoreCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreCategory>());
                mock.Setup(m => m.Franchises).Returns(() => RawFranchiseStores?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseStore>());
                mock.Setup(m => m.Manufacturers).Returns(() => RawStoreManufacturers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreManufacturer>());
                mock.Setup(m => m.Products).Returns(() => RawStoreProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreProduct>());
                mock.Setup(m => m.Reviews).Returns(() => RawReviews?.Where(x => x.Object.StoreID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.StoreBadges).Returns(() => RawStoreBadges?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreBadge>());
                mock.Setup(m => m.StoreContacts).Returns(() => RawStoreContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreContact>());
                mock.Setup(m => m.StoreCountries).Returns(() => RawStoreCountries?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreCountry>());
                mock.Setup(m => m.StoreDistricts).Returns(() => RawStoreDistricts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreDistrict>());
                mock.Setup(m => m.StoreInventoryLocations).Returns(() => RawStoreInventoryLocations?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreInventoryLocation>());
                mock.Setup(m => m.StoreRegions).Returns(() => RawStoreRegions?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreRegion>());
                mock.Setup(m => m.StoreSubscriptions).Returns(() => RawStoreSubscriptions?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreSubscription>());
                mock.Setup(m => m.Users).Returns(() => RawStoreUsers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreUser>());
                mock.Setup(m => m.Vendors).Returns(() => RawStoreVendors?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreVendor>());
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreAccount.</summary>
        /// <returns>The new StoreAccount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreAccount>> CreateADummyStoreAccountAsync(int id, string? key, string? jsonAttributes = null, bool hasAccessToStore = false, int masterID = 1, int? pricePointID = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreAccount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // StoreAccount Properties
                mock.Object.HasAccessToStore = hasAccessToStore;
                mock.Object.MasterID = masterID;
                mock.Object.PricePointID = pricePointID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // StoreAccount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.PricePoint).Returns(() => RawPricePoints?.FirstOrDefault(x => x.Object.ID == mock.Object.PricePointID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreAccount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreBadge.</summary>
        /// <returns>The new StoreBadge.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreBadge>> CreateADummyStoreBadgeAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreBadge>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // StoreBadge Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // StoreBadge's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawBadges?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreBadge's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreCategory.</summary>
        /// <returns>The new StoreCategory.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreCategory>> CreateADummyStoreCategoryAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreCategory>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // StoreCategory Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // StoreCategory's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreCategory's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreContact.</summary>
        /// <returns>The new StoreContact.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreContact>> CreateADummyStoreContactAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreContact>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IAmAContactRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // StoreContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreContact's Related Objects
                // StoreContact's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreCountry.</summary>
        /// <returns>The new StoreCountry.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreCountry>> CreateADummyStoreCountryAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreCountry>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // StoreCountry Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // StoreCountry's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreCountry's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreDistrict.</summary>
        /// <returns>The new StoreDistrict.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreDistrict>> CreateADummyStoreDistrictAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreDistrict>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // StoreDistrict Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // StoreDistrict's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDistricts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreDistrict's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreImage.</summary>
        /// <returns>The new StoreImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreImage>> CreateADummyStoreImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // StoreImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawStoreImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // StoreImage's Related Objects
                // StoreImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreImageType.</summary>
        /// <returns>The new StoreImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreImageType>> CreateADummyStoreImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // StoreImageType Properties
                // Dynamic Linking
                // StoreImageType's Related Objects
                // StoreImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreInventoryLocation.</summary>
        /// <returns>The new StoreInventoryLocation.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreInventoryLocation>> CreateADummyStoreInventoryLocationAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreInventoryLocation>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // StoreInventoryLocation Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawStoreInventoryLocationTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // StoreInventoryLocation's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreInventoryLocation's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreInventoryLocationType.</summary>
        /// <returns>The new StoreInventoryLocationType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreInventoryLocationType>> CreateADummyStoreInventoryLocationTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreInventoryLocationType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // StoreInventoryLocationType Properties
                // Dynamic Linking
                // StoreInventoryLocationType's Related Objects
                // StoreInventoryLocationType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreManufacturer.</summary>
        /// <returns>The new StoreManufacturer.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreManufacturer>> CreateADummyStoreManufacturerAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreManufacturer>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // StoreManufacturer Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // StoreManufacturer's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreManufacturer's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreProduct.</summary>
        /// <returns>The new StoreProduct.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreProduct>> CreateADummyStoreProductAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, decimal? priceBase = null!, decimal? priceMsrp = null!, decimal? priceReduction = null!, decimal? priceSale = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreProduct>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // StoreProduct Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.PriceBase = priceBase;
                mock.Object.PriceMsrp = priceMsrp;
                mock.Object.PriceReduction = priceReduction;
                mock.Object.PriceSale = priceSale;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // StoreProduct's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreProduct's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreRegion.</summary>
        /// <returns>The new StoreRegion.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreRegion>> CreateADummyStoreRegionAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreRegion>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // StoreRegion Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // StoreRegion's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreRegion's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreSubscription.</summary>
        /// <returns>The new StoreSubscription.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreSubscription>> CreateADummyStoreSubscriptionAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreSubscription>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // StoreSubscription Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // StoreSubscription's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawSubscriptions?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreSubscription's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreType.</summary>
        /// <returns>The new StoreType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreType>> CreateADummyStoreTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // StoreType Properties
                // Dynamic Linking
                // StoreType's Related Objects
                // StoreType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreUser.</summary>
        /// <returns>The new StoreUser.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreUser>> CreateADummyStoreUserAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreUser>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // StoreUser Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // StoreUser's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreUser's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreVendor.</summary>
        /// <returns>The new StoreVendor.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreVendor>> CreateADummyStoreVendorAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreVendor>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // StoreVendor Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // StoreVendor's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreVendor's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForStores(MockingSetup mockingSetup)
        {
            Func<SiteDomain> mockFuncSiteDomain = () =>
            {
                var mock = new Mock<SiteDomain>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SiteDomain Properties
                // Dynamic Linking
                // SiteDomain's Associated Objects
                mock.Setup(m => m.Brands).Returns(() => mockingSetup.RawBrandSiteDomains?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandSiteDomain>());
                //mock.Setup(m => m.Franchises).Returns(() => mockingSetup.RawFranchiseSiteDomains?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseSiteDomain>());
                //mock.Setup(m => m.SiteDomainSocialProviders).Returns(() => mockingSetup.RawSiteDomainSocialProviders?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SiteDomainSocialProvider>());
                // SiteDomain's Related Objects
                return mock.Object;
            };
            For<ISiteDomain>().Use(() => mockFuncSiteDomain());
            For<SiteDomain>().Use(() => mockFuncSiteDomain());
            Func<SiteDomainSocialProvider> mockFuncSiteDomainSocialProvider = () =>
            {
                var mock = new Mock<SiteDomainSocialProvider>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SiteDomainSocialProvider Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSiteDomains?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawSocialProviders?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SiteDomainSocialProvider's Associated Objects
                // SiteDomainSocialProvider's Related Objects
                return mock.Object;
            };
            For<ISiteDomainSocialProvider>().Use(() => mockFuncSiteDomainSocialProvider());
            For<SiteDomainSocialProvider>().Use(() => mockFuncSiteDomainSocialProvider());
            Func<SocialProvider> mockFuncSocialProvider = () =>
            {
                var mock = new Mock<SocialProvider>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SocialProvider Properties
                // Dynamic Linking
                // SocialProvider's Associated Objects
                mock.Setup(m => m.SiteDomainSocialProviders).Returns(() => mockingSetup.RawSiteDomainSocialProviders?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SiteDomainSocialProvider>());
                // SocialProvider's Related Objects
                return mock.Object;
            };
            For<ISocialProvider>().Use(() => mockFuncSocialProvider());
            For<SocialProvider>().Use(() => mockFuncSocialProvider());
            Func<Store> mockFuncStore = () =>
            {
                var mock = new Mock<Store>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Store Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawStoreTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawStoreImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreImage>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.StoreID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                mock.Setup(m => m.Language).Returns(() => mockingSetup.RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.LanguageID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferProductID)?.Object);
                // Store's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => mockingSetup.RawStoreAccounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreAccount>());
                mock.Setup(m => m.Brands).Returns(() => mockingSetup.RawBrandStores?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandStore>());
                mock.Setup(m => m.Categories).Returns(() => mockingSetup.RawStoreCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreCategory>());
                mock.Setup(m => m.Franchises).Returns(() => mockingSetup.RawFranchiseStores?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseStore>());
                mock.Setup(m => m.Manufacturers).Returns(() => mockingSetup.RawStoreManufacturers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreManufacturer>());
                mock.Setup(m => m.Products).Returns(() => mockingSetup.RawStoreProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreProduct>());
                mock.Setup(m => m.Reviews).Returns(() => mockingSetup.RawReviews?.Where(x => x.Object.StoreID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.StoreBadges).Returns(() => mockingSetup.RawStoreBadges?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreBadge>());
                mock.Setup(m => m.StoreContacts).Returns(() => mockingSetup.RawStoreContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreContact>());
                mock.Setup(m => m.StoreCountries).Returns(() => mockingSetup.RawStoreCountries?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreCountry>());
                mock.Setup(m => m.StoreDistricts).Returns(() => mockingSetup.RawStoreDistricts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreDistrict>());
                mock.Setup(m => m.StoreInventoryLocations).Returns(() => mockingSetup.RawStoreInventoryLocations?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreInventoryLocation>());
                mock.Setup(m => m.StoreRegions).Returns(() => mockingSetup.RawStoreRegions?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreRegion>());
                mock.Setup(m => m.StoreSubscriptions).Returns(() => mockingSetup.RawStoreSubscriptions?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreSubscription>());
                mock.Setup(m => m.Users).Returns(() => mockingSetup.RawStoreUsers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreUser>());
                mock.Setup(m => m.Vendors).Returns(() => mockingSetup.RawStoreVendors?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreVendor>());
                // Store's Related Objects
                return mock.Object;
            };
            For<IStore>().Use(() => mockFuncStore());
            For<Store>().Use(() => mockFuncStore());
            Func<StoreAccount> mockFuncStoreAccount = () =>
            {
                var mock = new Mock<StoreAccount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreAccount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.PricePoint).Returns(() => mockingSetup.RawPricePoints?.FirstOrDefault(x => x.Object.ID == mock.Object.PricePointID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreAccount's Associated Objects
                // StoreAccount's Related Objects
                return mock.Object;
            };
            For<IStoreAccount>().Use(() => mockFuncStoreAccount());
            For<StoreAccount>().Use(() => mockFuncStoreAccount());
            Func<StoreBadge> mockFuncStoreBadge = () =>
            {
                var mock = new Mock<StoreBadge>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreBadge Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawBadges?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreBadge's Associated Objects
                // StoreBadge's Related Objects
                return mock.Object;
            };
            For<IStoreBadge>().Use(() => mockFuncStoreBadge());
            For<StoreBadge>().Use(() => mockFuncStoreBadge());
            Func<StoreCategory> mockFuncStoreCategory = () =>
            {
                var mock = new Mock<StoreCategory>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreCategory Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreCategory's Associated Objects
                // StoreCategory's Related Objects
                return mock.Object;
            };
            For<IStoreCategory>().Use(() => mockFuncStoreCategory());
            For<StoreCategory>().Use(() => mockFuncStoreCategory());
            Func<StoreContact> mockFuncStoreContact = () =>
            {
                var mock = new Mock<StoreContact>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreContact's Associated Objects
                // StoreContact's Related Objects
                return mock.Object;
            };
            For<IStoreContact>().Use(() => mockFuncStoreContact());
            For<StoreContact>().Use(() => mockFuncStoreContact());
            Func<StoreCountry> mockFuncStoreCountry = () =>
            {
                var mock = new Mock<StoreCountry>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreCountry Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreCountry's Associated Objects
                // StoreCountry's Related Objects
                return mock.Object;
            };
            For<IStoreCountry>().Use(() => mockFuncStoreCountry());
            For<StoreCountry>().Use(() => mockFuncStoreCountry());
            Func<StoreDistrict> mockFuncStoreDistrict = () =>
            {
                var mock = new Mock<StoreDistrict>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreDistrict Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDistricts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreDistrict's Associated Objects
                // StoreDistrict's Related Objects
                return mock.Object;
            };
            For<IStoreDistrict>().Use(() => mockFuncStoreDistrict());
            For<StoreDistrict>().Use(() => mockFuncStoreDistrict());
            Func<StoreImage> mockFuncStoreImage = () =>
            {
                var mock = new Mock<StoreImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawStoreImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // StoreImage's Associated Objects
                // StoreImage's Related Objects
                return mock.Object;
            };
            For<IStoreImage>().Use(() => mockFuncStoreImage());
            For<StoreImage>().Use(() => mockFuncStoreImage());
            Func<StoreImageType> mockFuncStoreImageType = () =>
            {
                var mock = new Mock<StoreImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreImageType Properties
                // Dynamic Linking
                // StoreImageType's Associated Objects
                // StoreImageType's Related Objects
                return mock.Object;
            };
            For<IStoreImageType>().Use(() => mockFuncStoreImageType());
            For<StoreImageType>().Use(() => mockFuncStoreImageType());
            Func<StoreInventoryLocation> mockFuncStoreInventoryLocation = () =>
            {
                var mock = new Mock<StoreInventoryLocation>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreInventoryLocation Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawStoreInventoryLocationTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreInventoryLocation's Associated Objects
                // StoreInventoryLocation's Related Objects
                return mock.Object;
            };
            For<IStoreInventoryLocation>().Use(() => mockFuncStoreInventoryLocation());
            For<StoreInventoryLocation>().Use(() => mockFuncStoreInventoryLocation());
            Func<StoreInventoryLocationType> mockFuncStoreInventoryLocationType = () =>
            {
                var mock = new Mock<StoreInventoryLocationType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreInventoryLocationType Properties
                // Dynamic Linking
                // StoreInventoryLocationType's Associated Objects
                // StoreInventoryLocationType's Related Objects
                return mock.Object;
            };
            For<IStoreInventoryLocationType>().Use(() => mockFuncStoreInventoryLocationType());
            For<StoreInventoryLocationType>().Use(() => mockFuncStoreInventoryLocationType());
            Func<StoreManufacturer> mockFuncStoreManufacturer = () =>
            {
                var mock = new Mock<StoreManufacturer>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreManufacturer Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreManufacturer's Associated Objects
                // StoreManufacturer's Related Objects
                return mock.Object;
            };
            For<IStoreManufacturer>().Use(() => mockFuncStoreManufacturer());
            For<StoreManufacturer>().Use(() => mockFuncStoreManufacturer());
            Func<StoreProduct> mockFuncStoreProduct = () =>
            {
                var mock = new Mock<StoreProduct>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreProduct Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreProduct's Associated Objects
                // StoreProduct's Related Objects
                return mock.Object;
            };
            For<IStoreProduct>().Use(() => mockFuncStoreProduct());
            For<StoreProduct>().Use(() => mockFuncStoreProduct());
            Func<StoreRegion> mockFuncStoreRegion = () =>
            {
                var mock = new Mock<StoreRegion>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreRegion Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreRegion's Associated Objects
                // StoreRegion's Related Objects
                return mock.Object;
            };
            For<IStoreRegion>().Use(() => mockFuncStoreRegion());
            For<StoreRegion>().Use(() => mockFuncStoreRegion());
            Func<StoreSubscription> mockFuncStoreSubscription = () =>
            {
                var mock = new Mock<StoreSubscription>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreSubscription Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawSubscriptions?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreSubscription's Associated Objects
                // StoreSubscription's Related Objects
                return mock.Object;
            };
            For<IStoreSubscription>().Use(() => mockFuncStoreSubscription());
            For<StoreSubscription>().Use(() => mockFuncStoreSubscription());
            Func<StoreType> mockFuncStoreType = () =>
            {
                var mock = new Mock<StoreType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreType Properties
                // Dynamic Linking
                // StoreType's Associated Objects
                // StoreType's Related Objects
                return mock.Object;
            };
            For<IStoreType>().Use(() => mockFuncStoreType());
            For<StoreType>().Use(() => mockFuncStoreType());
            Func<StoreUser> mockFuncStoreUser = () =>
            {
                var mock = new Mock<StoreUser>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreUser Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreUser's Associated Objects
                // StoreUser's Related Objects
                return mock.Object;
            };
            For<IStoreUser>().Use(() => mockFuncStoreUser());
            For<StoreUser>().Use(() => mockFuncStoreUser());
            Func<StoreVendor> mockFuncStoreVendor = () =>
            {
                var mock = new Mock<StoreVendor>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreVendor Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreVendor's Associated Objects
                // StoreVendor's Related Objects
                return mock.Object;
            };
            For<IStoreVendor>().Use(() => mockFuncStoreVendor());
            For<StoreVendor>().Use(() => mockFuncStoreVendor());
        }
    }
}
