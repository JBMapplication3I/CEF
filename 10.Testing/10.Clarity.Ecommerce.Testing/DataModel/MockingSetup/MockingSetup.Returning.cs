// <autogenerated>
// <copyright file="Returning.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Returning section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoReturning { private get; set; }

        // Enable the tables specifically on run
        public bool DoSalesReturnTable { private get; set; }
        public bool DoSalesReturnContactTable { private get; set; }
        public bool DoSalesReturnEventTable { private get; set; }
        public bool DoSalesReturnEventTypeTable { private get; set; }
        public bool DoSalesReturnFileTable { private get; set; }
        public bool DoSalesReturnItemTable { private get; set; }
        public bool DoSalesReturnItemTargetTable { private get; set; }
        public bool DoSalesReturnReasonTable { private get; set; }
        public bool DoSalesReturnSalesOrderTable { private get; set; }
        public bool DoSalesReturnStateTable { private get; set; }
        public bool DoSalesReturnStatusTable { private get; set; }
        public bool DoSalesReturnTypeTable { private get; set; }

        // Dirty Checking
        public bool SalesReturnDirty { private get; set; }
        public bool SalesReturnContactDirty { private get; set; }
        public bool SalesReturnEventDirty { private get; set; }
        public bool SalesReturnEventTypeDirty { private get; set; }
        public bool SalesReturnFileDirty { private get; set; }
        public bool SalesReturnItemDirty { private get; set; }
        public bool SalesReturnItemTargetDirty { private get; set; }
        public bool SalesReturnReasonDirty { private get; set; }
        public bool SalesReturnSalesOrderDirty { private get; set; }
        public bool SalesReturnStateDirty { private get; set; }
        public bool SalesReturnStatusDirty { private get; set; }
        public bool SalesReturnTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<SalesReturn>>? SalesReturns { get; private set; }
        public Mock<DbSet<SalesReturnContact>>? SalesReturnContacts { get; private set; }
        public Mock<DbSet<SalesReturnEvent>>? SalesReturnEvents { get; private set; }
        public Mock<DbSet<SalesReturnEventType>>? SalesReturnEventTypes { get; private set; }
        public Mock<DbSet<SalesReturnFile>>? SalesReturnFiles { get; private set; }
        public Mock<DbSet<SalesReturnItem>>? SalesReturnItems { get; private set; }
        public Mock<DbSet<SalesReturnItemTarget>>? SalesReturnItemTargets { get; private set; }
        public Mock<DbSet<SalesReturnReason>>? SalesReturnReasons { get; private set; }
        public Mock<DbSet<SalesReturnSalesOrder>>? SalesReturnSalesOrders { get; private set; }
        public Mock<DbSet<SalesReturnState>>? SalesReturnStates { get; private set; }
        public Mock<DbSet<SalesReturnStatus>>? SalesReturnStatuses { get; private set; }
        public Mock<DbSet<SalesReturnType>>? SalesReturnTypes { get; private set; }

        // Raw Data
        public List<Mock<SalesReturn>>? RawSalesReturns { get; private set; }
        public List<Mock<SalesReturnContact>>? RawSalesReturnContacts { get; private set; }
        public List<Mock<SalesReturnEvent>>? RawSalesReturnEvents { get; private set; }
        public List<Mock<SalesReturnEventType>>? RawSalesReturnEventTypes { get; private set; }
        public List<Mock<SalesReturnFile>>? RawSalesReturnFiles { get; private set; }
        public List<Mock<SalesReturnItem>>? RawSalesReturnItems { get; private set; }
        public List<Mock<SalesReturnItemTarget>>? RawSalesReturnItemTargets { get; private set; }
        public List<Mock<SalesReturnReason>>? RawSalesReturnReasons { get; private set; }
        public List<Mock<SalesReturnSalesOrder>>? RawSalesReturnSalesOrders { get; private set; }
        public List<Mock<SalesReturnState>>? RawSalesReturnStates { get; private set; }
        public List<Mock<SalesReturnStatus>>? RawSalesReturnStatuses { get; private set; }
        public List<Mock<SalesReturnType>>? RawSalesReturnTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksReturningAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoReturning || (DoSalesReturnTable && (!dirtyOnly || SalesReturnDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesReturns == null) { throw new InvalidOperationException("Raw SalesReturns was null"); }
                    await InitializeMockSetFromListAsync(SalesReturns, RawSalesReturns).ConfigureAwait(false);
                    context.Setup(m => m.SalesReturns).Returns(() => SalesReturns?.Object!);
                    context.Setup(m => m.Set<SalesReturn>()).Returns(() => SalesReturns?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoReturning || (DoSalesReturnContactTable && (!dirtyOnly || SalesReturnContactDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesReturnContacts == null) { throw new InvalidOperationException("Raw SalesReturnContacts was null"); }
                    await InitializeMockSetFromListAsync(SalesReturnContacts, RawSalesReturnContacts).ConfigureAwait(false);
                    context.Setup(m => m.SalesReturnContacts).Returns(() => SalesReturnContacts?.Object!);
                    context.Setup(m => m.Set<SalesReturnContact>()).Returns(() => SalesReturnContacts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoReturning || (DoSalesReturnEventTable && (!dirtyOnly || SalesReturnEventDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesReturnEvents == null) { throw new InvalidOperationException("Raw SalesReturnEvents was null"); }
                    await InitializeMockSetFromListAsync(SalesReturnEvents, RawSalesReturnEvents).ConfigureAwait(false);
                    context.Setup(m => m.SalesReturnEvents).Returns(() => SalesReturnEvents?.Object!);
                    context.Setup(m => m.Set<SalesReturnEvent>()).Returns(() => SalesReturnEvents?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoReturning || (DoSalesReturnEventTypeTable && (!dirtyOnly || SalesReturnEventTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesReturnEventTypes == null) { throw new InvalidOperationException("Raw SalesReturnEventTypes was null"); }
                    await InitializeMockSetFromListAsync(SalesReturnEventTypes, RawSalesReturnEventTypes).ConfigureAwait(false);
                    context.Setup(m => m.SalesReturnEventTypes).Returns(() => SalesReturnEventTypes?.Object!);
                    context.Setup(m => m.Set<SalesReturnEventType>()).Returns(() => SalesReturnEventTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoReturning || (DoSalesReturnFileTable && (!dirtyOnly || SalesReturnFileDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesReturnFiles == null) { throw new InvalidOperationException("Raw SalesReturnFiles was null"); }
                    await InitializeMockSetFromListAsync(SalesReturnFiles, RawSalesReturnFiles).ConfigureAwait(false);
                    context.Setup(m => m.SalesReturnFiles).Returns(() => SalesReturnFiles?.Object!);
                    context.Setup(m => m.Set<SalesReturnFile>()).Returns(() => SalesReturnFiles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoReturning || (DoSalesReturnItemTable && (!dirtyOnly || SalesReturnItemDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesReturnItems == null) { throw new InvalidOperationException("Raw SalesReturnItems was null"); }
                    await InitializeMockSetFromListAsync(SalesReturnItems, RawSalesReturnItems).ConfigureAwait(false);
                    context.Setup(m => m.SalesReturnItems).Returns(() => SalesReturnItems?.Object!);
                    context.Setup(m => m.Set<SalesReturnItem>()).Returns(() => SalesReturnItems?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoReturning || (DoSalesReturnItemTargetTable && (!dirtyOnly || SalesReturnItemTargetDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesReturnItemTargets == null) { throw new InvalidOperationException("Raw SalesReturnItemTargets was null"); }
                    await InitializeMockSetFromListAsync(SalesReturnItemTargets, RawSalesReturnItemTargets).ConfigureAwait(false);
                    context.Setup(m => m.SalesReturnItemTargets).Returns(() => SalesReturnItemTargets?.Object!);
                    context.Setup(m => m.Set<SalesReturnItemTarget>()).Returns(() => SalesReturnItemTargets?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoReturning || (DoSalesReturnReasonTable && (!dirtyOnly || SalesReturnReasonDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesReturnReasons == null) { throw new InvalidOperationException("Raw SalesReturnReasons was null"); }
                    await InitializeMockSetFromListAsync(SalesReturnReasons, RawSalesReturnReasons).ConfigureAwait(false);
                    context.Setup(m => m.SalesReturnReasons).Returns(() => SalesReturnReasons?.Object!);
                    context.Setup(m => m.Set<SalesReturnReason>()).Returns(() => SalesReturnReasons?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoReturning || (DoSalesReturnSalesOrderTable && (!dirtyOnly || SalesReturnSalesOrderDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesReturnSalesOrders == null) { throw new InvalidOperationException("Raw SalesReturnSalesOrders was null"); }
                    await InitializeMockSetFromListAsync(SalesReturnSalesOrders, RawSalesReturnSalesOrders).ConfigureAwait(false);
                    context.Setup(m => m.SalesReturnSalesOrders).Returns(() => SalesReturnSalesOrders?.Object!);
                    context.Setup(m => m.Set<SalesReturnSalesOrder>()).Returns(() => SalesReturnSalesOrders?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoReturning || (DoSalesReturnStateTable && (!dirtyOnly || SalesReturnStateDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesReturnStates == null) { throw new InvalidOperationException("Raw SalesReturnStates was null"); }
                    await InitializeMockSetFromListAsync(SalesReturnStates, RawSalesReturnStates).ConfigureAwait(false);
                    context.Setup(m => m.SalesReturnStates).Returns(() => SalesReturnStates?.Object!);
                    context.Setup(m => m.Set<SalesReturnState>()).Returns(() => SalesReturnStates?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoReturning || (DoSalesReturnStatusTable && (!dirtyOnly || SalesReturnStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesReturnStatuses == null) { throw new InvalidOperationException("Raw SalesReturnStatuses was null"); }
                    await InitializeMockSetFromListAsync(SalesReturnStatuses, RawSalesReturnStatuses).ConfigureAwait(false);
                    context.Setup(m => m.SalesReturnStatuses).Returns(() => SalesReturnStatuses?.Object!);
                    context.Setup(m => m.Set<SalesReturnStatus>()).Returns(() => SalesReturnStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoReturning || (DoSalesReturnTypeTable && (!dirtyOnly || SalesReturnTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesReturnTypes == null) { throw new InvalidOperationException("Raw SalesReturnTypes was null"); }
                    await InitializeMockSetFromListAsync(SalesReturnTypes, RawSalesReturnTypes).ConfigureAwait(false);
                    context.Setup(m => m.SalesReturnTypes).Returns(() => SalesReturnTypes?.Object!);
                    context.Setup(m => m.Set<SalesReturnType>()).Returns(() => SalesReturnTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesReturnsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesReturn>> data)
        {
            if (!DoAll && !DoReturning && !DoSalesReturnTable) { return; }
            SalesReturns ??= new Mock<DbSet<SalesReturn>>();
            await InitializeMockSetFromListAsync(SalesReturns, data).ConfigureAwait(false);
            context.Setup(m => m.SalesReturns).Returns(() => SalesReturns.Object);
            context.Setup(m => m.Set<SalesReturn>()).Returns(() => SalesReturns.Object);
            TableRecordCounts[typeof(SalesReturn)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesReturn)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesReturn)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesReturnContactsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesReturnContact>> data)
        {
            if (!DoAll && !DoReturning && !DoSalesReturnContactTable) { return; }
            SalesReturnContacts ??= new Mock<DbSet<SalesReturnContact>>();
            await InitializeMockSetFromListAsync(SalesReturnContacts, data).ConfigureAwait(false);
            context.Setup(m => m.SalesReturnContacts).Returns(() => SalesReturnContacts.Object);
            context.Setup(m => m.Set<SalesReturnContact>()).Returns(() => SalesReturnContacts.Object);
            TableRecordCounts[typeof(SalesReturnContact)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesReturnContact)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesReturnContact)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesReturnEventsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesReturnEvent>> data)
        {
            if (!DoAll && !DoReturning && !DoSalesReturnEventTable) { return; }
            SalesReturnEvents ??= new Mock<DbSet<SalesReturnEvent>>();
            await InitializeMockSetFromListAsync(SalesReturnEvents, data).ConfigureAwait(false);
            context.Setup(m => m.SalesReturnEvents).Returns(() => SalesReturnEvents.Object);
            context.Setup(m => m.Set<SalesReturnEvent>()).Returns(() => SalesReturnEvents.Object);
            TableRecordCounts[typeof(SalesReturnEvent)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesReturnEvent)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesReturnEvent)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesReturnEvent)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesReturnEventTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesReturnEventType>> data)
        {
            if (!DoAll && !DoReturning && !DoSalesReturnEventTypeTable) { return; }
            SalesReturnEventTypes ??= new Mock<DbSet<SalesReturnEventType>>();
            await InitializeMockSetFromListAsync(SalesReturnEventTypes, data).ConfigureAwait(false);
            context.Setup(m => m.SalesReturnEventTypes).Returns(() => SalesReturnEventTypes.Object);
            context.Setup(m => m.Set<SalesReturnEventType>()).Returns(() => SalesReturnEventTypes.Object);
            TableRecordCounts[typeof(SalesReturnEventType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesReturnEventType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesReturnEventType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesReturnEventType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesReturnEventType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesReturnFilesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesReturnFile>> data)
        {
            if (!DoAll && !DoReturning && !DoSalesReturnFileTable) { return; }
            SalesReturnFiles ??= new Mock<DbSet<SalesReturnFile>>();
            await InitializeMockSetFromListAsync(SalesReturnFiles, data).ConfigureAwait(false);
            context.Setup(m => m.SalesReturnFiles).Returns(() => SalesReturnFiles.Object);
            context.Setup(m => m.Set<SalesReturnFile>()).Returns(() => SalesReturnFiles.Object);
            TableRecordCounts[typeof(SalesReturnFile)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesReturnFile)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesReturnFile)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesReturnFile)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesReturnItemsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesReturnItem>> data)
        {
            if (!DoAll && !DoReturning && !DoSalesReturnItemTable) { return; }
            SalesReturnItems ??= new Mock<DbSet<SalesReturnItem>>();
            await InitializeMockSetFromListAsync(SalesReturnItems, data).ConfigureAwait(false);
            context.Setup(m => m.SalesReturnItems).Returns(() => SalesReturnItems.Object);
            context.Setup(m => m.Set<SalesReturnItem>()).Returns(() => SalesReturnItems.Object);
            TableRecordCounts[typeof(SalesReturnItem)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesReturnItem)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesReturnItem)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesReturnItem)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesReturnItemTargetsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesReturnItemTarget>> data)
        {
            if (!DoAll && !DoReturning && !DoSalesReturnItemTargetTable) { return; }
            SalesReturnItemTargets ??= new Mock<DbSet<SalesReturnItemTarget>>();
            await InitializeMockSetFromListAsync(SalesReturnItemTargets, data).ConfigureAwait(false);
            context.Setup(m => m.SalesReturnItemTargets).Returns(() => SalesReturnItemTargets.Object);
            context.Setup(m => m.Set<SalesReturnItemTarget>()).Returns(() => SalesReturnItemTargets.Object);
            TableRecordCounts[typeof(SalesReturnItemTarget)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesReturnItemTarget)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesReturnItemTarget)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesReturnReasonsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesReturnReason>> data)
        {
            if (!DoAll && !DoReturning && !DoSalesReturnReasonTable) { return; }
            SalesReturnReasons ??= new Mock<DbSet<SalesReturnReason>>();
            await InitializeMockSetFromListAsync(SalesReturnReasons, data).ConfigureAwait(false);
            context.Setup(m => m.SalesReturnReasons).Returns(() => SalesReturnReasons.Object);
            context.Setup(m => m.Set<SalesReturnReason>()).Returns(() => SalesReturnReasons.Object);
            TableRecordCounts[typeof(SalesReturnReason)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesReturnReason)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesReturnReason)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesReturnReason)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesReturnReason)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesReturnSalesOrdersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesReturnSalesOrder>> data)
        {
            if (!DoAll && !DoReturning && !DoSalesReturnSalesOrderTable) { return; }
            SalesReturnSalesOrders ??= new Mock<DbSet<SalesReturnSalesOrder>>();
            await InitializeMockSetFromListAsync(SalesReturnSalesOrders, data).ConfigureAwait(false);
            context.Setup(m => m.SalesReturnSalesOrders).Returns(() => SalesReturnSalesOrders.Object);
            context.Setup(m => m.Set<SalesReturnSalesOrder>()).Returns(() => SalesReturnSalesOrders.Object);
            TableRecordCounts[typeof(SalesReturnSalesOrder)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesReturnSalesOrder)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesReturnSalesOrder)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesReturnStatesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesReturnState>> data)
        {
            if (!DoAll && !DoReturning && !DoSalesReturnStateTable) { return; }
            SalesReturnStates ??= new Mock<DbSet<SalesReturnState>>();
            await InitializeMockSetFromListAsync(SalesReturnStates, data).ConfigureAwait(false);
            context.Setup(m => m.SalesReturnStates).Returns(() => SalesReturnStates.Object);
            context.Setup(m => m.Set<SalesReturnState>()).Returns(() => SalesReturnStates.Object);
            TableRecordCounts[typeof(SalesReturnState)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesReturnState)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesReturnState)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesReturnState)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesReturnState)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesReturnStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesReturnStatus>> data)
        {
            if (!DoAll && !DoReturning && !DoSalesReturnStatusTable) { return; }
            SalesReturnStatuses ??= new Mock<DbSet<SalesReturnStatus>>();
            await InitializeMockSetFromListAsync(SalesReturnStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.SalesReturnStatuses).Returns(() => SalesReturnStatuses.Object);
            context.Setup(m => m.Set<SalesReturnStatus>()).Returns(() => SalesReturnStatuses.Object);
            TableRecordCounts[typeof(SalesReturnStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesReturnStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesReturnStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesReturnStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesReturnStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesReturnTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesReturnType>> data)
        {
            if (!DoAll && !DoReturning && !DoSalesReturnTypeTable) { return; }
            SalesReturnTypes ??= new Mock<DbSet<SalesReturnType>>();
            await InitializeMockSetFromListAsync(SalesReturnTypes, data).ConfigureAwait(false);
            context.Setup(m => m.SalesReturnTypes).Returns(() => SalesReturnTypes.Object);
            context.Setup(m => m.Set<SalesReturnType>()).Returns(() => SalesReturnTypes.Object);
            TableRecordCounts[typeof(SalesReturnType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesReturnType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesReturnType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesReturnType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesReturnType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy SalesReturn.</summary>
        /// <returns>The new SalesReturn.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesReturn>> CreateADummySalesReturnAsync(int id, string? key, string? jsonAttributes = null, DateTime? dueDate = null, decimal subtotalItems = 0m, decimal subtotalShipping = 0m, decimal subtotalTaxes = 0m, decimal subtotalFees = 0m, decimal subtotalHandling = 0m, decimal subtotalDiscounts = 0m, decimal total = 0m, bool? shippingSameAsBilling = null, int? userID = null, int? accountID = null, int statusID = 1, int stateID = 1, int typeID = 1, int? billingContactID = null, int? shippingContactID = null, DateTime? actualShipDate = null!, decimal? balanceDue = null!, int? brandID = null!, int? franchiseID = null!, string purchaseOrderNumber = null!, decimal? refundAmount = null!, string refundTransactionID = null!, DateTime? requestedShipDate = null!, DateTime? requiredShipDate = null!, DateTime? returnApprovedDate = null!, DateTime? returnCommitmentDate = null!, int? salesGroupID = null!, int? storeID = null!, string taxTransactionID = null!, string trackingNumber = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesReturn>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ISalesCollectionBase Properties
                mock.Object.DueDate = dueDate;
                mock.Object.SubtotalItems = subtotalItems;
                mock.Object.SubtotalShipping = subtotalShipping;
                mock.Object.SubtotalTaxes = subtotalTaxes;
                mock.Object.SubtotalFees = subtotalFees;
                mock.Object.SubtotalHandling = subtotalHandling;
                mock.Object.SubtotalDiscounts = subtotalDiscounts;
                mock.Object.Total = total;
                mock.Object.ShippingSameAsBilling = shippingSameAsBilling;
                mock.Object.UserID = userID;
                mock.Object.AccountID = accountID;
                mock.Object.StatusID = statusID;
                mock.Object.StateID = stateID;
                mock.Object.TypeID = typeID;
                mock.Object.BillingContactID = billingContactID;
                mock.Object.ShippingContactID = shippingContactID;
                // SalesReturn Properties
                mock.Object.ActualShipDate = actualShipDate;
                mock.Object.BalanceDue = balanceDue;
                mock.Object.BrandID = brandID;
                mock.Object.FranchiseID = franchiseID;
                mock.Object.PurchaseOrderNumber = purchaseOrderNumber;
                mock.Object.RefundAmount = refundAmount;
                mock.Object.RefundTransactionID = refundTransactionID;
                mock.Object.RequestedShipDate = requestedShipDate;
                mock.Object.RequiredShipDate = requiredShipDate;
                mock.Object.ReturnApprovedDate = returnApprovedDate;
                mock.Object.ReturnCommitmentDate = returnCommitmentDate;
                mock.Object.SalesGroupID = salesGroupID;
                mock.Object.StoreID = storeID;
                mock.Object.TaxTransactionID = taxTransactionID;
                mock.Object.TrackingNumber = trackingNumber;
                // Dynamic Linking
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => RawSalesReturnFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.SalesReturnID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => RawSalesReturnStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => RawSalesReturnStates?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawSalesReturnTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => RawSalesReturnItems?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnItem>());
                mock.Setup(m => m.Discounts).Returns(() => RawAppliedSalesReturnDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesReturnDiscount>());
                mock.Setup(m => m.Contacts).Returns(() => RawSalesReturnContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnContact>());
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => RawAccounts == null || mock.Object.AccountID == null ? null : RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => RawContacts == null || mock.Object.BillingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => RawContacts == null || mock.Object.ShippingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
                // SalesReturn's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.SalesGroup).Returns(() => RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // SalesReturn's Associated Objects
                mock.Setup(m => m.AssociatedSalesOrders).Returns(() => RawSalesReturnSalesOrders?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnSalesOrder>());
                mock.Setup(m => m.RateQuotes).Returns(() => RawRateQuotes?.Where(x => x.Object.SalesReturnID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RateQuote>());
                mock.Setup(m => m.SalesEvents).Returns(() => RawSalesReturnEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnEvent>());
                mock.Setup(m => m.SalesReturnPayments).Returns(() => RawSalesReturnPayments?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnPayment>());
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesReturnContact.</summary>
        /// <returns>The new SalesReturnContact.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesReturnContact>> CreateADummySalesReturnContactAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesReturnContact>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmAContactRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // SalesReturnContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesReturnContact's Related Objects
                // SalesReturnContact's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesReturnEvent.</summary>
        /// <returns>The new SalesReturnEvent.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesReturnEvent>> CreateADummySalesReturnEventAsync(int id, string? key, string? name, string? desc = null, int masterID = 1, long? oldHash = null, long? newHash = null, int? oldStateID = null, int? newStateID = null, int? oldStatusID = null, int? newStatusID = null, int? oldTypeID = null, int? newTypeID = null, string? oldRecordSerialized = null, string? newRecordSerialized = null, int typeID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesReturnEvent>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // ISalesEventBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.OldHash = oldHash;
                mock.Object.NewHash = newHash;
                mock.Object.OldStateID = oldStateID;
                mock.Object.NewStateID = newStateID;
                mock.Object.OldStatusID = oldStatusID;
                mock.Object.NewStatusID = newStatusID;
                mock.Object.OldTypeID = oldTypeID;
                mock.Object.NewTypeID = newTypeID;
                mock.Object.OldRecordSerialized = oldRecordSerialized;
                mock.Object.NewRecordSerialized = newRecordSerialized;
                // SalesReturnEvent Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawSalesReturnEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // SalesReturnEvent's Related Objects
                // SalesReturnEvent's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesReturnEventType.</summary>
        /// <returns>The new SalesReturnEventType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesReturnEventType>> CreateADummySalesReturnEventTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesReturnEventType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesReturnEventType Properties
                // Dynamic Linking
                // SalesReturnEventType's Related Objects
                // SalesReturnEventType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesReturnFile.</summary>
        /// <returns>The new SalesReturnFile.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesReturnFile>> CreateADummySalesReturnFileAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesReturnFile>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
                // SalesReturnFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesReturnFile's Related Objects
                // SalesReturnFile's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesReturnItem.</summary>
        /// <returns>The new SalesReturnItem.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesReturnItem>> CreateADummySalesReturnItemAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, decimal quantity = 1m, decimal? quantityBackOrdered = 0m, decimal? quantityPreSold = 0m, decimal unitCorePrice = 0m, decimal? unitSoldPrice = null, string? sku = null, string? unitOfMeasure = null, int? productID = null, int? userID = null, int masterID = 1, string forceUniqueLineItemKey = null!, int? originalCurrencyID = null!, decimal? restockingFeeAmount = null!, int? salesReturnReasonID = null!, int? sellingCurrencyID = null!, decimal? unitCorePriceInSellingCurrency = null!, decimal? unitSoldPriceInSellingCurrency = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesReturnItem>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // ISalesItemBase Properties
                mock.Object.Quantity = quantity;
                mock.Object.QuantityBackOrdered = quantityBackOrdered;
                mock.Object.QuantityPreSold = quantityPreSold;
                mock.Object.UnitCorePrice = unitCorePrice;
                mock.Object.UnitSoldPrice = unitSoldPrice;
                mock.Object.Sku = sku;
                mock.Object.UnitOfMeasure = unitOfMeasure;
                mock.Object.ProductID = productID;
                mock.Object.UserID = userID;
                mock.Object.MasterID = masterID;
                // SalesReturnItem Properties
                mock.Object.ForceUniqueLineItemKey = forceUniqueLineItemKey;
                mock.Object.OriginalCurrencyID = originalCurrencyID;
                mock.Object.RestockingFeeAmount = restockingFeeAmount;
                mock.Object.SalesReturnReasonID = salesReturnReasonID;
                mock.Object.SellingCurrencyID = sellingCurrencyID;
                mock.Object.UnitCorePriceInSellingCurrency = unitCorePriceInSellingCurrency;
                mock.Object.UnitSoldPriceInSellingCurrency = unitSoldPriceInSellingCurrency;
                // Dynamic Linking
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.SalesReturnItemID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => RawProducts == null || mock.Object.ProductID == null ? null : RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => RawAppliedSalesReturnItemDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesReturnItemDiscount>());
                mock.Setup(m => m.Targets).Returns(() => RawSalesReturnItemTargets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnItemTarget>());
                // SalesReturnItem's Related Objects
                mock.Setup(m => m.OriginalCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginalCurrencyID)?.Object);
                mock.Setup(m => m.SalesReturnReason).Returns(() => RawSalesReturnReasons?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesReturnReasonID)?.Object);
                mock.Setup(m => m.SellingCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SellingCurrencyID)?.Object);
                // SalesReturnItem's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesReturnItemTarget.</summary>
        /// <returns>The new SalesReturnItemTarget.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesReturnItemTarget>> CreateADummySalesReturnItemTargetAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int? brandProductID = null!, int destinationContactID = 1, int masterID = 1, bool nothingToShip = false, int? originProductInventoryLocationSectionID = null!, int? originStoreProductID = null!, int? originVendorProductID = null!, decimal quantity = 0m, int? selectedRateQuoteID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesReturnItemTarget>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // SalesReturnItemTarget Properties
                mock.Object.BrandProductID = brandProductID;
                mock.Object.DestinationContactID = destinationContactID;
                mock.Object.MasterID = masterID;
                mock.Object.NothingToShip = nothingToShip;
                mock.Object.OriginProductInventoryLocationSectionID = originProductInventoryLocationSectionID;
                mock.Object.OriginStoreProductID = originStoreProductID;
                mock.Object.OriginVendorProductID = originVendorProductID;
                mock.Object.Quantity = quantity;
                mock.Object.SelectedRateQuoteID = selectedRateQuoteID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // SalesReturnItemTarget's Related Objects
                mock.Setup(m => m.BrandProduct).Returns(() => RawBrandProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandProductID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.Master).Returns(() => RawSalesReturnItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.OriginProductInventoryLocationSection).Returns(() => RawProductInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginProductInventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginStoreProduct).Returns(() => RawStoreProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginStoreProductID)?.Object);
                mock.Setup(m => m.OriginVendorProduct).Returns(() => RawVendorProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginVendorProductID)?.Object);
                mock.Setup(m => m.SelectedRateQuote).Returns(() => RawRateQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SelectedRateQuoteID)?.Object);
                // SalesReturnItemTarget's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesReturnReason.</summary>
        /// <returns>The new SalesReturnReason.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesReturnReason>> CreateADummySalesReturnReasonAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool isRestockingFeeApplicable = false, decimal? restockingFeeAmount = null!, int? restockingFeeAmountCurrencyID = null!, decimal? restockingFeePercent = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesReturnReason>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesReturnReason Properties
                mock.Object.IsRestockingFeeApplicable = isRestockingFeeApplicable;
                mock.Object.RestockingFeeAmount = restockingFeeAmount;
                mock.Object.RestockingFeeAmountCurrencyID = restockingFeeAmountCurrencyID;
                mock.Object.RestockingFeePercent = restockingFeePercent;
                // Dynamic Linking
                // SalesReturnReason's Related Objects
                mock.Setup(m => m.RestockingFeeAmountCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.RestockingFeeAmountCurrencyID)?.Object);
                // SalesReturnReason's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesReturnSalesOrder.</summary>
        /// <returns>The new SalesReturnSalesOrder.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesReturnSalesOrder>> CreateADummySalesReturnSalesOrderAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesReturnSalesOrder>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // SalesReturnSalesOrder Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // SalesReturnSalesOrder's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesReturnSalesOrder's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesReturnState.</summary>
        /// <returns>The new SalesReturnState.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesReturnState>> CreateADummySalesReturnStateAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesReturnState>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesReturnState Properties
                // Dynamic Linking
                // SalesReturnState's Related Objects
                // SalesReturnState's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesReturnStatus.</summary>
        /// <returns>The new SalesReturnStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesReturnStatus>> CreateADummySalesReturnStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesReturnStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesReturnStatus Properties
                // Dynamic Linking
                // SalesReturnStatus's Related Objects
                // SalesReturnStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesReturnType.</summary>
        /// <returns>The new SalesReturnType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesReturnType>> CreateADummySalesReturnTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesReturnType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesReturnType Properties
                // Dynamic Linking
                // SalesReturnType's Related Objects
                // SalesReturnType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForReturning(MockingSetup mockingSetup)
        {
            Func<SalesReturn> mockFuncSalesReturn = () =>
            {
                var mock = new Mock<SalesReturn>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesReturn Properties
                // Dynamic Linking
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => mockingSetup.RawSalesReturnFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.SalesReturnID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawSalesReturnStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => mockingSetup.RawSalesReturnStates?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesReturnTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => mockingSetup.RawSalesReturnItems?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnItem>());
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawAppliedSalesReturnDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesReturnDiscount>());
                mock.Setup(m => m.Contacts).Returns(() => mockingSetup.RawSalesReturnContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnContact>());
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => mockingSetup.RawAccounts == null || mock.Object.AccountID == null ? null : mockingSetup.RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.BillingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ShippingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.SalesGroup).Returns(() => mockingSetup.RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // SalesReturn's Associated Objects
                mock.Setup(m => m.AssociatedSalesOrders).Returns(() => mockingSetup.RawSalesReturnSalesOrders?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnSalesOrder>());
                mock.Setup(m => m.RateQuotes).Returns(() => mockingSetup.RawRateQuotes?.Where(x => x.Object.SalesReturnID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RateQuote>());
                mock.Setup(m => m.SalesEvents).Returns(() => mockingSetup.RawSalesReturnEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnEvent>());
                mock.Setup(m => m.SalesReturnPayments).Returns(() => mockingSetup.RawSalesReturnPayments?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnPayment>());
                // SalesReturn's Related Objects
                return mock.Object;
            };
            For<ISalesReturn>().Use(() => mockFuncSalesReturn());
            For<SalesReturn>().Use(() => mockFuncSalesReturn());
            Func<SalesReturnContact> mockFuncSalesReturnContact = () =>
            {
                var mock = new Mock<SalesReturnContact>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesReturnContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesReturnContact's Associated Objects
                // SalesReturnContact's Related Objects
                return mock.Object;
            };
            For<ISalesReturnContact>().Use(() => mockFuncSalesReturnContact());
            For<SalesReturnContact>().Use(() => mockFuncSalesReturnContact());
            Func<SalesReturnEvent> mockFuncSalesReturnEvent = () =>
            {
                var mock = new Mock<SalesReturnEvent>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesReturnEvent Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesReturnEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // SalesReturnEvent's Associated Objects
                // SalesReturnEvent's Related Objects
                return mock.Object;
            };
            For<ISalesReturnEvent>().Use(() => mockFuncSalesReturnEvent());
            For<SalesReturnEvent>().Use(() => mockFuncSalesReturnEvent());
            Func<SalesReturnEventType> mockFuncSalesReturnEventType = () =>
            {
                var mock = new Mock<SalesReturnEventType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesReturnEventType Properties
                // Dynamic Linking
                // SalesReturnEventType's Associated Objects
                // SalesReturnEventType's Related Objects
                return mock.Object;
            };
            For<ISalesReturnEventType>().Use(() => mockFuncSalesReturnEventType());
            For<SalesReturnEventType>().Use(() => mockFuncSalesReturnEventType());
            Func<SalesReturnFile> mockFuncSalesReturnFile = () =>
            {
                var mock = new Mock<SalesReturnFile>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesReturnFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesReturnFile's Associated Objects
                // SalesReturnFile's Related Objects
                return mock.Object;
            };
            For<ISalesReturnFile>().Use(() => mockFuncSalesReturnFile());
            For<SalesReturnFile>().Use(() => mockFuncSalesReturnFile());
            Func<SalesReturnItem> mockFuncSalesReturnItem = () =>
            {
                var mock = new Mock<SalesReturnItem>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesReturnItem Properties
                // Dynamic Linking
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.SalesReturnItemID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => mockingSetup.RawProducts == null || mock.Object.ProductID == null ? null : mockingSetup.RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawAppliedSalesReturnItemDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesReturnItemDiscount>());
                mock.Setup(m => m.Targets).Returns(() => mockingSetup.RawSalesReturnItemTargets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesReturnItemTarget>());
                mock.Setup(m => m.OriginalCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginalCurrencyID)?.Object);
                mock.Setup(m => m.SalesReturnReason).Returns(() => mockingSetup.RawSalesReturnReasons?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesReturnReasonID)?.Object);
                mock.Setup(m => m.SellingCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SellingCurrencyID)?.Object);
                // SalesReturnItem's Associated Objects
                // SalesReturnItem's Related Objects
                return mock.Object;
            };
            For<ISalesReturnItem>().Use(() => mockFuncSalesReturnItem());
            For<SalesReturnItem>().Use(() => mockFuncSalesReturnItem());
            Func<SalesReturnItemTarget> mockFuncSalesReturnItemTarget = () =>
            {
                var mock = new Mock<SalesReturnItemTarget>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesReturnItemTarget Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.BrandProduct).Returns(() => mockingSetup.RawBrandProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandProductID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesReturnItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.OriginProductInventoryLocationSection).Returns(() => mockingSetup.RawProductInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginProductInventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginStoreProduct).Returns(() => mockingSetup.RawStoreProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginStoreProductID)?.Object);
                mock.Setup(m => m.OriginVendorProduct).Returns(() => mockingSetup.RawVendorProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginVendorProductID)?.Object);
                mock.Setup(m => m.SelectedRateQuote).Returns(() => mockingSetup.RawRateQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SelectedRateQuoteID)?.Object);
                // SalesReturnItemTarget's Associated Objects
                // SalesReturnItemTarget's Related Objects
                return mock.Object;
            };
            For<ISalesReturnItemTarget>().Use(() => mockFuncSalesReturnItemTarget());
            For<SalesReturnItemTarget>().Use(() => mockFuncSalesReturnItemTarget());
            Func<SalesReturnReason> mockFuncSalesReturnReason = () =>
            {
                var mock = new Mock<SalesReturnReason>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesReturnReason Properties
                // Dynamic Linking
                mock.Setup(m => m.RestockingFeeAmountCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.RestockingFeeAmountCurrencyID)?.Object);
                // SalesReturnReason's Associated Objects
                // SalesReturnReason's Related Objects
                return mock.Object;
            };
            For<ISalesReturnReason>().Use(() => mockFuncSalesReturnReason());
            For<SalesReturnReason>().Use(() => mockFuncSalesReturnReason());
            Func<SalesReturnSalesOrder> mockFuncSalesReturnSalesOrder = () =>
            {
                var mock = new Mock<SalesReturnSalesOrder>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesReturnSalesOrder Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesReturnSalesOrder's Associated Objects
                // SalesReturnSalesOrder's Related Objects
                return mock.Object;
            };
            For<ISalesReturnSalesOrder>().Use(() => mockFuncSalesReturnSalesOrder());
            For<SalesReturnSalesOrder>().Use(() => mockFuncSalesReturnSalesOrder());
            Func<SalesReturnState> mockFuncSalesReturnState = () =>
            {
                var mock = new Mock<SalesReturnState>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesReturnState Properties
                // Dynamic Linking
                // SalesReturnState's Associated Objects
                // SalesReturnState's Related Objects
                return mock.Object;
            };
            For<ISalesReturnState>().Use(() => mockFuncSalesReturnState());
            For<SalesReturnState>().Use(() => mockFuncSalesReturnState());
            Func<SalesReturnStatus> mockFuncSalesReturnStatus = () =>
            {
                var mock = new Mock<SalesReturnStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesReturnStatus Properties
                // Dynamic Linking
                // SalesReturnStatus's Associated Objects
                // SalesReturnStatus's Related Objects
                return mock.Object;
            };
            For<ISalesReturnStatus>().Use(() => mockFuncSalesReturnStatus());
            For<SalesReturnStatus>().Use(() => mockFuncSalesReturnStatus());
            Func<SalesReturnType> mockFuncSalesReturnType = () =>
            {
                var mock = new Mock<SalesReturnType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesReturnType Properties
                // Dynamic Linking
                // SalesReturnType's Associated Objects
                // SalesReturnType's Related Objects
                return mock.Object;
            };
            For<ISalesReturnType>().Use(() => mockFuncSalesReturnType());
            For<SalesReturnType>().Use(() => mockFuncSalesReturnType());
        }
    }
}
