// <autogenerated>
// <copyright file="Tax.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Tax section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoTax { private get; set; }

        // Enable the tables specifically on run
        public bool DoHistoricalTaxRateTable { private get; set; }
        public bool DoTaxCountryTable { private get; set; }
        public bool DoTaxDistrictTable { private get; set; }
        public bool DoTaxRegionTable { private get; set; }

        // Dirty Checking
        public bool HistoricalTaxRateDirty { private get; set; }
        public bool TaxCountryDirty { private get; set; }
        public bool TaxDistrictDirty { private get; set; }
        public bool TaxRegionDirty { private get; set; }

        // Sets
        public Mock<DbSet<HistoricalTaxRate>>? HistoricalTaxRates { get; private set; }
        public Mock<DbSet<TaxCountry>>? TaxCountries { get; private set; }
        public Mock<DbSet<TaxDistrict>>? TaxDistricts { get; private set; }
        public Mock<DbSet<TaxRegion>>? TaxRegions { get; private set; }

        // Raw Data
        public List<Mock<HistoricalTaxRate>>? RawHistoricalTaxRates { get; private set; }
        public List<Mock<TaxCountry>>? RawTaxCountries { get; private set; }
        public List<Mock<TaxDistrict>>? RawTaxDistricts { get; private set; }
        public List<Mock<TaxRegion>>? RawTaxRegions { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksTaxAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoTax || (DoHistoricalTaxRateTable && (!dirtyOnly || HistoricalTaxRateDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawHistoricalTaxRates == null) { throw new InvalidOperationException("Raw HistoricalTaxRates was null"); }
                    await InitializeMockSetFromListAsync(HistoricalTaxRates, RawHistoricalTaxRates).ConfigureAwait(false);
                    context.Setup(m => m.HistoricalTaxRates).Returns(() => HistoricalTaxRates?.Object!);
                    context.Setup(m => m.Set<HistoricalTaxRate>()).Returns(() => HistoricalTaxRates?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTax || (DoTaxCountryTable && (!dirtyOnly || TaxCountryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawTaxCountries == null) { throw new InvalidOperationException("Raw TaxCountries was null"); }
                    await InitializeMockSetFromListAsync(TaxCountries, RawTaxCountries).ConfigureAwait(false);
                    context.Setup(m => m.TaxCountries).Returns(() => TaxCountries?.Object!);
                    context.Setup(m => m.Set<TaxCountry>()).Returns(() => TaxCountries?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTax || (DoTaxDistrictTable && (!dirtyOnly || TaxDistrictDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawTaxDistricts == null) { throw new InvalidOperationException("Raw TaxDistricts was null"); }
                    await InitializeMockSetFromListAsync(TaxDistricts, RawTaxDistricts).ConfigureAwait(false);
                    context.Setup(m => m.TaxDistricts).Returns(() => TaxDistricts?.Object!);
                    context.Setup(m => m.Set<TaxDistrict>()).Returns(() => TaxDistricts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTax || (DoTaxRegionTable && (!dirtyOnly || TaxRegionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawTaxRegions == null) { throw new InvalidOperationException("Raw TaxRegions was null"); }
                    await InitializeMockSetFromListAsync(TaxRegions, RawTaxRegions).ConfigureAwait(false);
                    context.Setup(m => m.TaxRegions).Returns(() => TaxRegions?.Object!);
                    context.Setup(m => m.Set<TaxRegion>()).Returns(() => TaxRegions?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetHistoricalTaxRatesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<HistoricalTaxRate>> data)
        {
            if (!DoAll && !DoTax && !DoHistoricalTaxRateTable) { return; }
            HistoricalTaxRates ??= new Mock<DbSet<HistoricalTaxRate>>();
            await InitializeMockSetFromListAsync(HistoricalTaxRates, data).ConfigureAwait(false);
            context.Setup(m => m.HistoricalTaxRates).Returns(() => HistoricalTaxRates.Object);
            context.Setup(m => m.Set<HistoricalTaxRate>()).Returns(() => HistoricalTaxRates.Object);
            TableRecordCounts[typeof(HistoricalTaxRate)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(HistoricalTaxRate)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(HistoricalTaxRate)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetTaxCountriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<TaxCountry>> data)
        {
            if (!DoAll && !DoTax && !DoTaxCountryTable) { return; }
            TaxCountries ??= new Mock<DbSet<TaxCountry>>();
            await InitializeMockSetFromListAsync(TaxCountries, data).ConfigureAwait(false);
            context.Setup(m => m.TaxCountries).Returns(() => TaxCountries.Object);
            context.Setup(m => m.Set<TaxCountry>()).Returns(() => TaxCountries.Object);
            TableRecordCounts[typeof(TaxCountry)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(TaxCountry)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(TaxCountry)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(TaxCountry)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetTaxDistrictsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<TaxDistrict>> data)
        {
            if (!DoAll && !DoTax && !DoTaxDistrictTable) { return; }
            TaxDistricts ??= new Mock<DbSet<TaxDistrict>>();
            await InitializeMockSetFromListAsync(TaxDistricts, data).ConfigureAwait(false);
            context.Setup(m => m.TaxDistricts).Returns(() => TaxDistricts.Object);
            context.Setup(m => m.Set<TaxDistrict>()).Returns(() => TaxDistricts.Object);
            TableRecordCounts[typeof(TaxDistrict)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(TaxDistrict)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(TaxDistrict)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(TaxDistrict)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetTaxRegionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<TaxRegion>> data)
        {
            if (!DoAll && !DoTax && !DoTaxRegionTable) { return; }
            TaxRegions ??= new Mock<DbSet<TaxRegion>>();
            await InitializeMockSetFromListAsync(TaxRegions, data).ConfigureAwait(false);
            context.Setup(m => m.TaxRegions).Returns(() => TaxRegions.Object);
            context.Setup(m => m.Set<TaxRegion>()).Returns(() => TaxRegions.Object);
            TableRecordCounts[typeof(TaxRegion)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(TaxRegion)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(TaxRegion)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(TaxRegion)] = data[0].Object.Name;
            }
        }

        /// <summary>Creates a dummy HistoricalTaxRate.</summary>
        /// <returns>The new HistoricalTaxRate.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<HistoricalTaxRate>> CreateADummyHistoricalTaxRateAsync(int id, string? key, string? jsonAttributes = null, long? cartHash = null!, decimal? countryLevelRate = null!, decimal? districtLevelRate = null!, DateTime onDate = default, string provider = null!, decimal rate = 0m, decimal? regionLevelRate = null!, string serializedRequest = null!, string serializedResponse = null!, decimal? totalAmount = null!, decimal? totalTax = null!, decimal? totalTaxable = null!, decimal? totalTaxCalculated = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<HistoricalTaxRate>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // HistoricalTaxRate Properties
                mock.Object.CartHash = cartHash;
                mock.Object.CountryLevelRate = countryLevelRate;
                mock.Object.DistrictLevelRate = districtLevelRate;
                mock.Object.OnDate = onDate;
                mock.Object.Provider = provider;
                mock.Object.Rate = rate;
                mock.Object.RegionLevelRate = regionLevelRate;
                mock.Object.SerializedRequest = serializedRequest;
                mock.Object.SerializedResponse = serializedResponse;
                mock.Object.TotalAmount = totalAmount;
                mock.Object.TotalTax = totalTax;
                mock.Object.TotalTaxable = totalTaxable;
                mock.Object.TotalTaxCalculated = totalTaxCalculated;
                // Dynamic Linking
                // HistoricalTaxRate's Related Objects
                // HistoricalTaxRate's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy TaxCountry.</summary>
        /// <returns>The new TaxCountry.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<TaxCountry>> CreateADummyTaxCountryAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int countryID = 1, decimal rate = 0m, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<TaxCountry>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // TaxCountry Properties
                mock.Object.CountryID = countryID;
                mock.Object.Rate = rate;
                // Dynamic Linking
                // TaxCountry's Related Objects
                mock.Setup(m => m.Country).Returns(() => RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.CountryID)?.Object);
                // TaxCountry's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy TaxDistrict.</summary>
        /// <returns>The new TaxDistrict.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<TaxDistrict>> CreateADummyTaxDistrictAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int districtID = 1, decimal rate = 0m, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<TaxDistrict>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // TaxDistrict Properties
                mock.Object.DistrictID = districtID;
                mock.Object.Rate = rate;
                // Dynamic Linking
                // TaxDistrict's Related Objects
                mock.Setup(m => m.District).Returns(() => RawDistricts?.FirstOrDefault(x => x.Object.ID == mock.Object.DistrictID)?.Object);
                // TaxDistrict's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy TaxRegion.</summary>
        /// <returns>The new TaxRegion.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<TaxRegion>> CreateADummyTaxRegionAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, decimal rate = 0m, int regionID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<TaxRegion>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // TaxRegion Properties
                mock.Object.Rate = rate;
                mock.Object.RegionID = regionID;
                // Dynamic Linking
                // TaxRegion's Related Objects
                mock.Setup(m => m.Region).Returns(() => RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.RegionID)?.Object);
                // TaxRegion's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForTax(MockingSetup mockingSetup)
        {
            Func<HistoricalTaxRate> mockFuncHistoricalTaxRate = () =>
            {
                var mock = new Mock<HistoricalTaxRate>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // HistoricalTaxRate Properties
                // Dynamic Linking
                // HistoricalTaxRate's Associated Objects
                // HistoricalTaxRate's Related Objects
                return mock.Object;
            };
            For<IHistoricalTaxRate>().Use(() => mockFuncHistoricalTaxRate());
            For<HistoricalTaxRate>().Use(() => mockFuncHistoricalTaxRate());
            Func<TaxCountry> mockFuncTaxCountry = () =>
            {
                var mock = new Mock<TaxCountry>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // TaxCountry Properties
                // Dynamic Linking
                mock.Setup(m => m.Country).Returns(() => mockingSetup.RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.CountryID)?.Object);
                // TaxCountry's Associated Objects
                // TaxCountry's Related Objects
                return mock.Object;
            };
            For<ITaxCountry>().Use(() => mockFuncTaxCountry());
            For<TaxCountry>().Use(() => mockFuncTaxCountry());
            Func<TaxDistrict> mockFuncTaxDistrict = () =>
            {
                var mock = new Mock<TaxDistrict>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // TaxDistrict Properties
                // Dynamic Linking
                mock.Setup(m => m.District).Returns(() => mockingSetup.RawDistricts?.FirstOrDefault(x => x.Object.ID == mock.Object.DistrictID)?.Object);
                // TaxDistrict's Associated Objects
                // TaxDistrict's Related Objects
                return mock.Object;
            };
            For<ITaxDistrict>().Use(() => mockFuncTaxDistrict());
            For<TaxDistrict>().Use(() => mockFuncTaxDistrict());
            Func<TaxRegion> mockFuncTaxRegion = () =>
            {
                var mock = new Mock<TaxRegion>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // TaxRegion Properties
                // Dynamic Linking
                mock.Setup(m => m.Region).Returns(() => mockingSetup.RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.RegionID)?.Object);
                // TaxRegion's Associated Objects
                // TaxRegion's Related Objects
                return mock.Object;
            };
            For<ITaxRegion>().Use(() => mockFuncTaxRegion());
            For<TaxRegion>().Use(() => mockFuncTaxRegion());
        }
    }
}
