// <autogenerated>
// <copyright file="Auctions.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Auctions section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoAuctions { private get; set; }

        // Enable the tables specifically on run
        public bool DoAuctionTable { private get; set; }
        public bool DoAuctionCategoryTable { private get; set; }
        public bool DoAuctionStatusTable { private get; set; }
        public bool DoAuctionTypeTable { private get; set; }
        public bool DoBidTable { private get; set; }
        public bool DoBidStatusTable { private get; set; }
        public bool DoBrandAuctionTable { private get; set; }
        public bool DoFranchiseAuctionTable { private get; set; }
        public bool DoLotTable { private get; set; }
        public bool DoLotCategoryTable { private get; set; }
        public bool DoLotGroupTable { private get; set; }
        public bool DoLotStatusTable { private get; set; }
        public bool DoLotTypeTable { private get; set; }
        public bool DoStoreAuctionTable { private get; set; }

        // Dirty Checking
        public bool AuctionDirty { private get; set; }
        public bool AuctionCategoryDirty { private get; set; }
        public bool AuctionStatusDirty { private get; set; }
        public bool AuctionTypeDirty { private get; set; }
        public bool BidDirty { private get; set; }
        public bool BidStatusDirty { private get; set; }
        public bool BrandAuctionDirty { private get; set; }
        public bool FranchiseAuctionDirty { private get; set; }
        public bool LotDirty { private get; set; }
        public bool LotCategoryDirty { private get; set; }
        public bool LotGroupDirty { private get; set; }
        public bool LotStatusDirty { private get; set; }
        public bool LotTypeDirty { private get; set; }
        public bool StoreAuctionDirty { private get; set; }

        // Sets
        public Mock<DbSet<Auction>>? Auctions { get; private set; }
        public Mock<DbSet<AuctionCategory>>? AuctionCategories { get; private set; }
        public Mock<DbSet<AuctionStatus>>? AuctionStatuses { get; private set; }
        public Mock<DbSet<AuctionType>>? AuctionTypes { get; private set; }
        public Mock<DbSet<Bid>>? Bids { get; private set; }
        public Mock<DbSet<BidStatus>>? BidStatuses { get; private set; }
        public Mock<DbSet<BrandAuction>>? BrandAuctions { get; private set; }
        public Mock<DbSet<FranchiseAuction>>? FranchiseAuctions { get; private set; }
        public Mock<DbSet<Lot>>? Lots { get; private set; }
        public Mock<DbSet<LotCategory>>? LotCategories { get; private set; }
        public Mock<DbSet<LotGroup>>? LotGroups { get; private set; }
        public Mock<DbSet<LotStatus>>? LotStatuses { get; private set; }
        public Mock<DbSet<LotType>>? LotTypes { get; private set; }
        public Mock<DbSet<StoreAuction>>? StoreAuctions { get; private set; }

        // Raw Data
        public List<Mock<Auction>>? RawAuctions { get; private set; }
        public List<Mock<AuctionCategory>>? RawAuctionCategories { get; private set; }
        public List<Mock<AuctionStatus>>? RawAuctionStatuses { get; private set; }
        public List<Mock<AuctionType>>? RawAuctionTypes { get; private set; }
        public List<Mock<Bid>>? RawBids { get; private set; }
        public List<Mock<BidStatus>>? RawBidStatuses { get; private set; }
        public List<Mock<BrandAuction>>? RawBrandAuctions { get; private set; }
        public List<Mock<FranchiseAuction>>? RawFranchiseAuctions { get; private set; }
        public List<Mock<Lot>>? RawLots { get; private set; }
        public List<Mock<LotCategory>>? RawLotCategories { get; private set; }
        public List<Mock<LotGroup>>? RawLotGroups { get; private set; }
        public List<Mock<LotStatus>>? RawLotStatuses { get; private set; }
        public List<Mock<LotType>>? RawLotTypes { get; private set; }
        public List<Mock<StoreAuction>>? RawStoreAuctions { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksAuctionsAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoAuctions || (DoAuctionTable && (!dirtyOnly || AuctionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAuctions == null) { throw new InvalidOperationException("Raw Auctions was null"); }
                    await InitializeMockSetFromListAsync(Auctions, RawAuctions).ConfigureAwait(false);
                    context.Setup(m => m.Auctions).Returns(() => Auctions?.Object!);
                    context.Setup(m => m.Set<Auction>()).Returns(() => Auctions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAuctions || (DoAuctionCategoryTable && (!dirtyOnly || AuctionCategoryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAuctionCategories == null) { throw new InvalidOperationException("Raw AuctionCategories was null"); }
                    await InitializeMockSetFromListAsync(AuctionCategories, RawAuctionCategories).ConfigureAwait(false);
                    context.Setup(m => m.AuctionCategories).Returns(() => AuctionCategories?.Object!);
                    context.Setup(m => m.Set<AuctionCategory>()).Returns(() => AuctionCategories?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAuctions || (DoAuctionStatusTable && (!dirtyOnly || AuctionStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAuctionStatuses == null) { throw new InvalidOperationException("Raw AuctionStatuses was null"); }
                    await InitializeMockSetFromListAsync(AuctionStatuses, RawAuctionStatuses).ConfigureAwait(false);
                    context.Setup(m => m.AuctionStatuses).Returns(() => AuctionStatuses?.Object!);
                    context.Setup(m => m.Set<AuctionStatus>()).Returns(() => AuctionStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAuctions || (DoAuctionTypeTable && (!dirtyOnly || AuctionTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAuctionTypes == null) { throw new InvalidOperationException("Raw AuctionTypes was null"); }
                    await InitializeMockSetFromListAsync(AuctionTypes, RawAuctionTypes).ConfigureAwait(false);
                    context.Setup(m => m.AuctionTypes).Returns(() => AuctionTypes?.Object!);
                    context.Setup(m => m.Set<AuctionType>()).Returns(() => AuctionTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAuctions || (DoBidTable && (!dirtyOnly || BidDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBids == null) { throw new InvalidOperationException("Raw Bids was null"); }
                    await InitializeMockSetFromListAsync(Bids, RawBids).ConfigureAwait(false);
                    context.Setup(m => m.Bids).Returns(() => Bids?.Object!);
                    context.Setup(m => m.Set<Bid>()).Returns(() => Bids?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAuctions || (DoBidStatusTable && (!dirtyOnly || BidStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBidStatuses == null) { throw new InvalidOperationException("Raw BidStatuses was null"); }
                    await InitializeMockSetFromListAsync(BidStatuses, RawBidStatuses).ConfigureAwait(false);
                    context.Setup(m => m.BidStatuses).Returns(() => BidStatuses?.Object!);
                    context.Setup(m => m.Set<BidStatus>()).Returns(() => BidStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAuctions || (DoBrandAuctionTable && (!dirtyOnly || BrandAuctionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandAuctions == null) { throw new InvalidOperationException("Raw BrandAuctions was null"); }
                    await InitializeMockSetFromListAsync(BrandAuctions, RawBrandAuctions).ConfigureAwait(false);
                    context.Setup(m => m.BrandAuctions).Returns(() => BrandAuctions?.Object!);
                    context.Setup(m => m.Set<BrandAuction>()).Returns(() => BrandAuctions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAuctions || (DoFranchiseAuctionTable && (!dirtyOnly || FranchiseAuctionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseAuctions == null) { throw new InvalidOperationException("Raw FranchiseAuctions was null"); }
                    await InitializeMockSetFromListAsync(FranchiseAuctions, RawFranchiseAuctions).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseAuctions).Returns(() => FranchiseAuctions?.Object!);
                    context.Setup(m => m.Set<FranchiseAuction>()).Returns(() => FranchiseAuctions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAuctions || (DoLotTable && (!dirtyOnly || LotDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawLots == null) { throw new InvalidOperationException("Raw Lots was null"); }
                    await InitializeMockSetFromListAsync(Lots, RawLots).ConfigureAwait(false);
                    context.Setup(m => m.Lots).Returns(() => Lots?.Object!);
                    context.Setup(m => m.Set<Lot>()).Returns(() => Lots?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAuctions || (DoLotCategoryTable && (!dirtyOnly || LotCategoryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawLotCategories == null) { throw new InvalidOperationException("Raw LotCategories was null"); }
                    await InitializeMockSetFromListAsync(LotCategories, RawLotCategories).ConfigureAwait(false);
                    context.Setup(m => m.LotCategories).Returns(() => LotCategories?.Object!);
                    context.Setup(m => m.Set<LotCategory>()).Returns(() => LotCategories?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAuctions || (DoLotGroupTable && (!dirtyOnly || LotGroupDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawLotGroups == null) { throw new InvalidOperationException("Raw LotGroups was null"); }
                    await InitializeMockSetFromListAsync(LotGroups, RawLotGroups).ConfigureAwait(false);
                    context.Setup(m => m.LotGroups).Returns(() => LotGroups?.Object!);
                    context.Setup(m => m.Set<LotGroup>()).Returns(() => LotGroups?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAuctions || (DoLotStatusTable && (!dirtyOnly || LotStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawLotStatuses == null) { throw new InvalidOperationException("Raw LotStatuses was null"); }
                    await InitializeMockSetFromListAsync(LotStatuses, RawLotStatuses).ConfigureAwait(false);
                    context.Setup(m => m.LotStatuses).Returns(() => LotStatuses?.Object!);
                    context.Setup(m => m.Set<LotStatus>()).Returns(() => LotStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAuctions || (DoLotTypeTable && (!dirtyOnly || LotTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawLotTypes == null) { throw new InvalidOperationException("Raw LotTypes was null"); }
                    await InitializeMockSetFromListAsync(LotTypes, RawLotTypes).ConfigureAwait(false);
                    context.Setup(m => m.LotTypes).Returns(() => LotTypes?.Object!);
                    context.Setup(m => m.Set<LotType>()).Returns(() => LotTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAuctions || (DoStoreAuctionTable && (!dirtyOnly || StoreAuctionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoreAuctions == null) { throw new InvalidOperationException("Raw StoreAuctions was null"); }
                    await InitializeMockSetFromListAsync(StoreAuctions, RawStoreAuctions).ConfigureAwait(false);
                    context.Setup(m => m.StoreAuctions).Returns(() => StoreAuctions?.Object!);
                    context.Setup(m => m.Set<StoreAuction>()).Returns(() => StoreAuctions?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAuctionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Auction>> data)
        {
            if (!DoAll && !DoAuctions && !DoAuctionTable) { return; }
            Auctions ??= new Mock<DbSet<Auction>>();
            await InitializeMockSetFromListAsync(Auctions, data).ConfigureAwait(false);
            context.Setup(m => m.Auctions).Returns(() => Auctions.Object);
            context.Setup(m => m.Set<Auction>()).Returns(() => Auctions.Object);
            TableRecordCounts[typeof(Auction)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Auction)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Auction)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Auction)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAuctionCategoriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AuctionCategory>> data)
        {
            if (!DoAll && !DoAuctions && !DoAuctionCategoryTable) { return; }
            AuctionCategories ??= new Mock<DbSet<AuctionCategory>>();
            await InitializeMockSetFromListAsync(AuctionCategories, data).ConfigureAwait(false);
            context.Setup(m => m.AuctionCategories).Returns(() => AuctionCategories.Object);
            context.Setup(m => m.Set<AuctionCategory>()).Returns(() => AuctionCategories.Object);
            TableRecordCounts[typeof(AuctionCategory)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AuctionCategory)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AuctionCategory)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAuctionStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AuctionStatus>> data)
        {
            if (!DoAll && !DoAuctions && !DoAuctionStatusTable) { return; }
            AuctionStatuses ??= new Mock<DbSet<AuctionStatus>>();
            await InitializeMockSetFromListAsync(AuctionStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.AuctionStatuses).Returns(() => AuctionStatuses.Object);
            context.Setup(m => m.Set<AuctionStatus>()).Returns(() => AuctionStatuses.Object);
            TableRecordCounts[typeof(AuctionStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AuctionStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AuctionStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AuctionStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AuctionStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAuctionTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AuctionType>> data)
        {
            if (!DoAll && !DoAuctions && !DoAuctionTypeTable) { return; }
            AuctionTypes ??= new Mock<DbSet<AuctionType>>();
            await InitializeMockSetFromListAsync(AuctionTypes, data).ConfigureAwait(false);
            context.Setup(m => m.AuctionTypes).Returns(() => AuctionTypes.Object);
            context.Setup(m => m.Set<AuctionType>()).Returns(() => AuctionTypes.Object);
            TableRecordCounts[typeof(AuctionType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AuctionType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AuctionType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AuctionType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AuctionType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBidsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Bid>> data)
        {
            if (!DoAll && !DoAuctions && !DoBidTable) { return; }
            Bids ??= new Mock<DbSet<Bid>>();
            await InitializeMockSetFromListAsync(Bids, data).ConfigureAwait(false);
            context.Setup(m => m.Bids).Returns(() => Bids.Object);
            context.Setup(m => m.Set<Bid>()).Returns(() => Bids.Object);
            TableRecordCounts[typeof(Bid)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Bid)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Bid)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBidStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BidStatus>> data)
        {
            if (!DoAll && !DoAuctions && !DoBidStatusTable) { return; }
            BidStatuses ??= new Mock<DbSet<BidStatus>>();
            await InitializeMockSetFromListAsync(BidStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.BidStatuses).Returns(() => BidStatuses.Object);
            context.Setup(m => m.Set<BidStatus>()).Returns(() => BidStatuses.Object);
            TableRecordCounts[typeof(BidStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BidStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BidStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(BidStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(BidStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandAuctionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandAuction>> data)
        {
            if (!DoAll && !DoAuctions && !DoBrandAuctionTable) { return; }
            BrandAuctions ??= new Mock<DbSet<BrandAuction>>();
            await InitializeMockSetFromListAsync(BrandAuctions, data).ConfigureAwait(false);
            context.Setup(m => m.BrandAuctions).Returns(() => BrandAuctions.Object);
            context.Setup(m => m.Set<BrandAuction>()).Returns(() => BrandAuctions.Object);
            TableRecordCounts[typeof(BrandAuction)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandAuction)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandAuction)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseAuctionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseAuction>> data)
        {
            if (!DoAll && !DoAuctions && !DoFranchiseAuctionTable) { return; }
            FranchiseAuctions ??= new Mock<DbSet<FranchiseAuction>>();
            await InitializeMockSetFromListAsync(FranchiseAuctions, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseAuctions).Returns(() => FranchiseAuctions.Object);
            context.Setup(m => m.Set<FranchiseAuction>()).Returns(() => FranchiseAuctions.Object);
            TableRecordCounts[typeof(FranchiseAuction)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseAuction)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseAuction)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetLotsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Lot>> data)
        {
            if (!DoAll && !DoAuctions && !DoLotTable) { return; }
            Lots ??= new Mock<DbSet<Lot>>();
            await InitializeMockSetFromListAsync(Lots, data).ConfigureAwait(false);
            context.Setup(m => m.Lots).Returns(() => Lots.Object);
            context.Setup(m => m.Set<Lot>()).Returns(() => Lots.Object);
            TableRecordCounts[typeof(Lot)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Lot)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Lot)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Lot)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetLotCategoriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<LotCategory>> data)
        {
            if (!DoAll && !DoAuctions && !DoLotCategoryTable) { return; }
            LotCategories ??= new Mock<DbSet<LotCategory>>();
            await InitializeMockSetFromListAsync(LotCategories, data).ConfigureAwait(false);
            context.Setup(m => m.LotCategories).Returns(() => LotCategories.Object);
            context.Setup(m => m.Set<LotCategory>()).Returns(() => LotCategories.Object);
            TableRecordCounts[typeof(LotCategory)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(LotCategory)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(LotCategory)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetLotGroupsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<LotGroup>> data)
        {
            if (!DoAll && !DoAuctions && !DoLotGroupTable) { return; }
            LotGroups ??= new Mock<DbSet<LotGroup>>();
            await InitializeMockSetFromListAsync(LotGroups, data).ConfigureAwait(false);
            context.Setup(m => m.LotGroups).Returns(() => LotGroups.Object);
            context.Setup(m => m.Set<LotGroup>()).Returns(() => LotGroups.Object);
            TableRecordCounts[typeof(LotGroup)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(LotGroup)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(LotGroup)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(LotGroup)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(LotGroup)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetLotStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<LotStatus>> data)
        {
            if (!DoAll && !DoAuctions && !DoLotStatusTable) { return; }
            LotStatuses ??= new Mock<DbSet<LotStatus>>();
            await InitializeMockSetFromListAsync(LotStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.LotStatuses).Returns(() => LotStatuses.Object);
            context.Setup(m => m.Set<LotStatus>()).Returns(() => LotStatuses.Object);
            TableRecordCounts[typeof(LotStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(LotStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(LotStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(LotStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(LotStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetLotTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<LotType>> data)
        {
            if (!DoAll && !DoAuctions && !DoLotTypeTable) { return; }
            LotTypes ??= new Mock<DbSet<LotType>>();
            await InitializeMockSetFromListAsync(LotTypes, data).ConfigureAwait(false);
            context.Setup(m => m.LotTypes).Returns(() => LotTypes.Object);
            context.Setup(m => m.Set<LotType>()).Returns(() => LotTypes.Object);
            TableRecordCounts[typeof(LotType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(LotType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(LotType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(LotType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(LotType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoreAuctionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoreAuction>> data)
        {
            if (!DoAll && !DoAuctions && !DoStoreAuctionTable) { return; }
            StoreAuctions ??= new Mock<DbSet<StoreAuction>>();
            await InitializeMockSetFromListAsync(StoreAuctions, data).ConfigureAwait(false);
            context.Setup(m => m.StoreAuctions).Returns(() => StoreAuctions.Object);
            context.Setup(m => m.Set<StoreAuction>()).Returns(() => StoreAuctions.Object);
            TableRecordCounts[typeof(StoreAuction)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoreAuction)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoreAuction)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy Auction.</summary>
        /// <returns>The new Auction.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Auction>> CreateADummyAuctionAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, int statusID = 1, int? contactID = null, string? jsonAttributes = null, DateTime? closesAt = null!, DateTime? opensAt = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Auction>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // IHaveANullableContactBase Properties
                mock.Object.ContactID = contactID;
                // Auction Properties
                mock.Object.ClosesAt = closesAt;
                mock.Object.OpensAt = opensAt;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawAuctionTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawAuctionStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => RawContacts == null || mock.Object.ContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // Auction's Related Objects
                // Auction's Associated Objects
                mock.Setup(m => m.Brands).Returns(() => RawBrandAuctions?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandAuction>());
                mock.Setup(m => m.Categories).Returns(() => RawAuctionCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AuctionCategory>());
                mock.Setup(m => m.Franchises).Returns(() => RawFranchiseAuctions?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseAuction>());
                mock.Setup(m => m.Lots).Returns(() => RawLots?.Where(x => x.Object.AuctionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Lot>());
                mock.Setup(m => m.Stores).Returns(() => RawStoreAuctions?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreAuction>());
                return mock;
            });
        }

        /// <summary>Creates a dummy AuctionCategory.</summary>
        /// <returns>The new AuctionCategory.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AuctionCategory>> CreateADummyAuctionCategoryAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int? sortOrder = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AuctionCategory>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AuctionCategory Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.SortOrder = sortOrder;
                // Dynamic Linking
                // AuctionCategory's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawAuctions?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AuctionCategory's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AuctionStatus.</summary>
        /// <returns>The new AuctionStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AuctionStatus>> CreateADummyAuctionStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AuctionStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AuctionStatus Properties
                // Dynamic Linking
                // AuctionStatus's Related Objects
                // AuctionStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AuctionType.</summary>
        /// <returns>The new AuctionType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AuctionType>> CreateADummyAuctionTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AuctionType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AuctionType Properties
                // Dynamic Linking
                // AuctionType's Related Objects
                // AuctionType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Bid.</summary>
        /// <returns>The new Bid.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Bid>> CreateADummyBidAsync(int id, string? key, int statusID = 1, string? jsonAttributes = null, decimal? currentBid = null!, int? lotID = null!, decimal? maxBid = null!, int userID = 1, bool won = false, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Bid>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // Bid Properties
                mock.Object.CurrentBid = currentBid;
                mock.Object.LotID = lotID;
                mock.Object.MaxBid = maxBid;
                mock.Object.UserID = userID;
                mock.Object.Won = won;
                // Dynamic Linking
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawBidStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // Bid's Related Objects
                mock.Setup(m => m.Lot).Returns(() => RawLots?.FirstOrDefault(x => x.Object.ID == mock.Object.LotID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // Bid's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BidStatus.</summary>
        /// <returns>The new BidStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BidStatus>> CreateADummyBidStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BidStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // BidStatus Properties
                // Dynamic Linking
                // BidStatus's Related Objects
                // BidStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandAuction.</summary>
        /// <returns>The new BrandAuction.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandAuction>> CreateADummyBrandAuctionAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandAuction>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // BrandAuction Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // BrandAuction's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawAuctions?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandAuction's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseAuction.</summary>
        /// <returns>The new FranchiseAuction.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseAuction>> CreateADummyFranchiseAuctionAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseAuction>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FranchiseAuction Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FranchiseAuction's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawAuctions?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseAuction's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Lot.</summary>
        /// <returns>The new Lot.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Lot>> CreateADummyLotAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, int statusID = 1, string? jsonAttributes = null, int auctionID = 1, decimal? biddingReserve = null!, bool buyNowAvailable = false, int? lotGroupID = null!, bool noShow = false, int? pickupLocationID = null!, DateTime? pickupTime = null!, bool preventBuyMultiple = false, int productID = 1, decimal? quantityAvailable = null!, decimal? quantitySold = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Lot>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // Lot Properties
                mock.Object.AuctionID = auctionID;
                mock.Object.BiddingReserve = biddingReserve;
                mock.Object.BuyNowAvailable = buyNowAvailable;
                mock.Object.LotGroupID = lotGroupID;
                mock.Object.NoShow = noShow;
                mock.Object.PickupLocationID = pickupLocationID;
                mock.Object.PickupTime = pickupTime;
                mock.Object.PreventBuyMultiple = preventBuyMultiple;
                mock.Object.ProductID = productID;
                mock.Object.QuantityAvailable = quantityAvailable;
                mock.Object.QuantitySold = quantitySold;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawLotTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawLotStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // Lot's Related Objects
                mock.Setup(m => m.Auction).Returns(() => RawAuctions?.FirstOrDefault(x => x.Object.ID == mock.Object.AuctionID)?.Object);
                mock.Setup(m => m.LotGroup).Returns(() => RawLotGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.LotGroupID)?.Object);
                mock.Setup(m => m.PickupLocation).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.PickupLocationID)?.Object);
                mock.Setup(m => m.Product).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                // Lot's Associated Objects
                mock.Setup(m => m.Bids).Returns(() => RawBids?.Where(x => x.Object.LotID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Bid>());
                mock.Setup(m => m.Categories).Returns(() => RawLotCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<LotCategory>());
                return mock;
            });
        }

        /// <summary>Creates a dummy LotCategory.</summary>
        /// <returns>The new LotCategory.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<LotCategory>> CreateADummyLotCategoryAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int? sortOrder = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<LotCategory>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // LotCategory Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.SortOrder = sortOrder;
                // Dynamic Linking
                // LotCategory's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawLots?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // LotCategory's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy LotGroup.</summary>
        /// <returns>The new LotGroup.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<LotGroup>> CreateADummyLotGroupAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<LotGroup>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // LotGroup Properties
                // Dynamic Linking
                // LotGroup's Related Objects
                // LotGroup's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy LotStatus.</summary>
        /// <returns>The new LotStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<LotStatus>> CreateADummyLotStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<LotStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // LotStatus Properties
                // Dynamic Linking
                // LotStatus's Related Objects
                // LotStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy LotType.</summary>
        /// <returns>The new LotType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<LotType>> CreateADummyLotTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<LotType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // LotType Properties
                // Dynamic Linking
                // LotType's Related Objects
                // LotType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy StoreAuction.</summary>
        /// <returns>The new StoreAuction.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoreAuction>> CreateADummyStoreAuctionAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoreAuction>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // StoreAuction Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // StoreAuction's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawAuctions?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreAuction's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForAuctions(MockingSetup mockingSetup)
        {
            Func<Auction> mockFuncAuction = () =>
            {
                var mock = new Mock<Auction>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Auction Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawAuctionTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawAuctionStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // Auction's Associated Objects
                mock.Setup(m => m.Brands).Returns(() => mockingSetup.RawBrandAuctions?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandAuction>());
                mock.Setup(m => m.Categories).Returns(() => mockingSetup.RawAuctionCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AuctionCategory>());
                mock.Setup(m => m.Franchises).Returns(() => mockingSetup.RawFranchiseAuctions?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseAuction>());
                mock.Setup(m => m.Lots).Returns(() => mockingSetup.RawLots?.Where(x => x.Object.AuctionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Lot>());
                mock.Setup(m => m.Stores).Returns(() => mockingSetup.RawStoreAuctions?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreAuction>());
                // Auction's Related Objects
                return mock.Object;
            };
            For<IAuction>().Use(() => mockFuncAuction());
            For<Auction>().Use(() => mockFuncAuction());
            Func<AuctionCategory> mockFuncAuctionCategory = () =>
            {
                var mock = new Mock<AuctionCategory>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AuctionCategory Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAuctions?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AuctionCategory's Associated Objects
                // AuctionCategory's Related Objects
                return mock.Object;
            };
            For<IAuctionCategory>().Use(() => mockFuncAuctionCategory());
            For<AuctionCategory>().Use(() => mockFuncAuctionCategory());
            Func<AuctionStatus> mockFuncAuctionStatus = () =>
            {
                var mock = new Mock<AuctionStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AuctionStatus Properties
                // Dynamic Linking
                // AuctionStatus's Associated Objects
                // AuctionStatus's Related Objects
                return mock.Object;
            };
            For<IAuctionStatus>().Use(() => mockFuncAuctionStatus());
            For<AuctionStatus>().Use(() => mockFuncAuctionStatus());
            Func<AuctionType> mockFuncAuctionType = () =>
            {
                var mock = new Mock<AuctionType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AuctionType Properties
                // Dynamic Linking
                // AuctionType's Associated Objects
                // AuctionType's Related Objects
                return mock.Object;
            };
            For<IAuctionType>().Use(() => mockFuncAuctionType());
            For<AuctionType>().Use(() => mockFuncAuctionType());
            Func<Bid> mockFuncBid = () =>
            {
                var mock = new Mock<Bid>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Bid Properties
                // Dynamic Linking
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawBidStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.Lot).Returns(() => mockingSetup.RawLots?.FirstOrDefault(x => x.Object.ID == mock.Object.LotID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // Bid's Associated Objects
                // Bid's Related Objects
                return mock.Object;
            };
            For<IBid>().Use(() => mockFuncBid());
            For<Bid>().Use(() => mockFuncBid());
            Func<BidStatus> mockFuncBidStatus = () =>
            {
                var mock = new Mock<BidStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BidStatus Properties
                // Dynamic Linking
                // BidStatus's Associated Objects
                // BidStatus's Related Objects
                return mock.Object;
            };
            For<IBidStatus>().Use(() => mockFuncBidStatus());
            For<BidStatus>().Use(() => mockFuncBidStatus());
            Func<BrandAuction> mockFuncBrandAuction = () =>
            {
                var mock = new Mock<BrandAuction>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandAuction Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAuctions?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandAuction's Associated Objects
                // BrandAuction's Related Objects
                return mock.Object;
            };
            For<IBrandAuction>().Use(() => mockFuncBrandAuction());
            For<BrandAuction>().Use(() => mockFuncBrandAuction());
            Func<FranchiseAuction> mockFuncFranchiseAuction = () =>
            {
                var mock = new Mock<FranchiseAuction>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseAuction Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAuctions?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseAuction's Associated Objects
                // FranchiseAuction's Related Objects
                return mock.Object;
            };
            For<IFranchiseAuction>().Use(() => mockFuncFranchiseAuction());
            For<FranchiseAuction>().Use(() => mockFuncFranchiseAuction());
            Func<Lot> mockFuncLot = () =>
            {
                var mock = new Mock<Lot>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Lot Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawLotTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawLotStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.Auction).Returns(() => mockingSetup.RawAuctions?.FirstOrDefault(x => x.Object.ID == mock.Object.AuctionID)?.Object);
                mock.Setup(m => m.LotGroup).Returns(() => mockingSetup.RawLotGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.LotGroupID)?.Object);
                mock.Setup(m => m.PickupLocation).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.PickupLocationID)?.Object);
                mock.Setup(m => m.Product).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                // Lot's Associated Objects
                mock.Setup(m => m.Bids).Returns(() => mockingSetup.RawBids?.Where(x => x.Object.LotID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Bid>());
                mock.Setup(m => m.Categories).Returns(() => mockingSetup.RawLotCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<LotCategory>());
                // Lot's Related Objects
                return mock.Object;
            };
            For<ILot>().Use(() => mockFuncLot());
            For<Lot>().Use(() => mockFuncLot());
            Func<LotCategory> mockFuncLotCategory = () =>
            {
                var mock = new Mock<LotCategory>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // LotCategory Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawLots?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // LotCategory's Associated Objects
                // LotCategory's Related Objects
                return mock.Object;
            };
            For<ILotCategory>().Use(() => mockFuncLotCategory());
            For<LotCategory>().Use(() => mockFuncLotCategory());
            Func<LotGroup> mockFuncLotGroup = () =>
            {
                var mock = new Mock<LotGroup>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // LotGroup Properties
                // Dynamic Linking
                // LotGroup's Associated Objects
                // LotGroup's Related Objects
                return mock.Object;
            };
            For<ILotGroup>().Use(() => mockFuncLotGroup());
            For<LotGroup>().Use(() => mockFuncLotGroup());
            Func<LotStatus> mockFuncLotStatus = () =>
            {
                var mock = new Mock<LotStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // LotStatus Properties
                // Dynamic Linking
                // LotStatus's Associated Objects
                // LotStatus's Related Objects
                return mock.Object;
            };
            For<ILotStatus>().Use(() => mockFuncLotStatus());
            For<LotStatus>().Use(() => mockFuncLotStatus());
            Func<LotType> mockFuncLotType = () =>
            {
                var mock = new Mock<LotType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // LotType Properties
                // Dynamic Linking
                // LotType's Associated Objects
                // LotType's Related Objects
                return mock.Object;
            };
            For<ILotType>().Use(() => mockFuncLotType());
            For<LotType>().Use(() => mockFuncLotType());
            Func<StoreAuction> mockFuncStoreAuction = () =>
            {
                var mock = new Mock<StoreAuction>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoreAuction Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAuctions?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // StoreAuction's Associated Objects
                // StoreAuction's Related Objects
                return mock.Object;
            };
            For<IStoreAuction>().Use(() => mockFuncStoreAuction());
            For<StoreAuction>().Use(() => mockFuncStoreAuction());
        }
    }
}
