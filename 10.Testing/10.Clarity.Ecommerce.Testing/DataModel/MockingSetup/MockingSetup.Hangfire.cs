// <autogenerated>
// <copyright file="Hangfire.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Hangfire section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoHangfire { private get; set; }

        // Enable the tables specifically on run
        public bool DoScheduledJobConfigurationTable { private get; set; }
        public bool DoScheduledJobConfigurationSettingTable { private get; set; }

        // Dirty Checking
        public bool ScheduledJobConfigurationDirty { private get; set; }
        public bool ScheduledJobConfigurationSettingDirty { private get; set; }

        // Sets
        public Mock<DbSet<ScheduledJobConfiguration>>? ScheduledJobConfigurations { get; private set; }
        public Mock<DbSet<ScheduledJobConfigurationSetting>>? ScheduledJobConfigurationSettings { get; private set; }

        // Raw Data
        public List<Mock<ScheduledJobConfiguration>>? RawScheduledJobConfigurations { get; private set; }
        public List<Mock<ScheduledJobConfigurationSetting>>? RawScheduledJobConfigurationSettings { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksHangfireAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoHangfire || (DoScheduledJobConfigurationTable && (!dirtyOnly || ScheduledJobConfigurationDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawScheduledJobConfigurations == null) { throw new InvalidOperationException("Raw ScheduledJobConfigurations was null"); }
                    await InitializeMockSetFromListAsync(ScheduledJobConfigurations, RawScheduledJobConfigurations).ConfigureAwait(false);
                    context.Setup(m => m.ScheduledJobConfigurations).Returns(() => ScheduledJobConfigurations?.Object!);
                    context.Setup(m => m.Set<ScheduledJobConfiguration>()).Returns(() => ScheduledJobConfigurations?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoHangfire || (DoScheduledJobConfigurationSettingTable && (!dirtyOnly || ScheduledJobConfigurationSettingDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawScheduledJobConfigurationSettings == null) { throw new InvalidOperationException("Raw ScheduledJobConfigurationSettings was null"); }
                    await InitializeMockSetFromListAsync(ScheduledJobConfigurationSettings, RawScheduledJobConfigurationSettings).ConfigureAwait(false);
                    context.Setup(m => m.ScheduledJobConfigurationSettings).Returns(() => ScheduledJobConfigurationSettings?.Object!);
                    context.Setup(m => m.Set<ScheduledJobConfigurationSetting>()).Returns(() => ScheduledJobConfigurationSettings?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetScheduledJobConfigurationsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ScheduledJobConfiguration>> data)
        {
            if (!DoAll && !DoHangfire && !DoScheduledJobConfigurationTable) { return; }
            ScheduledJobConfigurations ??= new Mock<DbSet<ScheduledJobConfiguration>>();
            await InitializeMockSetFromListAsync(ScheduledJobConfigurations, data).ConfigureAwait(false);
            context.Setup(m => m.ScheduledJobConfigurations).Returns(() => ScheduledJobConfigurations.Object);
            context.Setup(m => m.Set<ScheduledJobConfiguration>()).Returns(() => ScheduledJobConfigurations.Object);
            TableRecordCounts[typeof(ScheduledJobConfiguration)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ScheduledJobConfiguration)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ScheduledJobConfiguration)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ScheduledJobConfiguration)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetScheduledJobConfigurationSettingsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ScheduledJobConfigurationSetting>> data)
        {
            if (!DoAll && !DoHangfire && !DoScheduledJobConfigurationSettingTable) { return; }
            ScheduledJobConfigurationSettings ??= new Mock<DbSet<ScheduledJobConfigurationSetting>>();
            await InitializeMockSetFromListAsync(ScheduledJobConfigurationSettings, data).ConfigureAwait(false);
            context.Setup(m => m.ScheduledJobConfigurationSettings).Returns(() => ScheduledJobConfigurationSettings.Object);
            context.Setup(m => m.Set<ScheduledJobConfigurationSetting>()).Returns(() => ScheduledJobConfigurationSettings.Object);
            TableRecordCounts[typeof(ScheduledJobConfigurationSetting)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ScheduledJobConfigurationSetting)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ScheduledJobConfigurationSetting)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy ScheduledJobConfiguration.</summary>
        /// <returns>The new ScheduledJobConfiguration.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ScheduledJobConfiguration>> CreateADummyScheduledJobConfigurationAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int? notificationTemplateID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ScheduledJobConfiguration>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // ScheduledJobConfiguration Properties
                mock.Object.NotificationTemplateID = notificationTemplateID;
                // Dynamic Linking
                // ScheduledJobConfiguration's Related Objects
                mock.Setup(m => m.NotificationTemplate).Returns(() => RawEmailTemplates?.FirstOrDefault(x => x.Object.ID == mock.Object.NotificationTemplateID)?.Object);
                // ScheduledJobConfiguration's Associated Objects
                mock.Setup(m => m.ScheduledJobConfigurationSettings).Returns(() => RawScheduledJobConfigurationSettings?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ScheduledJobConfigurationSetting>());
                return mock;
            });
        }

        /// <summary>Creates a dummy ScheduledJobConfigurationSetting.</summary>
        /// <returns>The new ScheduledJobConfigurationSetting.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ScheduledJobConfigurationSetting>> CreateADummyScheduledJobConfigurationSettingAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ScheduledJobConfigurationSetting>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ScheduledJobConfigurationSetting Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // ScheduledJobConfigurationSetting's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawScheduledJobConfigurations?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawSettings?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ScheduledJobConfigurationSetting's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForHangfire(MockingSetup mockingSetup)
        {
            Func<ScheduledJobConfiguration> mockFuncScheduledJobConfiguration = () =>
            {
                var mock = new Mock<ScheduledJobConfiguration>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ScheduledJobConfiguration Properties
                // Dynamic Linking
                mock.Setup(m => m.NotificationTemplate).Returns(() => mockingSetup.RawEmailTemplates?.FirstOrDefault(x => x.Object.ID == mock.Object.NotificationTemplateID)?.Object);
                // ScheduledJobConfiguration's Associated Objects
                mock.Setup(m => m.ScheduledJobConfigurationSettings).Returns(() => mockingSetup.RawScheduledJobConfigurationSettings?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ScheduledJobConfigurationSetting>());
                // ScheduledJobConfiguration's Related Objects
                return mock.Object;
            };
            For<IScheduledJobConfiguration>().Use(() => mockFuncScheduledJobConfiguration());
            For<ScheduledJobConfiguration>().Use(() => mockFuncScheduledJobConfiguration());
            Func<ScheduledJobConfigurationSetting> mockFuncScheduledJobConfigurationSetting = () =>
            {
                var mock = new Mock<ScheduledJobConfigurationSetting>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ScheduledJobConfigurationSetting Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawScheduledJobConfigurations?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawSettings?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ScheduledJobConfigurationSetting's Associated Objects
                // ScheduledJobConfigurationSetting's Related Objects
                return mock.Object;
            };
            For<IScheduledJobConfigurationSetting>().Use(() => mockFuncScheduledJobConfigurationSetting());
            For<ScheduledJobConfigurationSetting>().Use(() => mockFuncScheduledJobConfigurationSetting());
        }
    }
}
