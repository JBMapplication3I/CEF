// <autogenerated>
// <copyright file="Discounts.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Discounts section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoDiscounts { private get; set; }

        // Enable the tables specifically on run
        public bool DoAppliedCartDiscountTable { private get; set; }
        public bool DoAppliedCartItemDiscountTable { private get; set; }
        public bool DoDiscountTable { private get; set; }
        public bool DoDiscountAccountTable { private get; set; }
        public bool DoDiscountAccountTypeTable { private get; set; }
        public bool DoDiscountBrandTable { private get; set; }
        public bool DoDiscountCategoryTable { private get; set; }
        public bool DoDiscountCodeTable { private get; set; }
        public bool DoDiscountCountryTable { private get; set; }
        public bool DoDiscountFranchiseTable { private get; set; }
        public bool DoDiscountManufacturerTable { private get; set; }
        public bool DoDiscountProductTable { private get; set; }
        public bool DoDiscountProductTypeTable { private get; set; }
        public bool DoDiscountShipCarrierMethodTable { private get; set; }
        public bool DoDiscountStoreTable { private get; set; }
        public bool DoDiscountUserTable { private get; set; }
        public bool DoDiscountUserRoleTable { private get; set; }
        public bool DoDiscountVendorTable { private get; set; }
        public bool DoAppliedPurchaseOrderDiscountTable { private get; set; }
        public bool DoAppliedPurchaseOrderItemDiscountTable { private get; set; }
        public bool DoAppliedSalesInvoiceDiscountTable { private get; set; }
        public bool DoAppliedSalesInvoiceItemDiscountTable { private get; set; }
        public bool DoAppliedSalesOrderDiscountTable { private get; set; }
        public bool DoAppliedSalesOrderItemDiscountTable { private get; set; }
        public bool DoAppliedSalesQuoteDiscountTable { private get; set; }
        public bool DoAppliedSalesQuoteItemDiscountTable { private get; set; }
        public bool DoAppliedSalesReturnDiscountTable { private get; set; }
        public bool DoAppliedSalesReturnItemDiscountTable { private get; set; }
        public bool DoAppliedSampleRequestDiscountTable { private get; set; }
        public bool DoAppliedSampleRequestItemDiscountTable { private get; set; }

        // Dirty Checking
        public bool AppliedCartDiscountDirty { private get; set; }
        public bool AppliedCartItemDiscountDirty { private get; set; }
        public bool DiscountDirty { private get; set; }
        public bool DiscountAccountDirty { private get; set; }
        public bool DiscountAccountTypeDirty { private get; set; }
        public bool DiscountBrandDirty { private get; set; }
        public bool DiscountCategoryDirty { private get; set; }
        public bool DiscountCodeDirty { private get; set; }
        public bool DiscountCountryDirty { private get; set; }
        public bool DiscountFranchiseDirty { private get; set; }
        public bool DiscountManufacturerDirty { private get; set; }
        public bool DiscountProductDirty { private get; set; }
        public bool DiscountProductTypeDirty { private get; set; }
        public bool DiscountShipCarrierMethodDirty { private get; set; }
        public bool DiscountStoreDirty { private get; set; }
        public bool DiscountUserDirty { private get; set; }
        public bool DiscountUserRoleDirty { private get; set; }
        public bool DiscountVendorDirty { private get; set; }
        public bool AppliedPurchaseOrderDiscountDirty { private get; set; }
        public bool AppliedPurchaseOrderItemDiscountDirty { private get; set; }
        public bool AppliedSalesInvoiceDiscountDirty { private get; set; }
        public bool AppliedSalesInvoiceItemDiscountDirty { private get; set; }
        public bool AppliedSalesOrderDiscountDirty { private get; set; }
        public bool AppliedSalesOrderItemDiscountDirty { private get; set; }
        public bool AppliedSalesQuoteDiscountDirty { private get; set; }
        public bool AppliedSalesQuoteItemDiscountDirty { private get; set; }
        public bool AppliedSalesReturnDiscountDirty { private get; set; }
        public bool AppliedSalesReturnItemDiscountDirty { private get; set; }
        public bool AppliedSampleRequestDiscountDirty { private get; set; }
        public bool AppliedSampleRequestItemDiscountDirty { private get; set; }

        // Sets
        public Mock<DbSet<AppliedCartDiscount>>? AppliedCartDiscounts { get; private set; }
        public Mock<DbSet<AppliedCartItemDiscount>>? AppliedCartItemDiscounts { get; private set; }
        public Mock<DbSet<Discount>>? Discounts { get; private set; }
        public Mock<DbSet<DiscountAccount>>? DiscountAccounts { get; private set; }
        public Mock<DbSet<DiscountAccountType>>? DiscountAccountTypes { get; private set; }
        public Mock<DbSet<DiscountBrand>>? DiscountBrands { get; private set; }
        public Mock<DbSet<DiscountCategory>>? DiscountCategories { get; private set; }
        public Mock<DbSet<DiscountCode>>? DiscountCodes { get; private set; }
        public Mock<DbSet<DiscountCountry>>? DiscountCountries { get; private set; }
        public Mock<DbSet<DiscountFranchise>>? DiscountFranchises { get; private set; }
        public Mock<DbSet<DiscountManufacturer>>? DiscountManufacturers { get; private set; }
        public Mock<DbSet<DiscountProduct>>? DiscountProducts { get; private set; }
        public Mock<DbSet<DiscountProductType>>? DiscountProductTypes { get; private set; }
        public Mock<DbSet<DiscountShipCarrierMethod>>? DiscountShipCarrierMethods { get; private set; }
        public Mock<DbSet<DiscountStore>>? DiscountStores { get; private set; }
        public Mock<DbSet<DiscountUser>>? DiscountUsers { get; private set; }
        public Mock<DbSet<DiscountUserRole>>? DiscountUserRoles { get; private set; }
        public Mock<DbSet<DiscountVendor>>? DiscountVendors { get; private set; }
        public Mock<DbSet<AppliedPurchaseOrderDiscount>>? AppliedPurchaseOrderDiscounts { get; private set; }
        public Mock<DbSet<AppliedPurchaseOrderItemDiscount>>? AppliedPurchaseOrderItemDiscounts { get; private set; }
        public Mock<DbSet<AppliedSalesInvoiceDiscount>>? AppliedSalesInvoiceDiscounts { get; private set; }
        public Mock<DbSet<AppliedSalesInvoiceItemDiscount>>? AppliedSalesInvoiceItemDiscounts { get; private set; }
        public Mock<DbSet<AppliedSalesOrderDiscount>>? AppliedSalesOrderDiscounts { get; private set; }
        public Mock<DbSet<AppliedSalesOrderItemDiscount>>? AppliedSalesOrderItemDiscounts { get; private set; }
        public Mock<DbSet<AppliedSalesQuoteDiscount>>? AppliedSalesQuoteDiscounts { get; private set; }
        public Mock<DbSet<AppliedSalesQuoteItemDiscount>>? AppliedSalesQuoteItemDiscounts { get; private set; }
        public Mock<DbSet<AppliedSalesReturnDiscount>>? AppliedSalesReturnDiscounts { get; private set; }
        public Mock<DbSet<AppliedSalesReturnItemDiscount>>? AppliedSalesReturnItemDiscounts { get; private set; }
        public Mock<DbSet<AppliedSampleRequestDiscount>>? AppliedSampleRequestDiscounts { get; private set; }
        public Mock<DbSet<AppliedSampleRequestItemDiscount>>? AppliedSampleRequestItemDiscounts { get; private set; }

        // Raw Data
        public List<Mock<AppliedCartDiscount>>? RawAppliedCartDiscounts { get; private set; }
        public List<Mock<AppliedCartItemDiscount>>? RawAppliedCartItemDiscounts { get; private set; }
        public List<Mock<Discount>>? RawDiscounts { get; private set; }
        public List<Mock<DiscountAccount>>? RawDiscountAccounts { get; private set; }
        public List<Mock<DiscountAccountType>>? RawDiscountAccountTypes { get; private set; }
        public List<Mock<DiscountBrand>>? RawDiscountBrands { get; private set; }
        public List<Mock<DiscountCategory>>? RawDiscountCategories { get; private set; }
        public List<Mock<DiscountCode>>? RawDiscountCodes { get; private set; }
        public List<Mock<DiscountCountry>>? RawDiscountCountries { get; private set; }
        public List<Mock<DiscountFranchise>>? RawDiscountFranchises { get; private set; }
        public List<Mock<DiscountManufacturer>>? RawDiscountManufacturers { get; private set; }
        public List<Mock<DiscountProduct>>? RawDiscountProducts { get; private set; }
        public List<Mock<DiscountProductType>>? RawDiscountProductTypes { get; private set; }
        public List<Mock<DiscountShipCarrierMethod>>? RawDiscountShipCarrierMethods { get; private set; }
        public List<Mock<DiscountStore>>? RawDiscountStores { get; private set; }
        public List<Mock<DiscountUser>>? RawDiscountUsers { get; private set; }
        public List<Mock<DiscountUserRole>>? RawDiscountUserRoles { get; private set; }
        public List<Mock<DiscountVendor>>? RawDiscountVendors { get; private set; }
        public List<Mock<AppliedPurchaseOrderDiscount>>? RawAppliedPurchaseOrderDiscounts { get; private set; }
        public List<Mock<AppliedPurchaseOrderItemDiscount>>? RawAppliedPurchaseOrderItemDiscounts { get; private set; }
        public List<Mock<AppliedSalesInvoiceDiscount>>? RawAppliedSalesInvoiceDiscounts { get; private set; }
        public List<Mock<AppliedSalesInvoiceItemDiscount>>? RawAppliedSalesInvoiceItemDiscounts { get; private set; }
        public List<Mock<AppliedSalesOrderDiscount>>? RawAppliedSalesOrderDiscounts { get; private set; }
        public List<Mock<AppliedSalesOrderItemDiscount>>? RawAppliedSalesOrderItemDiscounts { get; private set; }
        public List<Mock<AppliedSalesQuoteDiscount>>? RawAppliedSalesQuoteDiscounts { get; private set; }
        public List<Mock<AppliedSalesQuoteItemDiscount>>? RawAppliedSalesQuoteItemDiscounts { get; private set; }
        public List<Mock<AppliedSalesReturnDiscount>>? RawAppliedSalesReturnDiscounts { get; private set; }
        public List<Mock<AppliedSalesReturnItemDiscount>>? RawAppliedSalesReturnItemDiscounts { get; private set; }
        public List<Mock<AppliedSampleRequestDiscount>>? RawAppliedSampleRequestDiscounts { get; private set; }
        public List<Mock<AppliedSampleRequestItemDiscount>>? RawAppliedSampleRequestItemDiscounts { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksDiscountsAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoDiscounts || (DoAppliedCartDiscountTable && (!dirtyOnly || AppliedCartDiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppliedCartDiscounts == null) { throw new InvalidOperationException("Raw AppliedCartDiscounts was null"); }
                    await InitializeMockSetFromListAsync(AppliedCartDiscounts, RawAppliedCartDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.AppliedCartDiscounts).Returns(() => AppliedCartDiscounts?.Object!);
                    context.Setup(m => m.Set<AppliedCartDiscount>()).Returns(() => AppliedCartDiscounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoAppliedCartItemDiscountTable && (!dirtyOnly || AppliedCartItemDiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppliedCartItemDiscounts == null) { throw new InvalidOperationException("Raw AppliedCartItemDiscounts was null"); }
                    await InitializeMockSetFromListAsync(AppliedCartItemDiscounts, RawAppliedCartItemDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.AppliedCartItemDiscounts).Returns(() => AppliedCartItemDiscounts?.Object!);
                    context.Setup(m => m.Set<AppliedCartItemDiscount>()).Returns(() => AppliedCartItemDiscounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountTable && (!dirtyOnly || DiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscounts == null) { throw new InvalidOperationException("Raw Discounts was null"); }
                    await InitializeMockSetFromListAsync(Discounts, RawDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.Discounts).Returns(() => Discounts?.Object!);
                    context.Setup(m => m.Set<Discount>()).Returns(() => Discounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountAccountTable && (!dirtyOnly || DiscountAccountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountAccounts == null) { throw new InvalidOperationException("Raw DiscountAccounts was null"); }
                    await InitializeMockSetFromListAsync(DiscountAccounts, RawDiscountAccounts).ConfigureAwait(false);
                    context.Setup(m => m.DiscountAccounts).Returns(() => DiscountAccounts?.Object!);
                    context.Setup(m => m.Set<DiscountAccount>()).Returns(() => DiscountAccounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountAccountTypeTable && (!dirtyOnly || DiscountAccountTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountAccountTypes == null) { throw new InvalidOperationException("Raw DiscountAccountTypes was null"); }
                    await InitializeMockSetFromListAsync(DiscountAccountTypes, RawDiscountAccountTypes).ConfigureAwait(false);
                    context.Setup(m => m.DiscountAccountTypes).Returns(() => DiscountAccountTypes?.Object!);
                    context.Setup(m => m.Set<DiscountAccountType>()).Returns(() => DiscountAccountTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountBrandTable && (!dirtyOnly || DiscountBrandDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountBrands == null) { throw new InvalidOperationException("Raw DiscountBrands was null"); }
                    await InitializeMockSetFromListAsync(DiscountBrands, RawDiscountBrands).ConfigureAwait(false);
                    context.Setup(m => m.DiscountBrands).Returns(() => DiscountBrands?.Object!);
                    context.Setup(m => m.Set<DiscountBrand>()).Returns(() => DiscountBrands?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountCategoryTable && (!dirtyOnly || DiscountCategoryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountCategories == null) { throw new InvalidOperationException("Raw DiscountCategories was null"); }
                    await InitializeMockSetFromListAsync(DiscountCategories, RawDiscountCategories).ConfigureAwait(false);
                    context.Setup(m => m.DiscountCategories).Returns(() => DiscountCategories?.Object!);
                    context.Setup(m => m.Set<DiscountCategory>()).Returns(() => DiscountCategories?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountCodeTable && (!dirtyOnly || DiscountCodeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountCodes == null) { throw new InvalidOperationException("Raw DiscountCodes was null"); }
                    await InitializeMockSetFromListAsync(DiscountCodes, RawDiscountCodes).ConfigureAwait(false);
                    context.Setup(m => m.DiscountCodes).Returns(() => DiscountCodes?.Object!);
                    context.Setup(m => m.Set<DiscountCode>()).Returns(() => DiscountCodes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountCountryTable && (!dirtyOnly || DiscountCountryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountCountries == null) { throw new InvalidOperationException("Raw DiscountCountries was null"); }
                    await InitializeMockSetFromListAsync(DiscountCountries, RawDiscountCountries).ConfigureAwait(false);
                    context.Setup(m => m.DiscountCountries).Returns(() => DiscountCountries?.Object!);
                    context.Setup(m => m.Set<DiscountCountry>()).Returns(() => DiscountCountries?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountFranchiseTable && (!dirtyOnly || DiscountFranchiseDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountFranchises == null) { throw new InvalidOperationException("Raw DiscountFranchises was null"); }
                    await InitializeMockSetFromListAsync(DiscountFranchises, RawDiscountFranchises).ConfigureAwait(false);
                    context.Setup(m => m.DiscountFranchises).Returns(() => DiscountFranchises?.Object!);
                    context.Setup(m => m.Set<DiscountFranchise>()).Returns(() => DiscountFranchises?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountManufacturerTable && (!dirtyOnly || DiscountManufacturerDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountManufacturers == null) { throw new InvalidOperationException("Raw DiscountManufacturers was null"); }
                    await InitializeMockSetFromListAsync(DiscountManufacturers, RawDiscountManufacturers).ConfigureAwait(false);
                    context.Setup(m => m.DiscountManufacturers).Returns(() => DiscountManufacturers?.Object!);
                    context.Setup(m => m.Set<DiscountManufacturer>()).Returns(() => DiscountManufacturers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountProductTable && (!dirtyOnly || DiscountProductDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountProducts == null) { throw new InvalidOperationException("Raw DiscountProducts was null"); }
                    await InitializeMockSetFromListAsync(DiscountProducts, RawDiscountProducts).ConfigureAwait(false);
                    context.Setup(m => m.DiscountProducts).Returns(() => DiscountProducts?.Object!);
                    context.Setup(m => m.Set<DiscountProduct>()).Returns(() => DiscountProducts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountProductTypeTable && (!dirtyOnly || DiscountProductTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountProductTypes == null) { throw new InvalidOperationException("Raw DiscountProductTypes was null"); }
                    await InitializeMockSetFromListAsync(DiscountProductTypes, RawDiscountProductTypes).ConfigureAwait(false);
                    context.Setup(m => m.DiscountProductTypes).Returns(() => DiscountProductTypes?.Object!);
                    context.Setup(m => m.Set<DiscountProductType>()).Returns(() => DiscountProductTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountShipCarrierMethodTable && (!dirtyOnly || DiscountShipCarrierMethodDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountShipCarrierMethods == null) { throw new InvalidOperationException("Raw DiscountShipCarrierMethods was null"); }
                    await InitializeMockSetFromListAsync(DiscountShipCarrierMethods, RawDiscountShipCarrierMethods).ConfigureAwait(false);
                    context.Setup(m => m.DiscountShipCarrierMethods).Returns(() => DiscountShipCarrierMethods?.Object!);
                    context.Setup(m => m.Set<DiscountShipCarrierMethod>()).Returns(() => DiscountShipCarrierMethods?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountStoreTable && (!dirtyOnly || DiscountStoreDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountStores == null) { throw new InvalidOperationException("Raw DiscountStores was null"); }
                    await InitializeMockSetFromListAsync(DiscountStores, RawDiscountStores).ConfigureAwait(false);
                    context.Setup(m => m.DiscountStores).Returns(() => DiscountStores?.Object!);
                    context.Setup(m => m.Set<DiscountStore>()).Returns(() => DiscountStores?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountUserTable && (!dirtyOnly || DiscountUserDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountUsers == null) { throw new InvalidOperationException("Raw DiscountUsers was null"); }
                    await InitializeMockSetFromListAsync(DiscountUsers, RawDiscountUsers).ConfigureAwait(false);
                    context.Setup(m => m.DiscountUsers).Returns(() => DiscountUsers?.Object!);
                    context.Setup(m => m.Set<DiscountUser>()).Returns(() => DiscountUsers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountUserRoleTable && (!dirtyOnly || DiscountUserRoleDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountUserRoles == null) { throw new InvalidOperationException("Raw DiscountUserRoles was null"); }
                    await InitializeMockSetFromListAsync(DiscountUserRoles, RawDiscountUserRoles).ConfigureAwait(false);
                    context.Setup(m => m.DiscountUserRoles).Returns(() => DiscountUserRoles?.Object!);
                    context.Setup(m => m.Set<DiscountUserRole>()).Returns(() => DiscountUserRoles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoDiscountVendorTable && (!dirtyOnly || DiscountVendorDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDiscountVendors == null) { throw new InvalidOperationException("Raw DiscountVendors was null"); }
                    await InitializeMockSetFromListAsync(DiscountVendors, RawDiscountVendors).ConfigureAwait(false);
                    context.Setup(m => m.DiscountVendors).Returns(() => DiscountVendors?.Object!);
                    context.Setup(m => m.Set<DiscountVendor>()).Returns(() => DiscountVendors?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoAppliedPurchaseOrderDiscountTable && (!dirtyOnly || AppliedPurchaseOrderDiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppliedPurchaseOrderDiscounts == null) { throw new InvalidOperationException("Raw AppliedPurchaseOrderDiscounts was null"); }
                    await InitializeMockSetFromListAsync(AppliedPurchaseOrderDiscounts, RawAppliedPurchaseOrderDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.AppliedPurchaseOrderDiscounts).Returns(() => AppliedPurchaseOrderDiscounts?.Object!);
                    context.Setup(m => m.Set<AppliedPurchaseOrderDiscount>()).Returns(() => AppliedPurchaseOrderDiscounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoAppliedPurchaseOrderItemDiscountTable && (!dirtyOnly || AppliedPurchaseOrderItemDiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppliedPurchaseOrderItemDiscounts == null) { throw new InvalidOperationException("Raw AppliedPurchaseOrderItemDiscounts was null"); }
                    await InitializeMockSetFromListAsync(AppliedPurchaseOrderItemDiscounts, RawAppliedPurchaseOrderItemDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.AppliedPurchaseOrderItemDiscounts).Returns(() => AppliedPurchaseOrderItemDiscounts?.Object!);
                    context.Setup(m => m.Set<AppliedPurchaseOrderItemDiscount>()).Returns(() => AppliedPurchaseOrderItemDiscounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoAppliedSalesInvoiceDiscountTable && (!dirtyOnly || AppliedSalesInvoiceDiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppliedSalesInvoiceDiscounts == null) { throw new InvalidOperationException("Raw AppliedSalesInvoiceDiscounts was null"); }
                    await InitializeMockSetFromListAsync(AppliedSalesInvoiceDiscounts, RawAppliedSalesInvoiceDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.AppliedSalesInvoiceDiscounts).Returns(() => AppliedSalesInvoiceDiscounts?.Object!);
                    context.Setup(m => m.Set<AppliedSalesInvoiceDiscount>()).Returns(() => AppliedSalesInvoiceDiscounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoAppliedSalesInvoiceItemDiscountTable && (!dirtyOnly || AppliedSalesInvoiceItemDiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppliedSalesInvoiceItemDiscounts == null) { throw new InvalidOperationException("Raw AppliedSalesInvoiceItemDiscounts was null"); }
                    await InitializeMockSetFromListAsync(AppliedSalesInvoiceItemDiscounts, RawAppliedSalesInvoiceItemDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.AppliedSalesInvoiceItemDiscounts).Returns(() => AppliedSalesInvoiceItemDiscounts?.Object!);
                    context.Setup(m => m.Set<AppliedSalesInvoiceItemDiscount>()).Returns(() => AppliedSalesInvoiceItemDiscounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoAppliedSalesOrderDiscountTable && (!dirtyOnly || AppliedSalesOrderDiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppliedSalesOrderDiscounts == null) { throw new InvalidOperationException("Raw AppliedSalesOrderDiscounts was null"); }
                    await InitializeMockSetFromListAsync(AppliedSalesOrderDiscounts, RawAppliedSalesOrderDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.AppliedSalesOrderDiscounts).Returns(() => AppliedSalesOrderDiscounts?.Object!);
                    context.Setup(m => m.Set<AppliedSalesOrderDiscount>()).Returns(() => AppliedSalesOrderDiscounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoAppliedSalesOrderItemDiscountTable && (!dirtyOnly || AppliedSalesOrderItemDiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppliedSalesOrderItemDiscounts == null) { throw new InvalidOperationException("Raw AppliedSalesOrderItemDiscounts was null"); }
                    await InitializeMockSetFromListAsync(AppliedSalesOrderItemDiscounts, RawAppliedSalesOrderItemDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.AppliedSalesOrderItemDiscounts).Returns(() => AppliedSalesOrderItemDiscounts?.Object!);
                    context.Setup(m => m.Set<AppliedSalesOrderItemDiscount>()).Returns(() => AppliedSalesOrderItemDiscounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoAppliedSalesQuoteDiscountTable && (!dirtyOnly || AppliedSalesQuoteDiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppliedSalesQuoteDiscounts == null) { throw new InvalidOperationException("Raw AppliedSalesQuoteDiscounts was null"); }
                    await InitializeMockSetFromListAsync(AppliedSalesQuoteDiscounts, RawAppliedSalesQuoteDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.AppliedSalesQuoteDiscounts).Returns(() => AppliedSalesQuoteDiscounts?.Object!);
                    context.Setup(m => m.Set<AppliedSalesQuoteDiscount>()).Returns(() => AppliedSalesQuoteDiscounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoAppliedSalesQuoteItemDiscountTable && (!dirtyOnly || AppliedSalesQuoteItemDiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppliedSalesQuoteItemDiscounts == null) { throw new InvalidOperationException("Raw AppliedSalesQuoteItemDiscounts was null"); }
                    await InitializeMockSetFromListAsync(AppliedSalesQuoteItemDiscounts, RawAppliedSalesQuoteItemDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.AppliedSalesQuoteItemDiscounts).Returns(() => AppliedSalesQuoteItemDiscounts?.Object!);
                    context.Setup(m => m.Set<AppliedSalesQuoteItemDiscount>()).Returns(() => AppliedSalesQuoteItemDiscounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoAppliedSalesReturnDiscountTable && (!dirtyOnly || AppliedSalesReturnDiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppliedSalesReturnDiscounts == null) { throw new InvalidOperationException("Raw AppliedSalesReturnDiscounts was null"); }
                    await InitializeMockSetFromListAsync(AppliedSalesReturnDiscounts, RawAppliedSalesReturnDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.AppliedSalesReturnDiscounts).Returns(() => AppliedSalesReturnDiscounts?.Object!);
                    context.Setup(m => m.Set<AppliedSalesReturnDiscount>()).Returns(() => AppliedSalesReturnDiscounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoAppliedSalesReturnItemDiscountTable && (!dirtyOnly || AppliedSalesReturnItemDiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppliedSalesReturnItemDiscounts == null) { throw new InvalidOperationException("Raw AppliedSalesReturnItemDiscounts was null"); }
                    await InitializeMockSetFromListAsync(AppliedSalesReturnItemDiscounts, RawAppliedSalesReturnItemDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.AppliedSalesReturnItemDiscounts).Returns(() => AppliedSalesReturnItemDiscounts?.Object!);
                    context.Setup(m => m.Set<AppliedSalesReturnItemDiscount>()).Returns(() => AppliedSalesReturnItemDiscounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoAppliedSampleRequestDiscountTable && (!dirtyOnly || AppliedSampleRequestDiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppliedSampleRequestDiscounts == null) { throw new InvalidOperationException("Raw AppliedSampleRequestDiscounts was null"); }
                    await InitializeMockSetFromListAsync(AppliedSampleRequestDiscounts, RawAppliedSampleRequestDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.AppliedSampleRequestDiscounts).Returns(() => AppliedSampleRequestDiscounts?.Object!);
                    context.Setup(m => m.Set<AppliedSampleRequestDiscount>()).Returns(() => AppliedSampleRequestDiscounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoDiscounts || (DoAppliedSampleRequestItemDiscountTable && (!dirtyOnly || AppliedSampleRequestItemDiscountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppliedSampleRequestItemDiscounts == null) { throw new InvalidOperationException("Raw AppliedSampleRequestItemDiscounts was null"); }
                    await InitializeMockSetFromListAsync(AppliedSampleRequestItemDiscounts, RawAppliedSampleRequestItemDiscounts).ConfigureAwait(false);
                    context.Setup(m => m.AppliedSampleRequestItemDiscounts).Returns(() => AppliedSampleRequestItemDiscounts?.Object!);
                    context.Setup(m => m.Set<AppliedSampleRequestItemDiscount>()).Returns(() => AppliedSampleRequestItemDiscounts?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppliedCartDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppliedCartDiscount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoAppliedCartDiscountTable) { return; }
            AppliedCartDiscounts ??= new Mock<DbSet<AppliedCartDiscount>>();
            await InitializeMockSetFromListAsync(AppliedCartDiscounts, data).ConfigureAwait(false);
            context.Setup(m => m.AppliedCartDiscounts).Returns(() => AppliedCartDiscounts.Object);
            context.Setup(m => m.Set<AppliedCartDiscount>()).Returns(() => AppliedCartDiscounts.Object);
            TableRecordCounts[typeof(AppliedCartDiscount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppliedCartDiscount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppliedCartDiscount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppliedCartItemDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppliedCartItemDiscount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoAppliedCartItemDiscountTable) { return; }
            AppliedCartItemDiscounts ??= new Mock<DbSet<AppliedCartItemDiscount>>();
            await InitializeMockSetFromListAsync(AppliedCartItemDiscounts, data).ConfigureAwait(false);
            context.Setup(m => m.AppliedCartItemDiscounts).Returns(() => AppliedCartItemDiscounts.Object);
            context.Setup(m => m.Set<AppliedCartItemDiscount>()).Returns(() => AppliedCartItemDiscounts.Object);
            TableRecordCounts[typeof(AppliedCartItemDiscount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppliedCartItemDiscount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppliedCartItemDiscount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Discount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountTable) { return; }
            Discounts ??= new Mock<DbSet<Discount>>();
            await InitializeMockSetFromListAsync(Discounts, data).ConfigureAwait(false);
            context.Setup(m => m.Discounts).Returns(() => Discounts.Object);
            context.Setup(m => m.Set<Discount>()).Returns(() => Discounts.Object);
            TableRecordCounts[typeof(Discount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Discount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Discount)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Discount)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountAccountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountAccount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountAccountTable) { return; }
            DiscountAccounts ??= new Mock<DbSet<DiscountAccount>>();
            await InitializeMockSetFromListAsync(DiscountAccounts, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountAccounts).Returns(() => DiscountAccounts.Object);
            context.Setup(m => m.Set<DiscountAccount>()).Returns(() => DiscountAccounts.Object);
            TableRecordCounts[typeof(DiscountAccount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountAccount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountAccount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountAccountTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountAccountType>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountAccountTypeTable) { return; }
            DiscountAccountTypes ??= new Mock<DbSet<DiscountAccountType>>();
            await InitializeMockSetFromListAsync(DiscountAccountTypes, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountAccountTypes).Returns(() => DiscountAccountTypes.Object);
            context.Setup(m => m.Set<DiscountAccountType>()).Returns(() => DiscountAccountTypes.Object);
            TableRecordCounts[typeof(DiscountAccountType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountAccountType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountAccountType)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountBrandsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountBrand>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountBrandTable) { return; }
            DiscountBrands ??= new Mock<DbSet<DiscountBrand>>();
            await InitializeMockSetFromListAsync(DiscountBrands, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountBrands).Returns(() => DiscountBrands.Object);
            context.Setup(m => m.Set<DiscountBrand>()).Returns(() => DiscountBrands.Object);
            TableRecordCounts[typeof(DiscountBrand)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountBrand)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountBrand)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountCategoriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountCategory>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountCategoryTable) { return; }
            DiscountCategories ??= new Mock<DbSet<DiscountCategory>>();
            await InitializeMockSetFromListAsync(DiscountCategories, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountCategories).Returns(() => DiscountCategories.Object);
            context.Setup(m => m.Set<DiscountCategory>()).Returns(() => DiscountCategories.Object);
            TableRecordCounts[typeof(DiscountCategory)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountCategory)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountCategory)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountCodesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountCode>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountCodeTable) { return; }
            DiscountCodes ??= new Mock<DbSet<DiscountCode>>();
            await InitializeMockSetFromListAsync(DiscountCodes, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountCodes).Returns(() => DiscountCodes.Object);
            context.Setup(m => m.Set<DiscountCode>()).Returns(() => DiscountCodes.Object);
            TableRecordCounts[typeof(DiscountCode)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountCode)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountCode)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountCountriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountCountry>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountCountryTable) { return; }
            DiscountCountries ??= new Mock<DbSet<DiscountCountry>>();
            await InitializeMockSetFromListAsync(DiscountCountries, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountCountries).Returns(() => DiscountCountries.Object);
            context.Setup(m => m.Set<DiscountCountry>()).Returns(() => DiscountCountries.Object);
            TableRecordCounts[typeof(DiscountCountry)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountCountry)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountCountry)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountFranchisesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountFranchise>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountFranchiseTable) { return; }
            DiscountFranchises ??= new Mock<DbSet<DiscountFranchise>>();
            await InitializeMockSetFromListAsync(DiscountFranchises, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountFranchises).Returns(() => DiscountFranchises.Object);
            context.Setup(m => m.Set<DiscountFranchise>()).Returns(() => DiscountFranchises.Object);
            TableRecordCounts[typeof(DiscountFranchise)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountFranchise)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountFranchise)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountManufacturersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountManufacturer>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountManufacturerTable) { return; }
            DiscountManufacturers ??= new Mock<DbSet<DiscountManufacturer>>();
            await InitializeMockSetFromListAsync(DiscountManufacturers, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountManufacturers).Returns(() => DiscountManufacturers.Object);
            context.Setup(m => m.Set<DiscountManufacturer>()).Returns(() => DiscountManufacturers.Object);
            TableRecordCounts[typeof(DiscountManufacturer)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountManufacturer)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountManufacturer)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountProductsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountProduct>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountProductTable) { return; }
            DiscountProducts ??= new Mock<DbSet<DiscountProduct>>();
            await InitializeMockSetFromListAsync(DiscountProducts, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountProducts).Returns(() => DiscountProducts.Object);
            context.Setup(m => m.Set<DiscountProduct>()).Returns(() => DiscountProducts.Object);
            TableRecordCounts[typeof(DiscountProduct)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountProduct)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountProduct)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountProductTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountProductType>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountProductTypeTable) { return; }
            DiscountProductTypes ??= new Mock<DbSet<DiscountProductType>>();
            await InitializeMockSetFromListAsync(DiscountProductTypes, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountProductTypes).Returns(() => DiscountProductTypes.Object);
            context.Setup(m => m.Set<DiscountProductType>()).Returns(() => DiscountProductTypes.Object);
            TableRecordCounts[typeof(DiscountProductType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountProductType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountProductType)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountShipCarrierMethodsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountShipCarrierMethod>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountShipCarrierMethodTable) { return; }
            DiscountShipCarrierMethods ??= new Mock<DbSet<DiscountShipCarrierMethod>>();
            await InitializeMockSetFromListAsync(DiscountShipCarrierMethods, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountShipCarrierMethods).Returns(() => DiscountShipCarrierMethods.Object);
            context.Setup(m => m.Set<DiscountShipCarrierMethod>()).Returns(() => DiscountShipCarrierMethods.Object);
            TableRecordCounts[typeof(DiscountShipCarrierMethod)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountShipCarrierMethod)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountShipCarrierMethod)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountStoresAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountStore>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountStoreTable) { return; }
            DiscountStores ??= new Mock<DbSet<DiscountStore>>();
            await InitializeMockSetFromListAsync(DiscountStores, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountStores).Returns(() => DiscountStores.Object);
            context.Setup(m => m.Set<DiscountStore>()).Returns(() => DiscountStores.Object);
            TableRecordCounts[typeof(DiscountStore)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountStore)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountStore)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountUsersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountUser>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountUserTable) { return; }
            DiscountUsers ??= new Mock<DbSet<DiscountUser>>();
            await InitializeMockSetFromListAsync(DiscountUsers, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountUsers).Returns(() => DiscountUsers.Object);
            context.Setup(m => m.Set<DiscountUser>()).Returns(() => DiscountUsers.Object);
            TableRecordCounts[typeof(DiscountUser)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountUser)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountUser)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountUserRolesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountUserRole>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountUserRoleTable) { return; }
            DiscountUserRoles ??= new Mock<DbSet<DiscountUserRole>>();
            await InitializeMockSetFromListAsync(DiscountUserRoles, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountUserRoles).Returns(() => DiscountUserRoles.Object);
            context.Setup(m => m.Set<DiscountUserRole>()).Returns(() => DiscountUserRoles.Object);
            TableRecordCounts[typeof(DiscountUserRole)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountUserRole)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountUserRole)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDiscountVendorsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DiscountVendor>> data)
        {
            if (!DoAll && !DoDiscounts && !DoDiscountVendorTable) { return; }
            DiscountVendors ??= new Mock<DbSet<DiscountVendor>>();
            await InitializeMockSetFromListAsync(DiscountVendors, data).ConfigureAwait(false);
            context.Setup(m => m.DiscountVendors).Returns(() => DiscountVendors.Object);
            context.Setup(m => m.Set<DiscountVendor>()).Returns(() => DiscountVendors.Object);
            TableRecordCounts[typeof(DiscountVendor)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DiscountVendor)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DiscountVendor)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppliedPurchaseOrderDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppliedPurchaseOrderDiscount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoAppliedPurchaseOrderDiscountTable) { return; }
            AppliedPurchaseOrderDiscounts ??= new Mock<DbSet<AppliedPurchaseOrderDiscount>>();
            await InitializeMockSetFromListAsync(AppliedPurchaseOrderDiscounts, data).ConfigureAwait(false);
            context.Setup(m => m.AppliedPurchaseOrderDiscounts).Returns(() => AppliedPurchaseOrderDiscounts.Object);
            context.Setup(m => m.Set<AppliedPurchaseOrderDiscount>()).Returns(() => AppliedPurchaseOrderDiscounts.Object);
            TableRecordCounts[typeof(AppliedPurchaseOrderDiscount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppliedPurchaseOrderDiscount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppliedPurchaseOrderDiscount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppliedPurchaseOrderItemDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppliedPurchaseOrderItemDiscount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoAppliedPurchaseOrderItemDiscountTable) { return; }
            AppliedPurchaseOrderItemDiscounts ??= new Mock<DbSet<AppliedPurchaseOrderItemDiscount>>();
            await InitializeMockSetFromListAsync(AppliedPurchaseOrderItemDiscounts, data).ConfigureAwait(false);
            context.Setup(m => m.AppliedPurchaseOrderItemDiscounts).Returns(() => AppliedPurchaseOrderItemDiscounts.Object);
            context.Setup(m => m.Set<AppliedPurchaseOrderItemDiscount>()).Returns(() => AppliedPurchaseOrderItemDiscounts.Object);
            TableRecordCounts[typeof(AppliedPurchaseOrderItemDiscount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppliedPurchaseOrderItemDiscount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppliedPurchaseOrderItemDiscount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppliedSalesInvoiceDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppliedSalesInvoiceDiscount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoAppliedSalesInvoiceDiscountTable) { return; }
            AppliedSalesInvoiceDiscounts ??= new Mock<DbSet<AppliedSalesInvoiceDiscount>>();
            await InitializeMockSetFromListAsync(AppliedSalesInvoiceDiscounts, data).ConfigureAwait(false);
            context.Setup(m => m.AppliedSalesInvoiceDiscounts).Returns(() => AppliedSalesInvoiceDiscounts.Object);
            context.Setup(m => m.Set<AppliedSalesInvoiceDiscount>()).Returns(() => AppliedSalesInvoiceDiscounts.Object);
            TableRecordCounts[typeof(AppliedSalesInvoiceDiscount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppliedSalesInvoiceDiscount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppliedSalesInvoiceDiscount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppliedSalesInvoiceItemDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppliedSalesInvoiceItemDiscount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoAppliedSalesInvoiceItemDiscountTable) { return; }
            AppliedSalesInvoiceItemDiscounts ??= new Mock<DbSet<AppliedSalesInvoiceItemDiscount>>();
            await InitializeMockSetFromListAsync(AppliedSalesInvoiceItemDiscounts, data).ConfigureAwait(false);
            context.Setup(m => m.AppliedSalesInvoiceItemDiscounts).Returns(() => AppliedSalesInvoiceItemDiscounts.Object);
            context.Setup(m => m.Set<AppliedSalesInvoiceItemDiscount>()).Returns(() => AppliedSalesInvoiceItemDiscounts.Object);
            TableRecordCounts[typeof(AppliedSalesInvoiceItemDiscount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppliedSalesInvoiceItemDiscount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppliedSalesInvoiceItemDiscount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppliedSalesOrderDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppliedSalesOrderDiscount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoAppliedSalesOrderDiscountTable) { return; }
            AppliedSalesOrderDiscounts ??= new Mock<DbSet<AppliedSalesOrderDiscount>>();
            await InitializeMockSetFromListAsync(AppliedSalesOrderDiscounts, data).ConfigureAwait(false);
            context.Setup(m => m.AppliedSalesOrderDiscounts).Returns(() => AppliedSalesOrderDiscounts.Object);
            context.Setup(m => m.Set<AppliedSalesOrderDiscount>()).Returns(() => AppliedSalesOrderDiscounts.Object);
            TableRecordCounts[typeof(AppliedSalesOrderDiscount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppliedSalesOrderDiscount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppliedSalesOrderDiscount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppliedSalesOrderItemDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppliedSalesOrderItemDiscount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoAppliedSalesOrderItemDiscountTable) { return; }
            AppliedSalesOrderItemDiscounts ??= new Mock<DbSet<AppliedSalesOrderItemDiscount>>();
            await InitializeMockSetFromListAsync(AppliedSalesOrderItemDiscounts, data).ConfigureAwait(false);
            context.Setup(m => m.AppliedSalesOrderItemDiscounts).Returns(() => AppliedSalesOrderItemDiscounts.Object);
            context.Setup(m => m.Set<AppliedSalesOrderItemDiscount>()).Returns(() => AppliedSalesOrderItemDiscounts.Object);
            TableRecordCounts[typeof(AppliedSalesOrderItemDiscount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppliedSalesOrderItemDiscount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppliedSalesOrderItemDiscount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppliedSalesQuoteDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppliedSalesQuoteDiscount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoAppliedSalesQuoteDiscountTable) { return; }
            AppliedSalesQuoteDiscounts ??= new Mock<DbSet<AppliedSalesQuoteDiscount>>();
            await InitializeMockSetFromListAsync(AppliedSalesQuoteDiscounts, data).ConfigureAwait(false);
            context.Setup(m => m.AppliedSalesQuoteDiscounts).Returns(() => AppliedSalesQuoteDiscounts.Object);
            context.Setup(m => m.Set<AppliedSalesQuoteDiscount>()).Returns(() => AppliedSalesQuoteDiscounts.Object);
            TableRecordCounts[typeof(AppliedSalesQuoteDiscount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppliedSalesQuoteDiscount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppliedSalesQuoteDiscount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppliedSalesQuoteItemDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppliedSalesQuoteItemDiscount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoAppliedSalesQuoteItemDiscountTable) { return; }
            AppliedSalesQuoteItemDiscounts ??= new Mock<DbSet<AppliedSalesQuoteItemDiscount>>();
            await InitializeMockSetFromListAsync(AppliedSalesQuoteItemDiscounts, data).ConfigureAwait(false);
            context.Setup(m => m.AppliedSalesQuoteItemDiscounts).Returns(() => AppliedSalesQuoteItemDiscounts.Object);
            context.Setup(m => m.Set<AppliedSalesQuoteItemDiscount>()).Returns(() => AppliedSalesQuoteItemDiscounts.Object);
            TableRecordCounts[typeof(AppliedSalesQuoteItemDiscount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppliedSalesQuoteItemDiscount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppliedSalesQuoteItemDiscount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppliedSalesReturnDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppliedSalesReturnDiscount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoAppliedSalesReturnDiscountTable) { return; }
            AppliedSalesReturnDiscounts ??= new Mock<DbSet<AppliedSalesReturnDiscount>>();
            await InitializeMockSetFromListAsync(AppliedSalesReturnDiscounts, data).ConfigureAwait(false);
            context.Setup(m => m.AppliedSalesReturnDiscounts).Returns(() => AppliedSalesReturnDiscounts.Object);
            context.Setup(m => m.Set<AppliedSalesReturnDiscount>()).Returns(() => AppliedSalesReturnDiscounts.Object);
            TableRecordCounts[typeof(AppliedSalesReturnDiscount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppliedSalesReturnDiscount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppliedSalesReturnDiscount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppliedSalesReturnItemDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppliedSalesReturnItemDiscount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoAppliedSalesReturnItemDiscountTable) { return; }
            AppliedSalesReturnItemDiscounts ??= new Mock<DbSet<AppliedSalesReturnItemDiscount>>();
            await InitializeMockSetFromListAsync(AppliedSalesReturnItemDiscounts, data).ConfigureAwait(false);
            context.Setup(m => m.AppliedSalesReturnItemDiscounts).Returns(() => AppliedSalesReturnItemDiscounts.Object);
            context.Setup(m => m.Set<AppliedSalesReturnItemDiscount>()).Returns(() => AppliedSalesReturnItemDiscounts.Object);
            TableRecordCounts[typeof(AppliedSalesReturnItemDiscount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppliedSalesReturnItemDiscount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppliedSalesReturnItemDiscount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppliedSampleRequestDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppliedSampleRequestDiscount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoAppliedSampleRequestDiscountTable) { return; }
            AppliedSampleRequestDiscounts ??= new Mock<DbSet<AppliedSampleRequestDiscount>>();
            await InitializeMockSetFromListAsync(AppliedSampleRequestDiscounts, data).ConfigureAwait(false);
            context.Setup(m => m.AppliedSampleRequestDiscounts).Returns(() => AppliedSampleRequestDiscounts.Object);
            context.Setup(m => m.Set<AppliedSampleRequestDiscount>()).Returns(() => AppliedSampleRequestDiscounts.Object);
            TableRecordCounts[typeof(AppliedSampleRequestDiscount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppliedSampleRequestDiscount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppliedSampleRequestDiscount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppliedSampleRequestItemDiscountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppliedSampleRequestItemDiscount>> data)
        {
            if (!DoAll && !DoDiscounts && !DoAppliedSampleRequestItemDiscountTable) { return; }
            AppliedSampleRequestItemDiscounts ??= new Mock<DbSet<AppliedSampleRequestItemDiscount>>();
            await InitializeMockSetFromListAsync(AppliedSampleRequestItemDiscounts, data).ConfigureAwait(false);
            context.Setup(m => m.AppliedSampleRequestItemDiscounts).Returns(() => AppliedSampleRequestItemDiscounts.Object);
            context.Setup(m => m.Set<AppliedSampleRequestItemDiscount>()).Returns(() => AppliedSampleRequestItemDiscounts.Object);
            TableRecordCounts[typeof(AppliedSampleRequestItemDiscount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppliedSampleRequestItemDiscount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppliedSampleRequestItemDiscount)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy AppliedCartDiscount.</summary>
        /// <returns>The new AppliedCartDiscount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppliedCartDiscount>> CreateADummyAppliedCartDiscountAsync(int id, string? key, string? jsonAttributes = null, int? applicationsUsed = null!, decimal discountTotal = 0m, int masterID = 1, int slaveID = 1, int? targetApplicationsUsed = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppliedCartDiscount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AppliedCartDiscount Properties
                mock.Object.ApplicationsUsed = applicationsUsed;
                mock.Object.DiscountTotal = discountTotal;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.TargetApplicationsUsed = targetApplicationsUsed;
                // Dynamic Linking
                // AppliedCartDiscount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawCarts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedCartDiscount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AppliedCartItemDiscount.</summary>
        /// <returns>The new AppliedCartItemDiscount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppliedCartItemDiscount>> CreateADummyAppliedCartItemDiscountAsync(int id, string? key, string? jsonAttributes = null, int? applicationsUsed = null!, decimal discountTotal = 0m, int masterID = 1, int slaveID = 1, int? targetApplicationsUsed = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppliedCartItemDiscount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AppliedCartItemDiscount Properties
                mock.Object.ApplicationsUsed = applicationsUsed;
                mock.Object.DiscountTotal = discountTotal;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.TargetApplicationsUsed = targetApplicationsUsed;
                // Dynamic Linking
                // AppliedCartItemDiscount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawCartItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedCartItemDiscount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Discount.</summary>
        /// <returns>The new Discount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Discount>> CreateADummyDiscountAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, decimal? buyXValue = null!, bool canCombine = false, int? discountCompareOperator = null!, int discountTypeID = 1, DateTime? endDate = null!, decimal? getYValue = null!, bool isAutoApplied = false, int? priority = null!, int roundingOperation = 1, int? roundingType = null!, DateTime? startDate = null!, decimal thresholdAmount = 0m, int? usageLimitGlobally = null!, int? usageLimitPerAccount = null!, int? usageLimitPerCart = null!, int? usageLimitPerUser = null!, decimal value = 0m, int valueType = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Discount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // Discount Properties
                mock.Object.BuyXValue = buyXValue;
                mock.Object.CanCombine = canCombine;
                mock.Object.DiscountCompareOperator = discountCompareOperator;
                mock.Object.DiscountTypeID = discountTypeID;
                mock.Object.EndDate = endDate;
                mock.Object.GetYValue = getYValue;
                mock.Object.IsAutoApplied = isAutoApplied;
                mock.Object.Priority = priority;
                mock.Object.RoundingOperation = roundingOperation;
                mock.Object.RoundingType = roundingType;
                mock.Object.StartDate = startDate;
                mock.Object.ThresholdAmount = thresholdAmount;
                mock.Object.UsageLimitGlobally = usageLimitGlobally;
                mock.Object.UsageLimitPerAccount = usageLimitPerAccount;
                mock.Object.UsageLimitPerCart = usageLimitPerCart;
                mock.Object.UsageLimitPerUser = usageLimitPerUser;
                mock.Object.Value = value;
                mock.Object.ValueType = valueType;
                // Dynamic Linking
                // Discount's Related Objects
                // Discount's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => RawDiscountAccounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountAccount>());
                mock.Setup(m => m.AccountTypes).Returns(() => RawDiscountAccountTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountAccountType>());
                mock.Setup(m => m.Brands).Returns(() => RawDiscountBrands?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountBrand>());
                mock.Setup(m => m.Categories).Returns(() => RawDiscountCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountCategory>());
                mock.Setup(m => m.Codes).Returns(() => RawDiscountCodes?.Where(x => x.Object.DiscountID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountCode>());
                mock.Setup(m => m.Countries).Returns(() => RawDiscountCountries?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountCountry>());
                mock.Setup(m => m.Franchises).Returns(() => RawDiscountFranchises?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountFranchise>());
                mock.Setup(m => m.Manufacturers).Returns(() => RawDiscountManufacturers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountManufacturer>());
                mock.Setup(m => m.Products).Returns(() => RawDiscountProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountProduct>());
                mock.Setup(m => m.ProductTypes).Returns(() => RawDiscountProductTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountProductType>());
                mock.Setup(m => m.ShipCarrierMethods).Returns(() => RawDiscountShipCarrierMethods?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountShipCarrierMethod>());
                mock.Setup(m => m.Stores).Returns(() => RawDiscountStores?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountStore>());
                mock.Setup(m => m.UserRoles).Returns(() => RawDiscountUserRoles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountUserRole>());
                mock.Setup(m => m.Users).Returns(() => RawDiscountUsers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountUser>());
                mock.Setup(m => m.Vendors).Returns(() => RawDiscountVendors?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountVendor>());
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountAccount.</summary>
        /// <returns>The new DiscountAccount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountAccount>> CreateADummyDiscountAccountAsync(int id, string? key, int masterID = 1, int slaveID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountAccount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.SlaveID = slaveID;
                // DiscountAccount Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountAccount's Related Objects
                // DiscountAccount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountAccountType.</summary>
        /// <returns>The new DiscountAccountType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountAccountType>> CreateADummyDiscountAccountTypeAsync(int id, string? key, int masterID = 1, int slaveID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountAccountType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.SlaveID = slaveID;
                // DiscountAccountType Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => RawAccountTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountAccountType's Related Objects
                // DiscountAccountType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountBrand.</summary>
        /// <returns>The new DiscountBrand.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountBrand>> CreateADummyDiscountBrandAsync(int id, string? key, int masterID = 1, int slaveID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountBrand>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.SlaveID = slaveID;
                // DiscountBrand Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountBrand's Related Objects
                // DiscountBrand's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountCategory.</summary>
        /// <returns>The new DiscountCategory.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountCategory>> CreateADummyDiscountCategoryAsync(int id, string? key, int masterID = 1, int slaveID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountCategory>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.SlaveID = slaveID;
                // DiscountCategory Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountCategory's Related Objects
                // DiscountCategory's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountCode.</summary>
        /// <returns>The new DiscountCode.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountCode>> CreateADummyDiscountCodeAsync(int id, string? key, string? jsonAttributes = null, string code = null!, int discountID = 1, int? userID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountCode>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // DiscountCode Properties
                mock.Object.Code = code;
                mock.Object.DiscountID = discountID;
                mock.Object.UserID = userID;
                // Dynamic Linking
                // DiscountCode's Related Objects
                mock.Setup(m => m.Discount).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.DiscountID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // DiscountCode's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountCountry.</summary>
        /// <returns>The new DiscountCountry.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountCountry>> CreateADummyDiscountCountryAsync(int id, string? key, int masterID = 1, int slaveID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountCountry>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.SlaveID = slaveID;
                // DiscountCountry Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountCountry's Related Objects
                // DiscountCountry's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountFranchise.</summary>
        /// <returns>The new DiscountFranchise.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountFranchise>> CreateADummyDiscountFranchiseAsync(int id, string? key, int masterID = 1, int slaveID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountFranchise>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.SlaveID = slaveID;
                // DiscountFranchise Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountFranchise's Related Objects
                // DiscountFranchise's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountManufacturer.</summary>
        /// <returns>The new DiscountManufacturer.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountManufacturer>> CreateADummyDiscountManufacturerAsync(int id, string? key, int masterID = 1, int slaveID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountManufacturer>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.SlaveID = slaveID;
                // DiscountManufacturer Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountManufacturer's Related Objects
                // DiscountManufacturer's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountProduct.</summary>
        /// <returns>The new DiscountProduct.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountProduct>> CreateADummyDiscountProductAsync(int id, string? key, int masterID = 1, int slaveID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountProduct>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.SlaveID = slaveID;
                // DiscountProduct Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountProduct's Related Objects
                // DiscountProduct's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountProductType.</summary>
        /// <returns>The new DiscountProductType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountProductType>> CreateADummyDiscountProductTypeAsync(int id, string? key, int masterID = 1, int slaveID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountProductType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.SlaveID = slaveID;
                // DiscountProductType Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => RawProductTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountProductType's Related Objects
                // DiscountProductType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountShipCarrierMethod.</summary>
        /// <returns>The new DiscountShipCarrierMethod.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountShipCarrierMethod>> CreateADummyDiscountShipCarrierMethodAsync(int id, string? key, int masterID = 1, int slaveID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountShipCarrierMethod>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.SlaveID = slaveID;
                // DiscountShipCarrierMethod Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => RawShipCarrierMethods?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountShipCarrierMethod's Related Objects
                // DiscountShipCarrierMethod's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountStore.</summary>
        /// <returns>The new DiscountStore.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountStore>> CreateADummyDiscountStoreAsync(int id, string? key, int masterID = 1, int slaveID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountStore>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.SlaveID = slaveID;
                // DiscountStore Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountStore's Related Objects
                // DiscountStore's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountUser.</summary>
        /// <returns>The new DiscountUser.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountUser>> CreateADummyDiscountUserAsync(int id, string? key, int masterID = 1, int slaveID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountUser>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.SlaveID = slaveID;
                // DiscountUser Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountUser's Related Objects
                // DiscountUser's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountUserRole.</summary>
        /// <returns>The new DiscountUserRole.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountUserRole>> CreateADummyDiscountUserRoleAsync(int id, string? key, int masterID = 1, string? jsonAttributes = null, string roleName = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountUserRole>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
                // DiscountUserRole Properties
                mock.Object.RoleName = roleName;
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // DiscountUserRole's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // DiscountUserRole's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DiscountVendor.</summary>
        /// <returns>The new DiscountVendor.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DiscountVendor>> CreateADummyDiscountVendorAsync(int id, string? key, int masterID = 1, int slaveID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DiscountVendor>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.SlaveID = slaveID;
                // DiscountVendor Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountVendor's Related Objects
                // DiscountVendor's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AppliedPurchaseOrderDiscount.</summary>
        /// <returns>The new AppliedPurchaseOrderDiscount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppliedPurchaseOrderDiscount>> CreateADummyAppliedPurchaseOrderDiscountAsync(int id, string? key, string? jsonAttributes = null, int? applicationsUsed = null!, decimal discountTotal = 0m, int masterID = 1, int slaveID = 1, int? targetApplicationsUsed = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppliedPurchaseOrderDiscount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AppliedPurchaseOrderDiscount Properties
                mock.Object.ApplicationsUsed = applicationsUsed;
                mock.Object.DiscountTotal = discountTotal;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.TargetApplicationsUsed = targetApplicationsUsed;
                // Dynamic Linking
                // AppliedPurchaseOrderDiscount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawPurchaseOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedPurchaseOrderDiscount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AppliedPurchaseOrderItemDiscount.</summary>
        /// <returns>The new AppliedPurchaseOrderItemDiscount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppliedPurchaseOrderItemDiscount>> CreateADummyAppliedPurchaseOrderItemDiscountAsync(int id, string? key, string? jsonAttributes = null, int? applicationsUsed = null!, decimal discountTotal = 0m, int masterID = 1, int slaveID = 1, int? targetApplicationsUsed = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppliedPurchaseOrderItemDiscount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AppliedPurchaseOrderItemDiscount Properties
                mock.Object.ApplicationsUsed = applicationsUsed;
                mock.Object.DiscountTotal = discountTotal;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.TargetApplicationsUsed = targetApplicationsUsed;
                // Dynamic Linking
                // AppliedPurchaseOrderItemDiscount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawPurchaseOrderItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedPurchaseOrderItemDiscount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AppliedSalesInvoiceDiscount.</summary>
        /// <returns>The new AppliedSalesInvoiceDiscount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppliedSalesInvoiceDiscount>> CreateADummyAppliedSalesInvoiceDiscountAsync(int id, string? key, string? jsonAttributes = null, int? applicationsUsed = null!, decimal discountTotal = 0m, int masterID = 1, int slaveID = 1, int? targetApplicationsUsed = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppliedSalesInvoiceDiscount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AppliedSalesInvoiceDiscount Properties
                mock.Object.ApplicationsUsed = applicationsUsed;
                mock.Object.DiscountTotal = discountTotal;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.TargetApplicationsUsed = targetApplicationsUsed;
                // Dynamic Linking
                // AppliedSalesInvoiceDiscount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesInvoiceDiscount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AppliedSalesInvoiceItemDiscount.</summary>
        /// <returns>The new AppliedSalesInvoiceItemDiscount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppliedSalesInvoiceItemDiscount>> CreateADummyAppliedSalesInvoiceItemDiscountAsync(int id, string? key, string? jsonAttributes = null, int? applicationsUsed = null!, decimal discountTotal = 0m, int masterID = 1, int slaveID = 1, int? targetApplicationsUsed = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppliedSalesInvoiceItemDiscount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AppliedSalesInvoiceItemDiscount Properties
                mock.Object.ApplicationsUsed = applicationsUsed;
                mock.Object.DiscountTotal = discountTotal;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.TargetApplicationsUsed = targetApplicationsUsed;
                // Dynamic Linking
                // AppliedSalesInvoiceItemDiscount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesInvoiceItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesInvoiceItemDiscount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AppliedSalesOrderDiscount.</summary>
        /// <returns>The new AppliedSalesOrderDiscount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppliedSalesOrderDiscount>> CreateADummyAppliedSalesOrderDiscountAsync(int id, string? key, string? jsonAttributes = null, int? applicationsUsed = null!, decimal discountTotal = 0m, int masterID = 1, int slaveID = 1, int? targetApplicationsUsed = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppliedSalesOrderDiscount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AppliedSalesOrderDiscount Properties
                mock.Object.ApplicationsUsed = applicationsUsed;
                mock.Object.DiscountTotal = discountTotal;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.TargetApplicationsUsed = targetApplicationsUsed;
                // Dynamic Linking
                // AppliedSalesOrderDiscount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesOrderDiscount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AppliedSalesOrderItemDiscount.</summary>
        /// <returns>The new AppliedSalesOrderItemDiscount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppliedSalesOrderItemDiscount>> CreateADummyAppliedSalesOrderItemDiscountAsync(int id, string? key, string? jsonAttributes = null, int? applicationsUsed = null!, decimal discountTotal = 0m, int masterID = 1, int slaveID = 1, int? targetApplicationsUsed = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppliedSalesOrderItemDiscount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AppliedSalesOrderItemDiscount Properties
                mock.Object.ApplicationsUsed = applicationsUsed;
                mock.Object.DiscountTotal = discountTotal;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.TargetApplicationsUsed = targetApplicationsUsed;
                // Dynamic Linking
                // AppliedSalesOrderItemDiscount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesOrderItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesOrderItemDiscount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AppliedSalesQuoteDiscount.</summary>
        /// <returns>The new AppliedSalesQuoteDiscount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppliedSalesQuoteDiscount>> CreateADummyAppliedSalesQuoteDiscountAsync(int id, string? key, string? jsonAttributes = null, int? applicationsUsed = null!, decimal discountTotal = 0m, int masterID = 1, int slaveID = 1, int? targetApplicationsUsed = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppliedSalesQuoteDiscount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AppliedSalesQuoteDiscount Properties
                mock.Object.ApplicationsUsed = applicationsUsed;
                mock.Object.DiscountTotal = discountTotal;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.TargetApplicationsUsed = targetApplicationsUsed;
                // Dynamic Linking
                // AppliedSalesQuoteDiscount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesQuoteDiscount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AppliedSalesQuoteItemDiscount.</summary>
        /// <returns>The new AppliedSalesQuoteItemDiscount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppliedSalesQuoteItemDiscount>> CreateADummyAppliedSalesQuoteItemDiscountAsync(int id, string? key, string? jsonAttributes = null, int? applicationsUsed = null!, decimal discountTotal = 0m, int masterID = 1, int slaveID = 1, int? targetApplicationsUsed = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppliedSalesQuoteItemDiscount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AppliedSalesQuoteItemDiscount Properties
                mock.Object.ApplicationsUsed = applicationsUsed;
                mock.Object.DiscountTotal = discountTotal;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.TargetApplicationsUsed = targetApplicationsUsed;
                // Dynamic Linking
                // AppliedSalesQuoteItemDiscount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesQuoteItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesQuoteItemDiscount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AppliedSalesReturnDiscount.</summary>
        /// <returns>The new AppliedSalesReturnDiscount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppliedSalesReturnDiscount>> CreateADummyAppliedSalesReturnDiscountAsync(int id, string? key, string? jsonAttributes = null, int? applicationsUsed = null!, decimal discountTotal = 0m, int masterID = 1, int slaveID = 1, int? targetApplicationsUsed = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppliedSalesReturnDiscount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AppliedSalesReturnDiscount Properties
                mock.Object.ApplicationsUsed = applicationsUsed;
                mock.Object.DiscountTotal = discountTotal;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.TargetApplicationsUsed = targetApplicationsUsed;
                // Dynamic Linking
                // AppliedSalesReturnDiscount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesReturnDiscount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AppliedSalesReturnItemDiscount.</summary>
        /// <returns>The new AppliedSalesReturnItemDiscount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppliedSalesReturnItemDiscount>> CreateADummyAppliedSalesReturnItemDiscountAsync(int id, string? key, string? jsonAttributes = null, int? applicationsUsed = null!, decimal discountTotal = 0m, int masterID = 1, int slaveID = 1, int? targetApplicationsUsed = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppliedSalesReturnItemDiscount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AppliedSalesReturnItemDiscount Properties
                mock.Object.ApplicationsUsed = applicationsUsed;
                mock.Object.DiscountTotal = discountTotal;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.TargetApplicationsUsed = targetApplicationsUsed;
                // Dynamic Linking
                // AppliedSalesReturnItemDiscount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesReturnItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesReturnItemDiscount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AppliedSampleRequestDiscount.</summary>
        /// <returns>The new AppliedSampleRequestDiscount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppliedSampleRequestDiscount>> CreateADummyAppliedSampleRequestDiscountAsync(int id, string? key, string? jsonAttributes = null, int? applicationsUsed = null!, decimal discountTotal = 0m, int masterID = 1, int slaveID = 1, int? targetApplicationsUsed = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppliedSampleRequestDiscount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AppliedSampleRequestDiscount Properties
                mock.Object.ApplicationsUsed = applicationsUsed;
                mock.Object.DiscountTotal = discountTotal;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.TargetApplicationsUsed = targetApplicationsUsed;
                // Dynamic Linking
                // AppliedSampleRequestDiscount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSampleRequests?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSampleRequestDiscount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AppliedSampleRequestItemDiscount.</summary>
        /// <returns>The new AppliedSampleRequestItemDiscount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppliedSampleRequestItemDiscount>> CreateADummyAppliedSampleRequestItemDiscountAsync(int id, string? key, string? jsonAttributes = null, int? applicationsUsed = null!, decimal discountTotal = 0m, int masterID = 1, int slaveID = 1, int? targetApplicationsUsed = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppliedSampleRequestItemDiscount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AppliedSampleRequestItemDiscount Properties
                mock.Object.ApplicationsUsed = applicationsUsed;
                mock.Object.DiscountTotal = discountTotal;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.TargetApplicationsUsed = targetApplicationsUsed;
                // Dynamic Linking
                // AppliedSampleRequestItemDiscount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSampleRequestItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSampleRequestItemDiscount's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForDiscounts(MockingSetup mockingSetup)
        {
            Func<AppliedCartDiscount> mockFuncAppliedCartDiscount = () =>
            {
                var mock = new Mock<AppliedCartDiscount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppliedCartDiscount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCarts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedCartDiscount's Associated Objects
                // AppliedCartDiscount's Related Objects
                return mock.Object;
            };
            For<IAppliedCartDiscount>().Use(() => mockFuncAppliedCartDiscount());
            For<AppliedCartDiscount>().Use(() => mockFuncAppliedCartDiscount());
            Func<AppliedCartItemDiscount> mockFuncAppliedCartItemDiscount = () =>
            {
                var mock = new Mock<AppliedCartItemDiscount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppliedCartItemDiscount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCartItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedCartItemDiscount's Associated Objects
                // AppliedCartItemDiscount's Related Objects
                return mock.Object;
            };
            For<IAppliedCartItemDiscount>().Use(() => mockFuncAppliedCartItemDiscount());
            For<AppliedCartItemDiscount>().Use(() => mockFuncAppliedCartItemDiscount());
            Func<Discount> mockFuncDiscount = () =>
            {
                var mock = new Mock<Discount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Discount Properties
                // Dynamic Linking
                // Discount's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => mockingSetup.RawDiscountAccounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountAccount>());
                mock.Setup(m => m.AccountTypes).Returns(() => mockingSetup.RawDiscountAccountTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountAccountType>());
                mock.Setup(m => m.Brands).Returns(() => mockingSetup.RawDiscountBrands?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountBrand>());
                mock.Setup(m => m.Categories).Returns(() => mockingSetup.RawDiscountCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountCategory>());
                mock.Setup(m => m.Codes).Returns(() => mockingSetup.RawDiscountCodes?.Where(x => x.Object.DiscountID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountCode>());
                mock.Setup(m => m.Countries).Returns(() => mockingSetup.RawDiscountCountries?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountCountry>());
                mock.Setup(m => m.Franchises).Returns(() => mockingSetup.RawDiscountFranchises?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountFranchise>());
                mock.Setup(m => m.Manufacturers).Returns(() => mockingSetup.RawDiscountManufacturers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountManufacturer>());
                mock.Setup(m => m.Products).Returns(() => mockingSetup.RawDiscountProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountProduct>());
                mock.Setup(m => m.ProductTypes).Returns(() => mockingSetup.RawDiscountProductTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountProductType>());
                mock.Setup(m => m.ShipCarrierMethods).Returns(() => mockingSetup.RawDiscountShipCarrierMethods?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountShipCarrierMethod>());
                mock.Setup(m => m.Stores).Returns(() => mockingSetup.RawDiscountStores?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountStore>());
                mock.Setup(m => m.UserRoles).Returns(() => mockingSetup.RawDiscountUserRoles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountUserRole>());
                mock.Setup(m => m.Users).Returns(() => mockingSetup.RawDiscountUsers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountUser>());
                mock.Setup(m => m.Vendors).Returns(() => mockingSetup.RawDiscountVendors?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DiscountVendor>());
                // Discount's Related Objects
                return mock.Object;
            };
            For<IDiscount>().Use(() => mockFuncDiscount());
            For<Discount>().Use(() => mockFuncDiscount());
            Func<DiscountAccount> mockFuncDiscountAccount = () =>
            {
                var mock = new Mock<DiscountAccount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountAccount Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountAccount's Associated Objects
                // DiscountAccount's Related Objects
                return mock.Object;
            };
            For<IDiscountAccount>().Use(() => mockFuncDiscountAccount());
            For<DiscountAccount>().Use(() => mockFuncDiscountAccount());
            Func<DiscountAccountType> mockFuncDiscountAccountType = () =>
            {
                var mock = new Mock<DiscountAccountType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountAccountType Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAccountTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountAccountType's Associated Objects
                // DiscountAccountType's Related Objects
                return mock.Object;
            };
            For<IDiscountAccountType>().Use(() => mockFuncDiscountAccountType());
            For<DiscountAccountType>().Use(() => mockFuncDiscountAccountType());
            Func<DiscountBrand> mockFuncDiscountBrand = () =>
            {
                var mock = new Mock<DiscountBrand>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountBrand Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountBrand's Associated Objects
                // DiscountBrand's Related Objects
                return mock.Object;
            };
            For<IDiscountBrand>().Use(() => mockFuncDiscountBrand());
            For<DiscountBrand>().Use(() => mockFuncDiscountBrand());
            Func<DiscountCategory> mockFuncDiscountCategory = () =>
            {
                var mock = new Mock<DiscountCategory>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountCategory Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountCategory's Associated Objects
                // DiscountCategory's Related Objects
                return mock.Object;
            };
            For<IDiscountCategory>().Use(() => mockFuncDiscountCategory());
            For<DiscountCategory>().Use(() => mockFuncDiscountCategory());
            Func<DiscountCode> mockFuncDiscountCode = () =>
            {
                var mock = new Mock<DiscountCode>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountCode Properties
                // Dynamic Linking
                mock.Setup(m => m.Discount).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.DiscountID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // DiscountCode's Associated Objects
                // DiscountCode's Related Objects
                return mock.Object;
            };
            For<IDiscountCode>().Use(() => mockFuncDiscountCode());
            For<DiscountCode>().Use(() => mockFuncDiscountCode());
            Func<DiscountCountry> mockFuncDiscountCountry = () =>
            {
                var mock = new Mock<DiscountCountry>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountCountry Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountCountry's Associated Objects
                // DiscountCountry's Related Objects
                return mock.Object;
            };
            For<IDiscountCountry>().Use(() => mockFuncDiscountCountry());
            For<DiscountCountry>().Use(() => mockFuncDiscountCountry());
            Func<DiscountFranchise> mockFuncDiscountFranchise = () =>
            {
                var mock = new Mock<DiscountFranchise>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountFranchise Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountFranchise's Associated Objects
                // DiscountFranchise's Related Objects
                return mock.Object;
            };
            For<IDiscountFranchise>().Use(() => mockFuncDiscountFranchise());
            For<DiscountFranchise>().Use(() => mockFuncDiscountFranchise());
            Func<DiscountManufacturer> mockFuncDiscountManufacturer = () =>
            {
                var mock = new Mock<DiscountManufacturer>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountManufacturer Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountManufacturer's Associated Objects
                // DiscountManufacturer's Related Objects
                return mock.Object;
            };
            For<IDiscountManufacturer>().Use(() => mockFuncDiscountManufacturer());
            For<DiscountManufacturer>().Use(() => mockFuncDiscountManufacturer());
            Func<DiscountProduct> mockFuncDiscountProduct = () =>
            {
                var mock = new Mock<DiscountProduct>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountProduct Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountProduct's Associated Objects
                // DiscountProduct's Related Objects
                return mock.Object;
            };
            For<IDiscountProduct>().Use(() => mockFuncDiscountProduct());
            For<DiscountProduct>().Use(() => mockFuncDiscountProduct());
            Func<DiscountProductType> mockFuncDiscountProductType = () =>
            {
                var mock = new Mock<DiscountProductType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountProductType Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawProductTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountProductType's Associated Objects
                // DiscountProductType's Related Objects
                return mock.Object;
            };
            For<IDiscountProductType>().Use(() => mockFuncDiscountProductType());
            For<DiscountProductType>().Use(() => mockFuncDiscountProductType());
            Func<DiscountShipCarrierMethod> mockFuncDiscountShipCarrierMethod = () =>
            {
                var mock = new Mock<DiscountShipCarrierMethod>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountShipCarrierMethod Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawShipCarrierMethods?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountShipCarrierMethod's Associated Objects
                // DiscountShipCarrierMethod's Related Objects
                return mock.Object;
            };
            For<IDiscountShipCarrierMethod>().Use(() => mockFuncDiscountShipCarrierMethod());
            For<DiscountShipCarrierMethod>().Use(() => mockFuncDiscountShipCarrierMethod());
            Func<DiscountStore> mockFuncDiscountStore = () =>
            {
                var mock = new Mock<DiscountStore>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountStore Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountStore's Associated Objects
                // DiscountStore's Related Objects
                return mock.Object;
            };
            For<IDiscountStore>().Use(() => mockFuncDiscountStore());
            For<DiscountStore>().Use(() => mockFuncDiscountStore());
            Func<DiscountUser> mockFuncDiscountUser = () =>
            {
                var mock = new Mock<DiscountUser>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountUser Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountUser's Associated Objects
                // DiscountUser's Related Objects
                return mock.Object;
            };
            For<IDiscountUser>().Use(() => mockFuncDiscountUser());
            For<DiscountUser>().Use(() => mockFuncDiscountUser());
            Func<DiscountUserRole> mockFuncDiscountUserRole = () =>
            {
                var mock = new Mock<DiscountUserRole>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountUserRole Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // DiscountUserRole's Associated Objects
                // DiscountUserRole's Related Objects
                return mock.Object;
            };
            For<IDiscountUserRole>().Use(() => mockFuncDiscountUserRole());
            For<DiscountUserRole>().Use(() => mockFuncDiscountUserRole());
            Func<DiscountVendor> mockFuncDiscountVendor = () =>
            {
                var mock = new Mock<DiscountVendor>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DiscountVendor Properties
                // Dynamic Linking
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DiscountVendor's Associated Objects
                // DiscountVendor's Related Objects
                return mock.Object;
            };
            For<IDiscountVendor>().Use(() => mockFuncDiscountVendor());
            For<DiscountVendor>().Use(() => mockFuncDiscountVendor());
            Func<AppliedPurchaseOrderDiscount> mockFuncAppliedPurchaseOrderDiscount = () =>
            {
                var mock = new Mock<AppliedPurchaseOrderDiscount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppliedPurchaseOrderDiscount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPurchaseOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedPurchaseOrderDiscount's Associated Objects
                // AppliedPurchaseOrderDiscount's Related Objects
                return mock.Object;
            };
            For<IAppliedPurchaseOrderDiscount>().Use(() => mockFuncAppliedPurchaseOrderDiscount());
            For<AppliedPurchaseOrderDiscount>().Use(() => mockFuncAppliedPurchaseOrderDiscount());
            Func<AppliedPurchaseOrderItemDiscount> mockFuncAppliedPurchaseOrderItemDiscount = () =>
            {
                var mock = new Mock<AppliedPurchaseOrderItemDiscount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppliedPurchaseOrderItemDiscount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPurchaseOrderItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedPurchaseOrderItemDiscount's Associated Objects
                // AppliedPurchaseOrderItemDiscount's Related Objects
                return mock.Object;
            };
            For<IAppliedPurchaseOrderItemDiscount>().Use(() => mockFuncAppliedPurchaseOrderItemDiscount());
            For<AppliedPurchaseOrderItemDiscount>().Use(() => mockFuncAppliedPurchaseOrderItemDiscount());
            Func<AppliedSalesInvoiceDiscount> mockFuncAppliedSalesInvoiceDiscount = () =>
            {
                var mock = new Mock<AppliedSalesInvoiceDiscount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppliedSalesInvoiceDiscount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesInvoiceDiscount's Associated Objects
                // AppliedSalesInvoiceDiscount's Related Objects
                return mock.Object;
            };
            For<IAppliedSalesInvoiceDiscount>().Use(() => mockFuncAppliedSalesInvoiceDiscount());
            For<AppliedSalesInvoiceDiscount>().Use(() => mockFuncAppliedSalesInvoiceDiscount());
            Func<AppliedSalesInvoiceItemDiscount> mockFuncAppliedSalesInvoiceItemDiscount = () =>
            {
                var mock = new Mock<AppliedSalesInvoiceItemDiscount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppliedSalesInvoiceItemDiscount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesInvoiceItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesInvoiceItemDiscount's Associated Objects
                // AppliedSalesInvoiceItemDiscount's Related Objects
                return mock.Object;
            };
            For<IAppliedSalesInvoiceItemDiscount>().Use(() => mockFuncAppliedSalesInvoiceItemDiscount());
            For<AppliedSalesInvoiceItemDiscount>().Use(() => mockFuncAppliedSalesInvoiceItemDiscount());
            Func<AppliedSalesOrderDiscount> mockFuncAppliedSalesOrderDiscount = () =>
            {
                var mock = new Mock<AppliedSalesOrderDiscount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppliedSalesOrderDiscount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesOrderDiscount's Associated Objects
                // AppliedSalesOrderDiscount's Related Objects
                return mock.Object;
            };
            For<IAppliedSalesOrderDiscount>().Use(() => mockFuncAppliedSalesOrderDiscount());
            For<AppliedSalesOrderDiscount>().Use(() => mockFuncAppliedSalesOrderDiscount());
            Func<AppliedSalesOrderItemDiscount> mockFuncAppliedSalesOrderItemDiscount = () =>
            {
                var mock = new Mock<AppliedSalesOrderItemDiscount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppliedSalesOrderItemDiscount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesOrderItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesOrderItemDiscount's Associated Objects
                // AppliedSalesOrderItemDiscount's Related Objects
                return mock.Object;
            };
            For<IAppliedSalesOrderItemDiscount>().Use(() => mockFuncAppliedSalesOrderItemDiscount());
            For<AppliedSalesOrderItemDiscount>().Use(() => mockFuncAppliedSalesOrderItemDiscount());
            Func<AppliedSalesQuoteDiscount> mockFuncAppliedSalesQuoteDiscount = () =>
            {
                var mock = new Mock<AppliedSalesQuoteDiscount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppliedSalesQuoteDiscount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesQuoteDiscount's Associated Objects
                // AppliedSalesQuoteDiscount's Related Objects
                return mock.Object;
            };
            For<IAppliedSalesQuoteDiscount>().Use(() => mockFuncAppliedSalesQuoteDiscount());
            For<AppliedSalesQuoteDiscount>().Use(() => mockFuncAppliedSalesQuoteDiscount());
            Func<AppliedSalesQuoteItemDiscount> mockFuncAppliedSalesQuoteItemDiscount = () =>
            {
                var mock = new Mock<AppliedSalesQuoteItemDiscount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppliedSalesQuoteItemDiscount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesQuoteItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesQuoteItemDiscount's Associated Objects
                // AppliedSalesQuoteItemDiscount's Related Objects
                return mock.Object;
            };
            For<IAppliedSalesQuoteItemDiscount>().Use(() => mockFuncAppliedSalesQuoteItemDiscount());
            For<AppliedSalesQuoteItemDiscount>().Use(() => mockFuncAppliedSalesQuoteItemDiscount());
            Func<AppliedSalesReturnDiscount> mockFuncAppliedSalesReturnDiscount = () =>
            {
                var mock = new Mock<AppliedSalesReturnDiscount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppliedSalesReturnDiscount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesReturnDiscount's Associated Objects
                // AppliedSalesReturnDiscount's Related Objects
                return mock.Object;
            };
            For<IAppliedSalesReturnDiscount>().Use(() => mockFuncAppliedSalesReturnDiscount());
            For<AppliedSalesReturnDiscount>().Use(() => mockFuncAppliedSalesReturnDiscount());
            Func<AppliedSalesReturnItemDiscount> mockFuncAppliedSalesReturnItemDiscount = () =>
            {
                var mock = new Mock<AppliedSalesReturnItemDiscount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppliedSalesReturnItemDiscount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesReturnItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSalesReturnItemDiscount's Associated Objects
                // AppliedSalesReturnItemDiscount's Related Objects
                return mock.Object;
            };
            For<IAppliedSalesReturnItemDiscount>().Use(() => mockFuncAppliedSalesReturnItemDiscount());
            For<AppliedSalesReturnItemDiscount>().Use(() => mockFuncAppliedSalesReturnItemDiscount());
            Func<AppliedSampleRequestDiscount> mockFuncAppliedSampleRequestDiscount = () =>
            {
                var mock = new Mock<AppliedSampleRequestDiscount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppliedSampleRequestDiscount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSampleRequests?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSampleRequestDiscount's Associated Objects
                // AppliedSampleRequestDiscount's Related Objects
                return mock.Object;
            };
            For<IAppliedSampleRequestDiscount>().Use(() => mockFuncAppliedSampleRequestDiscount());
            For<AppliedSampleRequestDiscount>().Use(() => mockFuncAppliedSampleRequestDiscount());
            Func<AppliedSampleRequestItemDiscount> mockFuncAppliedSampleRequestItemDiscount = () =>
            {
                var mock = new Mock<AppliedSampleRequestItemDiscount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppliedSampleRequestItemDiscount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSampleRequestItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AppliedSampleRequestItemDiscount's Associated Objects
                // AppliedSampleRequestItemDiscount's Related Objects
                return mock.Object;
            };
            For<IAppliedSampleRequestItemDiscount>().Use(() => mockFuncAppliedSampleRequestItemDiscount());
            For<AppliedSampleRequestItemDiscount>().Use(() => mockFuncAppliedSampleRequestItemDiscount());
        }
    }
}
