// <autogenerated>
// <copyright file="Reviews.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Reviews section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoReviews { private get; set; }

        // Enable the tables specifically on run
        public bool DoReviewTable { private get; set; }
        public bool DoReviewTypeTable { private get; set; }

        // Dirty Checking
        public bool ReviewDirty { private get; set; }
        public bool ReviewTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<Review>>? Reviews { get; private set; }
        public Mock<DbSet<ReviewType>>? ReviewTypes { get; private set; }

        // Raw Data
        public List<Mock<Review>>? RawReviews { get; private set; }
        public List<Mock<ReviewType>>? RawReviewTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksReviewsAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoReviews || (DoReviewTable && (!dirtyOnly || ReviewDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawReviews == null) { throw new InvalidOperationException("Raw Reviews was null"); }
                    await InitializeMockSetFromListAsync(Reviews, RawReviews).ConfigureAwait(false);
                    context.Setup(m => m.Reviews).Returns(() => Reviews?.Object!);
                    context.Setup(m => m.Set<Review>()).Returns(() => Reviews?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoReviews || (DoReviewTypeTable && (!dirtyOnly || ReviewTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawReviewTypes == null) { throw new InvalidOperationException("Raw ReviewTypes was null"); }
                    await InitializeMockSetFromListAsync(ReviewTypes, RawReviewTypes).ConfigureAwait(false);
                    context.Setup(m => m.ReviewTypes).Returns(() => ReviewTypes?.Object!);
                    context.Setup(m => m.Set<ReviewType>()).Returns(() => ReviewTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetReviewsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Review>> data)
        {
            if (!DoAll && !DoReviews && !DoReviewTable) { return; }
            Reviews ??= new Mock<DbSet<Review>>();
            await InitializeMockSetFromListAsync(Reviews, data).ConfigureAwait(false);
            context.Setup(m => m.Reviews).Returns(() => Reviews.Object);
            context.Setup(m => m.Set<Review>()).Returns(() => Reviews.Object);
            TableRecordCounts[typeof(Review)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Review)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Review)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Review)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetReviewTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ReviewType>> data)
        {
            if (!DoAll && !DoReviews && !DoReviewTypeTable) { return; }
            ReviewTypes ??= new Mock<DbSet<ReviewType>>();
            await InitializeMockSetFromListAsync(ReviewTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ReviewTypes).Returns(() => ReviewTypes.Object);
            context.Setup(m => m.Set<ReviewType>()).Returns(() => ReviewTypes.Object);
            TableRecordCounts[typeof(ReviewType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ReviewType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ReviewType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ReviewType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ReviewType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy Review.</summary>
        /// <returns>The new Review.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Review>> CreateADummyReviewAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, string? jsonAttributes = null, bool approved = false, int? approvedByUserID = null!, DateTime? approvedDate = null!, int? categoryID = null!, string comment = null!, string location = null!, int? manufacturerID = null!, int? productID = null!, int? sortOrder = null!, int? storeID = null!, int submittedByUserID = 1, string title = null!, int? userID = null!, decimal value = 0m, int? vendorID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Review>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // Review Properties
                mock.Object.Approved = approved;
                mock.Object.ApprovedByUserID = approvedByUserID;
                mock.Object.ApprovedDate = approvedDate;
                mock.Object.CategoryID = categoryID;
                mock.Object.Comment = comment;
                mock.Object.Location = location;
                mock.Object.ManufacturerID = manufacturerID;
                mock.Object.ProductID = productID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.StoreID = storeID;
                mock.Object.SubmittedByUserID = submittedByUserID;
                mock.Object.Title = title;
                mock.Object.UserID = userID;
                mock.Object.Value = value;
                mock.Object.VendorID = vendorID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawReviewTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // Review's Related Objects
                mock.Setup(m => m.ApprovedByUser).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.ApprovedByUserID)?.Object);
                mock.Setup(m => m.Category).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.CategoryID)?.Object);
                mock.Setup(m => m.Manufacturer).Returns(() => RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.ManufacturerID)?.Object);
                mock.Setup(m => m.Product).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                mock.Setup(m => m.SubmittedByUser).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SubmittedByUserID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Vendor).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.VendorID)?.Object);
                // Review's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ReviewType.</summary>
        /// <returns>The new ReviewType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ReviewType>> CreateADummyReviewTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ReviewType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ReviewType Properties
                // Dynamic Linking
                // ReviewType's Related Objects
                // ReviewType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForReviews(MockingSetup mockingSetup)
        {
            Func<Review> mockFuncReview = () =>
            {
                var mock = new Mock<Review>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Review Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawReviewTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.ApprovedByUser).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.ApprovedByUserID)?.Object);
                mock.Setup(m => m.Category).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.CategoryID)?.Object);
                mock.Setup(m => m.Manufacturer).Returns(() => mockingSetup.RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.ManufacturerID)?.Object);
                mock.Setup(m => m.Product).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                mock.Setup(m => m.SubmittedByUser).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SubmittedByUserID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Vendor).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.VendorID)?.Object);
                // Review's Associated Objects
                // Review's Related Objects
                return mock.Object;
            };
            For<IReview>().Use(() => mockFuncReview());
            For<Review>().Use(() => mockFuncReview());
            Func<ReviewType> mockFuncReviewType = () =>
            {
                var mock = new Mock<ReviewType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ReviewType Properties
                // Dynamic Linking
                // ReviewType's Associated Objects
                // ReviewType's Related Objects
                return mock.Object;
            };
            For<IReviewType>().Use(() => mockFuncReviewType());
            For<ReviewType>().Use(() => mockFuncReviewType());
        }
    }
}
