<#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System"
#><#@ import namespace="System.Collections"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Diagnostics"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Net.Mime"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="Clarity.Ecommerce.Interfaces.DataModel"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#+
    void GenerateMockingSetupFile(IGrouping<string, Type> theTypes, string schema)
    {
        var skips = new string[]
        {
            "UserSupportRequest", "HangfireAggregatedCounter", "HangfireCounter", "HangfireHash",
            "HangfireJob", "HangfireJobParameter", "HangfireJobQueue", "HangfireList", "HangfireSchema",
            "HangfireServer", "HangfireSet", "HangfireState",
        };
#>// <autogenerated>
// <copyright file="<#= schema #>.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the <#= schema #> section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool Do<#= schema #> { private get; set; }

        // Enable the tables specifically on run
<#+     foreach (var theType in theTypes) { var td = new TypeDeterminer(theType); if (/*td.IsExcludedFromT4 ||*/ skips.Contains(theType.Name)) { continue; } #>
        public bool Do<#= theType.Name #>Table { private get; set; }
<#+     } #>

        // Dirty Checking
<#+     foreach (var theType in theTypes) { var td = new TypeDeterminer(theType); if (/*td.IsExcludedFromT4 ||*/ skips.Contains(theType.Name)) { continue; } #>
        public bool <#= theType.Name #>Dirty { private get; set; }
<#+     } #>

        // Sets
<#+     foreach (var theType in theTypes) { var td = new TypeDeterminer(theType); if (/*td.IsExcludedFromT4 ||*/ skips.Contains(theType.Name)) { continue; } #>
        public Mock<DbSet<<#= theType.Name #>>>? <#= HelpFunctions.PluralizeName(theType) #> { get; private set; }
<#+     } #>

        // Raw Data
<#+     foreach (var theType in theTypes) { var td = new TypeDeterminer(theType); if (/*td.IsExcludedFromT4 ||*/ skips.Contains(theType.Name)) { continue; } #>
        public List<Mock<<#= theType.Name #>>>? Raw<#= HelpFunctions.PluralizeName(theType) #> { get; private set; }
<#+     } #>

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocks<#= schema #>Async(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
<#+     foreach (var theType in theTypes) { var td = new TypeDeterminer(theType); if (/*td.IsExcludedFromT4 ||*/ skips.Contains(theType.Name)) { continue; } var theTypeName = theType.Name; #>
            if (DoAll || Do<#= schema #> || (Do<#= theType.Name #>Table && (!dirtyOnly || <#= theType.Name #>Dirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (Raw<#= HelpFunctions.PluralizeName(theType) #> == null) { throw new InvalidOperationException("Raw <#= HelpFunctions.PluralizeName(theType) #> was null"); }
                    await InitializeMockSetFromList<#= td.IsIBase ? string.Empty : "NonIBase" #>Async(<#= HelpFunctions.PluralizeName(theType) #>, Raw<#= HelpFunctions.PluralizeName(theType) #>).ConfigureAwait(false);
<#+         if (theType.Name == "UserRole") { #>
                    context.Setup(m => m.Roles).Returns(() => <#= HelpFunctions.PluralizeName(theType) #>?.Object!);
<#+         } else { #>
                    context.Setup(m => m.<#= HelpFunctions.PluralizeName(theType) #>).Returns(() => <#= HelpFunctions.PluralizeName(theType) #>?.Object!);
<#+         } #>
                    context.Setup(m => m.Set<<#= theType.Name #>>()).Returns(() => <#= HelpFunctions.PluralizeName(theType) #>?.Object!);
                })
                .ConfigureAwait(false);
            }
<#+     } #>
        }
<#+     foreach (var theType in theTypes) { var td = new TypeDeterminer(theType); if (/*td.IsExcludedFromT4 ||*/ skips.Contains(theType.Name)) { continue; } #>

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSet<#= HelpFunctions.PluralizeName(theType) #>Async(Mock<IClarityEcommerceEntities> context, List<Mock<<#= theType.Name #>>> data)
        {
            if (!DoAll && !Do<#= schema #> && !Do<#= theType.Name #>Table) { return; }
            <#= HelpFunctions.PluralizeName(theType) #> ??= new Mock<DbSet<<#= theType.Name #>>>();
            await InitializeMockSetFromList<#= td.IsIBase ? string.Empty : "NonIBase" #>Async(<#= HelpFunctions.PluralizeName(theType) #>, data).ConfigureAwait(false);
<#+         if (theType.Name == "UserRole") { #>
            context.Setup(m => m.Roles).Returns(() => <#= HelpFunctions.PluralizeName(theType) #>.Object);
<#+         } else { #>
            context.Setup(m => m.<#= HelpFunctions.PluralizeName(theType) #>).Returns(() => <#= HelpFunctions.PluralizeName(theType) #>.Object);
<#+         } #>
            context.Setup(m => m.Set<<#= theType.Name #>>()).Returns(() => <#= HelpFunctions.PluralizeName(theType) #>.Object);
            TableRecordCounts[typeof(<#= theType.Name #>)] = data.Count;
<#+         if (theType.Name != "RoleUser" && theType.Name != "RolePermission" && theType.Name != "Permission" && theType.Name != "UserRole" && theType.Name != "UserClaim" && theType.Name != "UserLogin") { #>
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(<#= theType.Name #>)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(<#= theType.Name #>)] = data[0].Object.CustomKey;
<#+             if (td.IsINameableBase) { #>
                TableFirstRecordNames[typeof(<#= theType.Name #>)] = data[0].Object.Name;
<#+             }
                if (td.IsIDisplayableBase) { #>
                TableFirstRecordDisplayNames[typeof(<#= theType.Name #>)] = data[0].Object.DisplayName;
<#+             } #>
            }
<#+         } #>
        }
<#+     }
        (List<PropertyInfo> remainingProperties, Dictionary<PropertyInfo, string[]> remPropStrings) MakeRemainingPropertyStrings(Type theType, TypeDeterminer td)
        {
            var theTypeName = theType.Name;
            var remainingProperties = new List<PropertyInfo>();
            var remPropStrings = new Dictionary<PropertyInfo, string[]>();
            var processedProperties = new List<PropertyInfo>();
            if (theType.Name == "User") { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "Id" || x.Name == "Claims" || x.Name == "Roles" || x.Name == "UserRoles" || x.Name == "Logins")); }
            if (theType.Name == "Account") { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "AccountUserRoles")); }
            if (td.IsIBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "ID" || x.Name == "CustomKey" || x.Name == "Active" || x.Name == "CreatedDate" || x.Name == "UpdatedDate" || x.Name == "Hash")); }
            if (td.IsINameableBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "Name" || x.Name == "Description")); }
            if (td.IsIHaveSeoBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "SeoKeywords" || x.Name == "SeoUrl" || x.Name == "SeoMetaData" || x.Name == "SeoDescription" || x.Name == "SeoPageTitle")); }
            if (td.IsIDisplayableBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "DisplayName" || x.Name == "SortOrder" || x.Name == "TranslationKey")); }
            if (td.IsIHaveAParentBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "ParentID" || x.Name == "Parent" || x.Name == "Children")); }
            if (td.IsIHaveATypeBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "TypeID" || x.Name == "Type")); }
            if (td.IsIHaveAStatusBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "StatusID" || x.Name == "Status")); }
            if (td.IsIHaveAStateBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "StateID" || x.Name == "State")); }
            if (td.IsIHaveAContactBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "ContactID" || x.Name == "Contact")); }
            if (td.IsIHaveANullableContactBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "ContactID" || x.Name == "Contact")); }
            if (td.IsIHaveImagesBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "Images")); }
            if (td.IsIHaveStoredFilesBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "StoredFiles")); }
            if (td.IsIHaveNotesBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "Notes")); }
            if (td.IsIHaveJsonAttributesBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "JsonAttributes" || x.Name == "SerializableAttributes")); }
            if (td.IsIAmADiscountFilterRelationshipTable)
            {
                processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "SlaveID" || x.Name == "Slave" || x.Name == "MasterID" || x.Name == "Master"));
            }
            if (theType.Name == "DiscountUserRole") {processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "MasterID")); }
            if (td.IsIObjectNoteBase) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "MasterID" || x.Name == "Master")); }
            if (td.IsIImageBase)
            {
                processedProperties.AddRange(theType.GetProperties()
                    .Where(x => x.Name == "MasterID"
                        || x.Name == "Master"
                        || x.Name == "TypeID"
                        || x.Name == "Type"
                        || x.Name == "SortOrder"
                        || x.Name == "DisplayName"
                        || x.Name == "SeoTitle"
                        || x.Name == "Author"
                        || x.Name == "MediaDate"
                        || x.Name == "Copyright"
                        || x.Name == "Location"
                        || x.Name == "Latitude"
                        || x.Name == "Longitude"
                        || x.Name == "IsPrimary"
                        || x.Name == "OriginalWidth"
                        || x.Name == "OriginalHeight"
                        || x.Name == "OriginalFileFormat"
                        || x.Name == "OriginalFileName"
                        || x.Name == "OriginalIsStoredInDB"
                        || x.Name == "OriginalBytes"
                        || x.Name == "ThumbnailWidth"
                        || x.Name == "ThumbnailHeight"
                        || x.Name == "ThumbnailFileFormat"
                        || x.Name == "ThumbnailFileName"
                        || x.Name == "ThumbnailIsStoredInDB"
                        || x.Name == "ThumbnailBytes"));
            }
            if (td.IsIAmAStoredFileRelationshipTable) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "MasterID" || x.Name == "Master" || x.Name == "SlaveID" || x.Name == "Slave" || x.Name == "FileAccessTypeID" || x.Name == "SortOrder")); }
            if (td.IsIAmAContactRelationshipTable) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "MasterID" || x.Name == "Master" || x.Name == "SlaveID" || x.Name == "Slave" || x.Name == "ContactID" || x.Name == "Contact")); }
            if (td.IsISalesCollectionBaseT) { processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "Status" || x.Name == "State" || x.Name == "Type" || x.Name == "SalesItems" || x.Name == "Discounts" || x.Name == "Contacts")); }
            if (td.IsISalesCollectionBase) {
                processedProperties.AddRange(theType.GetProperties()
                    .Where(x => x.Name == "DueDate"
                        || x.Name == "SubtotalItems"
                        || x.Name == "SubtotalShipping"
                        || x.Name == "SubtotalTaxes"
                        || x.Name == "SubtotalFees"
                        || x.Name == "SubtotalHandling"
                        || x.Name == "SubtotalDiscounts"
                        || x.Name == "Total"
                        || x.Name == "ShippingSameAsBilling"
                        || x.Name == "StatusID"
                        || x.Name == "StateID"
                        || x.Name == "TypeID"
                        || x.Name == "UserID"
                        || x.Name == "User"
                        || x.Name == "AccountID"
                        || x.Name == "Account"
                        || x.Name == "BillingContactID"
                        || x.Name == "BillingContact"
                        || x.Name == "ShippingContactID"
                        || x.Name == "ShippingContact"));
            }
            if (td.IsISalesItemBaseTT) {
                processedProperties.AddRange(theType.GetProperties()
                    .Where(x => x.Name == "MasterID"
                        || x.Name == "Master"
                        || x.Name == "Quantity"
                        || x.Name == "QuantityBackOrdered"
                        || x.Name == "QuantityPreSold"
                        || x.Name == "TotalQuantity"
                        || x.Name == "UnitCorePrice"
                        || x.Name == "UnitSoldPrice"
                        || x.Name == "Sku"
                        || x.Name == "UnitOfMeasure"
                        || x.Name == "ProductID"
                        || x.Name == "Product"
                        || x.Name == "UserID"
                        || x.Name == "User"
                        || x.Name == "Discounts"
                        || x.Name == "Targets"));
            }
            if (td.IsISalesEventBase) {
                processedProperties.AddRange(theType.GetProperties()
                    .Where(x => x.Name == "MasterID" || x.Name == "Master"
                        || x.Name == "OldHash" || x.Name == "NewHash"
                        || x.Name == "OldStateID" || x.Name == "NewStateID"
                        || x.Name == "OldStatusID" || x.Name == "NewStatusID"
                        || x.Name == "OldTypeID" || x.Name == "NewTypeID"
                        || x.Name == "OldRecordSerialized" || x.Name == "NewRecordSerialized"));
            }
            if (td.IsIHaveRequiresRolesBase)
            {
                processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "RequiresRolesList" || x.Name == "RequiresRolesListAlt"));
            }
            if (theType.Name == "Category")
            {
                processedProperties.AddRange(theType.GetProperties()
                    .Where(x => x.Name == "ManufacturerMinimumForFreeShippingDollarAmountBufferCategories"
                        || x.Name == "ManufacturerMinimumForFreeShippingQuantityAmountBufferCategories"
                        || x.Name == "ManufacturerMinimumOrderDollarAmountBufferCategories"
                        || x.Name == "ManufacturerMinimumOrderQuantityAmountBufferCategories"
                        || x.Name == "StoreMinimumForFreeShippingDollarAmountBufferCategories"
                        || x.Name == "StoreMinimumForFreeShippingQuantityAmountBufferCategories"
                        || x.Name == "StoreMinimumOrderDollarAmountBufferCategories"
                        || x.Name == "StoreMinimumOrderQuantityAmountBufferCategories"
                        || x.Name == "BrandMinimumForFreeShippingDollarAmountBufferCategories"
                        || x.Name == "BrandMinimumForFreeShippingQuantityAmountBufferCategories"
                        || x.Name == "BrandMinimumOrderDollarAmountBufferCategories"
                        || x.Name == "BrandMinimumOrderQuantityAmountBufferCategories"
                        || x.Name == "FranchiseMinimumForFreeShippingDollarAmountBufferCategories"
                        || x.Name == "FranchiseMinimumForFreeShippingQuantityAmountBufferCategories"
                        || x.Name == "FranchiseMinimumOrderDollarAmountBufferCategories"
                        || x.Name == "FranchiseMinimumOrderQuantityAmountBufferCategories"
                        || x.Name == "VendorMinimumForFreeShippingDollarAmountBufferCategories"
                        || x.Name == "VendorMinimumForFreeShippingQuantityAmountBufferCategories"
                        || x.Name == "VendorMinimumOrderDollarAmountBufferCategories"
                        || x.Name == "VendorMinimumOrderQuantityAmountBufferCategories"
                        || x.Name == "MinimumForFreeShippingDollarAmountBufferCategories"
                        || x.Name == "MinimumForFreeShippingQuantityAmountBufferCategories"
                        || x.Name == "MinimumOrderDollarAmountBufferCategories"
                        || x.Name == "MinimumOrderQuantityAmountBufferCategories"));
            }
            if (theType.Name == "Lot")
            {
                processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "TotalQuantity"));
            }
            if (theType.Name == "AccountUserRole")
            {
                processedProperties.AddRange(theType.GetProperties().Where(x => x.Name == "SerializableAttributes"));
            }
            if (theType.Name == "RoleUser")
            {
                processedProperties.AddRange(theType.GetProperties()
                    .Where(x => x.Name == "SerializableAttributes"
                        || x.Name == "ID"
                        || x.Name == "CustomKey"
                        || x.Name == "Active"
                        || x.Name == "CreatedDate"
                        || x.Name == "UpdatedDate"
                        || x.Name == "Hash"));
            }
            foreach (var property in theType.GetProperties().OrderBy(x => x.Name))
            {
                if (processedProperties.Contains(property)) { continue; }
                remainingProperties.Add(property);
                Type returnType = property.GetMethod.ReturnType;
                string propertyName = property.Name;
                if (returnType == typeof(int)
                    || returnType == typeof(int?)
                    || returnType == typeof(string)
                    || returnType == typeof(decimal)
                    || returnType == typeof(decimal?)
                    || returnType == typeof(bool)
                    || returnType == typeof(bool?)
                    || returnType == typeof(long)
                    || returnType == typeof(long?)
                    || returnType == typeof(byte)
                    || returnType == typeof(byte?)
                    || returnType == typeof(byte[])
                    || returnType == typeof(Guid)
                    || returnType == typeof(Guid?)
                    || returnType == typeof(DateTime)
                    || returnType == typeof(DateTime?))
                {
                    var returnTypeToUse = HelpFunctions.SwapToSimpleType(returnType);
                    remPropStrings[property] = new[]
                    {
                        returnTypeToUse + " " + HelpFunctions.LowerFirstCharacter(property.Name)
                            + (returnTypeToUse == "bool" ? " = false"
                            : returnTypeToUse == "int" ? " = 1"
                            : returnTypeToUse == "decimal" ? " = 0m"
                            : returnTypeToUse == "byte" ? " = default"
                            : returnTypeToUse == "DateTime" ? " = default"
                            : " = null!"), // parameter
                        "mock.Object." + property.Name + " = " + HelpFunctions.LowerFirstCharacter(property.Name) + ";", // assignment
                        "mock.Object." + property.Name + " = mock.Object." + HelpFunctions.LowerFirstCharacter(property.Name) + ";", // assignment
                        "1: Simples" // group by
                    };
                    continue;
                }
                if (returnType.Namespace == "Clarity.Ecommerce.DataModel")
                {
                    if (propertyName == "Type" || propertyName == "Status" || propertyName == "State")
                    {
                        propertyName = theType.Name + propertyName;
                    }
                    var linkName = HelpFunctions.LowerFirstCharacter(property.Name) + "ID";
                    string thisLinkName = null;
                    var otherLinkName = property.Name + "ID";
                    {
                        // Check if this object doesn't have an Identity Spec on the ID property
                        var idProperty = theType.GetProperties().FirstOrDefault(x => x.Name == "ID");
                        if (idProperty != null)
                        {
                            DatabaseGeneratedAttribute dbGenAttr = (DatabaseGeneratedAttribute)Attribute.GetCustomAttribute(idProperty, typeof(DatabaseGeneratedAttribute));
                            if (dbGenAttr != null && dbGenAttr.DatabaseGeneratedOption == DatabaseGeneratedOption.None)
                            {
                                linkName = "id";
                                otherLinkName = "ID";
                            }
                        }
                    }
                    if (linkName != "id")
                    {
                        // Check if the related object doesn't have an Identity Spec on the ID property
                        var idProperty = property.GetMethod.ReturnType.GetProperties().FirstOrDefault(x => x.Name == "ID");
                        if (idProperty != null)
                        {
                            DatabaseGeneratedAttribute dbGenAttr = (DatabaseGeneratedAttribute)Attribute.GetCustomAttribute(idProperty, typeof(DatabaseGeneratedAttribute));
                            if (dbGenAttr != null && dbGenAttr.DatabaseGeneratedOption == DatabaseGeneratedOption.None)
                            {
                                linkName = "id";
                                otherLinkName = "ID";
                            }
                        }
                        else
                        {
                            idProperty = property.GetMethod.ReturnType.GetProperties().FirstOrDefault(x => x.Name == "Id");
                            if (idProperty != null)
                            {
                                DatabaseGeneratedAttribute dbGenAttr = (DatabaseGeneratedAttribute)Attribute.GetCustomAttribute(idProperty, typeof(DatabaseGeneratedAttribute));
                                if (dbGenAttr != null && dbGenAttr.DatabaseGeneratedOption == DatabaseGeneratedOption.None)
                                {
                                    linkName = "id";
                                    otherLinkName = "Id";
                                }
                            }
                        }
                        if (theTypeName == "AccountUserRole" && propertyName == "Slave")
                        {
                            thisLinkName = "Id";
                        }
                        else if (theTypeName == "RoleUser" && propertyName == "Role")
                        {
                            thisLinkName = "Id";
                            otherLinkName = "RoleId";
                        }
                        else if (theTypeName == "RoleUser" && propertyName == "User")
                        {
                            otherLinkName = "UserId";
                        }
                        else if (theTypeName == "RolePermission" && propertyName == "Role")
                        {
                            thisLinkName = "Id";
                            otherLinkName = "RoleId";
                        }
                        else if (theTypeName == "RolePermission" && propertyName == "Permission")
                        {
                            thisLinkName = "Id";
                            otherLinkName = "PermissionId";
                        }
                        else if (theTypeName == "UserClaim" && propertyName == "User")
                        {
                            otherLinkName = "UserId";
                        }
                        else if (theTypeName == "UserLogin" && propertyName == "User")
                        {
                            otherLinkName = "UserId";
                        }
                    }
                    var namePrepped = HelpFunctions.PluralizeName(property.GetMethod.ReturnType)
                        .Replace("EmailQueueStatus", "EmailStatus")
                        .Replace("EmailQueueType", "EmailType")
                        .Replace("GeneralAttributeTypes", "AttributeTypes");
                    remPropStrings[property] = new[]
                    {
                        string.Empty, // parameter (None)
                        string.Empty,
                        string.Empty,
                        "2: 1-(0|1)'s", // group by
                        // Async Versions
                        string.Empty,
                        "mock.Setup(m => m." + property.Name + ").Returns(() => Raw" + namePrepped + "?.FirstOrDefault(x => x.Object." + (thisLinkName ?? "ID") + " == mock.Object." + otherLinkName + ")?.Object);", // assignment
                    };
                    continue;
                }
                if (returnType.Name == "ICollection`1")
                {
                    var otherType = property.GetMethod.ReturnType.GetGenericArguments()[0];
                    var otherTypeName = otherType.Name;
                    var otherTypeTD = new TypeDeterminer(otherType);
                    var linkName = theType.Name;
                    var noID = false;
                    string otherLinkName = null;
                    if (otherTypeTD.IsIAmARelationshipTable)
                    {
                        if (otherTypeTD.RelationshipSecondaryType == theType && propertyName != "AccountAssociations" && propertyName != "ProductAssociations")
                        {
                            linkName = "Slave";
                        }
                        else if (otherTypeTD.RelationshipPrimaryType == theType)
                        {
                            linkName = "Master";
                        }
                    }
                    if (propertyName == "Attributes") { propertyName = "GeneralAttributes"; }
                    else if (propertyName.StartsWith("BillingContacts")) { linkName = "Billing" + linkName; }
                    else if (propertyName.StartsWith("ShippingContacts")) { linkName = "Shipping" + linkName; }
                    else if (propertyName == "OriginContactsShipments") { linkName = "Origin" + linkName; }
                    else if (propertyName == "DestinationContactsShipments") { linkName = "Destination" + linkName; }
                    else if (propertyName == "NotesCreated") { linkName = "CreatedBy" + linkName; }
                    else if (propertyName == "NotesUpdated") { linkName = "UpdatedBy" + linkName; }
                    else if (propertyName == "InterRegionKeys") { linkName = "Key" + linkName; }
                    else if (propertyName == "InterRegionRelations") { linkName = "Relation" + linkName; }
                    else if (propertyName == "ReviewsApproved") { linkName = "ApprovedBy" + linkName; }
                    else if (propertyName == "ReviewsSubmitted") { linkName = "SubmittedBy" + linkName; }
                    else if (propertyName == "Payments") { linkName = "Billing" + linkName; }
                    else if (propertyName == "MinimumOrderDollarAmountBufferCategories") { linkName = "MinimumOrderDollarAmountBufferCategory"; }
                    else if (propertyName == "MinimumOrderQuantityAmountBufferCategories") { linkName = "MinimumOrderQuantityAmountBufferCategory"; }
                    else if (propertyName == "SalesQuoteRequestMasters" && theType.Name == "SalesGroup") { linkName = linkName + "AsRequestMaster"; }
                    else if (propertyName == "SalesQuoteRequestSubs" && theType.Name == "SalesGroup") { linkName = linkName + "AsRequestSub"; }
                    else if (propertyName == "SalesQuoteResponseMasters" && theType.Name == "SalesGroup") { linkName = linkName + "AsResponseMaster"; }
                    else if (propertyName == "SalesQuoteResponseSubs" && theType.Name == "SalesGroup") { linkName = linkName + "AsResponseSub"; }
                    else if (propertyName == "SalesOrderMasters" && theType.Name == "SalesGroup") { linkName = linkName + "AsMaster"; }
                    else if (propertyName == "SubSalesOrders" && theType.Name == "SalesGroup") { linkName = linkName + "AsSub"; }
                    else if (propertyName == "StartingCurrencies") { linkName = "Starting" + linkName; }
                    else if (propertyName == "EndingCurrencies") { linkName = "Ending" + linkName; }
                    else if (propertyName == "ConversionStartingCurrencies") { linkName = "Starting" + linkName; }
                    else if (propertyName == "ConversionEndingCurrencies") { linkName = "Ending" + linkName; }
                    else if (propertyName == "HistoricalStartingCurrencies") { linkName = "Starting" + linkName; }
                    else if (propertyName == "HistoricalEndingCurrencies") { linkName = "Ending" + linkName; }
                    else if (propertyName == "MessageAttachmentsCreated" && otherType == typeof(MessageAttachment)) { linkName = "CreatedBy" + linkName; }
                    else if (propertyName == "MessageAttachmentsUpdated" && otherType == typeof(MessageAttachment)) { linkName = "UpdatedBy" + linkName; }
                    else if (propertyName == "SentMessages" && otherType == typeof(Message)) { linkName = "SentBy" + linkName; }
                    else if (propertyName == "Shipments" && !new[] { "InventoryLocationSection", "ShipCarrier", "Vendor" }.Contains(theType.Name)) { linkName = "Master"; }
                    else if (propertyName == "Targets") { linkName = "Master"; }
                    else if (propertyName == "UserProductTypes") { linkName = "Master"; }
                    else if (propertyName == "CalendarEventProducts") { linkName = "Master"; }
                    else if (propertyName == "UserEventAttendances") { linkName = "Master"; }
                    else if (propertyName == "SalesEvents") { linkName = "Master"; }
                    else if (propertyName == "Currencies" || propertyName == "Languages") { linkName = "Master"; }
                    else if (propertyName == "ParentQuestions" && theType.Name == "Question") { linkName = "NextQuestion"; }
                    else if (propertyName == "Answers" && theType.Name == "QuestionOption") { linkName = "Option"; }
                    else if (theType.Name == "Discount" && !otherTypeName.StartsWith("Discount")) { linkName = "Master"; }
                    else if (theType.Name == "Discount" && otherTypeName == "DiscountUserRole") { linkName = "Master"; }
                    else if (theType.Name == "AttributeType" && otherTypeName == "GeneralAttribute") { linkName = "Type"; }
                    else if (theType.Name == "UserRole" && otherTypeName == "RolePermission") { linkName = "PermissionId"; noID = true; otherLinkName = "Id"; }
                    else if (theType.Name == "UserRole" && otherTypeName == "RoleUser") { linkName = "UserId"; noID = true; otherLinkName = "Id"; }
                    if (linkName == "GeneralAttribute") { linkName = "Attribute"; }
                    var namePrepped = HelpFunctions.PluralizeName(otherTypeName)
                        .Replace("EmailQueueStatus", "EmailStatus")
                        .Replace("EmailQueueType", "EmailType");
                    remPropStrings[property] = new[]
                    {
                        string.Empty, // parameter (None)
                        string.Empty,
                        string.Empty,
                        "3: 1-n's", // group by
                        // Async Versions
                        string.Empty,
                        "mock.Setup(m => m." + property.Name + ").Returns(() => Raw" + namePrepped + "?.Where(x => x.Object." + linkName + (noID ? string.Empty : "ID") + " == mock.Object." + (otherLinkName ?? "ID") + ").Select(x => x.Object).ToList() ?? new List<" + HelpFunctions.DePluralizeName(namePrepped) + ">());", // assignment
                    };
                    continue;
                }
                remPropStrings[property] = new[]
                {
                    returnType.Name + " " + HelpFunctions.LowerFirstCharacter(propertyName) + " = null", // parameter
                    "mock.Object." + propertyName + " = Raw" + HelpFunctions.PluralizeName(propertyName).Replace("EmailQueueStatus", "EmailStatus").Replace("EmailQueueType", "EmailType") + "?.Where(x => x." + theType.Name + "ID == id).ToList();", // assignment
                    "mock.Object." + propertyName + " = Raw" + HelpFunctions.PluralizeName(propertyName).Replace("EmailQueueStatus", "EmailStatus").Replace("EmailQueueType", "EmailType") + "?.Where(x => x." + theType.Name + "ID == mock.Object.ID).ToList();", // reload
                    "4: OTHER"
                };
            }
            return (remainingProperties, remPropStrings);
        }
        foreach (var theType in theTypes)
        {
            var td = new TypeDeterminer(theType);
            if (/*td.IsExcludedFromT4 ||*/ skips.Contains(theType.Name)) { continue; }
            var isFirstSet = true;
            var (_, remPropStrings) = MakeRemainingPropertyStrings(theType, td);
#>

        /// <summary>Creates a dummy <#= theType.Name #>.</summary>
        /// <returns>The new <#= theType.Name #>.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<<#= theType.Name #>>> CreateADummy<#= theType.Name #>Async(<#+ isFirstSet = true;
            if (td.IsIBase) { #><#= isFirstSet ? "" : ", " #>int id, string? key<#+ isFirstSet = false; }
            if (td.IsINameableBase) { #><#= isFirstSet ? "" : ", " #>string? name, string? desc = null<#+ isFirstSet = false; }
            if (td.IsIDisplayableBase) { #><#= isFirstSet ? "" : ", " #>int? sortOrder = null, string? displayName = null, string? translationKey = null<#+ isFirstSet = false; }
            if (td.IsISalesEventBase) { #><#= isFirstSet ? "" : ", " #>int masterID = 1, long? oldHash = null, long? newHash = null, int? oldStateID = null, int? newStateID = null, int? oldStatusID = null, int? newStatusID = null, int? oldTypeID = null, int? newTypeID = null, string? oldRecordSerialized = null, string? newRecordSerialized = null<#+ isFirstSet = false; }
            if (td.IsIHaveSeoBase) { #><#= isFirstSet ? "" : ", " #>string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null<#+ isFirstSet = false; }
            if (td.IsIHaveAParentBase) { #><#= isFirstSet ? "" : ", " #>int? parentID = null<#+ isFirstSet = false; }
            if (td.IsIHaveAContactBase && !td.IsIAmAContactRelationshipTable) { #><#= isFirstSet ? "" : ", " #>int contactID = 1<#+ isFirstSet = false; }
            if (td.IsIHaveATypeBase && !td.IsISalesCollectionBase && !td.IsIImageBase) { #><#= isFirstSet ? "" : ", " #>int typeID = 1<#+ isFirstSet = false; }
            if (td.IsIHaveAStatusBase && !td.IsISalesCollectionBase) { #><#= isFirstSet ? "" : ", " #>int statusID = 1<#+ isFirstSet = false; }
            if (td.IsIHaveAStateBase && !td.IsISalesCollectionBase) { #><#= isFirstSet ? "" : ", " #>int stateID = 1<#+ isFirstSet = false; }
            if (td.IsIHaveANullableContactBase) { #><#= isFirstSet ? "" : ", " #>int? contactID = null<#+ isFirstSet = false; }
            if (td.IsIAmADiscountFilterRelationshipTable) { #><#= isFirstSet ? "" : ", " #>int masterID = 1, int slaveID = 1<#+ isFirstSet = false; }
            if (theType.Name == "DiscountUserRole") { #><#= isFirstSet ? "" : ", " #>int masterID = 1<#+ isFirstSet = false; }
            if (td.IsIObjectNoteBase) { #><#= isFirstSet ? "" : ", " #>int masterID = 1<#+ isFirstSet = false; }
            if (td.IsIHaveJsonAttributesBase) { #><#= isFirstSet ? "" : ", " #>string? jsonAttributes = null<#+ isFirstSet = false; }
            if (td.IsIImageBase) { #><#= isFirstSet ? "" : ", " #>int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!<#+ isFirstSet = false; }
            if (td.IsIAmAStoredFileRelationshipTable) { #><#= isFirstSet ? "" : ", " #>int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null<#+ isFirstSet = false; }
            if (td.IsIAmAContactRelationshipTable) { #><#= isFirstSet ? "" : ", " #>int masterID = 1, int slaveID = 1<#+ isFirstSet = false; }
            if (td.IsISalesCollectionBase) { #><#= isFirstSet ? "" : ", " #>DateTime? dueDate = null, decimal subtotalItems = 0m, decimal subtotalShipping = 0m, decimal subtotalTaxes = 0m, decimal subtotalFees = 0m, decimal subtotalHandling = 0m, decimal subtotalDiscounts = 0m, decimal total = 0m, bool? shippingSameAsBilling = null, int? userID = null, int? accountID = null, int statusID = 1, int stateID = 1, int typeID = 1, int? billingContactID = null, int? shippingContactID = null<#+ isFirstSet = false; }
            if (td.IsISalesItemBaseTT) { #><#= isFirstSet ? "" : ", " #>decimal quantity = 1m, decimal? quantityBackOrdered = 0m, decimal? quantityPreSold = 0m, decimal unitCorePrice = 0m, decimal? unitSoldPrice = null, string? sku = null, string? unitOfMeasure = null, int? productID = null, int? userID = null, int masterID = 1<#+ isFirstSet = false; }
            if (remPropStrings.Any()) { foreach (var s in remPropStrings.Values.Where(x => x[0] != string.Empty)) { #><#= isFirstSet ? "" : ", " #><#= s[0] #><#+ isFirstSet = false; } }
            if (td.IsIBase) { #><#= isFirstSet ? "" : ", " #>bool? active = null<#+ isFirstSet = false; } #>)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<<#= theType.Name #>>();
                mock.SetupAllProperties();
<#+         if (theType.Name == "User") { #>
                mock.Setup(m => m.Roles).Returns(() => RawRoleUsers?.Where(x => x.Object.UserId == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RoleUser>());
                mock.Setup(m => m.Id).CallBase();//.Returns(() => mock.Object.ID);
                mock.Object.Id = id;
<#+         }
            if (theType.Name == "Account") { #>
                mock.Setup(m => m.AccountUserRoles).Returns(() => RawAccountUserRoles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountUserRole>());
<#+         }
            if (td.IsIBase && theType.Name != "RoleUser") { #>
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives<#= theType.Name == "SalesOrderItem" ? " && !DoInactiveSalesItems" : string.Empty #>;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
<#+         }
            if (td.IsINameableBase) { #>
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
<#+         }
            if (td.IsIDisplayableBase) { #>
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
<#+         }
            if (td.IsIHaveATypeBase && !td.IsISalesCollectionBase && !td.IsIImageBase) { #>
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
<#+         }
            if (td.IsIHaveAStatusBase && !td.IsISalesCollectionBase) { #>
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
<#+         }
            if (td.IsIHaveAStateBase && !td.IsISalesCollectionBase) { #>
                // IHaveAStateBase Properties
                mock.Object.StateID = stateID;
<#+         }
            if (td.IsIHaveAContactBase && !td.IsIAmAContactRelationshipTable) { #>
                // IHaveAContactBase Properties
                mock.Object.ContactID = contactID;
<#+         }
            if (td.IsIHaveANullableContactBase) { #>
                // IHaveANullableContactBase Properties
                mock.Object.ContactID = contactID;
<#+         }
            if (td.IsIHaveAParentBase) { #>
                // IHaveAParentBase Properties
                mock.Object.ParentID = parentID;
<#+         }
            if (td.IsIHaveSeoBase) { #>
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
<#+         }
            if (td.IsIAmADiscountFilterRelationshipTable || theType.Name == "DiscountUserRole") { #>
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.MasterID = masterID;
<#+         }
            if (td.IsIAmADiscountFilterRelationshipTable) { #>
                // IAmADiscountFilterRelationshipTable Properties
                mock.Object.SlaveID = slaveID;
<#+         }
            if (td.IsIObjectNoteBase) { #>
                // IObjectNoteBase Properties
                mock.Object.MasterID = masterID;
<#+         }
            if (td.IsIImageBase) { #>
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
<#+         }
            if (td.IsIAmAContactRelationshipTable) { #>
                // IAmAContactRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
<#+         }
            if (td.IsIAmAStoredFileRelationshipTable) { #>
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
<#+         }
            if (td.IsISalesCollectionBase) { #>
                // ISalesCollectionBase Properties
                mock.Object.DueDate = dueDate;
                mock.Object.SubtotalItems = subtotalItems;
                mock.Object.SubtotalShipping = subtotalShipping;
                mock.Object.SubtotalTaxes = subtotalTaxes;
                mock.Object.SubtotalFees = subtotalFees;
                mock.Object.SubtotalHandling = subtotalHandling;
                mock.Object.SubtotalDiscounts = subtotalDiscounts;
                mock.Object.Total = total;
                mock.Object.ShippingSameAsBilling = shippingSameAsBilling;
                mock.Object.UserID = userID;
                mock.Object.AccountID = accountID;
                mock.Object.StatusID = statusID;
                mock.Object.StateID = stateID;
                mock.Object.TypeID = typeID;
                mock.Object.BillingContactID = billingContactID;
                mock.Object.ShippingContactID = shippingContactID;
<#+         }
            if (td.IsISalesItemBaseTT) { #>
                // ISalesItemBase Properties
                mock.Object.Quantity = quantity;
                mock.Object.QuantityBackOrdered = quantityBackOrdered;
                mock.Object.QuantityPreSold = quantityPreSold;
                mock.Object.UnitCorePrice = unitCorePrice;
                mock.Object.UnitSoldPrice = unitSoldPrice;
                mock.Object.Sku = sku;
                mock.Object.UnitOfMeasure = unitOfMeasure;
                mock.Object.ProductID = productID;
                mock.Object.UserID = userID;
                mock.Object.MasterID = masterID;
<#+         }
            if (td.IsISalesEventBase) { #>
                // ISalesEventBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.OldHash = oldHash;
                mock.Object.NewHash = newHash;
                mock.Object.OldStateID = oldStateID;
                mock.Object.NewStateID = newStateID;
                mock.Object.OldStatusID = oldStatusID;
                mock.Object.NewStatusID = newStatusID;
                mock.Object.OldTypeID = oldTypeID;
                mock.Object.NewTypeID = newTypeID;
                mock.Object.OldRecordSerialized = oldRecordSerialized;
                mock.Object.NewRecordSerialized = newRecordSerialized;
<#+         } #>
                // <#= theType.Name #> Properties
<#+         foreach (KeyValuePair<PropertyInfo, string[]> p in remPropStrings.Where(x => remPropStrings[x.Key][3] == "1: Simples"))
            { #>
                <#= p.Value[1] #>
<#+         }
            foreach (KeyValuePair<PropertyInfo, string[]> p in remPropStrings.Where(x => remPropStrings[x.Key][3] == "4: OTHER"))
            { #>
                INVALID! FIX ME!!! <#= p.Value[1] #> 1
<#+         } #>
                // Dynamic Linking
<#+         if (td.IsIHaveATypeBase && !td.IsISalesCollectionBase && !td.IsIImageBase) { #>
                // IHaveATypeBase Properties
<#+             if (td.IsISalesItemTargetBase) { #>
                mock.Setup(m => m.Type).Returns(() => RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
<#+             } else {
                    var masterName = theType.Name.Replace("EmailQueue", "Email").Replace("GeneralAttribute", "Attribute");#>
                mock.Setup(m => m.Type).Returns(() => Raw<#= masterName #>Types?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
<#+             }
            }
            if (td.IsIHaveAStatusBase && !td.IsISalesCollectionBase) {
                var masterName = theType.Name.Replace("EmailQueue", "Email");#>
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => Raw<#= masterName #>Statuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
<#+         }
            if (td.IsIHaveAStateBase && !td.IsISalesCollectionBase) { #>
                // IHaveAStateBase Properties
                mock.Setup(m => m.State).Returns(() => Raw<#= theType.Name #>States?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
<#+         }
            if (td.IsIHaveAContactBase && !td.IsIAmAContactRelationshipTable) { #>
                // IHaveAContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
<#+         }
            if (td.IsIHaveANullableContactBase) { #>
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => RawContacts == null || mock.Object.ContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
<#+         }
            if (td.IsIHaveAParentBase) { #>
                // IHaveAParentBase Properties
                mock.Setup(m => m.Parent).Returns(() => Raw<#= HelpFunctions.PluralizeName(theType) #> == null || mock.Object.ParentID == null ? null : Raw<#= HelpFunctions.PluralizeName(theType) #>.FirstOrDefault(x => x.Object.ID == mock.Object.ParentID)?.Object);
                mock.Setup(m => m.Children).Returns(() => Raw<#= HelpFunctions.PluralizeName(theType) #>?.Where(x => x.Object.ParentID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<<#= theType.Name #>>());
<#+         }
            if (td.IsIHaveImagesBase) { #>
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => Raw<#= theType.Name #>Images?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<<#= theType.Name #>Image>());
<#+         }
            if (td.IsIHaveStoredFilesBase) { #>
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => Raw<#= theType.Name #>Files?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<<#= theType.Name #>File>());
<#+         }
            if (td.IsIHaveNotesBase) { #>
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.<#= theType.Name #>ID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
<#+         }
            if (td.IsIAmADiscountFilterRelationshipTable || theType.Name == "DiscountUserRole") { #>
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
<#+         }
            if (td.IsIAmADiscountFilterRelationshipTable) { #>
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => Raw<#= HelpFunctions.PluralizeName(td.RelationshipSecondaryType.Name) #>?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
<#+         }
            if (td.IsIObjectNoteBase) { #>
                // IObjectNoteBase Properties
                mock.Setup(m => m.Master).Returns(() => Raw<#= HelpFunctions.PluralizeName(theType) #>?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
<#+         }
            if (td.IsIImageBase) {
                var masterName = HelpFunctions.PluralizeName(theType.Name.Replace("Image", string.Empty).Replace("New", string.Empty));
                var slaveName = HelpFunctions.PluralizeName(theType.Name.Replace("New", string.Empty) + "Type"); #>
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => Raw<#= masterName #>?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => Raw<#= slaveName #>?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
<#+         }
            if (td.IsIAmAContactRelationshipTable) { #>
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => Raw<#= theType.Name.Replace("Contact", string.Empty) #>s?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
<#+         }
            if (td.IsIAmAStoredFileRelationshipTable) { var masterName = HelpFunctions.PluralizeName(theType.Name.Replace("File", string.Empty).Replace("Attachment", string.Empty)); #>
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => Raw<#= masterName #>?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
<#+         }
            if (td.IsISalesCollectionBaseT) { #>
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => Raw<#= theType.Name #>Statuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => Raw<#= theType.Name #>States?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => Raw<#= theType.Name #>Types?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => Raw<#= theType.Name #>Items?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<<#= theType.Name #>Item>());
                mock.Setup(m => m.Discounts).Returns(() => RawApplied<#= theType.Name #>Discounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Applied<#= theType.Name #>Discount>());
                mock.Setup(m => m.Contacts).Returns(() => Raw<#= theType.Name #>Contacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<<#= theType.Name #>Contact>());
<#+         }
            if (td.IsISalesCollectionBase) { #>
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => RawAccounts == null || mock.Object.AccountID == null ? null : RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => RawContacts == null || mock.Object.BillingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => RawContacts == null || mock.Object.ShippingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
<#+         }
            if (td.IsISalesItemBaseTT) { #>
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => Raw<#= HelpFunctions.PluralizeName(theType).Replace("Item", "") #>?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => RawProducts == null || mock.Object.ProductID == null ? null : RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => RawApplied<#= theType.Name #>Discounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Applied<#= theType.Name #>Discount>());
                mock.Setup(m => m.Targets).Returns(() => Raw<#= theType.Name #>Targets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<<#= theType.Name #>Target>());
<#+         }
            if (td.IsISalesEventBase) { #>
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => Raw<#= HelpFunctions.PluralizeName(theType).Replace("Event", "") #>?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
<#+         } #>
                // <#= theType.Name #>'s Related Objects
<#+         foreach (KeyValuePair<PropertyInfo, string[]> p in remPropStrings.Where(x => remPropStrings[x.Key][3] == "2: 1-(0|1)'s"))
            { #>
                <#= p.Value[5] #>
<#+         } #>
                // <#= theType.Name #>'s Associated Objects
<#+         foreach (KeyValuePair<PropertyInfo, string[]> p in remPropStrings.Where(x => remPropStrings[x.Key][3] == "3: 1-n's"))
            { #>
                <#= p.Value[5] #>
<#+         }
            foreach (KeyValuePair<PropertyInfo, string[]> p in remPropStrings.Where(x => remPropStrings[x.Key][3] == "4: OTHER"))
            { #>
                INVALID! FIX ME!!! <#= p.Value[2] #> 2
<#+         } #>
                return mock;
            });
        }
<#+     } #>
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryFor<#= schema #>(MockingSetup mockingSetup)
        {
<#+     foreach (var theType in theTypes) {
            var td = new TypeDeterminer(theType);
            if (/*td.IsExcludedFromT4 ||*/ skips.Contains(theType.Name)) { continue; } #>
            Func<<#= theType.Name #>> mockFunc<#= theType.Name #> = () =>
            {
                var mock = new Mock<<#= theType.Name #>>();
                mock.SetupAllProperties();
<#+         if (theType.Name != "Permission" && theType.Name != "RolePermission" && theType.Name != "RoleUser" && theType.Name != "UserClaim" && theType.Name != "UserLogin" && theType.Name != "UserRole") { #>
                mock.Setup(m => m.ToHashableString()).CallBase();
<#+         } #>
<#+         if (theType.Name == "User") { #>
                mock.Setup(m => m.Roles).Returns(() => mockingSetup.RawRoleUsers?.Where(x => x.Object.UserId == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RoleUser>());
                mock.Setup(m => m.Id).CallBase();//.Returns(() => mock.Object.ID);
<#+         } #>
<#+         if (theType.Name == "Account") { #>
                mock.Setup(m => m.AccountUserRoles).Returns(() => mockingSetup.RawAccountUserRoles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountUserRole>());
<#+         } #>
<#+         if (theType.Name == "CartItemTarget") { /* TODO: Make this dynamic for ICloneable implementers */ #>
                mock.Setup(m => m.Clone()).CallBase();
<#+         } #>
                // <#= theType.Name #> Properties
                // Dynamic Linking
<#+         if (td.IsIHaveATypeBase && !td.IsISalesCollectionBase && !td.IsIImageBase) { #>
                // IHaveATypeBase Properties
<#+             if (td.IsISalesItemTargetBase) { #>
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
<#+             } else {
                    var masterName = theType.Name.Replace("EmailQueue", "Email").Replace("GeneralAttribute", "Attribute");#>
                mock.Setup(m => m.Type).Returns(() => mockingSetup.Raw<#= masterName #>Types?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
<#+             }
            }
            if (td.IsIHaveAStatusBase && !td.IsISalesCollectionBase) {
                var masterName = theType.Name.Replace("EmailQueue", "Email");#>
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.Raw<#= masterName #>Statuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
<#+         }
            if (td.IsIHaveAStateBase && !td.IsISalesCollectionBase) { #>
                // IHaveAStateBase Properties
                mock.Setup(m => m.State).Returns(() => mockingSetup.Raw<#= theType.Name #>States?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
<#+         }
            if (td.IsIHaveAContactBase && !td.IsIAmAContactRelationshipTable) { #>
                // IHaveAContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
<#+         }
            if (td.IsIHaveANullableContactBase) { #>
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
<#+         }
            if (td.IsIHaveAParentBase) { #>
                // IHaveAParentBase Properties
                mock.Setup(m => m.Parent).Returns(() => mockingSetup.Raw<#= HelpFunctions.PluralizeName(theType) #> == null || mock.Object.ParentID == null ? null : mockingSetup.Raw<#= HelpFunctions.PluralizeName(theType) #>.FirstOrDefault(x => x.Object.ID == mock.Object.ParentID)?.Object);
                mock.Setup(m => m.Children).Returns(() => mockingSetup.Raw<#= HelpFunctions.PluralizeName(theType) #>?.Where(x => x.Object.ParentID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<<#= theType.Name #>>());
<#+         }
            if (td.IsIHaveImagesBase) { #>
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.Raw<#= theType.Name #>Images?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<<#= theType.Name #>Image>());
<#+         }
            if (td.IsIHaveStoredFilesBase) { #>
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => mockingSetup.Raw<#= theType.Name #>Files?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<<#= theType.Name #>File>());
<#+         }
            if (td.IsIHaveNotesBase) { #>
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.<#= theType.Name #>ID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
<#+         }
            if (td.IsIAmADiscountFilterRelationshipTable || theType.Name == "DiscountUserRole") { #>
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDiscounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
<#+         }
            if (td.IsIAmADiscountFilterRelationshipTable) { #>
                // IAmADiscountFilterRelationshipTable Properties
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.Raw<#= HelpFunctions.PluralizeName(td.RelationshipSecondaryType.Name) #>?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
<#+         }
            if (td.IsIObjectNoteBase) { #>
                // IObjectNoteBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.Raw<#= HelpFunctions.PluralizeName(theType) #>?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
<#+         }
            if (td.IsIImageBase) {
                var masterName = HelpFunctions.PluralizeName(theType.Name.Replace("Image", string.Empty).Replace("New", string.Empty));
                var slaveName = HelpFunctions.PluralizeName(theType.Name.Replace("New", string.Empty) + "Type"); #>
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.Raw<#= masterName #>?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.Raw<#= slaveName #>?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
<#+         }
            if (td.IsIAmAContactRelationshipTable) { #>
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.Raw<#= theType.Name.Replace("Contact", string.Empty) #>s?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
<#+         }
            if (td.IsIAmAStoredFileRelationshipTable) { var masterName = HelpFunctions.PluralizeName(theType.Name.Replace("File", string.Empty).Replace("Attachment", string.Empty)); #>
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.Raw<#= masterName #>?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
<#+         }
            if (td.IsISalesCollectionBaseT) { #>
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.Raw<#= theType.Name #>Statuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => mockingSetup.Raw<#= theType.Name #>States?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.Raw<#= theType.Name #>Types?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => mockingSetup.Raw<#= theType.Name #>Items?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<<#= theType.Name #>Item>());
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawApplied<#= theType.Name #>Discounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Applied<#= theType.Name #>Discount>());
                mock.Setup(m => m.Contacts).Returns(() => mockingSetup.Raw<#= theType.Name #>Contacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<<#= theType.Name #>Contact>());
<#+         }
            if (td.IsISalesCollectionBase) { #>
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => mockingSetup.RawAccounts == null || mock.Object.AccountID == null ? null : mockingSetup.RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.BillingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ShippingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
<#+         }
            if (td.IsISalesItemBaseTT) { #>
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.Raw<#= HelpFunctions.PluralizeName(theType).Replace("Item", "") #>?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => mockingSetup.RawProducts == null || mock.Object.ProductID == null ? null : mockingSetup.RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawApplied<#= theType.Name #>Discounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Applied<#= theType.Name #>Discount>());
                mock.Setup(m => m.Targets).Returns(() => mockingSetup.Raw<#= theType.Name #>Targets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<<#= theType.Name #>Target>());
<#+         }
            if (td.IsISalesEventBase) { #>
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.Raw<#= HelpFunctions.PluralizeName(theType).Replace("Event", "") #>?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
<#+         } #>
<#+         var (_, remPropStrings) = MakeRemainingPropertyStrings(theType, td);
            foreach (KeyValuePair<PropertyInfo, string[]> p in remPropStrings.Where(x => remPropStrings[x.Key][3] == "2: 1-(0|1)'s"))
            { #>
                <#= p.Value[5].Replace(" => Raw", " => mockingSetup.Raw") #>
<#+         } #>
                // <#= theType.Name #>'s Associated Objects
<#+         foreach (KeyValuePair<PropertyInfo, string[]> p in remPropStrings.Where(x => remPropStrings[x.Key][3] == "3: 1-n's"))
            { #>
                <#= p.Value[5].Replace(" => Raw", " => mockingSetup.Raw") #>
<#+         }
            foreach (KeyValuePair<PropertyInfo, string[]> p in remPropStrings.Where(x => remPropStrings[x.Key][3] == "4: OTHER"))
            { #>
                INVALID! FIX ME!!! <#= p.Value[2] #> 3
<#+         } #>
                // <#= theType.Name #>'s Related Objects
                return mock.Object;
            };
            For<I<#= theType.Name #>>().Use(() => mockFunc<#= theType.Name #>());
            For<<#= theType.Name #>>().Use(() => mockFunc<#= theType.Name #>());
<#+     } #>
        }
    }
}
<#+ } // End Function GenerateMockingSetupFile #>