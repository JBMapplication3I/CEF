// <autogenerated>
// <copyright file="Media.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Media section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoMedia { private get; set; }

        // Enable the tables specifically on run
        public bool DoStoredFileTable { private get; set; }

        // Dirty Checking
        public bool StoredFileDirty { private get; set; }

        // Sets
        public Mock<DbSet<StoredFile>>? StoredFiles { get; private set; }

        // Raw Data
        public List<Mock<StoredFile>>? RawStoredFiles { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksMediaAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoMedia || (DoStoredFileTable && (!dirtyOnly || StoredFileDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawStoredFiles == null) { throw new InvalidOperationException("Raw StoredFiles was null"); }
                    await InitializeMockSetFromListAsync(StoredFiles, RawStoredFiles).ConfigureAwait(false);
                    context.Setup(m => m.StoredFiles).Returns(() => StoredFiles?.Object!);
                    context.Setup(m => m.Set<StoredFile>()).Returns(() => StoredFiles?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetStoredFilesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<StoredFile>> data)
        {
            if (!DoAll && !DoMedia && !DoStoredFileTable) { return; }
            StoredFiles ??= new Mock<DbSet<StoredFile>>();
            await InitializeMockSetFromListAsync(StoredFiles, data).ConfigureAwait(false);
            context.Setup(m => m.StoredFiles).Returns(() => StoredFiles.Object);
            context.Setup(m => m.Set<StoredFile>()).Returns(() => StoredFiles.Object);
            TableRecordCounts[typeof(StoredFile)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(StoredFile)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(StoredFile)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(StoredFile)] = data[0].Object.Name;
            }
        }

        /// <summary>Creates a dummy StoredFile.</summary>
        /// <returns>The new StoredFile.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<StoredFile>> CreateADummyStoredFileAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, string author = null!, byte[] bytes = null!, string copyright = null!, string displayName = null!, string fileFormat = null!, string fileName = null!, bool isStoredInDB = false, string seoTitle = null!, int? sortOrder = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<StoredFile>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // StoredFile Properties
                mock.Object.Author = author;
                mock.Object.Bytes = bytes;
                mock.Object.Copyright = copyright;
                mock.Object.DisplayName = displayName;
                mock.Object.FileFormat = fileFormat;
                mock.Object.FileName = fileName;
                mock.Object.IsStoredInDB = isStoredInDB;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.SortOrder = sortOrder;
                // Dynamic Linking
                // StoredFile's Related Objects
                // StoredFile's Associated Objects
                mock.Setup(m => m.AccountFiles).Returns(() => RawAccountFiles?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountFile>());
                mock.Setup(m => m.CategoryFiles).Returns(() => RawCategoryFiles?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CategoryFile>());
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForMedia(MockingSetup mockingSetup)
        {
            Func<StoredFile> mockFuncStoredFile = () =>
            {
                var mock = new Mock<StoredFile>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // StoredFile Properties
                // Dynamic Linking
                // StoredFile's Associated Objects
                mock.Setup(m => m.AccountFiles).Returns(() => mockingSetup.RawAccountFiles?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountFile>());
                mock.Setup(m => m.CategoryFiles).Returns(() => mockingSetup.RawCategoryFiles?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CategoryFile>());
                // StoredFile's Related Objects
                return mock.Object;
            };
            For<IStoredFile>().Use(() => mockFuncStoredFile());
            For<StoredFile>().Use(() => mockFuncStoredFile());
        }
    }
}
