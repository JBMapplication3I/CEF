// <autogenerated>
// <copyright file="Globalization.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Globalization section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoGlobalization { private get; set; }

        // Enable the tables specifically on run
        public bool DoLanguageTable { private get; set; }
        public bool DoLanguageImageTable { private get; set; }
        public bool DoLanguageImageTypeTable { private get; set; }
        public bool DoUiKeyTable { private get; set; }
        public bool DoUiTranslationTable { private get; set; }

        // Dirty Checking
        public bool LanguageDirty { private get; set; }
        public bool LanguageImageDirty { private get; set; }
        public bool LanguageImageTypeDirty { private get; set; }
        public bool UiKeyDirty { private get; set; }
        public bool UiTranslationDirty { private get; set; }

        // Sets
        public Mock<DbSet<Language>>? Languages { get; private set; }
        public Mock<DbSet<LanguageImage>>? LanguageImages { get; private set; }
        public Mock<DbSet<LanguageImageType>>? LanguageImageTypes { get; private set; }
        public Mock<DbSet<UiKey>>? UiKeys { get; private set; }
        public Mock<DbSet<UiTranslation>>? UiTranslations { get; private set; }

        // Raw Data
        public List<Mock<Language>>? RawLanguages { get; private set; }
        public List<Mock<LanguageImage>>? RawLanguageImages { get; private set; }
        public List<Mock<LanguageImageType>>? RawLanguageImageTypes { get; private set; }
        public List<Mock<UiKey>>? RawUiKeys { get; private set; }
        public List<Mock<UiTranslation>>? RawUiTranslations { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksGlobalizationAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoGlobalization || (DoLanguageTable && (!dirtyOnly || LanguageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawLanguages == null) { throw new InvalidOperationException("Raw Languages was null"); }
                    await InitializeMockSetFromListAsync(Languages, RawLanguages).ConfigureAwait(false);
                    context.Setup(m => m.Languages).Returns(() => Languages?.Object!);
                    context.Setup(m => m.Set<Language>()).Returns(() => Languages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGlobalization || (DoLanguageImageTable && (!dirtyOnly || LanguageImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawLanguageImages == null) { throw new InvalidOperationException("Raw LanguageImages was null"); }
                    await InitializeMockSetFromListAsync(LanguageImages, RawLanguageImages).ConfigureAwait(false);
                    context.Setup(m => m.LanguageImages).Returns(() => LanguageImages?.Object!);
                    context.Setup(m => m.Set<LanguageImage>()).Returns(() => LanguageImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGlobalization || (DoLanguageImageTypeTable && (!dirtyOnly || LanguageImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawLanguageImageTypes == null) { throw new InvalidOperationException("Raw LanguageImageTypes was null"); }
                    await InitializeMockSetFromListAsync(LanguageImageTypes, RawLanguageImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.LanguageImageTypes).Returns(() => LanguageImageTypes?.Object!);
                    context.Setup(m => m.Set<LanguageImageType>()).Returns(() => LanguageImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGlobalization || (DoUiKeyTable && (!dirtyOnly || UiKeyDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUiKeys == null) { throw new InvalidOperationException("Raw UiKeys was null"); }
                    await InitializeMockSetFromListAsync(UiKeys, RawUiKeys).ConfigureAwait(false);
                    context.Setup(m => m.UiKeys).Returns(() => UiKeys?.Object!);
                    context.Setup(m => m.Set<UiKey>()).Returns(() => UiKeys?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGlobalization || (DoUiTranslationTable && (!dirtyOnly || UiTranslationDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUiTranslations == null) { throw new InvalidOperationException("Raw UiTranslations was null"); }
                    await InitializeMockSetFromListAsync(UiTranslations, RawUiTranslations).ConfigureAwait(false);
                    context.Setup(m => m.UiTranslations).Returns(() => UiTranslations?.Object!);
                    context.Setup(m => m.Set<UiTranslation>()).Returns(() => UiTranslations?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetLanguagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Language>> data)
        {
            if (!DoAll && !DoGlobalization && !DoLanguageTable) { return; }
            Languages ??= new Mock<DbSet<Language>>();
            await InitializeMockSetFromListAsync(Languages, data).ConfigureAwait(false);
            context.Setup(m => m.Languages).Returns(() => Languages.Object);
            context.Setup(m => m.Set<Language>()).Returns(() => Languages.Object);
            TableRecordCounts[typeof(Language)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Language)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Language)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetLanguageImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<LanguageImage>> data)
        {
            if (!DoAll && !DoGlobalization && !DoLanguageImageTable) { return; }
            LanguageImages ??= new Mock<DbSet<LanguageImage>>();
            await InitializeMockSetFromListAsync(LanguageImages, data).ConfigureAwait(false);
            context.Setup(m => m.LanguageImages).Returns(() => LanguageImages.Object);
            context.Setup(m => m.Set<LanguageImage>()).Returns(() => LanguageImages.Object);
            TableRecordCounts[typeof(LanguageImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(LanguageImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(LanguageImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(LanguageImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetLanguageImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<LanguageImageType>> data)
        {
            if (!DoAll && !DoGlobalization && !DoLanguageImageTypeTable) { return; }
            LanguageImageTypes ??= new Mock<DbSet<LanguageImageType>>();
            await InitializeMockSetFromListAsync(LanguageImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.LanguageImageTypes).Returns(() => LanguageImageTypes.Object);
            context.Setup(m => m.Set<LanguageImageType>()).Returns(() => LanguageImageTypes.Object);
            TableRecordCounts[typeof(LanguageImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(LanguageImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(LanguageImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(LanguageImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(LanguageImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUiKeysAsync(Mock<IClarityEcommerceEntities> context, List<Mock<UiKey>> data)
        {
            if (!DoAll && !DoGlobalization && !DoUiKeyTable) { return; }
            UiKeys ??= new Mock<DbSet<UiKey>>();
            await InitializeMockSetFromListAsync(UiKeys, data).ConfigureAwait(false);
            context.Setup(m => m.UiKeys).Returns(() => UiKeys.Object);
            context.Setup(m => m.Set<UiKey>()).Returns(() => UiKeys.Object);
            TableRecordCounts[typeof(UiKey)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(UiKey)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(UiKey)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUiTranslationsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<UiTranslation>> data)
        {
            if (!DoAll && !DoGlobalization && !DoUiTranslationTable) { return; }
            UiTranslations ??= new Mock<DbSet<UiTranslation>>();
            await InitializeMockSetFromListAsync(UiTranslations, data).ConfigureAwait(false);
            context.Setup(m => m.UiTranslations).Returns(() => UiTranslations.Object);
            context.Setup(m => m.Set<UiTranslation>()).Returns(() => UiTranslations.Object);
            TableRecordCounts[typeof(UiTranslation)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(UiTranslation)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(UiTranslation)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy Language.</summary>
        /// <returns>The new Language.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Language>> CreateADummyLanguageAsync(int id, string? key, string? jsonAttributes = null, string iSO639_1_2002 = null!, string iSO639_2_1998 = null!, string iSO639_3_2007 = null!, string iSO639_5_2008 = null!, string locale = null!, string unicodeName = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Language>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // Language Properties
                mock.Object.ISO639_1_2002 = iSO639_1_2002;
                mock.Object.ISO639_2_1998 = iSO639_2_1998;
                mock.Object.ISO639_3_2007 = iSO639_3_2007;
                mock.Object.ISO639_5_2008 = iSO639_5_2008;
                mock.Object.Locale = locale;
                mock.Object.UnicodeName = unicodeName;
                // Dynamic Linking
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawLanguageImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<LanguageImage>());
                // Language's Related Objects
                // Language's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy LanguageImage.</summary>
        /// <returns>The new LanguageImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<LanguageImage>> CreateADummyLanguageImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<LanguageImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // LanguageImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawLanguageImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // LanguageImage's Related Objects
                // LanguageImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy LanguageImageType.</summary>
        /// <returns>The new LanguageImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<LanguageImageType>> CreateADummyLanguageImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<LanguageImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // LanguageImageType Properties
                // Dynamic Linking
                // LanguageImageType's Related Objects
                // LanguageImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy UiKey.</summary>
        /// <returns>The new UiKey.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<UiKey>> CreateADummyUiKeyAsync(int id, string? key, string? jsonAttributes = null, string type = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<UiKey>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // UiKey Properties
                mock.Object.Type = type;
                // Dynamic Linking
                // UiKey's Related Objects
                // UiKey's Associated Objects
                mock.Setup(m => m.UiTranslations).Returns(() => RawUiTranslations?.Where(x => x.Object.UiKeyID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<UiTranslation>());
                return mock;
            });
        }

        /// <summary>Creates a dummy UiTranslation.</summary>
        /// <returns>The new UiTranslation.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<UiTranslation>> CreateADummyUiTranslationAsync(int id, string? key, string? jsonAttributes = null, string locale = null!, int uiKeyID = 1, string value = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<UiTranslation>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // UiTranslation Properties
                mock.Object.Locale = locale;
                mock.Object.UiKeyID = uiKeyID;
                mock.Object.Value = value;
                // Dynamic Linking
                // UiTranslation's Related Objects
                mock.Setup(m => m.UiKey).Returns(() => RawUiKeys?.FirstOrDefault(x => x.Object.ID == mock.Object.UiKeyID)?.Object);
                // UiTranslation's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForGlobalization(MockingSetup mockingSetup)
        {
            Func<Language> mockFuncLanguage = () =>
            {
                var mock = new Mock<Language>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Language Properties
                // Dynamic Linking
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawLanguageImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<LanguageImage>());
                // Language's Associated Objects
                // Language's Related Objects
                return mock.Object;
            };
            For<ILanguage>().Use(() => mockFuncLanguage());
            For<Language>().Use(() => mockFuncLanguage());
            Func<LanguageImage> mockFuncLanguageImage = () =>
            {
                var mock = new Mock<LanguageImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // LanguageImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawLanguageImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // LanguageImage's Associated Objects
                // LanguageImage's Related Objects
                return mock.Object;
            };
            For<ILanguageImage>().Use(() => mockFuncLanguageImage());
            For<LanguageImage>().Use(() => mockFuncLanguageImage());
            Func<LanguageImageType> mockFuncLanguageImageType = () =>
            {
                var mock = new Mock<LanguageImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // LanguageImageType Properties
                // Dynamic Linking
                // LanguageImageType's Associated Objects
                // LanguageImageType's Related Objects
                return mock.Object;
            };
            For<ILanguageImageType>().Use(() => mockFuncLanguageImageType());
            For<LanguageImageType>().Use(() => mockFuncLanguageImageType());
            Func<UiKey> mockFuncUiKey = () =>
            {
                var mock = new Mock<UiKey>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // UiKey Properties
                // Dynamic Linking
                // UiKey's Associated Objects
                mock.Setup(m => m.UiTranslations).Returns(() => mockingSetup.RawUiTranslations?.Where(x => x.Object.UiKeyID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<UiTranslation>());
                // UiKey's Related Objects
                return mock.Object;
            };
            For<IUiKey>().Use(() => mockFuncUiKey());
            For<UiKey>().Use(() => mockFuncUiKey());
            Func<UiTranslation> mockFuncUiTranslation = () =>
            {
                var mock = new Mock<UiTranslation>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // UiTranslation Properties
                // Dynamic Linking
                mock.Setup(m => m.UiKey).Returns(() => mockingSetup.RawUiKeys?.FirstOrDefault(x => x.Object.ID == mock.Object.UiKeyID)?.Object);
                // UiTranslation's Associated Objects
                // UiTranslation's Related Objects
                return mock.Object;
            };
            For<IUiTranslation>().Use(() => mockFuncUiTranslation());
            For<UiTranslation>().Use(() => mockFuncUiTranslation());
        }
    }
}
