// <autogenerated>
// <copyright file="Shopping.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Shopping section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoShopping { private get; set; }

        // Enable the tables specifically on run
        public bool DoCartTable { private get; set; }
        public bool DoCartContactTable { private get; set; }
        public bool DoCartEventTable { private get; set; }
        public bool DoCartEventTypeTable { private get; set; }
        public bool DoCartFileTable { private get; set; }
        public bool DoCartItemTable { private get; set; }
        public bool DoCartItemTargetTable { private get; set; }
        public bool DoCartStateTable { private get; set; }
        public bool DoCartStatusTable { private get; set; }
        public bool DoCartTypeTable { private get; set; }

        // Dirty Checking
        public bool CartDirty { private get; set; }
        public bool CartContactDirty { private get; set; }
        public bool CartEventDirty { private get; set; }
        public bool CartEventTypeDirty { private get; set; }
        public bool CartFileDirty { private get; set; }
        public bool CartItemDirty { private get; set; }
        public bool CartItemTargetDirty { private get; set; }
        public bool CartStateDirty { private get; set; }
        public bool CartStatusDirty { private get; set; }
        public bool CartTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<Cart>>? Carts { get; private set; }
        public Mock<DbSet<CartContact>>? CartContacts { get; private set; }
        public Mock<DbSet<CartEvent>>? CartEvents { get; private set; }
        public Mock<DbSet<CartEventType>>? CartEventTypes { get; private set; }
        public Mock<DbSet<CartFile>>? CartFiles { get; private set; }
        public Mock<DbSet<CartItem>>? CartItems { get; private set; }
        public Mock<DbSet<CartItemTarget>>? CartItemTargets { get; private set; }
        public Mock<DbSet<CartState>>? CartStates { get; private set; }
        public Mock<DbSet<CartStatus>>? CartStatuses { get; private set; }
        public Mock<DbSet<CartType>>? CartTypes { get; private set; }

        // Raw Data
        public List<Mock<Cart>>? RawCarts { get; private set; }
        public List<Mock<CartContact>>? RawCartContacts { get; private set; }
        public List<Mock<CartEvent>>? RawCartEvents { get; private set; }
        public List<Mock<CartEventType>>? RawCartEventTypes { get; private set; }
        public List<Mock<CartFile>>? RawCartFiles { get; private set; }
        public List<Mock<CartItem>>? RawCartItems { get; private set; }
        public List<Mock<CartItemTarget>>? RawCartItemTargets { get; private set; }
        public List<Mock<CartState>>? RawCartStates { get; private set; }
        public List<Mock<CartStatus>>? RawCartStatuses { get; private set; }
        public List<Mock<CartType>>? RawCartTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksShoppingAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoShopping || (DoCartTable && (!dirtyOnly || CartDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCarts == null) { throw new InvalidOperationException("Raw Carts was null"); }
                    await InitializeMockSetFromListAsync(Carts, RawCarts).ConfigureAwait(false);
                    context.Setup(m => m.Carts).Returns(() => Carts?.Object!);
                    context.Setup(m => m.Set<Cart>()).Returns(() => Carts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShopping || (DoCartContactTable && (!dirtyOnly || CartContactDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCartContacts == null) { throw new InvalidOperationException("Raw CartContacts was null"); }
                    await InitializeMockSetFromListAsync(CartContacts, RawCartContacts).ConfigureAwait(false);
                    context.Setup(m => m.CartContacts).Returns(() => CartContacts?.Object!);
                    context.Setup(m => m.Set<CartContact>()).Returns(() => CartContacts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShopping || (DoCartEventTable && (!dirtyOnly || CartEventDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCartEvents == null) { throw new InvalidOperationException("Raw CartEvents was null"); }
                    await InitializeMockSetFromListAsync(CartEvents, RawCartEvents).ConfigureAwait(false);
                    context.Setup(m => m.CartEvents).Returns(() => CartEvents?.Object!);
                    context.Setup(m => m.Set<CartEvent>()).Returns(() => CartEvents?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShopping || (DoCartEventTypeTable && (!dirtyOnly || CartEventTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCartEventTypes == null) { throw new InvalidOperationException("Raw CartEventTypes was null"); }
                    await InitializeMockSetFromListAsync(CartEventTypes, RawCartEventTypes).ConfigureAwait(false);
                    context.Setup(m => m.CartEventTypes).Returns(() => CartEventTypes?.Object!);
                    context.Setup(m => m.Set<CartEventType>()).Returns(() => CartEventTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShopping || (DoCartFileTable && (!dirtyOnly || CartFileDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCartFiles == null) { throw new InvalidOperationException("Raw CartFiles was null"); }
                    await InitializeMockSetFromListAsync(CartFiles, RawCartFiles).ConfigureAwait(false);
                    context.Setup(m => m.CartFiles).Returns(() => CartFiles?.Object!);
                    context.Setup(m => m.Set<CartFile>()).Returns(() => CartFiles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShopping || (DoCartItemTable && (!dirtyOnly || CartItemDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCartItems == null) { throw new InvalidOperationException("Raw CartItems was null"); }
                    await InitializeMockSetFromListAsync(CartItems, RawCartItems).ConfigureAwait(false);
                    context.Setup(m => m.CartItems).Returns(() => CartItems?.Object!);
                    context.Setup(m => m.Set<CartItem>()).Returns(() => CartItems?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShopping || (DoCartItemTargetTable && (!dirtyOnly || CartItemTargetDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCartItemTargets == null) { throw new InvalidOperationException("Raw CartItemTargets was null"); }
                    await InitializeMockSetFromListAsync(CartItemTargets, RawCartItemTargets).ConfigureAwait(false);
                    context.Setup(m => m.CartItemTargets).Returns(() => CartItemTargets?.Object!);
                    context.Setup(m => m.Set<CartItemTarget>()).Returns(() => CartItemTargets?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShopping || (DoCartStateTable && (!dirtyOnly || CartStateDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCartStates == null) { throw new InvalidOperationException("Raw CartStates was null"); }
                    await InitializeMockSetFromListAsync(CartStates, RawCartStates).ConfigureAwait(false);
                    context.Setup(m => m.CartStates).Returns(() => CartStates?.Object!);
                    context.Setup(m => m.Set<CartState>()).Returns(() => CartStates?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShopping || (DoCartStatusTable && (!dirtyOnly || CartStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCartStatuses == null) { throw new InvalidOperationException("Raw CartStatuses was null"); }
                    await InitializeMockSetFromListAsync(CartStatuses, RawCartStatuses).ConfigureAwait(false);
                    context.Setup(m => m.CartStatuses).Returns(() => CartStatuses?.Object!);
                    context.Setup(m => m.Set<CartStatus>()).Returns(() => CartStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShopping || (DoCartTypeTable && (!dirtyOnly || CartTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCartTypes == null) { throw new InvalidOperationException("Raw CartTypes was null"); }
                    await InitializeMockSetFromListAsync(CartTypes, RawCartTypes).ConfigureAwait(false);
                    context.Setup(m => m.CartTypes).Returns(() => CartTypes?.Object!);
                    context.Setup(m => m.Set<CartType>()).Returns(() => CartTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCartsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Cart>> data)
        {
            if (!DoAll && !DoShopping && !DoCartTable) { return; }
            Carts ??= new Mock<DbSet<Cart>>();
            await InitializeMockSetFromListAsync(Carts, data).ConfigureAwait(false);
            context.Setup(m => m.Carts).Returns(() => Carts.Object);
            context.Setup(m => m.Set<Cart>()).Returns(() => Carts.Object);
            TableRecordCounts[typeof(Cart)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Cart)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Cart)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCartContactsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CartContact>> data)
        {
            if (!DoAll && !DoShopping && !DoCartContactTable) { return; }
            CartContacts ??= new Mock<DbSet<CartContact>>();
            await InitializeMockSetFromListAsync(CartContacts, data).ConfigureAwait(false);
            context.Setup(m => m.CartContacts).Returns(() => CartContacts.Object);
            context.Setup(m => m.Set<CartContact>()).Returns(() => CartContacts.Object);
            TableRecordCounts[typeof(CartContact)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CartContact)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CartContact)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCartEventsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CartEvent>> data)
        {
            if (!DoAll && !DoShopping && !DoCartEventTable) { return; }
            CartEvents ??= new Mock<DbSet<CartEvent>>();
            await InitializeMockSetFromListAsync(CartEvents, data).ConfigureAwait(false);
            context.Setup(m => m.CartEvents).Returns(() => CartEvents.Object);
            context.Setup(m => m.Set<CartEvent>()).Returns(() => CartEvents.Object);
            TableRecordCounts[typeof(CartEvent)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CartEvent)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CartEvent)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CartEvent)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCartEventTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CartEventType>> data)
        {
            if (!DoAll && !DoShopping && !DoCartEventTypeTable) { return; }
            CartEventTypes ??= new Mock<DbSet<CartEventType>>();
            await InitializeMockSetFromListAsync(CartEventTypes, data).ConfigureAwait(false);
            context.Setup(m => m.CartEventTypes).Returns(() => CartEventTypes.Object);
            context.Setup(m => m.Set<CartEventType>()).Returns(() => CartEventTypes.Object);
            TableRecordCounts[typeof(CartEventType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CartEventType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CartEventType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CartEventType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(CartEventType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCartFilesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CartFile>> data)
        {
            if (!DoAll && !DoShopping && !DoCartFileTable) { return; }
            CartFiles ??= new Mock<DbSet<CartFile>>();
            await InitializeMockSetFromListAsync(CartFiles, data).ConfigureAwait(false);
            context.Setup(m => m.CartFiles).Returns(() => CartFiles.Object);
            context.Setup(m => m.Set<CartFile>()).Returns(() => CartFiles.Object);
            TableRecordCounts[typeof(CartFile)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CartFile)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CartFile)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CartFile)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCartItemsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CartItem>> data)
        {
            if (!DoAll && !DoShopping && !DoCartItemTable) { return; }
            CartItems ??= new Mock<DbSet<CartItem>>();
            await InitializeMockSetFromListAsync(CartItems, data).ConfigureAwait(false);
            context.Setup(m => m.CartItems).Returns(() => CartItems.Object);
            context.Setup(m => m.Set<CartItem>()).Returns(() => CartItems.Object);
            TableRecordCounts[typeof(CartItem)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CartItem)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CartItem)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CartItem)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCartItemTargetsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CartItemTarget>> data)
        {
            if (!DoAll && !DoShopping && !DoCartItemTargetTable) { return; }
            CartItemTargets ??= new Mock<DbSet<CartItemTarget>>();
            await InitializeMockSetFromListAsync(CartItemTargets, data).ConfigureAwait(false);
            context.Setup(m => m.CartItemTargets).Returns(() => CartItemTargets.Object);
            context.Setup(m => m.Set<CartItemTarget>()).Returns(() => CartItemTargets.Object);
            TableRecordCounts[typeof(CartItemTarget)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CartItemTarget)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CartItemTarget)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCartStatesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CartState>> data)
        {
            if (!DoAll && !DoShopping && !DoCartStateTable) { return; }
            CartStates ??= new Mock<DbSet<CartState>>();
            await InitializeMockSetFromListAsync(CartStates, data).ConfigureAwait(false);
            context.Setup(m => m.CartStates).Returns(() => CartStates.Object);
            context.Setup(m => m.Set<CartState>()).Returns(() => CartStates.Object);
            TableRecordCounts[typeof(CartState)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CartState)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CartState)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CartState)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(CartState)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCartStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CartStatus>> data)
        {
            if (!DoAll && !DoShopping && !DoCartStatusTable) { return; }
            CartStatuses ??= new Mock<DbSet<CartStatus>>();
            await InitializeMockSetFromListAsync(CartStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.CartStatuses).Returns(() => CartStatuses.Object);
            context.Setup(m => m.Set<CartStatus>()).Returns(() => CartStatuses.Object);
            TableRecordCounts[typeof(CartStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CartStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CartStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CartStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(CartStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCartTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CartType>> data)
        {
            if (!DoAll && !DoShopping && !DoCartTypeTable) { return; }
            CartTypes ??= new Mock<DbSet<CartType>>();
            await InitializeMockSetFromListAsync(CartTypes, data).ConfigureAwait(false);
            context.Setup(m => m.CartTypes).Returns(() => CartTypes.Object);
            context.Setup(m => m.Set<CartType>()).Returns(() => CartTypes.Object);
            TableRecordCounts[typeof(CartType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CartType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CartType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CartType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(CartType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy Cart.</summary>
        /// <returns>The new Cart.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Cart>> CreateADummyCartAsync(int id, string? key, string? jsonAttributes = null, DateTime? dueDate = null, decimal subtotalItems = 0m, decimal subtotalShipping = 0m, decimal subtotalTaxes = 0m, decimal subtotalFees = 0m, decimal subtotalHandling = 0m, decimal subtotalDiscounts = 0m, decimal total = 0m, bool? shippingSameAsBilling = null, int? userID = null, int? accountID = null, int statusID = 1, int stateID = 1, int typeID = 1, int? billingContactID = null, int? shippingContactID = null, int? brandID = null!, int? franchiseID = null!, DateTime? requestedShipDate = null!, Guid? sessionID = null!, int? shipmentID = null!, int? storeID = null!, decimal? subtotalDiscountsModifier = null!, int? subtotalDiscountsModifierMode = null!, decimal? subtotalFeesModifier = null!, int? subtotalFeesModifierMode = null!, decimal? subtotalHandlingModifier = null!, int? subtotalHandlingModifierMode = null!, decimal? subtotalShippingModifier = null!, int? subtotalShippingModifierMode = null!, decimal? subtotalTaxesModifier = null!, int? subtotalTaxesModifierMode = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Cart>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ISalesCollectionBase Properties
                mock.Object.DueDate = dueDate;
                mock.Object.SubtotalItems = subtotalItems;
                mock.Object.SubtotalShipping = subtotalShipping;
                mock.Object.SubtotalTaxes = subtotalTaxes;
                mock.Object.SubtotalFees = subtotalFees;
                mock.Object.SubtotalHandling = subtotalHandling;
                mock.Object.SubtotalDiscounts = subtotalDiscounts;
                mock.Object.Total = total;
                mock.Object.ShippingSameAsBilling = shippingSameAsBilling;
                mock.Object.UserID = userID;
                mock.Object.AccountID = accountID;
                mock.Object.StatusID = statusID;
                mock.Object.StateID = stateID;
                mock.Object.TypeID = typeID;
                mock.Object.BillingContactID = billingContactID;
                mock.Object.ShippingContactID = shippingContactID;
                // Cart Properties
                mock.Object.BrandID = brandID;
                mock.Object.FranchiseID = franchiseID;
                mock.Object.RequestedShipDate = requestedShipDate;
                mock.Object.SessionID = sessionID;
                mock.Object.ShipmentID = shipmentID;
                mock.Object.StoreID = storeID;
                mock.Object.SubtotalDiscountsModifier = subtotalDiscountsModifier;
                mock.Object.SubtotalDiscountsModifierMode = subtotalDiscountsModifierMode;
                mock.Object.SubtotalFeesModifier = subtotalFeesModifier;
                mock.Object.SubtotalFeesModifierMode = subtotalFeesModifierMode;
                mock.Object.SubtotalHandlingModifier = subtotalHandlingModifier;
                mock.Object.SubtotalHandlingModifierMode = subtotalHandlingModifierMode;
                mock.Object.SubtotalShippingModifier = subtotalShippingModifier;
                mock.Object.SubtotalShippingModifierMode = subtotalShippingModifierMode;
                mock.Object.SubtotalTaxesModifier = subtotalTaxesModifier;
                mock.Object.SubtotalTaxesModifierMode = subtotalTaxesModifierMode;
                // Dynamic Linking
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => RawCartFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CartFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.CartID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => RawCartStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => RawCartStates?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawCartTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => RawCartItems?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CartItem>());
                mock.Setup(m => m.Discounts).Returns(() => RawAppliedCartDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedCartDiscount>());
                mock.Setup(m => m.Contacts).Returns(() => RawCartContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CartContact>());
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => RawAccounts == null || mock.Object.AccountID == null ? null : RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => RawContacts == null || mock.Object.BillingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => RawContacts == null || mock.Object.ShippingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
                // Cart's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.Shipment).Returns(() => RawShipments?.FirstOrDefault(x => x.Object.ID == mock.Object.ShipmentID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // Cart's Associated Objects
                mock.Setup(m => m.RateQuotes).Returns(() => RawRateQuotes?.Where(x => x.Object.CartID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RateQuote>());
                mock.Setup(m => m.SalesEvents).Returns(() => RawCartEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CartEvent>());
                return mock;
            });
        }

        /// <summary>Creates a dummy CartContact.</summary>
        /// <returns>The new CartContact.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CartContact>> CreateADummyCartContactAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CartContact>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmAContactRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // CartContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawCarts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CartContact's Related Objects
                // CartContact's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CartEvent.</summary>
        /// <returns>The new CartEvent.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CartEvent>> CreateADummyCartEventAsync(int id, string? key, string? name, string? desc = null, int masterID = 1, long? oldHash = null, long? newHash = null, int? oldStateID = null, int? newStateID = null, int? oldStatusID = null, int? newStatusID = null, int? oldTypeID = null, int? newTypeID = null, string? oldRecordSerialized = null, string? newRecordSerialized = null, int typeID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CartEvent>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // ISalesEventBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.OldHash = oldHash;
                mock.Object.NewHash = newHash;
                mock.Object.OldStateID = oldStateID;
                mock.Object.NewStateID = newStateID;
                mock.Object.OldStatusID = oldStatusID;
                mock.Object.NewStatusID = newStatusID;
                mock.Object.OldTypeID = oldTypeID;
                mock.Object.NewTypeID = newTypeID;
                mock.Object.OldRecordSerialized = oldRecordSerialized;
                mock.Object.NewRecordSerialized = newRecordSerialized;
                // CartEvent Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawCartEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => RawCarts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // CartEvent's Related Objects
                // CartEvent's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CartEventType.</summary>
        /// <returns>The new CartEventType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CartEventType>> CreateADummyCartEventTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CartEventType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // CartEventType Properties
                // Dynamic Linking
                // CartEventType's Related Objects
                // CartEventType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CartFile.</summary>
        /// <returns>The new CartFile.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CartFile>> CreateADummyCartFileAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CartFile>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
                // CartFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawCarts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CartFile's Related Objects
                // CartFile's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CartItem.</summary>
        /// <returns>The new CartItem.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CartItem>> CreateADummyCartItemAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, decimal quantity = 1m, decimal? quantityBackOrdered = 0m, decimal? quantityPreSold = 0m, decimal unitCorePrice = 0m, decimal? unitSoldPrice = null, string? sku = null, string? unitOfMeasure = null, int? productID = null, int? userID = null, int masterID = 1, string forceUniqueLineItemKey = null!, int? originalCurrencyID = null!, int? sellingCurrencyID = null!, decimal? unitCorePriceInSellingCurrency = null!, decimal? unitSoldPriceInSellingCurrency = null!, decimal? unitSoldPriceModifier = null!, int? unitSoldPriceModifierMode = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CartItem>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // ISalesItemBase Properties
                mock.Object.Quantity = quantity;
                mock.Object.QuantityBackOrdered = quantityBackOrdered;
                mock.Object.QuantityPreSold = quantityPreSold;
                mock.Object.UnitCorePrice = unitCorePrice;
                mock.Object.UnitSoldPrice = unitSoldPrice;
                mock.Object.Sku = sku;
                mock.Object.UnitOfMeasure = unitOfMeasure;
                mock.Object.ProductID = productID;
                mock.Object.UserID = userID;
                mock.Object.MasterID = masterID;
                // CartItem Properties
                mock.Object.ForceUniqueLineItemKey = forceUniqueLineItemKey;
                mock.Object.OriginalCurrencyID = originalCurrencyID;
                mock.Object.SellingCurrencyID = sellingCurrencyID;
                mock.Object.UnitCorePriceInSellingCurrency = unitCorePriceInSellingCurrency;
                mock.Object.UnitSoldPriceInSellingCurrency = unitSoldPriceInSellingCurrency;
                mock.Object.UnitSoldPriceModifier = unitSoldPriceModifier;
                mock.Object.UnitSoldPriceModifierMode = unitSoldPriceModifierMode;
                // Dynamic Linking
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.CartItemID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => RawCarts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => RawProducts == null || mock.Object.ProductID == null ? null : RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => RawAppliedCartItemDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedCartItemDiscount>());
                mock.Setup(m => m.Targets).Returns(() => RawCartItemTargets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CartItemTarget>());
                // CartItem's Related Objects
                mock.Setup(m => m.OriginalCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginalCurrencyID)?.Object);
                mock.Setup(m => m.SellingCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SellingCurrencyID)?.Object);
                // CartItem's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CartItemTarget.</summary>
        /// <returns>The new CartItemTarget.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CartItemTarget>> CreateADummyCartItemTargetAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int? brandProductID = null!, int destinationContactID = 1, int masterID = 1, bool nothingToShip = false, int? originProductInventoryLocationSectionID = null!, int? originStoreProductID = null!, int? originVendorProductID = null!, decimal quantity = 0m, int? selectedRateQuoteID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CartItemTarget>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // CartItemTarget Properties
                mock.Object.BrandProductID = brandProductID;
                mock.Object.DestinationContactID = destinationContactID;
                mock.Object.MasterID = masterID;
                mock.Object.NothingToShip = nothingToShip;
                mock.Object.OriginProductInventoryLocationSectionID = originProductInventoryLocationSectionID;
                mock.Object.OriginStoreProductID = originStoreProductID;
                mock.Object.OriginVendorProductID = originVendorProductID;
                mock.Object.Quantity = quantity;
                mock.Object.SelectedRateQuoteID = selectedRateQuoteID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // CartItemTarget's Related Objects
                mock.Setup(m => m.BrandProduct).Returns(() => RawBrandProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandProductID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.Master).Returns(() => RawCartItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.OriginProductInventoryLocationSection).Returns(() => RawProductInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginProductInventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginStoreProduct).Returns(() => RawStoreProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginStoreProductID)?.Object);
                mock.Setup(m => m.OriginVendorProduct).Returns(() => RawVendorProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginVendorProductID)?.Object);
                mock.Setup(m => m.SelectedRateQuote).Returns(() => RawRateQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SelectedRateQuoteID)?.Object);
                // CartItemTarget's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CartState.</summary>
        /// <returns>The new CartState.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CartState>> CreateADummyCartStateAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CartState>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // CartState Properties
                // Dynamic Linking
                // CartState's Related Objects
                // CartState's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CartStatus.</summary>
        /// <returns>The new CartStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CartStatus>> CreateADummyCartStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CartStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // CartStatus Properties
                // Dynamic Linking
                // CartStatus's Related Objects
                // CartStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CartType.</summary>
        /// <returns>The new CartType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CartType>> CreateADummyCartTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, int? brandID = null!, int? createdByUserID = null!, int? storeID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CartType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // CartType Properties
                mock.Object.BrandID = brandID;
                mock.Object.CreatedByUserID = createdByUserID;
                mock.Object.StoreID = storeID;
                // Dynamic Linking
                // CartType's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.CreatedByUser).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.CreatedByUserID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // CartType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForShopping(MockingSetup mockingSetup)
        {
            Func<Cart> mockFuncCart = () =>
            {
                var mock = new Mock<Cart>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Cart Properties
                // Dynamic Linking
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => mockingSetup.RawCartFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CartFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.CartID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawCartStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => mockingSetup.RawCartStates?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawCartTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => mockingSetup.RawCartItems?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CartItem>());
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawAppliedCartDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedCartDiscount>());
                mock.Setup(m => m.Contacts).Returns(() => mockingSetup.RawCartContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CartContact>());
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => mockingSetup.RawAccounts == null || mock.Object.AccountID == null ? null : mockingSetup.RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.BillingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ShippingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.Shipment).Returns(() => mockingSetup.RawShipments?.FirstOrDefault(x => x.Object.ID == mock.Object.ShipmentID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // Cart's Associated Objects
                mock.Setup(m => m.RateQuotes).Returns(() => mockingSetup.RawRateQuotes?.Where(x => x.Object.CartID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RateQuote>());
                mock.Setup(m => m.SalesEvents).Returns(() => mockingSetup.RawCartEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CartEvent>());
                // Cart's Related Objects
                return mock.Object;
            };
            For<ICart>().Use(() => mockFuncCart());
            For<Cart>().Use(() => mockFuncCart());
            Func<CartContact> mockFuncCartContact = () =>
            {
                var mock = new Mock<CartContact>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CartContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCarts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CartContact's Associated Objects
                // CartContact's Related Objects
                return mock.Object;
            };
            For<ICartContact>().Use(() => mockFuncCartContact());
            For<CartContact>().Use(() => mockFuncCartContact());
            Func<CartEvent> mockFuncCartEvent = () =>
            {
                var mock = new Mock<CartEvent>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CartEvent Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawCartEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCarts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // CartEvent's Associated Objects
                // CartEvent's Related Objects
                return mock.Object;
            };
            For<ICartEvent>().Use(() => mockFuncCartEvent());
            For<CartEvent>().Use(() => mockFuncCartEvent());
            Func<CartEventType> mockFuncCartEventType = () =>
            {
                var mock = new Mock<CartEventType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CartEventType Properties
                // Dynamic Linking
                // CartEventType's Associated Objects
                // CartEventType's Related Objects
                return mock.Object;
            };
            For<ICartEventType>().Use(() => mockFuncCartEventType());
            For<CartEventType>().Use(() => mockFuncCartEventType());
            Func<CartFile> mockFuncCartFile = () =>
            {
                var mock = new Mock<CartFile>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CartFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCarts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CartFile's Associated Objects
                // CartFile's Related Objects
                return mock.Object;
            };
            For<ICartFile>().Use(() => mockFuncCartFile());
            For<CartFile>().Use(() => mockFuncCartFile());
            Func<CartItem> mockFuncCartItem = () =>
            {
                var mock = new Mock<CartItem>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CartItem Properties
                // Dynamic Linking
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.CartItemID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCarts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => mockingSetup.RawProducts == null || mock.Object.ProductID == null ? null : mockingSetup.RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawAppliedCartItemDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedCartItemDiscount>());
                mock.Setup(m => m.Targets).Returns(() => mockingSetup.RawCartItemTargets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CartItemTarget>());
                mock.Setup(m => m.OriginalCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginalCurrencyID)?.Object);
                mock.Setup(m => m.SellingCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SellingCurrencyID)?.Object);
                // CartItem's Associated Objects
                // CartItem's Related Objects
                return mock.Object;
            };
            For<ICartItem>().Use(() => mockFuncCartItem());
            For<CartItem>().Use(() => mockFuncCartItem());
            Func<CartItemTarget> mockFuncCartItemTarget = () =>
            {
                var mock = new Mock<CartItemTarget>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                mock.Setup(m => m.Clone()).CallBase();
                // CartItemTarget Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.BrandProduct).Returns(() => mockingSetup.RawBrandProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandProductID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCartItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.OriginProductInventoryLocationSection).Returns(() => mockingSetup.RawProductInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginProductInventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginStoreProduct).Returns(() => mockingSetup.RawStoreProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginStoreProductID)?.Object);
                mock.Setup(m => m.OriginVendorProduct).Returns(() => mockingSetup.RawVendorProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginVendorProductID)?.Object);
                mock.Setup(m => m.SelectedRateQuote).Returns(() => mockingSetup.RawRateQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SelectedRateQuoteID)?.Object);
                // CartItemTarget's Associated Objects
                // CartItemTarget's Related Objects
                return mock.Object;
            };
            For<ICartItemTarget>().Use(() => mockFuncCartItemTarget());
            For<CartItemTarget>().Use(() => mockFuncCartItemTarget());
            Func<CartState> mockFuncCartState = () =>
            {
                var mock = new Mock<CartState>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CartState Properties
                // Dynamic Linking
                // CartState's Associated Objects
                // CartState's Related Objects
                return mock.Object;
            };
            For<ICartState>().Use(() => mockFuncCartState());
            For<CartState>().Use(() => mockFuncCartState());
            Func<CartStatus> mockFuncCartStatus = () =>
            {
                var mock = new Mock<CartStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CartStatus Properties
                // Dynamic Linking
                // CartStatus's Associated Objects
                // CartStatus's Related Objects
                return mock.Object;
            };
            For<ICartStatus>().Use(() => mockFuncCartStatus());
            For<CartStatus>().Use(() => mockFuncCartStatus());
            Func<CartType> mockFuncCartType = () =>
            {
                var mock = new Mock<CartType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CartType Properties
                // Dynamic Linking
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.CreatedByUser).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.CreatedByUserID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // CartType's Associated Objects
                // CartType's Related Objects
                return mock.Object;
            };
            For<ICartType>().Use(() => mockFuncCartType());
            For<CartType>().Use(() => mockFuncCartType());
        }
    }
}
