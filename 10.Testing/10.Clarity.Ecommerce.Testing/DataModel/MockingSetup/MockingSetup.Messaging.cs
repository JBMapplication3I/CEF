// <autogenerated>
// <copyright file="Messaging.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Messaging section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoMessaging { private get; set; }

        // Enable the tables specifically on run
        public bool DoConversationTable { private get; set; }
        public bool DoConversationUserTable { private get; set; }
        public bool DoEmailQueueTable { private get; set; }
        public bool DoEmailQueueAttachmentTable { private get; set; }
        public bool DoEmailStatusTable { private get; set; }
        public bool DoEmailTemplateTable { private get; set; }
        public bool DoEmailTypeTable { private get; set; }
        public bool DoMessageTable { private get; set; }
        public bool DoMessageAttachmentTable { private get; set; }
        public bool DoMessageRecipientTable { private get; set; }
        public bool DoProductNotificationTable { private get; set; }

        // Dirty Checking
        public bool ConversationDirty { private get; set; }
        public bool ConversationUserDirty { private get; set; }
        public bool EmailQueueDirty { private get; set; }
        public bool EmailQueueAttachmentDirty { private get; set; }
        public bool EmailStatusDirty { private get; set; }
        public bool EmailTemplateDirty { private get; set; }
        public bool EmailTypeDirty { private get; set; }
        public bool MessageDirty { private get; set; }
        public bool MessageAttachmentDirty { private get; set; }
        public bool MessageRecipientDirty { private get; set; }
        public bool ProductNotificationDirty { private get; set; }

        // Sets
        public Mock<DbSet<Conversation>>? Conversations { get; private set; }
        public Mock<DbSet<ConversationUser>>? ConversationUsers { get; private set; }
        public Mock<DbSet<EmailQueue>>? EmailQueues { get; private set; }
        public Mock<DbSet<EmailQueueAttachment>>? EmailQueueAttachments { get; private set; }
        public Mock<DbSet<EmailStatus>>? EmailStatuses { get; private set; }
        public Mock<DbSet<EmailTemplate>>? EmailTemplates { get; private set; }
        public Mock<DbSet<EmailType>>? EmailTypes { get; private set; }
        public Mock<DbSet<Message>>? Messages { get; private set; }
        public Mock<DbSet<MessageAttachment>>? MessageAttachments { get; private set; }
        public Mock<DbSet<MessageRecipient>>? MessageRecipients { get; private set; }
        public Mock<DbSet<ProductNotification>>? ProductNotifications { get; private set; }

        // Raw Data
        public List<Mock<Conversation>>? RawConversations { get; private set; }
        public List<Mock<ConversationUser>>? RawConversationUsers { get; private set; }
        public List<Mock<EmailQueue>>? RawEmailQueues { get; private set; }
        public List<Mock<EmailQueueAttachment>>? RawEmailQueueAttachments { get; private set; }
        public List<Mock<EmailStatus>>? RawEmailStatuses { get; private set; }
        public List<Mock<EmailTemplate>>? RawEmailTemplates { get; private set; }
        public List<Mock<EmailType>>? RawEmailTypes { get; private set; }
        public List<Mock<Message>>? RawMessages { get; private set; }
        public List<Mock<MessageAttachment>>? RawMessageAttachments { get; private set; }
        public List<Mock<MessageRecipient>>? RawMessageRecipients { get; private set; }
        public List<Mock<ProductNotification>>? RawProductNotifications { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksMessagingAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoMessaging || (DoConversationTable && (!dirtyOnly || ConversationDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawConversations == null) { throw new InvalidOperationException("Raw Conversations was null"); }
                    await InitializeMockSetFromListAsync(Conversations, RawConversations).ConfigureAwait(false);
                    context.Setup(m => m.Conversations).Returns(() => Conversations?.Object!);
                    context.Setup(m => m.Set<Conversation>()).Returns(() => Conversations?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoMessaging || (DoConversationUserTable && (!dirtyOnly || ConversationUserDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawConversationUsers == null) { throw new InvalidOperationException("Raw ConversationUsers was null"); }
                    await InitializeMockSetFromListAsync(ConversationUsers, RawConversationUsers).ConfigureAwait(false);
                    context.Setup(m => m.ConversationUsers).Returns(() => ConversationUsers?.Object!);
                    context.Setup(m => m.Set<ConversationUser>()).Returns(() => ConversationUsers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoMessaging || (DoEmailQueueTable && (!dirtyOnly || EmailQueueDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawEmailQueues == null) { throw new InvalidOperationException("Raw EmailQueues was null"); }
                    await InitializeMockSetFromListAsync(EmailQueues, RawEmailQueues).ConfigureAwait(false);
                    context.Setup(m => m.EmailQueues).Returns(() => EmailQueues?.Object!);
                    context.Setup(m => m.Set<EmailQueue>()).Returns(() => EmailQueues?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoMessaging || (DoEmailQueueAttachmentTable && (!dirtyOnly || EmailQueueAttachmentDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawEmailQueueAttachments == null) { throw new InvalidOperationException("Raw EmailQueueAttachments was null"); }
                    await InitializeMockSetFromListAsync(EmailQueueAttachments, RawEmailQueueAttachments).ConfigureAwait(false);
                    context.Setup(m => m.EmailQueueAttachments).Returns(() => EmailQueueAttachments?.Object!);
                    context.Setup(m => m.Set<EmailQueueAttachment>()).Returns(() => EmailQueueAttachments?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoMessaging || (DoEmailStatusTable && (!dirtyOnly || EmailStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawEmailStatuses == null) { throw new InvalidOperationException("Raw EmailStatuses was null"); }
                    await InitializeMockSetFromListAsync(EmailStatuses, RawEmailStatuses).ConfigureAwait(false);
                    context.Setup(m => m.EmailStatuses).Returns(() => EmailStatuses?.Object!);
                    context.Setup(m => m.Set<EmailStatus>()).Returns(() => EmailStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoMessaging || (DoEmailTemplateTable && (!dirtyOnly || EmailTemplateDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawEmailTemplates == null) { throw new InvalidOperationException("Raw EmailTemplates was null"); }
                    await InitializeMockSetFromListAsync(EmailTemplates, RawEmailTemplates).ConfigureAwait(false);
                    context.Setup(m => m.EmailTemplates).Returns(() => EmailTemplates?.Object!);
                    context.Setup(m => m.Set<EmailTemplate>()).Returns(() => EmailTemplates?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoMessaging || (DoEmailTypeTable && (!dirtyOnly || EmailTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawEmailTypes == null) { throw new InvalidOperationException("Raw EmailTypes was null"); }
                    await InitializeMockSetFromListAsync(EmailTypes, RawEmailTypes).ConfigureAwait(false);
                    context.Setup(m => m.EmailTypes).Returns(() => EmailTypes?.Object!);
                    context.Setup(m => m.Set<EmailType>()).Returns(() => EmailTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoMessaging || (DoMessageTable && (!dirtyOnly || MessageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawMessages == null) { throw new InvalidOperationException("Raw Messages was null"); }
                    await InitializeMockSetFromListAsync(Messages, RawMessages).ConfigureAwait(false);
                    context.Setup(m => m.Messages).Returns(() => Messages?.Object!);
                    context.Setup(m => m.Set<Message>()).Returns(() => Messages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoMessaging || (DoMessageAttachmentTable && (!dirtyOnly || MessageAttachmentDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawMessageAttachments == null) { throw new InvalidOperationException("Raw MessageAttachments was null"); }
                    await InitializeMockSetFromListAsync(MessageAttachments, RawMessageAttachments).ConfigureAwait(false);
                    context.Setup(m => m.MessageAttachments).Returns(() => MessageAttachments?.Object!);
                    context.Setup(m => m.Set<MessageAttachment>()).Returns(() => MessageAttachments?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoMessaging || (DoMessageRecipientTable && (!dirtyOnly || MessageRecipientDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawMessageRecipients == null) { throw new InvalidOperationException("Raw MessageRecipients was null"); }
                    await InitializeMockSetFromListAsync(MessageRecipients, RawMessageRecipients).ConfigureAwait(false);
                    context.Setup(m => m.MessageRecipients).Returns(() => MessageRecipients?.Object!);
                    context.Setup(m => m.Set<MessageRecipient>()).Returns(() => MessageRecipients?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoMessaging || (DoProductNotificationTable && (!dirtyOnly || ProductNotificationDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawProductNotifications == null) { throw new InvalidOperationException("Raw ProductNotifications was null"); }
                    await InitializeMockSetFromListAsync(ProductNotifications, RawProductNotifications).ConfigureAwait(false);
                    context.Setup(m => m.ProductNotifications).Returns(() => ProductNotifications?.Object!);
                    context.Setup(m => m.Set<ProductNotification>()).Returns(() => ProductNotifications?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetConversationsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Conversation>> data)
        {
            if (!DoAll && !DoMessaging && !DoConversationTable) { return; }
            Conversations ??= new Mock<DbSet<Conversation>>();
            await InitializeMockSetFromListAsync(Conversations, data).ConfigureAwait(false);
            context.Setup(m => m.Conversations).Returns(() => Conversations.Object);
            context.Setup(m => m.Set<Conversation>()).Returns(() => Conversations.Object);
            TableRecordCounts[typeof(Conversation)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Conversation)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Conversation)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetConversationUsersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ConversationUser>> data)
        {
            if (!DoAll && !DoMessaging && !DoConversationUserTable) { return; }
            ConversationUsers ??= new Mock<DbSet<ConversationUser>>();
            await InitializeMockSetFromListAsync(ConversationUsers, data).ConfigureAwait(false);
            context.Setup(m => m.ConversationUsers).Returns(() => ConversationUsers.Object);
            context.Setup(m => m.Set<ConversationUser>()).Returns(() => ConversationUsers.Object);
            TableRecordCounts[typeof(ConversationUser)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ConversationUser)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ConversationUser)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetEmailQueuesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<EmailQueue>> data)
        {
            if (!DoAll && !DoMessaging && !DoEmailQueueTable) { return; }
            EmailQueues ??= new Mock<DbSet<EmailQueue>>();
            await InitializeMockSetFromListAsync(EmailQueues, data).ConfigureAwait(false);
            context.Setup(m => m.EmailQueues).Returns(() => EmailQueues.Object);
            context.Setup(m => m.Set<EmailQueue>()).Returns(() => EmailQueues.Object);
            TableRecordCounts[typeof(EmailQueue)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(EmailQueue)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(EmailQueue)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetEmailQueueAttachmentsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<EmailQueueAttachment>> data)
        {
            if (!DoAll && !DoMessaging && !DoEmailQueueAttachmentTable) { return; }
            EmailQueueAttachments ??= new Mock<DbSet<EmailQueueAttachment>>();
            await InitializeMockSetFromListAsync(EmailQueueAttachments, data).ConfigureAwait(false);
            context.Setup(m => m.EmailQueueAttachments).Returns(() => EmailQueueAttachments.Object);
            context.Setup(m => m.Set<EmailQueueAttachment>()).Returns(() => EmailQueueAttachments.Object);
            TableRecordCounts[typeof(EmailQueueAttachment)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(EmailQueueAttachment)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(EmailQueueAttachment)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(EmailQueueAttachment)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetEmailStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<EmailStatus>> data)
        {
            if (!DoAll && !DoMessaging && !DoEmailStatusTable) { return; }
            EmailStatuses ??= new Mock<DbSet<EmailStatus>>();
            await InitializeMockSetFromListAsync(EmailStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.EmailStatuses).Returns(() => EmailStatuses.Object);
            context.Setup(m => m.Set<EmailStatus>()).Returns(() => EmailStatuses.Object);
            TableRecordCounts[typeof(EmailStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(EmailStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(EmailStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(EmailStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(EmailStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetEmailTemplatesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<EmailTemplate>> data)
        {
            if (!DoAll && !DoMessaging && !DoEmailTemplateTable) { return; }
            EmailTemplates ??= new Mock<DbSet<EmailTemplate>>();
            await InitializeMockSetFromListAsync(EmailTemplates, data).ConfigureAwait(false);
            context.Setup(m => m.EmailTemplates).Returns(() => EmailTemplates.Object);
            context.Setup(m => m.Set<EmailTemplate>()).Returns(() => EmailTemplates.Object);
            TableRecordCounts[typeof(EmailTemplate)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(EmailTemplate)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(EmailTemplate)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(EmailTemplate)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetEmailTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<EmailType>> data)
        {
            if (!DoAll && !DoMessaging && !DoEmailTypeTable) { return; }
            EmailTypes ??= new Mock<DbSet<EmailType>>();
            await InitializeMockSetFromListAsync(EmailTypes, data).ConfigureAwait(false);
            context.Setup(m => m.EmailTypes).Returns(() => EmailTypes.Object);
            context.Setup(m => m.Set<EmailType>()).Returns(() => EmailTypes.Object);
            TableRecordCounts[typeof(EmailType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(EmailType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(EmailType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(EmailType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(EmailType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetMessagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Message>> data)
        {
            if (!DoAll && !DoMessaging && !DoMessageTable) { return; }
            Messages ??= new Mock<DbSet<Message>>();
            await InitializeMockSetFromListAsync(Messages, data).ConfigureAwait(false);
            context.Setup(m => m.Messages).Returns(() => Messages.Object);
            context.Setup(m => m.Set<Message>()).Returns(() => Messages.Object);
            TableRecordCounts[typeof(Message)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Message)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Message)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetMessageAttachmentsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<MessageAttachment>> data)
        {
            if (!DoAll && !DoMessaging && !DoMessageAttachmentTable) { return; }
            MessageAttachments ??= new Mock<DbSet<MessageAttachment>>();
            await InitializeMockSetFromListAsync(MessageAttachments, data).ConfigureAwait(false);
            context.Setup(m => m.MessageAttachments).Returns(() => MessageAttachments.Object);
            context.Setup(m => m.Set<MessageAttachment>()).Returns(() => MessageAttachments.Object);
            TableRecordCounts[typeof(MessageAttachment)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(MessageAttachment)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(MessageAttachment)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(MessageAttachment)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetMessageRecipientsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<MessageRecipient>> data)
        {
            if (!DoAll && !DoMessaging && !DoMessageRecipientTable) { return; }
            MessageRecipients ??= new Mock<DbSet<MessageRecipient>>();
            await InitializeMockSetFromListAsync(MessageRecipients, data).ConfigureAwait(false);
            context.Setup(m => m.MessageRecipients).Returns(() => MessageRecipients.Object);
            context.Setup(m => m.Set<MessageRecipient>()).Returns(() => MessageRecipients.Object);
            TableRecordCounts[typeof(MessageRecipient)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(MessageRecipient)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(MessageRecipient)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetProductNotificationsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ProductNotification>> data)
        {
            if (!DoAll && !DoMessaging && !DoProductNotificationTable) { return; }
            ProductNotifications ??= new Mock<DbSet<ProductNotification>>();
            await InitializeMockSetFromListAsync(ProductNotifications, data).ConfigureAwait(false);
            context.Setup(m => m.ProductNotifications).Returns(() => ProductNotifications.Object);
            context.Setup(m => m.Set<ProductNotification>()).Returns(() => ProductNotifications.Object);
            TableRecordCounts[typeof(ProductNotification)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ProductNotification)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ProductNotification)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ProductNotification)] = data[0].Object.Name;
            }
        }

        /// <summary>Creates a dummy Conversation.</summary>
        /// <returns>The new Conversation.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Conversation>> CreateADummyConversationAsync(int id, string? key, string? jsonAttributes = null, int? brandID = null!, bool? copyUserWhenEnded = null!, bool? hasEnded = null!, int? storeID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Conversation>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // Conversation Properties
                mock.Object.BrandID = brandID;
                mock.Object.CopyUserWhenEnded = copyUserWhenEnded;
                mock.Object.HasEnded = hasEnded;
                mock.Object.StoreID = storeID;
                // Dynamic Linking
                // Conversation's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // Conversation's Associated Objects
                mock.Setup(m => m.Messages).Returns(() => RawMessages?.Where(x => x.Object.ConversationID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Message>());
                mock.Setup(m => m.Users).Returns(() => RawConversationUsers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ConversationUser>());
                return mock;
            });
        }

        /// <summary>Creates a dummy ConversationUser.</summary>
        /// <returns>The new ConversationUser.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ConversationUser>> CreateADummyConversationUserAsync(int id, string? key, string? jsonAttributes = null, bool? isTyping = null!, DateTime? lastHeartbeat = null!, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ConversationUser>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ConversationUser Properties
                mock.Object.IsTyping = isTyping;
                mock.Object.LastHeartbeat = lastHeartbeat;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // ConversationUser's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawConversations?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ConversationUser's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy EmailQueue.</summary>
        /// <returns>The new EmailQueue.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<EmailQueue>> CreateADummyEmailQueueAsync(int id, string? key, int typeID = 1, int statusID = 1, string? jsonAttributes = null, string addressesBcc = null!, string addressesCc = null!, string addressesTo = null!, string addressFrom = null!, int attempts = 1, string body = null!, int? emailTemplateID = null!, bool hasError = false, bool isHtml = false, int? messageRecipientID = null!, string subject = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<EmailQueue>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // EmailQueue Properties
                mock.Object.AddressesBcc = addressesBcc;
                mock.Object.AddressesCc = addressesCc;
                mock.Object.AddressesTo = addressesTo;
                mock.Object.AddressFrom = addressFrom;
                mock.Object.Attempts = attempts;
                mock.Object.Body = body;
                mock.Object.EmailTemplateID = emailTemplateID;
                mock.Object.HasError = hasError;
                mock.Object.IsHtml = isHtml;
                mock.Object.MessageRecipientID = messageRecipientID;
                mock.Object.Subject = subject;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawEmailTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawEmailStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // EmailQueue's Related Objects
                mock.Setup(m => m.EmailTemplate).Returns(() => RawEmailTemplates?.FirstOrDefault(x => x.Object.ID == mock.Object.EmailTemplateID)?.Object);
                mock.Setup(m => m.MessageRecipient).Returns(() => RawMessageRecipients?.FirstOrDefault(x => x.Object.ID == mock.Object.MessageRecipientID)?.Object);
                // EmailQueue's Associated Objects
                mock.Setup(m => m.EmailQueueAttachments).Returns(() => RawEmailQueueAttachments?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<EmailQueueAttachment>());
                return mock;
            });
        }

        /// <summary>Creates a dummy EmailQueueAttachment.</summary>
        /// <returns>The new EmailQueueAttachment.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<EmailQueueAttachment>> CreateADummyEmailQueueAttachmentAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null, int createdByUserID = 1, int? updatedByUserID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<EmailQueueAttachment>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
                // EmailQueueAttachment Properties
                mock.Object.CreatedByUserID = createdByUserID;
                mock.Object.UpdatedByUserID = updatedByUserID;
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawEmailQueues?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // EmailQueueAttachment's Related Objects
                mock.Setup(m => m.CreatedByUser).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.CreatedByUserID)?.Object);
                mock.Setup(m => m.UpdatedByUser).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UpdatedByUserID)?.Object);
                // EmailQueueAttachment's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy EmailStatus.</summary>
        /// <returns>The new EmailStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<EmailStatus>> CreateADummyEmailStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<EmailStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // EmailStatus Properties
                // Dynamic Linking
                // EmailStatus's Related Objects
                // EmailStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy EmailTemplate.</summary>
        /// <returns>The new EmailTemplate.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<EmailTemplate>> CreateADummyEmailTemplateAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, string body = null!, string subject = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<EmailTemplate>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // EmailTemplate Properties
                mock.Object.Body = body;
                mock.Object.Subject = subject;
                // Dynamic Linking
                // EmailTemplate's Related Objects
                // EmailTemplate's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy EmailType.</summary>
        /// <returns>The new EmailType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<EmailType>> CreateADummyEmailTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<EmailType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // EmailType Properties
                // Dynamic Linking
                // EmailType's Related Objects
                // EmailType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Message.</summary>
        /// <returns>The new Message.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Message>> CreateADummyMessageAsync(int id, string? key, string? jsonAttributes = null, string body = null!, int? brandID = null!, string context = null!, int? conversationID = null!, bool isReplyAllAllowed = false, int? sentByUserID = null!, int? storeID = null!, string subject = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Message>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // Message Properties
                mock.Object.Body = body;
                mock.Object.BrandID = brandID;
                mock.Object.Context = context;
                mock.Object.ConversationID = conversationID;
                mock.Object.IsReplyAllAllowed = isReplyAllAllowed;
                mock.Object.SentByUserID = sentByUserID;
                mock.Object.StoreID = storeID;
                mock.Object.Subject = subject;
                // Dynamic Linking
                // Message's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Conversation).Returns(() => RawConversations?.FirstOrDefault(x => x.Object.ID == mock.Object.ConversationID)?.Object);
                mock.Setup(m => m.SentByUser).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SentByUserID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // Message's Associated Objects
                mock.Setup(m => m.MessageAttachments).Returns(() => RawMessageAttachments?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MessageAttachment>());
                mock.Setup(m => m.MessageRecipients).Returns(() => RawMessageRecipients?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MessageRecipient>());
                return mock;
            });
        }

        /// <summary>Creates a dummy MessageAttachment.</summary>
        /// <returns>The new MessageAttachment.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<MessageAttachment>> CreateADummyMessageAttachmentAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null, int createdByUserID = 1, int? updatedByUserID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<MessageAttachment>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
                // MessageAttachment Properties
                mock.Object.CreatedByUserID = createdByUserID;
                mock.Object.UpdatedByUserID = updatedByUserID;
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawMessages?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // MessageAttachment's Related Objects
                mock.Setup(m => m.CreatedByUser).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.CreatedByUserID)?.Object);
                mock.Setup(m => m.UpdatedByUser).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UpdatedByUserID)?.Object);
                // MessageAttachment's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy MessageRecipient.</summary>
        /// <returns>The new MessageRecipient.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<MessageRecipient>> CreateADummyMessageRecipientAsync(int id, string? key, string? jsonAttributes = null, DateTime? archivedAt = null!, DateTime? emailSentAt = null!, int? groupID = null!, bool hasSentAnEmail = false, bool isArchived = false, bool isRead = false, int masterID = 1, DateTime? readAt = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<MessageRecipient>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // MessageRecipient Properties
                mock.Object.ArchivedAt = archivedAt;
                mock.Object.EmailSentAt = emailSentAt;
                mock.Object.GroupID = groupID;
                mock.Object.HasSentAnEmail = hasSentAnEmail;
                mock.Object.IsArchived = isArchived;
                mock.Object.IsRead = isRead;
                mock.Object.MasterID = masterID;
                mock.Object.ReadAt = readAt;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // MessageRecipient's Related Objects
                mock.Setup(m => m.Group).Returns(() => RawGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.GroupID)?.Object);
                mock.Setup(m => m.Master).Returns(() => RawMessages?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // MessageRecipient's Associated Objects
                mock.Setup(m => m.EmailQueues).Returns(() => RawEmailQueues?.Where(x => x.Object.MessageRecipientID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<EmailQueue>());
                return mock;
            });
        }

        /// <summary>Creates a dummy ProductNotification.</summary>
        /// <returns>The new ProductNotification.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ProductNotification>> CreateADummyProductNotificationAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int productID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ProductNotification>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // ProductNotification Properties
                mock.Object.ProductID = productID;
                // Dynamic Linking
                // ProductNotification's Related Objects
                mock.Setup(m => m.Product).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                // ProductNotification's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForMessaging(MockingSetup mockingSetup)
        {
            Func<Conversation> mockFuncConversation = () =>
            {
                var mock = new Mock<Conversation>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Conversation Properties
                // Dynamic Linking
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // Conversation's Associated Objects
                mock.Setup(m => m.Messages).Returns(() => mockingSetup.RawMessages?.Where(x => x.Object.ConversationID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Message>());
                mock.Setup(m => m.Users).Returns(() => mockingSetup.RawConversationUsers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ConversationUser>());
                // Conversation's Related Objects
                return mock.Object;
            };
            For<IConversation>().Use(() => mockFuncConversation());
            For<Conversation>().Use(() => mockFuncConversation());
            Func<ConversationUser> mockFuncConversationUser = () =>
            {
                var mock = new Mock<ConversationUser>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ConversationUser Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawConversations?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // ConversationUser's Associated Objects
                // ConversationUser's Related Objects
                return mock.Object;
            };
            For<IConversationUser>().Use(() => mockFuncConversationUser());
            For<ConversationUser>().Use(() => mockFuncConversationUser());
            Func<EmailQueue> mockFuncEmailQueue = () =>
            {
                var mock = new Mock<EmailQueue>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // EmailQueue Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawEmailTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawEmailStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.EmailTemplate).Returns(() => mockingSetup.RawEmailTemplates?.FirstOrDefault(x => x.Object.ID == mock.Object.EmailTemplateID)?.Object);
                mock.Setup(m => m.MessageRecipient).Returns(() => mockingSetup.RawMessageRecipients?.FirstOrDefault(x => x.Object.ID == mock.Object.MessageRecipientID)?.Object);
                // EmailQueue's Associated Objects
                mock.Setup(m => m.EmailQueueAttachments).Returns(() => mockingSetup.RawEmailQueueAttachments?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<EmailQueueAttachment>());
                // EmailQueue's Related Objects
                return mock.Object;
            };
            For<IEmailQueue>().Use(() => mockFuncEmailQueue());
            For<EmailQueue>().Use(() => mockFuncEmailQueue());
            Func<EmailQueueAttachment> mockFuncEmailQueueAttachment = () =>
            {
                var mock = new Mock<EmailQueueAttachment>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // EmailQueueAttachment Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawEmailQueues?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                mock.Setup(m => m.CreatedByUser).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.CreatedByUserID)?.Object);
                mock.Setup(m => m.UpdatedByUser).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UpdatedByUserID)?.Object);
                // EmailQueueAttachment's Associated Objects
                // EmailQueueAttachment's Related Objects
                return mock.Object;
            };
            For<IEmailQueueAttachment>().Use(() => mockFuncEmailQueueAttachment());
            For<EmailQueueAttachment>().Use(() => mockFuncEmailQueueAttachment());
            Func<EmailStatus> mockFuncEmailStatus = () =>
            {
                var mock = new Mock<EmailStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // EmailStatus Properties
                // Dynamic Linking
                // EmailStatus's Associated Objects
                // EmailStatus's Related Objects
                return mock.Object;
            };
            For<IEmailStatus>().Use(() => mockFuncEmailStatus());
            For<EmailStatus>().Use(() => mockFuncEmailStatus());
            Func<EmailTemplate> mockFuncEmailTemplate = () =>
            {
                var mock = new Mock<EmailTemplate>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // EmailTemplate Properties
                // Dynamic Linking
                // EmailTemplate's Associated Objects
                // EmailTemplate's Related Objects
                return mock.Object;
            };
            For<IEmailTemplate>().Use(() => mockFuncEmailTemplate());
            For<EmailTemplate>().Use(() => mockFuncEmailTemplate());
            Func<EmailType> mockFuncEmailType = () =>
            {
                var mock = new Mock<EmailType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // EmailType Properties
                // Dynamic Linking
                // EmailType's Associated Objects
                // EmailType's Related Objects
                return mock.Object;
            };
            For<IEmailType>().Use(() => mockFuncEmailType());
            For<EmailType>().Use(() => mockFuncEmailType());
            Func<Message> mockFuncMessage = () =>
            {
                var mock = new Mock<Message>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Message Properties
                // Dynamic Linking
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Conversation).Returns(() => mockingSetup.RawConversations?.FirstOrDefault(x => x.Object.ID == mock.Object.ConversationID)?.Object);
                mock.Setup(m => m.SentByUser).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SentByUserID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // Message's Associated Objects
                mock.Setup(m => m.MessageAttachments).Returns(() => mockingSetup.RawMessageAttachments?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MessageAttachment>());
                mock.Setup(m => m.MessageRecipients).Returns(() => mockingSetup.RawMessageRecipients?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MessageRecipient>());
                // Message's Related Objects
                return mock.Object;
            };
            For<IMessage>().Use(() => mockFuncMessage());
            For<Message>().Use(() => mockFuncMessage());
            Func<MessageAttachment> mockFuncMessageAttachment = () =>
            {
                var mock = new Mock<MessageAttachment>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // MessageAttachment Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawMessages?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                mock.Setup(m => m.CreatedByUser).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.CreatedByUserID)?.Object);
                mock.Setup(m => m.UpdatedByUser).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UpdatedByUserID)?.Object);
                // MessageAttachment's Associated Objects
                // MessageAttachment's Related Objects
                return mock.Object;
            };
            For<IMessageAttachment>().Use(() => mockFuncMessageAttachment());
            For<MessageAttachment>().Use(() => mockFuncMessageAttachment());
            Func<MessageRecipient> mockFuncMessageRecipient = () =>
            {
                var mock = new Mock<MessageRecipient>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // MessageRecipient Properties
                // Dynamic Linking
                mock.Setup(m => m.Group).Returns(() => mockingSetup.RawGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.GroupID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawMessages?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // MessageRecipient's Associated Objects
                mock.Setup(m => m.EmailQueues).Returns(() => mockingSetup.RawEmailQueues?.Where(x => x.Object.MessageRecipientID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<EmailQueue>());
                // MessageRecipient's Related Objects
                return mock.Object;
            };
            For<IMessageRecipient>().Use(() => mockFuncMessageRecipient());
            For<MessageRecipient>().Use(() => mockFuncMessageRecipient());
            Func<ProductNotification> mockFuncProductNotification = () =>
            {
                var mock = new Mock<ProductNotification>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ProductNotification Properties
                // Dynamic Linking
                mock.Setup(m => m.Product).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                // ProductNotification's Associated Objects
                // ProductNotification's Related Objects
                return mock.Object;
            };
            For<IProductNotification>().Use(() => mockFuncProductNotification());
            For<ProductNotification>().Use(() => mockFuncProductNotification());
        }
    }
}
