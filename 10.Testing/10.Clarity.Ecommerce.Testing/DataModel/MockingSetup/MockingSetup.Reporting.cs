// <autogenerated>
// <copyright file="Reporting.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Reporting section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoReporting { private get; set; }

        // Enable the tables specifically on run
        public bool DoReportTable { private get; set; }
        public bool DoReportTypeTable { private get; set; }

        // Dirty Checking
        public bool ReportDirty { private get; set; }
        public bool ReportTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<Report>>? Reports { get; private set; }
        public Mock<DbSet<ReportType>>? ReportTypes { get; private set; }

        // Raw Data
        public List<Mock<Report>>? RawReports { get; private set; }
        public List<Mock<ReportType>>? RawReportTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksReportingAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoReporting || (DoReportTable && (!dirtyOnly || ReportDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawReports == null) { throw new InvalidOperationException("Raw Reports was null"); }
                    await InitializeMockSetFromListAsync(Reports, RawReports).ConfigureAwait(false);
                    context.Setup(m => m.Reports).Returns(() => Reports?.Object!);
                    context.Setup(m => m.Set<Report>()).Returns(() => Reports?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoReporting || (DoReportTypeTable && (!dirtyOnly || ReportTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawReportTypes == null) { throw new InvalidOperationException("Raw ReportTypes was null"); }
                    await InitializeMockSetFromListAsync(ReportTypes, RawReportTypes).ConfigureAwait(false);
                    context.Setup(m => m.ReportTypes).Returns(() => ReportTypes?.Object!);
                    context.Setup(m => m.Set<ReportType>()).Returns(() => ReportTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetReportsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Report>> data)
        {
            if (!DoAll && !DoReporting && !DoReportTable) { return; }
            Reports ??= new Mock<DbSet<Report>>();
            await InitializeMockSetFromListAsync(Reports, data).ConfigureAwait(false);
            context.Setup(m => m.Reports).Returns(() => Reports.Object);
            context.Setup(m => m.Set<Report>()).Returns(() => Reports.Object);
            TableRecordCounts[typeof(Report)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Report)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Report)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Report)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetReportTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ReportType>> data)
        {
            if (!DoAll && !DoReporting && !DoReportTypeTable) { return; }
            ReportTypes ??= new Mock<DbSet<ReportType>>();
            await InitializeMockSetFromListAsync(ReportTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ReportTypes).Returns(() => ReportTypes.Object);
            context.Setup(m => m.Set<ReportType>()).Returns(() => ReportTypes.Object);
            TableRecordCounts[typeof(ReportType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ReportType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ReportType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ReportType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ReportType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy Report.</summary>
        /// <returns>The new Report.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Report>> CreateADummyReportAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, string? jsonAttributes = null, string resultsData = null!, int runByUserID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Report>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // Report Properties
                mock.Object.ResultsData = resultsData;
                mock.Object.RunByUserID = runByUserID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawReportTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // Report's Related Objects
                mock.Setup(m => m.RunByUser).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.RunByUserID)?.Object);
                // Report's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ReportType.</summary>
        /// <returns>The new ReportType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ReportType>> CreateADummyReportTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, byte[] template = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ReportType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ReportType Properties
                mock.Object.Template = template;
                // Dynamic Linking
                // ReportType's Related Objects
                // ReportType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForReporting(MockingSetup mockingSetup)
        {
            Func<Report> mockFuncReport = () =>
            {
                var mock = new Mock<Report>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Report Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawReportTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.RunByUser).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.RunByUserID)?.Object);
                // Report's Associated Objects
                // Report's Related Objects
                return mock.Object;
            };
            For<IReport>().Use(() => mockFuncReport());
            For<Report>().Use(() => mockFuncReport());
            Func<ReportType> mockFuncReportType = () =>
            {
                var mock = new Mock<ReportType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ReportType Properties
                // Dynamic Linking
                // ReportType's Associated Objects
                // ReportType's Related Objects
                return mock.Object;
            };
            For<IReportType>().Use(() => mockFuncReportType());
            For<ReportType>().Use(() => mockFuncReportType());
        }
    }
}
