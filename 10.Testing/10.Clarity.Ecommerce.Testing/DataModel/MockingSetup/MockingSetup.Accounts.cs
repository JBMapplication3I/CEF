// <autogenerated>
// <copyright file="Accounts.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Accounts section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoAccounts { private get; set; }

        // Enable the tables specifically on run
        public bool DoAccountTable { private get; set; }
        public bool DoAccountAssociationTable { private get; set; }
        public bool DoAccountAssociationTypeTable { private get; set; }
        public bool DoAccountContactTable { private get; set; }
        public bool DoAccountCurrencyTable { private get; set; }
        public bool DoAccountFileTable { private get; set; }
        public bool DoAccountImageTable { private get; set; }
        public bool DoAccountImageTypeTable { private get; set; }
        public bool DoAccountPricePointTable { private get; set; }
        public bool DoAccountProductTable { private get; set; }
        public bool DoAccountProductTypeTable { private get; set; }
        public bool DoAccountStatusTable { private get; set; }
        public bool DoAccountTypeTable { private get; set; }
        public bool DoAccountUsageBalanceTable { private get; set; }
        public bool DoAccountUserRoleTable { private get; set; }
        public bool DoContractorTable { private get; set; }
        public bool DoServiceAreaTable { private get; set; }

        // Dirty Checking
        public bool AccountDirty { private get; set; }
        public bool AccountAssociationDirty { private get; set; }
        public bool AccountAssociationTypeDirty { private get; set; }
        public bool AccountContactDirty { private get; set; }
        public bool AccountCurrencyDirty { private get; set; }
        public bool AccountFileDirty { private get; set; }
        public bool AccountImageDirty { private get; set; }
        public bool AccountImageTypeDirty { private get; set; }
        public bool AccountPricePointDirty { private get; set; }
        public bool AccountProductDirty { private get; set; }
        public bool AccountProductTypeDirty { private get; set; }
        public bool AccountStatusDirty { private get; set; }
        public bool AccountTypeDirty { private get; set; }
        public bool AccountUsageBalanceDirty { private get; set; }
        public bool AccountUserRoleDirty { private get; set; }
        public bool ContractorDirty { private get; set; }
        public bool ServiceAreaDirty { private get; set; }

        // Sets
        public Mock<DbSet<Account>>? Accounts { get; private set; }
        public Mock<DbSet<AccountAssociation>>? AccountAssociations { get; private set; }
        public Mock<DbSet<AccountAssociationType>>? AccountAssociationTypes { get; private set; }
        public Mock<DbSet<AccountContact>>? AccountContacts { get; private set; }
        public Mock<DbSet<AccountCurrency>>? AccountCurrencies { get; private set; }
        public Mock<DbSet<AccountFile>>? AccountFiles { get; private set; }
        public Mock<DbSet<AccountImage>>? AccountImages { get; private set; }
        public Mock<DbSet<AccountImageType>>? AccountImageTypes { get; private set; }
        public Mock<DbSet<AccountPricePoint>>? AccountPricePoints { get; private set; }
        public Mock<DbSet<AccountProduct>>? AccountProducts { get; private set; }
        public Mock<DbSet<AccountProductType>>? AccountProductTypes { get; private set; }
        public Mock<DbSet<AccountStatus>>? AccountStatuses { get; private set; }
        public Mock<DbSet<AccountType>>? AccountTypes { get; private set; }
        public Mock<DbSet<AccountUsageBalance>>? AccountUsageBalances { get; private set; }
        public Mock<DbSet<AccountUserRole>>? AccountUserRoles { get; private set; }
        public Mock<DbSet<Contractor>>? Contractors { get; private set; }
        public Mock<DbSet<ServiceArea>>? ServiceAreas { get; private set; }

        // Raw Data
        public List<Mock<Account>>? RawAccounts { get; private set; }
        public List<Mock<AccountAssociation>>? RawAccountAssociations { get; private set; }
        public List<Mock<AccountAssociationType>>? RawAccountAssociationTypes { get; private set; }
        public List<Mock<AccountContact>>? RawAccountContacts { get; private set; }
        public List<Mock<AccountCurrency>>? RawAccountCurrencies { get; private set; }
        public List<Mock<AccountFile>>? RawAccountFiles { get; private set; }
        public List<Mock<AccountImage>>? RawAccountImages { get; private set; }
        public List<Mock<AccountImageType>>? RawAccountImageTypes { get; private set; }
        public List<Mock<AccountPricePoint>>? RawAccountPricePoints { get; private set; }
        public List<Mock<AccountProduct>>? RawAccountProducts { get; private set; }
        public List<Mock<AccountProductType>>? RawAccountProductTypes { get; private set; }
        public List<Mock<AccountStatus>>? RawAccountStatuses { get; private set; }
        public List<Mock<AccountType>>? RawAccountTypes { get; private set; }
        public List<Mock<AccountUsageBalance>>? RawAccountUsageBalances { get; private set; }
        public List<Mock<AccountUserRole>>? RawAccountUserRoles { get; private set; }
        public List<Mock<Contractor>>? RawContractors { get; private set; }
        public List<Mock<ServiceArea>>? RawServiceAreas { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksAccountsAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoAccounts || (DoAccountTable && (!dirtyOnly || AccountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccounts == null) { throw new InvalidOperationException("Raw Accounts was null"); }
                    await InitializeMockSetFromListAsync(Accounts, RawAccounts).ConfigureAwait(false);
                    context.Setup(m => m.Accounts).Returns(() => Accounts?.Object!);
                    context.Setup(m => m.Set<Account>()).Returns(() => Accounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoAccountAssociationTable && (!dirtyOnly || AccountAssociationDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccountAssociations == null) { throw new InvalidOperationException("Raw AccountAssociations was null"); }
                    await InitializeMockSetFromListAsync(AccountAssociations, RawAccountAssociations).ConfigureAwait(false);
                    context.Setup(m => m.AccountAssociations).Returns(() => AccountAssociations?.Object!);
                    context.Setup(m => m.Set<AccountAssociation>()).Returns(() => AccountAssociations?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoAccountAssociationTypeTable && (!dirtyOnly || AccountAssociationTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccountAssociationTypes == null) { throw new InvalidOperationException("Raw AccountAssociationTypes was null"); }
                    await InitializeMockSetFromListAsync(AccountAssociationTypes, RawAccountAssociationTypes).ConfigureAwait(false);
                    context.Setup(m => m.AccountAssociationTypes).Returns(() => AccountAssociationTypes?.Object!);
                    context.Setup(m => m.Set<AccountAssociationType>()).Returns(() => AccountAssociationTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoAccountContactTable && (!dirtyOnly || AccountContactDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccountContacts == null) { throw new InvalidOperationException("Raw AccountContacts was null"); }
                    await InitializeMockSetFromListAsync(AccountContacts, RawAccountContacts).ConfigureAwait(false);
                    context.Setup(m => m.AccountContacts).Returns(() => AccountContacts?.Object!);
                    context.Setup(m => m.Set<AccountContact>()).Returns(() => AccountContacts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoAccountCurrencyTable && (!dirtyOnly || AccountCurrencyDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccountCurrencies == null) { throw new InvalidOperationException("Raw AccountCurrencies was null"); }
                    await InitializeMockSetFromListAsync(AccountCurrencies, RawAccountCurrencies).ConfigureAwait(false);
                    context.Setup(m => m.AccountCurrencies).Returns(() => AccountCurrencies?.Object!);
                    context.Setup(m => m.Set<AccountCurrency>()).Returns(() => AccountCurrencies?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoAccountFileTable && (!dirtyOnly || AccountFileDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccountFiles == null) { throw new InvalidOperationException("Raw AccountFiles was null"); }
                    await InitializeMockSetFromListAsync(AccountFiles, RawAccountFiles).ConfigureAwait(false);
                    context.Setup(m => m.AccountFiles).Returns(() => AccountFiles?.Object!);
                    context.Setup(m => m.Set<AccountFile>()).Returns(() => AccountFiles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoAccountImageTable && (!dirtyOnly || AccountImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccountImages == null) { throw new InvalidOperationException("Raw AccountImages was null"); }
                    await InitializeMockSetFromListAsync(AccountImages, RawAccountImages).ConfigureAwait(false);
                    context.Setup(m => m.AccountImages).Returns(() => AccountImages?.Object!);
                    context.Setup(m => m.Set<AccountImage>()).Returns(() => AccountImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoAccountImageTypeTable && (!dirtyOnly || AccountImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccountImageTypes == null) { throw new InvalidOperationException("Raw AccountImageTypes was null"); }
                    await InitializeMockSetFromListAsync(AccountImageTypes, RawAccountImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.AccountImageTypes).Returns(() => AccountImageTypes?.Object!);
                    context.Setup(m => m.Set<AccountImageType>()).Returns(() => AccountImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoAccountPricePointTable && (!dirtyOnly || AccountPricePointDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccountPricePoints == null) { throw new InvalidOperationException("Raw AccountPricePoints was null"); }
                    await InitializeMockSetFromListAsync(AccountPricePoints, RawAccountPricePoints).ConfigureAwait(false);
                    context.Setup(m => m.AccountPricePoints).Returns(() => AccountPricePoints?.Object!);
                    context.Setup(m => m.Set<AccountPricePoint>()).Returns(() => AccountPricePoints?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoAccountProductTable && (!dirtyOnly || AccountProductDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccountProducts == null) { throw new InvalidOperationException("Raw AccountProducts was null"); }
                    await InitializeMockSetFromListAsync(AccountProducts, RawAccountProducts).ConfigureAwait(false);
                    context.Setup(m => m.AccountProducts).Returns(() => AccountProducts?.Object!);
                    context.Setup(m => m.Set<AccountProduct>()).Returns(() => AccountProducts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoAccountProductTypeTable && (!dirtyOnly || AccountProductTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccountProductTypes == null) { throw new InvalidOperationException("Raw AccountProductTypes was null"); }
                    await InitializeMockSetFromListAsync(AccountProductTypes, RawAccountProductTypes).ConfigureAwait(false);
                    context.Setup(m => m.AccountProductTypes).Returns(() => AccountProductTypes?.Object!);
                    context.Setup(m => m.Set<AccountProductType>()).Returns(() => AccountProductTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoAccountStatusTable && (!dirtyOnly || AccountStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccountStatuses == null) { throw new InvalidOperationException("Raw AccountStatuses was null"); }
                    await InitializeMockSetFromListAsync(AccountStatuses, RawAccountStatuses).ConfigureAwait(false);
                    context.Setup(m => m.AccountStatuses).Returns(() => AccountStatuses?.Object!);
                    context.Setup(m => m.Set<AccountStatus>()).Returns(() => AccountStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoAccountTypeTable && (!dirtyOnly || AccountTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccountTypes == null) { throw new InvalidOperationException("Raw AccountTypes was null"); }
                    await InitializeMockSetFromListAsync(AccountTypes, RawAccountTypes).ConfigureAwait(false);
                    context.Setup(m => m.AccountTypes).Returns(() => AccountTypes?.Object!);
                    context.Setup(m => m.Set<AccountType>()).Returns(() => AccountTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoAccountUsageBalanceTable && (!dirtyOnly || AccountUsageBalanceDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccountUsageBalances == null) { throw new InvalidOperationException("Raw AccountUsageBalances was null"); }
                    await InitializeMockSetFromListAsync(AccountUsageBalances, RawAccountUsageBalances).ConfigureAwait(false);
                    context.Setup(m => m.AccountUsageBalances).Returns(() => AccountUsageBalances?.Object!);
                    context.Setup(m => m.Set<AccountUsageBalance>()).Returns(() => AccountUsageBalances?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoAccountUserRoleTable && (!dirtyOnly || AccountUserRoleDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAccountUserRoles == null) { throw new InvalidOperationException("Raw AccountUserRoles was null"); }
                    await InitializeMockSetFromListNonIBaseAsync(AccountUserRoles, RawAccountUserRoles).ConfigureAwait(false);
                    context.Setup(m => m.AccountUserRoles).Returns(() => AccountUserRoles?.Object!);
                    context.Setup(m => m.Set<AccountUserRole>()).Returns(() => AccountUserRoles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoContractorTable && (!dirtyOnly || ContractorDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawContractors == null) { throw new InvalidOperationException("Raw Contractors was null"); }
                    await InitializeMockSetFromListAsync(Contractors, RawContractors).ConfigureAwait(false);
                    context.Setup(m => m.Contractors).Returns(() => Contractors?.Object!);
                    context.Setup(m => m.Set<Contractor>()).Returns(() => Contractors?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAccounts || (DoServiceAreaTable && (!dirtyOnly || ServiceAreaDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawServiceAreas == null) { throw new InvalidOperationException("Raw ServiceAreas was null"); }
                    await InitializeMockSetFromListAsync(ServiceAreas, RawServiceAreas).ConfigureAwait(false);
                    context.Setup(m => m.ServiceAreas).Returns(() => ServiceAreas?.Object!);
                    context.Setup(m => m.Set<ServiceArea>()).Returns(() => ServiceAreas?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Account>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountTable) { return; }
            Accounts ??= new Mock<DbSet<Account>>();
            await InitializeMockSetFromListAsync(Accounts, data).ConfigureAwait(false);
            context.Setup(m => m.Accounts).Returns(() => Accounts.Object);
            context.Setup(m => m.Set<Account>()).Returns(() => Accounts.Object);
            TableRecordCounts[typeof(Account)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Account)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Account)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Account)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountAssociationsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AccountAssociation>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountAssociationTable) { return; }
            AccountAssociations ??= new Mock<DbSet<AccountAssociation>>();
            await InitializeMockSetFromListAsync(AccountAssociations, data).ConfigureAwait(false);
            context.Setup(m => m.AccountAssociations).Returns(() => AccountAssociations.Object);
            context.Setup(m => m.Set<AccountAssociation>()).Returns(() => AccountAssociations.Object);
            TableRecordCounts[typeof(AccountAssociation)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AccountAssociation)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AccountAssociation)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountAssociationTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AccountAssociationType>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountAssociationTypeTable) { return; }
            AccountAssociationTypes ??= new Mock<DbSet<AccountAssociationType>>();
            await InitializeMockSetFromListAsync(AccountAssociationTypes, data).ConfigureAwait(false);
            context.Setup(m => m.AccountAssociationTypes).Returns(() => AccountAssociationTypes.Object);
            context.Setup(m => m.Set<AccountAssociationType>()).Returns(() => AccountAssociationTypes.Object);
            TableRecordCounts[typeof(AccountAssociationType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AccountAssociationType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AccountAssociationType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AccountAssociationType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AccountAssociationType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountContactsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AccountContact>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountContactTable) { return; }
            AccountContacts ??= new Mock<DbSet<AccountContact>>();
            await InitializeMockSetFromListAsync(AccountContacts, data).ConfigureAwait(false);
            context.Setup(m => m.AccountContacts).Returns(() => AccountContacts.Object);
            context.Setup(m => m.Set<AccountContact>()).Returns(() => AccountContacts.Object);
            TableRecordCounts[typeof(AccountContact)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AccountContact)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AccountContact)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AccountContact)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountCurrenciesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AccountCurrency>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountCurrencyTable) { return; }
            AccountCurrencies ??= new Mock<DbSet<AccountCurrency>>();
            await InitializeMockSetFromListAsync(AccountCurrencies, data).ConfigureAwait(false);
            context.Setup(m => m.AccountCurrencies).Returns(() => AccountCurrencies.Object);
            context.Setup(m => m.Set<AccountCurrency>()).Returns(() => AccountCurrencies.Object);
            TableRecordCounts[typeof(AccountCurrency)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AccountCurrency)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AccountCurrency)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountFilesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AccountFile>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountFileTable) { return; }
            AccountFiles ??= new Mock<DbSet<AccountFile>>();
            await InitializeMockSetFromListAsync(AccountFiles, data).ConfigureAwait(false);
            context.Setup(m => m.AccountFiles).Returns(() => AccountFiles.Object);
            context.Setup(m => m.Set<AccountFile>()).Returns(() => AccountFiles.Object);
            TableRecordCounts[typeof(AccountFile)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AccountFile)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AccountFile)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AccountFile)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AccountImage>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountImageTable) { return; }
            AccountImages ??= new Mock<DbSet<AccountImage>>();
            await InitializeMockSetFromListAsync(AccountImages, data).ConfigureAwait(false);
            context.Setup(m => m.AccountImages).Returns(() => AccountImages.Object);
            context.Setup(m => m.Set<AccountImage>()).Returns(() => AccountImages.Object);
            TableRecordCounts[typeof(AccountImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AccountImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AccountImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AccountImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AccountImageType>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountImageTypeTable) { return; }
            AccountImageTypes ??= new Mock<DbSet<AccountImageType>>();
            await InitializeMockSetFromListAsync(AccountImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.AccountImageTypes).Returns(() => AccountImageTypes.Object);
            context.Setup(m => m.Set<AccountImageType>()).Returns(() => AccountImageTypes.Object);
            TableRecordCounts[typeof(AccountImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AccountImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AccountImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AccountImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AccountImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountPricePointsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AccountPricePoint>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountPricePointTable) { return; }
            AccountPricePoints ??= new Mock<DbSet<AccountPricePoint>>();
            await InitializeMockSetFromListAsync(AccountPricePoints, data).ConfigureAwait(false);
            context.Setup(m => m.AccountPricePoints).Returns(() => AccountPricePoints.Object);
            context.Setup(m => m.Set<AccountPricePoint>()).Returns(() => AccountPricePoints.Object);
            TableRecordCounts[typeof(AccountPricePoint)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AccountPricePoint)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AccountPricePoint)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountProductsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AccountProduct>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountProductTable) { return; }
            AccountProducts ??= new Mock<DbSet<AccountProduct>>();
            await InitializeMockSetFromListAsync(AccountProducts, data).ConfigureAwait(false);
            context.Setup(m => m.AccountProducts).Returns(() => AccountProducts.Object);
            context.Setup(m => m.Set<AccountProduct>()).Returns(() => AccountProducts.Object);
            TableRecordCounts[typeof(AccountProduct)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AccountProduct)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AccountProduct)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountProductTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AccountProductType>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountProductTypeTable) { return; }
            AccountProductTypes ??= new Mock<DbSet<AccountProductType>>();
            await InitializeMockSetFromListAsync(AccountProductTypes, data).ConfigureAwait(false);
            context.Setup(m => m.AccountProductTypes).Returns(() => AccountProductTypes.Object);
            context.Setup(m => m.Set<AccountProductType>()).Returns(() => AccountProductTypes.Object);
            TableRecordCounts[typeof(AccountProductType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AccountProductType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AccountProductType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AccountProductType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AccountProductType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AccountStatus>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountStatusTable) { return; }
            AccountStatuses ??= new Mock<DbSet<AccountStatus>>();
            await InitializeMockSetFromListAsync(AccountStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.AccountStatuses).Returns(() => AccountStatuses.Object);
            context.Setup(m => m.Set<AccountStatus>()).Returns(() => AccountStatuses.Object);
            TableRecordCounts[typeof(AccountStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AccountStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AccountStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AccountStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AccountStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AccountType>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountTypeTable) { return; }
            AccountTypes ??= new Mock<DbSet<AccountType>>();
            await InitializeMockSetFromListAsync(AccountTypes, data).ConfigureAwait(false);
            context.Setup(m => m.AccountTypes).Returns(() => AccountTypes.Object);
            context.Setup(m => m.Set<AccountType>()).Returns(() => AccountTypes.Object);
            TableRecordCounts[typeof(AccountType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AccountType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AccountType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AccountType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AccountType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountUsageBalancesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AccountUsageBalance>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountUsageBalanceTable) { return; }
            AccountUsageBalances ??= new Mock<DbSet<AccountUsageBalance>>();
            await InitializeMockSetFromListAsync(AccountUsageBalances, data).ConfigureAwait(false);
            context.Setup(m => m.AccountUsageBalances).Returns(() => AccountUsageBalances.Object);
            context.Setup(m => m.Set<AccountUsageBalance>()).Returns(() => AccountUsageBalances.Object);
            TableRecordCounts[typeof(AccountUsageBalance)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AccountUsageBalance)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AccountUsageBalance)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAccountUserRolesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AccountUserRole>> data)
        {
            if (!DoAll && !DoAccounts && !DoAccountUserRoleTable) { return; }
            AccountUserRoles ??= new Mock<DbSet<AccountUserRole>>();
            await InitializeMockSetFromListNonIBaseAsync(AccountUserRoles, data).ConfigureAwait(false);
            context.Setup(m => m.AccountUserRoles).Returns(() => AccountUserRoles.Object);
            context.Setup(m => m.Set<AccountUserRole>()).Returns(() => AccountUserRoles.Object);
            TableRecordCounts[typeof(AccountUserRole)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AccountUserRole)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AccountUserRole)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetContractorsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Contractor>> data)
        {
            if (!DoAll && !DoAccounts && !DoContractorTable) { return; }
            Contractors ??= new Mock<DbSet<Contractor>>();
            await InitializeMockSetFromListAsync(Contractors, data).ConfigureAwait(false);
            context.Setup(m => m.Contractors).Returns(() => Contractors.Object);
            context.Setup(m => m.Set<Contractor>()).Returns(() => Contractors.Object);
            TableRecordCounts[typeof(Contractor)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Contractor)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Contractor)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetServiceAreasAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ServiceArea>> data)
        {
            if (!DoAll && !DoAccounts && !DoServiceAreaTable) { return; }
            ServiceAreas ??= new Mock<DbSet<ServiceArea>>();
            await InitializeMockSetFromListAsync(ServiceAreas, data).ConfigureAwait(false);
            context.Setup(m => m.ServiceAreas).Returns(() => ServiceAreas.Object);
            context.Setup(m => m.Set<ServiceArea>()).Returns(() => ServiceAreas.Object);
            TableRecordCounts[typeof(ServiceArea)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ServiceArea)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ServiceArea)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy Account.</summary>
        /// <returns>The new Account.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Account>> CreateADummyAccountAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, int statusID = 1, string? jsonAttributes = null, string businessType = null!, decimal? credit = null!, int? creditCurrencyID = null!, string dEANumber = null!, string dunsNumber = null!, string eIN = null!, bool isOnHold = false, bool isTaxable = false, string medicalLicenseHolderName = null!, string medicalLicenseNumber = null!, string medicalLicenseState = null!, string preferredInvoiceMethod = null!, string sageID = null!, string salesmanCode = null!, string taxEntityUseCode = null!, string taxExemptionNo = null!, string token = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Account>();
                mock.SetupAllProperties();
                mock.Setup(m => m.AccountUserRoles).Returns(() => RawAccountUserRoles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountUserRole>());
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // Account Properties
                mock.Object.BusinessType = businessType;
                mock.Object.Credit = credit;
                mock.Object.CreditCurrencyID = creditCurrencyID;
                mock.Object.DEANumber = dEANumber;
                mock.Object.DunsNumber = dunsNumber;
                mock.Object.EIN = eIN;
                mock.Object.IsOnHold = isOnHold;
                mock.Object.IsTaxable = isTaxable;
                mock.Object.MedicalLicenseHolderName = medicalLicenseHolderName;
                mock.Object.MedicalLicenseNumber = medicalLicenseNumber;
                mock.Object.MedicalLicenseState = medicalLicenseState;
                mock.Object.PreferredInvoiceMethod = preferredInvoiceMethod;
                mock.Object.SageID = sageID;
                mock.Object.SalesmanCode = salesmanCode;
                mock.Object.TaxEntityUseCode = taxEntityUseCode;
                mock.Object.TaxExemptionNo = taxExemptionNo;
                mock.Object.Token = token;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawAccountTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawAccountStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawAccountImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountImage>());
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => RawAccountFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.AccountID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // Account's Related Objects
                mock.Setup(m => m.CreditCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.CreditCurrencyID)?.Object);
                // Account's Associated Objects
                mock.Setup(m => m.AccountAssociations).Returns(() => RawAccountAssociations?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountAssociation>());
                mock.Setup(m => m.AccountContacts).Returns(() => RawAccountContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountContact>());
                mock.Setup(m => m.AccountCurrencies).Returns(() => RawAccountCurrencies?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountCurrency>());
                mock.Setup(m => m.AccountPricePoints).Returns(() => RawAccountPricePoints?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountPricePoint>());
                mock.Setup(m => m.AccountsAssociatedWith).Returns(() => RawAccountAssociations?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountAssociation>());
                mock.Setup(m => m.Brands).Returns(() => RawBrandAccounts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandAccount>());
                mock.Setup(m => m.Franchises).Returns(() => RawFranchiseAccounts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseAccount>());
                mock.Setup(m => m.Products).Returns(() => RawAccountProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountProduct>());
                mock.Setup(m => m.PurchaseOrders).Returns(() => RawPurchaseOrders?.Where(x => x.Object.AccountID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrder>());
                mock.Setup(m => m.Stores).Returns(() => RawStoreAccounts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreAccount>());
                mock.Setup(m => m.Subscriptions).Returns(() => RawSubscriptions?.Where(x => x.Object.AccountID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Subscription>());
                mock.Setup(m => m.Users).Returns(() => RawUsers?.Where(x => x.Object.AccountID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<User>());
                mock.Setup(m => m.Vendors).Returns(() => RawVendorAccounts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<VendorAccount>());
                return mock;
            });
        }

        /// <summary>Creates a dummy AccountAssociation.</summary>
        /// <returns>The new AccountAssociation.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AccountAssociation>> CreateADummyAccountAssociationAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AccountAssociation>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // AccountAssociation Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawAccountAssociationTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // AccountAssociation's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AccountAssociation's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AccountAssociationType.</summary>
        /// <returns>The new AccountAssociationType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AccountAssociationType>> CreateADummyAccountAssociationTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AccountAssociationType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AccountAssociationType Properties
                // Dynamic Linking
                // AccountAssociationType's Related Objects
                // AccountAssociationType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AccountContact.</summary>
        /// <returns>The new AccountContact.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AccountContact>> CreateADummyAccountContactAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool isBilling = false, bool isPrimary = false, bool transmittedToERP = false, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AccountContact>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IAmAContactRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // AccountContact Properties
                mock.Object.IsBilling = isBilling;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.TransmittedToERP = transmittedToERP;
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AccountContact's Related Objects
                // AccountContact's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AccountCurrency.</summary>
        /// <returns>The new AccountCurrency.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AccountCurrency>> CreateADummyAccountCurrencyAsync(int id, string? key, string? jsonAttributes = null, string customName = null!, string customTranslationKey = null!, bool isPrimary = false, int masterID = 1, int? overrideDecimalPlaceAccuracy = null!, string overrideHtmlCharacterCode = null!, string overrideHtmlDecimalCharacterCode = null!, string overrideHtmlSeparatorCharacterCode = null!, string overrideRawCharacter = null!, string overrideRawDecimalCharacter = null!, string overrideRawSeparatorCharacter = null!, decimal overrideUnicodeSymbolValue = 0m, bool? overrideUseSeparator = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AccountCurrency>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AccountCurrency Properties
                mock.Object.CustomName = customName;
                mock.Object.CustomTranslationKey = customTranslationKey;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.MasterID = masterID;
                mock.Object.OverrideDecimalPlaceAccuracy = overrideDecimalPlaceAccuracy;
                mock.Object.OverrideHtmlCharacterCode = overrideHtmlCharacterCode;
                mock.Object.OverrideHtmlDecimalCharacterCode = overrideHtmlDecimalCharacterCode;
                mock.Object.OverrideHtmlSeparatorCharacterCode = overrideHtmlSeparatorCharacterCode;
                mock.Object.OverrideRawCharacter = overrideRawCharacter;
                mock.Object.OverrideRawDecimalCharacter = overrideRawDecimalCharacter;
                mock.Object.OverrideRawSeparatorCharacter = overrideRawSeparatorCharacter;
                mock.Object.OverrideUnicodeSymbolValue = overrideUnicodeSymbolValue;
                mock.Object.OverrideUseSeparator = overrideUseSeparator;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // AccountCurrency's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AccountCurrency's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AccountFile.</summary>
        /// <returns>The new AccountFile.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AccountFile>> CreateADummyAccountFileAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AccountFile>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
                // AccountFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AccountFile's Related Objects
                // AccountFile's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AccountImage.</summary>
        /// <returns>The new AccountImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AccountImage>> CreateADummyAccountImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AccountImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // AccountImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawAccountImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // AccountImage's Related Objects
                // AccountImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AccountImageType.</summary>
        /// <returns>The new AccountImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AccountImageType>> CreateADummyAccountImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AccountImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AccountImageType Properties
                // Dynamic Linking
                // AccountImageType's Related Objects
                // AccountImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AccountPricePoint.</summary>
        /// <returns>The new AccountPricePoint.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AccountPricePoint>> CreateADummyAccountPricePointAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AccountPricePoint>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AccountPricePoint Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // AccountPricePoint's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawPricePoints?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AccountPricePoint's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AccountProduct.</summary>
        /// <returns>The new AccountProduct.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AccountProduct>> CreateADummyAccountProductAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AccountProduct>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // AccountProduct Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawAccountProductTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // AccountProduct's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AccountProduct's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AccountProductType.</summary>
        /// <returns>The new AccountProductType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AccountProductType>> CreateADummyAccountProductTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AccountProductType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AccountProductType Properties
                // Dynamic Linking
                // AccountProductType's Related Objects
                // AccountProductType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AccountStatus.</summary>
        /// <returns>The new AccountStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AccountStatus>> CreateADummyAccountStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AccountStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AccountStatus Properties
                // Dynamic Linking
                // AccountStatus's Related Objects
                // AccountStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AccountType.</summary>
        /// <returns>The new AccountType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AccountType>> CreateADummyAccountTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, int? storeID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AccountType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AccountType Properties
                mock.Object.StoreID = storeID;
                // Dynamic Linking
                // AccountType's Related Objects
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // AccountType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AccountUsageBalance.</summary>
        /// <returns>The new AccountUsageBalance.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AccountUsageBalance>> CreateADummyAccountUsageBalanceAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int quantity = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AccountUsageBalance>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AccountUsageBalance Properties
                mock.Object.MasterID = masterID;
                mock.Object.Quantity = quantity;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // AccountUsageBalance's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AccountUsageBalance's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AccountUserRole.</summary>
        /// <returns>The new AccountUserRole.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AccountUserRole>> CreateADummyAccountUserRoleAsync(bool active = false, DateTime createdDate = default, string customKey = null!, DateTime? endDate = null!, long? hash = null!, int iD = 1, string jsonAttributes = null!, int masterID = 1, int slaveID = 1, DateTime? startDate = null!, DateTime? updatedDate = null!)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AccountUserRole>();
                mock.SetupAllProperties();
                // AccountUserRole Properties
                mock.Object.Active = active;
                mock.Object.CreatedDate = createdDate;
                mock.Object.CustomKey = customKey;
                mock.Object.EndDate = endDate;
                mock.Object.Hash = hash;
                mock.Object.ID = iD;
                mock.Object.JsonAttributes = jsonAttributes;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.StartDate = startDate;
                mock.Object.UpdatedDate = updatedDate;
                // Dynamic Linking
                // AccountUserRole's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawUserRoles?.FirstOrDefault(x => x.Object.Id == mock.Object.SlaveID)?.Object);
                // AccountUserRole's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Contractor.</summary>
        /// <returns>The new Contractor.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Contractor>> CreateADummyContractorAsync(int id, string? key, string? jsonAttributes = null, int? accountID = null!, int? storeID = null!, int? userID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Contractor>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // Contractor Properties
                mock.Object.AccountID = accountID;
                mock.Object.StoreID = storeID;
                mock.Object.UserID = userID;
                // Dynamic Linking
                // Contractor's Related Objects
                mock.Setup(m => m.Account).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // Contractor's Associated Objects
                mock.Setup(m => m.ServiceAreas).Returns(() => RawServiceAreas?.Where(x => x.Object.ContractorID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ServiceArea>());
                return mock;
            });
        }

        /// <summary>Creates a dummy ServiceArea.</summary>
        /// <returns>The new ServiceArea.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ServiceArea>> CreateADummyServiceAreaAsync(int id, string? key, string? jsonAttributes = null, int addressID = 1, int contractorID = 1, decimal? radius = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ServiceArea>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ServiceArea Properties
                mock.Object.AddressID = addressID;
                mock.Object.ContractorID = contractorID;
                mock.Object.Radius = radius;
                // Dynamic Linking
                // ServiceArea's Related Objects
                mock.Setup(m => m.Address).Returns(() => RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                mock.Setup(m => m.Contractor).Returns(() => RawContractors?.FirstOrDefault(x => x.Object.ID == mock.Object.ContractorID)?.Object);
                // ServiceArea's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForAccounts(MockingSetup mockingSetup)
        {
            Func<Account> mockFuncAccount = () =>
            {
                var mock = new Mock<Account>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                mock.Setup(m => m.AccountUserRoles).Returns(() => mockingSetup.RawAccountUserRoles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountUserRole>());
                // Account Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawAccountTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawAccountStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawAccountImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountImage>());
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => mockingSetup.RawAccountFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.AccountID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                mock.Setup(m => m.CreditCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.CreditCurrencyID)?.Object);
                // Account's Associated Objects
                mock.Setup(m => m.AccountAssociations).Returns(() => mockingSetup.RawAccountAssociations?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountAssociation>());
                mock.Setup(m => m.AccountContacts).Returns(() => mockingSetup.RawAccountContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountContact>());
                mock.Setup(m => m.AccountCurrencies).Returns(() => mockingSetup.RawAccountCurrencies?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountCurrency>());
                mock.Setup(m => m.AccountPricePoints).Returns(() => mockingSetup.RawAccountPricePoints?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountPricePoint>());
                mock.Setup(m => m.AccountsAssociatedWith).Returns(() => mockingSetup.RawAccountAssociations?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountAssociation>());
                mock.Setup(m => m.Brands).Returns(() => mockingSetup.RawBrandAccounts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandAccount>());
                mock.Setup(m => m.Franchises).Returns(() => mockingSetup.RawFranchiseAccounts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseAccount>());
                mock.Setup(m => m.Products).Returns(() => mockingSetup.RawAccountProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AccountProduct>());
                mock.Setup(m => m.PurchaseOrders).Returns(() => mockingSetup.RawPurchaseOrders?.Where(x => x.Object.AccountID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrder>());
                mock.Setup(m => m.Stores).Returns(() => mockingSetup.RawStoreAccounts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreAccount>());
                mock.Setup(m => m.Subscriptions).Returns(() => mockingSetup.RawSubscriptions?.Where(x => x.Object.AccountID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Subscription>());
                mock.Setup(m => m.Users).Returns(() => mockingSetup.RawUsers?.Where(x => x.Object.AccountID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<User>());
                mock.Setup(m => m.Vendors).Returns(() => mockingSetup.RawVendorAccounts?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<VendorAccount>());
                // Account's Related Objects
                return mock.Object;
            };
            For<IAccount>().Use(() => mockFuncAccount());
            For<Account>().Use(() => mockFuncAccount());
            Func<AccountAssociation> mockFuncAccountAssociation = () =>
            {
                var mock = new Mock<AccountAssociation>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AccountAssociation Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawAccountAssociationTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AccountAssociation's Associated Objects
                // AccountAssociation's Related Objects
                return mock.Object;
            };
            For<IAccountAssociation>().Use(() => mockFuncAccountAssociation());
            For<AccountAssociation>().Use(() => mockFuncAccountAssociation());
            Func<AccountAssociationType> mockFuncAccountAssociationType = () =>
            {
                var mock = new Mock<AccountAssociationType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AccountAssociationType Properties
                // Dynamic Linking
                // AccountAssociationType's Associated Objects
                // AccountAssociationType's Related Objects
                return mock.Object;
            };
            For<IAccountAssociationType>().Use(() => mockFuncAccountAssociationType());
            For<AccountAssociationType>().Use(() => mockFuncAccountAssociationType());
            Func<AccountContact> mockFuncAccountContact = () =>
            {
                var mock = new Mock<AccountContact>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AccountContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AccountContact's Associated Objects
                // AccountContact's Related Objects
                return mock.Object;
            };
            For<IAccountContact>().Use(() => mockFuncAccountContact());
            For<AccountContact>().Use(() => mockFuncAccountContact());
            Func<AccountCurrency> mockFuncAccountCurrency = () =>
            {
                var mock = new Mock<AccountCurrency>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AccountCurrency Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AccountCurrency's Associated Objects
                // AccountCurrency's Related Objects
                return mock.Object;
            };
            For<IAccountCurrency>().Use(() => mockFuncAccountCurrency());
            For<AccountCurrency>().Use(() => mockFuncAccountCurrency());
            Func<AccountFile> mockFuncAccountFile = () =>
            {
                var mock = new Mock<AccountFile>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AccountFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AccountFile's Associated Objects
                // AccountFile's Related Objects
                return mock.Object;
            };
            For<IAccountFile>().Use(() => mockFuncAccountFile());
            For<AccountFile>().Use(() => mockFuncAccountFile());
            Func<AccountImage> mockFuncAccountImage = () =>
            {
                var mock = new Mock<AccountImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AccountImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawAccountImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // AccountImage's Associated Objects
                // AccountImage's Related Objects
                return mock.Object;
            };
            For<IAccountImage>().Use(() => mockFuncAccountImage());
            For<AccountImage>().Use(() => mockFuncAccountImage());
            Func<AccountImageType> mockFuncAccountImageType = () =>
            {
                var mock = new Mock<AccountImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AccountImageType Properties
                // Dynamic Linking
                // AccountImageType's Associated Objects
                // AccountImageType's Related Objects
                return mock.Object;
            };
            For<IAccountImageType>().Use(() => mockFuncAccountImageType());
            For<AccountImageType>().Use(() => mockFuncAccountImageType());
            Func<AccountPricePoint> mockFuncAccountPricePoint = () =>
            {
                var mock = new Mock<AccountPricePoint>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AccountPricePoint Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawPricePoints?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AccountPricePoint's Associated Objects
                // AccountPricePoint's Related Objects
                return mock.Object;
            };
            For<IAccountPricePoint>().Use(() => mockFuncAccountPricePoint());
            For<AccountPricePoint>().Use(() => mockFuncAccountPricePoint());
            Func<AccountProduct> mockFuncAccountProduct = () =>
            {
                var mock = new Mock<AccountProduct>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AccountProduct Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawAccountProductTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AccountProduct's Associated Objects
                // AccountProduct's Related Objects
                return mock.Object;
            };
            For<IAccountProduct>().Use(() => mockFuncAccountProduct());
            For<AccountProduct>().Use(() => mockFuncAccountProduct());
            Func<AccountProductType> mockFuncAccountProductType = () =>
            {
                var mock = new Mock<AccountProductType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AccountProductType Properties
                // Dynamic Linking
                // AccountProductType's Associated Objects
                // AccountProductType's Related Objects
                return mock.Object;
            };
            For<IAccountProductType>().Use(() => mockFuncAccountProductType());
            For<AccountProductType>().Use(() => mockFuncAccountProductType());
            Func<AccountStatus> mockFuncAccountStatus = () =>
            {
                var mock = new Mock<AccountStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AccountStatus Properties
                // Dynamic Linking
                // AccountStatus's Associated Objects
                // AccountStatus's Related Objects
                return mock.Object;
            };
            For<IAccountStatus>().Use(() => mockFuncAccountStatus());
            For<AccountStatus>().Use(() => mockFuncAccountStatus());
            Func<AccountType> mockFuncAccountType = () =>
            {
                var mock = new Mock<AccountType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AccountType Properties
                // Dynamic Linking
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // AccountType's Associated Objects
                // AccountType's Related Objects
                return mock.Object;
            };
            For<IAccountType>().Use(() => mockFuncAccountType());
            For<AccountType>().Use(() => mockFuncAccountType());
            Func<AccountUsageBalance> mockFuncAccountUsageBalance = () =>
            {
                var mock = new Mock<AccountUsageBalance>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AccountUsageBalance Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AccountUsageBalance's Associated Objects
                // AccountUsageBalance's Related Objects
                return mock.Object;
            };
            For<IAccountUsageBalance>().Use(() => mockFuncAccountUsageBalance());
            For<AccountUsageBalance>().Use(() => mockFuncAccountUsageBalance());
            Func<AccountUserRole> mockFuncAccountUserRole = () =>
            {
                var mock = new Mock<AccountUserRole>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AccountUserRole Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawUserRoles?.FirstOrDefault(x => x.Object.Id == mock.Object.SlaveID)?.Object);
                // AccountUserRole's Associated Objects
                // AccountUserRole's Related Objects
                return mock.Object;
            };
            For<IAccountUserRole>().Use(() => mockFuncAccountUserRole());
            For<AccountUserRole>().Use(() => mockFuncAccountUserRole());
            Func<Contractor> mockFuncContractor = () =>
            {
                var mock = new Mock<Contractor>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Contractor Properties
                // Dynamic Linking
                mock.Setup(m => m.Account).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // Contractor's Associated Objects
                mock.Setup(m => m.ServiceAreas).Returns(() => mockingSetup.RawServiceAreas?.Where(x => x.Object.ContractorID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ServiceArea>());
                // Contractor's Related Objects
                return mock.Object;
            };
            For<IContractor>().Use(() => mockFuncContractor());
            For<Contractor>().Use(() => mockFuncContractor());
            Func<ServiceArea> mockFuncServiceArea = () =>
            {
                var mock = new Mock<ServiceArea>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ServiceArea Properties
                // Dynamic Linking
                mock.Setup(m => m.Address).Returns(() => mockingSetup.RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                mock.Setup(m => m.Contractor).Returns(() => mockingSetup.RawContractors?.FirstOrDefault(x => x.Object.ID == mock.Object.ContractorID)?.Object);
                // ServiceArea's Associated Objects
                // ServiceArea's Related Objects
                return mock.Object;
            };
            For<IServiceArea>().Use(() => mockFuncServiceArea());
            For<ServiceArea>().Use(() => mockFuncServiceArea());
        }
    }
}
