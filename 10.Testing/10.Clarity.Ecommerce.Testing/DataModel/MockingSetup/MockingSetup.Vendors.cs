// <autogenerated>
// <copyright file="Vendors.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Vendors section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoVendors { private get; set; }

        // Enable the tables specifically on run
        public bool DoVendorTable { private get; set; }
        public bool DoVendorAccountTable { private get; set; }
        public bool DoVendorImageTable { private get; set; }
        public bool DoVendorImageTypeTable { private get; set; }
        public bool DoVendorManufacturerTable { private get; set; }
        public bool DoVendorProductTable { private get; set; }
        public bool DoVendorTypeTable { private get; set; }

        // Dirty Checking
        public bool VendorDirty { private get; set; }
        public bool VendorAccountDirty { private get; set; }
        public bool VendorImageDirty { private get; set; }
        public bool VendorImageTypeDirty { private get; set; }
        public bool VendorManufacturerDirty { private get; set; }
        public bool VendorProductDirty { private get; set; }
        public bool VendorTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<Vendor>>? Vendors { get; private set; }
        public Mock<DbSet<VendorAccount>>? VendorAccounts { get; private set; }
        public Mock<DbSet<VendorImage>>? VendorImages { get; private set; }
        public Mock<DbSet<VendorImageType>>? VendorImageTypes { get; private set; }
        public Mock<DbSet<VendorManufacturer>>? VendorManufacturers { get; private set; }
        public Mock<DbSet<VendorProduct>>? VendorProducts { get; private set; }
        public Mock<DbSet<VendorType>>? VendorTypes { get; private set; }

        // Raw Data
        public List<Mock<Vendor>>? RawVendors { get; private set; }
        public List<Mock<VendorAccount>>? RawVendorAccounts { get; private set; }
        public List<Mock<VendorImage>>? RawVendorImages { get; private set; }
        public List<Mock<VendorImageType>>? RawVendorImageTypes { get; private set; }
        public List<Mock<VendorManufacturer>>? RawVendorManufacturers { get; private set; }
        public List<Mock<VendorProduct>>? RawVendorProducts { get; private set; }
        public List<Mock<VendorType>>? RawVendorTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksVendorsAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoVendors || (DoVendorTable && (!dirtyOnly || VendorDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawVendors == null) { throw new InvalidOperationException("Raw Vendors was null"); }
                    await InitializeMockSetFromListAsync(Vendors, RawVendors).ConfigureAwait(false);
                    context.Setup(m => m.Vendors).Returns(() => Vendors?.Object!);
                    context.Setup(m => m.Set<Vendor>()).Returns(() => Vendors?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoVendors || (DoVendorAccountTable && (!dirtyOnly || VendorAccountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawVendorAccounts == null) { throw new InvalidOperationException("Raw VendorAccounts was null"); }
                    await InitializeMockSetFromListAsync(VendorAccounts, RawVendorAccounts).ConfigureAwait(false);
                    context.Setup(m => m.VendorAccounts).Returns(() => VendorAccounts?.Object!);
                    context.Setup(m => m.Set<VendorAccount>()).Returns(() => VendorAccounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoVendors || (DoVendorImageTable && (!dirtyOnly || VendorImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawVendorImages == null) { throw new InvalidOperationException("Raw VendorImages was null"); }
                    await InitializeMockSetFromListAsync(VendorImages, RawVendorImages).ConfigureAwait(false);
                    context.Setup(m => m.VendorImages).Returns(() => VendorImages?.Object!);
                    context.Setup(m => m.Set<VendorImage>()).Returns(() => VendorImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoVendors || (DoVendorImageTypeTable && (!dirtyOnly || VendorImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawVendorImageTypes == null) { throw new InvalidOperationException("Raw VendorImageTypes was null"); }
                    await InitializeMockSetFromListAsync(VendorImageTypes, RawVendorImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.VendorImageTypes).Returns(() => VendorImageTypes?.Object!);
                    context.Setup(m => m.Set<VendorImageType>()).Returns(() => VendorImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoVendors || (DoVendorManufacturerTable && (!dirtyOnly || VendorManufacturerDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawVendorManufacturers == null) { throw new InvalidOperationException("Raw VendorManufacturers was null"); }
                    await InitializeMockSetFromListAsync(VendorManufacturers, RawVendorManufacturers).ConfigureAwait(false);
                    context.Setup(m => m.VendorManufacturers).Returns(() => VendorManufacturers?.Object!);
                    context.Setup(m => m.Set<VendorManufacturer>()).Returns(() => VendorManufacturers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoVendors || (DoVendorProductTable && (!dirtyOnly || VendorProductDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawVendorProducts == null) { throw new InvalidOperationException("Raw VendorProducts was null"); }
                    await InitializeMockSetFromListAsync(VendorProducts, RawVendorProducts).ConfigureAwait(false);
                    context.Setup(m => m.VendorProducts).Returns(() => VendorProducts?.Object!);
                    context.Setup(m => m.Set<VendorProduct>()).Returns(() => VendorProducts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoVendors || (DoVendorTypeTable && (!dirtyOnly || VendorTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawVendorTypes == null) { throw new InvalidOperationException("Raw VendorTypes was null"); }
                    await InitializeMockSetFromListAsync(VendorTypes, RawVendorTypes).ConfigureAwait(false);
                    context.Setup(m => m.VendorTypes).Returns(() => VendorTypes?.Object!);
                    context.Setup(m => m.Set<VendorType>()).Returns(() => VendorTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetVendorsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Vendor>> data)
        {
            if (!DoAll && !DoVendors && !DoVendorTable) { return; }
            Vendors ??= new Mock<DbSet<Vendor>>();
            await InitializeMockSetFromListAsync(Vendors, data).ConfigureAwait(false);
            context.Setup(m => m.Vendors).Returns(() => Vendors.Object);
            context.Setup(m => m.Set<Vendor>()).Returns(() => Vendors.Object);
            TableRecordCounts[typeof(Vendor)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Vendor)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Vendor)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Vendor)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetVendorAccountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<VendorAccount>> data)
        {
            if (!DoAll && !DoVendors && !DoVendorAccountTable) { return; }
            VendorAccounts ??= new Mock<DbSet<VendorAccount>>();
            await InitializeMockSetFromListAsync(VendorAccounts, data).ConfigureAwait(false);
            context.Setup(m => m.VendorAccounts).Returns(() => VendorAccounts.Object);
            context.Setup(m => m.Set<VendorAccount>()).Returns(() => VendorAccounts.Object);
            TableRecordCounts[typeof(VendorAccount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(VendorAccount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(VendorAccount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetVendorImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<VendorImage>> data)
        {
            if (!DoAll && !DoVendors && !DoVendorImageTable) { return; }
            VendorImages ??= new Mock<DbSet<VendorImage>>();
            await InitializeMockSetFromListAsync(VendorImages, data).ConfigureAwait(false);
            context.Setup(m => m.VendorImages).Returns(() => VendorImages.Object);
            context.Setup(m => m.Set<VendorImage>()).Returns(() => VendorImages.Object);
            TableRecordCounts[typeof(VendorImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(VendorImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(VendorImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(VendorImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetVendorImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<VendorImageType>> data)
        {
            if (!DoAll && !DoVendors && !DoVendorImageTypeTable) { return; }
            VendorImageTypes ??= new Mock<DbSet<VendorImageType>>();
            await InitializeMockSetFromListAsync(VendorImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.VendorImageTypes).Returns(() => VendorImageTypes.Object);
            context.Setup(m => m.Set<VendorImageType>()).Returns(() => VendorImageTypes.Object);
            TableRecordCounts[typeof(VendorImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(VendorImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(VendorImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(VendorImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(VendorImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetVendorManufacturersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<VendorManufacturer>> data)
        {
            if (!DoAll && !DoVendors && !DoVendorManufacturerTable) { return; }
            VendorManufacturers ??= new Mock<DbSet<VendorManufacturer>>();
            await InitializeMockSetFromListAsync(VendorManufacturers, data).ConfigureAwait(false);
            context.Setup(m => m.VendorManufacturers).Returns(() => VendorManufacturers.Object);
            context.Setup(m => m.Set<VendorManufacturer>()).Returns(() => VendorManufacturers.Object);
            TableRecordCounts[typeof(VendorManufacturer)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(VendorManufacturer)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(VendorManufacturer)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetVendorProductsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<VendorProduct>> data)
        {
            if (!DoAll && !DoVendors && !DoVendorProductTable) { return; }
            VendorProducts ??= new Mock<DbSet<VendorProduct>>();
            await InitializeMockSetFromListAsync(VendorProducts, data).ConfigureAwait(false);
            context.Setup(m => m.VendorProducts).Returns(() => VendorProducts.Object);
            context.Setup(m => m.Set<VendorProduct>()).Returns(() => VendorProducts.Object);
            TableRecordCounts[typeof(VendorProduct)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(VendorProduct)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(VendorProduct)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetVendorTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<VendorType>> data)
        {
            if (!DoAll && !DoVendors && !DoVendorTypeTable) { return; }
            VendorTypes ??= new Mock<DbSet<VendorType>>();
            await InitializeMockSetFromListAsync(VendorTypes, data).ConfigureAwait(false);
            context.Setup(m => m.VendorTypes).Returns(() => VendorTypes.Object);
            context.Setup(m => m.Set<VendorType>()).Returns(() => VendorTypes.Object);
            TableRecordCounts[typeof(VendorType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(VendorType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(VendorType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(VendorType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(VendorType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy Vendor.</summary>
        /// <returns>The new Vendor.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Vendor>> CreateADummyVendorAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, int? contactID = null, string? jsonAttributes = null, string accountNumber = null!, bool allowDropShip = false, decimal? defaultDiscount = null!, string emailSubject = null!, decimal? minimumForFreeShippingDollarAmount = null!, decimal? minimumForFreeShippingDollarAmountAfter = null!, int? minimumForFreeShippingDollarAmountBufferCategoryID = null!, int? minimumForFreeShippingDollarAmountBufferProductID = null!, string minimumForFreeShippingDollarAmountIgnoredAcceptedMessage = null!, string minimumForFreeShippingDollarAmountWarningMessage = null!, decimal? minimumForFreeShippingQuantityAmount = null!, decimal? minimumForFreeShippingQuantityAmountAfter = null!, int? minimumForFreeShippingQuantityAmountBufferCategoryID = null!, int? minimumForFreeShippingQuantityAmountBufferProductID = null!, string minimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = null!, string minimumForFreeShippingQuantityAmountWarningMessage = null!, decimal? minimumOrderDollarAmount = null!, decimal? minimumOrderDollarAmountAfter = null!, int? minimumOrderDollarAmountBufferCategoryID = null!, int? minimumOrderDollarAmountBufferProductID = null!, decimal? minimumOrderDollarAmountOverrideFee = null!, string minimumOrderDollarAmountOverrideFeeAcceptedMessage = null!, bool minimumOrderDollarAmountOverrideFeeIsPercent = false, string minimumOrderDollarAmountOverrideFeeWarningMessage = null!, string minimumOrderDollarAmountWarningMessage = null!, decimal? minimumOrderQuantityAmount = null!, decimal? minimumOrderQuantityAmountAfter = null!, int? minimumOrderQuantityAmountBufferCategoryID = null!, int? minimumOrderQuantityAmountBufferProductID = null!, decimal? minimumOrderQuantityAmountOverrideFee = null!, string minimumOrderQuantityAmountOverrideFeeAcceptedMessage = null!, bool minimumOrderQuantityAmountOverrideFeeIsPercent = false, string minimumOrderQuantityAmountOverrideFeeWarningMessage = null!, string minimumOrderQuantityAmountWarningMessage = null!, bool mustResetPassword = false, string notes1 = null!, string passwordHash = null!, decimal? recommendedPurchaseOrderDollarAmount = null!, string securityToken = null!, string sendMethod = null!, string shipTo = null!, string shipViaNotes = null!, string signBy = null!, string termNotes = null!, string terms = null!, string userName = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Vendor>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveANullableContactBase Properties
                mock.Object.ContactID = contactID;
                // Vendor Properties
                mock.Object.AccountNumber = accountNumber;
                mock.Object.AllowDropShip = allowDropShip;
                mock.Object.DefaultDiscount = defaultDiscount;
                mock.Object.EmailSubject = emailSubject;
                mock.Object.MinimumForFreeShippingDollarAmount = minimumForFreeShippingDollarAmount;
                mock.Object.MinimumForFreeShippingDollarAmountAfter = minimumForFreeShippingDollarAmountAfter;
                mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID = minimumForFreeShippingDollarAmountBufferCategoryID;
                mock.Object.MinimumForFreeShippingDollarAmountBufferProductID = minimumForFreeShippingDollarAmountBufferProductID;
                mock.Object.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = minimumForFreeShippingDollarAmountIgnoredAcceptedMessage;
                mock.Object.MinimumForFreeShippingDollarAmountWarningMessage = minimumForFreeShippingDollarAmountWarningMessage;
                mock.Object.MinimumForFreeShippingQuantityAmount = minimumForFreeShippingQuantityAmount;
                mock.Object.MinimumForFreeShippingQuantityAmountAfter = minimumForFreeShippingQuantityAmountAfter;
                mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID = minimumForFreeShippingQuantityAmountBufferCategoryID;
                mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID = minimumForFreeShippingQuantityAmountBufferProductID;
                mock.Object.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = minimumForFreeShippingQuantityAmountIgnoredAcceptedMessage;
                mock.Object.MinimumForFreeShippingQuantityAmountWarningMessage = minimumForFreeShippingQuantityAmountWarningMessage;
                mock.Object.MinimumOrderDollarAmount = minimumOrderDollarAmount;
                mock.Object.MinimumOrderDollarAmountAfter = minimumOrderDollarAmountAfter;
                mock.Object.MinimumOrderDollarAmountBufferCategoryID = minimumOrderDollarAmountBufferCategoryID;
                mock.Object.MinimumOrderDollarAmountBufferProductID = minimumOrderDollarAmountBufferProductID;
                mock.Object.MinimumOrderDollarAmountOverrideFee = minimumOrderDollarAmountOverrideFee;
                mock.Object.MinimumOrderDollarAmountOverrideFeeAcceptedMessage = minimumOrderDollarAmountOverrideFeeAcceptedMessage;
                mock.Object.MinimumOrderDollarAmountOverrideFeeIsPercent = minimumOrderDollarAmountOverrideFeeIsPercent;
                mock.Object.MinimumOrderDollarAmountOverrideFeeWarningMessage = minimumOrderDollarAmountOverrideFeeWarningMessage;
                mock.Object.MinimumOrderDollarAmountWarningMessage = minimumOrderDollarAmountWarningMessage;
                mock.Object.MinimumOrderQuantityAmount = minimumOrderQuantityAmount;
                mock.Object.MinimumOrderQuantityAmountAfter = minimumOrderQuantityAmountAfter;
                mock.Object.MinimumOrderQuantityAmountBufferCategoryID = minimumOrderQuantityAmountBufferCategoryID;
                mock.Object.MinimumOrderQuantityAmountBufferProductID = minimumOrderQuantityAmountBufferProductID;
                mock.Object.MinimumOrderQuantityAmountOverrideFee = minimumOrderQuantityAmountOverrideFee;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = minimumOrderQuantityAmountOverrideFeeAcceptedMessage;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeIsPercent = minimumOrderQuantityAmountOverrideFeeIsPercent;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeWarningMessage = minimumOrderQuantityAmountOverrideFeeWarningMessage;
                mock.Object.MinimumOrderQuantityAmountWarningMessage = minimumOrderQuantityAmountWarningMessage;
                mock.Object.MustResetPassword = mustResetPassword;
                mock.Object.Notes1 = notes1;
                mock.Object.PasswordHash = passwordHash;
                mock.Object.RecommendedPurchaseOrderDollarAmount = recommendedPurchaseOrderDollarAmount;
                mock.Object.SecurityToken = securityToken;
                mock.Object.SendMethod = sendMethod;
                mock.Object.ShipTo = shipTo;
                mock.Object.ShipViaNotes = shipViaNotes;
                mock.Object.SignBy = signBy;
                mock.Object.TermNotes = termNotes;
                mock.Object.Terms = terms;
                mock.Object.UserName = userName;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawVendorTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => RawContacts == null || mock.Object.ContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawVendorImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<VendorImage>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.VendorID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // Vendor's Related Objects
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferProductID)?.Object);
                // Vendor's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => RawVendorAccounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<VendorAccount>());
                mock.Setup(m => m.Brands).Returns(() => RawBrandVendors?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandVendor>());
                mock.Setup(m => m.Franchises).Returns(() => RawFranchiseVendors?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseVendor>());
                mock.Setup(m => m.Manufacturers).Returns(() => RawVendorManufacturers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<VendorManufacturer>());
                mock.Setup(m => m.Products).Returns(() => RawVendorProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<VendorProduct>());
                mock.Setup(m => m.PurchaseOrders).Returns(() => RawPurchaseOrders?.Where(x => x.Object.VendorID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrder>());
                mock.Setup(m => m.Reviews).Returns(() => RawReviews?.Where(x => x.Object.VendorID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.Shipments).Returns(() => RawShipments?.Where(x => x.Object.VendorID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Shipment>());
                mock.Setup(m => m.Stores).Returns(() => RawStoreVendors?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreVendor>());
                return mock;
            });
        }

        /// <summary>Creates a dummy VendorAccount.</summary>
        /// <returns>The new VendorAccount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<VendorAccount>> CreateADummyVendorAccountAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<VendorAccount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // VendorAccount Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // VendorAccount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // VendorAccount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy VendorImage.</summary>
        /// <returns>The new VendorImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<VendorImage>> CreateADummyVendorImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<VendorImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // VendorImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawVendorImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // VendorImage's Related Objects
                // VendorImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy VendorImageType.</summary>
        /// <returns>The new VendorImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<VendorImageType>> CreateADummyVendorImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<VendorImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // VendorImageType Properties
                // Dynamic Linking
                // VendorImageType's Related Objects
                // VendorImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy VendorManufacturer.</summary>
        /// <returns>The new VendorManufacturer.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<VendorManufacturer>> CreateADummyVendorManufacturerAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<VendorManufacturer>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // VendorManufacturer Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // VendorManufacturer's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // VendorManufacturer's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy VendorProduct.</summary>
        /// <returns>The new VendorProduct.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<VendorProduct>> CreateADummyVendorProductAsync(int id, string? key, string? jsonAttributes = null, decimal? actualCost = null!, string bin = null!, decimal? costMultiplier = null!, int? inventoryCount = null!, decimal? listedPrice = null!, int masterID = 1, int? maximumInventory = null!, int? minimumInventory = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<VendorProduct>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // VendorProduct Properties
                mock.Object.ActualCost = actualCost;
                mock.Object.Bin = bin;
                mock.Object.CostMultiplier = costMultiplier;
                mock.Object.InventoryCount = inventoryCount;
                mock.Object.ListedPrice = listedPrice;
                mock.Object.MasterID = masterID;
                mock.Object.MaximumInventory = maximumInventory;
                mock.Object.MinimumInventory = minimumInventory;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // VendorProduct's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // VendorProduct's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy VendorType.</summary>
        /// <returns>The new VendorType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<VendorType>> CreateADummyVendorTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<VendorType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // VendorType Properties
                // Dynamic Linking
                // VendorType's Related Objects
                // VendorType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForVendors(MockingSetup mockingSetup)
        {
            Func<Vendor> mockFuncVendor = () =>
            {
                var mock = new Mock<Vendor>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Vendor Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawVendorTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawVendorImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<VendorImage>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.VendorID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferProductID)?.Object);
                // Vendor's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => mockingSetup.RawVendorAccounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<VendorAccount>());
                mock.Setup(m => m.Brands).Returns(() => mockingSetup.RawBrandVendors?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandVendor>());
                mock.Setup(m => m.Franchises).Returns(() => mockingSetup.RawFranchiseVendors?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseVendor>());
                mock.Setup(m => m.Manufacturers).Returns(() => mockingSetup.RawVendorManufacturers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<VendorManufacturer>());
                mock.Setup(m => m.Products).Returns(() => mockingSetup.RawVendorProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<VendorProduct>());
                mock.Setup(m => m.PurchaseOrders).Returns(() => mockingSetup.RawPurchaseOrders?.Where(x => x.Object.VendorID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrder>());
                mock.Setup(m => m.Reviews).Returns(() => mockingSetup.RawReviews?.Where(x => x.Object.VendorID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Review>());
                mock.Setup(m => m.Shipments).Returns(() => mockingSetup.RawShipments?.Where(x => x.Object.VendorID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Shipment>());
                mock.Setup(m => m.Stores).Returns(() => mockingSetup.RawStoreVendors?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreVendor>());
                // Vendor's Related Objects
                return mock.Object;
            };
            For<IVendor>().Use(() => mockFuncVendor());
            For<Vendor>().Use(() => mockFuncVendor());
            Func<VendorAccount> mockFuncVendorAccount = () =>
            {
                var mock = new Mock<VendorAccount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // VendorAccount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // VendorAccount's Associated Objects
                // VendorAccount's Related Objects
                return mock.Object;
            };
            For<IVendorAccount>().Use(() => mockFuncVendorAccount());
            For<VendorAccount>().Use(() => mockFuncVendorAccount());
            Func<VendorImage> mockFuncVendorImage = () =>
            {
                var mock = new Mock<VendorImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // VendorImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawVendorImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // VendorImage's Associated Objects
                // VendorImage's Related Objects
                return mock.Object;
            };
            For<IVendorImage>().Use(() => mockFuncVendorImage());
            For<VendorImage>().Use(() => mockFuncVendorImage());
            Func<VendorImageType> mockFuncVendorImageType = () =>
            {
                var mock = new Mock<VendorImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // VendorImageType Properties
                // Dynamic Linking
                // VendorImageType's Associated Objects
                // VendorImageType's Related Objects
                return mock.Object;
            };
            For<IVendorImageType>().Use(() => mockFuncVendorImageType());
            For<VendorImageType>().Use(() => mockFuncVendorImageType());
            Func<VendorManufacturer> mockFuncVendorManufacturer = () =>
            {
                var mock = new Mock<VendorManufacturer>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // VendorManufacturer Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // VendorManufacturer's Associated Objects
                // VendorManufacturer's Related Objects
                return mock.Object;
            };
            For<IVendorManufacturer>().Use(() => mockFuncVendorManufacturer());
            For<VendorManufacturer>().Use(() => mockFuncVendorManufacturer());
            Func<VendorProduct> mockFuncVendorProduct = () =>
            {
                var mock = new Mock<VendorProduct>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // VendorProduct Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // VendorProduct's Associated Objects
                // VendorProduct's Related Objects
                return mock.Object;
            };
            For<IVendorProduct>().Use(() => mockFuncVendorProduct());
            For<VendorProduct>().Use(() => mockFuncVendorProduct());
            Func<VendorType> mockFuncVendorType = () =>
            {
                var mock = new Mock<VendorType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // VendorType Properties
                // Dynamic Linking
                // VendorType's Associated Objects
                // VendorType's Related Objects
                return mock.Object;
            };
            For<IVendorType>().Use(() => mockFuncVendorType());
            For<VendorType>().Use(() => mockFuncVendorType());
        }
    }
}
