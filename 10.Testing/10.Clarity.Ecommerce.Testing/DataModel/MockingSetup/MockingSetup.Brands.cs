// <autogenerated>
// <copyright file="Brands.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Brands section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoBrands { private get; set; }

        // Enable the tables specifically on run
        public bool DoBrandTable { private get; set; }
        public bool DoBrandAccountTable { private get; set; }
        public bool DoBrandCategoryTable { private get; set; }
        public bool DoBrandCurrencyTable { private get; set; }
        public bool DoBrandFranchiseTable { private get; set; }
        public bool DoBrandImageTable { private get; set; }
        public bool DoBrandImageTypeTable { private get; set; }
        public bool DoBrandInventoryLocationTable { private get; set; }
        public bool DoBrandInventoryLocationTypeTable { private get; set; }
        public bool DoBrandLanguageTable { private get; set; }
        public bool DoBrandManufacturerTable { private get; set; }
        public bool DoBrandProductTable { private get; set; }
        public bool DoBrandSiteDomainTable { private get; set; }
        public bool DoBrandStoreTable { private get; set; }
        public bool DoBrandUserTable { private get; set; }
        public bool DoBrandVendorTable { private get; set; }

        // Dirty Checking
        public bool BrandDirty { private get; set; }
        public bool BrandAccountDirty { private get; set; }
        public bool BrandCategoryDirty { private get; set; }
        public bool BrandCurrencyDirty { private get; set; }
        public bool BrandFranchiseDirty { private get; set; }
        public bool BrandImageDirty { private get; set; }
        public bool BrandImageTypeDirty { private get; set; }
        public bool BrandInventoryLocationDirty { private get; set; }
        public bool BrandInventoryLocationTypeDirty { private get; set; }
        public bool BrandLanguageDirty { private get; set; }
        public bool BrandManufacturerDirty { private get; set; }
        public bool BrandProductDirty { private get; set; }
        public bool BrandSiteDomainDirty { private get; set; }
        public bool BrandStoreDirty { private get; set; }
        public bool BrandUserDirty { private get; set; }
        public bool BrandVendorDirty { private get; set; }

        // Sets
        public Mock<DbSet<Brand>>? Brands { get; private set; }
        public Mock<DbSet<BrandAccount>>? BrandAccounts { get; private set; }
        public Mock<DbSet<BrandCategory>>? BrandCategories { get; private set; }
        public Mock<DbSet<BrandCurrency>>? BrandCurrencies { get; private set; }
        public Mock<DbSet<BrandFranchise>>? BrandFranchises { get; private set; }
        public Mock<DbSet<BrandImage>>? BrandImages { get; private set; }
        public Mock<DbSet<BrandImageType>>? BrandImageTypes { get; private set; }
        public Mock<DbSet<BrandInventoryLocation>>? BrandInventoryLocations { get; private set; }
        public Mock<DbSet<BrandInventoryLocationType>>? BrandInventoryLocationTypes { get; private set; }
        public Mock<DbSet<BrandLanguage>>? BrandLanguages { get; private set; }
        public Mock<DbSet<BrandManufacturer>>? BrandManufacturers { get; private set; }
        public Mock<DbSet<BrandProduct>>? BrandProducts { get; private set; }
        public Mock<DbSet<BrandSiteDomain>>? BrandSiteDomains { get; private set; }
        public Mock<DbSet<BrandStore>>? BrandStores { get; private set; }
        public Mock<DbSet<BrandUser>>? BrandUsers { get; private set; }
        public Mock<DbSet<BrandVendor>>? BrandVendors { get; private set; }

        // Raw Data
        public List<Mock<Brand>>? RawBrands { get; private set; }
        public List<Mock<BrandAccount>>? RawBrandAccounts { get; private set; }
        public List<Mock<BrandCategory>>? RawBrandCategories { get; private set; }
        public List<Mock<BrandCurrency>>? RawBrandCurrencies { get; private set; }
        public List<Mock<BrandFranchise>>? RawBrandFranchises { get; private set; }
        public List<Mock<BrandImage>>? RawBrandImages { get; private set; }
        public List<Mock<BrandImageType>>? RawBrandImageTypes { get; private set; }
        public List<Mock<BrandInventoryLocation>>? RawBrandInventoryLocations { get; private set; }
        public List<Mock<BrandInventoryLocationType>>? RawBrandInventoryLocationTypes { get; private set; }
        public List<Mock<BrandLanguage>>? RawBrandLanguages { get; private set; }
        public List<Mock<BrandManufacturer>>? RawBrandManufacturers { get; private set; }
        public List<Mock<BrandProduct>>? RawBrandProducts { get; private set; }
        public List<Mock<BrandSiteDomain>>? RawBrandSiteDomains { get; private set; }
        public List<Mock<BrandStore>>? RawBrandStores { get; private set; }
        public List<Mock<BrandUser>>? RawBrandUsers { get; private set; }
        public List<Mock<BrandVendor>>? RawBrandVendors { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksBrandsAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoBrands || (DoBrandTable && (!dirtyOnly || BrandDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrands == null) { throw new InvalidOperationException("Raw Brands was null"); }
                    await InitializeMockSetFromListAsync(Brands, RawBrands).ConfigureAwait(false);
                    context.Setup(m => m.Brands).Returns(() => Brands?.Object!);
                    context.Setup(m => m.Set<Brand>()).Returns(() => Brands?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandAccountTable && (!dirtyOnly || BrandAccountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandAccounts == null) { throw new InvalidOperationException("Raw BrandAccounts was null"); }
                    await InitializeMockSetFromListAsync(BrandAccounts, RawBrandAccounts).ConfigureAwait(false);
                    context.Setup(m => m.BrandAccounts).Returns(() => BrandAccounts?.Object!);
                    context.Setup(m => m.Set<BrandAccount>()).Returns(() => BrandAccounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandCategoryTable && (!dirtyOnly || BrandCategoryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandCategories == null) { throw new InvalidOperationException("Raw BrandCategories was null"); }
                    await InitializeMockSetFromListAsync(BrandCategories, RawBrandCategories).ConfigureAwait(false);
                    context.Setup(m => m.BrandCategories).Returns(() => BrandCategories?.Object!);
                    context.Setup(m => m.Set<BrandCategory>()).Returns(() => BrandCategories?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandCurrencyTable && (!dirtyOnly || BrandCurrencyDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandCurrencies == null) { throw new InvalidOperationException("Raw BrandCurrencies was null"); }
                    await InitializeMockSetFromListAsync(BrandCurrencies, RawBrandCurrencies).ConfigureAwait(false);
                    context.Setup(m => m.BrandCurrencies).Returns(() => BrandCurrencies?.Object!);
                    context.Setup(m => m.Set<BrandCurrency>()).Returns(() => BrandCurrencies?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandFranchiseTable && (!dirtyOnly || BrandFranchiseDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandFranchises == null) { throw new InvalidOperationException("Raw BrandFranchises was null"); }
                    await InitializeMockSetFromListAsync(BrandFranchises, RawBrandFranchises).ConfigureAwait(false);
                    context.Setup(m => m.BrandFranchises).Returns(() => BrandFranchises?.Object!);
                    context.Setup(m => m.Set<BrandFranchise>()).Returns(() => BrandFranchises?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandImageTable && (!dirtyOnly || BrandImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandImages == null) { throw new InvalidOperationException("Raw BrandImages was null"); }
                    await InitializeMockSetFromListAsync(BrandImages, RawBrandImages).ConfigureAwait(false);
                    context.Setup(m => m.BrandImages).Returns(() => BrandImages?.Object!);
                    context.Setup(m => m.Set<BrandImage>()).Returns(() => BrandImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandImageTypeTable && (!dirtyOnly || BrandImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandImageTypes == null) { throw new InvalidOperationException("Raw BrandImageTypes was null"); }
                    await InitializeMockSetFromListAsync(BrandImageTypes, RawBrandImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.BrandImageTypes).Returns(() => BrandImageTypes?.Object!);
                    context.Setup(m => m.Set<BrandImageType>()).Returns(() => BrandImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandInventoryLocationTable && (!dirtyOnly || BrandInventoryLocationDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandInventoryLocations == null) { throw new InvalidOperationException("Raw BrandInventoryLocations was null"); }
                    await InitializeMockSetFromListAsync(BrandInventoryLocations, RawBrandInventoryLocations).ConfigureAwait(false);
                    context.Setup(m => m.BrandInventoryLocations).Returns(() => BrandInventoryLocations?.Object!);
                    context.Setup(m => m.Set<BrandInventoryLocation>()).Returns(() => BrandInventoryLocations?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandInventoryLocationTypeTable && (!dirtyOnly || BrandInventoryLocationTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandInventoryLocationTypes == null) { throw new InvalidOperationException("Raw BrandInventoryLocationTypes was null"); }
                    await InitializeMockSetFromListAsync(BrandInventoryLocationTypes, RawBrandInventoryLocationTypes).ConfigureAwait(false);
                    context.Setup(m => m.BrandInventoryLocationTypes).Returns(() => BrandInventoryLocationTypes?.Object!);
                    context.Setup(m => m.Set<BrandInventoryLocationType>()).Returns(() => BrandInventoryLocationTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandLanguageTable && (!dirtyOnly || BrandLanguageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandLanguages == null) { throw new InvalidOperationException("Raw BrandLanguages was null"); }
                    await InitializeMockSetFromListAsync(BrandLanguages, RawBrandLanguages).ConfigureAwait(false);
                    context.Setup(m => m.BrandLanguages).Returns(() => BrandLanguages?.Object!);
                    context.Setup(m => m.Set<BrandLanguage>()).Returns(() => BrandLanguages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandManufacturerTable && (!dirtyOnly || BrandManufacturerDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandManufacturers == null) { throw new InvalidOperationException("Raw BrandManufacturers was null"); }
                    await InitializeMockSetFromListAsync(BrandManufacturers, RawBrandManufacturers).ConfigureAwait(false);
                    context.Setup(m => m.BrandManufacturers).Returns(() => BrandManufacturers?.Object!);
                    context.Setup(m => m.Set<BrandManufacturer>()).Returns(() => BrandManufacturers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandProductTable && (!dirtyOnly || BrandProductDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandProducts == null) { throw new InvalidOperationException("Raw BrandProducts was null"); }
                    await InitializeMockSetFromListAsync(BrandProducts, RawBrandProducts).ConfigureAwait(false);
                    context.Setup(m => m.BrandProducts).Returns(() => BrandProducts?.Object!);
                    context.Setup(m => m.Set<BrandProduct>()).Returns(() => BrandProducts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandSiteDomainTable && (!dirtyOnly || BrandSiteDomainDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandSiteDomains == null) { throw new InvalidOperationException("Raw BrandSiteDomains was null"); }
                    await InitializeMockSetFromListAsync(BrandSiteDomains, RawBrandSiteDomains).ConfigureAwait(false);
                    context.Setup(m => m.BrandSiteDomains).Returns(() => BrandSiteDomains?.Object!);
                    context.Setup(m => m.Set<BrandSiteDomain>()).Returns(() => BrandSiteDomains?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandStoreTable && (!dirtyOnly || BrandStoreDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandStores == null) { throw new InvalidOperationException("Raw BrandStores was null"); }
                    await InitializeMockSetFromListAsync(BrandStores, RawBrandStores).ConfigureAwait(false);
                    context.Setup(m => m.BrandStores).Returns(() => BrandStores?.Object!);
                    context.Setup(m => m.Set<BrandStore>()).Returns(() => BrandStores?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandUserTable && (!dirtyOnly || BrandUserDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandUsers == null) { throw new InvalidOperationException("Raw BrandUsers was null"); }
                    await InitializeMockSetFromListAsync(BrandUsers, RawBrandUsers).ConfigureAwait(false);
                    context.Setup(m => m.BrandUsers).Returns(() => BrandUsers?.Object!);
                    context.Setup(m => m.Set<BrandUser>()).Returns(() => BrandUsers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBrands || (DoBrandVendorTable && (!dirtyOnly || BrandVendorDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBrandVendors == null) { throw new InvalidOperationException("Raw BrandVendors was null"); }
                    await InitializeMockSetFromListAsync(BrandVendors, RawBrandVendors).ConfigureAwait(false);
                    context.Setup(m => m.BrandVendors).Returns(() => BrandVendors?.Object!);
                    context.Setup(m => m.Set<BrandVendor>()).Returns(() => BrandVendors?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Brand>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandTable) { return; }
            Brands ??= new Mock<DbSet<Brand>>();
            await InitializeMockSetFromListAsync(Brands, data).ConfigureAwait(false);
            context.Setup(m => m.Brands).Returns(() => Brands.Object);
            context.Setup(m => m.Set<Brand>()).Returns(() => Brands.Object);
            TableRecordCounts[typeof(Brand)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Brand)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Brand)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Brand)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandAccountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandAccount>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandAccountTable) { return; }
            BrandAccounts ??= new Mock<DbSet<BrandAccount>>();
            await InitializeMockSetFromListAsync(BrandAccounts, data).ConfigureAwait(false);
            context.Setup(m => m.BrandAccounts).Returns(() => BrandAccounts.Object);
            context.Setup(m => m.Set<BrandAccount>()).Returns(() => BrandAccounts.Object);
            TableRecordCounts[typeof(BrandAccount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandAccount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandAccount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandCategoriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandCategory>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandCategoryTable) { return; }
            BrandCategories ??= new Mock<DbSet<BrandCategory>>();
            await InitializeMockSetFromListAsync(BrandCategories, data).ConfigureAwait(false);
            context.Setup(m => m.BrandCategories).Returns(() => BrandCategories.Object);
            context.Setup(m => m.Set<BrandCategory>()).Returns(() => BrandCategories.Object);
            TableRecordCounts[typeof(BrandCategory)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandCategory)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandCategory)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandCurrenciesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandCurrency>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandCurrencyTable) { return; }
            BrandCurrencies ??= new Mock<DbSet<BrandCurrency>>();
            await InitializeMockSetFromListAsync(BrandCurrencies, data).ConfigureAwait(false);
            context.Setup(m => m.BrandCurrencies).Returns(() => BrandCurrencies.Object);
            context.Setup(m => m.Set<BrandCurrency>()).Returns(() => BrandCurrencies.Object);
            TableRecordCounts[typeof(BrandCurrency)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandCurrency)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandCurrency)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandFranchisesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandFranchise>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandFranchiseTable) { return; }
            BrandFranchises ??= new Mock<DbSet<BrandFranchise>>();
            await InitializeMockSetFromListAsync(BrandFranchises, data).ConfigureAwait(false);
            context.Setup(m => m.BrandFranchises).Returns(() => BrandFranchises.Object);
            context.Setup(m => m.Set<BrandFranchise>()).Returns(() => BrandFranchises.Object);
            TableRecordCounts[typeof(BrandFranchise)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandFranchise)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandFranchise)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandImage>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandImageTable) { return; }
            BrandImages ??= new Mock<DbSet<BrandImage>>();
            await InitializeMockSetFromListAsync(BrandImages, data).ConfigureAwait(false);
            context.Setup(m => m.BrandImages).Returns(() => BrandImages.Object);
            context.Setup(m => m.Set<BrandImage>()).Returns(() => BrandImages.Object);
            TableRecordCounts[typeof(BrandImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(BrandImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandImageType>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandImageTypeTable) { return; }
            BrandImageTypes ??= new Mock<DbSet<BrandImageType>>();
            await InitializeMockSetFromListAsync(BrandImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.BrandImageTypes).Returns(() => BrandImageTypes.Object);
            context.Setup(m => m.Set<BrandImageType>()).Returns(() => BrandImageTypes.Object);
            TableRecordCounts[typeof(BrandImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(BrandImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(BrandImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandInventoryLocationsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandInventoryLocation>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandInventoryLocationTable) { return; }
            BrandInventoryLocations ??= new Mock<DbSet<BrandInventoryLocation>>();
            await InitializeMockSetFromListAsync(BrandInventoryLocations, data).ConfigureAwait(false);
            context.Setup(m => m.BrandInventoryLocations).Returns(() => BrandInventoryLocations.Object);
            context.Setup(m => m.Set<BrandInventoryLocation>()).Returns(() => BrandInventoryLocations.Object);
            TableRecordCounts[typeof(BrandInventoryLocation)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandInventoryLocation)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandInventoryLocation)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandInventoryLocationTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandInventoryLocationType>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandInventoryLocationTypeTable) { return; }
            BrandInventoryLocationTypes ??= new Mock<DbSet<BrandInventoryLocationType>>();
            await InitializeMockSetFromListAsync(BrandInventoryLocationTypes, data).ConfigureAwait(false);
            context.Setup(m => m.BrandInventoryLocationTypes).Returns(() => BrandInventoryLocationTypes.Object);
            context.Setup(m => m.Set<BrandInventoryLocationType>()).Returns(() => BrandInventoryLocationTypes.Object);
            TableRecordCounts[typeof(BrandInventoryLocationType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandInventoryLocationType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandInventoryLocationType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(BrandInventoryLocationType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(BrandInventoryLocationType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandLanguagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandLanguage>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandLanguageTable) { return; }
            BrandLanguages ??= new Mock<DbSet<BrandLanguage>>();
            await InitializeMockSetFromListAsync(BrandLanguages, data).ConfigureAwait(false);
            context.Setup(m => m.BrandLanguages).Returns(() => BrandLanguages.Object);
            context.Setup(m => m.Set<BrandLanguage>()).Returns(() => BrandLanguages.Object);
            TableRecordCounts[typeof(BrandLanguage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandLanguage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandLanguage)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandManufacturersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandManufacturer>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandManufacturerTable) { return; }
            BrandManufacturers ??= new Mock<DbSet<BrandManufacturer>>();
            await InitializeMockSetFromListAsync(BrandManufacturers, data).ConfigureAwait(false);
            context.Setup(m => m.BrandManufacturers).Returns(() => BrandManufacturers.Object);
            context.Setup(m => m.Set<BrandManufacturer>()).Returns(() => BrandManufacturers.Object);
            TableRecordCounts[typeof(BrandManufacturer)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandManufacturer)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandManufacturer)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandProductsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandProduct>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandProductTable) { return; }
            BrandProducts ??= new Mock<DbSet<BrandProduct>>();
            await InitializeMockSetFromListAsync(BrandProducts, data).ConfigureAwait(false);
            context.Setup(m => m.BrandProducts).Returns(() => BrandProducts.Object);
            context.Setup(m => m.Set<BrandProduct>()).Returns(() => BrandProducts.Object);
            TableRecordCounts[typeof(BrandProduct)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandProduct)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandProduct)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandSiteDomainsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandSiteDomain>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandSiteDomainTable) { return; }
            BrandSiteDomains ??= new Mock<DbSet<BrandSiteDomain>>();
            await InitializeMockSetFromListAsync(BrandSiteDomains, data).ConfigureAwait(false);
            context.Setup(m => m.BrandSiteDomains).Returns(() => BrandSiteDomains.Object);
            context.Setup(m => m.Set<BrandSiteDomain>()).Returns(() => BrandSiteDomains.Object);
            TableRecordCounts[typeof(BrandSiteDomain)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandSiteDomain)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandSiteDomain)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandStoresAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandStore>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandStoreTable) { return; }
            BrandStores ??= new Mock<DbSet<BrandStore>>();
            await InitializeMockSetFromListAsync(BrandStores, data).ConfigureAwait(false);
            context.Setup(m => m.BrandStores).Returns(() => BrandStores.Object);
            context.Setup(m => m.Set<BrandStore>()).Returns(() => BrandStores.Object);
            TableRecordCounts[typeof(BrandStore)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandStore)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandStore)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandUsersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandUser>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandUserTable) { return; }
            BrandUsers ??= new Mock<DbSet<BrandUser>>();
            await InitializeMockSetFromListAsync(BrandUsers, data).ConfigureAwait(false);
            context.Setup(m => m.BrandUsers).Returns(() => BrandUsers.Object);
            context.Setup(m => m.Set<BrandUser>()).Returns(() => BrandUsers.Object);
            TableRecordCounts[typeof(BrandUser)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandUser)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandUser)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBrandVendorsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BrandVendor>> data)
        {
            if (!DoAll && !DoBrands && !DoBrandVendorTable) { return; }
            BrandVendors ??= new Mock<DbSet<BrandVendor>>();
            await InitializeMockSetFromListAsync(BrandVendors, data).ConfigureAwait(false);
            context.Setup(m => m.BrandVendors).Returns(() => BrandVendors.Object);
            context.Setup(m => m.Set<BrandVendor>()).Returns(() => BrandVendors.Object);
            TableRecordCounts[typeof(BrandVendor)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BrandVendor)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BrandVendor)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy Brand.</summary>
        /// <returns>The new Brand.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Brand>> CreateADummyBrandAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, decimal? minimumForFreeShippingDollarAmount = null!, decimal? minimumForFreeShippingDollarAmountAfter = null!, int? minimumForFreeShippingDollarAmountBufferCategoryID = null!, int? minimumForFreeShippingDollarAmountBufferProductID = null!, string minimumForFreeShippingDollarAmountIgnoredAcceptedMessage = null!, string minimumForFreeShippingDollarAmountWarningMessage = null!, decimal? minimumForFreeShippingQuantityAmount = null!, decimal? minimumForFreeShippingQuantityAmountAfter = null!, int? minimumForFreeShippingQuantityAmountBufferCategoryID = null!, int? minimumForFreeShippingQuantityAmountBufferProductID = null!, string minimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = null!, string minimumForFreeShippingQuantityAmountWarningMessage = null!, decimal? minimumOrderDollarAmount = null!, decimal? minimumOrderDollarAmountAfter = null!, int? minimumOrderDollarAmountBufferCategoryID = null!, int? minimumOrderDollarAmountBufferProductID = null!, decimal? minimumOrderDollarAmountOverrideFee = null!, string minimumOrderDollarAmountOverrideFeeAcceptedMessage = null!, bool minimumOrderDollarAmountOverrideFeeIsPercent = false, string minimumOrderDollarAmountOverrideFeeWarningMessage = null!, string minimumOrderDollarAmountWarningMessage = null!, decimal? minimumOrderQuantityAmount = null!, decimal? minimumOrderQuantityAmountAfter = null!, int? minimumOrderQuantityAmountBufferCategoryID = null!, int? minimumOrderQuantityAmountBufferProductID = null!, decimal? minimumOrderQuantityAmountOverrideFee = null!, string minimumOrderQuantityAmountOverrideFeeAcceptedMessage = null!, bool minimumOrderQuantityAmountOverrideFeeIsPercent = false, string minimumOrderQuantityAmountOverrideFeeWarningMessage = null!, string minimumOrderQuantityAmountWarningMessage = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Brand>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // Brand Properties
                mock.Object.MinimumForFreeShippingDollarAmount = minimumForFreeShippingDollarAmount;
                mock.Object.MinimumForFreeShippingDollarAmountAfter = minimumForFreeShippingDollarAmountAfter;
                mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID = minimumForFreeShippingDollarAmountBufferCategoryID;
                mock.Object.MinimumForFreeShippingDollarAmountBufferProductID = minimumForFreeShippingDollarAmountBufferProductID;
                mock.Object.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = minimumForFreeShippingDollarAmountIgnoredAcceptedMessage;
                mock.Object.MinimumForFreeShippingDollarAmountWarningMessage = minimumForFreeShippingDollarAmountWarningMessage;
                mock.Object.MinimumForFreeShippingQuantityAmount = minimumForFreeShippingQuantityAmount;
                mock.Object.MinimumForFreeShippingQuantityAmountAfter = minimumForFreeShippingQuantityAmountAfter;
                mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID = minimumForFreeShippingQuantityAmountBufferCategoryID;
                mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID = minimumForFreeShippingQuantityAmountBufferProductID;
                mock.Object.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = minimumForFreeShippingQuantityAmountIgnoredAcceptedMessage;
                mock.Object.MinimumForFreeShippingQuantityAmountWarningMessage = minimumForFreeShippingQuantityAmountWarningMessage;
                mock.Object.MinimumOrderDollarAmount = minimumOrderDollarAmount;
                mock.Object.MinimumOrderDollarAmountAfter = minimumOrderDollarAmountAfter;
                mock.Object.MinimumOrderDollarAmountBufferCategoryID = minimumOrderDollarAmountBufferCategoryID;
                mock.Object.MinimumOrderDollarAmountBufferProductID = minimumOrderDollarAmountBufferProductID;
                mock.Object.MinimumOrderDollarAmountOverrideFee = minimumOrderDollarAmountOverrideFee;
                mock.Object.MinimumOrderDollarAmountOverrideFeeAcceptedMessage = minimumOrderDollarAmountOverrideFeeAcceptedMessage;
                mock.Object.MinimumOrderDollarAmountOverrideFeeIsPercent = minimumOrderDollarAmountOverrideFeeIsPercent;
                mock.Object.MinimumOrderDollarAmountOverrideFeeWarningMessage = minimumOrderDollarAmountOverrideFeeWarningMessage;
                mock.Object.MinimumOrderDollarAmountWarningMessage = minimumOrderDollarAmountWarningMessage;
                mock.Object.MinimumOrderQuantityAmount = minimumOrderQuantityAmount;
                mock.Object.MinimumOrderQuantityAmountAfter = minimumOrderQuantityAmountAfter;
                mock.Object.MinimumOrderQuantityAmountBufferCategoryID = minimumOrderQuantityAmountBufferCategoryID;
                mock.Object.MinimumOrderQuantityAmountBufferProductID = minimumOrderQuantityAmountBufferProductID;
                mock.Object.MinimumOrderQuantityAmountOverrideFee = minimumOrderQuantityAmountOverrideFee;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = minimumOrderQuantityAmountOverrideFeeAcceptedMessage;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeIsPercent = minimumOrderQuantityAmountOverrideFeeIsPercent;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeWarningMessage = minimumOrderQuantityAmountOverrideFeeWarningMessage;
                mock.Object.MinimumOrderQuantityAmountWarningMessage = minimumOrderQuantityAmountWarningMessage;
                // Dynamic Linking
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawBrandImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandImage>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.BrandID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // Brand's Related Objects
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferProductID)?.Object);
                // Brand's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => RawBrandAccounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandAccount>());
                mock.Setup(m => m.BrandCurrencies).Returns(() => RawBrandCurrencies?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandCurrency>());
                mock.Setup(m => m.BrandInventoryLocations).Returns(() => RawBrandInventoryLocations?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandInventoryLocation>());
                mock.Setup(m => m.BrandLanguages).Returns(() => RawBrandLanguages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandLanguage>());
                mock.Setup(m => m.BrandSiteDomains).Returns(() => RawBrandSiteDomains?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandSiteDomain>());
                mock.Setup(m => m.Categories).Returns(() => RawBrandCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandCategory>());
                mock.Setup(m => m.Franchises).Returns(() => RawBrandFranchises?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandFranchise>());
                mock.Setup(m => m.Products).Returns(() => RawBrandProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandProduct>());
                mock.Setup(m => m.Stores).Returns(() => RawBrandStores?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandStore>());
                mock.Setup(m => m.Users).Returns(() => RawBrandUsers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandUser>());
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandAccount.</summary>
        /// <returns>The new BrandAccount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandAccount>> CreateADummyBrandAccountAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, int? pricePointID = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandAccount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // BrandAccount Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.PricePointID = pricePointID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // BrandAccount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.PricePoint).Returns(() => RawPricePoints?.FirstOrDefault(x => x.Object.ID == mock.Object.PricePointID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandAccount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandCategory.</summary>
        /// <returns>The new BrandCategory.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandCategory>> CreateADummyBrandCategoryAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandCategory>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // BrandCategory Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // BrandCategory's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandCategory's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandCurrency.</summary>
        /// <returns>The new BrandCurrency.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandCurrency>> CreateADummyBrandCurrencyAsync(int id, string? key, string? jsonAttributes = null, string customName = null!, string customTranslationKey = null!, bool isPrimary = false, int masterID = 1, int? overrideDecimalPlaceAccuracy = null!, string overrideHtmlCharacterCode = null!, string overrideHtmlDecimalCharacterCode = null!, string overrideHtmlSeparatorCharacterCode = null!, string overrideRawCharacter = null!, string overrideRawDecimalCharacter = null!, string overrideRawSeparatorCharacter = null!, decimal overrideUnicodeSymbolValue = 0m, bool? overrideUseSeparator = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandCurrency>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // BrandCurrency Properties
                mock.Object.CustomName = customName;
                mock.Object.CustomTranslationKey = customTranslationKey;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.MasterID = masterID;
                mock.Object.OverrideDecimalPlaceAccuracy = overrideDecimalPlaceAccuracy;
                mock.Object.OverrideHtmlCharacterCode = overrideHtmlCharacterCode;
                mock.Object.OverrideHtmlDecimalCharacterCode = overrideHtmlDecimalCharacterCode;
                mock.Object.OverrideHtmlSeparatorCharacterCode = overrideHtmlSeparatorCharacterCode;
                mock.Object.OverrideRawCharacter = overrideRawCharacter;
                mock.Object.OverrideRawDecimalCharacter = overrideRawDecimalCharacter;
                mock.Object.OverrideRawSeparatorCharacter = overrideRawSeparatorCharacter;
                mock.Object.OverrideUnicodeSymbolValue = overrideUnicodeSymbolValue;
                mock.Object.OverrideUseSeparator = overrideUseSeparator;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // BrandCurrency's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandCurrency's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandFranchise.</summary>
        /// <returns>The new BrandFranchise.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandFranchise>> CreateADummyBrandFranchiseAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandFranchise>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // BrandFranchise Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // BrandFranchise's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandFranchise's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandImage.</summary>
        /// <returns>The new BrandImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandImage>> CreateADummyBrandImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // BrandImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawBrandImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // BrandImage's Related Objects
                // BrandImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandImageType.</summary>
        /// <returns>The new BrandImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandImageType>> CreateADummyBrandImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // BrandImageType Properties
                // Dynamic Linking
                // BrandImageType's Related Objects
                // BrandImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandInventoryLocation.</summary>
        /// <returns>The new BrandInventoryLocation.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandInventoryLocation>> CreateADummyBrandInventoryLocationAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandInventoryLocation>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // BrandInventoryLocation Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawBrandInventoryLocationTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // BrandInventoryLocation's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandInventoryLocation's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandInventoryLocationType.</summary>
        /// <returns>The new BrandInventoryLocationType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandInventoryLocationType>> CreateADummyBrandInventoryLocationTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandInventoryLocationType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // BrandInventoryLocationType Properties
                // Dynamic Linking
                // BrandInventoryLocationType's Related Objects
                // BrandInventoryLocationType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandLanguage.</summary>
        /// <returns>The new BrandLanguage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandLanguage>> CreateADummyBrandLanguageAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, string overrideISO639_1_2002 = null!, string overrideISO639_2_1998 = null!, string overrideISO639_3_2007 = null!, string overrideISO639_5_2008 = null!, string overrideLocale = null!, string overrideUnicodeName = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandLanguage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // BrandLanguage Properties
                mock.Object.MasterID = masterID;
                mock.Object.OverrideISO639_1_2002 = overrideISO639_1_2002;
                mock.Object.OverrideISO639_2_1998 = overrideISO639_2_1998;
                mock.Object.OverrideISO639_3_2007 = overrideISO639_3_2007;
                mock.Object.OverrideISO639_5_2008 = overrideISO639_5_2008;
                mock.Object.OverrideLocale = overrideLocale;
                mock.Object.OverrideUnicodeName = overrideUnicodeName;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // BrandLanguage's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandLanguage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandManufacturer.</summary>
        /// <returns>The new BrandManufacturer.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandManufacturer>> CreateADummyBrandManufacturerAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandManufacturer>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // BrandManufacturer Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // BrandManufacturer's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandManufacturer's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandProduct.</summary>
        /// <returns>The new BrandProduct.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandProduct>> CreateADummyBrandProductAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, decimal? priceBase = null!, decimal? priceMsrp = null!, decimal? priceReduction = null!, decimal? priceSale = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandProduct>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // BrandProduct Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.PriceBase = priceBase;
                mock.Object.PriceMsrp = priceMsrp;
                mock.Object.PriceReduction = priceReduction;
                mock.Object.PriceSale = priceSale;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // BrandProduct's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandProduct's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandSiteDomain.</summary>
        /// <returns>The new BrandSiteDomain.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandSiteDomain>> CreateADummyBrandSiteDomainAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandSiteDomain>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // BrandSiteDomain Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // BrandSiteDomain's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawSiteDomains?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandSiteDomain's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandStore.</summary>
        /// <returns>The new BrandStore.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandStore>> CreateADummyBrandStoreAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandStore>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // BrandStore Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // BrandStore's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandStore's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandUser.</summary>
        /// <returns>The new BrandUser.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandUser>> CreateADummyBrandUserAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandUser>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // BrandUser Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // BrandUser's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandUser's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BrandVendor.</summary>
        /// <returns>The new BrandVendor.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BrandVendor>> CreateADummyBrandVendorAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BrandVendor>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // BrandVendor Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // BrandVendor's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandVendor's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForBrands(MockingSetup mockingSetup)
        {
            Func<Brand> mockFuncBrand = () =>
            {
                var mock = new Mock<Brand>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Brand Properties
                // Dynamic Linking
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawBrandImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandImage>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.BrandID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferProductID)?.Object);
                // Brand's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => mockingSetup.RawBrandAccounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandAccount>());
                mock.Setup(m => m.BrandCurrencies).Returns(() => mockingSetup.RawBrandCurrencies?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandCurrency>());
                mock.Setup(m => m.BrandInventoryLocations).Returns(() => mockingSetup.RawBrandInventoryLocations?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandInventoryLocation>());
                mock.Setup(m => m.BrandLanguages).Returns(() => mockingSetup.RawBrandLanguages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandLanguage>());
                mock.Setup(m => m.BrandSiteDomains).Returns(() => mockingSetup.RawBrandSiteDomains?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandSiteDomain>());
                mock.Setup(m => m.Categories).Returns(() => mockingSetup.RawBrandCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandCategory>());
                mock.Setup(m => m.Franchises).Returns(() => mockingSetup.RawBrandFranchises?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandFranchise>());
                mock.Setup(m => m.Products).Returns(() => mockingSetup.RawBrandProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandProduct>());
                mock.Setup(m => m.Stores).Returns(() => mockingSetup.RawBrandStores?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandStore>());
                mock.Setup(m => m.Users).Returns(() => mockingSetup.RawBrandUsers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandUser>());
                // Brand's Related Objects
                return mock.Object;
            };
            For<IBrand>().Use(() => mockFuncBrand());
            For<Brand>().Use(() => mockFuncBrand());
            Func<BrandAccount> mockFuncBrandAccount = () =>
            {
                var mock = new Mock<BrandAccount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandAccount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.PricePoint).Returns(() => mockingSetup.RawPricePoints?.FirstOrDefault(x => x.Object.ID == mock.Object.PricePointID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandAccount's Associated Objects
                // BrandAccount's Related Objects
                return mock.Object;
            };
            For<IBrandAccount>().Use(() => mockFuncBrandAccount());
            For<BrandAccount>().Use(() => mockFuncBrandAccount());
            Func<BrandCategory> mockFuncBrandCategory = () =>
            {
                var mock = new Mock<BrandCategory>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandCategory Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandCategory's Associated Objects
                // BrandCategory's Related Objects
                return mock.Object;
            };
            For<IBrandCategory>().Use(() => mockFuncBrandCategory());
            For<BrandCategory>().Use(() => mockFuncBrandCategory());
            Func<BrandCurrency> mockFuncBrandCurrency = () =>
            {
                var mock = new Mock<BrandCurrency>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandCurrency Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandCurrency's Associated Objects
                // BrandCurrency's Related Objects
                return mock.Object;
            };
            For<IBrandCurrency>().Use(() => mockFuncBrandCurrency());
            For<BrandCurrency>().Use(() => mockFuncBrandCurrency());
            Func<BrandFranchise> mockFuncBrandFranchise = () =>
            {
                var mock = new Mock<BrandFranchise>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandFranchise Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandFranchise's Associated Objects
                // BrandFranchise's Related Objects
                return mock.Object;
            };
            For<IBrandFranchise>().Use(() => mockFuncBrandFranchise());
            For<BrandFranchise>().Use(() => mockFuncBrandFranchise());
            Func<BrandImage> mockFuncBrandImage = () =>
            {
                var mock = new Mock<BrandImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawBrandImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // BrandImage's Associated Objects
                // BrandImage's Related Objects
                return mock.Object;
            };
            For<IBrandImage>().Use(() => mockFuncBrandImage());
            For<BrandImage>().Use(() => mockFuncBrandImage());
            Func<BrandImageType> mockFuncBrandImageType = () =>
            {
                var mock = new Mock<BrandImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandImageType Properties
                // Dynamic Linking
                // BrandImageType's Associated Objects
                // BrandImageType's Related Objects
                return mock.Object;
            };
            For<IBrandImageType>().Use(() => mockFuncBrandImageType());
            For<BrandImageType>().Use(() => mockFuncBrandImageType());
            Func<BrandInventoryLocation> mockFuncBrandInventoryLocation = () =>
            {
                var mock = new Mock<BrandInventoryLocation>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandInventoryLocation Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawBrandInventoryLocationTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandInventoryLocation's Associated Objects
                // BrandInventoryLocation's Related Objects
                return mock.Object;
            };
            For<IBrandInventoryLocation>().Use(() => mockFuncBrandInventoryLocation());
            For<BrandInventoryLocation>().Use(() => mockFuncBrandInventoryLocation());
            Func<BrandInventoryLocationType> mockFuncBrandInventoryLocationType = () =>
            {
                var mock = new Mock<BrandInventoryLocationType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandInventoryLocationType Properties
                // Dynamic Linking
                // BrandInventoryLocationType's Associated Objects
                // BrandInventoryLocationType's Related Objects
                return mock.Object;
            };
            For<IBrandInventoryLocationType>().Use(() => mockFuncBrandInventoryLocationType());
            For<BrandInventoryLocationType>().Use(() => mockFuncBrandInventoryLocationType());
            Func<BrandLanguage> mockFuncBrandLanguage = () =>
            {
                var mock = new Mock<BrandLanguage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandLanguage Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandLanguage's Associated Objects
                // BrandLanguage's Related Objects
                return mock.Object;
            };
            For<IBrandLanguage>().Use(() => mockFuncBrandLanguage());
            For<BrandLanguage>().Use(() => mockFuncBrandLanguage());
            Func<BrandManufacturer> mockFuncBrandManufacturer = () =>
            {
                var mock = new Mock<BrandManufacturer>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandManufacturer Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandManufacturer's Associated Objects
                // BrandManufacturer's Related Objects
                return mock.Object;
            };
            For<IBrandManufacturer>().Use(() => mockFuncBrandManufacturer());
            For<BrandManufacturer>().Use(() => mockFuncBrandManufacturer());
            Func<BrandProduct> mockFuncBrandProduct = () =>
            {
                var mock = new Mock<BrandProduct>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandProduct Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandProduct's Associated Objects
                // BrandProduct's Related Objects
                return mock.Object;
            };
            For<IBrandProduct>().Use(() => mockFuncBrandProduct());
            For<BrandProduct>().Use(() => mockFuncBrandProduct());
            Func<BrandSiteDomain> mockFuncBrandSiteDomain = () =>
            {
                var mock = new Mock<BrandSiteDomain>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandSiteDomain Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawSiteDomains?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandSiteDomain's Associated Objects
                // BrandSiteDomain's Related Objects
                return mock.Object;
            };
            For<IBrandSiteDomain>().Use(() => mockFuncBrandSiteDomain());
            For<BrandSiteDomain>().Use(() => mockFuncBrandSiteDomain());
            Func<BrandStore> mockFuncBrandStore = () =>
            {
                var mock = new Mock<BrandStore>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandStore Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandStore's Associated Objects
                // BrandStore's Related Objects
                return mock.Object;
            };
            For<IBrandStore>().Use(() => mockFuncBrandStore());
            For<BrandStore>().Use(() => mockFuncBrandStore());
            Func<BrandUser> mockFuncBrandUser = () =>
            {
                var mock = new Mock<BrandUser>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandUser Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandUser's Associated Objects
                // BrandUser's Related Objects
                return mock.Object;
            };
            For<IBrandUser>().Use(() => mockFuncBrandUser());
            For<BrandUser>().Use(() => mockFuncBrandUser());
            Func<BrandVendor> mockFuncBrandVendor = () =>
            {
                var mock = new Mock<BrandVendor>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BrandVendor Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // BrandVendor's Associated Objects
                // BrandVendor's Related Objects
                return mock.Object;
            };
            For<IBrandVendor>().Use(() => mockFuncBrandVendor());
            For<BrandVendor>().Use(() => mockFuncBrandVendor());
        }
    }
}
