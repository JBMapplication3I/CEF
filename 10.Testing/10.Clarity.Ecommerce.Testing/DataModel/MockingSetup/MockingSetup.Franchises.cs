// <autogenerated>
// <copyright file="Franchises.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Franchises section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoFranchises { private get; set; }

        // Enable the tables specifically on run
        public bool DoFranchiseTable { private get; set; }
        public bool DoFranchiseAccountTable { private get; set; }
        public bool DoFranchiseCategoryTable { private get; set; }
        public bool DoFranchiseCountryTable { private get; set; }
        public bool DoFranchiseCurrencyTable { private get; set; }
        public bool DoFranchiseDistrictTable { private get; set; }
        public bool DoFranchiseImageTable { private get; set; }
        public bool DoFranchiseImageTypeTable { private get; set; }
        public bool DoFranchiseInventoryLocationTable { private get; set; }
        public bool DoFranchiseInventoryLocationTypeTable { private get; set; }
        public bool DoFranchiseLanguageTable { private get; set; }
        public bool DoFranchiseManufacturerTable { private get; set; }
        public bool DoFranchiseProductTable { private get; set; }
        public bool DoFranchiseRegionTable { private get; set; }
        public bool DoFranchiseSiteDomainTable { private get; set; }
        public bool DoFranchiseStoreTable { private get; set; }
        public bool DoFranchiseTypeTable { private get; set; }
        public bool DoFranchiseUserTable { private get; set; }
        public bool DoFranchiseVendorTable { private get; set; }

        // Dirty Checking
        public bool FranchiseDirty { private get; set; }
        public bool FranchiseAccountDirty { private get; set; }
        public bool FranchiseCategoryDirty { private get; set; }
        public bool FranchiseCountryDirty { private get; set; }
        public bool FranchiseCurrencyDirty { private get; set; }
        public bool FranchiseDistrictDirty { private get; set; }
        public bool FranchiseImageDirty { private get; set; }
        public bool FranchiseImageTypeDirty { private get; set; }
        public bool FranchiseInventoryLocationDirty { private get; set; }
        public bool FranchiseInventoryLocationTypeDirty { private get; set; }
        public bool FranchiseLanguageDirty { private get; set; }
        public bool FranchiseManufacturerDirty { private get; set; }
        public bool FranchiseProductDirty { private get; set; }
        public bool FranchiseRegionDirty { private get; set; }
        public bool FranchiseSiteDomainDirty { private get; set; }
        public bool FranchiseStoreDirty { private get; set; }
        public bool FranchiseTypeDirty { private get; set; }
        public bool FranchiseUserDirty { private get; set; }
        public bool FranchiseVendorDirty { private get; set; }

        // Sets
        public Mock<DbSet<Franchise>>? Franchises { get; private set; }
        public Mock<DbSet<FranchiseAccount>>? FranchiseAccounts { get; private set; }
        public Mock<DbSet<FranchiseCategory>>? FranchiseCategories { get; private set; }
        public Mock<DbSet<FranchiseCountry>>? FranchiseCountries { get; private set; }
        public Mock<DbSet<FranchiseCurrency>>? FranchiseCurrencies { get; private set; }
        public Mock<DbSet<FranchiseDistrict>>? FranchiseDistricts { get; private set; }
        public Mock<DbSet<FranchiseImage>>? FranchiseImages { get; private set; }
        public Mock<DbSet<FranchiseImageType>>? FranchiseImageTypes { get; private set; }
        public Mock<DbSet<FranchiseInventoryLocation>>? FranchiseInventoryLocations { get; private set; }
        public Mock<DbSet<FranchiseInventoryLocationType>>? FranchiseInventoryLocationTypes { get; private set; }
        public Mock<DbSet<FranchiseLanguage>>? FranchiseLanguages { get; private set; }
        public Mock<DbSet<FranchiseManufacturer>>? FranchiseManufacturers { get; private set; }
        public Mock<DbSet<FranchiseProduct>>? FranchiseProducts { get; private set; }
        public Mock<DbSet<FranchiseRegion>>? FranchiseRegions { get; private set; }
        public Mock<DbSet<FranchiseSiteDomain>>? FranchiseSiteDomains { get; private set; }
        public Mock<DbSet<FranchiseStore>>? FranchiseStores { get; private set; }
        public Mock<DbSet<FranchiseType>>? FranchiseTypes { get; private set; }
        public Mock<DbSet<FranchiseUser>>? FranchiseUsers { get; private set; }
        public Mock<DbSet<FranchiseVendor>>? FranchiseVendors { get; private set; }

        // Raw Data
        public List<Mock<Franchise>>? RawFranchises { get; private set; }
        public List<Mock<FranchiseAccount>>? RawFranchiseAccounts { get; private set; }
        public List<Mock<FranchiseCategory>>? RawFranchiseCategories { get; private set; }
        public List<Mock<FranchiseCountry>>? RawFranchiseCountries { get; private set; }
        public List<Mock<FranchiseCurrency>>? RawFranchiseCurrencies { get; private set; }
        public List<Mock<FranchiseDistrict>>? RawFranchiseDistricts { get; private set; }
        public List<Mock<FranchiseImage>>? RawFranchiseImages { get; private set; }
        public List<Mock<FranchiseImageType>>? RawFranchiseImageTypes { get; private set; }
        public List<Mock<FranchiseInventoryLocation>>? RawFranchiseInventoryLocations { get; private set; }
        public List<Mock<FranchiseInventoryLocationType>>? RawFranchiseInventoryLocationTypes { get; private set; }
        public List<Mock<FranchiseLanguage>>? RawFranchiseLanguages { get; private set; }
        public List<Mock<FranchiseManufacturer>>? RawFranchiseManufacturers { get; private set; }
        public List<Mock<FranchiseProduct>>? RawFranchiseProducts { get; private set; }
        public List<Mock<FranchiseRegion>>? RawFranchiseRegions { get; private set; }
        public List<Mock<FranchiseSiteDomain>>? RawFranchiseSiteDomains { get; private set; }
        public List<Mock<FranchiseStore>>? RawFranchiseStores { get; private set; }
        public List<Mock<FranchiseType>>? RawFranchiseTypes { get; private set; }
        public List<Mock<FranchiseUser>>? RawFranchiseUsers { get; private set; }
        public List<Mock<FranchiseVendor>>? RawFranchiseVendors { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksFranchisesAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoFranchises || (DoFranchiseTable && (!dirtyOnly || FranchiseDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchises == null) { throw new InvalidOperationException("Raw Franchises was null"); }
                    await InitializeMockSetFromListAsync(Franchises, RawFranchises).ConfigureAwait(false);
                    context.Setup(m => m.Franchises).Returns(() => Franchises?.Object!);
                    context.Setup(m => m.Set<Franchise>()).Returns(() => Franchises?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseAccountTable && (!dirtyOnly || FranchiseAccountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseAccounts == null) { throw new InvalidOperationException("Raw FranchiseAccounts was null"); }
                    await InitializeMockSetFromListAsync(FranchiseAccounts, RawFranchiseAccounts).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseAccounts).Returns(() => FranchiseAccounts?.Object!);
                    context.Setup(m => m.Set<FranchiseAccount>()).Returns(() => FranchiseAccounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseCategoryTable && (!dirtyOnly || FranchiseCategoryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseCategories == null) { throw new InvalidOperationException("Raw FranchiseCategories was null"); }
                    await InitializeMockSetFromListAsync(FranchiseCategories, RawFranchiseCategories).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseCategories).Returns(() => FranchiseCategories?.Object!);
                    context.Setup(m => m.Set<FranchiseCategory>()).Returns(() => FranchiseCategories?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseCountryTable && (!dirtyOnly || FranchiseCountryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseCountries == null) { throw new InvalidOperationException("Raw FranchiseCountries was null"); }
                    await InitializeMockSetFromListAsync(FranchiseCountries, RawFranchiseCountries).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseCountries).Returns(() => FranchiseCountries?.Object!);
                    context.Setup(m => m.Set<FranchiseCountry>()).Returns(() => FranchiseCountries?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseCurrencyTable && (!dirtyOnly || FranchiseCurrencyDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseCurrencies == null) { throw new InvalidOperationException("Raw FranchiseCurrencies was null"); }
                    await InitializeMockSetFromListAsync(FranchiseCurrencies, RawFranchiseCurrencies).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseCurrencies).Returns(() => FranchiseCurrencies?.Object!);
                    context.Setup(m => m.Set<FranchiseCurrency>()).Returns(() => FranchiseCurrencies?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseDistrictTable && (!dirtyOnly || FranchiseDistrictDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseDistricts == null) { throw new InvalidOperationException("Raw FranchiseDistricts was null"); }
                    await InitializeMockSetFromListAsync(FranchiseDistricts, RawFranchiseDistricts).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseDistricts).Returns(() => FranchiseDistricts?.Object!);
                    context.Setup(m => m.Set<FranchiseDistrict>()).Returns(() => FranchiseDistricts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseImageTable && (!dirtyOnly || FranchiseImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseImages == null) { throw new InvalidOperationException("Raw FranchiseImages was null"); }
                    await InitializeMockSetFromListAsync(FranchiseImages, RawFranchiseImages).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseImages).Returns(() => FranchiseImages?.Object!);
                    context.Setup(m => m.Set<FranchiseImage>()).Returns(() => FranchiseImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseImageTypeTable && (!dirtyOnly || FranchiseImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseImageTypes == null) { throw new InvalidOperationException("Raw FranchiseImageTypes was null"); }
                    await InitializeMockSetFromListAsync(FranchiseImageTypes, RawFranchiseImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseImageTypes).Returns(() => FranchiseImageTypes?.Object!);
                    context.Setup(m => m.Set<FranchiseImageType>()).Returns(() => FranchiseImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseInventoryLocationTable && (!dirtyOnly || FranchiseInventoryLocationDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseInventoryLocations == null) { throw new InvalidOperationException("Raw FranchiseInventoryLocations was null"); }
                    await InitializeMockSetFromListAsync(FranchiseInventoryLocations, RawFranchiseInventoryLocations).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseInventoryLocations).Returns(() => FranchiseInventoryLocations?.Object!);
                    context.Setup(m => m.Set<FranchiseInventoryLocation>()).Returns(() => FranchiseInventoryLocations?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseInventoryLocationTypeTable && (!dirtyOnly || FranchiseInventoryLocationTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseInventoryLocationTypes == null) { throw new InvalidOperationException("Raw FranchiseInventoryLocationTypes was null"); }
                    await InitializeMockSetFromListAsync(FranchiseInventoryLocationTypes, RawFranchiseInventoryLocationTypes).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseInventoryLocationTypes).Returns(() => FranchiseInventoryLocationTypes?.Object!);
                    context.Setup(m => m.Set<FranchiseInventoryLocationType>()).Returns(() => FranchiseInventoryLocationTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseLanguageTable && (!dirtyOnly || FranchiseLanguageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseLanguages == null) { throw new InvalidOperationException("Raw FranchiseLanguages was null"); }
                    await InitializeMockSetFromListAsync(FranchiseLanguages, RawFranchiseLanguages).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseLanguages).Returns(() => FranchiseLanguages?.Object!);
                    context.Setup(m => m.Set<FranchiseLanguage>()).Returns(() => FranchiseLanguages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseManufacturerTable && (!dirtyOnly || FranchiseManufacturerDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseManufacturers == null) { throw new InvalidOperationException("Raw FranchiseManufacturers was null"); }
                    await InitializeMockSetFromListAsync(FranchiseManufacturers, RawFranchiseManufacturers).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseManufacturers).Returns(() => FranchiseManufacturers?.Object!);
                    context.Setup(m => m.Set<FranchiseManufacturer>()).Returns(() => FranchiseManufacturers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseProductTable && (!dirtyOnly || FranchiseProductDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseProducts == null) { throw new InvalidOperationException("Raw FranchiseProducts was null"); }
                    await InitializeMockSetFromListAsync(FranchiseProducts, RawFranchiseProducts).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseProducts).Returns(() => FranchiseProducts?.Object!);
                    context.Setup(m => m.Set<FranchiseProduct>()).Returns(() => FranchiseProducts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseRegionTable && (!dirtyOnly || FranchiseRegionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseRegions == null) { throw new InvalidOperationException("Raw FranchiseRegions was null"); }
                    await InitializeMockSetFromListAsync(FranchiseRegions, RawFranchiseRegions).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseRegions).Returns(() => FranchiseRegions?.Object!);
                    context.Setup(m => m.Set<FranchiseRegion>()).Returns(() => FranchiseRegions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseSiteDomainTable && (!dirtyOnly || FranchiseSiteDomainDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseSiteDomains == null) { throw new InvalidOperationException("Raw FranchiseSiteDomains was null"); }
                    await InitializeMockSetFromListAsync(FranchiseSiteDomains, RawFranchiseSiteDomains).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseSiteDomains).Returns(() => FranchiseSiteDomains?.Object!);
                    context.Setup(m => m.Set<FranchiseSiteDomain>()).Returns(() => FranchiseSiteDomains?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseStoreTable && (!dirtyOnly || FranchiseStoreDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseStores == null) { throw new InvalidOperationException("Raw FranchiseStores was null"); }
                    await InitializeMockSetFromListAsync(FranchiseStores, RawFranchiseStores).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseStores).Returns(() => FranchiseStores?.Object!);
                    context.Setup(m => m.Set<FranchiseStore>()).Returns(() => FranchiseStores?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseTypeTable && (!dirtyOnly || FranchiseTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseTypes == null) { throw new InvalidOperationException("Raw FranchiseTypes was null"); }
                    await InitializeMockSetFromListAsync(FranchiseTypes, RawFranchiseTypes).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseTypes).Returns(() => FranchiseTypes?.Object!);
                    context.Setup(m => m.Set<FranchiseType>()).Returns(() => FranchiseTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseUserTable && (!dirtyOnly || FranchiseUserDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseUsers == null) { throw new InvalidOperationException("Raw FranchiseUsers was null"); }
                    await InitializeMockSetFromListAsync(FranchiseUsers, RawFranchiseUsers).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseUsers).Returns(() => FranchiseUsers?.Object!);
                    context.Setup(m => m.Set<FranchiseUser>()).Returns(() => FranchiseUsers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoFranchises || (DoFranchiseVendorTable && (!dirtyOnly || FranchiseVendorDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawFranchiseVendors == null) { throw new InvalidOperationException("Raw FranchiseVendors was null"); }
                    await InitializeMockSetFromListAsync(FranchiseVendors, RawFranchiseVendors).ConfigureAwait(false);
                    context.Setup(m => m.FranchiseVendors).Returns(() => FranchiseVendors?.Object!);
                    context.Setup(m => m.Set<FranchiseVendor>()).Returns(() => FranchiseVendors?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchisesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Franchise>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseTable) { return; }
            Franchises ??= new Mock<DbSet<Franchise>>();
            await InitializeMockSetFromListAsync(Franchises, data).ConfigureAwait(false);
            context.Setup(m => m.Franchises).Returns(() => Franchises.Object);
            context.Setup(m => m.Set<Franchise>()).Returns(() => Franchises.Object);
            TableRecordCounts[typeof(Franchise)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Franchise)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Franchise)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Franchise)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseAccountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseAccount>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseAccountTable) { return; }
            FranchiseAccounts ??= new Mock<DbSet<FranchiseAccount>>();
            await InitializeMockSetFromListAsync(FranchiseAccounts, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseAccounts).Returns(() => FranchiseAccounts.Object);
            context.Setup(m => m.Set<FranchiseAccount>()).Returns(() => FranchiseAccounts.Object);
            TableRecordCounts[typeof(FranchiseAccount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseAccount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseAccount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseCategoriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseCategory>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseCategoryTable) { return; }
            FranchiseCategories ??= new Mock<DbSet<FranchiseCategory>>();
            await InitializeMockSetFromListAsync(FranchiseCategories, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseCategories).Returns(() => FranchiseCategories.Object);
            context.Setup(m => m.Set<FranchiseCategory>()).Returns(() => FranchiseCategories.Object);
            TableRecordCounts[typeof(FranchiseCategory)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseCategory)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseCategory)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseCountriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseCountry>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseCountryTable) { return; }
            FranchiseCountries ??= new Mock<DbSet<FranchiseCountry>>();
            await InitializeMockSetFromListAsync(FranchiseCountries, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseCountries).Returns(() => FranchiseCountries.Object);
            context.Setup(m => m.Set<FranchiseCountry>()).Returns(() => FranchiseCountries.Object);
            TableRecordCounts[typeof(FranchiseCountry)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseCountry)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseCountry)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseCurrenciesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseCurrency>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseCurrencyTable) { return; }
            FranchiseCurrencies ??= new Mock<DbSet<FranchiseCurrency>>();
            await InitializeMockSetFromListAsync(FranchiseCurrencies, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseCurrencies).Returns(() => FranchiseCurrencies.Object);
            context.Setup(m => m.Set<FranchiseCurrency>()).Returns(() => FranchiseCurrencies.Object);
            TableRecordCounts[typeof(FranchiseCurrency)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseCurrency)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseCurrency)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseDistrictsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseDistrict>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseDistrictTable) { return; }
            FranchiseDistricts ??= new Mock<DbSet<FranchiseDistrict>>();
            await InitializeMockSetFromListAsync(FranchiseDistricts, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseDistricts).Returns(() => FranchiseDistricts.Object);
            context.Setup(m => m.Set<FranchiseDistrict>()).Returns(() => FranchiseDistricts.Object);
            TableRecordCounts[typeof(FranchiseDistrict)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseDistrict)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseDistrict)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseImage>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseImageTable) { return; }
            FranchiseImages ??= new Mock<DbSet<FranchiseImage>>();
            await InitializeMockSetFromListAsync(FranchiseImages, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseImages).Returns(() => FranchiseImages.Object);
            context.Setup(m => m.Set<FranchiseImage>()).Returns(() => FranchiseImages.Object);
            TableRecordCounts[typeof(FranchiseImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(FranchiseImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseImageType>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseImageTypeTable) { return; }
            FranchiseImageTypes ??= new Mock<DbSet<FranchiseImageType>>();
            await InitializeMockSetFromListAsync(FranchiseImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseImageTypes).Returns(() => FranchiseImageTypes.Object);
            context.Setup(m => m.Set<FranchiseImageType>()).Returns(() => FranchiseImageTypes.Object);
            TableRecordCounts[typeof(FranchiseImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(FranchiseImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(FranchiseImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseInventoryLocationsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseInventoryLocation>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseInventoryLocationTable) { return; }
            FranchiseInventoryLocations ??= new Mock<DbSet<FranchiseInventoryLocation>>();
            await InitializeMockSetFromListAsync(FranchiseInventoryLocations, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseInventoryLocations).Returns(() => FranchiseInventoryLocations.Object);
            context.Setup(m => m.Set<FranchiseInventoryLocation>()).Returns(() => FranchiseInventoryLocations.Object);
            TableRecordCounts[typeof(FranchiseInventoryLocation)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseInventoryLocation)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseInventoryLocation)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseInventoryLocationTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseInventoryLocationType>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseInventoryLocationTypeTable) { return; }
            FranchiseInventoryLocationTypes ??= new Mock<DbSet<FranchiseInventoryLocationType>>();
            await InitializeMockSetFromListAsync(FranchiseInventoryLocationTypes, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseInventoryLocationTypes).Returns(() => FranchiseInventoryLocationTypes.Object);
            context.Setup(m => m.Set<FranchiseInventoryLocationType>()).Returns(() => FranchiseInventoryLocationTypes.Object);
            TableRecordCounts[typeof(FranchiseInventoryLocationType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseInventoryLocationType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseInventoryLocationType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(FranchiseInventoryLocationType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(FranchiseInventoryLocationType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseLanguagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseLanguage>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseLanguageTable) { return; }
            FranchiseLanguages ??= new Mock<DbSet<FranchiseLanguage>>();
            await InitializeMockSetFromListAsync(FranchiseLanguages, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseLanguages).Returns(() => FranchiseLanguages.Object);
            context.Setup(m => m.Set<FranchiseLanguage>()).Returns(() => FranchiseLanguages.Object);
            TableRecordCounts[typeof(FranchiseLanguage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseLanguage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseLanguage)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseManufacturersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseManufacturer>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseManufacturerTable) { return; }
            FranchiseManufacturers ??= new Mock<DbSet<FranchiseManufacturer>>();
            await InitializeMockSetFromListAsync(FranchiseManufacturers, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseManufacturers).Returns(() => FranchiseManufacturers.Object);
            context.Setup(m => m.Set<FranchiseManufacturer>()).Returns(() => FranchiseManufacturers.Object);
            TableRecordCounts[typeof(FranchiseManufacturer)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseManufacturer)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseManufacturer)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseProductsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseProduct>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseProductTable) { return; }
            FranchiseProducts ??= new Mock<DbSet<FranchiseProduct>>();
            await InitializeMockSetFromListAsync(FranchiseProducts, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseProducts).Returns(() => FranchiseProducts.Object);
            context.Setup(m => m.Set<FranchiseProduct>()).Returns(() => FranchiseProducts.Object);
            TableRecordCounts[typeof(FranchiseProduct)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseProduct)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseProduct)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseRegionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseRegion>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseRegionTable) { return; }
            FranchiseRegions ??= new Mock<DbSet<FranchiseRegion>>();
            await InitializeMockSetFromListAsync(FranchiseRegions, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseRegions).Returns(() => FranchiseRegions.Object);
            context.Setup(m => m.Set<FranchiseRegion>()).Returns(() => FranchiseRegions.Object);
            TableRecordCounts[typeof(FranchiseRegion)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseRegion)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseRegion)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseSiteDomainsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseSiteDomain>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseSiteDomainTable) { return; }
            FranchiseSiteDomains ??= new Mock<DbSet<FranchiseSiteDomain>>();
            await InitializeMockSetFromListAsync(FranchiseSiteDomains, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseSiteDomains).Returns(() => FranchiseSiteDomains.Object);
            context.Setup(m => m.Set<FranchiseSiteDomain>()).Returns(() => FranchiseSiteDomains.Object);
            TableRecordCounts[typeof(FranchiseSiteDomain)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseSiteDomain)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseSiteDomain)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseStoresAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseStore>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseStoreTable) { return; }
            FranchiseStores ??= new Mock<DbSet<FranchiseStore>>();
            await InitializeMockSetFromListAsync(FranchiseStores, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseStores).Returns(() => FranchiseStores.Object);
            context.Setup(m => m.Set<FranchiseStore>()).Returns(() => FranchiseStores.Object);
            TableRecordCounts[typeof(FranchiseStore)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseStore)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseStore)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseType>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseTypeTable) { return; }
            FranchiseTypes ??= new Mock<DbSet<FranchiseType>>();
            await InitializeMockSetFromListAsync(FranchiseTypes, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseTypes).Returns(() => FranchiseTypes.Object);
            context.Setup(m => m.Set<FranchiseType>()).Returns(() => FranchiseTypes.Object);
            TableRecordCounts[typeof(FranchiseType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(FranchiseType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(FranchiseType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseUsersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseUser>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseUserTable) { return; }
            FranchiseUsers ??= new Mock<DbSet<FranchiseUser>>();
            await InitializeMockSetFromListAsync(FranchiseUsers, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseUsers).Returns(() => FranchiseUsers.Object);
            context.Setup(m => m.Set<FranchiseUser>()).Returns(() => FranchiseUsers.Object);
            TableRecordCounts[typeof(FranchiseUser)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseUser)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseUser)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetFranchiseVendorsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<FranchiseVendor>> data)
        {
            if (!DoAll && !DoFranchises && !DoFranchiseVendorTable) { return; }
            FranchiseVendors ??= new Mock<DbSet<FranchiseVendor>>();
            await InitializeMockSetFromListAsync(FranchiseVendors, data).ConfigureAwait(false);
            context.Setup(m => m.FranchiseVendors).Returns(() => FranchiseVendors.Object);
            context.Setup(m => m.Set<FranchiseVendor>()).Returns(() => FranchiseVendors.Object);
            TableRecordCounts[typeof(FranchiseVendor)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(FranchiseVendor)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(FranchiseVendor)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy Franchise.</summary>
        /// <returns>The new Franchise.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Franchise>> CreateADummyFranchiseAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, string? jsonAttributes = null, decimal? minimumForFreeShippingDollarAmount = null!, decimal? minimumForFreeShippingDollarAmountAfter = null!, int? minimumForFreeShippingDollarAmountBufferCategoryID = null!, int? minimumForFreeShippingDollarAmountBufferProductID = null!, string minimumForFreeShippingDollarAmountIgnoredAcceptedMessage = null!, string minimumForFreeShippingDollarAmountWarningMessage = null!, decimal? minimumForFreeShippingQuantityAmount = null!, decimal? minimumForFreeShippingQuantityAmountAfter = null!, int? minimumForFreeShippingQuantityAmountBufferCategoryID = null!, int? minimumForFreeShippingQuantityAmountBufferProductID = null!, string minimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = null!, string minimumForFreeShippingQuantityAmountWarningMessage = null!, decimal? minimumOrderDollarAmount = null!, decimal? minimumOrderDollarAmountAfter = null!, int? minimumOrderDollarAmountBufferCategoryID = null!, int? minimumOrderDollarAmountBufferProductID = null!, decimal? minimumOrderDollarAmountOverrideFee = null!, string minimumOrderDollarAmountOverrideFeeAcceptedMessage = null!, bool minimumOrderDollarAmountOverrideFeeIsPercent = false, string minimumOrderDollarAmountOverrideFeeWarningMessage = null!, string minimumOrderDollarAmountWarningMessage = null!, decimal? minimumOrderQuantityAmount = null!, decimal? minimumOrderQuantityAmountAfter = null!, int? minimumOrderQuantityAmountBufferCategoryID = null!, int? minimumOrderQuantityAmountBufferProductID = null!, decimal? minimumOrderQuantityAmountOverrideFee = null!, string minimumOrderQuantityAmountOverrideFeeAcceptedMessage = null!, bool minimumOrderQuantityAmountOverrideFeeIsPercent = false, string minimumOrderQuantityAmountOverrideFeeWarningMessage = null!, string minimumOrderQuantityAmountWarningMessage = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Franchise>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // Franchise Properties
                mock.Object.MinimumForFreeShippingDollarAmount = minimumForFreeShippingDollarAmount;
                mock.Object.MinimumForFreeShippingDollarAmountAfter = minimumForFreeShippingDollarAmountAfter;
                mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID = minimumForFreeShippingDollarAmountBufferCategoryID;
                mock.Object.MinimumForFreeShippingDollarAmountBufferProductID = minimumForFreeShippingDollarAmountBufferProductID;
                mock.Object.MinimumForFreeShippingDollarAmountIgnoredAcceptedMessage = minimumForFreeShippingDollarAmountIgnoredAcceptedMessage;
                mock.Object.MinimumForFreeShippingDollarAmountWarningMessage = minimumForFreeShippingDollarAmountWarningMessage;
                mock.Object.MinimumForFreeShippingQuantityAmount = minimumForFreeShippingQuantityAmount;
                mock.Object.MinimumForFreeShippingQuantityAmountAfter = minimumForFreeShippingQuantityAmountAfter;
                mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID = minimumForFreeShippingQuantityAmountBufferCategoryID;
                mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID = minimumForFreeShippingQuantityAmountBufferProductID;
                mock.Object.MinimumForFreeShippingQuantityAmountIgnoredAcceptedMessage = minimumForFreeShippingQuantityAmountIgnoredAcceptedMessage;
                mock.Object.MinimumForFreeShippingQuantityAmountWarningMessage = minimumForFreeShippingQuantityAmountWarningMessage;
                mock.Object.MinimumOrderDollarAmount = minimumOrderDollarAmount;
                mock.Object.MinimumOrderDollarAmountAfter = minimumOrderDollarAmountAfter;
                mock.Object.MinimumOrderDollarAmountBufferCategoryID = minimumOrderDollarAmountBufferCategoryID;
                mock.Object.MinimumOrderDollarAmountBufferProductID = minimumOrderDollarAmountBufferProductID;
                mock.Object.MinimumOrderDollarAmountOverrideFee = minimumOrderDollarAmountOverrideFee;
                mock.Object.MinimumOrderDollarAmountOverrideFeeAcceptedMessage = minimumOrderDollarAmountOverrideFeeAcceptedMessage;
                mock.Object.MinimumOrderDollarAmountOverrideFeeIsPercent = minimumOrderDollarAmountOverrideFeeIsPercent;
                mock.Object.MinimumOrderDollarAmountOverrideFeeWarningMessage = minimumOrderDollarAmountOverrideFeeWarningMessage;
                mock.Object.MinimumOrderDollarAmountWarningMessage = minimumOrderDollarAmountWarningMessage;
                mock.Object.MinimumOrderQuantityAmount = minimumOrderQuantityAmount;
                mock.Object.MinimumOrderQuantityAmountAfter = minimumOrderQuantityAmountAfter;
                mock.Object.MinimumOrderQuantityAmountBufferCategoryID = minimumOrderQuantityAmountBufferCategoryID;
                mock.Object.MinimumOrderQuantityAmountBufferProductID = minimumOrderQuantityAmountBufferProductID;
                mock.Object.MinimumOrderQuantityAmountOverrideFee = minimumOrderQuantityAmountOverrideFee;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeAcceptedMessage = minimumOrderQuantityAmountOverrideFeeAcceptedMessage;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeIsPercent = minimumOrderQuantityAmountOverrideFeeIsPercent;
                mock.Object.MinimumOrderQuantityAmountOverrideFeeWarningMessage = minimumOrderQuantityAmountOverrideFeeWarningMessage;
                mock.Object.MinimumOrderQuantityAmountWarningMessage = minimumOrderQuantityAmountWarningMessage;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawFranchiseTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawFranchiseImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseImage>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.FranchiseID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // Franchise's Related Objects
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferCategory).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferProduct).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferProductID)?.Object);
                // Franchise's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => RawFranchiseAccounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseAccount>());
                mock.Setup(m => m.Brands).Returns(() => RawBrandFranchises?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandFranchise>());
                mock.Setup(m => m.Categories).Returns(() => RawFranchiseCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseCategory>());
                mock.Setup(m => m.FranchiseCountries).Returns(() => RawFranchiseCountries?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseCountry>());
                mock.Setup(m => m.FranchiseCurrencies).Returns(() => RawFranchiseCurrencies?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseCurrency>());
                mock.Setup(m => m.FranchiseDistricts).Returns(() => RawFranchiseDistricts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseDistrict>());
                mock.Setup(m => m.FranchiseInventoryLocations).Returns(() => RawFranchiseInventoryLocations?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseInventoryLocation>());
                mock.Setup(m => m.FranchiseLanguages).Returns(() => RawFranchiseLanguages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseLanguage>());
                mock.Setup(m => m.FranchiseRegions).Returns(() => RawFranchiseRegions?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseRegion>());
                mock.Setup(m => m.FranchiseSiteDomains).Returns(() => RawFranchiseSiteDomains?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseSiteDomain>());
                mock.Setup(m => m.Manufacturers).Returns(() => RawFranchiseManufacturers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseManufacturer>());
                mock.Setup(m => m.Products).Returns(() => RawFranchiseProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseProduct>());
                mock.Setup(m => m.Stores).Returns(() => RawFranchiseStores?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseStore>());
                mock.Setup(m => m.Users).Returns(() => RawFranchiseUsers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseUser>());
                mock.Setup(m => m.Vendors).Returns(() => RawFranchiseVendors?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseVendor>());
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseAccount.</summary>
        /// <returns>The new FranchiseAccount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseAccount>> CreateADummyFranchiseAccountAsync(int id, string? key, string? jsonAttributes = null, bool hasAccessToFranchise = false, int masterID = 1, int? pricePointID = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseAccount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FranchiseAccount Properties
                mock.Object.HasAccessToFranchise = hasAccessToFranchise;
                mock.Object.MasterID = masterID;
                mock.Object.PricePointID = pricePointID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FranchiseAccount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.PricePoint).Returns(() => RawPricePoints?.FirstOrDefault(x => x.Object.ID == mock.Object.PricePointID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseAccount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseCategory.</summary>
        /// <returns>The new FranchiseCategory.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseCategory>> CreateADummyFranchiseCategoryAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseCategory>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FranchiseCategory Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FranchiseCategory's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseCategory's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseCountry.</summary>
        /// <returns>The new FranchiseCountry.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseCountry>> CreateADummyFranchiseCountryAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseCountry>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FranchiseCountry Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FranchiseCountry's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseCountry's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseCurrency.</summary>
        /// <returns>The new FranchiseCurrency.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseCurrency>> CreateADummyFranchiseCurrencyAsync(int id, string? key, string? jsonAttributes = null, string customName = null!, string customTranslationKey = null!, bool isPrimary = false, int masterID = 1, int? overrideDecimalPlaceAccuracy = null!, string overrideHtmlCharacterCode = null!, string overrideHtmlDecimalCharacterCode = null!, string overrideHtmlSeparatorCharacterCode = null!, string overrideRawCharacter = null!, string overrideRawDecimalCharacter = null!, string overrideRawSeparatorCharacter = null!, decimal overrideUnicodeSymbolValue = 0m, bool? overrideUseSeparator = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseCurrency>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FranchiseCurrency Properties
                mock.Object.CustomName = customName;
                mock.Object.CustomTranslationKey = customTranslationKey;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.MasterID = masterID;
                mock.Object.OverrideDecimalPlaceAccuracy = overrideDecimalPlaceAccuracy;
                mock.Object.OverrideHtmlCharacterCode = overrideHtmlCharacterCode;
                mock.Object.OverrideHtmlDecimalCharacterCode = overrideHtmlDecimalCharacterCode;
                mock.Object.OverrideHtmlSeparatorCharacterCode = overrideHtmlSeparatorCharacterCode;
                mock.Object.OverrideRawCharacter = overrideRawCharacter;
                mock.Object.OverrideRawDecimalCharacter = overrideRawDecimalCharacter;
                mock.Object.OverrideRawSeparatorCharacter = overrideRawSeparatorCharacter;
                mock.Object.OverrideUnicodeSymbolValue = overrideUnicodeSymbolValue;
                mock.Object.OverrideUseSeparator = overrideUseSeparator;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FranchiseCurrency's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseCurrency's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseDistrict.</summary>
        /// <returns>The new FranchiseDistrict.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseDistrict>> CreateADummyFranchiseDistrictAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseDistrict>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FranchiseDistrict Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FranchiseDistrict's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawDistricts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseDistrict's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseImage.</summary>
        /// <returns>The new FranchiseImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseImage>> CreateADummyFranchiseImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // FranchiseImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawFranchiseImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // FranchiseImage's Related Objects
                // FranchiseImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseImageType.</summary>
        /// <returns>The new FranchiseImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseImageType>> CreateADummyFranchiseImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // FranchiseImageType Properties
                // Dynamic Linking
                // FranchiseImageType's Related Objects
                // FranchiseImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseInventoryLocation.</summary>
        /// <returns>The new FranchiseInventoryLocation.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseInventoryLocation>> CreateADummyFranchiseInventoryLocationAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseInventoryLocation>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // FranchiseInventoryLocation Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawFranchiseInventoryLocationTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // FranchiseInventoryLocation's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseInventoryLocation's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseInventoryLocationType.</summary>
        /// <returns>The new FranchiseInventoryLocationType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseInventoryLocationType>> CreateADummyFranchiseInventoryLocationTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseInventoryLocationType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // FranchiseInventoryLocationType Properties
                // Dynamic Linking
                // FranchiseInventoryLocationType's Related Objects
                // FranchiseInventoryLocationType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseLanguage.</summary>
        /// <returns>The new FranchiseLanguage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseLanguage>> CreateADummyFranchiseLanguageAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, string overrideISO639_1_2002 = null!, string overrideISO639_2_1998 = null!, string overrideISO639_3_2007 = null!, string overrideISO639_5_2008 = null!, string overrideLocale = null!, string overrideUnicodeName = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseLanguage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FranchiseLanguage Properties
                mock.Object.MasterID = masterID;
                mock.Object.OverrideISO639_1_2002 = overrideISO639_1_2002;
                mock.Object.OverrideISO639_2_1998 = overrideISO639_2_1998;
                mock.Object.OverrideISO639_3_2007 = overrideISO639_3_2007;
                mock.Object.OverrideISO639_5_2008 = overrideISO639_5_2008;
                mock.Object.OverrideLocale = overrideLocale;
                mock.Object.OverrideUnicodeName = overrideUnicodeName;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FranchiseLanguage's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseLanguage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseManufacturer.</summary>
        /// <returns>The new FranchiseManufacturer.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseManufacturer>> CreateADummyFranchiseManufacturerAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseManufacturer>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FranchiseManufacturer Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FranchiseManufacturer's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseManufacturer's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseProduct.</summary>
        /// <returns>The new FranchiseProduct.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseProduct>> CreateADummyFranchiseProductAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, decimal? priceBase = null!, decimal? priceMsrp = null!, decimal? priceReduction = null!, decimal? priceSale = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseProduct>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FranchiseProduct Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.PriceBase = priceBase;
                mock.Object.PriceMsrp = priceMsrp;
                mock.Object.PriceReduction = priceReduction;
                mock.Object.PriceSale = priceSale;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FranchiseProduct's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseProduct's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseRegion.</summary>
        /// <returns>The new FranchiseRegion.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseRegion>> CreateADummyFranchiseRegionAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseRegion>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FranchiseRegion Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FranchiseRegion's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseRegion's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseSiteDomain.</summary>
        /// <returns>The new FranchiseSiteDomain.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseSiteDomain>> CreateADummyFranchiseSiteDomainAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseSiteDomain>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FranchiseSiteDomain Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FranchiseSiteDomain's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawSiteDomains?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseSiteDomain's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseStore.</summary>
        /// <returns>The new FranchiseStore.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseStore>> CreateADummyFranchiseStoreAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseStore>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FranchiseStore Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FranchiseStore's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseStore's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseType.</summary>
        /// <returns>The new FranchiseType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseType>> CreateADummyFranchiseTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // FranchiseType Properties
                // Dynamic Linking
                // FranchiseType's Related Objects
                // FranchiseType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseUser.</summary>
        /// <returns>The new FranchiseUser.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseUser>> CreateADummyFranchiseUserAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseUser>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FranchiseUser Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FranchiseUser's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseUser's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy FranchiseVendor.</summary>
        /// <returns>The new FranchiseVendor.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<FranchiseVendor>> CreateADummyFranchiseVendorAsync(int id, string? key, string? jsonAttributes = null, bool isVisibleIn = false, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<FranchiseVendor>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // FranchiseVendor Properties
                mock.Object.IsVisibleIn = isVisibleIn;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // FranchiseVendor's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseVendor's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForFranchises(MockingSetup mockingSetup)
        {
            Func<Franchise> mockFuncFranchise = () =>
            {
                var mock = new Mock<Franchise>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Franchise Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawFranchiseTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawFranchiseImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseImage>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.FranchiseID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingDollarAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumForFreeShippingQuantityAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumForFreeShippingQuantityAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderDollarAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderDollarAmountBufferProductID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferCategory).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferCategoryID)?.Object);
                mock.Setup(m => m.MinimumOrderQuantityAmountBufferProduct).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.MinimumOrderQuantityAmountBufferProductID)?.Object);
                // Franchise's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => mockingSetup.RawFranchiseAccounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseAccount>());
                mock.Setup(m => m.Brands).Returns(() => mockingSetup.RawBrandFranchises?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandFranchise>());
                mock.Setup(m => m.Categories).Returns(() => mockingSetup.RawFranchiseCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseCategory>());
                mock.Setup(m => m.FranchiseCountries).Returns(() => mockingSetup.RawFranchiseCountries?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseCountry>());
                mock.Setup(m => m.FranchiseCurrencies).Returns(() => mockingSetup.RawFranchiseCurrencies?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseCurrency>());
                mock.Setup(m => m.FranchiseDistricts).Returns(() => mockingSetup.RawFranchiseDistricts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseDistrict>());
                mock.Setup(m => m.FranchiseInventoryLocations).Returns(() => mockingSetup.RawFranchiseInventoryLocations?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseInventoryLocation>());
                mock.Setup(m => m.FranchiseLanguages).Returns(() => mockingSetup.RawFranchiseLanguages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseLanguage>());
                mock.Setup(m => m.FranchiseRegions).Returns(() => mockingSetup.RawFranchiseRegions?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseRegion>());
                mock.Setup(m => m.FranchiseSiteDomains).Returns(() => mockingSetup.RawFranchiseSiteDomains?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseSiteDomain>());
                mock.Setup(m => m.Manufacturers).Returns(() => mockingSetup.RawFranchiseManufacturers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseManufacturer>());
                mock.Setup(m => m.Products).Returns(() => mockingSetup.RawFranchiseProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseProduct>());
                mock.Setup(m => m.Stores).Returns(() => mockingSetup.RawFranchiseStores?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseStore>());
                mock.Setup(m => m.Users).Returns(() => mockingSetup.RawFranchiseUsers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseUser>());
                mock.Setup(m => m.Vendors).Returns(() => mockingSetup.RawFranchiseVendors?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseVendor>());
                // Franchise's Related Objects
                return mock.Object;
            };
            For<IFranchise>().Use(() => mockFuncFranchise());
            For<Franchise>().Use(() => mockFuncFranchise());
            Func<FranchiseAccount> mockFuncFranchiseAccount = () =>
            {
                var mock = new Mock<FranchiseAccount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseAccount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.PricePoint).Returns(() => mockingSetup.RawPricePoints?.FirstOrDefault(x => x.Object.ID == mock.Object.PricePointID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseAccount's Associated Objects
                // FranchiseAccount's Related Objects
                return mock.Object;
            };
            For<IFranchiseAccount>().Use(() => mockFuncFranchiseAccount());
            For<FranchiseAccount>().Use(() => mockFuncFranchiseAccount());
            Func<FranchiseCategory> mockFuncFranchiseCategory = () =>
            {
                var mock = new Mock<FranchiseCategory>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseCategory Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseCategory's Associated Objects
                // FranchiseCategory's Related Objects
                return mock.Object;
            };
            For<IFranchiseCategory>().Use(() => mockFuncFranchiseCategory());
            For<FranchiseCategory>().Use(() => mockFuncFranchiseCategory());
            Func<FranchiseCountry> mockFuncFranchiseCountry = () =>
            {
                var mock = new Mock<FranchiseCountry>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseCountry Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseCountry's Associated Objects
                // FranchiseCountry's Related Objects
                return mock.Object;
            };
            For<IFranchiseCountry>().Use(() => mockFuncFranchiseCountry());
            For<FranchiseCountry>().Use(() => mockFuncFranchiseCountry());
            Func<FranchiseCurrency> mockFuncFranchiseCurrency = () =>
            {
                var mock = new Mock<FranchiseCurrency>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseCurrency Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseCurrency's Associated Objects
                // FranchiseCurrency's Related Objects
                return mock.Object;
            };
            For<IFranchiseCurrency>().Use(() => mockFuncFranchiseCurrency());
            For<FranchiseCurrency>().Use(() => mockFuncFranchiseCurrency());
            Func<FranchiseDistrict> mockFuncFranchiseDistrict = () =>
            {
                var mock = new Mock<FranchiseDistrict>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseDistrict Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawDistricts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseDistrict's Associated Objects
                // FranchiseDistrict's Related Objects
                return mock.Object;
            };
            For<IFranchiseDistrict>().Use(() => mockFuncFranchiseDistrict());
            For<FranchiseDistrict>().Use(() => mockFuncFranchiseDistrict());
            Func<FranchiseImage> mockFuncFranchiseImage = () =>
            {
                var mock = new Mock<FranchiseImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawFranchiseImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // FranchiseImage's Associated Objects
                // FranchiseImage's Related Objects
                return mock.Object;
            };
            For<IFranchiseImage>().Use(() => mockFuncFranchiseImage());
            For<FranchiseImage>().Use(() => mockFuncFranchiseImage());
            Func<FranchiseImageType> mockFuncFranchiseImageType = () =>
            {
                var mock = new Mock<FranchiseImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseImageType Properties
                // Dynamic Linking
                // FranchiseImageType's Associated Objects
                // FranchiseImageType's Related Objects
                return mock.Object;
            };
            For<IFranchiseImageType>().Use(() => mockFuncFranchiseImageType());
            For<FranchiseImageType>().Use(() => mockFuncFranchiseImageType());
            Func<FranchiseInventoryLocation> mockFuncFranchiseInventoryLocation = () =>
            {
                var mock = new Mock<FranchiseInventoryLocation>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseInventoryLocation Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawFranchiseInventoryLocationTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseInventoryLocation's Associated Objects
                // FranchiseInventoryLocation's Related Objects
                return mock.Object;
            };
            For<IFranchiseInventoryLocation>().Use(() => mockFuncFranchiseInventoryLocation());
            For<FranchiseInventoryLocation>().Use(() => mockFuncFranchiseInventoryLocation());
            Func<FranchiseInventoryLocationType> mockFuncFranchiseInventoryLocationType = () =>
            {
                var mock = new Mock<FranchiseInventoryLocationType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseInventoryLocationType Properties
                // Dynamic Linking
                // FranchiseInventoryLocationType's Associated Objects
                // FranchiseInventoryLocationType's Related Objects
                return mock.Object;
            };
            For<IFranchiseInventoryLocationType>().Use(() => mockFuncFranchiseInventoryLocationType());
            For<FranchiseInventoryLocationType>().Use(() => mockFuncFranchiseInventoryLocationType());
            Func<FranchiseLanguage> mockFuncFranchiseLanguage = () =>
            {
                var mock = new Mock<FranchiseLanguage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseLanguage Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseLanguage's Associated Objects
                // FranchiseLanguage's Related Objects
                return mock.Object;
            };
            For<IFranchiseLanguage>().Use(() => mockFuncFranchiseLanguage());
            For<FranchiseLanguage>().Use(() => mockFuncFranchiseLanguage());
            Func<FranchiseManufacturer> mockFuncFranchiseManufacturer = () =>
            {
                var mock = new Mock<FranchiseManufacturer>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseManufacturer Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseManufacturer's Associated Objects
                // FranchiseManufacturer's Related Objects
                return mock.Object;
            };
            For<IFranchiseManufacturer>().Use(() => mockFuncFranchiseManufacturer());
            For<FranchiseManufacturer>().Use(() => mockFuncFranchiseManufacturer());
            Func<FranchiseProduct> mockFuncFranchiseProduct = () =>
            {
                var mock = new Mock<FranchiseProduct>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseProduct Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseProduct's Associated Objects
                // FranchiseProduct's Related Objects
                return mock.Object;
            };
            For<IFranchiseProduct>().Use(() => mockFuncFranchiseProduct());
            For<FranchiseProduct>().Use(() => mockFuncFranchiseProduct());
            Func<FranchiseRegion> mockFuncFranchiseRegion = () =>
            {
                var mock = new Mock<FranchiseRegion>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseRegion Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseRegion's Associated Objects
                // FranchiseRegion's Related Objects
                return mock.Object;
            };
            For<IFranchiseRegion>().Use(() => mockFuncFranchiseRegion());
            For<FranchiseRegion>().Use(() => mockFuncFranchiseRegion());
            Func<FranchiseSiteDomain> mockFuncFranchiseSiteDomain = () =>
            {
                var mock = new Mock<FranchiseSiteDomain>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseSiteDomain Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawSiteDomains?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseSiteDomain's Associated Objects
                // FranchiseSiteDomain's Related Objects
                return mock.Object;
            };
            For<IFranchiseSiteDomain>().Use(() => mockFuncFranchiseSiteDomain());
            For<FranchiseSiteDomain>().Use(() => mockFuncFranchiseSiteDomain());
            Func<FranchiseStore> mockFuncFranchiseStore = () =>
            {
                var mock = new Mock<FranchiseStore>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseStore Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseStore's Associated Objects
                // FranchiseStore's Related Objects
                return mock.Object;
            };
            For<IFranchiseStore>().Use(() => mockFuncFranchiseStore());
            For<FranchiseStore>().Use(() => mockFuncFranchiseStore());
            Func<FranchiseType> mockFuncFranchiseType = () =>
            {
                var mock = new Mock<FranchiseType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseType Properties
                // Dynamic Linking
                // FranchiseType's Associated Objects
                // FranchiseType's Related Objects
                return mock.Object;
            };
            For<IFranchiseType>().Use(() => mockFuncFranchiseType());
            For<FranchiseType>().Use(() => mockFuncFranchiseType());
            Func<FranchiseUser> mockFuncFranchiseUser = () =>
            {
                var mock = new Mock<FranchiseUser>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseUser Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseUser's Associated Objects
                // FranchiseUser's Related Objects
                return mock.Object;
            };
            For<IFranchiseUser>().Use(() => mockFuncFranchiseUser());
            For<FranchiseUser>().Use(() => mockFuncFranchiseUser());
            Func<FranchiseVendor> mockFuncFranchiseVendor = () =>
            {
                var mock = new Mock<FranchiseVendor>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // FranchiseVendor Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // FranchiseVendor's Associated Objects
                // FranchiseVendor's Related Objects
                return mock.Object;
            };
            For<IFranchiseVendor>().Use(() => mockFuncFranchiseVendor());
            For<FranchiseVendor>().Use(() => mockFuncFranchiseVendor());
        }
    }
}
