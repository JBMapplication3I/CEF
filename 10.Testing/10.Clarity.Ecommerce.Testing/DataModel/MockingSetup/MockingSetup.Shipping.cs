// <autogenerated>
// <copyright file="Shipping.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Shipping section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoShipping { private get; set; }

        // Enable the tables specifically on run
        public bool DoPackageTable { private get; set; }
        public bool DoPackageTypeTable { private get; set; }
        public bool DoRateQuoteTable { private get; set; }
        public bool DoShipCarrierTable { private get; set; }
        public bool DoShipCarrierMethodTable { private get; set; }
        public bool DoShipmentTable { private get; set; }
        public bool DoShipmentEventTable { private get; set; }
        public bool DoShipmentStatusTable { private get; set; }
        public bool DoShipmentTypeTable { private get; set; }

        // Dirty Checking
        public bool PackageDirty { private get; set; }
        public bool PackageTypeDirty { private get; set; }
        public bool RateQuoteDirty { private get; set; }
        public bool ShipCarrierDirty { private get; set; }
        public bool ShipCarrierMethodDirty { private get; set; }
        public bool ShipmentDirty { private get; set; }
        public bool ShipmentEventDirty { private get; set; }
        public bool ShipmentStatusDirty { private get; set; }
        public bool ShipmentTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<Package>>? Packages { get; private set; }
        public Mock<DbSet<PackageType>>? PackageTypes { get; private set; }
        public Mock<DbSet<RateQuote>>? RateQuotes { get; private set; }
        public Mock<DbSet<ShipCarrier>>? ShipCarriers { get; private set; }
        public Mock<DbSet<ShipCarrierMethod>>? ShipCarrierMethods { get; private set; }
        public Mock<DbSet<Shipment>>? Shipments { get; private set; }
        public Mock<DbSet<ShipmentEvent>>? ShipmentEvents { get; private set; }
        public Mock<DbSet<ShipmentStatus>>? ShipmentStatuses { get; private set; }
        public Mock<DbSet<ShipmentType>>? ShipmentTypes { get; private set; }

        // Raw Data
        public List<Mock<Package>>? RawPackages { get; private set; }
        public List<Mock<PackageType>>? RawPackageTypes { get; private set; }
        public List<Mock<RateQuote>>? RawRateQuotes { get; private set; }
        public List<Mock<ShipCarrier>>? RawShipCarriers { get; private set; }
        public List<Mock<ShipCarrierMethod>>? RawShipCarrierMethods { get; private set; }
        public List<Mock<Shipment>>? RawShipments { get; private set; }
        public List<Mock<ShipmentEvent>>? RawShipmentEvents { get; private set; }
        public List<Mock<ShipmentStatus>>? RawShipmentStatuses { get; private set; }
        public List<Mock<ShipmentType>>? RawShipmentTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksShippingAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoShipping || (DoPackageTable && (!dirtyOnly || PackageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPackages == null) { throw new InvalidOperationException("Raw Packages was null"); }
                    await InitializeMockSetFromListAsync(Packages, RawPackages).ConfigureAwait(false);
                    context.Setup(m => m.Packages).Returns(() => Packages?.Object!);
                    context.Setup(m => m.Set<Package>()).Returns(() => Packages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShipping || (DoPackageTypeTable && (!dirtyOnly || PackageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPackageTypes == null) { throw new InvalidOperationException("Raw PackageTypes was null"); }
                    await InitializeMockSetFromListAsync(PackageTypes, RawPackageTypes).ConfigureAwait(false);
                    context.Setup(m => m.PackageTypes).Returns(() => PackageTypes?.Object!);
                    context.Setup(m => m.Set<PackageType>()).Returns(() => PackageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShipping || (DoRateQuoteTable && (!dirtyOnly || RateQuoteDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawRateQuotes == null) { throw new InvalidOperationException("Raw RateQuotes was null"); }
                    await InitializeMockSetFromListAsync(RateQuotes, RawRateQuotes).ConfigureAwait(false);
                    context.Setup(m => m.RateQuotes).Returns(() => RateQuotes?.Object!);
                    context.Setup(m => m.Set<RateQuote>()).Returns(() => RateQuotes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShipping || (DoShipCarrierTable && (!dirtyOnly || ShipCarrierDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawShipCarriers == null) { throw new InvalidOperationException("Raw ShipCarriers was null"); }
                    await InitializeMockSetFromListAsync(ShipCarriers, RawShipCarriers).ConfigureAwait(false);
                    context.Setup(m => m.ShipCarriers).Returns(() => ShipCarriers?.Object!);
                    context.Setup(m => m.Set<ShipCarrier>()).Returns(() => ShipCarriers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShipping || (DoShipCarrierMethodTable && (!dirtyOnly || ShipCarrierMethodDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawShipCarrierMethods == null) { throw new InvalidOperationException("Raw ShipCarrierMethods was null"); }
                    await InitializeMockSetFromListAsync(ShipCarrierMethods, RawShipCarrierMethods).ConfigureAwait(false);
                    context.Setup(m => m.ShipCarrierMethods).Returns(() => ShipCarrierMethods?.Object!);
                    context.Setup(m => m.Set<ShipCarrierMethod>()).Returns(() => ShipCarrierMethods?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShipping || (DoShipmentTable && (!dirtyOnly || ShipmentDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawShipments == null) { throw new InvalidOperationException("Raw Shipments was null"); }
                    await InitializeMockSetFromListAsync(Shipments, RawShipments).ConfigureAwait(false);
                    context.Setup(m => m.Shipments).Returns(() => Shipments?.Object!);
                    context.Setup(m => m.Set<Shipment>()).Returns(() => Shipments?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShipping || (DoShipmentEventTable && (!dirtyOnly || ShipmentEventDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawShipmentEvents == null) { throw new InvalidOperationException("Raw ShipmentEvents was null"); }
                    await InitializeMockSetFromListAsync(ShipmentEvents, RawShipmentEvents).ConfigureAwait(false);
                    context.Setup(m => m.ShipmentEvents).Returns(() => ShipmentEvents?.Object!);
                    context.Setup(m => m.Set<ShipmentEvent>()).Returns(() => ShipmentEvents?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShipping || (DoShipmentStatusTable && (!dirtyOnly || ShipmentStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawShipmentStatuses == null) { throw new InvalidOperationException("Raw ShipmentStatuses was null"); }
                    await InitializeMockSetFromListAsync(ShipmentStatuses, RawShipmentStatuses).ConfigureAwait(false);
                    context.Setup(m => m.ShipmentStatuses).Returns(() => ShipmentStatuses?.Object!);
                    context.Setup(m => m.Set<ShipmentStatus>()).Returns(() => ShipmentStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoShipping || (DoShipmentTypeTable && (!dirtyOnly || ShipmentTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawShipmentTypes == null) { throw new InvalidOperationException("Raw ShipmentTypes was null"); }
                    await InitializeMockSetFromListAsync(ShipmentTypes, RawShipmentTypes).ConfigureAwait(false);
                    context.Setup(m => m.ShipmentTypes).Returns(() => ShipmentTypes?.Object!);
                    context.Setup(m => m.Set<ShipmentType>()).Returns(() => ShipmentTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPackagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Package>> data)
        {
            if (!DoAll && !DoShipping && !DoPackageTable) { return; }
            Packages ??= new Mock<DbSet<Package>>();
            await InitializeMockSetFromListAsync(Packages, data).ConfigureAwait(false);
            context.Setup(m => m.Packages).Returns(() => Packages.Object);
            context.Setup(m => m.Set<Package>()).Returns(() => Packages.Object);
            TableRecordCounts[typeof(Package)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Package)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Package)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Package)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPackageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PackageType>> data)
        {
            if (!DoAll && !DoShipping && !DoPackageTypeTable) { return; }
            PackageTypes ??= new Mock<DbSet<PackageType>>();
            await InitializeMockSetFromListAsync(PackageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.PackageTypes).Returns(() => PackageTypes.Object);
            context.Setup(m => m.Set<PackageType>()).Returns(() => PackageTypes.Object);
            TableRecordCounts[typeof(PackageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PackageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PackageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PackageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(PackageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetRateQuotesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<RateQuote>> data)
        {
            if (!DoAll && !DoShipping && !DoRateQuoteTable) { return; }
            RateQuotes ??= new Mock<DbSet<RateQuote>>();
            await InitializeMockSetFromListAsync(RateQuotes, data).ConfigureAwait(false);
            context.Setup(m => m.RateQuotes).Returns(() => RateQuotes.Object);
            context.Setup(m => m.Set<RateQuote>()).Returns(() => RateQuotes.Object);
            TableRecordCounts[typeof(RateQuote)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(RateQuote)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(RateQuote)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(RateQuote)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetShipCarriersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ShipCarrier>> data)
        {
            if (!DoAll && !DoShipping && !DoShipCarrierTable) { return; }
            ShipCarriers ??= new Mock<DbSet<ShipCarrier>>();
            await InitializeMockSetFromListAsync(ShipCarriers, data).ConfigureAwait(false);
            context.Setup(m => m.ShipCarriers).Returns(() => ShipCarriers.Object);
            context.Setup(m => m.Set<ShipCarrier>()).Returns(() => ShipCarriers.Object);
            TableRecordCounts[typeof(ShipCarrier)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ShipCarrier)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ShipCarrier)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ShipCarrier)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetShipCarrierMethodsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ShipCarrierMethod>> data)
        {
            if (!DoAll && !DoShipping && !DoShipCarrierMethodTable) { return; }
            ShipCarrierMethods ??= new Mock<DbSet<ShipCarrierMethod>>();
            await InitializeMockSetFromListAsync(ShipCarrierMethods, data).ConfigureAwait(false);
            context.Setup(m => m.ShipCarrierMethods).Returns(() => ShipCarrierMethods.Object);
            context.Setup(m => m.Set<ShipCarrierMethod>()).Returns(() => ShipCarrierMethods.Object);
            TableRecordCounts[typeof(ShipCarrierMethod)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ShipCarrierMethod)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ShipCarrierMethod)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ShipCarrierMethod)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetShipmentsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Shipment>> data)
        {
            if (!DoAll && !DoShipping && !DoShipmentTable) { return; }
            Shipments ??= new Mock<DbSet<Shipment>>();
            await InitializeMockSetFromListAsync(Shipments, data).ConfigureAwait(false);
            context.Setup(m => m.Shipments).Returns(() => Shipments.Object);
            context.Setup(m => m.Set<Shipment>()).Returns(() => Shipments.Object);
            TableRecordCounts[typeof(Shipment)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Shipment)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Shipment)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetShipmentEventsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ShipmentEvent>> data)
        {
            if (!DoAll && !DoShipping && !DoShipmentEventTable) { return; }
            ShipmentEvents ??= new Mock<DbSet<ShipmentEvent>>();
            await InitializeMockSetFromListAsync(ShipmentEvents, data).ConfigureAwait(false);
            context.Setup(m => m.ShipmentEvents).Returns(() => ShipmentEvents.Object);
            context.Setup(m => m.Set<ShipmentEvent>()).Returns(() => ShipmentEvents.Object);
            TableRecordCounts[typeof(ShipmentEvent)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ShipmentEvent)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ShipmentEvent)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetShipmentStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ShipmentStatus>> data)
        {
            if (!DoAll && !DoShipping && !DoShipmentStatusTable) { return; }
            ShipmentStatuses ??= new Mock<DbSet<ShipmentStatus>>();
            await InitializeMockSetFromListAsync(ShipmentStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.ShipmentStatuses).Returns(() => ShipmentStatuses.Object);
            context.Setup(m => m.Set<ShipmentStatus>()).Returns(() => ShipmentStatuses.Object);
            TableRecordCounts[typeof(ShipmentStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ShipmentStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ShipmentStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ShipmentStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ShipmentStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetShipmentTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ShipmentType>> data)
        {
            if (!DoAll && !DoShipping && !DoShipmentTypeTable) { return; }
            ShipmentTypes ??= new Mock<DbSet<ShipmentType>>();
            await InitializeMockSetFromListAsync(ShipmentTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ShipmentTypes).Returns(() => ShipmentTypes.Object);
            context.Setup(m => m.Set<ShipmentType>()).Returns(() => ShipmentTypes.Object);
            TableRecordCounts[typeof(ShipmentType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ShipmentType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ShipmentType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ShipmentType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ShipmentType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy Package.</summary>
        /// <returns>The new Package.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Package>> CreateADummyPackageAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, string? jsonAttributes = null, decimal depth = 0m, string depthUnitOfMeasure = null!, decimal dimensionalWeight = 0m, string dimensionalWeightUnitOfMeasure = null!, decimal height = 0m, string heightUnitOfMeasure = null!, bool isCustom = false, decimal weight = 0m, string weightUnitOfMeasure = null!, decimal width = 0m, string widthUnitOfMeasure = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Package>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // Package Properties
                mock.Object.Depth = depth;
                mock.Object.DepthUnitOfMeasure = depthUnitOfMeasure;
                mock.Object.DimensionalWeight = dimensionalWeight;
                mock.Object.DimensionalWeightUnitOfMeasure = dimensionalWeightUnitOfMeasure;
                mock.Object.Height = height;
                mock.Object.HeightUnitOfMeasure = heightUnitOfMeasure;
                mock.Object.IsCustom = isCustom;
                mock.Object.Weight = weight;
                mock.Object.WeightUnitOfMeasure = weightUnitOfMeasure;
                mock.Object.Width = width;
                mock.Object.WidthUnitOfMeasure = widthUnitOfMeasure;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawPackageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // Package's Related Objects
                // Package's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PackageType.</summary>
        /// <returns>The new PackageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PackageType>> CreateADummyPackageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PackageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // PackageType Properties
                // Dynamic Linking
                // PackageType's Related Objects
                // PackageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy RateQuote.</summary>
        /// <returns>The new RateQuote.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<RateQuote>> CreateADummyRateQuoteAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, long? cartHash = null!, int? cartID = null!, DateTime? estimatedDeliveryDate = null!, int? purchaseOrderID = null!, decimal? rate = null!, DateTime? rateTimestamp = null!, int? salesInvoiceID = null!, int? salesOrderID = null!, int? salesQuoteID = null!, int? salesReturnID = null!, int? sampleRequestID = null!, bool selected = false, int shipCarrierMethodID = 1, DateTime? targetShippingDate = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<RateQuote>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // RateQuote Properties
                mock.Object.CartHash = cartHash;
                mock.Object.CartID = cartID;
                mock.Object.EstimatedDeliveryDate = estimatedDeliveryDate;
                mock.Object.PurchaseOrderID = purchaseOrderID;
                mock.Object.Rate = rate;
                mock.Object.RateTimestamp = rateTimestamp;
                mock.Object.SalesInvoiceID = salesInvoiceID;
                mock.Object.SalesOrderID = salesOrderID;
                mock.Object.SalesQuoteID = salesQuoteID;
                mock.Object.SalesReturnID = salesReturnID;
                mock.Object.SampleRequestID = sampleRequestID;
                mock.Object.Selected = selected;
                mock.Object.ShipCarrierMethodID = shipCarrierMethodID;
                mock.Object.TargetShippingDate = targetShippingDate;
                // Dynamic Linking
                // RateQuote's Related Objects
                mock.Setup(m => m.Cart).Returns(() => RawCarts?.FirstOrDefault(x => x.Object.ID == mock.Object.CartID)?.Object);
                mock.Setup(m => m.PurchaseOrder).Returns(() => RawPurchaseOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.PurchaseOrderID)?.Object);
                mock.Setup(m => m.SalesInvoice).Returns(() => RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesInvoiceID)?.Object);
                mock.Setup(m => m.SalesOrder).Returns(() => RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesOrderID)?.Object);
                mock.Setup(m => m.SalesQuote).Returns(() => RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesQuoteID)?.Object);
                mock.Setup(m => m.SalesReturn).Returns(() => RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesReturnID)?.Object);
                mock.Setup(m => m.SampleRequest).Returns(() => RawSampleRequests?.FirstOrDefault(x => x.Object.ID == mock.Object.SampleRequestID)?.Object);
                mock.Setup(m => m.ShipCarrierMethod).Returns(() => RawShipCarrierMethods?.FirstOrDefault(x => x.Object.ID == mock.Object.ShipCarrierMethodID)?.Object);
                // RateQuote's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ShipCarrier.</summary>
        /// <returns>The new ShipCarrier.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ShipCarrier>> CreateADummyShipCarrierAsync(int id, string? key, string? name, string? desc = null, int? contactID = null, string? jsonAttributes = null, string accountNumber = null!, string authentication = null!, string encryptedPassword = null!, bool isInbound = false, bool isOutbound = false, DateTime? pickupTime = null!, string pointOfContact = null!, string salesRep = null!, string username = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ShipCarrier>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveANullableContactBase Properties
                mock.Object.ContactID = contactID;
                // ShipCarrier Properties
                mock.Object.AccountNumber = accountNumber;
                mock.Object.Authentication = authentication;
                mock.Object.EncryptedPassword = encryptedPassword;
                mock.Object.IsInbound = isInbound;
                mock.Object.IsOutbound = isOutbound;
                mock.Object.PickupTime = pickupTime;
                mock.Object.PointOfContact = pointOfContact;
                mock.Object.SalesRep = salesRep;
                mock.Object.Username = username;
                // Dynamic Linking
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => RawContacts == null || mock.Object.ContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // ShipCarrier's Related Objects
                // ShipCarrier's Associated Objects
                mock.Setup(m => m.PurchaseOrders).Returns(() => RawPurchaseOrders?.Where(x => x.Object.ShipCarrierID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrder>());
                mock.Setup(m => m.ShipCarrierMethods).Returns(() => RawShipCarrierMethods?.Where(x => x.Object.ShipCarrierID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ShipCarrierMethod>());
                mock.Setup(m => m.Shipments).Returns(() => RawShipments?.Where(x => x.Object.ShipCarrierID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Shipment>());
                return mock;
            });
        }

        /// <summary>Creates a dummy ShipCarrierMethod.</summary>
        /// <returns>The new ShipCarrierMethod.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ShipCarrierMethod>> CreateADummyShipCarrierMethodAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int shipCarrierID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ShipCarrierMethod>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // ShipCarrierMethod Properties
                mock.Object.ShipCarrierID = shipCarrierID;
                // Dynamic Linking
                // ShipCarrierMethod's Related Objects
                mock.Setup(m => m.ShipCarrier).Returns(() => RawShipCarriers?.FirstOrDefault(x => x.Object.ID == mock.Object.ShipCarrierID)?.Object);
                // ShipCarrierMethod's Associated Objects
                mock.Setup(m => m.ProductShipCarrierMethods).Returns(() => RawProductShipCarrierMethods?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductShipCarrierMethod>());
                return mock;
            });
        }

        /// <summary>Creates a dummy Shipment.</summary>
        /// <returns>The new Shipment.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Shipment>> CreateADummyShipmentAsync(int id, string? key, int typeID = 1, int statusID = 1, string? jsonAttributes = null, DateTime? dateDelivered = null!, string destination = null!, int destinationContactID = 1, DateTime? estimatedDeliveryDate = null!, int? inventoryLocationSectionID = null!, decimal? negotiatedRate = null!, int originContactID = 1, decimal? publishedRate = null!, string reference1 = null!, string reference2 = null!, string reference3 = null!, int? shipCarrierID = null!, int? shipCarrierMethodID = null!, DateTime? shipDate = null!, DateTime? targetShippingDate = null!, string trackingNumber = null!, int? vendorID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Shipment>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // Shipment Properties
                mock.Object.DateDelivered = dateDelivered;
                mock.Object.Destination = destination;
                mock.Object.DestinationContactID = destinationContactID;
                mock.Object.EstimatedDeliveryDate = estimatedDeliveryDate;
                mock.Object.InventoryLocationSectionID = inventoryLocationSectionID;
                mock.Object.NegotiatedRate = negotiatedRate;
                mock.Object.OriginContactID = originContactID;
                mock.Object.PublishedRate = publishedRate;
                mock.Object.Reference1 = reference1;
                mock.Object.Reference2 = reference2;
                mock.Object.Reference3 = reference3;
                mock.Object.ShipCarrierID = shipCarrierID;
                mock.Object.ShipCarrierMethodID = shipCarrierMethodID;
                mock.Object.ShipDate = shipDate;
                mock.Object.TargetShippingDate = targetShippingDate;
                mock.Object.TrackingNumber = trackingNumber;
                mock.Object.VendorID = vendorID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawShipmentTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawShipmentStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // Shipment's Related Objects
                mock.Setup(m => m.DestinationContact).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.InventoryLocationSection).Returns(() => RawInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.InventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginContact).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginContactID)?.Object);
                mock.Setup(m => m.ShipCarrier).Returns(() => RawShipCarriers?.FirstOrDefault(x => x.Object.ID == mock.Object.ShipCarrierID)?.Object);
                mock.Setup(m => m.ShipCarrierMethod).Returns(() => RawShipCarrierMethods?.FirstOrDefault(x => x.Object.ID == mock.Object.ShipCarrierMethodID)?.Object);
                mock.Setup(m => m.Vendor).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.VendorID)?.Object);
                // Shipment's Associated Objects
                mock.Setup(m => m.ShipmentEvents).Returns(() => RawShipmentEvents?.Where(x => x.Object.ShipmentID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ShipmentEvent>());
                return mock;
            });
        }

        /// <summary>Creates a dummy ShipmentEvent.</summary>
        /// <returns>The new ShipmentEvent.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ShipmentEvent>> CreateADummyShipmentEventAsync(int id, string? key, string? jsonAttributes = null, int addressID = 1, DateTime eventDate = default, string note = null!, int shipmentID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ShipmentEvent>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ShipmentEvent Properties
                mock.Object.AddressID = addressID;
                mock.Object.EventDate = eventDate;
                mock.Object.Note = note;
                mock.Object.ShipmentID = shipmentID;
                // Dynamic Linking
                // ShipmentEvent's Related Objects
                mock.Setup(m => m.Address).Returns(() => RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                mock.Setup(m => m.Shipment).Returns(() => RawShipments?.FirstOrDefault(x => x.Object.ID == mock.Object.ShipmentID)?.Object);
                // ShipmentEvent's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ShipmentStatus.</summary>
        /// <returns>The new ShipmentStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ShipmentStatus>> CreateADummyShipmentStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ShipmentStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ShipmentStatus Properties
                // Dynamic Linking
                // ShipmentStatus's Related Objects
                // ShipmentStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ShipmentType.</summary>
        /// <returns>The new ShipmentType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ShipmentType>> CreateADummyShipmentTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ShipmentType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ShipmentType Properties
                // Dynamic Linking
                // ShipmentType's Related Objects
                // ShipmentType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForShipping(MockingSetup mockingSetup)
        {
            Func<Package> mockFuncPackage = () =>
            {
                var mock = new Mock<Package>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Package Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawPackageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // Package's Associated Objects
                // Package's Related Objects
                return mock.Object;
            };
            For<IPackage>().Use(() => mockFuncPackage());
            For<Package>().Use(() => mockFuncPackage());
            Func<PackageType> mockFuncPackageType = () =>
            {
                var mock = new Mock<PackageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PackageType Properties
                // Dynamic Linking
                // PackageType's Associated Objects
                // PackageType's Related Objects
                return mock.Object;
            };
            For<IPackageType>().Use(() => mockFuncPackageType());
            For<PackageType>().Use(() => mockFuncPackageType());
            Func<RateQuote> mockFuncRateQuote = () =>
            {
                var mock = new Mock<RateQuote>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // RateQuote Properties
                // Dynamic Linking
                mock.Setup(m => m.Cart).Returns(() => mockingSetup.RawCarts?.FirstOrDefault(x => x.Object.ID == mock.Object.CartID)?.Object);
                mock.Setup(m => m.PurchaseOrder).Returns(() => mockingSetup.RawPurchaseOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.PurchaseOrderID)?.Object);
                mock.Setup(m => m.SalesInvoice).Returns(() => mockingSetup.RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesInvoiceID)?.Object);
                mock.Setup(m => m.SalesOrder).Returns(() => mockingSetup.RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesOrderID)?.Object);
                mock.Setup(m => m.SalesQuote).Returns(() => mockingSetup.RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesQuoteID)?.Object);
                mock.Setup(m => m.SalesReturn).Returns(() => mockingSetup.RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesReturnID)?.Object);
                mock.Setup(m => m.SampleRequest).Returns(() => mockingSetup.RawSampleRequests?.FirstOrDefault(x => x.Object.ID == mock.Object.SampleRequestID)?.Object);
                mock.Setup(m => m.ShipCarrierMethod).Returns(() => mockingSetup.RawShipCarrierMethods?.FirstOrDefault(x => x.Object.ID == mock.Object.ShipCarrierMethodID)?.Object);
                // RateQuote's Associated Objects
                // RateQuote's Related Objects
                return mock.Object;
            };
            For<IRateQuote>().Use(() => mockFuncRateQuote());
            For<RateQuote>().Use(() => mockFuncRateQuote());
            Func<ShipCarrier> mockFuncShipCarrier = () =>
            {
                var mock = new Mock<ShipCarrier>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ShipCarrier Properties
                // Dynamic Linking
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // ShipCarrier's Associated Objects
                mock.Setup(m => m.PurchaseOrders).Returns(() => mockingSetup.RawPurchaseOrders?.Where(x => x.Object.ShipCarrierID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PurchaseOrder>());
                mock.Setup(m => m.ShipCarrierMethods).Returns(() => mockingSetup.RawShipCarrierMethods?.Where(x => x.Object.ShipCarrierID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ShipCarrierMethod>());
                mock.Setup(m => m.Shipments).Returns(() => mockingSetup.RawShipments?.Where(x => x.Object.ShipCarrierID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Shipment>());
                // ShipCarrier's Related Objects
                return mock.Object;
            };
            For<IShipCarrier>().Use(() => mockFuncShipCarrier());
            For<ShipCarrier>().Use(() => mockFuncShipCarrier());
            Func<ShipCarrierMethod> mockFuncShipCarrierMethod = () =>
            {
                var mock = new Mock<ShipCarrierMethod>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ShipCarrierMethod Properties
                // Dynamic Linking
                mock.Setup(m => m.ShipCarrier).Returns(() => mockingSetup.RawShipCarriers?.FirstOrDefault(x => x.Object.ID == mock.Object.ShipCarrierID)?.Object);
                // ShipCarrierMethod's Associated Objects
                mock.Setup(m => m.ProductShipCarrierMethods).Returns(() => mockingSetup.RawProductShipCarrierMethods?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductShipCarrierMethod>());
                // ShipCarrierMethod's Related Objects
                return mock.Object;
            };
            For<IShipCarrierMethod>().Use(() => mockFuncShipCarrierMethod());
            For<ShipCarrierMethod>().Use(() => mockFuncShipCarrierMethod());
            Func<Shipment> mockFuncShipment = () =>
            {
                var mock = new Mock<Shipment>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Shipment Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawShipmentTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawShipmentStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.InventoryLocationSection).Returns(() => mockingSetup.RawInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.InventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginContact).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginContactID)?.Object);
                mock.Setup(m => m.ShipCarrier).Returns(() => mockingSetup.RawShipCarriers?.FirstOrDefault(x => x.Object.ID == mock.Object.ShipCarrierID)?.Object);
                mock.Setup(m => m.ShipCarrierMethod).Returns(() => mockingSetup.RawShipCarrierMethods?.FirstOrDefault(x => x.Object.ID == mock.Object.ShipCarrierMethodID)?.Object);
                mock.Setup(m => m.Vendor).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.VendorID)?.Object);
                // Shipment's Associated Objects
                mock.Setup(m => m.ShipmentEvents).Returns(() => mockingSetup.RawShipmentEvents?.Where(x => x.Object.ShipmentID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ShipmentEvent>());
                // Shipment's Related Objects
                return mock.Object;
            };
            For<IShipment>().Use(() => mockFuncShipment());
            For<Shipment>().Use(() => mockFuncShipment());
            Func<ShipmentEvent> mockFuncShipmentEvent = () =>
            {
                var mock = new Mock<ShipmentEvent>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ShipmentEvent Properties
                // Dynamic Linking
                mock.Setup(m => m.Address).Returns(() => mockingSetup.RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                mock.Setup(m => m.Shipment).Returns(() => mockingSetup.RawShipments?.FirstOrDefault(x => x.Object.ID == mock.Object.ShipmentID)?.Object);
                // ShipmentEvent's Associated Objects
                // ShipmentEvent's Related Objects
                return mock.Object;
            };
            For<IShipmentEvent>().Use(() => mockFuncShipmentEvent());
            For<ShipmentEvent>().Use(() => mockFuncShipmentEvent());
            Func<ShipmentStatus> mockFuncShipmentStatus = () =>
            {
                var mock = new Mock<ShipmentStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ShipmentStatus Properties
                // Dynamic Linking
                // ShipmentStatus's Associated Objects
                // ShipmentStatus's Related Objects
                return mock.Object;
            };
            For<IShipmentStatus>().Use(() => mockFuncShipmentStatus());
            For<ShipmentStatus>().Use(() => mockFuncShipmentStatus());
            Func<ShipmentType> mockFuncShipmentType = () =>
            {
                var mock = new Mock<ShipmentType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ShipmentType Properties
                // Dynamic Linking
                // ShipmentType's Associated Objects
                // ShipmentType's Related Objects
                return mock.Object;
            };
            For<IShipmentType>().Use(() => mockFuncShipmentType());
            For<ShipmentType>().Use(() => mockFuncShipmentType());
        }
    }
}
