// <autogenerated>
// <copyright file="Advertising.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Advertising section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoAdvertising { private get; set; }

        // Enable the tables specifically on run
        public bool DoAdTable { private get; set; }
        public bool DoAdAccountTable { private get; set; }
        public bool DoAdBrandTable { private get; set; }
        public bool DoAdFranchiseTable { private get; set; }
        public bool DoAdImageTable { private get; set; }
        public bool DoAdImageTypeTable { private get; set; }
        public bool DoAdStatusTable { private get; set; }
        public bool DoAdStoreTable { private get; set; }
        public bool DoAdTypeTable { private get; set; }
        public bool DoAdZoneTable { private get; set; }
        public bool DoAdZoneAccessTable { private get; set; }
        public bool DoZoneTable { private get; set; }
        public bool DoZoneStatusTable { private get; set; }
        public bool DoZoneTypeTable { private get; set; }

        // Dirty Checking
        public bool AdDirty { private get; set; }
        public bool AdAccountDirty { private get; set; }
        public bool AdBrandDirty { private get; set; }
        public bool AdFranchiseDirty { private get; set; }
        public bool AdImageDirty { private get; set; }
        public bool AdImageTypeDirty { private get; set; }
        public bool AdStatusDirty { private get; set; }
        public bool AdStoreDirty { private get; set; }
        public bool AdTypeDirty { private get; set; }
        public bool AdZoneDirty { private get; set; }
        public bool AdZoneAccessDirty { private get; set; }
        public bool ZoneDirty { private get; set; }
        public bool ZoneStatusDirty { private get; set; }
        public bool ZoneTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<Ad>>? Ads { get; private set; }
        public Mock<DbSet<AdAccount>>? AdAccounts { get; private set; }
        public Mock<DbSet<AdBrand>>? AdBrands { get; private set; }
        public Mock<DbSet<AdFranchise>>? AdFranchises { get; private set; }
        public Mock<DbSet<AdImage>>? AdImages { get; private set; }
        public Mock<DbSet<AdImageType>>? AdImageTypes { get; private set; }
        public Mock<DbSet<AdStatus>>? AdStatuses { get; private set; }
        public Mock<DbSet<AdStore>>? AdStores { get; private set; }
        public Mock<DbSet<AdType>>? AdTypes { get; private set; }
        public Mock<DbSet<AdZone>>? AdZones { get; private set; }
        public Mock<DbSet<AdZoneAccess>>? AdZoneAccesses { get; private set; }
        public Mock<DbSet<Zone>>? Zones { get; private set; }
        public Mock<DbSet<ZoneStatus>>? ZoneStatuses { get; private set; }
        public Mock<DbSet<ZoneType>>? ZoneTypes { get; private set; }

        // Raw Data
        public List<Mock<Ad>>? RawAds { get; private set; }
        public List<Mock<AdAccount>>? RawAdAccounts { get; private set; }
        public List<Mock<AdBrand>>? RawAdBrands { get; private set; }
        public List<Mock<AdFranchise>>? RawAdFranchises { get; private set; }
        public List<Mock<AdImage>>? RawAdImages { get; private set; }
        public List<Mock<AdImageType>>? RawAdImageTypes { get; private set; }
        public List<Mock<AdStatus>>? RawAdStatuses { get; private set; }
        public List<Mock<AdStore>>? RawAdStores { get; private set; }
        public List<Mock<AdType>>? RawAdTypes { get; private set; }
        public List<Mock<AdZone>>? RawAdZones { get; private set; }
        public List<Mock<AdZoneAccess>>? RawAdZoneAccesses { get; private set; }
        public List<Mock<Zone>>? RawZones { get; private set; }
        public List<Mock<ZoneStatus>>? RawZoneStatuses { get; private set; }
        public List<Mock<ZoneType>>? RawZoneTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksAdvertisingAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoAdvertising || (DoAdTable && (!dirtyOnly || AdDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAds == null) { throw new InvalidOperationException("Raw Ads was null"); }
                    await InitializeMockSetFromListAsync(Ads, RawAds).ConfigureAwait(false);
                    context.Setup(m => m.Ads).Returns(() => Ads?.Object!);
                    context.Setup(m => m.Set<Ad>()).Returns(() => Ads?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAdvertising || (DoAdAccountTable && (!dirtyOnly || AdAccountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAdAccounts == null) { throw new InvalidOperationException("Raw AdAccounts was null"); }
                    await InitializeMockSetFromListAsync(AdAccounts, RawAdAccounts).ConfigureAwait(false);
                    context.Setup(m => m.AdAccounts).Returns(() => AdAccounts?.Object!);
                    context.Setup(m => m.Set<AdAccount>()).Returns(() => AdAccounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAdvertising || (DoAdBrandTable && (!dirtyOnly || AdBrandDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAdBrands == null) { throw new InvalidOperationException("Raw AdBrands was null"); }
                    await InitializeMockSetFromListAsync(AdBrands, RawAdBrands).ConfigureAwait(false);
                    context.Setup(m => m.AdBrands).Returns(() => AdBrands?.Object!);
                    context.Setup(m => m.Set<AdBrand>()).Returns(() => AdBrands?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAdvertising || (DoAdFranchiseTable && (!dirtyOnly || AdFranchiseDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAdFranchises == null) { throw new InvalidOperationException("Raw AdFranchises was null"); }
                    await InitializeMockSetFromListAsync(AdFranchises, RawAdFranchises).ConfigureAwait(false);
                    context.Setup(m => m.AdFranchises).Returns(() => AdFranchises?.Object!);
                    context.Setup(m => m.Set<AdFranchise>()).Returns(() => AdFranchises?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAdvertising || (DoAdImageTable && (!dirtyOnly || AdImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAdImages == null) { throw new InvalidOperationException("Raw AdImages was null"); }
                    await InitializeMockSetFromListAsync(AdImages, RawAdImages).ConfigureAwait(false);
                    context.Setup(m => m.AdImages).Returns(() => AdImages?.Object!);
                    context.Setup(m => m.Set<AdImage>()).Returns(() => AdImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAdvertising || (DoAdImageTypeTable && (!dirtyOnly || AdImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAdImageTypes == null) { throw new InvalidOperationException("Raw AdImageTypes was null"); }
                    await InitializeMockSetFromListAsync(AdImageTypes, RawAdImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.AdImageTypes).Returns(() => AdImageTypes?.Object!);
                    context.Setup(m => m.Set<AdImageType>()).Returns(() => AdImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAdvertising || (DoAdStatusTable && (!dirtyOnly || AdStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAdStatuses == null) { throw new InvalidOperationException("Raw AdStatuses was null"); }
                    await InitializeMockSetFromListAsync(AdStatuses, RawAdStatuses).ConfigureAwait(false);
                    context.Setup(m => m.AdStatuses).Returns(() => AdStatuses?.Object!);
                    context.Setup(m => m.Set<AdStatus>()).Returns(() => AdStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAdvertising || (DoAdStoreTable && (!dirtyOnly || AdStoreDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAdStores == null) { throw new InvalidOperationException("Raw AdStores was null"); }
                    await InitializeMockSetFromListAsync(AdStores, RawAdStores).ConfigureAwait(false);
                    context.Setup(m => m.AdStores).Returns(() => AdStores?.Object!);
                    context.Setup(m => m.Set<AdStore>()).Returns(() => AdStores?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAdvertising || (DoAdTypeTable && (!dirtyOnly || AdTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAdTypes == null) { throw new InvalidOperationException("Raw AdTypes was null"); }
                    await InitializeMockSetFromListAsync(AdTypes, RawAdTypes).ConfigureAwait(false);
                    context.Setup(m => m.AdTypes).Returns(() => AdTypes?.Object!);
                    context.Setup(m => m.Set<AdType>()).Returns(() => AdTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAdvertising || (DoAdZoneTable && (!dirtyOnly || AdZoneDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAdZones == null) { throw new InvalidOperationException("Raw AdZones was null"); }
                    await InitializeMockSetFromListAsync(AdZones, RawAdZones).ConfigureAwait(false);
                    context.Setup(m => m.AdZones).Returns(() => AdZones?.Object!);
                    context.Setup(m => m.Set<AdZone>()).Returns(() => AdZones?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAdvertising || (DoAdZoneAccessTable && (!dirtyOnly || AdZoneAccessDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAdZoneAccesses == null) { throw new InvalidOperationException("Raw AdZoneAccesses was null"); }
                    await InitializeMockSetFromListAsync(AdZoneAccesses, RawAdZoneAccesses).ConfigureAwait(false);
                    context.Setup(m => m.AdZoneAccesses).Returns(() => AdZoneAccesses?.Object!);
                    context.Setup(m => m.Set<AdZoneAccess>()).Returns(() => AdZoneAccesses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAdvertising || (DoZoneTable && (!dirtyOnly || ZoneDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawZones == null) { throw new InvalidOperationException("Raw Zones was null"); }
                    await InitializeMockSetFromListAsync(Zones, RawZones).ConfigureAwait(false);
                    context.Setup(m => m.Zones).Returns(() => Zones?.Object!);
                    context.Setup(m => m.Set<Zone>()).Returns(() => Zones?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAdvertising || (DoZoneStatusTable && (!dirtyOnly || ZoneStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawZoneStatuses == null) { throw new InvalidOperationException("Raw ZoneStatuses was null"); }
                    await InitializeMockSetFromListAsync(ZoneStatuses, RawZoneStatuses).ConfigureAwait(false);
                    context.Setup(m => m.ZoneStatuses).Returns(() => ZoneStatuses?.Object!);
                    context.Setup(m => m.Set<ZoneStatus>()).Returns(() => ZoneStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoAdvertising || (DoZoneTypeTable && (!dirtyOnly || ZoneTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawZoneTypes == null) { throw new InvalidOperationException("Raw ZoneTypes was null"); }
                    await InitializeMockSetFromListAsync(ZoneTypes, RawZoneTypes).ConfigureAwait(false);
                    context.Setup(m => m.ZoneTypes).Returns(() => ZoneTypes?.Object!);
                    context.Setup(m => m.Set<ZoneType>()).Returns(() => ZoneTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAdsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Ad>> data)
        {
            if (!DoAll && !DoAdvertising && !DoAdTable) { return; }
            Ads ??= new Mock<DbSet<Ad>>();
            await InitializeMockSetFromListAsync(Ads, data).ConfigureAwait(false);
            context.Setup(m => m.Ads).Returns(() => Ads.Object);
            context.Setup(m => m.Set<Ad>()).Returns(() => Ads.Object);
            TableRecordCounts[typeof(Ad)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Ad)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Ad)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Ad)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAdAccountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AdAccount>> data)
        {
            if (!DoAll && !DoAdvertising && !DoAdAccountTable) { return; }
            AdAccounts ??= new Mock<DbSet<AdAccount>>();
            await InitializeMockSetFromListAsync(AdAccounts, data).ConfigureAwait(false);
            context.Setup(m => m.AdAccounts).Returns(() => AdAccounts.Object);
            context.Setup(m => m.Set<AdAccount>()).Returns(() => AdAccounts.Object);
            TableRecordCounts[typeof(AdAccount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AdAccount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AdAccount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAdBrandsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AdBrand>> data)
        {
            if (!DoAll && !DoAdvertising && !DoAdBrandTable) { return; }
            AdBrands ??= new Mock<DbSet<AdBrand>>();
            await InitializeMockSetFromListAsync(AdBrands, data).ConfigureAwait(false);
            context.Setup(m => m.AdBrands).Returns(() => AdBrands.Object);
            context.Setup(m => m.Set<AdBrand>()).Returns(() => AdBrands.Object);
            TableRecordCounts[typeof(AdBrand)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AdBrand)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AdBrand)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAdFranchisesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AdFranchise>> data)
        {
            if (!DoAll && !DoAdvertising && !DoAdFranchiseTable) { return; }
            AdFranchises ??= new Mock<DbSet<AdFranchise>>();
            await InitializeMockSetFromListAsync(AdFranchises, data).ConfigureAwait(false);
            context.Setup(m => m.AdFranchises).Returns(() => AdFranchises.Object);
            context.Setup(m => m.Set<AdFranchise>()).Returns(() => AdFranchises.Object);
            TableRecordCounts[typeof(AdFranchise)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AdFranchise)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AdFranchise)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAdImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AdImage>> data)
        {
            if (!DoAll && !DoAdvertising && !DoAdImageTable) { return; }
            AdImages ??= new Mock<DbSet<AdImage>>();
            await InitializeMockSetFromListAsync(AdImages, data).ConfigureAwait(false);
            context.Setup(m => m.AdImages).Returns(() => AdImages.Object);
            context.Setup(m => m.Set<AdImage>()).Returns(() => AdImages.Object);
            TableRecordCounts[typeof(AdImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AdImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AdImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AdImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAdImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AdImageType>> data)
        {
            if (!DoAll && !DoAdvertising && !DoAdImageTypeTable) { return; }
            AdImageTypes ??= new Mock<DbSet<AdImageType>>();
            await InitializeMockSetFromListAsync(AdImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.AdImageTypes).Returns(() => AdImageTypes.Object);
            context.Setup(m => m.Set<AdImageType>()).Returns(() => AdImageTypes.Object);
            TableRecordCounts[typeof(AdImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AdImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AdImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AdImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AdImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAdStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AdStatus>> data)
        {
            if (!DoAll && !DoAdvertising && !DoAdStatusTable) { return; }
            AdStatuses ??= new Mock<DbSet<AdStatus>>();
            await InitializeMockSetFromListAsync(AdStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.AdStatuses).Returns(() => AdStatuses.Object);
            context.Setup(m => m.Set<AdStatus>()).Returns(() => AdStatuses.Object);
            TableRecordCounts[typeof(AdStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AdStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AdStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AdStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AdStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAdStoresAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AdStore>> data)
        {
            if (!DoAll && !DoAdvertising && !DoAdStoreTable) { return; }
            AdStores ??= new Mock<DbSet<AdStore>>();
            await InitializeMockSetFromListAsync(AdStores, data).ConfigureAwait(false);
            context.Setup(m => m.AdStores).Returns(() => AdStores.Object);
            context.Setup(m => m.Set<AdStore>()).Returns(() => AdStores.Object);
            TableRecordCounts[typeof(AdStore)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AdStore)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AdStore)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAdTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AdType>> data)
        {
            if (!DoAll && !DoAdvertising && !DoAdTypeTable) { return; }
            AdTypes ??= new Mock<DbSet<AdType>>();
            await InitializeMockSetFromListAsync(AdTypes, data).ConfigureAwait(false);
            context.Setup(m => m.AdTypes).Returns(() => AdTypes.Object);
            context.Setup(m => m.Set<AdType>()).Returns(() => AdTypes.Object);
            TableRecordCounts[typeof(AdType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AdType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AdType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AdType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AdType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAdZonesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AdZone>> data)
        {
            if (!DoAll && !DoAdvertising && !DoAdZoneTable) { return; }
            AdZones ??= new Mock<DbSet<AdZone>>();
            await InitializeMockSetFromListAsync(AdZones, data).ConfigureAwait(false);
            context.Setup(m => m.AdZones).Returns(() => AdZones.Object);
            context.Setup(m => m.Set<AdZone>()).Returns(() => AdZones.Object);
            TableRecordCounts[typeof(AdZone)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AdZone)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AdZone)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAdZoneAccessesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AdZoneAccess>> data)
        {
            if (!DoAll && !DoAdvertising && !DoAdZoneAccessTable) { return; }
            AdZoneAccesses ??= new Mock<DbSet<AdZoneAccess>>();
            await InitializeMockSetFromListAsync(AdZoneAccesses, data).ConfigureAwait(false);
            context.Setup(m => m.AdZoneAccesses).Returns(() => AdZoneAccesses.Object);
            context.Setup(m => m.Set<AdZoneAccess>()).Returns(() => AdZoneAccesses.Object);
            TableRecordCounts[typeof(AdZoneAccess)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AdZoneAccess)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AdZoneAccess)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AdZoneAccess)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetZonesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Zone>> data)
        {
            if (!DoAll && !DoAdvertising && !DoZoneTable) { return; }
            Zones ??= new Mock<DbSet<Zone>>();
            await InitializeMockSetFromListAsync(Zones, data).ConfigureAwait(false);
            context.Setup(m => m.Zones).Returns(() => Zones.Object);
            context.Setup(m => m.Set<Zone>()).Returns(() => Zones.Object);
            TableRecordCounts[typeof(Zone)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Zone)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Zone)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Zone)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetZoneStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ZoneStatus>> data)
        {
            if (!DoAll && !DoAdvertising && !DoZoneStatusTable) { return; }
            ZoneStatuses ??= new Mock<DbSet<ZoneStatus>>();
            await InitializeMockSetFromListAsync(ZoneStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.ZoneStatuses).Returns(() => ZoneStatuses.Object);
            context.Setup(m => m.Set<ZoneStatus>()).Returns(() => ZoneStatuses.Object);
            TableRecordCounts[typeof(ZoneStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ZoneStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ZoneStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ZoneStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ZoneStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetZoneTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ZoneType>> data)
        {
            if (!DoAll && !DoAdvertising && !DoZoneTypeTable) { return; }
            ZoneTypes ??= new Mock<DbSet<ZoneType>>();
            await InitializeMockSetFromListAsync(ZoneTypes, data).ConfigureAwait(false);
            context.Setup(m => m.ZoneTypes).Returns(() => ZoneTypes.Object);
            context.Setup(m => m.Set<ZoneType>()).Returns(() => ZoneTypes.Object);
            TableRecordCounts[typeof(ZoneType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ZoneType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ZoneType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(ZoneType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(ZoneType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy Ad.</summary>
        /// <returns>The new Ad.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Ad>> CreateADummyAdAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, int statusID = 1, string? jsonAttributes = null, string caption = null!, int? clickCounterID = null!, DateTime endDate = default, DateTime expirationDate = default, int? impressionCounterID = null!, DateTime startDate = default, string targetURL = null!, decimal weight = 0m, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Ad>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // Ad Properties
                mock.Object.Caption = caption;
                mock.Object.ClickCounterID = clickCounterID;
                mock.Object.EndDate = endDate;
                mock.Object.ExpirationDate = expirationDate;
                mock.Object.ImpressionCounterID = impressionCounterID;
                mock.Object.StartDate = startDate;
                mock.Object.TargetURL = targetURL;
                mock.Object.Weight = weight;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawAdTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawAdStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawAdImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdImage>());
                // Ad's Related Objects
                mock.Setup(m => m.ClickCounter).Returns(() => RawCounters?.FirstOrDefault(x => x.Object.ID == mock.Object.ClickCounterID)?.Object);
                mock.Setup(m => m.ImpressionCounter).Returns(() => RawCounters?.FirstOrDefault(x => x.Object.ID == mock.Object.ImpressionCounterID)?.Object);
                // Ad's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => RawAdAccounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdAccount>());
                mock.Setup(m => m.AdZones).Returns(() => RawAdZones?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdZone>());
                mock.Setup(m => m.Brands).Returns(() => RawAdBrands?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdBrand>());
                mock.Setup(m => m.CampaignAds).Returns(() => RawCampaignAds?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CampaignAd>());
                mock.Setup(m => m.Franchises).Returns(() => RawAdFranchises?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdFranchise>());
                mock.Setup(m => m.Stores).Returns(() => RawAdStores?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdStore>());
                return mock;
            });
        }

        /// <summary>Creates a dummy AdAccount.</summary>
        /// <returns>The new AdAccount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AdAccount>> CreateADummyAdAccountAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AdAccount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AdAccount Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // AdAccount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawAds?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AdAccount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AdBrand.</summary>
        /// <returns>The new AdBrand.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AdBrand>> CreateADummyAdBrandAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AdBrand>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AdBrand Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // AdBrand's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawAds?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AdBrand's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AdFranchise.</summary>
        /// <returns>The new AdFranchise.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AdFranchise>> CreateADummyAdFranchiseAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AdFranchise>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AdFranchise Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // AdFranchise's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawAds?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AdFranchise's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AdImage.</summary>
        /// <returns>The new AdImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AdImage>> CreateADummyAdImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AdImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // AdImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawAds?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawAdImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // AdImage's Related Objects
                // AdImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AdImageType.</summary>
        /// <returns>The new AdImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AdImageType>> CreateADummyAdImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AdImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AdImageType Properties
                // Dynamic Linking
                // AdImageType's Related Objects
                // AdImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AdStatus.</summary>
        /// <returns>The new AdStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AdStatus>> CreateADummyAdStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AdStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AdStatus Properties
                // Dynamic Linking
                // AdStatus's Related Objects
                // AdStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AdStore.</summary>
        /// <returns>The new AdStore.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AdStore>> CreateADummyAdStoreAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AdStore>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AdStore Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // AdStore's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawAds?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AdStore's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AdType.</summary>
        /// <returns>The new AdType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AdType>> CreateADummyAdTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AdType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AdType Properties
                // Dynamic Linking
                // AdType's Related Objects
                // AdType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AdZone.</summary>
        /// <returns>The new AdZone.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AdZone>> CreateADummyAdZoneAsync(int id, string? key, string? jsonAttributes = null, int? adZoneAccessID = null!, int? clickCounterID = null!, int? impressionCounterID = null!, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AdZone>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // AdZone Properties
                mock.Object.AdZoneAccessID = adZoneAccessID;
                mock.Object.ClickCounterID = clickCounterID;
                mock.Object.ImpressionCounterID = impressionCounterID;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // AdZone's Related Objects
                mock.Setup(m => m.AdZoneAccess).Returns(() => RawAdZoneAccesses?.FirstOrDefault(x => x.Object.ID == mock.Object.AdZoneAccessID)?.Object);
                mock.Setup(m => m.ClickCounter).Returns(() => RawCounters?.FirstOrDefault(x => x.Object.ID == mock.Object.ClickCounterID)?.Object);
                mock.Setup(m => m.ImpressionCounter).Returns(() => RawCounters?.FirstOrDefault(x => x.Object.ID == mock.Object.ImpressionCounterID)?.Object);
                mock.Setup(m => m.Master).Returns(() => RawAds?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawZones?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AdZone's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AdZoneAccess.</summary>
        /// <returns>The new AdZoneAccess.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AdZoneAccess>> CreateADummyAdZoneAccessAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int? clickCounterID = null!, int clickLimit = 1, DateTime endDate = default, int? impressionCounterID = null!, int impressionLimit = 1, DateTime startDate = default, int? subscriptionID = null!, int uniqueAdLimit = 1, int? zoneID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AdZoneAccess>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // AdZoneAccess Properties
                mock.Object.ClickCounterID = clickCounterID;
                mock.Object.ClickLimit = clickLimit;
                mock.Object.EndDate = endDate;
                mock.Object.ImpressionCounterID = impressionCounterID;
                mock.Object.ImpressionLimit = impressionLimit;
                mock.Object.StartDate = startDate;
                mock.Object.SubscriptionID = subscriptionID;
                mock.Object.UniqueAdLimit = uniqueAdLimit;
                mock.Object.ZoneID = zoneID;
                // Dynamic Linking
                // AdZoneAccess's Related Objects
                mock.Setup(m => m.ClickCounter).Returns(() => RawCounters?.FirstOrDefault(x => x.Object.ID == mock.Object.ClickCounterID)?.Object);
                mock.Setup(m => m.ImpressionCounter).Returns(() => RawCounters?.FirstOrDefault(x => x.Object.ID == mock.Object.ImpressionCounterID)?.Object);
                mock.Setup(m => m.Subscription).Returns(() => RawSubscriptions?.FirstOrDefault(x => x.Object.ID == mock.Object.SubscriptionID)?.Object);
                mock.Setup(m => m.Zone).Returns(() => RawZones?.FirstOrDefault(x => x.Object.ID == mock.Object.ZoneID)?.Object);
                // AdZoneAccess's Associated Objects
                mock.Setup(m => m.AdZones).Returns(() => RawAdZones?.Where(x => x.Object.AdZoneAccessID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdZone>());
                return mock;
            });
        }

        /// <summary>Creates a dummy Zone.</summary>
        /// <returns>The new Zone.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Zone>> CreateADummyZoneAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, int statusID = 1, string? jsonAttributes = null, int height = 1, int width = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Zone>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // Zone Properties
                mock.Object.Height = height;
                mock.Object.Width = width;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawZoneTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawZoneStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // Zone's Related Objects
                // Zone's Associated Objects
                mock.Setup(m => m.AdZones).Returns(() => RawAdZones?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdZone>());
                return mock;
            });
        }

        /// <summary>Creates a dummy ZoneStatus.</summary>
        /// <returns>The new ZoneStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ZoneStatus>> CreateADummyZoneStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ZoneStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ZoneStatus Properties
                // Dynamic Linking
                // ZoneStatus's Related Objects
                // ZoneStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ZoneType.</summary>
        /// <returns>The new ZoneType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ZoneType>> CreateADummyZoneTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ZoneType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // ZoneType Properties
                // Dynamic Linking
                // ZoneType's Related Objects
                // ZoneType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForAdvertising(MockingSetup mockingSetup)
        {
            Func<Ad> mockFuncAd = () =>
            {
                var mock = new Mock<Ad>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Ad Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawAdTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawAdStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawAdImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdImage>());
                mock.Setup(m => m.ClickCounter).Returns(() => mockingSetup.RawCounters?.FirstOrDefault(x => x.Object.ID == mock.Object.ClickCounterID)?.Object);
                mock.Setup(m => m.ImpressionCounter).Returns(() => mockingSetup.RawCounters?.FirstOrDefault(x => x.Object.ID == mock.Object.ImpressionCounterID)?.Object);
                // Ad's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => mockingSetup.RawAdAccounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdAccount>());
                mock.Setup(m => m.AdZones).Returns(() => mockingSetup.RawAdZones?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdZone>());
                mock.Setup(m => m.Brands).Returns(() => mockingSetup.RawAdBrands?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdBrand>());
                mock.Setup(m => m.CampaignAds).Returns(() => mockingSetup.RawCampaignAds?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CampaignAd>());
                mock.Setup(m => m.Franchises).Returns(() => mockingSetup.RawAdFranchises?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdFranchise>());
                mock.Setup(m => m.Stores).Returns(() => mockingSetup.RawAdStores?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdStore>());
                // Ad's Related Objects
                return mock.Object;
            };
            For<IAd>().Use(() => mockFuncAd());
            For<Ad>().Use(() => mockFuncAd());
            Func<AdAccount> mockFuncAdAccount = () =>
            {
                var mock = new Mock<AdAccount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AdAccount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAds?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AdAccount's Associated Objects
                // AdAccount's Related Objects
                return mock.Object;
            };
            For<IAdAccount>().Use(() => mockFuncAdAccount());
            For<AdAccount>().Use(() => mockFuncAdAccount());
            Func<AdBrand> mockFuncAdBrand = () =>
            {
                var mock = new Mock<AdBrand>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AdBrand Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAds?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AdBrand's Associated Objects
                // AdBrand's Related Objects
                return mock.Object;
            };
            For<IAdBrand>().Use(() => mockFuncAdBrand());
            For<AdBrand>().Use(() => mockFuncAdBrand());
            Func<AdFranchise> mockFuncAdFranchise = () =>
            {
                var mock = new Mock<AdFranchise>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AdFranchise Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAds?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AdFranchise's Associated Objects
                // AdFranchise's Related Objects
                return mock.Object;
            };
            For<IAdFranchise>().Use(() => mockFuncAdFranchise());
            For<AdFranchise>().Use(() => mockFuncAdFranchise());
            Func<AdImage> mockFuncAdImage = () =>
            {
                var mock = new Mock<AdImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AdImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAds?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawAdImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // AdImage's Associated Objects
                // AdImage's Related Objects
                return mock.Object;
            };
            For<IAdImage>().Use(() => mockFuncAdImage());
            For<AdImage>().Use(() => mockFuncAdImage());
            Func<AdImageType> mockFuncAdImageType = () =>
            {
                var mock = new Mock<AdImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AdImageType Properties
                // Dynamic Linking
                // AdImageType's Associated Objects
                // AdImageType's Related Objects
                return mock.Object;
            };
            For<IAdImageType>().Use(() => mockFuncAdImageType());
            For<AdImageType>().Use(() => mockFuncAdImageType());
            Func<AdStatus> mockFuncAdStatus = () =>
            {
                var mock = new Mock<AdStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AdStatus Properties
                // Dynamic Linking
                // AdStatus's Associated Objects
                // AdStatus's Related Objects
                return mock.Object;
            };
            For<IAdStatus>().Use(() => mockFuncAdStatus());
            For<AdStatus>().Use(() => mockFuncAdStatus());
            Func<AdStore> mockFuncAdStore = () =>
            {
                var mock = new Mock<AdStore>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AdStore Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAds?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AdStore's Associated Objects
                // AdStore's Related Objects
                return mock.Object;
            };
            For<IAdStore>().Use(() => mockFuncAdStore());
            For<AdStore>().Use(() => mockFuncAdStore());
            Func<AdType> mockFuncAdType = () =>
            {
                var mock = new Mock<AdType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AdType Properties
                // Dynamic Linking
                // AdType's Associated Objects
                // AdType's Related Objects
                return mock.Object;
            };
            For<IAdType>().Use(() => mockFuncAdType());
            For<AdType>().Use(() => mockFuncAdType());
            Func<AdZone> mockFuncAdZone = () =>
            {
                var mock = new Mock<AdZone>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AdZone Properties
                // Dynamic Linking
                mock.Setup(m => m.AdZoneAccess).Returns(() => mockingSetup.RawAdZoneAccesses?.FirstOrDefault(x => x.Object.ID == mock.Object.AdZoneAccessID)?.Object);
                mock.Setup(m => m.ClickCounter).Returns(() => mockingSetup.RawCounters?.FirstOrDefault(x => x.Object.ID == mock.Object.ClickCounterID)?.Object);
                mock.Setup(m => m.ImpressionCounter).Returns(() => mockingSetup.RawCounters?.FirstOrDefault(x => x.Object.ID == mock.Object.ImpressionCounterID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawAds?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawZones?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // AdZone's Associated Objects
                // AdZone's Related Objects
                return mock.Object;
            };
            For<IAdZone>().Use(() => mockFuncAdZone());
            For<AdZone>().Use(() => mockFuncAdZone());
            Func<AdZoneAccess> mockFuncAdZoneAccess = () =>
            {
                var mock = new Mock<AdZoneAccess>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AdZoneAccess Properties
                // Dynamic Linking
                mock.Setup(m => m.ClickCounter).Returns(() => mockingSetup.RawCounters?.FirstOrDefault(x => x.Object.ID == mock.Object.ClickCounterID)?.Object);
                mock.Setup(m => m.ImpressionCounter).Returns(() => mockingSetup.RawCounters?.FirstOrDefault(x => x.Object.ID == mock.Object.ImpressionCounterID)?.Object);
                mock.Setup(m => m.Subscription).Returns(() => mockingSetup.RawSubscriptions?.FirstOrDefault(x => x.Object.ID == mock.Object.SubscriptionID)?.Object);
                mock.Setup(m => m.Zone).Returns(() => mockingSetup.RawZones?.FirstOrDefault(x => x.Object.ID == mock.Object.ZoneID)?.Object);
                // AdZoneAccess's Associated Objects
                mock.Setup(m => m.AdZones).Returns(() => mockingSetup.RawAdZones?.Where(x => x.Object.AdZoneAccessID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdZone>());
                // AdZoneAccess's Related Objects
                return mock.Object;
            };
            For<IAdZoneAccess>().Use(() => mockFuncAdZoneAccess());
            For<AdZoneAccess>().Use(() => mockFuncAdZoneAccess());
            Func<Zone> mockFuncZone = () =>
            {
                var mock = new Mock<Zone>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Zone Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawZoneTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawZoneStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // Zone's Associated Objects
                mock.Setup(m => m.AdZones).Returns(() => mockingSetup.RawAdZones?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AdZone>());
                // Zone's Related Objects
                return mock.Object;
            };
            For<IZone>().Use(() => mockFuncZone());
            For<Zone>().Use(() => mockFuncZone());
            Func<ZoneStatus> mockFuncZoneStatus = () =>
            {
                var mock = new Mock<ZoneStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ZoneStatus Properties
                // Dynamic Linking
                // ZoneStatus's Associated Objects
                // ZoneStatus's Related Objects
                return mock.Object;
            };
            For<IZoneStatus>().Use(() => mockFuncZoneStatus());
            For<ZoneStatus>().Use(() => mockFuncZoneStatus());
            Func<ZoneType> mockFuncZoneType = () =>
            {
                var mock = new Mock<ZoneType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ZoneType Properties
                // Dynamic Linking
                // ZoneType's Associated Objects
                // ZoneType's Related Objects
                return mock.Object;
            };
            For<IZoneType>().Use(() => mockFuncZoneType());
            For<ZoneType>().Use(() => mockFuncZoneType());
        }
    }
}
