// <autogenerated>
// <copyright file="CalendarEvents.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the CalendarEvents section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoCalendarEvents { private get; set; }

        // Enable the tables specifically on run
        public bool DoCalendarEventTable { private get; set; }
        public bool DoCalendarEventDetailTable { private get; set; }
        public bool DoCalendarEventFileTable { private get; set; }
        public bool DoCalendarEventImageTable { private get; set; }
        public bool DoCalendarEventImageTypeTable { private get; set; }
        public bool DoCalendarEventProductTable { private get; set; }
        public bool DoCalendarEventStatusTable { private get; set; }
        public bool DoCalendarEventTypeTable { private get; set; }
        public bool DoUserEventAttendanceTable { private get; set; }
        public bool DoUserEventAttendanceTypeTable { private get; set; }

        // Dirty Checking
        public bool CalendarEventDirty { private get; set; }
        public bool CalendarEventDetailDirty { private get; set; }
        public bool CalendarEventFileDirty { private get; set; }
        public bool CalendarEventImageDirty { private get; set; }
        public bool CalendarEventImageTypeDirty { private get; set; }
        public bool CalendarEventProductDirty { private get; set; }
        public bool CalendarEventStatusDirty { private get; set; }
        public bool CalendarEventTypeDirty { private get; set; }
        public bool UserEventAttendanceDirty { private get; set; }
        public bool UserEventAttendanceTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<CalendarEvent>>? CalendarEvents { get; private set; }
        public Mock<DbSet<CalendarEventDetail>>? CalendarEventDetails { get; private set; }
        public Mock<DbSet<CalendarEventFile>>? CalendarEventFiles { get; private set; }
        public Mock<DbSet<CalendarEventImage>>? CalendarEventImages { get; private set; }
        public Mock<DbSet<CalendarEventImageType>>? CalendarEventImageTypes { get; private set; }
        public Mock<DbSet<CalendarEventProduct>>? CalendarEventProducts { get; private set; }
        public Mock<DbSet<CalendarEventStatus>>? CalendarEventStatuses { get; private set; }
        public Mock<DbSet<CalendarEventType>>? CalendarEventTypes { get; private set; }
        public Mock<DbSet<UserEventAttendance>>? UserEventAttendances { get; private set; }
        public Mock<DbSet<UserEventAttendanceType>>? UserEventAttendanceTypes { get; private set; }

        // Raw Data
        public List<Mock<CalendarEvent>>? RawCalendarEvents { get; private set; }
        public List<Mock<CalendarEventDetail>>? RawCalendarEventDetails { get; private set; }
        public List<Mock<CalendarEventFile>>? RawCalendarEventFiles { get; private set; }
        public List<Mock<CalendarEventImage>>? RawCalendarEventImages { get; private set; }
        public List<Mock<CalendarEventImageType>>? RawCalendarEventImageTypes { get; private set; }
        public List<Mock<CalendarEventProduct>>? RawCalendarEventProducts { get; private set; }
        public List<Mock<CalendarEventStatus>>? RawCalendarEventStatuses { get; private set; }
        public List<Mock<CalendarEventType>>? RawCalendarEventTypes { get; private set; }
        public List<Mock<UserEventAttendance>>? RawUserEventAttendances { get; private set; }
        public List<Mock<UserEventAttendanceType>>? RawUserEventAttendanceTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksCalendarEventsAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoCalendarEvents || (DoCalendarEventTable && (!dirtyOnly || CalendarEventDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCalendarEvents == null) { throw new InvalidOperationException("Raw CalendarEvents was null"); }
                    await InitializeMockSetFromListAsync(CalendarEvents, RawCalendarEvents).ConfigureAwait(false);
                    context.Setup(m => m.CalendarEvents).Returns(() => CalendarEvents?.Object!);
                    context.Setup(m => m.Set<CalendarEvent>()).Returns(() => CalendarEvents?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCalendarEvents || (DoCalendarEventDetailTable && (!dirtyOnly || CalendarEventDetailDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCalendarEventDetails == null) { throw new InvalidOperationException("Raw CalendarEventDetails was null"); }
                    await InitializeMockSetFromListAsync(CalendarEventDetails, RawCalendarEventDetails).ConfigureAwait(false);
                    context.Setup(m => m.CalendarEventDetails).Returns(() => CalendarEventDetails?.Object!);
                    context.Setup(m => m.Set<CalendarEventDetail>()).Returns(() => CalendarEventDetails?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCalendarEvents || (DoCalendarEventFileTable && (!dirtyOnly || CalendarEventFileDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCalendarEventFiles == null) { throw new InvalidOperationException("Raw CalendarEventFiles was null"); }
                    await InitializeMockSetFromListAsync(CalendarEventFiles, RawCalendarEventFiles).ConfigureAwait(false);
                    context.Setup(m => m.CalendarEventFiles).Returns(() => CalendarEventFiles?.Object!);
                    context.Setup(m => m.Set<CalendarEventFile>()).Returns(() => CalendarEventFiles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCalendarEvents || (DoCalendarEventImageTable && (!dirtyOnly || CalendarEventImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCalendarEventImages == null) { throw new InvalidOperationException("Raw CalendarEventImages was null"); }
                    await InitializeMockSetFromListAsync(CalendarEventImages, RawCalendarEventImages).ConfigureAwait(false);
                    context.Setup(m => m.CalendarEventImages).Returns(() => CalendarEventImages?.Object!);
                    context.Setup(m => m.Set<CalendarEventImage>()).Returns(() => CalendarEventImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCalendarEvents || (DoCalendarEventImageTypeTable && (!dirtyOnly || CalendarEventImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCalendarEventImageTypes == null) { throw new InvalidOperationException("Raw CalendarEventImageTypes was null"); }
                    await InitializeMockSetFromListAsync(CalendarEventImageTypes, RawCalendarEventImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.CalendarEventImageTypes).Returns(() => CalendarEventImageTypes?.Object!);
                    context.Setup(m => m.Set<CalendarEventImageType>()).Returns(() => CalendarEventImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCalendarEvents || (DoCalendarEventProductTable && (!dirtyOnly || CalendarEventProductDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCalendarEventProducts == null) { throw new InvalidOperationException("Raw CalendarEventProducts was null"); }
                    await InitializeMockSetFromListAsync(CalendarEventProducts, RawCalendarEventProducts).ConfigureAwait(false);
                    context.Setup(m => m.CalendarEventProducts).Returns(() => CalendarEventProducts?.Object!);
                    context.Setup(m => m.Set<CalendarEventProduct>()).Returns(() => CalendarEventProducts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCalendarEvents || (DoCalendarEventStatusTable && (!dirtyOnly || CalendarEventStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCalendarEventStatuses == null) { throw new InvalidOperationException("Raw CalendarEventStatuses was null"); }
                    await InitializeMockSetFromListAsync(CalendarEventStatuses, RawCalendarEventStatuses).ConfigureAwait(false);
                    context.Setup(m => m.CalendarEventStatuses).Returns(() => CalendarEventStatuses?.Object!);
                    context.Setup(m => m.Set<CalendarEventStatus>()).Returns(() => CalendarEventStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCalendarEvents || (DoCalendarEventTypeTable && (!dirtyOnly || CalendarEventTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCalendarEventTypes == null) { throw new InvalidOperationException("Raw CalendarEventTypes was null"); }
                    await InitializeMockSetFromListAsync(CalendarEventTypes, RawCalendarEventTypes).ConfigureAwait(false);
                    context.Setup(m => m.CalendarEventTypes).Returns(() => CalendarEventTypes?.Object!);
                    context.Setup(m => m.Set<CalendarEventType>()).Returns(() => CalendarEventTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCalendarEvents || (DoUserEventAttendanceTable && (!dirtyOnly || UserEventAttendanceDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUserEventAttendances == null) { throw new InvalidOperationException("Raw UserEventAttendances was null"); }
                    await InitializeMockSetFromListAsync(UserEventAttendances, RawUserEventAttendances).ConfigureAwait(false);
                    context.Setup(m => m.UserEventAttendances).Returns(() => UserEventAttendances?.Object!);
                    context.Setup(m => m.Set<UserEventAttendance>()).Returns(() => UserEventAttendances?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCalendarEvents || (DoUserEventAttendanceTypeTable && (!dirtyOnly || UserEventAttendanceTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawUserEventAttendanceTypes == null) { throw new InvalidOperationException("Raw UserEventAttendanceTypes was null"); }
                    await InitializeMockSetFromListAsync(UserEventAttendanceTypes, RawUserEventAttendanceTypes).ConfigureAwait(false);
                    context.Setup(m => m.UserEventAttendanceTypes).Returns(() => UserEventAttendanceTypes?.Object!);
                    context.Setup(m => m.Set<UserEventAttendanceType>()).Returns(() => UserEventAttendanceTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCalendarEventsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CalendarEvent>> data)
        {
            if (!DoAll && !DoCalendarEvents && !DoCalendarEventTable) { return; }
            CalendarEvents ??= new Mock<DbSet<CalendarEvent>>();
            await InitializeMockSetFromListAsync(CalendarEvents, data).ConfigureAwait(false);
            context.Setup(m => m.CalendarEvents).Returns(() => CalendarEvents.Object);
            context.Setup(m => m.Set<CalendarEvent>()).Returns(() => CalendarEvents.Object);
            TableRecordCounts[typeof(CalendarEvent)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CalendarEvent)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CalendarEvent)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CalendarEvent)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCalendarEventDetailsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CalendarEventDetail>> data)
        {
            if (!DoAll && !DoCalendarEvents && !DoCalendarEventDetailTable) { return; }
            CalendarEventDetails ??= new Mock<DbSet<CalendarEventDetail>>();
            await InitializeMockSetFromListAsync(CalendarEventDetails, data).ConfigureAwait(false);
            context.Setup(m => m.CalendarEventDetails).Returns(() => CalendarEventDetails.Object);
            context.Setup(m => m.Set<CalendarEventDetail>()).Returns(() => CalendarEventDetails.Object);
            TableRecordCounts[typeof(CalendarEventDetail)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CalendarEventDetail)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CalendarEventDetail)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CalendarEventDetail)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCalendarEventFilesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CalendarEventFile>> data)
        {
            if (!DoAll && !DoCalendarEvents && !DoCalendarEventFileTable) { return; }
            CalendarEventFiles ??= new Mock<DbSet<CalendarEventFile>>();
            await InitializeMockSetFromListAsync(CalendarEventFiles, data).ConfigureAwait(false);
            context.Setup(m => m.CalendarEventFiles).Returns(() => CalendarEventFiles.Object);
            context.Setup(m => m.Set<CalendarEventFile>()).Returns(() => CalendarEventFiles.Object);
            TableRecordCounts[typeof(CalendarEventFile)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CalendarEventFile)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CalendarEventFile)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CalendarEventFile)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCalendarEventImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CalendarEventImage>> data)
        {
            if (!DoAll && !DoCalendarEvents && !DoCalendarEventImageTable) { return; }
            CalendarEventImages ??= new Mock<DbSet<CalendarEventImage>>();
            await InitializeMockSetFromListAsync(CalendarEventImages, data).ConfigureAwait(false);
            context.Setup(m => m.CalendarEventImages).Returns(() => CalendarEventImages.Object);
            context.Setup(m => m.Set<CalendarEventImage>()).Returns(() => CalendarEventImages.Object);
            TableRecordCounts[typeof(CalendarEventImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CalendarEventImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CalendarEventImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CalendarEventImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCalendarEventImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CalendarEventImageType>> data)
        {
            if (!DoAll && !DoCalendarEvents && !DoCalendarEventImageTypeTable) { return; }
            CalendarEventImageTypes ??= new Mock<DbSet<CalendarEventImageType>>();
            await InitializeMockSetFromListAsync(CalendarEventImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.CalendarEventImageTypes).Returns(() => CalendarEventImageTypes.Object);
            context.Setup(m => m.Set<CalendarEventImageType>()).Returns(() => CalendarEventImageTypes.Object);
            TableRecordCounts[typeof(CalendarEventImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CalendarEventImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CalendarEventImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CalendarEventImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(CalendarEventImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCalendarEventProductsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CalendarEventProduct>> data)
        {
            if (!DoAll && !DoCalendarEvents && !DoCalendarEventProductTable) { return; }
            CalendarEventProducts ??= new Mock<DbSet<CalendarEventProduct>>();
            await InitializeMockSetFromListAsync(CalendarEventProducts, data).ConfigureAwait(false);
            context.Setup(m => m.CalendarEventProducts).Returns(() => CalendarEventProducts.Object);
            context.Setup(m => m.Set<CalendarEventProduct>()).Returns(() => CalendarEventProducts.Object);
            TableRecordCounts[typeof(CalendarEventProduct)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CalendarEventProduct)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CalendarEventProduct)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCalendarEventStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CalendarEventStatus>> data)
        {
            if (!DoAll && !DoCalendarEvents && !DoCalendarEventStatusTable) { return; }
            CalendarEventStatuses ??= new Mock<DbSet<CalendarEventStatus>>();
            await InitializeMockSetFromListAsync(CalendarEventStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.CalendarEventStatuses).Returns(() => CalendarEventStatuses.Object);
            context.Setup(m => m.Set<CalendarEventStatus>()).Returns(() => CalendarEventStatuses.Object);
            TableRecordCounts[typeof(CalendarEventStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CalendarEventStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CalendarEventStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CalendarEventStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(CalendarEventStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCalendarEventTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CalendarEventType>> data)
        {
            if (!DoAll && !DoCalendarEvents && !DoCalendarEventTypeTable) { return; }
            CalendarEventTypes ??= new Mock<DbSet<CalendarEventType>>();
            await InitializeMockSetFromListAsync(CalendarEventTypes, data).ConfigureAwait(false);
            context.Setup(m => m.CalendarEventTypes).Returns(() => CalendarEventTypes.Object);
            context.Setup(m => m.Set<CalendarEventType>()).Returns(() => CalendarEventTypes.Object);
            TableRecordCounts[typeof(CalendarEventType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CalendarEventType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CalendarEventType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CalendarEventType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(CalendarEventType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUserEventAttendancesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<UserEventAttendance>> data)
        {
            if (!DoAll && !DoCalendarEvents && !DoUserEventAttendanceTable) { return; }
            UserEventAttendances ??= new Mock<DbSet<UserEventAttendance>>();
            await InitializeMockSetFromListAsync(UserEventAttendances, data).ConfigureAwait(false);
            context.Setup(m => m.UserEventAttendances).Returns(() => UserEventAttendances.Object);
            context.Setup(m => m.Set<UserEventAttendance>()).Returns(() => UserEventAttendances.Object);
            TableRecordCounts[typeof(UserEventAttendance)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(UserEventAttendance)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(UserEventAttendance)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetUserEventAttendanceTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<UserEventAttendanceType>> data)
        {
            if (!DoAll && !DoCalendarEvents && !DoUserEventAttendanceTypeTable) { return; }
            UserEventAttendanceTypes ??= new Mock<DbSet<UserEventAttendanceType>>();
            await InitializeMockSetFromListAsync(UserEventAttendanceTypes, data).ConfigureAwait(false);
            context.Setup(m => m.UserEventAttendanceTypes).Returns(() => UserEventAttendanceTypes.Object);
            context.Setup(m => m.Set<UserEventAttendanceType>()).Returns(() => UserEventAttendanceTypes.Object);
            TableRecordCounts[typeof(UserEventAttendanceType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(UserEventAttendanceType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(UserEventAttendanceType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(UserEventAttendanceType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(UserEventAttendanceType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy CalendarEvent.</summary>
        /// <returns>The new CalendarEvent.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CalendarEvent>> CreateADummyCalendarEventAsync(int id, string? key, string? name, string? desc = null, int contactID = 1, int typeID = 1, int statusID = 1, string? jsonAttributes = null, DateTime endDate = default, int eventDuration = 1, string eventDurationUnitOfMeasure = null!, int? groupID = null!, int maxAttendees = 1, string recurrenceString = null!, string shortDescription = null!, DateTime startDate = default, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CalendarEvent>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // IHaveAContactBase Properties
                mock.Object.ContactID = contactID;
                // CalendarEvent Properties
                mock.Object.EndDate = endDate;
                mock.Object.EventDuration = eventDuration;
                mock.Object.EventDurationUnitOfMeasure = eventDurationUnitOfMeasure;
                mock.Object.GroupID = groupID;
                mock.Object.MaxAttendees = maxAttendees;
                mock.Object.RecurrenceString = recurrenceString;
                mock.Object.ShortDescription = shortDescription;
                mock.Object.StartDate = startDate;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawCalendarEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawCalendarEventStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveAContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawCalendarEventImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CalendarEventImage>());
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => RawCalendarEventFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CalendarEventFile>());
                // CalendarEvent's Related Objects
                mock.Setup(m => m.Group).Returns(() => RawGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.GroupID)?.Object);
                // CalendarEvent's Associated Objects
                mock.Setup(m => m.CalendarEventDetails).Returns(() => RawCalendarEventDetails?.Where(x => x.Object.CalendarEventID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CalendarEventDetail>());
                mock.Setup(m => m.Products).Returns(() => RawCalendarEventProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CalendarEventProduct>());
                mock.Setup(m => m.UserEventAttendances).Returns(() => RawUserEventAttendances?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<UserEventAttendance>());
                return mock;
            });
        }

        /// <summary>Creates a dummy CalendarEventDetail.</summary>
        /// <returns>The new CalendarEventDetail.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CalendarEventDetail>> CreateADummyCalendarEventDetailAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int calendarEventID = 1, int day = 1, DateTime? endTime = null!, string location = null!, DateTime? startTime = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CalendarEventDetail>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // CalendarEventDetail Properties
                mock.Object.CalendarEventID = calendarEventID;
                mock.Object.Day = day;
                mock.Object.EndTime = endTime;
                mock.Object.Location = location;
                mock.Object.StartTime = startTime;
                // Dynamic Linking
                // CalendarEventDetail's Related Objects
                mock.Setup(m => m.CalendarEvent).Returns(() => RawCalendarEvents?.FirstOrDefault(x => x.Object.ID == mock.Object.CalendarEventID)?.Object);
                // CalendarEventDetail's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CalendarEventFile.</summary>
        /// <returns>The new CalendarEventFile.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CalendarEventFile>> CreateADummyCalendarEventFileAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CalendarEventFile>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
                // CalendarEventFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawCalendarEvents?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CalendarEventFile's Related Objects
                // CalendarEventFile's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CalendarEventImage.</summary>
        /// <returns>The new CalendarEventImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CalendarEventImage>> CreateADummyCalendarEventImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CalendarEventImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // CalendarEventImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawCalendarEvents?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawCalendarEventImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // CalendarEventImage's Related Objects
                // CalendarEventImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CalendarEventImageType.</summary>
        /// <returns>The new CalendarEventImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CalendarEventImageType>> CreateADummyCalendarEventImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CalendarEventImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // CalendarEventImageType Properties
                // Dynamic Linking
                // CalendarEventImageType's Related Objects
                // CalendarEventImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CalendarEventProduct.</summary>
        /// <returns>The new CalendarEventProduct.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CalendarEventProduct>> CreateADummyCalendarEventProductAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CalendarEventProduct>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // CalendarEventProduct Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // CalendarEventProduct's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawCalendarEvents?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CalendarEventProduct's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CalendarEventStatus.</summary>
        /// <returns>The new CalendarEventStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CalendarEventStatus>> CreateADummyCalendarEventStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CalendarEventStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // CalendarEventStatus Properties
                // Dynamic Linking
                // CalendarEventStatus's Related Objects
                // CalendarEventStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CalendarEventType.</summary>
        /// <returns>The new CalendarEventType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CalendarEventType>> CreateADummyCalendarEventTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CalendarEventType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // CalendarEventType Properties
                // Dynamic Linking
                // CalendarEventType's Related Objects
                // CalendarEventType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy UserEventAttendance.</summary>
        /// <returns>The new UserEventAttendance.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<UserEventAttendance>> CreateADummyUserEventAttendanceAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, DateTime date = default, bool hasAttended = false, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<UserEventAttendance>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // UserEventAttendance Properties
                mock.Object.Date = date;
                mock.Object.HasAttended = hasAttended;
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawUserEventAttendanceTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // UserEventAttendance's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawCalendarEvents?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // UserEventAttendance's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy UserEventAttendanceType.</summary>
        /// <returns>The new UserEventAttendanceType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<UserEventAttendanceType>> CreateADummyUserEventAttendanceTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<UserEventAttendanceType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // UserEventAttendanceType Properties
                // Dynamic Linking
                // UserEventAttendanceType's Related Objects
                // UserEventAttendanceType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForCalendarEvents(MockingSetup mockingSetup)
        {
            Func<CalendarEvent> mockFuncCalendarEvent = () =>
            {
                var mock = new Mock<CalendarEvent>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CalendarEvent Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawCalendarEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawCalendarEventStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveAContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawCalendarEventImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CalendarEventImage>());
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => mockingSetup.RawCalendarEventFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CalendarEventFile>());
                mock.Setup(m => m.Group).Returns(() => mockingSetup.RawGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.GroupID)?.Object);
                // CalendarEvent's Associated Objects
                mock.Setup(m => m.CalendarEventDetails).Returns(() => mockingSetup.RawCalendarEventDetails?.Where(x => x.Object.CalendarEventID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CalendarEventDetail>());
                mock.Setup(m => m.Products).Returns(() => mockingSetup.RawCalendarEventProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CalendarEventProduct>());
                mock.Setup(m => m.UserEventAttendances).Returns(() => mockingSetup.RawUserEventAttendances?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<UserEventAttendance>());
                // CalendarEvent's Related Objects
                return mock.Object;
            };
            For<ICalendarEvent>().Use(() => mockFuncCalendarEvent());
            For<CalendarEvent>().Use(() => mockFuncCalendarEvent());
            Func<CalendarEventDetail> mockFuncCalendarEventDetail = () =>
            {
                var mock = new Mock<CalendarEventDetail>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CalendarEventDetail Properties
                // Dynamic Linking
                mock.Setup(m => m.CalendarEvent).Returns(() => mockingSetup.RawCalendarEvents?.FirstOrDefault(x => x.Object.ID == mock.Object.CalendarEventID)?.Object);
                // CalendarEventDetail's Associated Objects
                // CalendarEventDetail's Related Objects
                return mock.Object;
            };
            For<ICalendarEventDetail>().Use(() => mockFuncCalendarEventDetail());
            For<CalendarEventDetail>().Use(() => mockFuncCalendarEventDetail());
            Func<CalendarEventFile> mockFuncCalendarEventFile = () =>
            {
                var mock = new Mock<CalendarEventFile>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CalendarEventFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCalendarEvents?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CalendarEventFile's Associated Objects
                // CalendarEventFile's Related Objects
                return mock.Object;
            };
            For<ICalendarEventFile>().Use(() => mockFuncCalendarEventFile());
            For<CalendarEventFile>().Use(() => mockFuncCalendarEventFile());
            Func<CalendarEventImage> mockFuncCalendarEventImage = () =>
            {
                var mock = new Mock<CalendarEventImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CalendarEventImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCalendarEvents?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawCalendarEventImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // CalendarEventImage's Associated Objects
                // CalendarEventImage's Related Objects
                return mock.Object;
            };
            For<ICalendarEventImage>().Use(() => mockFuncCalendarEventImage());
            For<CalendarEventImage>().Use(() => mockFuncCalendarEventImage());
            Func<CalendarEventImageType> mockFuncCalendarEventImageType = () =>
            {
                var mock = new Mock<CalendarEventImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CalendarEventImageType Properties
                // Dynamic Linking
                // CalendarEventImageType's Associated Objects
                // CalendarEventImageType's Related Objects
                return mock.Object;
            };
            For<ICalendarEventImageType>().Use(() => mockFuncCalendarEventImageType());
            For<CalendarEventImageType>().Use(() => mockFuncCalendarEventImageType());
            Func<CalendarEventProduct> mockFuncCalendarEventProduct = () =>
            {
                var mock = new Mock<CalendarEventProduct>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CalendarEventProduct Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCalendarEvents?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CalendarEventProduct's Associated Objects
                // CalendarEventProduct's Related Objects
                return mock.Object;
            };
            For<ICalendarEventProduct>().Use(() => mockFuncCalendarEventProduct());
            For<CalendarEventProduct>().Use(() => mockFuncCalendarEventProduct());
            Func<CalendarEventStatus> mockFuncCalendarEventStatus = () =>
            {
                var mock = new Mock<CalendarEventStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CalendarEventStatus Properties
                // Dynamic Linking
                // CalendarEventStatus's Associated Objects
                // CalendarEventStatus's Related Objects
                return mock.Object;
            };
            For<ICalendarEventStatus>().Use(() => mockFuncCalendarEventStatus());
            For<CalendarEventStatus>().Use(() => mockFuncCalendarEventStatus());
            Func<CalendarEventType> mockFuncCalendarEventType = () =>
            {
                var mock = new Mock<CalendarEventType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CalendarEventType Properties
                // Dynamic Linking
                // CalendarEventType's Associated Objects
                // CalendarEventType's Related Objects
                return mock.Object;
            };
            For<ICalendarEventType>().Use(() => mockFuncCalendarEventType());
            For<CalendarEventType>().Use(() => mockFuncCalendarEventType());
            Func<UserEventAttendance> mockFuncUserEventAttendance = () =>
            {
                var mock = new Mock<UserEventAttendance>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // UserEventAttendance Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawUserEventAttendanceTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCalendarEvents?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // UserEventAttendance's Associated Objects
                // UserEventAttendance's Related Objects
                return mock.Object;
            };
            For<IUserEventAttendance>().Use(() => mockFuncUserEventAttendance());
            For<UserEventAttendance>().Use(() => mockFuncUserEventAttendance());
            Func<UserEventAttendanceType> mockFuncUserEventAttendanceType = () =>
            {
                var mock = new Mock<UserEventAttendanceType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // UserEventAttendanceType Properties
                // Dynamic Linking
                // UserEventAttendanceType's Associated Objects
                // UserEventAttendanceType's Related Objects
                return mock.Object;
            };
            For<IUserEventAttendanceType>().Use(() => mockFuncUserEventAttendanceType());
            For<UserEventAttendanceType>().Use(() => mockFuncUserEventAttendanceType());
        }
    }
}
