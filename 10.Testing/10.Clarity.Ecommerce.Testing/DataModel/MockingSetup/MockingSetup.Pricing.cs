// <autogenerated>
// <copyright file="Pricing.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Pricing section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoPricing { private get; set; }

        // Enable the tables specifically on run
        public bool DoPricePointTable { private get; set; }
        public bool DoPriceRoundingTable { private get; set; }
        public bool DoPriceRuleTable { private get; set; }
        public bool DoPriceRuleAccountTable { private get; set; }
        public bool DoPriceRuleAccountTypeTable { private get; set; }
        public bool DoPriceRuleBrandTable { private get; set; }
        public bool DoPriceRuleCategoryTable { private get; set; }
        public bool DoPriceRuleCountryTable { private get; set; }
        public bool DoPriceRuleFranchiseTable { private get; set; }
        public bool DoPriceRuleManufacturerTable { private get; set; }
        public bool DoPriceRuleProductTable { private get; set; }
        public bool DoPriceRuleProductTypeTable { private get; set; }
        public bool DoPriceRuleStoreTable { private get; set; }
        public bool DoPriceRuleUserRoleTable { private get; set; }
        public bool DoPriceRuleVendorTable { private get; set; }

        // Dirty Checking
        public bool PricePointDirty { private get; set; }
        public bool PriceRoundingDirty { private get; set; }
        public bool PriceRuleDirty { private get; set; }
        public bool PriceRuleAccountDirty { private get; set; }
        public bool PriceRuleAccountTypeDirty { private get; set; }
        public bool PriceRuleBrandDirty { private get; set; }
        public bool PriceRuleCategoryDirty { private get; set; }
        public bool PriceRuleCountryDirty { private get; set; }
        public bool PriceRuleFranchiseDirty { private get; set; }
        public bool PriceRuleManufacturerDirty { private get; set; }
        public bool PriceRuleProductDirty { private get; set; }
        public bool PriceRuleProductTypeDirty { private get; set; }
        public bool PriceRuleStoreDirty { private get; set; }
        public bool PriceRuleUserRoleDirty { private get; set; }
        public bool PriceRuleVendorDirty { private get; set; }

        // Sets
        public Mock<DbSet<PricePoint>>? PricePoints { get; private set; }
        public Mock<DbSet<PriceRounding>>? PriceRoundings { get; private set; }
        public Mock<DbSet<PriceRule>>? PriceRules { get; private set; }
        public Mock<DbSet<PriceRuleAccount>>? PriceRuleAccounts { get; private set; }
        public Mock<DbSet<PriceRuleAccountType>>? PriceRuleAccountTypes { get; private set; }
        public Mock<DbSet<PriceRuleBrand>>? PriceRuleBrands { get; private set; }
        public Mock<DbSet<PriceRuleCategory>>? PriceRuleCategories { get; private set; }
        public Mock<DbSet<PriceRuleCountry>>? PriceRuleCountries { get; private set; }
        public Mock<DbSet<PriceRuleFranchise>>? PriceRuleFranchises { get; private set; }
        public Mock<DbSet<PriceRuleManufacturer>>? PriceRuleManufacturers { get; private set; }
        public Mock<DbSet<PriceRuleProduct>>? PriceRuleProducts { get; private set; }
        public Mock<DbSet<PriceRuleProductType>>? PriceRuleProductTypes { get; private set; }
        public Mock<DbSet<PriceRuleStore>>? PriceRuleStores { get; private set; }
        public Mock<DbSet<PriceRuleUserRole>>? PriceRuleUserRoles { get; private set; }
        public Mock<DbSet<PriceRuleVendor>>? PriceRuleVendors { get; private set; }

        // Raw Data
        public List<Mock<PricePoint>>? RawPricePoints { get; private set; }
        public List<Mock<PriceRounding>>? RawPriceRoundings { get; private set; }
        public List<Mock<PriceRule>>? RawPriceRules { get; private set; }
        public List<Mock<PriceRuleAccount>>? RawPriceRuleAccounts { get; private set; }
        public List<Mock<PriceRuleAccountType>>? RawPriceRuleAccountTypes { get; private set; }
        public List<Mock<PriceRuleBrand>>? RawPriceRuleBrands { get; private set; }
        public List<Mock<PriceRuleCategory>>? RawPriceRuleCategories { get; private set; }
        public List<Mock<PriceRuleCountry>>? RawPriceRuleCountries { get; private set; }
        public List<Mock<PriceRuleFranchise>>? RawPriceRuleFranchises { get; private set; }
        public List<Mock<PriceRuleManufacturer>>? RawPriceRuleManufacturers { get; private set; }
        public List<Mock<PriceRuleProduct>>? RawPriceRuleProducts { get; private set; }
        public List<Mock<PriceRuleProductType>>? RawPriceRuleProductTypes { get; private set; }
        public List<Mock<PriceRuleStore>>? RawPriceRuleStores { get; private set; }
        public List<Mock<PriceRuleUserRole>>? RawPriceRuleUserRoles { get; private set; }
        public List<Mock<PriceRuleVendor>>? RawPriceRuleVendors { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksPricingAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoPricing || (DoPricePointTable && (!dirtyOnly || PricePointDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPricePoints == null) { throw new InvalidOperationException("Raw PricePoints was null"); }
                    await InitializeMockSetFromListAsync(PricePoints, RawPricePoints).ConfigureAwait(false);
                    context.Setup(m => m.PricePoints).Returns(() => PricePoints?.Object!);
                    context.Setup(m => m.Set<PricePoint>()).Returns(() => PricePoints?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPricing || (DoPriceRoundingTable && (!dirtyOnly || PriceRoundingDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPriceRoundings == null) { throw new InvalidOperationException("Raw PriceRoundings was null"); }
                    await InitializeMockSetFromListAsync(PriceRoundings, RawPriceRoundings).ConfigureAwait(false);
                    context.Setup(m => m.PriceRoundings).Returns(() => PriceRoundings?.Object!);
                    context.Setup(m => m.Set<PriceRounding>()).Returns(() => PriceRoundings?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPricing || (DoPriceRuleTable && (!dirtyOnly || PriceRuleDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPriceRules == null) { throw new InvalidOperationException("Raw PriceRules was null"); }
                    await InitializeMockSetFromListAsync(PriceRules, RawPriceRules).ConfigureAwait(false);
                    context.Setup(m => m.PriceRules).Returns(() => PriceRules?.Object!);
                    context.Setup(m => m.Set<PriceRule>()).Returns(() => PriceRules?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPricing || (DoPriceRuleAccountTable && (!dirtyOnly || PriceRuleAccountDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPriceRuleAccounts == null) { throw new InvalidOperationException("Raw PriceRuleAccounts was null"); }
                    await InitializeMockSetFromListAsync(PriceRuleAccounts, RawPriceRuleAccounts).ConfigureAwait(false);
                    context.Setup(m => m.PriceRuleAccounts).Returns(() => PriceRuleAccounts?.Object!);
                    context.Setup(m => m.Set<PriceRuleAccount>()).Returns(() => PriceRuleAccounts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPricing || (DoPriceRuleAccountTypeTable && (!dirtyOnly || PriceRuleAccountTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPriceRuleAccountTypes == null) { throw new InvalidOperationException("Raw PriceRuleAccountTypes was null"); }
                    await InitializeMockSetFromListAsync(PriceRuleAccountTypes, RawPriceRuleAccountTypes).ConfigureAwait(false);
                    context.Setup(m => m.PriceRuleAccountTypes).Returns(() => PriceRuleAccountTypes?.Object!);
                    context.Setup(m => m.Set<PriceRuleAccountType>()).Returns(() => PriceRuleAccountTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPricing || (DoPriceRuleBrandTable && (!dirtyOnly || PriceRuleBrandDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPriceRuleBrands == null) { throw new InvalidOperationException("Raw PriceRuleBrands was null"); }
                    await InitializeMockSetFromListAsync(PriceRuleBrands, RawPriceRuleBrands).ConfigureAwait(false);
                    context.Setup(m => m.PriceRuleBrands).Returns(() => PriceRuleBrands?.Object!);
                    context.Setup(m => m.Set<PriceRuleBrand>()).Returns(() => PriceRuleBrands?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPricing || (DoPriceRuleCategoryTable && (!dirtyOnly || PriceRuleCategoryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPriceRuleCategories == null) { throw new InvalidOperationException("Raw PriceRuleCategories was null"); }
                    await InitializeMockSetFromListAsync(PriceRuleCategories, RawPriceRuleCategories).ConfigureAwait(false);
                    context.Setup(m => m.PriceRuleCategories).Returns(() => PriceRuleCategories?.Object!);
                    context.Setup(m => m.Set<PriceRuleCategory>()).Returns(() => PriceRuleCategories?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPricing || (DoPriceRuleCountryTable && (!dirtyOnly || PriceRuleCountryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPriceRuleCountries == null) { throw new InvalidOperationException("Raw PriceRuleCountries was null"); }
                    await InitializeMockSetFromListAsync(PriceRuleCountries, RawPriceRuleCountries).ConfigureAwait(false);
                    context.Setup(m => m.PriceRuleCountries).Returns(() => PriceRuleCountries?.Object!);
                    context.Setup(m => m.Set<PriceRuleCountry>()).Returns(() => PriceRuleCountries?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPricing || (DoPriceRuleFranchiseTable && (!dirtyOnly || PriceRuleFranchiseDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPriceRuleFranchises == null) { throw new InvalidOperationException("Raw PriceRuleFranchises was null"); }
                    await InitializeMockSetFromListAsync(PriceRuleFranchises, RawPriceRuleFranchises).ConfigureAwait(false);
                    context.Setup(m => m.PriceRuleFranchises).Returns(() => PriceRuleFranchises?.Object!);
                    context.Setup(m => m.Set<PriceRuleFranchise>()).Returns(() => PriceRuleFranchises?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPricing || (DoPriceRuleManufacturerTable && (!dirtyOnly || PriceRuleManufacturerDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPriceRuleManufacturers == null) { throw new InvalidOperationException("Raw PriceRuleManufacturers was null"); }
                    await InitializeMockSetFromListAsync(PriceRuleManufacturers, RawPriceRuleManufacturers).ConfigureAwait(false);
                    context.Setup(m => m.PriceRuleManufacturers).Returns(() => PriceRuleManufacturers?.Object!);
                    context.Setup(m => m.Set<PriceRuleManufacturer>()).Returns(() => PriceRuleManufacturers?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPricing || (DoPriceRuleProductTable && (!dirtyOnly || PriceRuleProductDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPriceRuleProducts == null) { throw new InvalidOperationException("Raw PriceRuleProducts was null"); }
                    await InitializeMockSetFromListAsync(PriceRuleProducts, RawPriceRuleProducts).ConfigureAwait(false);
                    context.Setup(m => m.PriceRuleProducts).Returns(() => PriceRuleProducts?.Object!);
                    context.Setup(m => m.Set<PriceRuleProduct>()).Returns(() => PriceRuleProducts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPricing || (DoPriceRuleProductTypeTable && (!dirtyOnly || PriceRuleProductTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPriceRuleProductTypes == null) { throw new InvalidOperationException("Raw PriceRuleProductTypes was null"); }
                    await InitializeMockSetFromListAsync(PriceRuleProductTypes, RawPriceRuleProductTypes).ConfigureAwait(false);
                    context.Setup(m => m.PriceRuleProductTypes).Returns(() => PriceRuleProductTypes?.Object!);
                    context.Setup(m => m.Set<PriceRuleProductType>()).Returns(() => PriceRuleProductTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPricing || (DoPriceRuleStoreTable && (!dirtyOnly || PriceRuleStoreDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPriceRuleStores == null) { throw new InvalidOperationException("Raw PriceRuleStores was null"); }
                    await InitializeMockSetFromListAsync(PriceRuleStores, RawPriceRuleStores).ConfigureAwait(false);
                    context.Setup(m => m.PriceRuleStores).Returns(() => PriceRuleStores?.Object!);
                    context.Setup(m => m.Set<PriceRuleStore>()).Returns(() => PriceRuleStores?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPricing || (DoPriceRuleUserRoleTable && (!dirtyOnly || PriceRuleUserRoleDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPriceRuleUserRoles == null) { throw new InvalidOperationException("Raw PriceRuleUserRoles was null"); }
                    await InitializeMockSetFromListAsync(PriceRuleUserRoles, RawPriceRuleUserRoles).ConfigureAwait(false);
                    context.Setup(m => m.PriceRuleUserRoles).Returns(() => PriceRuleUserRoles?.Object!);
                    context.Setup(m => m.Set<PriceRuleUserRole>()).Returns(() => PriceRuleUserRoles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPricing || (DoPriceRuleVendorTable && (!dirtyOnly || PriceRuleVendorDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPriceRuleVendors == null) { throw new InvalidOperationException("Raw PriceRuleVendors was null"); }
                    await InitializeMockSetFromListAsync(PriceRuleVendors, RawPriceRuleVendors).ConfigureAwait(false);
                    context.Setup(m => m.PriceRuleVendors).Returns(() => PriceRuleVendors?.Object!);
                    context.Setup(m => m.Set<PriceRuleVendor>()).Returns(() => PriceRuleVendors?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPricePointsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PricePoint>> data)
        {
            if (!DoAll && !DoPricing && !DoPricePointTable) { return; }
            PricePoints ??= new Mock<DbSet<PricePoint>>();
            await InitializeMockSetFromListAsync(PricePoints, data).ConfigureAwait(false);
            context.Setup(m => m.PricePoints).Returns(() => PricePoints.Object);
            context.Setup(m => m.Set<PricePoint>()).Returns(() => PricePoints.Object);
            TableRecordCounts[typeof(PricePoint)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PricePoint)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PricePoint)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PricePoint)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(PricePoint)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPriceRoundingsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PriceRounding>> data)
        {
            if (!DoAll && !DoPricing && !DoPriceRoundingTable) { return; }
            PriceRoundings ??= new Mock<DbSet<PriceRounding>>();
            await InitializeMockSetFromListAsync(PriceRoundings, data).ConfigureAwait(false);
            context.Setup(m => m.PriceRoundings).Returns(() => PriceRoundings.Object);
            context.Setup(m => m.Set<PriceRounding>()).Returns(() => PriceRoundings.Object);
            TableRecordCounts[typeof(PriceRounding)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PriceRounding)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PriceRounding)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPriceRulesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PriceRule>> data)
        {
            if (!DoAll && !DoPricing && !DoPriceRuleTable) { return; }
            PriceRules ??= new Mock<DbSet<PriceRule>>();
            await InitializeMockSetFromListAsync(PriceRules, data).ConfigureAwait(false);
            context.Setup(m => m.PriceRules).Returns(() => PriceRules.Object);
            context.Setup(m => m.Set<PriceRule>()).Returns(() => PriceRules.Object);
            TableRecordCounts[typeof(PriceRule)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PriceRule)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PriceRule)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PriceRule)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPriceRuleAccountsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PriceRuleAccount>> data)
        {
            if (!DoAll && !DoPricing && !DoPriceRuleAccountTable) { return; }
            PriceRuleAccounts ??= new Mock<DbSet<PriceRuleAccount>>();
            await InitializeMockSetFromListAsync(PriceRuleAccounts, data).ConfigureAwait(false);
            context.Setup(m => m.PriceRuleAccounts).Returns(() => PriceRuleAccounts.Object);
            context.Setup(m => m.Set<PriceRuleAccount>()).Returns(() => PriceRuleAccounts.Object);
            TableRecordCounts[typeof(PriceRuleAccount)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PriceRuleAccount)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PriceRuleAccount)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPriceRuleAccountTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PriceRuleAccountType>> data)
        {
            if (!DoAll && !DoPricing && !DoPriceRuleAccountTypeTable) { return; }
            PriceRuleAccountTypes ??= new Mock<DbSet<PriceRuleAccountType>>();
            await InitializeMockSetFromListAsync(PriceRuleAccountTypes, data).ConfigureAwait(false);
            context.Setup(m => m.PriceRuleAccountTypes).Returns(() => PriceRuleAccountTypes.Object);
            context.Setup(m => m.Set<PriceRuleAccountType>()).Returns(() => PriceRuleAccountTypes.Object);
            TableRecordCounts[typeof(PriceRuleAccountType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PriceRuleAccountType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PriceRuleAccountType)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPriceRuleBrandsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PriceRuleBrand>> data)
        {
            if (!DoAll && !DoPricing && !DoPriceRuleBrandTable) { return; }
            PriceRuleBrands ??= new Mock<DbSet<PriceRuleBrand>>();
            await InitializeMockSetFromListAsync(PriceRuleBrands, data).ConfigureAwait(false);
            context.Setup(m => m.PriceRuleBrands).Returns(() => PriceRuleBrands.Object);
            context.Setup(m => m.Set<PriceRuleBrand>()).Returns(() => PriceRuleBrands.Object);
            TableRecordCounts[typeof(PriceRuleBrand)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PriceRuleBrand)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PriceRuleBrand)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPriceRuleCategoriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PriceRuleCategory>> data)
        {
            if (!DoAll && !DoPricing && !DoPriceRuleCategoryTable) { return; }
            PriceRuleCategories ??= new Mock<DbSet<PriceRuleCategory>>();
            await InitializeMockSetFromListAsync(PriceRuleCategories, data).ConfigureAwait(false);
            context.Setup(m => m.PriceRuleCategories).Returns(() => PriceRuleCategories.Object);
            context.Setup(m => m.Set<PriceRuleCategory>()).Returns(() => PriceRuleCategories.Object);
            TableRecordCounts[typeof(PriceRuleCategory)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PriceRuleCategory)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PriceRuleCategory)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPriceRuleCountriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PriceRuleCountry>> data)
        {
            if (!DoAll && !DoPricing && !DoPriceRuleCountryTable) { return; }
            PriceRuleCountries ??= new Mock<DbSet<PriceRuleCountry>>();
            await InitializeMockSetFromListAsync(PriceRuleCountries, data).ConfigureAwait(false);
            context.Setup(m => m.PriceRuleCountries).Returns(() => PriceRuleCountries.Object);
            context.Setup(m => m.Set<PriceRuleCountry>()).Returns(() => PriceRuleCountries.Object);
            TableRecordCounts[typeof(PriceRuleCountry)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PriceRuleCountry)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PriceRuleCountry)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPriceRuleFranchisesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PriceRuleFranchise>> data)
        {
            if (!DoAll && !DoPricing && !DoPriceRuleFranchiseTable) { return; }
            PriceRuleFranchises ??= new Mock<DbSet<PriceRuleFranchise>>();
            await InitializeMockSetFromListAsync(PriceRuleFranchises, data).ConfigureAwait(false);
            context.Setup(m => m.PriceRuleFranchises).Returns(() => PriceRuleFranchises.Object);
            context.Setup(m => m.Set<PriceRuleFranchise>()).Returns(() => PriceRuleFranchises.Object);
            TableRecordCounts[typeof(PriceRuleFranchise)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PriceRuleFranchise)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PriceRuleFranchise)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPriceRuleManufacturersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PriceRuleManufacturer>> data)
        {
            if (!DoAll && !DoPricing && !DoPriceRuleManufacturerTable) { return; }
            PriceRuleManufacturers ??= new Mock<DbSet<PriceRuleManufacturer>>();
            await InitializeMockSetFromListAsync(PriceRuleManufacturers, data).ConfigureAwait(false);
            context.Setup(m => m.PriceRuleManufacturers).Returns(() => PriceRuleManufacturers.Object);
            context.Setup(m => m.Set<PriceRuleManufacturer>()).Returns(() => PriceRuleManufacturers.Object);
            TableRecordCounts[typeof(PriceRuleManufacturer)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PriceRuleManufacturer)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PriceRuleManufacturer)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPriceRuleProductsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PriceRuleProduct>> data)
        {
            if (!DoAll && !DoPricing && !DoPriceRuleProductTable) { return; }
            PriceRuleProducts ??= new Mock<DbSet<PriceRuleProduct>>();
            await InitializeMockSetFromListAsync(PriceRuleProducts, data).ConfigureAwait(false);
            context.Setup(m => m.PriceRuleProducts).Returns(() => PriceRuleProducts.Object);
            context.Setup(m => m.Set<PriceRuleProduct>()).Returns(() => PriceRuleProducts.Object);
            TableRecordCounts[typeof(PriceRuleProduct)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PriceRuleProduct)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PriceRuleProduct)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPriceRuleProductTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PriceRuleProductType>> data)
        {
            if (!DoAll && !DoPricing && !DoPriceRuleProductTypeTable) { return; }
            PriceRuleProductTypes ??= new Mock<DbSet<PriceRuleProductType>>();
            await InitializeMockSetFromListAsync(PriceRuleProductTypes, data).ConfigureAwait(false);
            context.Setup(m => m.PriceRuleProductTypes).Returns(() => PriceRuleProductTypes.Object);
            context.Setup(m => m.Set<PriceRuleProductType>()).Returns(() => PriceRuleProductTypes.Object);
            TableRecordCounts[typeof(PriceRuleProductType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PriceRuleProductType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PriceRuleProductType)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPriceRuleStoresAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PriceRuleStore>> data)
        {
            if (!DoAll && !DoPricing && !DoPriceRuleStoreTable) { return; }
            PriceRuleStores ??= new Mock<DbSet<PriceRuleStore>>();
            await InitializeMockSetFromListAsync(PriceRuleStores, data).ConfigureAwait(false);
            context.Setup(m => m.PriceRuleStores).Returns(() => PriceRuleStores.Object);
            context.Setup(m => m.Set<PriceRuleStore>()).Returns(() => PriceRuleStores.Object);
            TableRecordCounts[typeof(PriceRuleStore)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PriceRuleStore)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PriceRuleStore)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPriceRuleUserRolesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PriceRuleUserRole>> data)
        {
            if (!DoAll && !DoPricing && !DoPriceRuleUserRoleTable) { return; }
            PriceRuleUserRoles ??= new Mock<DbSet<PriceRuleUserRole>>();
            await InitializeMockSetFromListAsync(PriceRuleUserRoles, data).ConfigureAwait(false);
            context.Setup(m => m.PriceRuleUserRoles).Returns(() => PriceRuleUserRoles.Object);
            context.Setup(m => m.Set<PriceRuleUserRole>()).Returns(() => PriceRuleUserRoles.Object);
            TableRecordCounts[typeof(PriceRuleUserRole)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PriceRuleUserRole)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PriceRuleUserRole)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPriceRuleVendorsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PriceRuleVendor>> data)
        {
            if (!DoAll && !DoPricing && !DoPriceRuleVendorTable) { return; }
            PriceRuleVendors ??= new Mock<DbSet<PriceRuleVendor>>();
            await InitializeMockSetFromListAsync(PriceRuleVendors, data).ConfigureAwait(false);
            context.Setup(m => m.PriceRuleVendors).Returns(() => PriceRuleVendors.Object);
            context.Setup(m => m.Set<PriceRuleVendor>()).Returns(() => PriceRuleVendors.Object);
            TableRecordCounts[typeof(PriceRuleVendor)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PriceRuleVendor)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PriceRuleVendor)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy PricePoint.</summary>
        /// <returns>The new PricePoint.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PricePoint>> CreateADummyPricePointAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PricePoint>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // PricePoint Properties
                // Dynamic Linking
                // PricePoint's Related Objects
                // PricePoint's Associated Objects
                mock.Setup(m => m.StoreAccounts).Returns(() => RawStoreAccounts?.Where(x => x.Object.PricePointID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreAccount>());
                return mock;
            });
        }

        /// <summary>Creates a dummy PriceRounding.</summary>
        /// <returns>The new PriceRounding.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PriceRounding>> CreateADummyPriceRoundingAsync(int id, string? key, string? jsonAttributes = null, string currencyKey = null!, string pricePointKey = null!, string productKey = null!, int roundHow = 1, int roundingAmount = 1, int roundTo = 1, string unitOfMeasure = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PriceRounding>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PriceRounding Properties
                mock.Object.CurrencyKey = currencyKey;
                mock.Object.PricePointKey = pricePointKey;
                mock.Object.ProductKey = productKey;
                mock.Object.RoundHow = roundHow;
                mock.Object.RoundingAmount = roundingAmount;
                mock.Object.RoundTo = roundTo;
                mock.Object.UnitOfMeasure = unitOfMeasure;
                // Dynamic Linking
                // PriceRounding's Related Objects
                // PriceRounding's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PriceRule.</summary>
        /// <returns>The new PriceRule.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PriceRule>> CreateADummyPriceRuleAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int? currencyID = null!, DateTime? endDate = null!, bool isExclusive = false, bool isMarkup = false, bool isOnlyForAnonymousUsers = false, bool isPercentage = false, decimal? maxQuantity = null!, decimal? minQuantity = null!, decimal priceAdjustment = 0m, int? priority = null!, DateTime? startDate = null!, string unitOfMeasure = null!, bool usePriceBase = false, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PriceRule>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // PriceRule Properties
                mock.Object.CurrencyID = currencyID;
                mock.Object.EndDate = endDate;
                mock.Object.IsExclusive = isExclusive;
                mock.Object.IsMarkup = isMarkup;
                mock.Object.IsOnlyForAnonymousUsers = isOnlyForAnonymousUsers;
                mock.Object.IsPercentage = isPercentage;
                mock.Object.MaxQuantity = maxQuantity;
                mock.Object.MinQuantity = minQuantity;
                mock.Object.PriceAdjustment = priceAdjustment;
                mock.Object.Priority = priority;
                mock.Object.StartDate = startDate;
                mock.Object.UnitOfMeasure = unitOfMeasure;
                mock.Object.UsePriceBase = usePriceBase;
                // Dynamic Linking
                // PriceRule's Related Objects
                mock.Setup(m => m.Currency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.CurrencyID)?.Object);
                // PriceRule's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => RawPriceRuleAccounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleAccount>());
                mock.Setup(m => m.Brands).Returns(() => RawPriceRuleBrands?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleBrand>());
                mock.Setup(m => m.Franchises).Returns(() => RawPriceRuleFranchises?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleFranchise>());
                mock.Setup(m => m.Manufacturers).Returns(() => RawPriceRuleManufacturers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleManufacturer>());
                mock.Setup(m => m.PriceRuleAccountTypes).Returns(() => RawPriceRuleAccountTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleAccountType>());
                mock.Setup(m => m.PriceRuleCategories).Returns(() => RawPriceRuleCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleCategory>());
                mock.Setup(m => m.PriceRuleCountries).Returns(() => RawPriceRuleCountries?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleCountry>());
                mock.Setup(m => m.PriceRuleProductTypes).Returns(() => RawPriceRuleProductTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleProductType>());
                mock.Setup(m => m.PriceRuleUserRoles).Returns(() => RawPriceRuleUserRoles?.Where(x => x.Object.PriceRuleID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleUserRole>());
                mock.Setup(m => m.Products).Returns(() => RawPriceRuleProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleProduct>());
                mock.Setup(m => m.Stores).Returns(() => RawPriceRuleStores?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleStore>());
                mock.Setup(m => m.Vendors).Returns(() => RawPriceRuleVendors?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleVendor>());
                return mock;
            });
        }

        /// <summary>Creates a dummy PriceRuleAccount.</summary>
        /// <returns>The new PriceRuleAccount.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PriceRuleAccount>> CreateADummyPriceRuleAccountAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PriceRuleAccount>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PriceRuleAccount Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // PriceRuleAccount's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleAccount's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PriceRuleAccountType.</summary>
        /// <returns>The new PriceRuleAccountType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PriceRuleAccountType>> CreateADummyPriceRuleAccountTypeAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PriceRuleAccountType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PriceRuleAccountType Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // PriceRuleAccountType's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawAccountTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleAccountType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PriceRuleBrand.</summary>
        /// <returns>The new PriceRuleBrand.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PriceRuleBrand>> CreateADummyPriceRuleBrandAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PriceRuleBrand>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PriceRuleBrand Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // PriceRuleBrand's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleBrand's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PriceRuleCategory.</summary>
        /// <returns>The new PriceRuleCategory.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PriceRuleCategory>> CreateADummyPriceRuleCategoryAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PriceRuleCategory>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PriceRuleCategory Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // PriceRuleCategory's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleCategory's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PriceRuleCountry.</summary>
        /// <returns>The new PriceRuleCountry.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PriceRuleCountry>> CreateADummyPriceRuleCountryAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PriceRuleCountry>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PriceRuleCountry Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // PriceRuleCountry's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleCountry's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PriceRuleFranchise.</summary>
        /// <returns>The new PriceRuleFranchise.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PriceRuleFranchise>> CreateADummyPriceRuleFranchiseAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PriceRuleFranchise>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PriceRuleFranchise Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // PriceRuleFranchise's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleFranchise's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PriceRuleManufacturer.</summary>
        /// <returns>The new PriceRuleManufacturer.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PriceRuleManufacturer>> CreateADummyPriceRuleManufacturerAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PriceRuleManufacturer>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PriceRuleManufacturer Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // PriceRuleManufacturer's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleManufacturer's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PriceRuleProduct.</summary>
        /// <returns>The new PriceRuleProduct.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PriceRuleProduct>> CreateADummyPriceRuleProductAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, decimal? overrideBasePrice = null!, bool overridePrice = false, decimal? overrideSalePrice = null!, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PriceRuleProduct>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PriceRuleProduct Properties
                mock.Object.MasterID = masterID;
                mock.Object.OverrideBasePrice = overrideBasePrice;
                mock.Object.OverridePrice = overridePrice;
                mock.Object.OverrideSalePrice = overrideSalePrice;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // PriceRuleProduct's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleProduct's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PriceRuleProductType.</summary>
        /// <returns>The new PriceRuleProductType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PriceRuleProductType>> CreateADummyPriceRuleProductTypeAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PriceRuleProductType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PriceRuleProductType Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // PriceRuleProductType's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawProductTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleProductType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PriceRuleStore.</summary>
        /// <returns>The new PriceRuleStore.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PriceRuleStore>> CreateADummyPriceRuleStoreAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PriceRuleStore>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PriceRuleStore Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // PriceRuleStore's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleStore's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PriceRuleUserRole.</summary>
        /// <returns>The new PriceRuleUserRole.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PriceRuleUserRole>> CreateADummyPriceRuleUserRoleAsync(int id, string? key, string? jsonAttributes = null, int priceRuleID = 1, string roleName = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PriceRuleUserRole>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PriceRuleUserRole Properties
                mock.Object.PriceRuleID = priceRuleID;
                mock.Object.RoleName = roleName;
                // Dynamic Linking
                // PriceRuleUserRole's Related Objects
                mock.Setup(m => m.PriceRule).Returns(() => RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.PriceRuleID)?.Object);
                // PriceRuleUserRole's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PriceRuleVendor.</summary>
        /// <returns>The new PriceRuleVendor.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PriceRuleVendor>> CreateADummyPriceRuleVendorAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PriceRuleVendor>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PriceRuleVendor Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // PriceRuleVendor's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleVendor's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForPricing(MockingSetup mockingSetup)
        {
            Func<PricePoint> mockFuncPricePoint = () =>
            {
                var mock = new Mock<PricePoint>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PricePoint Properties
                // Dynamic Linking
                // PricePoint's Associated Objects
                mock.Setup(m => m.StoreAccounts).Returns(() => mockingSetup.RawStoreAccounts?.Where(x => x.Object.PricePointID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreAccount>());
                // PricePoint's Related Objects
                return mock.Object;
            };
            For<IPricePoint>().Use(() => mockFuncPricePoint());
            For<PricePoint>().Use(() => mockFuncPricePoint());
            Func<PriceRounding> mockFuncPriceRounding = () =>
            {
                var mock = new Mock<PriceRounding>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PriceRounding Properties
                // Dynamic Linking
                // PriceRounding's Associated Objects
                // PriceRounding's Related Objects
                return mock.Object;
            };
            For<IPriceRounding>().Use(() => mockFuncPriceRounding());
            For<PriceRounding>().Use(() => mockFuncPriceRounding());
            Func<PriceRule> mockFuncPriceRule = () =>
            {
                var mock = new Mock<PriceRule>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PriceRule Properties
                // Dynamic Linking
                mock.Setup(m => m.Currency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.CurrencyID)?.Object);
                // PriceRule's Associated Objects
                mock.Setup(m => m.Accounts).Returns(() => mockingSetup.RawPriceRuleAccounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleAccount>());
                mock.Setup(m => m.Brands).Returns(() => mockingSetup.RawPriceRuleBrands?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleBrand>());
                mock.Setup(m => m.Franchises).Returns(() => mockingSetup.RawPriceRuleFranchises?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleFranchise>());
                mock.Setup(m => m.Manufacturers).Returns(() => mockingSetup.RawPriceRuleManufacturers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleManufacturer>());
                mock.Setup(m => m.PriceRuleAccountTypes).Returns(() => mockingSetup.RawPriceRuleAccountTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleAccountType>());
                mock.Setup(m => m.PriceRuleCategories).Returns(() => mockingSetup.RawPriceRuleCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleCategory>());
                mock.Setup(m => m.PriceRuleCountries).Returns(() => mockingSetup.RawPriceRuleCountries?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleCountry>());
                mock.Setup(m => m.PriceRuleProductTypes).Returns(() => mockingSetup.RawPriceRuleProductTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleProductType>());
                mock.Setup(m => m.PriceRuleUserRoles).Returns(() => mockingSetup.RawPriceRuleUserRoles?.Where(x => x.Object.PriceRuleID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleUserRole>());
                mock.Setup(m => m.Products).Returns(() => mockingSetup.RawPriceRuleProducts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleProduct>());
                mock.Setup(m => m.Stores).Returns(() => mockingSetup.RawPriceRuleStores?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleStore>());
                mock.Setup(m => m.Vendors).Returns(() => mockingSetup.RawPriceRuleVendors?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PriceRuleVendor>());
                // PriceRule's Related Objects
                return mock.Object;
            };
            For<IPriceRule>().Use(() => mockFuncPriceRule());
            For<PriceRule>().Use(() => mockFuncPriceRule());
            Func<PriceRuleAccount> mockFuncPriceRuleAccount = () =>
            {
                var mock = new Mock<PriceRuleAccount>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PriceRuleAccount Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleAccount's Associated Objects
                // PriceRuleAccount's Related Objects
                return mock.Object;
            };
            For<IPriceRuleAccount>().Use(() => mockFuncPriceRuleAccount());
            For<PriceRuleAccount>().Use(() => mockFuncPriceRuleAccount());
            Func<PriceRuleAccountType> mockFuncPriceRuleAccountType = () =>
            {
                var mock = new Mock<PriceRuleAccountType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PriceRuleAccountType Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAccountTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleAccountType's Associated Objects
                // PriceRuleAccountType's Related Objects
                return mock.Object;
            };
            For<IPriceRuleAccountType>().Use(() => mockFuncPriceRuleAccountType());
            For<PriceRuleAccountType>().Use(() => mockFuncPriceRuleAccountType());
            Func<PriceRuleBrand> mockFuncPriceRuleBrand = () =>
            {
                var mock = new Mock<PriceRuleBrand>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PriceRuleBrand Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleBrand's Associated Objects
                // PriceRuleBrand's Related Objects
                return mock.Object;
            };
            For<IPriceRuleBrand>().Use(() => mockFuncPriceRuleBrand());
            For<PriceRuleBrand>().Use(() => mockFuncPriceRuleBrand());
            Func<PriceRuleCategory> mockFuncPriceRuleCategory = () =>
            {
                var mock = new Mock<PriceRuleCategory>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PriceRuleCategory Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleCategory's Associated Objects
                // PriceRuleCategory's Related Objects
                return mock.Object;
            };
            For<IPriceRuleCategory>().Use(() => mockFuncPriceRuleCategory());
            For<PriceRuleCategory>().Use(() => mockFuncPriceRuleCategory());
            Func<PriceRuleCountry> mockFuncPriceRuleCountry = () =>
            {
                var mock = new Mock<PriceRuleCountry>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PriceRuleCountry Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleCountry's Associated Objects
                // PriceRuleCountry's Related Objects
                return mock.Object;
            };
            For<IPriceRuleCountry>().Use(() => mockFuncPriceRuleCountry());
            For<PriceRuleCountry>().Use(() => mockFuncPriceRuleCountry());
            Func<PriceRuleFranchise> mockFuncPriceRuleFranchise = () =>
            {
                var mock = new Mock<PriceRuleFranchise>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PriceRuleFranchise Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleFranchise's Associated Objects
                // PriceRuleFranchise's Related Objects
                return mock.Object;
            };
            For<IPriceRuleFranchise>().Use(() => mockFuncPriceRuleFranchise());
            For<PriceRuleFranchise>().Use(() => mockFuncPriceRuleFranchise());
            Func<PriceRuleManufacturer> mockFuncPriceRuleManufacturer = () =>
            {
                var mock = new Mock<PriceRuleManufacturer>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PriceRuleManufacturer Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawManufacturers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleManufacturer's Associated Objects
                // PriceRuleManufacturer's Related Objects
                return mock.Object;
            };
            For<IPriceRuleManufacturer>().Use(() => mockFuncPriceRuleManufacturer());
            For<PriceRuleManufacturer>().Use(() => mockFuncPriceRuleManufacturer());
            Func<PriceRuleProduct> mockFuncPriceRuleProduct = () =>
            {
                var mock = new Mock<PriceRuleProduct>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PriceRuleProduct Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleProduct's Associated Objects
                // PriceRuleProduct's Related Objects
                return mock.Object;
            };
            For<IPriceRuleProduct>().Use(() => mockFuncPriceRuleProduct());
            For<PriceRuleProduct>().Use(() => mockFuncPriceRuleProduct());
            Func<PriceRuleProductType> mockFuncPriceRuleProductType = () =>
            {
                var mock = new Mock<PriceRuleProductType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PriceRuleProductType Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawProductTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleProductType's Associated Objects
                // PriceRuleProductType's Related Objects
                return mock.Object;
            };
            For<IPriceRuleProductType>().Use(() => mockFuncPriceRuleProductType());
            For<PriceRuleProductType>().Use(() => mockFuncPriceRuleProductType());
            Func<PriceRuleStore> mockFuncPriceRuleStore = () =>
            {
                var mock = new Mock<PriceRuleStore>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PriceRuleStore Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleStore's Associated Objects
                // PriceRuleStore's Related Objects
                return mock.Object;
            };
            For<IPriceRuleStore>().Use(() => mockFuncPriceRuleStore());
            For<PriceRuleStore>().Use(() => mockFuncPriceRuleStore());
            Func<PriceRuleUserRole> mockFuncPriceRuleUserRole = () =>
            {
                var mock = new Mock<PriceRuleUserRole>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PriceRuleUserRole Properties
                // Dynamic Linking
                mock.Setup(m => m.PriceRule).Returns(() => mockingSetup.RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.PriceRuleID)?.Object);
                // PriceRuleUserRole's Associated Objects
                // PriceRuleUserRole's Related Objects
                return mock.Object;
            };
            For<IPriceRuleUserRole>().Use(() => mockFuncPriceRuleUserRole());
            For<PriceRuleUserRole>().Use(() => mockFuncPriceRuleUserRole());
            Func<PriceRuleVendor> mockFuncPriceRuleVendor = () =>
            {
                var mock = new Mock<PriceRuleVendor>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PriceRuleVendor Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPriceRules?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PriceRuleVendor's Associated Objects
                // PriceRuleVendor's Related Objects
                return mock.Object;
            };
            For<IPriceRuleVendor>().Use(() => mockFuncPriceRuleVendor());
            For<PriceRuleVendor>().Use(() => mockFuncPriceRuleVendor());
        }
    }
}
