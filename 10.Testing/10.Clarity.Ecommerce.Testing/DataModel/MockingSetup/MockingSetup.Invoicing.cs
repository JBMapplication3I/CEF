// <autogenerated>
// <copyright file="Invoicing.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Invoicing section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoInvoicing { private get; set; }

        // Enable the tables specifically on run
        public bool DoSalesInvoiceTable { private get; set; }
        public bool DoSalesInvoiceContactTable { private get; set; }
        public bool DoSalesInvoiceEventTable { private get; set; }
        public bool DoSalesInvoiceEventTypeTable { private get; set; }
        public bool DoSalesInvoiceFileTable { private get; set; }
        public bool DoSalesInvoiceItemTable { private get; set; }
        public bool DoSalesInvoiceItemTargetTable { private get; set; }
        public bool DoSalesInvoiceStateTable { private get; set; }
        public bool DoSalesInvoiceStatusTable { private get; set; }
        public bool DoSalesInvoiceTypeTable { private get; set; }
        public bool DoSalesOrderSalesInvoiceTable { private get; set; }

        // Dirty Checking
        public bool SalesInvoiceDirty { private get; set; }
        public bool SalesInvoiceContactDirty { private get; set; }
        public bool SalesInvoiceEventDirty { private get; set; }
        public bool SalesInvoiceEventTypeDirty { private get; set; }
        public bool SalesInvoiceFileDirty { private get; set; }
        public bool SalesInvoiceItemDirty { private get; set; }
        public bool SalesInvoiceItemTargetDirty { private get; set; }
        public bool SalesInvoiceStateDirty { private get; set; }
        public bool SalesInvoiceStatusDirty { private get; set; }
        public bool SalesInvoiceTypeDirty { private get; set; }
        public bool SalesOrderSalesInvoiceDirty { private get; set; }

        // Sets
        public Mock<DbSet<SalesInvoice>>? SalesInvoices { get; private set; }
        public Mock<DbSet<SalesInvoiceContact>>? SalesInvoiceContacts { get; private set; }
        public Mock<DbSet<SalesInvoiceEvent>>? SalesInvoiceEvents { get; private set; }
        public Mock<DbSet<SalesInvoiceEventType>>? SalesInvoiceEventTypes { get; private set; }
        public Mock<DbSet<SalesInvoiceFile>>? SalesInvoiceFiles { get; private set; }
        public Mock<DbSet<SalesInvoiceItem>>? SalesInvoiceItems { get; private set; }
        public Mock<DbSet<SalesInvoiceItemTarget>>? SalesInvoiceItemTargets { get; private set; }
        public Mock<DbSet<SalesInvoiceState>>? SalesInvoiceStates { get; private set; }
        public Mock<DbSet<SalesInvoiceStatus>>? SalesInvoiceStatuses { get; private set; }
        public Mock<DbSet<SalesInvoiceType>>? SalesInvoiceTypes { get; private set; }
        public Mock<DbSet<SalesOrderSalesInvoice>>? SalesOrderSalesInvoices { get; private set; }

        // Raw Data
        public List<Mock<SalesInvoice>>? RawSalesInvoices { get; private set; }
        public List<Mock<SalesInvoiceContact>>? RawSalesInvoiceContacts { get; private set; }
        public List<Mock<SalesInvoiceEvent>>? RawSalesInvoiceEvents { get; private set; }
        public List<Mock<SalesInvoiceEventType>>? RawSalesInvoiceEventTypes { get; private set; }
        public List<Mock<SalesInvoiceFile>>? RawSalesInvoiceFiles { get; private set; }
        public List<Mock<SalesInvoiceItem>>? RawSalesInvoiceItems { get; private set; }
        public List<Mock<SalesInvoiceItemTarget>>? RawSalesInvoiceItemTargets { get; private set; }
        public List<Mock<SalesInvoiceState>>? RawSalesInvoiceStates { get; private set; }
        public List<Mock<SalesInvoiceStatus>>? RawSalesInvoiceStatuses { get; private set; }
        public List<Mock<SalesInvoiceType>>? RawSalesInvoiceTypes { get; private set; }
        public List<Mock<SalesOrderSalesInvoice>>? RawSalesOrderSalesInvoices { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksInvoicingAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoInvoicing || (DoSalesInvoiceTable && (!dirtyOnly || SalesInvoiceDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesInvoices == null) { throw new InvalidOperationException("Raw SalesInvoices was null"); }
                    await InitializeMockSetFromListAsync(SalesInvoices, RawSalesInvoices).ConfigureAwait(false);
                    context.Setup(m => m.SalesInvoices).Returns(() => SalesInvoices?.Object!);
                    context.Setup(m => m.Set<SalesInvoice>()).Returns(() => SalesInvoices?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoInvoicing || (DoSalesInvoiceContactTable && (!dirtyOnly || SalesInvoiceContactDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesInvoiceContacts == null) { throw new InvalidOperationException("Raw SalesInvoiceContacts was null"); }
                    await InitializeMockSetFromListAsync(SalesInvoiceContacts, RawSalesInvoiceContacts).ConfigureAwait(false);
                    context.Setup(m => m.SalesInvoiceContacts).Returns(() => SalesInvoiceContacts?.Object!);
                    context.Setup(m => m.Set<SalesInvoiceContact>()).Returns(() => SalesInvoiceContacts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoInvoicing || (DoSalesInvoiceEventTable && (!dirtyOnly || SalesInvoiceEventDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesInvoiceEvents == null) { throw new InvalidOperationException("Raw SalesInvoiceEvents was null"); }
                    await InitializeMockSetFromListAsync(SalesInvoiceEvents, RawSalesInvoiceEvents).ConfigureAwait(false);
                    context.Setup(m => m.SalesInvoiceEvents).Returns(() => SalesInvoiceEvents?.Object!);
                    context.Setup(m => m.Set<SalesInvoiceEvent>()).Returns(() => SalesInvoiceEvents?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoInvoicing || (DoSalesInvoiceEventTypeTable && (!dirtyOnly || SalesInvoiceEventTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesInvoiceEventTypes == null) { throw new InvalidOperationException("Raw SalesInvoiceEventTypes was null"); }
                    await InitializeMockSetFromListAsync(SalesInvoiceEventTypes, RawSalesInvoiceEventTypes).ConfigureAwait(false);
                    context.Setup(m => m.SalesInvoiceEventTypes).Returns(() => SalesInvoiceEventTypes?.Object!);
                    context.Setup(m => m.Set<SalesInvoiceEventType>()).Returns(() => SalesInvoiceEventTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoInvoicing || (DoSalesInvoiceFileTable && (!dirtyOnly || SalesInvoiceFileDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesInvoiceFiles == null) { throw new InvalidOperationException("Raw SalesInvoiceFiles was null"); }
                    await InitializeMockSetFromListAsync(SalesInvoiceFiles, RawSalesInvoiceFiles).ConfigureAwait(false);
                    context.Setup(m => m.SalesInvoiceFiles).Returns(() => SalesInvoiceFiles?.Object!);
                    context.Setup(m => m.Set<SalesInvoiceFile>()).Returns(() => SalesInvoiceFiles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoInvoicing || (DoSalesInvoiceItemTable && (!dirtyOnly || SalesInvoiceItemDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesInvoiceItems == null) { throw new InvalidOperationException("Raw SalesInvoiceItems was null"); }
                    await InitializeMockSetFromListAsync(SalesInvoiceItems, RawSalesInvoiceItems).ConfigureAwait(false);
                    context.Setup(m => m.SalesInvoiceItems).Returns(() => SalesInvoiceItems?.Object!);
                    context.Setup(m => m.Set<SalesInvoiceItem>()).Returns(() => SalesInvoiceItems?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoInvoicing || (DoSalesInvoiceItemTargetTable && (!dirtyOnly || SalesInvoiceItemTargetDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesInvoiceItemTargets == null) { throw new InvalidOperationException("Raw SalesInvoiceItemTargets was null"); }
                    await InitializeMockSetFromListAsync(SalesInvoiceItemTargets, RawSalesInvoiceItemTargets).ConfigureAwait(false);
                    context.Setup(m => m.SalesInvoiceItemTargets).Returns(() => SalesInvoiceItemTargets?.Object!);
                    context.Setup(m => m.Set<SalesInvoiceItemTarget>()).Returns(() => SalesInvoiceItemTargets?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoInvoicing || (DoSalesInvoiceStateTable && (!dirtyOnly || SalesInvoiceStateDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesInvoiceStates == null) { throw new InvalidOperationException("Raw SalesInvoiceStates was null"); }
                    await InitializeMockSetFromListAsync(SalesInvoiceStates, RawSalesInvoiceStates).ConfigureAwait(false);
                    context.Setup(m => m.SalesInvoiceStates).Returns(() => SalesInvoiceStates?.Object!);
                    context.Setup(m => m.Set<SalesInvoiceState>()).Returns(() => SalesInvoiceStates?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoInvoicing || (DoSalesInvoiceStatusTable && (!dirtyOnly || SalesInvoiceStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesInvoiceStatuses == null) { throw new InvalidOperationException("Raw SalesInvoiceStatuses was null"); }
                    await InitializeMockSetFromListAsync(SalesInvoiceStatuses, RawSalesInvoiceStatuses).ConfigureAwait(false);
                    context.Setup(m => m.SalesInvoiceStatuses).Returns(() => SalesInvoiceStatuses?.Object!);
                    context.Setup(m => m.Set<SalesInvoiceStatus>()).Returns(() => SalesInvoiceStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoInvoicing || (DoSalesInvoiceTypeTable && (!dirtyOnly || SalesInvoiceTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesInvoiceTypes == null) { throw new InvalidOperationException("Raw SalesInvoiceTypes was null"); }
                    await InitializeMockSetFromListAsync(SalesInvoiceTypes, RawSalesInvoiceTypes).ConfigureAwait(false);
                    context.Setup(m => m.SalesInvoiceTypes).Returns(() => SalesInvoiceTypes?.Object!);
                    context.Setup(m => m.Set<SalesInvoiceType>()).Returns(() => SalesInvoiceTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoInvoicing || (DoSalesOrderSalesInvoiceTable && (!dirtyOnly || SalesOrderSalesInvoiceDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesOrderSalesInvoices == null) { throw new InvalidOperationException("Raw SalesOrderSalesInvoices was null"); }
                    await InitializeMockSetFromListAsync(SalesOrderSalesInvoices, RawSalesOrderSalesInvoices).ConfigureAwait(false);
                    context.Setup(m => m.SalesOrderSalesInvoices).Returns(() => SalesOrderSalesInvoices?.Object!);
                    context.Setup(m => m.Set<SalesOrderSalesInvoice>()).Returns(() => SalesOrderSalesInvoices?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesInvoicesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesInvoice>> data)
        {
            if (!DoAll && !DoInvoicing && !DoSalesInvoiceTable) { return; }
            SalesInvoices ??= new Mock<DbSet<SalesInvoice>>();
            await InitializeMockSetFromListAsync(SalesInvoices, data).ConfigureAwait(false);
            context.Setup(m => m.SalesInvoices).Returns(() => SalesInvoices.Object);
            context.Setup(m => m.Set<SalesInvoice>()).Returns(() => SalesInvoices.Object);
            TableRecordCounts[typeof(SalesInvoice)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesInvoice)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesInvoice)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesInvoiceContactsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesInvoiceContact>> data)
        {
            if (!DoAll && !DoInvoicing && !DoSalesInvoiceContactTable) { return; }
            SalesInvoiceContacts ??= new Mock<DbSet<SalesInvoiceContact>>();
            await InitializeMockSetFromListAsync(SalesInvoiceContacts, data).ConfigureAwait(false);
            context.Setup(m => m.SalesInvoiceContacts).Returns(() => SalesInvoiceContacts.Object);
            context.Setup(m => m.Set<SalesInvoiceContact>()).Returns(() => SalesInvoiceContacts.Object);
            TableRecordCounts[typeof(SalesInvoiceContact)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesInvoiceContact)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesInvoiceContact)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesInvoiceEventsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesInvoiceEvent>> data)
        {
            if (!DoAll && !DoInvoicing && !DoSalesInvoiceEventTable) { return; }
            SalesInvoiceEvents ??= new Mock<DbSet<SalesInvoiceEvent>>();
            await InitializeMockSetFromListAsync(SalesInvoiceEvents, data).ConfigureAwait(false);
            context.Setup(m => m.SalesInvoiceEvents).Returns(() => SalesInvoiceEvents.Object);
            context.Setup(m => m.Set<SalesInvoiceEvent>()).Returns(() => SalesInvoiceEvents.Object);
            TableRecordCounts[typeof(SalesInvoiceEvent)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesInvoiceEvent)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesInvoiceEvent)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesInvoiceEvent)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesInvoiceEventTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesInvoiceEventType>> data)
        {
            if (!DoAll && !DoInvoicing && !DoSalesInvoiceEventTypeTable) { return; }
            SalesInvoiceEventTypes ??= new Mock<DbSet<SalesInvoiceEventType>>();
            await InitializeMockSetFromListAsync(SalesInvoiceEventTypes, data).ConfigureAwait(false);
            context.Setup(m => m.SalesInvoiceEventTypes).Returns(() => SalesInvoiceEventTypes.Object);
            context.Setup(m => m.Set<SalesInvoiceEventType>()).Returns(() => SalesInvoiceEventTypes.Object);
            TableRecordCounts[typeof(SalesInvoiceEventType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesInvoiceEventType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesInvoiceEventType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesInvoiceEventType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesInvoiceEventType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesInvoiceFilesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesInvoiceFile>> data)
        {
            if (!DoAll && !DoInvoicing && !DoSalesInvoiceFileTable) { return; }
            SalesInvoiceFiles ??= new Mock<DbSet<SalesInvoiceFile>>();
            await InitializeMockSetFromListAsync(SalesInvoiceFiles, data).ConfigureAwait(false);
            context.Setup(m => m.SalesInvoiceFiles).Returns(() => SalesInvoiceFiles.Object);
            context.Setup(m => m.Set<SalesInvoiceFile>()).Returns(() => SalesInvoiceFiles.Object);
            TableRecordCounts[typeof(SalesInvoiceFile)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesInvoiceFile)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesInvoiceFile)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesInvoiceFile)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesInvoiceItemsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesInvoiceItem>> data)
        {
            if (!DoAll && !DoInvoicing && !DoSalesInvoiceItemTable) { return; }
            SalesInvoiceItems ??= new Mock<DbSet<SalesInvoiceItem>>();
            await InitializeMockSetFromListAsync(SalesInvoiceItems, data).ConfigureAwait(false);
            context.Setup(m => m.SalesInvoiceItems).Returns(() => SalesInvoiceItems.Object);
            context.Setup(m => m.Set<SalesInvoiceItem>()).Returns(() => SalesInvoiceItems.Object);
            TableRecordCounts[typeof(SalesInvoiceItem)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesInvoiceItem)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesInvoiceItem)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesInvoiceItem)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesInvoiceItemTargetsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesInvoiceItemTarget>> data)
        {
            if (!DoAll && !DoInvoicing && !DoSalesInvoiceItemTargetTable) { return; }
            SalesInvoiceItemTargets ??= new Mock<DbSet<SalesInvoiceItemTarget>>();
            await InitializeMockSetFromListAsync(SalesInvoiceItemTargets, data).ConfigureAwait(false);
            context.Setup(m => m.SalesInvoiceItemTargets).Returns(() => SalesInvoiceItemTargets.Object);
            context.Setup(m => m.Set<SalesInvoiceItemTarget>()).Returns(() => SalesInvoiceItemTargets.Object);
            TableRecordCounts[typeof(SalesInvoiceItemTarget)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesInvoiceItemTarget)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesInvoiceItemTarget)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesInvoiceStatesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesInvoiceState>> data)
        {
            if (!DoAll && !DoInvoicing && !DoSalesInvoiceStateTable) { return; }
            SalesInvoiceStates ??= new Mock<DbSet<SalesInvoiceState>>();
            await InitializeMockSetFromListAsync(SalesInvoiceStates, data).ConfigureAwait(false);
            context.Setup(m => m.SalesInvoiceStates).Returns(() => SalesInvoiceStates.Object);
            context.Setup(m => m.Set<SalesInvoiceState>()).Returns(() => SalesInvoiceStates.Object);
            TableRecordCounts[typeof(SalesInvoiceState)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesInvoiceState)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesInvoiceState)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesInvoiceState)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesInvoiceState)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesInvoiceStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesInvoiceStatus>> data)
        {
            if (!DoAll && !DoInvoicing && !DoSalesInvoiceStatusTable) { return; }
            SalesInvoiceStatuses ??= new Mock<DbSet<SalesInvoiceStatus>>();
            await InitializeMockSetFromListAsync(SalesInvoiceStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.SalesInvoiceStatuses).Returns(() => SalesInvoiceStatuses.Object);
            context.Setup(m => m.Set<SalesInvoiceStatus>()).Returns(() => SalesInvoiceStatuses.Object);
            TableRecordCounts[typeof(SalesInvoiceStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesInvoiceStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesInvoiceStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesInvoiceStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesInvoiceStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesInvoiceTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesInvoiceType>> data)
        {
            if (!DoAll && !DoInvoicing && !DoSalesInvoiceTypeTable) { return; }
            SalesInvoiceTypes ??= new Mock<DbSet<SalesInvoiceType>>();
            await InitializeMockSetFromListAsync(SalesInvoiceTypes, data).ConfigureAwait(false);
            context.Setup(m => m.SalesInvoiceTypes).Returns(() => SalesInvoiceTypes.Object);
            context.Setup(m => m.Set<SalesInvoiceType>()).Returns(() => SalesInvoiceTypes.Object);
            TableRecordCounts[typeof(SalesInvoiceType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesInvoiceType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesInvoiceType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesInvoiceType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesInvoiceType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesOrderSalesInvoicesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesOrderSalesInvoice>> data)
        {
            if (!DoAll && !DoInvoicing && !DoSalesOrderSalesInvoiceTable) { return; }
            SalesOrderSalesInvoices ??= new Mock<DbSet<SalesOrderSalesInvoice>>();
            await InitializeMockSetFromListAsync(SalesOrderSalesInvoices, data).ConfigureAwait(false);
            context.Setup(m => m.SalesOrderSalesInvoices).Returns(() => SalesOrderSalesInvoices.Object);
            context.Setup(m => m.Set<SalesOrderSalesInvoice>()).Returns(() => SalesOrderSalesInvoices.Object);
            TableRecordCounts[typeof(SalesOrderSalesInvoice)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesOrderSalesInvoice)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesOrderSalesInvoice)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy SalesInvoice.</summary>
        /// <returns>The new SalesInvoice.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesInvoice>> CreateADummySalesInvoiceAsync(int id, string? key, string? jsonAttributes = null, DateTime? dueDate = null, decimal subtotalItems = 0m, decimal subtotalShipping = 0m, decimal subtotalTaxes = 0m, decimal subtotalFees = 0m, decimal subtotalHandling = 0m, decimal subtotalDiscounts = 0m, decimal total = 0m, bool? shippingSameAsBilling = null, int? userID = null, int? accountID = null, int statusID = 1, int stateID = 1, int typeID = 1, int? billingContactID = null, int? shippingContactID = null, decimal? balanceDue = null!, int? brandID = null!, int? franchiseID = null!, int? salesGroupID = null!, int? storeID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesInvoice>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ISalesCollectionBase Properties
                mock.Object.DueDate = dueDate;
                mock.Object.SubtotalItems = subtotalItems;
                mock.Object.SubtotalShipping = subtotalShipping;
                mock.Object.SubtotalTaxes = subtotalTaxes;
                mock.Object.SubtotalFees = subtotalFees;
                mock.Object.SubtotalHandling = subtotalHandling;
                mock.Object.SubtotalDiscounts = subtotalDiscounts;
                mock.Object.Total = total;
                mock.Object.ShippingSameAsBilling = shippingSameAsBilling;
                mock.Object.UserID = userID;
                mock.Object.AccountID = accountID;
                mock.Object.StatusID = statusID;
                mock.Object.StateID = stateID;
                mock.Object.TypeID = typeID;
                mock.Object.BillingContactID = billingContactID;
                mock.Object.ShippingContactID = shippingContactID;
                // SalesInvoice Properties
                mock.Object.BalanceDue = balanceDue;
                mock.Object.BrandID = brandID;
                mock.Object.FranchiseID = franchiseID;
                mock.Object.SalesGroupID = salesGroupID;
                mock.Object.StoreID = storeID;
                // Dynamic Linking
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => RawSalesInvoiceFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoiceFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.SalesInvoiceID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => RawSalesInvoiceStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => RawSalesInvoiceStates?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawSalesInvoiceTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => RawSalesInvoiceItems?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoiceItem>());
                mock.Setup(m => m.Discounts).Returns(() => RawAppliedSalesInvoiceDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesInvoiceDiscount>());
                mock.Setup(m => m.Contacts).Returns(() => RawSalesInvoiceContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoiceContact>());
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => RawAccounts == null || mock.Object.AccountID == null ? null : RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => RawContacts == null || mock.Object.BillingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => RawContacts == null || mock.Object.ShippingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
                // SalesInvoice's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.SalesGroup).Returns(() => RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // SalesInvoice's Associated Objects
                mock.Setup(m => m.AssociatedSalesOrders).Returns(() => RawSalesOrderSalesInvoices?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderSalesInvoice>());
                mock.Setup(m => m.RateQuotes).Returns(() => RawRateQuotes?.Where(x => x.Object.SalesInvoiceID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RateQuote>());
                mock.Setup(m => m.SalesEvents).Returns(() => RawSalesInvoiceEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoiceEvent>());
                mock.Setup(m => m.SalesInvoicePayments).Returns(() => RawSalesInvoicePayments?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoicePayment>());
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesInvoiceContact.</summary>
        /// <returns>The new SalesInvoiceContact.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesInvoiceContact>> CreateADummySalesInvoiceContactAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesInvoiceContact>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmAContactRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // SalesInvoiceContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesInvoiceContact's Related Objects
                // SalesInvoiceContact's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesInvoiceEvent.</summary>
        /// <returns>The new SalesInvoiceEvent.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesInvoiceEvent>> CreateADummySalesInvoiceEventAsync(int id, string? key, string? name, string? desc = null, int masterID = 1, long? oldHash = null, long? newHash = null, int? oldStateID = null, int? newStateID = null, int? oldStatusID = null, int? newStatusID = null, int? oldTypeID = null, int? newTypeID = null, string? oldRecordSerialized = null, string? newRecordSerialized = null, int typeID = 1, string? jsonAttributes = null, decimal? newBalanceDue = null!, decimal? oldBalanceDue = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesInvoiceEvent>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // ISalesEventBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.OldHash = oldHash;
                mock.Object.NewHash = newHash;
                mock.Object.OldStateID = oldStateID;
                mock.Object.NewStateID = newStateID;
                mock.Object.OldStatusID = oldStatusID;
                mock.Object.NewStatusID = newStatusID;
                mock.Object.OldTypeID = oldTypeID;
                mock.Object.NewTypeID = newTypeID;
                mock.Object.OldRecordSerialized = oldRecordSerialized;
                mock.Object.NewRecordSerialized = newRecordSerialized;
                // SalesInvoiceEvent Properties
                mock.Object.NewBalanceDue = newBalanceDue;
                mock.Object.OldBalanceDue = oldBalanceDue;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawSalesInvoiceEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // SalesInvoiceEvent's Related Objects
                // SalesInvoiceEvent's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesInvoiceEventType.</summary>
        /// <returns>The new SalesInvoiceEventType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesInvoiceEventType>> CreateADummySalesInvoiceEventTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesInvoiceEventType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesInvoiceEventType Properties
                // Dynamic Linking
                // SalesInvoiceEventType's Related Objects
                // SalesInvoiceEventType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesInvoiceFile.</summary>
        /// <returns>The new SalesInvoiceFile.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesInvoiceFile>> CreateADummySalesInvoiceFileAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesInvoiceFile>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
                // SalesInvoiceFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesInvoiceFile's Related Objects
                // SalesInvoiceFile's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesInvoiceItem.</summary>
        /// <returns>The new SalesInvoiceItem.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesInvoiceItem>> CreateADummySalesInvoiceItemAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, decimal quantity = 1m, decimal? quantityBackOrdered = 0m, decimal? quantityPreSold = 0m, decimal unitCorePrice = 0m, decimal? unitSoldPrice = null, string? sku = null, string? unitOfMeasure = null, int? productID = null, int? userID = null, int masterID = 1, string forceUniqueLineItemKey = null!, int? originalCurrencyID = null!, int? sellingCurrencyID = null!, decimal? unitCorePriceInSellingCurrency = null!, decimal? unitSoldPriceInSellingCurrency = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesInvoiceItem>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // ISalesItemBase Properties
                mock.Object.Quantity = quantity;
                mock.Object.QuantityBackOrdered = quantityBackOrdered;
                mock.Object.QuantityPreSold = quantityPreSold;
                mock.Object.UnitCorePrice = unitCorePrice;
                mock.Object.UnitSoldPrice = unitSoldPrice;
                mock.Object.Sku = sku;
                mock.Object.UnitOfMeasure = unitOfMeasure;
                mock.Object.ProductID = productID;
                mock.Object.UserID = userID;
                mock.Object.MasterID = masterID;
                // SalesInvoiceItem Properties
                mock.Object.ForceUniqueLineItemKey = forceUniqueLineItemKey;
                mock.Object.OriginalCurrencyID = originalCurrencyID;
                mock.Object.SellingCurrencyID = sellingCurrencyID;
                mock.Object.UnitCorePriceInSellingCurrency = unitCorePriceInSellingCurrency;
                mock.Object.UnitSoldPriceInSellingCurrency = unitSoldPriceInSellingCurrency;
                // Dynamic Linking
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.SalesInvoiceItemID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => RawProducts == null || mock.Object.ProductID == null ? null : RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => RawAppliedSalesInvoiceItemDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesInvoiceItemDiscount>());
                mock.Setup(m => m.Targets).Returns(() => RawSalesInvoiceItemTargets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoiceItemTarget>());
                // SalesInvoiceItem's Related Objects
                mock.Setup(m => m.OriginalCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginalCurrencyID)?.Object);
                mock.Setup(m => m.SellingCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SellingCurrencyID)?.Object);
                // SalesInvoiceItem's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesInvoiceItemTarget.</summary>
        /// <returns>The new SalesInvoiceItemTarget.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesInvoiceItemTarget>> CreateADummySalesInvoiceItemTargetAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int? brandProductID = null!, int destinationContactID = 1, int masterID = 1, bool nothingToShip = false, int? originProductInventoryLocationSectionID = null!, int? originStoreProductID = null!, int? originVendorProductID = null!, decimal quantity = 0m, int? selectedRateQuoteID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesInvoiceItemTarget>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // SalesInvoiceItemTarget Properties
                mock.Object.BrandProductID = brandProductID;
                mock.Object.DestinationContactID = destinationContactID;
                mock.Object.MasterID = masterID;
                mock.Object.NothingToShip = nothingToShip;
                mock.Object.OriginProductInventoryLocationSectionID = originProductInventoryLocationSectionID;
                mock.Object.OriginStoreProductID = originStoreProductID;
                mock.Object.OriginVendorProductID = originVendorProductID;
                mock.Object.Quantity = quantity;
                mock.Object.SelectedRateQuoteID = selectedRateQuoteID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // SalesInvoiceItemTarget's Related Objects
                mock.Setup(m => m.BrandProduct).Returns(() => RawBrandProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandProductID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.Master).Returns(() => RawSalesInvoiceItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.OriginProductInventoryLocationSection).Returns(() => RawProductInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginProductInventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginStoreProduct).Returns(() => RawStoreProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginStoreProductID)?.Object);
                mock.Setup(m => m.OriginVendorProduct).Returns(() => RawVendorProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginVendorProductID)?.Object);
                mock.Setup(m => m.SelectedRateQuote).Returns(() => RawRateQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SelectedRateQuoteID)?.Object);
                // SalesInvoiceItemTarget's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesInvoiceState.</summary>
        /// <returns>The new SalesInvoiceState.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesInvoiceState>> CreateADummySalesInvoiceStateAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesInvoiceState>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesInvoiceState Properties
                // Dynamic Linking
                // SalesInvoiceState's Related Objects
                // SalesInvoiceState's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesInvoiceStatus.</summary>
        /// <returns>The new SalesInvoiceStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesInvoiceStatus>> CreateADummySalesInvoiceStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesInvoiceStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesInvoiceStatus Properties
                // Dynamic Linking
                // SalesInvoiceStatus's Related Objects
                // SalesInvoiceStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesInvoiceType.</summary>
        /// <returns>The new SalesInvoiceType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesInvoiceType>> CreateADummySalesInvoiceTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesInvoiceType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesInvoiceType Properties
                // Dynamic Linking
                // SalesInvoiceType's Related Objects
                // SalesInvoiceType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesOrderSalesInvoice.</summary>
        /// <returns>The new SalesOrderSalesInvoice.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesOrderSalesInvoice>> CreateADummySalesOrderSalesInvoiceAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesOrderSalesInvoice>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // SalesOrderSalesInvoice Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // SalesOrderSalesInvoice's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesOrderSalesInvoice's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForInvoicing(MockingSetup mockingSetup)
        {
            Func<SalesInvoice> mockFuncSalesInvoice = () =>
            {
                var mock = new Mock<SalesInvoice>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesInvoice Properties
                // Dynamic Linking
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => mockingSetup.RawSalesInvoiceFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoiceFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.SalesInvoiceID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawSalesInvoiceStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => mockingSetup.RawSalesInvoiceStates?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesInvoiceTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => mockingSetup.RawSalesInvoiceItems?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoiceItem>());
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawAppliedSalesInvoiceDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesInvoiceDiscount>());
                mock.Setup(m => m.Contacts).Returns(() => mockingSetup.RawSalesInvoiceContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoiceContact>());
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => mockingSetup.RawAccounts == null || mock.Object.AccountID == null ? null : mockingSetup.RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.BillingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ShippingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.SalesGroup).Returns(() => mockingSetup.RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // SalesInvoice's Associated Objects
                mock.Setup(m => m.AssociatedSalesOrders).Returns(() => mockingSetup.RawSalesOrderSalesInvoices?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesOrderSalesInvoice>());
                mock.Setup(m => m.RateQuotes).Returns(() => mockingSetup.RawRateQuotes?.Where(x => x.Object.SalesInvoiceID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RateQuote>());
                mock.Setup(m => m.SalesEvents).Returns(() => mockingSetup.RawSalesInvoiceEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoiceEvent>());
                mock.Setup(m => m.SalesInvoicePayments).Returns(() => mockingSetup.RawSalesInvoicePayments?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoicePayment>());
                // SalesInvoice's Related Objects
                return mock.Object;
            };
            For<ISalesInvoice>().Use(() => mockFuncSalesInvoice());
            For<SalesInvoice>().Use(() => mockFuncSalesInvoice());
            Func<SalesInvoiceContact> mockFuncSalesInvoiceContact = () =>
            {
                var mock = new Mock<SalesInvoiceContact>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesInvoiceContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesInvoiceContact's Associated Objects
                // SalesInvoiceContact's Related Objects
                return mock.Object;
            };
            For<ISalesInvoiceContact>().Use(() => mockFuncSalesInvoiceContact());
            For<SalesInvoiceContact>().Use(() => mockFuncSalesInvoiceContact());
            Func<SalesInvoiceEvent> mockFuncSalesInvoiceEvent = () =>
            {
                var mock = new Mock<SalesInvoiceEvent>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesInvoiceEvent Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesInvoiceEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // SalesInvoiceEvent's Associated Objects
                // SalesInvoiceEvent's Related Objects
                return mock.Object;
            };
            For<ISalesInvoiceEvent>().Use(() => mockFuncSalesInvoiceEvent());
            For<SalesInvoiceEvent>().Use(() => mockFuncSalesInvoiceEvent());
            Func<SalesInvoiceEventType> mockFuncSalesInvoiceEventType = () =>
            {
                var mock = new Mock<SalesInvoiceEventType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesInvoiceEventType Properties
                // Dynamic Linking
                // SalesInvoiceEventType's Associated Objects
                // SalesInvoiceEventType's Related Objects
                return mock.Object;
            };
            For<ISalesInvoiceEventType>().Use(() => mockFuncSalesInvoiceEventType());
            For<SalesInvoiceEventType>().Use(() => mockFuncSalesInvoiceEventType());
            Func<SalesInvoiceFile> mockFuncSalesInvoiceFile = () =>
            {
                var mock = new Mock<SalesInvoiceFile>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesInvoiceFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesInvoiceFile's Associated Objects
                // SalesInvoiceFile's Related Objects
                return mock.Object;
            };
            For<ISalesInvoiceFile>().Use(() => mockFuncSalesInvoiceFile());
            For<SalesInvoiceFile>().Use(() => mockFuncSalesInvoiceFile());
            Func<SalesInvoiceItem> mockFuncSalesInvoiceItem = () =>
            {
                var mock = new Mock<SalesInvoiceItem>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesInvoiceItem Properties
                // Dynamic Linking
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.SalesInvoiceItemID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => mockingSetup.RawProducts == null || mock.Object.ProductID == null ? null : mockingSetup.RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawAppliedSalesInvoiceItemDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesInvoiceItemDiscount>());
                mock.Setup(m => m.Targets).Returns(() => mockingSetup.RawSalesInvoiceItemTargets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesInvoiceItemTarget>());
                mock.Setup(m => m.OriginalCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginalCurrencyID)?.Object);
                mock.Setup(m => m.SellingCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SellingCurrencyID)?.Object);
                // SalesInvoiceItem's Associated Objects
                // SalesInvoiceItem's Related Objects
                return mock.Object;
            };
            For<ISalesInvoiceItem>().Use(() => mockFuncSalesInvoiceItem());
            For<SalesInvoiceItem>().Use(() => mockFuncSalesInvoiceItem());
            Func<SalesInvoiceItemTarget> mockFuncSalesInvoiceItemTarget = () =>
            {
                var mock = new Mock<SalesInvoiceItemTarget>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesInvoiceItemTarget Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.BrandProduct).Returns(() => mockingSetup.RawBrandProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandProductID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesInvoiceItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.OriginProductInventoryLocationSection).Returns(() => mockingSetup.RawProductInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginProductInventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginStoreProduct).Returns(() => mockingSetup.RawStoreProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginStoreProductID)?.Object);
                mock.Setup(m => m.OriginVendorProduct).Returns(() => mockingSetup.RawVendorProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginVendorProductID)?.Object);
                mock.Setup(m => m.SelectedRateQuote).Returns(() => mockingSetup.RawRateQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SelectedRateQuoteID)?.Object);
                // SalesInvoiceItemTarget's Associated Objects
                // SalesInvoiceItemTarget's Related Objects
                return mock.Object;
            };
            For<ISalesInvoiceItemTarget>().Use(() => mockFuncSalesInvoiceItemTarget());
            For<SalesInvoiceItemTarget>().Use(() => mockFuncSalesInvoiceItemTarget());
            Func<SalesInvoiceState> mockFuncSalesInvoiceState = () =>
            {
                var mock = new Mock<SalesInvoiceState>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesInvoiceState Properties
                // Dynamic Linking
                // SalesInvoiceState's Associated Objects
                // SalesInvoiceState's Related Objects
                return mock.Object;
            };
            For<ISalesInvoiceState>().Use(() => mockFuncSalesInvoiceState());
            For<SalesInvoiceState>().Use(() => mockFuncSalesInvoiceState());
            Func<SalesInvoiceStatus> mockFuncSalesInvoiceStatus = () =>
            {
                var mock = new Mock<SalesInvoiceStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesInvoiceStatus Properties
                // Dynamic Linking
                // SalesInvoiceStatus's Associated Objects
                // SalesInvoiceStatus's Related Objects
                return mock.Object;
            };
            For<ISalesInvoiceStatus>().Use(() => mockFuncSalesInvoiceStatus());
            For<SalesInvoiceStatus>().Use(() => mockFuncSalesInvoiceStatus());
            Func<SalesInvoiceType> mockFuncSalesInvoiceType = () =>
            {
                var mock = new Mock<SalesInvoiceType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesInvoiceType Properties
                // Dynamic Linking
                // SalesInvoiceType's Associated Objects
                // SalesInvoiceType's Related Objects
                return mock.Object;
            };
            For<ISalesInvoiceType>().Use(() => mockFuncSalesInvoiceType());
            For<SalesInvoiceType>().Use(() => mockFuncSalesInvoiceType());
            Func<SalesOrderSalesInvoice> mockFuncSalesOrderSalesInvoice = () =>
            {
                var mock = new Mock<SalesOrderSalesInvoice>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesOrderSalesInvoice Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesOrderSalesInvoice's Associated Objects
                // SalesOrderSalesInvoice's Related Objects
                return mock.Object;
            };
            For<ISalesOrderSalesInvoice>().Use(() => mockFuncSalesOrderSalesInvoice());
            For<SalesOrderSalesInvoice>().Use(() => mockFuncSalesOrderSalesInvoice());
        }
    }
}
