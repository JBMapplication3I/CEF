// <autogenerated>
// <copyright file="Badges.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Badges section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoBadges { private get; set; }

        // Enable the tables specifically on run
        public bool DoBadgeTable { private get; set; }
        public bool DoBadgeImageTable { private get; set; }
        public bool DoBadgeImageTypeTable { private get; set; }
        public bool DoBadgeTypeTable { private get; set; }

        // Dirty Checking
        public bool BadgeDirty { private get; set; }
        public bool BadgeImageDirty { private get; set; }
        public bool BadgeImageTypeDirty { private get; set; }
        public bool BadgeTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<Badge>>? Badges { get; private set; }
        public Mock<DbSet<BadgeImage>>? BadgeImages { get; private set; }
        public Mock<DbSet<BadgeImageType>>? BadgeImageTypes { get; private set; }
        public Mock<DbSet<BadgeType>>? BadgeTypes { get; private set; }

        // Raw Data
        public List<Mock<Badge>>? RawBadges { get; private set; }
        public List<Mock<BadgeImage>>? RawBadgeImages { get; private set; }
        public List<Mock<BadgeImageType>>? RawBadgeImageTypes { get; private set; }
        public List<Mock<BadgeType>>? RawBadgeTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksBadgesAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoBadges || (DoBadgeTable && (!dirtyOnly || BadgeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBadges == null) { throw new InvalidOperationException("Raw Badges was null"); }
                    await InitializeMockSetFromListAsync(Badges, RawBadges).ConfigureAwait(false);
                    context.Setup(m => m.Badges).Returns(() => Badges?.Object!);
                    context.Setup(m => m.Set<Badge>()).Returns(() => Badges?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBadges || (DoBadgeImageTable && (!dirtyOnly || BadgeImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBadgeImages == null) { throw new InvalidOperationException("Raw BadgeImages was null"); }
                    await InitializeMockSetFromListAsync(BadgeImages, RawBadgeImages).ConfigureAwait(false);
                    context.Setup(m => m.BadgeImages).Returns(() => BadgeImages?.Object!);
                    context.Setup(m => m.Set<BadgeImage>()).Returns(() => BadgeImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBadges || (DoBadgeImageTypeTable && (!dirtyOnly || BadgeImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBadgeImageTypes == null) { throw new InvalidOperationException("Raw BadgeImageTypes was null"); }
                    await InitializeMockSetFromListAsync(BadgeImageTypes, RawBadgeImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.BadgeImageTypes).Returns(() => BadgeImageTypes?.Object!);
                    context.Setup(m => m.Set<BadgeImageType>()).Returns(() => BadgeImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoBadges || (DoBadgeTypeTable && (!dirtyOnly || BadgeTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawBadgeTypes == null) { throw new InvalidOperationException("Raw BadgeTypes was null"); }
                    await InitializeMockSetFromListAsync(BadgeTypes, RawBadgeTypes).ConfigureAwait(false);
                    context.Setup(m => m.BadgeTypes).Returns(() => BadgeTypes?.Object!);
                    context.Setup(m => m.Set<BadgeType>()).Returns(() => BadgeTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBadgesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Badge>> data)
        {
            if (!DoAll && !DoBadges && !DoBadgeTable) { return; }
            Badges ??= new Mock<DbSet<Badge>>();
            await InitializeMockSetFromListAsync(Badges, data).ConfigureAwait(false);
            context.Setup(m => m.Badges).Returns(() => Badges.Object);
            context.Setup(m => m.Set<Badge>()).Returns(() => Badges.Object);
            TableRecordCounts[typeof(Badge)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Badge)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Badge)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Badge)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBadgeImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BadgeImage>> data)
        {
            if (!DoAll && !DoBadges && !DoBadgeImageTable) { return; }
            BadgeImages ??= new Mock<DbSet<BadgeImage>>();
            await InitializeMockSetFromListAsync(BadgeImages, data).ConfigureAwait(false);
            context.Setup(m => m.BadgeImages).Returns(() => BadgeImages.Object);
            context.Setup(m => m.Set<BadgeImage>()).Returns(() => BadgeImages.Object);
            TableRecordCounts[typeof(BadgeImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BadgeImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BadgeImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(BadgeImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBadgeImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BadgeImageType>> data)
        {
            if (!DoAll && !DoBadges && !DoBadgeImageTypeTable) { return; }
            BadgeImageTypes ??= new Mock<DbSet<BadgeImageType>>();
            await InitializeMockSetFromListAsync(BadgeImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.BadgeImageTypes).Returns(() => BadgeImageTypes.Object);
            context.Setup(m => m.Set<BadgeImageType>()).Returns(() => BadgeImageTypes.Object);
            TableRecordCounts[typeof(BadgeImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BadgeImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BadgeImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(BadgeImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(BadgeImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetBadgeTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<BadgeType>> data)
        {
            if (!DoAll && !DoBadges && !DoBadgeTypeTable) { return; }
            BadgeTypes ??= new Mock<DbSet<BadgeType>>();
            await InitializeMockSetFromListAsync(BadgeTypes, data).ConfigureAwait(false);
            context.Setup(m => m.BadgeTypes).Returns(() => BadgeTypes.Object);
            context.Setup(m => m.Set<BadgeType>()).Returns(() => BadgeTypes.Object);
            TableRecordCounts[typeof(BadgeType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(BadgeType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(BadgeType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(BadgeType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(BadgeType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy Badge.</summary>
        /// <returns>The new Badge.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Badge>> CreateADummyBadgeAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Badge>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // Badge Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawBadgeTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawBadgeImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BadgeImage>());
                // Badge's Related Objects
                // Badge's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BadgeImage.</summary>
        /// <returns>The new BadgeImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BadgeImage>> CreateADummyBadgeImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BadgeImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // BadgeImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawBadges?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawBadgeImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // BadgeImage's Related Objects
                // BadgeImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BadgeImageType.</summary>
        /// <returns>The new BadgeImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BadgeImageType>> CreateADummyBadgeImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BadgeImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // BadgeImageType Properties
                // Dynamic Linking
                // BadgeImageType's Related Objects
                // BadgeImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy BadgeType.</summary>
        /// <returns>The new BadgeType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<BadgeType>> CreateADummyBadgeTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<BadgeType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // BadgeType Properties
                // Dynamic Linking
                // BadgeType's Related Objects
                // BadgeType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForBadges(MockingSetup mockingSetup)
        {
            Func<Badge> mockFuncBadge = () =>
            {
                var mock = new Mock<Badge>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Badge Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawBadgeTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawBadgeImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BadgeImage>());
                // Badge's Associated Objects
                // Badge's Related Objects
                return mock.Object;
            };
            For<IBadge>().Use(() => mockFuncBadge());
            For<Badge>().Use(() => mockFuncBadge());
            Func<BadgeImage> mockFuncBadgeImage = () =>
            {
                var mock = new Mock<BadgeImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BadgeImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawBadges?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawBadgeImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // BadgeImage's Associated Objects
                // BadgeImage's Related Objects
                return mock.Object;
            };
            For<IBadgeImage>().Use(() => mockFuncBadgeImage());
            For<BadgeImage>().Use(() => mockFuncBadgeImage());
            Func<BadgeImageType> mockFuncBadgeImageType = () =>
            {
                var mock = new Mock<BadgeImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BadgeImageType Properties
                // Dynamic Linking
                // BadgeImageType's Associated Objects
                // BadgeImageType's Related Objects
                return mock.Object;
            };
            For<IBadgeImageType>().Use(() => mockFuncBadgeImageType());
            For<BadgeImageType>().Use(() => mockFuncBadgeImageType());
            Func<BadgeType> mockFuncBadgeType = () =>
            {
                var mock = new Mock<BadgeType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // BadgeType Properties
                // Dynamic Linking
                // BadgeType's Associated Objects
                // BadgeType's Related Objects
                return mock.Object;
            };
            For<IBadgeType>().Use(() => mockFuncBadgeType());
            For<BadgeType>().Use(() => mockFuncBadgeType());
        }
    }
}
