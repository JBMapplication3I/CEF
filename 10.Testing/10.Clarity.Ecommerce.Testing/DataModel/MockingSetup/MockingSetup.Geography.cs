// <autogenerated>
// <copyright file="Geography.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Geography section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoGeography { private get; set; }

        // Enable the tables specifically on run
        public bool DoAddressTable { private get; set; }
        public bool DoCountryTable { private get; set; }
        public bool DoCountryCurrencyTable { private get; set; }
        public bool DoCountryImageTable { private get; set; }
        public bool DoCountryImageTypeTable { private get; set; }
        public bool DoCountryLanguageTable { private get; set; }
        public bool DoDistrictTable { private get; set; }
        public bool DoDistrictCurrencyTable { private get; set; }
        public bool DoDistrictImageTable { private get; set; }
        public bool DoDistrictImageTypeTable { private get; set; }
        public bool DoDistrictLanguageTable { private get; set; }
        public bool DoHistoricalAddressValidationTable { private get; set; }
        public bool DoPhonePrefixLookupTable { private get; set; }
        public bool DoRegionTable { private get; set; }
        public bool DoRegionCurrencyTable { private get; set; }
        public bool DoRegionImageTable { private get; set; }
        public bool DoRegionImageTypeTable { private get; set; }
        public bool DoRegionLanguageTable { private get; set; }
        public bool DoZipCodeTable { private get; set; }

        // Dirty Checking
        public bool AddressDirty { private get; set; }
        public bool CountryDirty { private get; set; }
        public bool CountryCurrencyDirty { private get; set; }
        public bool CountryImageDirty { private get; set; }
        public bool CountryImageTypeDirty { private get; set; }
        public bool CountryLanguageDirty { private get; set; }
        public bool DistrictDirty { private get; set; }
        public bool DistrictCurrencyDirty { private get; set; }
        public bool DistrictImageDirty { private get; set; }
        public bool DistrictImageTypeDirty { private get; set; }
        public bool DistrictLanguageDirty { private get; set; }
        public bool HistoricalAddressValidationDirty { private get; set; }
        public bool PhonePrefixLookupDirty { private get; set; }
        public bool RegionDirty { private get; set; }
        public bool RegionCurrencyDirty { private get; set; }
        public bool RegionImageDirty { private get; set; }
        public bool RegionImageTypeDirty { private get; set; }
        public bool RegionLanguageDirty { private get; set; }
        public bool ZipCodeDirty { private get; set; }

        // Sets
        public Mock<DbSet<Address>>? Addresses { get; private set; }
        public Mock<DbSet<Country>>? Countries { get; private set; }
        public Mock<DbSet<CountryCurrency>>? CountryCurrencies { get; private set; }
        public Mock<DbSet<CountryImage>>? CountryImages { get; private set; }
        public Mock<DbSet<CountryImageType>>? CountryImageTypes { get; private set; }
        public Mock<DbSet<CountryLanguage>>? CountryLanguages { get; private set; }
        public Mock<DbSet<District>>? Districts { get; private set; }
        public Mock<DbSet<DistrictCurrency>>? DistrictCurrencies { get; private set; }
        public Mock<DbSet<DistrictImage>>? DistrictImages { get; private set; }
        public Mock<DbSet<DistrictImageType>>? DistrictImageTypes { get; private set; }
        public Mock<DbSet<DistrictLanguage>>? DistrictLanguages { get; private set; }
        public Mock<DbSet<HistoricalAddressValidation>>? HistoricalAddressValidations { get; private set; }
        public Mock<DbSet<PhonePrefixLookup>>? PhonePrefixLookups { get; private set; }
        public Mock<DbSet<Region>>? Regions { get; private set; }
        public Mock<DbSet<RegionCurrency>>? RegionCurrencies { get; private set; }
        public Mock<DbSet<RegionImage>>? RegionImages { get; private set; }
        public Mock<DbSet<RegionImageType>>? RegionImageTypes { get; private set; }
        public Mock<DbSet<RegionLanguage>>? RegionLanguages { get; private set; }
        public Mock<DbSet<ZipCode>>? ZipCodes { get; private set; }

        // Raw Data
        public List<Mock<Address>>? RawAddresses { get; private set; }
        public List<Mock<Country>>? RawCountries { get; private set; }
        public List<Mock<CountryCurrency>>? RawCountryCurrencies { get; private set; }
        public List<Mock<CountryImage>>? RawCountryImages { get; private set; }
        public List<Mock<CountryImageType>>? RawCountryImageTypes { get; private set; }
        public List<Mock<CountryLanguage>>? RawCountryLanguages { get; private set; }
        public List<Mock<District>>? RawDistricts { get; private set; }
        public List<Mock<DistrictCurrency>>? RawDistrictCurrencies { get; private set; }
        public List<Mock<DistrictImage>>? RawDistrictImages { get; private set; }
        public List<Mock<DistrictImageType>>? RawDistrictImageTypes { get; private set; }
        public List<Mock<DistrictLanguage>>? RawDistrictLanguages { get; private set; }
        public List<Mock<HistoricalAddressValidation>>? RawHistoricalAddressValidations { get; private set; }
        public List<Mock<PhonePrefixLookup>>? RawPhonePrefixLookups { get; private set; }
        public List<Mock<Region>>? RawRegions { get; private set; }
        public List<Mock<RegionCurrency>>? RawRegionCurrencies { get; private set; }
        public List<Mock<RegionImage>>? RawRegionImages { get; private set; }
        public List<Mock<RegionImageType>>? RawRegionImageTypes { get; private set; }
        public List<Mock<RegionLanguage>>? RawRegionLanguages { get; private set; }
        public List<Mock<ZipCode>>? RawZipCodes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksGeographyAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoGeography || (DoAddressTable && (!dirtyOnly || AddressDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAddresses == null) { throw new InvalidOperationException("Raw Addresses was null"); }
                    await InitializeMockSetFromListAsync(Addresses, RawAddresses).ConfigureAwait(false);
                    context.Setup(m => m.Addresses).Returns(() => Addresses?.Object!);
                    context.Setup(m => m.Set<Address>()).Returns(() => Addresses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoCountryTable && (!dirtyOnly || CountryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCountries == null) { throw new InvalidOperationException("Raw Countries was null"); }
                    await InitializeMockSetFromListAsync(Countries, RawCountries).ConfigureAwait(false);
                    context.Setup(m => m.Countries).Returns(() => Countries?.Object!);
                    context.Setup(m => m.Set<Country>()).Returns(() => Countries?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoCountryCurrencyTable && (!dirtyOnly || CountryCurrencyDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCountryCurrencies == null) { throw new InvalidOperationException("Raw CountryCurrencies was null"); }
                    await InitializeMockSetFromListAsync(CountryCurrencies, RawCountryCurrencies).ConfigureAwait(false);
                    context.Setup(m => m.CountryCurrencies).Returns(() => CountryCurrencies?.Object!);
                    context.Setup(m => m.Set<CountryCurrency>()).Returns(() => CountryCurrencies?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoCountryImageTable && (!dirtyOnly || CountryImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCountryImages == null) { throw new InvalidOperationException("Raw CountryImages was null"); }
                    await InitializeMockSetFromListAsync(CountryImages, RawCountryImages).ConfigureAwait(false);
                    context.Setup(m => m.CountryImages).Returns(() => CountryImages?.Object!);
                    context.Setup(m => m.Set<CountryImage>()).Returns(() => CountryImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoCountryImageTypeTable && (!dirtyOnly || CountryImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCountryImageTypes == null) { throw new InvalidOperationException("Raw CountryImageTypes was null"); }
                    await InitializeMockSetFromListAsync(CountryImageTypes, RawCountryImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.CountryImageTypes).Returns(() => CountryImageTypes?.Object!);
                    context.Setup(m => m.Set<CountryImageType>()).Returns(() => CountryImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoCountryLanguageTable && (!dirtyOnly || CountryLanguageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCountryLanguages == null) { throw new InvalidOperationException("Raw CountryLanguages was null"); }
                    await InitializeMockSetFromListAsync(CountryLanguages, RawCountryLanguages).ConfigureAwait(false);
                    context.Setup(m => m.CountryLanguages).Returns(() => CountryLanguages?.Object!);
                    context.Setup(m => m.Set<CountryLanguage>()).Returns(() => CountryLanguages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoDistrictTable && (!dirtyOnly || DistrictDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDistricts == null) { throw new InvalidOperationException("Raw Districts was null"); }
                    await InitializeMockSetFromListAsync(Districts, RawDistricts).ConfigureAwait(false);
                    context.Setup(m => m.Districts).Returns(() => Districts?.Object!);
                    context.Setup(m => m.Set<District>()).Returns(() => Districts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoDistrictCurrencyTable && (!dirtyOnly || DistrictCurrencyDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDistrictCurrencies == null) { throw new InvalidOperationException("Raw DistrictCurrencies was null"); }
                    await InitializeMockSetFromListAsync(DistrictCurrencies, RawDistrictCurrencies).ConfigureAwait(false);
                    context.Setup(m => m.DistrictCurrencies).Returns(() => DistrictCurrencies?.Object!);
                    context.Setup(m => m.Set<DistrictCurrency>()).Returns(() => DistrictCurrencies?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoDistrictImageTable && (!dirtyOnly || DistrictImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDistrictImages == null) { throw new InvalidOperationException("Raw DistrictImages was null"); }
                    await InitializeMockSetFromListAsync(DistrictImages, RawDistrictImages).ConfigureAwait(false);
                    context.Setup(m => m.DistrictImages).Returns(() => DistrictImages?.Object!);
                    context.Setup(m => m.Set<DistrictImage>()).Returns(() => DistrictImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoDistrictImageTypeTable && (!dirtyOnly || DistrictImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDistrictImageTypes == null) { throw new InvalidOperationException("Raw DistrictImageTypes was null"); }
                    await InitializeMockSetFromListAsync(DistrictImageTypes, RawDistrictImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.DistrictImageTypes).Returns(() => DistrictImageTypes?.Object!);
                    context.Setup(m => m.Set<DistrictImageType>()).Returns(() => DistrictImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoDistrictLanguageTable && (!dirtyOnly || DistrictLanguageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawDistrictLanguages == null) { throw new InvalidOperationException("Raw DistrictLanguages was null"); }
                    await InitializeMockSetFromListAsync(DistrictLanguages, RawDistrictLanguages).ConfigureAwait(false);
                    context.Setup(m => m.DistrictLanguages).Returns(() => DistrictLanguages?.Object!);
                    context.Setup(m => m.Set<DistrictLanguage>()).Returns(() => DistrictLanguages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoHistoricalAddressValidationTable && (!dirtyOnly || HistoricalAddressValidationDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawHistoricalAddressValidations == null) { throw new InvalidOperationException("Raw HistoricalAddressValidations was null"); }
                    await InitializeMockSetFromListAsync(HistoricalAddressValidations, RawHistoricalAddressValidations).ConfigureAwait(false);
                    context.Setup(m => m.HistoricalAddressValidations).Returns(() => HistoricalAddressValidations?.Object!);
                    context.Setup(m => m.Set<HistoricalAddressValidation>()).Returns(() => HistoricalAddressValidations?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoPhonePrefixLookupTable && (!dirtyOnly || PhonePrefixLookupDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPhonePrefixLookups == null) { throw new InvalidOperationException("Raw PhonePrefixLookups was null"); }
                    await InitializeMockSetFromListAsync(PhonePrefixLookups, RawPhonePrefixLookups).ConfigureAwait(false);
                    context.Setup(m => m.PhonePrefixLookups).Returns(() => PhonePrefixLookups?.Object!);
                    context.Setup(m => m.Set<PhonePrefixLookup>()).Returns(() => PhonePrefixLookups?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoRegionTable && (!dirtyOnly || RegionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawRegions == null) { throw new InvalidOperationException("Raw Regions was null"); }
                    await InitializeMockSetFromListAsync(Regions, RawRegions).ConfigureAwait(false);
                    context.Setup(m => m.Regions).Returns(() => Regions?.Object!);
                    context.Setup(m => m.Set<Region>()).Returns(() => Regions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoRegionCurrencyTable && (!dirtyOnly || RegionCurrencyDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawRegionCurrencies == null) { throw new InvalidOperationException("Raw RegionCurrencies was null"); }
                    await InitializeMockSetFromListAsync(RegionCurrencies, RawRegionCurrencies).ConfigureAwait(false);
                    context.Setup(m => m.RegionCurrencies).Returns(() => RegionCurrencies?.Object!);
                    context.Setup(m => m.Set<RegionCurrency>()).Returns(() => RegionCurrencies?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoRegionImageTable && (!dirtyOnly || RegionImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawRegionImages == null) { throw new InvalidOperationException("Raw RegionImages was null"); }
                    await InitializeMockSetFromListAsync(RegionImages, RawRegionImages).ConfigureAwait(false);
                    context.Setup(m => m.RegionImages).Returns(() => RegionImages?.Object!);
                    context.Setup(m => m.Set<RegionImage>()).Returns(() => RegionImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoRegionImageTypeTable && (!dirtyOnly || RegionImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawRegionImageTypes == null) { throw new InvalidOperationException("Raw RegionImageTypes was null"); }
                    await InitializeMockSetFromListAsync(RegionImageTypes, RawRegionImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.RegionImageTypes).Returns(() => RegionImageTypes?.Object!);
                    context.Setup(m => m.Set<RegionImageType>()).Returns(() => RegionImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoRegionLanguageTable && (!dirtyOnly || RegionLanguageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawRegionLanguages == null) { throw new InvalidOperationException("Raw RegionLanguages was null"); }
                    await InitializeMockSetFromListAsync(RegionLanguages, RawRegionLanguages).ConfigureAwait(false);
                    context.Setup(m => m.RegionLanguages).Returns(() => RegionLanguages?.Object!);
                    context.Setup(m => m.Set<RegionLanguage>()).Returns(() => RegionLanguages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoGeography || (DoZipCodeTable && (!dirtyOnly || ZipCodeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawZipCodes == null) { throw new InvalidOperationException("Raw ZipCodes was null"); }
                    await InitializeMockSetFromListAsync(ZipCodes, RawZipCodes).ConfigureAwait(false);
                    context.Setup(m => m.ZipCodes).Returns(() => ZipCodes?.Object!);
                    context.Setup(m => m.Set<ZipCode>()).Returns(() => ZipCodes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAddressesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Address>> data)
        {
            if (!DoAll && !DoGeography && !DoAddressTable) { return; }
            Addresses ??= new Mock<DbSet<Address>>();
            await InitializeMockSetFromListAsync(Addresses, data).ConfigureAwait(false);
            context.Setup(m => m.Addresses).Returns(() => Addresses.Object);
            context.Setup(m => m.Set<Address>()).Returns(() => Addresses.Object);
            TableRecordCounts[typeof(Address)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Address)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Address)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCountriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Country>> data)
        {
            if (!DoAll && !DoGeography && !DoCountryTable) { return; }
            Countries ??= new Mock<DbSet<Country>>();
            await InitializeMockSetFromListAsync(Countries, data).ConfigureAwait(false);
            context.Setup(m => m.Countries).Returns(() => Countries.Object);
            context.Setup(m => m.Set<Country>()).Returns(() => Countries.Object);
            TableRecordCounts[typeof(Country)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Country)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Country)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Country)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCountryCurrenciesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CountryCurrency>> data)
        {
            if (!DoAll && !DoGeography && !DoCountryCurrencyTable) { return; }
            CountryCurrencies ??= new Mock<DbSet<CountryCurrency>>();
            await InitializeMockSetFromListAsync(CountryCurrencies, data).ConfigureAwait(false);
            context.Setup(m => m.CountryCurrencies).Returns(() => CountryCurrencies.Object);
            context.Setup(m => m.Set<CountryCurrency>()).Returns(() => CountryCurrencies.Object);
            TableRecordCounts[typeof(CountryCurrency)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CountryCurrency)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CountryCurrency)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCountryImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CountryImage>> data)
        {
            if (!DoAll && !DoGeography && !DoCountryImageTable) { return; }
            CountryImages ??= new Mock<DbSet<CountryImage>>();
            await InitializeMockSetFromListAsync(CountryImages, data).ConfigureAwait(false);
            context.Setup(m => m.CountryImages).Returns(() => CountryImages.Object);
            context.Setup(m => m.Set<CountryImage>()).Returns(() => CountryImages.Object);
            TableRecordCounts[typeof(CountryImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CountryImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CountryImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CountryImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCountryImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CountryImageType>> data)
        {
            if (!DoAll && !DoGeography && !DoCountryImageTypeTable) { return; }
            CountryImageTypes ??= new Mock<DbSet<CountryImageType>>();
            await InitializeMockSetFromListAsync(CountryImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.CountryImageTypes).Returns(() => CountryImageTypes.Object);
            context.Setup(m => m.Set<CountryImageType>()).Returns(() => CountryImageTypes.Object);
            TableRecordCounts[typeof(CountryImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CountryImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CountryImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CountryImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(CountryImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCountryLanguagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CountryLanguage>> data)
        {
            if (!DoAll && !DoGeography && !DoCountryLanguageTable) { return; }
            CountryLanguages ??= new Mock<DbSet<CountryLanguage>>();
            await InitializeMockSetFromListAsync(CountryLanguages, data).ConfigureAwait(false);
            context.Setup(m => m.CountryLanguages).Returns(() => CountryLanguages.Object);
            context.Setup(m => m.Set<CountryLanguage>()).Returns(() => CountryLanguages.Object);
            TableRecordCounts[typeof(CountryLanguage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CountryLanguage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CountryLanguage)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDistrictsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<District>> data)
        {
            if (!DoAll && !DoGeography && !DoDistrictTable) { return; }
            Districts ??= new Mock<DbSet<District>>();
            await InitializeMockSetFromListAsync(Districts, data).ConfigureAwait(false);
            context.Setup(m => m.Districts).Returns(() => Districts.Object);
            context.Setup(m => m.Set<District>()).Returns(() => Districts.Object);
            TableRecordCounts[typeof(District)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(District)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(District)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(District)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDistrictCurrenciesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DistrictCurrency>> data)
        {
            if (!DoAll && !DoGeography && !DoDistrictCurrencyTable) { return; }
            DistrictCurrencies ??= new Mock<DbSet<DistrictCurrency>>();
            await InitializeMockSetFromListAsync(DistrictCurrencies, data).ConfigureAwait(false);
            context.Setup(m => m.DistrictCurrencies).Returns(() => DistrictCurrencies.Object);
            context.Setup(m => m.Set<DistrictCurrency>()).Returns(() => DistrictCurrencies.Object);
            TableRecordCounts[typeof(DistrictCurrency)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DistrictCurrency)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DistrictCurrency)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDistrictImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DistrictImage>> data)
        {
            if (!DoAll && !DoGeography && !DoDistrictImageTable) { return; }
            DistrictImages ??= new Mock<DbSet<DistrictImage>>();
            await InitializeMockSetFromListAsync(DistrictImages, data).ConfigureAwait(false);
            context.Setup(m => m.DistrictImages).Returns(() => DistrictImages.Object);
            context.Setup(m => m.Set<DistrictImage>()).Returns(() => DistrictImages.Object);
            TableRecordCounts[typeof(DistrictImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DistrictImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DistrictImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(DistrictImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDistrictImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DistrictImageType>> data)
        {
            if (!DoAll && !DoGeography && !DoDistrictImageTypeTable) { return; }
            DistrictImageTypes ??= new Mock<DbSet<DistrictImageType>>();
            await InitializeMockSetFromListAsync(DistrictImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.DistrictImageTypes).Returns(() => DistrictImageTypes.Object);
            context.Setup(m => m.Set<DistrictImageType>()).Returns(() => DistrictImageTypes.Object);
            TableRecordCounts[typeof(DistrictImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DistrictImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DistrictImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(DistrictImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(DistrictImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetDistrictLanguagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<DistrictLanguage>> data)
        {
            if (!DoAll && !DoGeography && !DoDistrictLanguageTable) { return; }
            DistrictLanguages ??= new Mock<DbSet<DistrictLanguage>>();
            await InitializeMockSetFromListAsync(DistrictLanguages, data).ConfigureAwait(false);
            context.Setup(m => m.DistrictLanguages).Returns(() => DistrictLanguages.Object);
            context.Setup(m => m.Set<DistrictLanguage>()).Returns(() => DistrictLanguages.Object);
            TableRecordCounts[typeof(DistrictLanguage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(DistrictLanguage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(DistrictLanguage)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetHistoricalAddressValidationsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<HistoricalAddressValidation>> data)
        {
            if (!DoAll && !DoGeography && !DoHistoricalAddressValidationTable) { return; }
            HistoricalAddressValidations ??= new Mock<DbSet<HistoricalAddressValidation>>();
            await InitializeMockSetFromListAsync(HistoricalAddressValidations, data).ConfigureAwait(false);
            context.Setup(m => m.HistoricalAddressValidations).Returns(() => HistoricalAddressValidations.Object);
            context.Setup(m => m.Set<HistoricalAddressValidation>()).Returns(() => HistoricalAddressValidations.Object);
            TableRecordCounts[typeof(HistoricalAddressValidation)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(HistoricalAddressValidation)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(HistoricalAddressValidation)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPhonePrefixLookupsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PhonePrefixLookup>> data)
        {
            if (!DoAll && !DoGeography && !DoPhonePrefixLookupTable) { return; }
            PhonePrefixLookups ??= new Mock<DbSet<PhonePrefixLookup>>();
            await InitializeMockSetFromListAsync(PhonePrefixLookups, data).ConfigureAwait(false);
            context.Setup(m => m.PhonePrefixLookups).Returns(() => PhonePrefixLookups.Object);
            context.Setup(m => m.Set<PhonePrefixLookup>()).Returns(() => PhonePrefixLookups.Object);
            TableRecordCounts[typeof(PhonePrefixLookup)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PhonePrefixLookup)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PhonePrefixLookup)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetRegionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Region>> data)
        {
            if (!DoAll && !DoGeography && !DoRegionTable) { return; }
            Regions ??= new Mock<DbSet<Region>>();
            await InitializeMockSetFromListAsync(Regions, data).ConfigureAwait(false);
            context.Setup(m => m.Regions).Returns(() => Regions.Object);
            context.Setup(m => m.Set<Region>()).Returns(() => Regions.Object);
            TableRecordCounts[typeof(Region)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Region)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Region)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Region)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetRegionCurrenciesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<RegionCurrency>> data)
        {
            if (!DoAll && !DoGeography && !DoRegionCurrencyTable) { return; }
            RegionCurrencies ??= new Mock<DbSet<RegionCurrency>>();
            await InitializeMockSetFromListAsync(RegionCurrencies, data).ConfigureAwait(false);
            context.Setup(m => m.RegionCurrencies).Returns(() => RegionCurrencies.Object);
            context.Setup(m => m.Set<RegionCurrency>()).Returns(() => RegionCurrencies.Object);
            TableRecordCounts[typeof(RegionCurrency)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(RegionCurrency)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(RegionCurrency)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetRegionImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<RegionImage>> data)
        {
            if (!DoAll && !DoGeography && !DoRegionImageTable) { return; }
            RegionImages ??= new Mock<DbSet<RegionImage>>();
            await InitializeMockSetFromListAsync(RegionImages, data).ConfigureAwait(false);
            context.Setup(m => m.RegionImages).Returns(() => RegionImages.Object);
            context.Setup(m => m.Set<RegionImage>()).Returns(() => RegionImages.Object);
            TableRecordCounts[typeof(RegionImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(RegionImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(RegionImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(RegionImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetRegionImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<RegionImageType>> data)
        {
            if (!DoAll && !DoGeography && !DoRegionImageTypeTable) { return; }
            RegionImageTypes ??= new Mock<DbSet<RegionImageType>>();
            await InitializeMockSetFromListAsync(RegionImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.RegionImageTypes).Returns(() => RegionImageTypes.Object);
            context.Setup(m => m.Set<RegionImageType>()).Returns(() => RegionImageTypes.Object);
            TableRecordCounts[typeof(RegionImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(RegionImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(RegionImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(RegionImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(RegionImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetRegionLanguagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<RegionLanguage>> data)
        {
            if (!DoAll && !DoGeography && !DoRegionLanguageTable) { return; }
            RegionLanguages ??= new Mock<DbSet<RegionLanguage>>();
            await InitializeMockSetFromListAsync(RegionLanguages, data).ConfigureAwait(false);
            context.Setup(m => m.RegionLanguages).Returns(() => RegionLanguages.Object);
            context.Setup(m => m.Set<RegionLanguage>()).Returns(() => RegionLanguages.Object);
            TableRecordCounts[typeof(RegionLanguage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(RegionLanguage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(RegionLanguage)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetZipCodesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<ZipCode>> data)
        {
            if (!DoAll && !DoGeography && !DoZipCodeTable) { return; }
            ZipCodes ??= new Mock<DbSet<ZipCode>>();
            await InitializeMockSetFromListAsync(ZipCodes, data).ConfigureAwait(false);
            context.Setup(m => m.ZipCodes).Returns(() => ZipCodes.Object);
            context.Setup(m => m.Set<ZipCode>()).Returns(() => ZipCodes.Object);
            TableRecordCounts[typeof(ZipCode)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(ZipCode)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(ZipCode)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy Address.</summary>
        /// <returns>The new Address.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Address>> CreateADummyAddressAsync(int id, string? key, string? jsonAttributes = null, string city = null!, string company = null!, string countryCustom = null!, int? countryID = null!, decimal? latitude = null!, decimal? longitude = null!, string postalCode = null!, string regionCustom = null!, int? regionID = null!, string street1 = null!, string street2 = null!, string street3 = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Address>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // Address Properties
                mock.Object.City = city;
                mock.Object.Company = company;
                mock.Object.CountryCustom = countryCustom;
                mock.Object.CountryID = countryID;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.PostalCode = postalCode;
                mock.Object.RegionCustom = regionCustom;
                mock.Object.RegionID = regionID;
                mock.Object.Street1 = street1;
                mock.Object.Street2 = street2;
                mock.Object.Street3 = street3;
                // Dynamic Linking
                // Address's Related Objects
                mock.Setup(m => m.Country).Returns(() => RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.CountryID)?.Object);
                mock.Setup(m => m.Region).Returns(() => RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.RegionID)?.Object);
                // Address's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Country.</summary>
        /// <returns>The new Country.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Country>> CreateADummyCountryAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, string code = null!, string iSO3166Alpha2 = null!, string iSO3166Alpha3 = null!, int? iSO3166Numeric = null!, string phonePrefix = null!, string phoneRegEx = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Country>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // Country Properties
                mock.Object.Code = code;
                mock.Object.ISO3166Alpha2 = iSO3166Alpha2;
                mock.Object.ISO3166Alpha3 = iSO3166Alpha3;
                mock.Object.ISO3166Numeric = iSO3166Numeric;
                mock.Object.PhonePrefix = phonePrefix;
                mock.Object.PhoneRegEx = phoneRegEx;
                // Dynamic Linking
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawCountryImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CountryImage>());
                // Country's Related Objects
                // Country's Associated Objects
                mock.Setup(m => m.Currencies).Returns(() => RawCountryCurrencies?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CountryCurrency>());
                mock.Setup(m => m.Districts).Returns(() => RawDistricts?.Where(x => x.Object.CountryID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<District>());
                mock.Setup(m => m.Languages).Returns(() => RawCountryLanguages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CountryLanguage>());
                mock.Setup(m => m.Regions).Returns(() => RawRegions?.Where(x => x.Object.CountryID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Region>());
                mock.Setup(m => m.Taxes).Returns(() => RawTaxCountries?.Where(x => x.Object.CountryID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<TaxCountry>());
                return mock;
            });
        }

        /// <summary>Creates a dummy CountryCurrency.</summary>
        /// <returns>The new CountryCurrency.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CountryCurrency>> CreateADummyCountryCurrencyAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CountryCurrency>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // CountryCurrency Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // CountryCurrency's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CountryCurrency's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CountryImage.</summary>
        /// <returns>The new CountryImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CountryImage>> CreateADummyCountryImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CountryImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // CountryImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawCountryImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // CountryImage's Related Objects
                // CountryImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CountryImageType.</summary>
        /// <returns>The new CountryImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CountryImageType>> CreateADummyCountryImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CountryImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // CountryImageType Properties
                // Dynamic Linking
                // CountryImageType's Related Objects
                // CountryImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CountryLanguage.</summary>
        /// <returns>The new CountryLanguage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CountryLanguage>> CreateADummyCountryLanguageAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CountryLanguage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // CountryLanguage Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // CountryLanguage's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CountryLanguage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy District.</summary>
        /// <returns>The new District.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<District>> CreateADummyDistrictAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, string code = null!, int countryID = 1, int? regionID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<District>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // District Properties
                mock.Object.Code = code;
                mock.Object.CountryID = countryID;
                mock.Object.RegionID = regionID;
                // Dynamic Linking
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawDistrictImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DistrictImage>());
                // District's Related Objects
                mock.Setup(m => m.Country).Returns(() => RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.CountryID)?.Object);
                mock.Setup(m => m.Region).Returns(() => RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.RegionID)?.Object);
                // District's Associated Objects
                mock.Setup(m => m.Currencies).Returns(() => RawDistrictCurrencies?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DistrictCurrency>());
                mock.Setup(m => m.Languages).Returns(() => RawDistrictLanguages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DistrictLanguage>());
                mock.Setup(m => m.Taxes).Returns(() => RawTaxDistricts?.Where(x => x.Object.DistrictID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<TaxDistrict>());
                return mock;
            });
        }

        /// <summary>Creates a dummy DistrictCurrency.</summary>
        /// <returns>The new DistrictCurrency.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DistrictCurrency>> CreateADummyDistrictCurrencyAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DistrictCurrency>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // DistrictCurrency Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // DistrictCurrency's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawDistricts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DistrictCurrency's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DistrictImage.</summary>
        /// <returns>The new DistrictImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DistrictImage>> CreateADummyDistrictImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DistrictImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // DistrictImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawDistricts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawDistrictImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // DistrictImage's Related Objects
                // DistrictImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DistrictImageType.</summary>
        /// <returns>The new DistrictImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DistrictImageType>> CreateADummyDistrictImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DistrictImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // DistrictImageType Properties
                // Dynamic Linking
                // DistrictImageType's Related Objects
                // DistrictImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy DistrictLanguage.</summary>
        /// <returns>The new DistrictLanguage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<DistrictLanguage>> CreateADummyDistrictLanguageAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<DistrictLanguage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // DistrictLanguage Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // DistrictLanguage's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawDistricts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DistrictLanguage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy HistoricalAddressValidation.</summary>
        /// <returns>The new HistoricalAddressValidation.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<HistoricalAddressValidation>> CreateADummyHistoricalAddressValidationAsync(int id, string? key, string? jsonAttributes = null, long? addressHash = null!, bool isValid = false, DateTime onDate = default, string provider = null!, string serializedRequest = null!, string serializedResponse = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<HistoricalAddressValidation>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // HistoricalAddressValidation Properties
                mock.Object.AddressHash = addressHash;
                mock.Object.IsValid = isValid;
                mock.Object.OnDate = onDate;
                mock.Object.Provider = provider;
                mock.Object.SerializedRequest = serializedRequest;
                mock.Object.SerializedResponse = serializedResponse;
                // Dynamic Linking
                // HistoricalAddressValidation's Related Objects
                // HistoricalAddressValidation's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PhonePrefixLookup.</summary>
        /// <returns>The new PhonePrefixLookup.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PhonePrefixLookup>> CreateADummyPhonePrefixLookupAsync(int id, string? key, string? jsonAttributes = null, string cityName = null!, int? countryID = null!, string prefix = null!, int? regionID = null!, string timeZone = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PhonePrefixLookup>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PhonePrefixLookup Properties
                mock.Object.CityName = cityName;
                mock.Object.CountryID = countryID;
                mock.Object.Prefix = prefix;
                mock.Object.RegionID = regionID;
                mock.Object.TimeZone = timeZone;
                // Dynamic Linking
                // PhonePrefixLookup's Related Objects
                mock.Setup(m => m.Country).Returns(() => RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.CountryID)?.Object);
                mock.Setup(m => m.Region).Returns(() => RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.RegionID)?.Object);
                // PhonePrefixLookup's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Region.</summary>
        /// <returns>The new Region.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Region>> CreateADummyRegionAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, string code = null!, int countryID = 1, string iSO31661 = null!, string iSO31662 = null!, string iSO3166Alpha2 = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Region>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // Region Properties
                mock.Object.Code = code;
                mock.Object.CountryID = countryID;
                mock.Object.ISO31661 = iSO31661;
                mock.Object.ISO31662 = iSO31662;
                mock.Object.ISO3166Alpha2 = iSO3166Alpha2;
                // Dynamic Linking
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawRegionImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RegionImage>());
                // Region's Related Objects
                mock.Setup(m => m.Country).Returns(() => RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.CountryID)?.Object);
                // Region's Associated Objects
                mock.Setup(m => m.Currencies).Returns(() => RawRegionCurrencies?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RegionCurrency>());
                mock.Setup(m => m.Districts).Returns(() => RawDistricts?.Where(x => x.Object.RegionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<District>());
                mock.Setup(m => m.Languages).Returns(() => RawRegionLanguages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RegionLanguage>());
                mock.Setup(m => m.Taxes).Returns(() => RawTaxRegions?.Where(x => x.Object.RegionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<TaxRegion>());
                return mock;
            });
        }

        /// <summary>Creates a dummy RegionCurrency.</summary>
        /// <returns>The new RegionCurrency.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<RegionCurrency>> CreateADummyRegionCurrencyAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<RegionCurrency>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // RegionCurrency Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // RegionCurrency's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // RegionCurrency's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy RegionImage.</summary>
        /// <returns>The new RegionImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<RegionImage>> CreateADummyRegionImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<RegionImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // RegionImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawRegionImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // RegionImage's Related Objects
                // RegionImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy RegionImageType.</summary>
        /// <returns>The new RegionImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<RegionImageType>> CreateADummyRegionImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<RegionImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // RegionImageType Properties
                // Dynamic Linking
                // RegionImageType's Related Objects
                // RegionImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy RegionLanguage.</summary>
        /// <returns>The new RegionLanguage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<RegionLanguage>> CreateADummyRegionLanguageAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<RegionLanguage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // RegionLanguage Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // RegionLanguage's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // RegionLanguage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy ZipCode.</summary>
        /// <returns>The new ZipCode.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<ZipCode>> CreateADummyZipCodeAsync(int id, string? key, string? jsonAttributes = null, string areaCode = null!, string cityName = null!, string cityType = null!, long? countyFIPS = null!, string countyName = null!, string dST = null!, decimal? latitude = null!, decimal? longitude = null!, long? mSACode = null!, string stateAbbreviation = null!, long? stateFIPS = null!, string stateName = null!, string timeZone = null!, long? uTC = null!, string zipCodeValue = null!, string zipType = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<ZipCode>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ZipCode Properties
                mock.Object.AreaCode = areaCode;
                mock.Object.CityName = cityName;
                mock.Object.CityType = cityType;
                mock.Object.CountyFIPS = countyFIPS;
                mock.Object.CountyName = countyName;
                mock.Object.DST = dST;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.MSACode = mSACode;
                mock.Object.StateAbbreviation = stateAbbreviation;
                mock.Object.StateFIPS = stateFIPS;
                mock.Object.StateName = stateName;
                mock.Object.TimeZone = timeZone;
                mock.Object.UTC = uTC;
                mock.Object.ZipCodeValue = zipCodeValue;
                mock.Object.ZipType = zipType;
                // Dynamic Linking
                // ZipCode's Related Objects
                // ZipCode's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForGeography(MockingSetup mockingSetup)
        {
            Func<Address> mockFuncAddress = () =>
            {
                var mock = new Mock<Address>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Address Properties
                // Dynamic Linking
                mock.Setup(m => m.Country).Returns(() => mockingSetup.RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.CountryID)?.Object);
                mock.Setup(m => m.Region).Returns(() => mockingSetup.RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.RegionID)?.Object);
                // Address's Associated Objects
                // Address's Related Objects
                return mock.Object;
            };
            For<IAddress>().Use(() => mockFuncAddress());
            For<Address>().Use(() => mockFuncAddress());
            Func<Country> mockFuncCountry = () =>
            {
                var mock = new Mock<Country>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Country Properties
                // Dynamic Linking
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawCountryImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CountryImage>());
                // Country's Associated Objects
                mock.Setup(m => m.Currencies).Returns(() => mockingSetup.RawCountryCurrencies?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CountryCurrency>());
                mock.Setup(m => m.Districts).Returns(() => mockingSetup.RawDistricts?.Where(x => x.Object.CountryID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<District>());
                mock.Setup(m => m.Languages).Returns(() => mockingSetup.RawCountryLanguages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CountryLanguage>());
                mock.Setup(m => m.Regions).Returns(() => mockingSetup.RawRegions?.Where(x => x.Object.CountryID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Region>());
                mock.Setup(m => m.Taxes).Returns(() => mockingSetup.RawTaxCountries?.Where(x => x.Object.CountryID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<TaxCountry>());
                // Country's Related Objects
                return mock.Object;
            };
            For<ICountry>().Use(() => mockFuncCountry());
            For<Country>().Use(() => mockFuncCountry());
            Func<CountryCurrency> mockFuncCountryCurrency = () =>
            {
                var mock = new Mock<CountryCurrency>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CountryCurrency Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CountryCurrency's Associated Objects
                // CountryCurrency's Related Objects
                return mock.Object;
            };
            For<ICountryCurrency>().Use(() => mockFuncCountryCurrency());
            For<CountryCurrency>().Use(() => mockFuncCountryCurrency());
            Func<CountryImage> mockFuncCountryImage = () =>
            {
                var mock = new Mock<CountryImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CountryImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawCountryImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // CountryImage's Associated Objects
                // CountryImage's Related Objects
                return mock.Object;
            };
            For<ICountryImage>().Use(() => mockFuncCountryImage());
            For<CountryImage>().Use(() => mockFuncCountryImage());
            Func<CountryImageType> mockFuncCountryImageType = () =>
            {
                var mock = new Mock<CountryImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CountryImageType Properties
                // Dynamic Linking
                // CountryImageType's Associated Objects
                // CountryImageType's Related Objects
                return mock.Object;
            };
            For<ICountryImageType>().Use(() => mockFuncCountryImageType());
            For<CountryImageType>().Use(() => mockFuncCountryImageType());
            Func<CountryLanguage> mockFuncCountryLanguage = () =>
            {
                var mock = new Mock<CountryLanguage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CountryLanguage Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CountryLanguage's Associated Objects
                // CountryLanguage's Related Objects
                return mock.Object;
            };
            For<ICountryLanguage>().Use(() => mockFuncCountryLanguage());
            For<CountryLanguage>().Use(() => mockFuncCountryLanguage());
            Func<District> mockFuncDistrict = () =>
            {
                var mock = new Mock<District>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // District Properties
                // Dynamic Linking
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawDistrictImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DistrictImage>());
                mock.Setup(m => m.Country).Returns(() => mockingSetup.RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.CountryID)?.Object);
                mock.Setup(m => m.Region).Returns(() => mockingSetup.RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.RegionID)?.Object);
                // District's Associated Objects
                mock.Setup(m => m.Currencies).Returns(() => mockingSetup.RawDistrictCurrencies?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DistrictCurrency>());
                mock.Setup(m => m.Languages).Returns(() => mockingSetup.RawDistrictLanguages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<DistrictLanguage>());
                mock.Setup(m => m.Taxes).Returns(() => mockingSetup.RawTaxDistricts?.Where(x => x.Object.DistrictID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<TaxDistrict>());
                // District's Related Objects
                return mock.Object;
            };
            For<IDistrict>().Use(() => mockFuncDistrict());
            For<District>().Use(() => mockFuncDistrict());
            Func<DistrictCurrency> mockFuncDistrictCurrency = () =>
            {
                var mock = new Mock<DistrictCurrency>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DistrictCurrency Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDistricts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DistrictCurrency's Associated Objects
                // DistrictCurrency's Related Objects
                return mock.Object;
            };
            For<IDistrictCurrency>().Use(() => mockFuncDistrictCurrency());
            For<DistrictCurrency>().Use(() => mockFuncDistrictCurrency());
            Func<DistrictImage> mockFuncDistrictImage = () =>
            {
                var mock = new Mock<DistrictImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DistrictImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDistricts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawDistrictImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // DistrictImage's Associated Objects
                // DistrictImage's Related Objects
                return mock.Object;
            };
            For<IDistrictImage>().Use(() => mockFuncDistrictImage());
            For<DistrictImage>().Use(() => mockFuncDistrictImage());
            Func<DistrictImageType> mockFuncDistrictImageType = () =>
            {
                var mock = new Mock<DistrictImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DistrictImageType Properties
                // Dynamic Linking
                // DistrictImageType's Associated Objects
                // DistrictImageType's Related Objects
                return mock.Object;
            };
            For<IDistrictImageType>().Use(() => mockFuncDistrictImageType());
            For<DistrictImageType>().Use(() => mockFuncDistrictImageType());
            Func<DistrictLanguage> mockFuncDistrictLanguage = () =>
            {
                var mock = new Mock<DistrictLanguage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // DistrictLanguage Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawDistricts?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // DistrictLanguage's Associated Objects
                // DistrictLanguage's Related Objects
                return mock.Object;
            };
            For<IDistrictLanguage>().Use(() => mockFuncDistrictLanguage());
            For<DistrictLanguage>().Use(() => mockFuncDistrictLanguage());
            Func<HistoricalAddressValidation> mockFuncHistoricalAddressValidation = () =>
            {
                var mock = new Mock<HistoricalAddressValidation>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // HistoricalAddressValidation Properties
                // Dynamic Linking
                // HistoricalAddressValidation's Associated Objects
                // HistoricalAddressValidation's Related Objects
                return mock.Object;
            };
            For<IHistoricalAddressValidation>().Use(() => mockFuncHistoricalAddressValidation());
            For<HistoricalAddressValidation>().Use(() => mockFuncHistoricalAddressValidation());
            Func<PhonePrefixLookup> mockFuncPhonePrefixLookup = () =>
            {
                var mock = new Mock<PhonePrefixLookup>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PhonePrefixLookup Properties
                // Dynamic Linking
                mock.Setup(m => m.Country).Returns(() => mockingSetup.RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.CountryID)?.Object);
                mock.Setup(m => m.Region).Returns(() => mockingSetup.RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.RegionID)?.Object);
                // PhonePrefixLookup's Associated Objects
                // PhonePrefixLookup's Related Objects
                return mock.Object;
            };
            For<IPhonePrefixLookup>().Use(() => mockFuncPhonePrefixLookup());
            For<PhonePrefixLookup>().Use(() => mockFuncPhonePrefixLookup());
            Func<Region> mockFuncRegion = () =>
            {
                var mock = new Mock<Region>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Region Properties
                // Dynamic Linking
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawRegionImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RegionImage>());
                mock.Setup(m => m.Country).Returns(() => mockingSetup.RawCountries?.FirstOrDefault(x => x.Object.ID == mock.Object.CountryID)?.Object);
                // Region's Associated Objects
                mock.Setup(m => m.Currencies).Returns(() => mockingSetup.RawRegionCurrencies?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RegionCurrency>());
                mock.Setup(m => m.Districts).Returns(() => mockingSetup.RawDistricts?.Where(x => x.Object.RegionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<District>());
                mock.Setup(m => m.Languages).Returns(() => mockingSetup.RawRegionLanguages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RegionLanguage>());
                mock.Setup(m => m.Taxes).Returns(() => mockingSetup.RawTaxRegions?.Where(x => x.Object.RegionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<TaxRegion>());
                // Region's Related Objects
                return mock.Object;
            };
            For<IRegion>().Use(() => mockFuncRegion());
            For<Region>().Use(() => mockFuncRegion());
            Func<RegionCurrency> mockFuncRegionCurrency = () =>
            {
                var mock = new Mock<RegionCurrency>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // RegionCurrency Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // RegionCurrency's Associated Objects
                // RegionCurrency's Related Objects
                return mock.Object;
            };
            For<IRegionCurrency>().Use(() => mockFuncRegionCurrency());
            For<RegionCurrency>().Use(() => mockFuncRegionCurrency());
            Func<RegionImage> mockFuncRegionImage = () =>
            {
                var mock = new Mock<RegionImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // RegionImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawRegionImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // RegionImage's Associated Objects
                // RegionImage's Related Objects
                return mock.Object;
            };
            For<IRegionImage>().Use(() => mockFuncRegionImage());
            For<RegionImage>().Use(() => mockFuncRegionImage());
            Func<RegionImageType> mockFuncRegionImageType = () =>
            {
                var mock = new Mock<RegionImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // RegionImageType Properties
                // Dynamic Linking
                // RegionImageType's Associated Objects
                // RegionImageType's Related Objects
                return mock.Object;
            };
            For<IRegionImageType>().Use(() => mockFuncRegionImageType());
            For<RegionImageType>().Use(() => mockFuncRegionImageType());
            Func<RegionLanguage> mockFuncRegionLanguage = () =>
            {
                var mock = new Mock<RegionLanguage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // RegionLanguage Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawLanguages?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // RegionLanguage's Associated Objects
                // RegionLanguage's Related Objects
                return mock.Object;
            };
            For<IRegionLanguage>().Use(() => mockFuncRegionLanguage());
            For<RegionLanguage>().Use(() => mockFuncRegionLanguage());
            Func<ZipCode> mockFuncZipCode = () =>
            {
                var mock = new Mock<ZipCode>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // ZipCode Properties
                // Dynamic Linking
                // ZipCode's Associated Objects
                // ZipCode's Related Objects
                return mock.Object;
            };
            For<IZipCode>().Use(() => mockFuncZipCode());
            For<ZipCode>().Use(() => mockFuncZipCode());
        }
    }
}
