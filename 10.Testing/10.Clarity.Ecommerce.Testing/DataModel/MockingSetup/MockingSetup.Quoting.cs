// <autogenerated>
// <copyright file="Quoting.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Quoting section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoQuoting { private get; set; }

        // Enable the tables specifically on run
        public bool DoSalesQuoteTable { private get; set; }
        public bool DoSalesQuoteCategoryTable { private get; set; }
        public bool DoSalesQuoteContactTable { private get; set; }
        public bool DoSalesQuoteEventTable { private get; set; }
        public bool DoSalesQuoteEventTypeTable { private get; set; }
        public bool DoSalesQuoteFileTable { private get; set; }
        public bool DoSalesQuoteItemTable { private get; set; }
        public bool DoSalesQuoteItemTargetTable { private get; set; }
        public bool DoSalesQuoteSalesOrderTable { private get; set; }
        public bool DoSalesQuoteStateTable { private get; set; }
        public bool DoSalesQuoteStatusTable { private get; set; }
        public bool DoSalesQuoteTypeTable { private get; set; }

        // Dirty Checking
        public bool SalesQuoteDirty { private get; set; }
        public bool SalesQuoteCategoryDirty { private get; set; }
        public bool SalesQuoteContactDirty { private get; set; }
        public bool SalesQuoteEventDirty { private get; set; }
        public bool SalesQuoteEventTypeDirty { private get; set; }
        public bool SalesQuoteFileDirty { private get; set; }
        public bool SalesQuoteItemDirty { private get; set; }
        public bool SalesQuoteItemTargetDirty { private get; set; }
        public bool SalesQuoteSalesOrderDirty { private get; set; }
        public bool SalesQuoteStateDirty { private get; set; }
        public bool SalesQuoteStatusDirty { private get; set; }
        public bool SalesQuoteTypeDirty { private get; set; }

        // Sets
        public Mock<DbSet<SalesQuote>>? SalesQuotes { get; private set; }
        public Mock<DbSet<SalesQuoteCategory>>? SalesQuoteCategories { get; private set; }
        public Mock<DbSet<SalesQuoteContact>>? SalesQuoteContacts { get; private set; }
        public Mock<DbSet<SalesQuoteEvent>>? SalesQuoteEvents { get; private set; }
        public Mock<DbSet<SalesQuoteEventType>>? SalesQuoteEventTypes { get; private set; }
        public Mock<DbSet<SalesQuoteFile>>? SalesQuoteFiles { get; private set; }
        public Mock<DbSet<SalesQuoteItem>>? SalesQuoteItems { get; private set; }
        public Mock<DbSet<SalesQuoteItemTarget>>? SalesQuoteItemTargets { get; private set; }
        public Mock<DbSet<SalesQuoteSalesOrder>>? SalesQuoteSalesOrders { get; private set; }
        public Mock<DbSet<SalesQuoteState>>? SalesQuoteStates { get; private set; }
        public Mock<DbSet<SalesQuoteStatus>>? SalesQuoteStatuses { get; private set; }
        public Mock<DbSet<SalesQuoteType>>? SalesQuoteTypes { get; private set; }

        // Raw Data
        public List<Mock<SalesQuote>>? RawSalesQuotes { get; private set; }
        public List<Mock<SalesQuoteCategory>>? RawSalesQuoteCategories { get; private set; }
        public List<Mock<SalesQuoteContact>>? RawSalesQuoteContacts { get; private set; }
        public List<Mock<SalesQuoteEvent>>? RawSalesQuoteEvents { get; private set; }
        public List<Mock<SalesQuoteEventType>>? RawSalesQuoteEventTypes { get; private set; }
        public List<Mock<SalesQuoteFile>>? RawSalesQuoteFiles { get; private set; }
        public List<Mock<SalesQuoteItem>>? RawSalesQuoteItems { get; private set; }
        public List<Mock<SalesQuoteItemTarget>>? RawSalesQuoteItemTargets { get; private set; }
        public List<Mock<SalesQuoteSalesOrder>>? RawSalesQuoteSalesOrders { get; private set; }
        public List<Mock<SalesQuoteState>>? RawSalesQuoteStates { get; private set; }
        public List<Mock<SalesQuoteStatus>>? RawSalesQuoteStatuses { get; private set; }
        public List<Mock<SalesQuoteType>>? RawSalesQuoteTypes { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksQuotingAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoQuoting || (DoSalesQuoteTable && (!dirtyOnly || SalesQuoteDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesQuotes == null) { throw new InvalidOperationException("Raw SalesQuotes was null"); }
                    await InitializeMockSetFromListAsync(SalesQuotes, RawSalesQuotes).ConfigureAwait(false);
                    context.Setup(m => m.SalesQuotes).Returns(() => SalesQuotes?.Object!);
                    context.Setup(m => m.Set<SalesQuote>()).Returns(() => SalesQuotes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoQuoting || (DoSalesQuoteCategoryTable && (!dirtyOnly || SalesQuoteCategoryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesQuoteCategories == null) { throw new InvalidOperationException("Raw SalesQuoteCategories was null"); }
                    await InitializeMockSetFromListAsync(SalesQuoteCategories, RawSalesQuoteCategories).ConfigureAwait(false);
                    context.Setup(m => m.SalesQuoteCategories).Returns(() => SalesQuoteCategories?.Object!);
                    context.Setup(m => m.Set<SalesQuoteCategory>()).Returns(() => SalesQuoteCategories?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoQuoting || (DoSalesQuoteContactTable && (!dirtyOnly || SalesQuoteContactDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesQuoteContacts == null) { throw new InvalidOperationException("Raw SalesQuoteContacts was null"); }
                    await InitializeMockSetFromListAsync(SalesQuoteContacts, RawSalesQuoteContacts).ConfigureAwait(false);
                    context.Setup(m => m.SalesQuoteContacts).Returns(() => SalesQuoteContacts?.Object!);
                    context.Setup(m => m.Set<SalesQuoteContact>()).Returns(() => SalesQuoteContacts?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoQuoting || (DoSalesQuoteEventTable && (!dirtyOnly || SalesQuoteEventDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesQuoteEvents == null) { throw new InvalidOperationException("Raw SalesQuoteEvents was null"); }
                    await InitializeMockSetFromListAsync(SalesQuoteEvents, RawSalesQuoteEvents).ConfigureAwait(false);
                    context.Setup(m => m.SalesQuoteEvents).Returns(() => SalesQuoteEvents?.Object!);
                    context.Setup(m => m.Set<SalesQuoteEvent>()).Returns(() => SalesQuoteEvents?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoQuoting || (DoSalesQuoteEventTypeTable && (!dirtyOnly || SalesQuoteEventTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesQuoteEventTypes == null) { throw new InvalidOperationException("Raw SalesQuoteEventTypes was null"); }
                    await InitializeMockSetFromListAsync(SalesQuoteEventTypes, RawSalesQuoteEventTypes).ConfigureAwait(false);
                    context.Setup(m => m.SalesQuoteEventTypes).Returns(() => SalesQuoteEventTypes?.Object!);
                    context.Setup(m => m.Set<SalesQuoteEventType>()).Returns(() => SalesQuoteEventTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoQuoting || (DoSalesQuoteFileTable && (!dirtyOnly || SalesQuoteFileDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesQuoteFiles == null) { throw new InvalidOperationException("Raw SalesQuoteFiles was null"); }
                    await InitializeMockSetFromListAsync(SalesQuoteFiles, RawSalesQuoteFiles).ConfigureAwait(false);
                    context.Setup(m => m.SalesQuoteFiles).Returns(() => SalesQuoteFiles?.Object!);
                    context.Setup(m => m.Set<SalesQuoteFile>()).Returns(() => SalesQuoteFiles?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoQuoting || (DoSalesQuoteItemTable && (!dirtyOnly || SalesQuoteItemDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesQuoteItems == null) { throw new InvalidOperationException("Raw SalesQuoteItems was null"); }
                    await InitializeMockSetFromListAsync(SalesQuoteItems, RawSalesQuoteItems).ConfigureAwait(false);
                    context.Setup(m => m.SalesQuoteItems).Returns(() => SalesQuoteItems?.Object!);
                    context.Setup(m => m.Set<SalesQuoteItem>()).Returns(() => SalesQuoteItems?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoQuoting || (DoSalesQuoteItemTargetTable && (!dirtyOnly || SalesQuoteItemTargetDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesQuoteItemTargets == null) { throw new InvalidOperationException("Raw SalesQuoteItemTargets was null"); }
                    await InitializeMockSetFromListAsync(SalesQuoteItemTargets, RawSalesQuoteItemTargets).ConfigureAwait(false);
                    context.Setup(m => m.SalesQuoteItemTargets).Returns(() => SalesQuoteItemTargets?.Object!);
                    context.Setup(m => m.Set<SalesQuoteItemTarget>()).Returns(() => SalesQuoteItemTargets?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoQuoting || (DoSalesQuoteSalesOrderTable && (!dirtyOnly || SalesQuoteSalesOrderDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesQuoteSalesOrders == null) { throw new InvalidOperationException("Raw SalesQuoteSalesOrders was null"); }
                    await InitializeMockSetFromListAsync(SalesQuoteSalesOrders, RawSalesQuoteSalesOrders).ConfigureAwait(false);
                    context.Setup(m => m.SalesQuoteSalesOrders).Returns(() => SalesQuoteSalesOrders?.Object!);
                    context.Setup(m => m.Set<SalesQuoteSalesOrder>()).Returns(() => SalesQuoteSalesOrders?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoQuoting || (DoSalesQuoteStateTable && (!dirtyOnly || SalesQuoteStateDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesQuoteStates == null) { throw new InvalidOperationException("Raw SalesQuoteStates was null"); }
                    await InitializeMockSetFromListAsync(SalesQuoteStates, RawSalesQuoteStates).ConfigureAwait(false);
                    context.Setup(m => m.SalesQuoteStates).Returns(() => SalesQuoteStates?.Object!);
                    context.Setup(m => m.Set<SalesQuoteState>()).Returns(() => SalesQuoteStates?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoQuoting || (DoSalesQuoteStatusTable && (!dirtyOnly || SalesQuoteStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesQuoteStatuses == null) { throw new InvalidOperationException("Raw SalesQuoteStatuses was null"); }
                    await InitializeMockSetFromListAsync(SalesQuoteStatuses, RawSalesQuoteStatuses).ConfigureAwait(false);
                    context.Setup(m => m.SalesQuoteStatuses).Returns(() => SalesQuoteStatuses?.Object!);
                    context.Setup(m => m.Set<SalesQuoteStatus>()).Returns(() => SalesQuoteStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoQuoting || (DoSalesQuoteTypeTable && (!dirtyOnly || SalesQuoteTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesQuoteTypes == null) { throw new InvalidOperationException("Raw SalesQuoteTypes was null"); }
                    await InitializeMockSetFromListAsync(SalesQuoteTypes, RawSalesQuoteTypes).ConfigureAwait(false);
                    context.Setup(m => m.SalesQuoteTypes).Returns(() => SalesQuoteTypes?.Object!);
                    context.Setup(m => m.Set<SalesQuoteType>()).Returns(() => SalesQuoteTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesQuotesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesQuote>> data)
        {
            if (!DoAll && !DoQuoting && !DoSalesQuoteTable) { return; }
            SalesQuotes ??= new Mock<DbSet<SalesQuote>>();
            await InitializeMockSetFromListAsync(SalesQuotes, data).ConfigureAwait(false);
            context.Setup(m => m.SalesQuotes).Returns(() => SalesQuotes.Object);
            context.Setup(m => m.Set<SalesQuote>()).Returns(() => SalesQuotes.Object);
            TableRecordCounts[typeof(SalesQuote)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesQuote)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesQuote)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesQuoteCategoriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesQuoteCategory>> data)
        {
            if (!DoAll && !DoQuoting && !DoSalesQuoteCategoryTable) { return; }
            SalesQuoteCategories ??= new Mock<DbSet<SalesQuoteCategory>>();
            await InitializeMockSetFromListAsync(SalesQuoteCategories, data).ConfigureAwait(false);
            context.Setup(m => m.SalesQuoteCategories).Returns(() => SalesQuoteCategories.Object);
            context.Setup(m => m.Set<SalesQuoteCategory>()).Returns(() => SalesQuoteCategories.Object);
            TableRecordCounts[typeof(SalesQuoteCategory)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesQuoteCategory)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesQuoteCategory)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesQuoteContactsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesQuoteContact>> data)
        {
            if (!DoAll && !DoQuoting && !DoSalesQuoteContactTable) { return; }
            SalesQuoteContacts ??= new Mock<DbSet<SalesQuoteContact>>();
            await InitializeMockSetFromListAsync(SalesQuoteContacts, data).ConfigureAwait(false);
            context.Setup(m => m.SalesQuoteContacts).Returns(() => SalesQuoteContacts.Object);
            context.Setup(m => m.Set<SalesQuoteContact>()).Returns(() => SalesQuoteContacts.Object);
            TableRecordCounts[typeof(SalesQuoteContact)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesQuoteContact)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesQuoteContact)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesQuoteEventsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesQuoteEvent>> data)
        {
            if (!DoAll && !DoQuoting && !DoSalesQuoteEventTable) { return; }
            SalesQuoteEvents ??= new Mock<DbSet<SalesQuoteEvent>>();
            await InitializeMockSetFromListAsync(SalesQuoteEvents, data).ConfigureAwait(false);
            context.Setup(m => m.SalesQuoteEvents).Returns(() => SalesQuoteEvents.Object);
            context.Setup(m => m.Set<SalesQuoteEvent>()).Returns(() => SalesQuoteEvents.Object);
            TableRecordCounts[typeof(SalesQuoteEvent)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesQuoteEvent)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesQuoteEvent)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesQuoteEvent)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesQuoteEventTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesQuoteEventType>> data)
        {
            if (!DoAll && !DoQuoting && !DoSalesQuoteEventTypeTable) { return; }
            SalesQuoteEventTypes ??= new Mock<DbSet<SalesQuoteEventType>>();
            await InitializeMockSetFromListAsync(SalesQuoteEventTypes, data).ConfigureAwait(false);
            context.Setup(m => m.SalesQuoteEventTypes).Returns(() => SalesQuoteEventTypes.Object);
            context.Setup(m => m.Set<SalesQuoteEventType>()).Returns(() => SalesQuoteEventTypes.Object);
            TableRecordCounts[typeof(SalesQuoteEventType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesQuoteEventType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesQuoteEventType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesQuoteEventType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesQuoteEventType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesQuoteFilesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesQuoteFile>> data)
        {
            if (!DoAll && !DoQuoting && !DoSalesQuoteFileTable) { return; }
            SalesQuoteFiles ??= new Mock<DbSet<SalesQuoteFile>>();
            await InitializeMockSetFromListAsync(SalesQuoteFiles, data).ConfigureAwait(false);
            context.Setup(m => m.SalesQuoteFiles).Returns(() => SalesQuoteFiles.Object);
            context.Setup(m => m.Set<SalesQuoteFile>()).Returns(() => SalesQuoteFiles.Object);
            TableRecordCounts[typeof(SalesQuoteFile)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesQuoteFile)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesQuoteFile)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesQuoteFile)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesQuoteItemsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesQuoteItem>> data)
        {
            if (!DoAll && !DoQuoting && !DoSalesQuoteItemTable) { return; }
            SalesQuoteItems ??= new Mock<DbSet<SalesQuoteItem>>();
            await InitializeMockSetFromListAsync(SalesQuoteItems, data).ConfigureAwait(false);
            context.Setup(m => m.SalesQuoteItems).Returns(() => SalesQuoteItems.Object);
            context.Setup(m => m.Set<SalesQuoteItem>()).Returns(() => SalesQuoteItems.Object);
            TableRecordCounts[typeof(SalesQuoteItem)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesQuoteItem)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesQuoteItem)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesQuoteItem)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesQuoteItemTargetsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesQuoteItemTarget>> data)
        {
            if (!DoAll && !DoQuoting && !DoSalesQuoteItemTargetTable) { return; }
            SalesQuoteItemTargets ??= new Mock<DbSet<SalesQuoteItemTarget>>();
            await InitializeMockSetFromListAsync(SalesQuoteItemTargets, data).ConfigureAwait(false);
            context.Setup(m => m.SalesQuoteItemTargets).Returns(() => SalesQuoteItemTargets.Object);
            context.Setup(m => m.Set<SalesQuoteItemTarget>()).Returns(() => SalesQuoteItemTargets.Object);
            TableRecordCounts[typeof(SalesQuoteItemTarget)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesQuoteItemTarget)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesQuoteItemTarget)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesQuoteSalesOrdersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesQuoteSalesOrder>> data)
        {
            if (!DoAll && !DoQuoting && !DoSalesQuoteSalesOrderTable) { return; }
            SalesQuoteSalesOrders ??= new Mock<DbSet<SalesQuoteSalesOrder>>();
            await InitializeMockSetFromListAsync(SalesQuoteSalesOrders, data).ConfigureAwait(false);
            context.Setup(m => m.SalesQuoteSalesOrders).Returns(() => SalesQuoteSalesOrders.Object);
            context.Setup(m => m.Set<SalesQuoteSalesOrder>()).Returns(() => SalesQuoteSalesOrders.Object);
            TableRecordCounts[typeof(SalesQuoteSalesOrder)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesQuoteSalesOrder)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesQuoteSalesOrder)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesQuoteStatesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesQuoteState>> data)
        {
            if (!DoAll && !DoQuoting && !DoSalesQuoteStateTable) { return; }
            SalesQuoteStates ??= new Mock<DbSet<SalesQuoteState>>();
            await InitializeMockSetFromListAsync(SalesQuoteStates, data).ConfigureAwait(false);
            context.Setup(m => m.SalesQuoteStates).Returns(() => SalesQuoteStates.Object);
            context.Setup(m => m.Set<SalesQuoteState>()).Returns(() => SalesQuoteStates.Object);
            TableRecordCounts[typeof(SalesQuoteState)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesQuoteState)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesQuoteState)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesQuoteState)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesQuoteState)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesQuoteStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesQuoteStatus>> data)
        {
            if (!DoAll && !DoQuoting && !DoSalesQuoteStatusTable) { return; }
            SalesQuoteStatuses ??= new Mock<DbSet<SalesQuoteStatus>>();
            await InitializeMockSetFromListAsync(SalesQuoteStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.SalesQuoteStatuses).Returns(() => SalesQuoteStatuses.Object);
            context.Setup(m => m.Set<SalesQuoteStatus>()).Returns(() => SalesQuoteStatuses.Object);
            TableRecordCounts[typeof(SalesQuoteStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesQuoteStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesQuoteStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesQuoteStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesQuoteStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesQuoteTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesQuoteType>> data)
        {
            if (!DoAll && !DoQuoting && !DoSalesQuoteTypeTable) { return; }
            SalesQuoteTypes ??= new Mock<DbSet<SalesQuoteType>>();
            await InitializeMockSetFromListAsync(SalesQuoteTypes, data).ConfigureAwait(false);
            context.Setup(m => m.SalesQuoteTypes).Returns(() => SalesQuoteTypes.Object);
            context.Setup(m => m.Set<SalesQuoteType>()).Returns(() => SalesQuoteTypes.Object);
            TableRecordCounts[typeof(SalesQuoteType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesQuoteType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesQuoteType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SalesQuoteType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SalesQuoteType)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy SalesQuote.</summary>
        /// <returns>The new SalesQuote.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesQuote>> CreateADummySalesQuoteAsync(int id, string? key, string? jsonAttributes = null, DateTime? dueDate = null, decimal subtotalItems = 0m, decimal subtotalShipping = 0m, decimal subtotalTaxes = 0m, decimal subtotalFees = 0m, decimal subtotalHandling = 0m, decimal subtotalDiscounts = 0m, decimal total = 0m, bool? shippingSameAsBilling = null, int? userID = null, int? accountID = null, int statusID = 1, int stateID = 1, int typeID = 1, int? billingContactID = null, int? shippingContactID = null, int? brandID = null!, int? franchiseID = null!, DateTime? requestedShipDate = null!, int? responseAsStoreID = null!, int? responseAsVendorID = null!, int? salesGroupAsRequestMasterID = null!, int? salesGroupAsRequestSubID = null!, int? salesGroupAsResponseMasterID = null!, int? salesGroupAsResponseSubID = null!, int? storeID = null!, decimal? subtotalDiscountsModifier = null!, int? subtotalDiscountsModifierMode = null!, decimal? subtotalFeesModifier = null!, int? subtotalFeesModifierMode = null!, decimal? subtotalHandlingModifier = null!, int? subtotalHandlingModifierMode = null!, decimal? subtotalShippingModifier = null!, int? subtotalShippingModifierMode = null!, decimal? subtotalTaxesModifier = null!, int? subtotalTaxesModifierMode = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesQuote>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // ISalesCollectionBase Properties
                mock.Object.DueDate = dueDate;
                mock.Object.SubtotalItems = subtotalItems;
                mock.Object.SubtotalShipping = subtotalShipping;
                mock.Object.SubtotalTaxes = subtotalTaxes;
                mock.Object.SubtotalFees = subtotalFees;
                mock.Object.SubtotalHandling = subtotalHandling;
                mock.Object.SubtotalDiscounts = subtotalDiscounts;
                mock.Object.Total = total;
                mock.Object.ShippingSameAsBilling = shippingSameAsBilling;
                mock.Object.UserID = userID;
                mock.Object.AccountID = accountID;
                mock.Object.StatusID = statusID;
                mock.Object.StateID = stateID;
                mock.Object.TypeID = typeID;
                mock.Object.BillingContactID = billingContactID;
                mock.Object.ShippingContactID = shippingContactID;
                // SalesQuote Properties
                mock.Object.BrandID = brandID;
                mock.Object.FranchiseID = franchiseID;
                mock.Object.RequestedShipDate = requestedShipDate;
                mock.Object.ResponseAsStoreID = responseAsStoreID;
                mock.Object.ResponseAsVendorID = responseAsVendorID;
                mock.Object.SalesGroupAsRequestMasterID = salesGroupAsRequestMasterID;
                mock.Object.SalesGroupAsRequestSubID = salesGroupAsRequestSubID;
                mock.Object.SalesGroupAsResponseMasterID = salesGroupAsResponseMasterID;
                mock.Object.SalesGroupAsResponseSubID = salesGroupAsResponseSubID;
                mock.Object.StoreID = storeID;
                mock.Object.SubtotalDiscountsModifier = subtotalDiscountsModifier;
                mock.Object.SubtotalDiscountsModifierMode = subtotalDiscountsModifierMode;
                mock.Object.SubtotalFeesModifier = subtotalFeesModifier;
                mock.Object.SubtotalFeesModifierMode = subtotalFeesModifierMode;
                mock.Object.SubtotalHandlingModifier = subtotalHandlingModifier;
                mock.Object.SubtotalHandlingModifierMode = subtotalHandlingModifierMode;
                mock.Object.SubtotalShippingModifier = subtotalShippingModifier;
                mock.Object.SubtotalShippingModifierMode = subtotalShippingModifierMode;
                mock.Object.SubtotalTaxesModifier = subtotalTaxesModifier;
                mock.Object.SubtotalTaxesModifierMode = subtotalTaxesModifierMode;
                // Dynamic Linking
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => RawSalesQuoteFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.SalesQuoteID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => RawSalesQuoteStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => RawSalesQuoteStates?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawSalesQuoteTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => RawSalesQuoteItems?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteItem>());
                mock.Setup(m => m.Discounts).Returns(() => RawAppliedSalesQuoteDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesQuoteDiscount>());
                mock.Setup(m => m.Contacts).Returns(() => RawSalesQuoteContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteContact>());
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => RawAccounts == null || mock.Object.AccountID == null ? null : RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => RawContacts == null || mock.Object.BillingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => RawContacts == null || mock.Object.ShippingContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
                // SalesQuote's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.ResponseAsStore).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.ResponseAsStoreID)?.Object);
                mock.Setup(m => m.ResponseAsVendor).Returns(() => RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.ResponseAsVendorID)?.Object);
                mock.Setup(m => m.SalesGroupAsRequestMaster).Returns(() => RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupAsRequestMasterID)?.Object);
                mock.Setup(m => m.SalesGroupAsRequestSub).Returns(() => RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupAsRequestSubID)?.Object);
                mock.Setup(m => m.SalesGroupAsResponseMaster).Returns(() => RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupAsResponseMasterID)?.Object);
                mock.Setup(m => m.SalesGroupAsResponseSub).Returns(() => RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupAsResponseSubID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // SalesQuote's Associated Objects
                mock.Setup(m => m.AssociatedSalesOrders).Returns(() => RawSalesQuoteSalesOrders?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteSalesOrder>());
                mock.Setup(m => m.RateQuotes).Returns(() => RawRateQuotes?.Where(x => x.Object.SalesQuoteID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RateQuote>());
                mock.Setup(m => m.SalesEvents).Returns(() => RawSalesQuoteEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteEvent>());
                mock.Setup(m => m.SalesQuoteCategories).Returns(() => RawSalesQuoteCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteCategory>());
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesQuoteCategory.</summary>
        /// <returns>The new SalesQuoteCategory.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesQuoteCategory>> CreateADummySalesQuoteCategoryAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesQuoteCategory>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // SalesQuoteCategory Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // SalesQuoteCategory's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesQuoteCategory's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesQuoteContact.</summary>
        /// <returns>The new SalesQuoteContact.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesQuoteContact>> CreateADummySalesQuoteContactAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesQuoteContact>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IAmAContactRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // SalesQuoteContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesQuoteContact's Related Objects
                // SalesQuoteContact's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesQuoteEvent.</summary>
        /// <returns>The new SalesQuoteEvent.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesQuoteEvent>> CreateADummySalesQuoteEventAsync(int id, string? key, string? name, string? desc = null, int masterID = 1, long? oldHash = null, long? newHash = null, int? oldStateID = null, int? newStateID = null, int? oldStatusID = null, int? newStatusID = null, int? oldTypeID = null, int? newTypeID = null, string? oldRecordSerialized = null, string? newRecordSerialized = null, int typeID = 1, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesQuoteEvent>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // ISalesEventBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.OldHash = oldHash;
                mock.Object.NewHash = newHash;
                mock.Object.OldStateID = oldStateID;
                mock.Object.NewStateID = newStateID;
                mock.Object.OldStatusID = oldStatusID;
                mock.Object.NewStatusID = newStatusID;
                mock.Object.OldTypeID = oldTypeID;
                mock.Object.NewTypeID = newTypeID;
                mock.Object.OldRecordSerialized = oldRecordSerialized;
                mock.Object.NewRecordSerialized = newRecordSerialized;
                // SalesQuoteEvent Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawSalesQuoteEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // SalesQuoteEvent's Related Objects
                // SalesQuoteEvent's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesQuoteEventType.</summary>
        /// <returns>The new SalesQuoteEventType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesQuoteEventType>> CreateADummySalesQuoteEventTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesQuoteEventType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesQuoteEventType Properties
                // Dynamic Linking
                // SalesQuoteEventType's Related Objects
                // SalesQuoteEventType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesQuoteFile.</summary>
        /// <returns>The new SalesQuoteFile.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesQuoteFile>> CreateADummySalesQuoteFileAsync(int id, string? key, string? name, string? desc = null, string? seoKeywords = null, string? seoUrl = null, string? seoMetaData = null, string? seoDescription = null, string? seoPageTitle = null, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int fileAccessTypeID = 1, int? sortOrder = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesQuoteFile>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveSeoBase Properties
                mock.Object.SeoKeywords = seoKeywords;
                mock.Object.SeoUrl = seoUrl;
                mock.Object.SeoMetaData = seoMetaData;
                mock.Object.SeoDescription = seoDescription;
                mock.Object.SeoPageTitle = seoPageTitle;
                // IAmAStoredFileRelationshipTable Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.FileAccessTypeID = fileAccessTypeID;
                mock.Object.SortOrder = sortOrder;
                // SalesQuoteFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesQuoteFile's Related Objects
                // SalesQuoteFile's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesQuoteItem.</summary>
        /// <returns>The new SalesQuoteItem.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesQuoteItem>> CreateADummySalesQuoteItemAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, decimal quantity = 1m, decimal? quantityBackOrdered = 0m, decimal? quantityPreSold = 0m, decimal unitCorePrice = 0m, decimal? unitSoldPrice = null, string? sku = null, string? unitOfMeasure = null, int? productID = null, int? userID = null, int masterID = 1, string forceUniqueLineItemKey = null!, int? originalCurrencyID = null!, int? sellingCurrencyID = null!, decimal? unitCorePriceInSellingCurrency = null!, decimal? unitSoldPriceInSellingCurrency = null!, decimal? unitSoldPriceModifier = null!, int? unitSoldPriceModifierMode = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesQuoteItem>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // ISalesItemBase Properties
                mock.Object.Quantity = quantity;
                mock.Object.QuantityBackOrdered = quantityBackOrdered;
                mock.Object.QuantityPreSold = quantityPreSold;
                mock.Object.UnitCorePrice = unitCorePrice;
                mock.Object.UnitSoldPrice = unitSoldPrice;
                mock.Object.Sku = sku;
                mock.Object.UnitOfMeasure = unitOfMeasure;
                mock.Object.ProductID = productID;
                mock.Object.UserID = userID;
                mock.Object.MasterID = masterID;
                // SalesQuoteItem Properties
                mock.Object.ForceUniqueLineItemKey = forceUniqueLineItemKey;
                mock.Object.OriginalCurrencyID = originalCurrencyID;
                mock.Object.SellingCurrencyID = sellingCurrencyID;
                mock.Object.UnitCorePriceInSellingCurrency = unitCorePriceInSellingCurrency;
                mock.Object.UnitSoldPriceInSellingCurrency = unitSoldPriceInSellingCurrency;
                mock.Object.UnitSoldPriceModifier = unitSoldPriceModifier;
                mock.Object.UnitSoldPriceModifierMode = unitSoldPriceModifierMode;
                // Dynamic Linking
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => RawNotes?.Where(x => x.Object.SalesQuoteItemID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => RawProducts == null || mock.Object.ProductID == null ? null : RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers == null || mock.Object.UserID == null ? null : RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => RawAppliedSalesQuoteItemDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesQuoteItemDiscount>());
                mock.Setup(m => m.Targets).Returns(() => RawSalesQuoteItemTargets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteItemTarget>());
                // SalesQuoteItem's Related Objects
                mock.Setup(m => m.OriginalCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginalCurrencyID)?.Object);
                mock.Setup(m => m.SellingCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SellingCurrencyID)?.Object);
                // SalesQuoteItem's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesQuoteItemTarget.</summary>
        /// <returns>The new SalesQuoteItemTarget.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesQuoteItemTarget>> CreateADummySalesQuoteItemTargetAsync(int id, string? key, int typeID = 1, string? jsonAttributes = null, int? brandProductID = null!, int destinationContactID = 1, int masterID = 1, bool nothingToShip = false, int? originProductInventoryLocationSectionID = null!, int? originStoreProductID = null!, int? originVendorProductID = null!, decimal quantity = 0m, int? selectedRateQuoteID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesQuoteItemTarget>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // SalesQuoteItemTarget Properties
                mock.Object.BrandProductID = brandProductID;
                mock.Object.DestinationContactID = destinationContactID;
                mock.Object.MasterID = masterID;
                mock.Object.NothingToShip = nothingToShip;
                mock.Object.OriginProductInventoryLocationSectionID = originProductInventoryLocationSectionID;
                mock.Object.OriginStoreProductID = originStoreProductID;
                mock.Object.OriginVendorProductID = originVendorProductID;
                mock.Object.Quantity = quantity;
                mock.Object.SelectedRateQuoteID = selectedRateQuoteID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // SalesQuoteItemTarget's Related Objects
                mock.Setup(m => m.BrandProduct).Returns(() => RawBrandProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandProductID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.Master).Returns(() => RawSalesQuoteItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.OriginProductInventoryLocationSection).Returns(() => RawProductInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginProductInventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginStoreProduct).Returns(() => RawStoreProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginStoreProductID)?.Object);
                mock.Setup(m => m.OriginVendorProduct).Returns(() => RawVendorProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginVendorProductID)?.Object);
                mock.Setup(m => m.SelectedRateQuote).Returns(() => RawRateQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SelectedRateQuoteID)?.Object);
                // SalesQuoteItemTarget's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesQuoteSalesOrder.</summary>
        /// <returns>The new SalesQuoteSalesOrder.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesQuoteSalesOrder>> CreateADummySalesQuoteSalesOrderAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesQuoteSalesOrder>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // SalesQuoteSalesOrder Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // SalesQuoteSalesOrder's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesQuoteSalesOrder's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesQuoteState.</summary>
        /// <returns>The new SalesQuoteState.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesQuoteState>> CreateADummySalesQuoteStateAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesQuoteState>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesQuoteState Properties
                // Dynamic Linking
                // SalesQuoteState's Related Objects
                // SalesQuoteState's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesQuoteStatus.</summary>
        /// <returns>The new SalesQuoteStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesQuoteStatus>> CreateADummySalesQuoteStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesQuoteStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesQuoteStatus Properties
                // Dynamic Linking
                // SalesQuoteStatus's Related Objects
                // SalesQuoteStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesQuoteType.</summary>
        /// <returns>The new SalesQuoteType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesQuoteType>> CreateADummySalesQuoteTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesQuoteType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SalesQuoteType Properties
                // Dynamic Linking
                // SalesQuoteType's Related Objects
                // SalesQuoteType's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForQuoting(MockingSetup mockingSetup)
        {
            Func<SalesQuote> mockFuncSalesQuote = () =>
            {
                var mock = new Mock<SalesQuote>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesQuote Properties
                // Dynamic Linking
                // IHaveStoredFilesBase Properties
                mock.Setup(m => m.StoredFiles).Returns(() => mockingSetup.RawSalesQuoteFiles?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteFile>());
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.SalesQuoteID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesCollectionBase<,,,,,> Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawSalesQuoteStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.State).Returns(() => mockingSetup.RawSalesQuoteStates?.FirstOrDefault(x => x.Object.ID == mock.Object.StateID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesQuoteTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.SalesItems).Returns(() => mockingSetup.RawSalesQuoteItems?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteItem>());
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawAppliedSalesQuoteDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesQuoteDiscount>());
                mock.Setup(m => m.Contacts).Returns(() => mockingSetup.RawSalesQuoteContacts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteContact>());
                // ISalesCollectionBase Properties
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Account).Returns(() => mockingSetup.RawAccounts == null || mock.Object.AccountID == null ? null : mockingSetup.RawAccounts.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.BillingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.ShippingContact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ShippingContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ShippingContactID)?.Object);
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Franchise).Returns(() => mockingSetup.RawFranchises?.FirstOrDefault(x => x.Object.ID == mock.Object.FranchiseID)?.Object);
                mock.Setup(m => m.ResponseAsStore).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.ResponseAsStoreID)?.Object);
                mock.Setup(m => m.ResponseAsVendor).Returns(() => mockingSetup.RawVendors?.FirstOrDefault(x => x.Object.ID == mock.Object.ResponseAsVendorID)?.Object);
                mock.Setup(m => m.SalesGroupAsRequestMaster).Returns(() => mockingSetup.RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupAsRequestMasterID)?.Object);
                mock.Setup(m => m.SalesGroupAsRequestSub).Returns(() => mockingSetup.RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupAsRequestSubID)?.Object);
                mock.Setup(m => m.SalesGroupAsResponseMaster).Returns(() => mockingSetup.RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupAsResponseMasterID)?.Object);
                mock.Setup(m => m.SalesGroupAsResponseSub).Returns(() => mockingSetup.RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupAsResponseSubID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // SalesQuote's Associated Objects
                mock.Setup(m => m.AssociatedSalesOrders).Returns(() => mockingSetup.RawSalesQuoteSalesOrders?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteSalesOrder>());
                mock.Setup(m => m.RateQuotes).Returns(() => mockingSetup.RawRateQuotes?.Where(x => x.Object.SalesQuoteID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<RateQuote>());
                mock.Setup(m => m.SalesEvents).Returns(() => mockingSetup.RawSalesQuoteEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteEvent>());
                mock.Setup(m => m.SalesQuoteCategories).Returns(() => mockingSetup.RawSalesQuoteCategories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteCategory>());
                // SalesQuote's Related Objects
                return mock.Object;
            };
            For<ISalesQuote>().Use(() => mockFuncSalesQuote());
            For<SalesQuote>().Use(() => mockFuncSalesQuote());
            Func<SalesQuoteCategory> mockFuncSalesQuoteCategory = () =>
            {
                var mock = new Mock<SalesQuoteCategory>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesQuoteCategory Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesQuoteCategory's Associated Objects
                // SalesQuoteCategory's Related Objects
                return mock.Object;
            };
            For<ISalesQuoteCategory>().Use(() => mockFuncSalesQuoteCategory());
            For<SalesQuoteCategory>().Use(() => mockFuncSalesQuoteCategory());
            Func<SalesQuoteContact> mockFuncSalesQuoteContact = () =>
            {
                var mock = new Mock<SalesQuoteContact>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesQuoteContact Properties
                // Dynamic Linking
                // IAmAContactRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesQuoteContact's Associated Objects
                // SalesQuoteContact's Related Objects
                return mock.Object;
            };
            For<ISalesQuoteContact>().Use(() => mockFuncSalesQuoteContact());
            For<SalesQuoteContact>().Use(() => mockFuncSalesQuoteContact());
            Func<SalesQuoteEvent> mockFuncSalesQuoteEvent = () =>
            {
                var mock = new Mock<SalesQuoteEvent>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesQuoteEvent Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesQuoteEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // ISalesEventBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                // SalesQuoteEvent's Associated Objects
                // SalesQuoteEvent's Related Objects
                return mock.Object;
            };
            For<ISalesQuoteEvent>().Use(() => mockFuncSalesQuoteEvent());
            For<SalesQuoteEvent>().Use(() => mockFuncSalesQuoteEvent());
            Func<SalesQuoteEventType> mockFuncSalesQuoteEventType = () =>
            {
                var mock = new Mock<SalesQuoteEventType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesQuoteEventType Properties
                // Dynamic Linking
                // SalesQuoteEventType's Associated Objects
                // SalesQuoteEventType's Related Objects
                return mock.Object;
            };
            For<ISalesQuoteEventType>().Use(() => mockFuncSalesQuoteEventType());
            For<SalesQuoteEventType>().Use(() => mockFuncSalesQuoteEventType());
            Func<SalesQuoteFile> mockFuncSalesQuoteFile = () =>
            {
                var mock = new Mock<SalesQuoteFile>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesQuoteFile Properties
                // Dynamic Linking
                // IAmAStoredFileRelationshipTable Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawStoredFiles?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesQuoteFile's Associated Objects
                // SalesQuoteFile's Related Objects
                return mock.Object;
            };
            For<ISalesQuoteFile>().Use(() => mockFuncSalesQuoteFile());
            For<SalesQuoteFile>().Use(() => mockFuncSalesQuoteFile());
            Func<SalesQuoteItem> mockFuncSalesQuoteItem = () =>
            {
                var mock = new Mock<SalesQuoteItem>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesQuoteItem Properties
                // Dynamic Linking
                // IHaveNotesBase Properties
                mock.Setup(m => m.Notes).Returns(() => mockingSetup.RawNotes?.Where(x => x.Object.SalesQuoteItemID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Note>());
                // ISalesItemBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Product).Returns(() => mockingSetup.RawProducts == null || mock.Object.ProductID == null ? null : mockingSetup.RawProducts.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers == null || mock.Object.UserID == null ? null : mockingSetup.RawUsers.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Discounts).Returns(() => mockingSetup.RawAppliedSalesQuoteItemDiscounts?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<AppliedSalesQuoteItemDiscount>());
                mock.Setup(m => m.Targets).Returns(() => mockingSetup.RawSalesQuoteItemTargets?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SalesQuoteItemTarget>());
                mock.Setup(m => m.OriginalCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginalCurrencyID)?.Object);
                mock.Setup(m => m.SellingCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.SellingCurrencyID)?.Object);
                // SalesQuoteItem's Associated Objects
                // SalesQuoteItem's Related Objects
                return mock.Object;
            };
            For<ISalesQuoteItem>().Use(() => mockFuncSalesQuoteItem());
            For<SalesQuoteItem>().Use(() => mockFuncSalesQuoteItem());
            Func<SalesQuoteItemTarget> mockFuncSalesQuoteItemTarget = () =>
            {
                var mock = new Mock<SalesQuoteItemTarget>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesQuoteItemTarget Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSalesItemTargetTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                mock.Setup(m => m.BrandProduct).Returns(() => mockingSetup.RawBrandProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandProductID)?.Object);
                mock.Setup(m => m.DestinationContact).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.DestinationContactID)?.Object);
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesQuoteItems?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.OriginProductInventoryLocationSection).Returns(() => mockingSetup.RawProductInventoryLocationSections?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginProductInventoryLocationSectionID)?.Object);
                mock.Setup(m => m.OriginStoreProduct).Returns(() => mockingSetup.RawStoreProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginStoreProductID)?.Object);
                mock.Setup(m => m.OriginVendorProduct).Returns(() => mockingSetup.RawVendorProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.OriginVendorProductID)?.Object);
                mock.Setup(m => m.SelectedRateQuote).Returns(() => mockingSetup.RawRateQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.SelectedRateQuoteID)?.Object);
                // SalesQuoteItemTarget's Associated Objects
                // SalesQuoteItemTarget's Related Objects
                return mock.Object;
            };
            For<ISalesQuoteItemTarget>().Use(() => mockFuncSalesQuoteItemTarget());
            For<SalesQuoteItemTarget>().Use(() => mockFuncSalesQuoteItemTarget());
            Func<SalesQuoteSalesOrder> mockFuncSalesQuoteSalesOrder = () =>
            {
                var mock = new Mock<SalesQuoteSalesOrder>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesQuoteSalesOrder Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesQuotes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesQuoteSalesOrder's Associated Objects
                // SalesQuoteSalesOrder's Related Objects
                return mock.Object;
            };
            For<ISalesQuoteSalesOrder>().Use(() => mockFuncSalesQuoteSalesOrder());
            For<SalesQuoteSalesOrder>().Use(() => mockFuncSalesQuoteSalesOrder());
            Func<SalesQuoteState> mockFuncSalesQuoteState = () =>
            {
                var mock = new Mock<SalesQuoteState>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesQuoteState Properties
                // Dynamic Linking
                // SalesQuoteState's Associated Objects
                // SalesQuoteState's Related Objects
                return mock.Object;
            };
            For<ISalesQuoteState>().Use(() => mockFuncSalesQuoteState());
            For<SalesQuoteState>().Use(() => mockFuncSalesQuoteState());
            Func<SalesQuoteStatus> mockFuncSalesQuoteStatus = () =>
            {
                var mock = new Mock<SalesQuoteStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesQuoteStatus Properties
                // Dynamic Linking
                // SalesQuoteStatus's Associated Objects
                // SalesQuoteStatus's Related Objects
                return mock.Object;
            };
            For<ISalesQuoteStatus>().Use(() => mockFuncSalesQuoteStatus());
            For<SalesQuoteStatus>().Use(() => mockFuncSalesQuoteStatus());
            Func<SalesQuoteType> mockFuncSalesQuoteType = () =>
            {
                var mock = new Mock<SalesQuoteType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesQuoteType Properties
                // Dynamic Linking
                // SalesQuoteType's Associated Objects
                // SalesQuoteType's Related Objects
                return mock.Object;
            };
            For<ISalesQuoteType>().Use(() => mockFuncSalesQuoteType());
            For<SalesQuoteType>().Use(() => mockFuncSalesQuoteType());
        }
    }
}
