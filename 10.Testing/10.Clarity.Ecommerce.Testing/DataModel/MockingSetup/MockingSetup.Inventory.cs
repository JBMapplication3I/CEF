// <autogenerated>
// <copyright file="Inventory.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Inventory section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoInventory { private get; set; }

        // Enable the tables specifically on run
        public bool DoInventoryLocationTable { private get; set; }
        public bool DoInventoryLocationRegionTable { private get; set; }
        public bool DoInventoryLocationSectionTable { private get; set; }
        public bool DoInventoryLocationUserTable { private get; set; }

        // Dirty Checking
        public bool InventoryLocationDirty { private get; set; }
        public bool InventoryLocationRegionDirty { private get; set; }
        public bool InventoryLocationSectionDirty { private get; set; }
        public bool InventoryLocationUserDirty { private get; set; }

        // Sets
        public Mock<DbSet<InventoryLocation>>? InventoryLocations { get; private set; }
        public Mock<DbSet<InventoryLocationRegion>>? InventoryLocationRegions { get; private set; }
        public Mock<DbSet<InventoryLocationSection>>? InventoryLocationSections { get; private set; }
        public Mock<DbSet<InventoryLocationUser>>? InventoryLocationUsers { get; private set; }

        // Raw Data
        public List<Mock<InventoryLocation>>? RawInventoryLocations { get; private set; }
        public List<Mock<InventoryLocationRegion>>? RawInventoryLocationRegions { get; private set; }
        public List<Mock<InventoryLocationSection>>? RawInventoryLocationSections { get; private set; }
        public List<Mock<InventoryLocationUser>>? RawInventoryLocationUsers { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksInventoryAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoInventory || (DoInventoryLocationTable && (!dirtyOnly || InventoryLocationDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawInventoryLocations == null) { throw new InvalidOperationException("Raw InventoryLocations was null"); }
                    await InitializeMockSetFromListAsync(InventoryLocations, RawInventoryLocations).ConfigureAwait(false);
                    context.Setup(m => m.InventoryLocations).Returns(() => InventoryLocations?.Object!);
                    context.Setup(m => m.Set<InventoryLocation>()).Returns(() => InventoryLocations?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoInventory || (DoInventoryLocationRegionTable && (!dirtyOnly || InventoryLocationRegionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawInventoryLocationRegions == null) { throw new InvalidOperationException("Raw InventoryLocationRegions was null"); }
                    await InitializeMockSetFromListAsync(InventoryLocationRegions, RawInventoryLocationRegions).ConfigureAwait(false);
                    context.Setup(m => m.InventoryLocationRegions).Returns(() => InventoryLocationRegions?.Object!);
                    context.Setup(m => m.Set<InventoryLocationRegion>()).Returns(() => InventoryLocationRegions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoInventory || (DoInventoryLocationSectionTable && (!dirtyOnly || InventoryLocationSectionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawInventoryLocationSections == null) { throw new InvalidOperationException("Raw InventoryLocationSections was null"); }
                    await InitializeMockSetFromListAsync(InventoryLocationSections, RawInventoryLocationSections).ConfigureAwait(false);
                    context.Setup(m => m.InventoryLocationSections).Returns(() => InventoryLocationSections?.Object!);
                    context.Setup(m => m.Set<InventoryLocationSection>()).Returns(() => InventoryLocationSections?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoInventory || (DoInventoryLocationUserTable && (!dirtyOnly || InventoryLocationUserDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawInventoryLocationUsers == null) { throw new InvalidOperationException("Raw InventoryLocationUsers was null"); }
                    await InitializeMockSetFromListAsync(InventoryLocationUsers, RawInventoryLocationUsers).ConfigureAwait(false);
                    context.Setup(m => m.InventoryLocationUsers).Returns(() => InventoryLocationUsers?.Object!);
                    context.Setup(m => m.Set<InventoryLocationUser>()).Returns(() => InventoryLocationUsers?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetInventoryLocationsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<InventoryLocation>> data)
        {
            if (!DoAll && !DoInventory && !DoInventoryLocationTable) { return; }
            InventoryLocations ??= new Mock<DbSet<InventoryLocation>>();
            await InitializeMockSetFromListAsync(InventoryLocations, data).ConfigureAwait(false);
            context.Setup(m => m.InventoryLocations).Returns(() => InventoryLocations.Object);
            context.Setup(m => m.Set<InventoryLocation>()).Returns(() => InventoryLocations.Object);
            TableRecordCounts[typeof(InventoryLocation)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(InventoryLocation)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(InventoryLocation)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(InventoryLocation)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetInventoryLocationRegionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<InventoryLocationRegion>> data)
        {
            if (!DoAll && !DoInventory && !DoInventoryLocationRegionTable) { return; }
            InventoryLocationRegions ??= new Mock<DbSet<InventoryLocationRegion>>();
            await InitializeMockSetFromListAsync(InventoryLocationRegions, data).ConfigureAwait(false);
            context.Setup(m => m.InventoryLocationRegions).Returns(() => InventoryLocationRegions.Object);
            context.Setup(m => m.Set<InventoryLocationRegion>()).Returns(() => InventoryLocationRegions.Object);
            TableRecordCounts[typeof(InventoryLocationRegion)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(InventoryLocationRegion)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(InventoryLocationRegion)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetInventoryLocationSectionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<InventoryLocationSection>> data)
        {
            if (!DoAll && !DoInventory && !DoInventoryLocationSectionTable) { return; }
            InventoryLocationSections ??= new Mock<DbSet<InventoryLocationSection>>();
            await InitializeMockSetFromListAsync(InventoryLocationSections, data).ConfigureAwait(false);
            context.Setup(m => m.InventoryLocationSections).Returns(() => InventoryLocationSections.Object);
            context.Setup(m => m.Set<InventoryLocationSection>()).Returns(() => InventoryLocationSections.Object);
            TableRecordCounts[typeof(InventoryLocationSection)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(InventoryLocationSection)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(InventoryLocationSection)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(InventoryLocationSection)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetInventoryLocationUsersAsync(Mock<IClarityEcommerceEntities> context, List<Mock<InventoryLocationUser>> data)
        {
            if (!DoAll && !DoInventory && !DoInventoryLocationUserTable) { return; }
            InventoryLocationUsers ??= new Mock<DbSet<InventoryLocationUser>>();
            await InitializeMockSetFromListAsync(InventoryLocationUsers, data).ConfigureAwait(false);
            context.Setup(m => m.InventoryLocationUsers).Returns(() => InventoryLocationUsers.Object);
            context.Setup(m => m.Set<InventoryLocationUser>()).Returns(() => InventoryLocationUsers.Object);
            TableRecordCounts[typeof(InventoryLocationUser)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(InventoryLocationUser)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(InventoryLocationUser)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy InventoryLocation.</summary>
        /// <returns>The new InventoryLocation.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<InventoryLocation>> CreateADummyInventoryLocationAsync(int id, string? key, string? name, string? desc = null, int? contactID = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<InventoryLocation>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveANullableContactBase Properties
                mock.Object.ContactID = contactID;
                // InventoryLocation Properties
                // Dynamic Linking
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => RawContacts == null || mock.Object.ContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // InventoryLocation's Related Objects
                // InventoryLocation's Associated Objects
                mock.Setup(m => m.Brands).Returns(() => RawBrandInventoryLocations?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandInventoryLocation>());
                mock.Setup(m => m.Franchises).Returns(() => RawFranchiseInventoryLocations?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseInventoryLocation>());
                mock.Setup(m => m.Regions).Returns(() => RawInventoryLocationRegions?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<InventoryLocationRegion>());
                mock.Setup(m => m.Sections).Returns(() => RawInventoryLocationSections?.Where(x => x.Object.InventoryLocationID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<InventoryLocationSection>());
                mock.Setup(m => m.Stores).Returns(() => RawStoreInventoryLocations?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreInventoryLocation>());
                mock.Setup(m => m.Users).Returns(() => RawInventoryLocationUsers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<InventoryLocationUser>());
                return mock;
            });
        }

        /// <summary>Creates a dummy InventoryLocationRegion.</summary>
        /// <returns>The new InventoryLocationRegion.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<InventoryLocationRegion>> CreateADummyInventoryLocationRegionAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<InventoryLocationRegion>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // InventoryLocationRegion Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // InventoryLocationRegion's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // InventoryLocationRegion's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy InventoryLocationSection.</summary>
        /// <returns>The new InventoryLocationSection.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<InventoryLocationSection>> CreateADummyInventoryLocationSectionAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int inventoryLocationID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<InventoryLocationSection>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // InventoryLocationSection Properties
                mock.Object.InventoryLocationID = inventoryLocationID;
                // Dynamic Linking
                // InventoryLocationSection's Related Objects
                mock.Setup(m => m.InventoryLocation).Returns(() => RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.InventoryLocationID)?.Object);
                // InventoryLocationSection's Associated Objects
                mock.Setup(m => m.ProductInventoryLocationSections).Returns(() => RawProductInventoryLocationSections?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductInventoryLocationSection>());
                mock.Setup(m => m.Shipments).Returns(() => RawShipments?.Where(x => x.Object.InventoryLocationSectionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Shipment>());
                return mock;
            });
        }

        /// <summary>Creates a dummy InventoryLocationUser.</summary>
        /// <returns>The new InventoryLocationUser.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<InventoryLocationUser>> CreateADummyInventoryLocationUserAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<InventoryLocationUser>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // InventoryLocationUser Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // InventoryLocationUser's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // InventoryLocationUser's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForInventory(MockingSetup mockingSetup)
        {
            Func<InventoryLocation> mockFuncInventoryLocation = () =>
            {
                var mock = new Mock<InventoryLocation>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // InventoryLocation Properties
                // Dynamic Linking
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // InventoryLocation's Associated Objects
                mock.Setup(m => m.Brands).Returns(() => mockingSetup.RawBrandInventoryLocations?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<BrandInventoryLocation>());
                mock.Setup(m => m.Franchises).Returns(() => mockingSetup.RawFranchiseInventoryLocations?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<FranchiseInventoryLocation>());
                mock.Setup(m => m.Regions).Returns(() => mockingSetup.RawInventoryLocationRegions?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<InventoryLocationRegion>());
                mock.Setup(m => m.Sections).Returns(() => mockingSetup.RawInventoryLocationSections?.Where(x => x.Object.InventoryLocationID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<InventoryLocationSection>());
                mock.Setup(m => m.Stores).Returns(() => mockingSetup.RawStoreInventoryLocations?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreInventoryLocation>());
                mock.Setup(m => m.Users).Returns(() => mockingSetup.RawInventoryLocationUsers?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<InventoryLocationUser>());
                // InventoryLocation's Related Objects
                return mock.Object;
            };
            For<IInventoryLocation>().Use(() => mockFuncInventoryLocation());
            For<InventoryLocation>().Use(() => mockFuncInventoryLocation());
            Func<InventoryLocationRegion> mockFuncInventoryLocationRegion = () =>
            {
                var mock = new Mock<InventoryLocationRegion>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // InventoryLocationRegion Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawRegions?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // InventoryLocationRegion's Associated Objects
                // InventoryLocationRegion's Related Objects
                return mock.Object;
            };
            For<IInventoryLocationRegion>().Use(() => mockFuncInventoryLocationRegion());
            For<InventoryLocationRegion>().Use(() => mockFuncInventoryLocationRegion());
            Func<InventoryLocationSection> mockFuncInventoryLocationSection = () =>
            {
                var mock = new Mock<InventoryLocationSection>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // InventoryLocationSection Properties
                // Dynamic Linking
                mock.Setup(m => m.InventoryLocation).Returns(() => mockingSetup.RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.InventoryLocationID)?.Object);
                // InventoryLocationSection's Associated Objects
                mock.Setup(m => m.ProductInventoryLocationSections).Returns(() => mockingSetup.RawProductInventoryLocationSections?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductInventoryLocationSection>());
                mock.Setup(m => m.Shipments).Returns(() => mockingSetup.RawShipments?.Where(x => x.Object.InventoryLocationSectionID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Shipment>());
                // InventoryLocationSection's Related Objects
                return mock.Object;
            };
            For<IInventoryLocationSection>().Use(() => mockFuncInventoryLocationSection());
            For<InventoryLocationSection>().Use(() => mockFuncInventoryLocationSection());
            Func<InventoryLocationUser> mockFuncInventoryLocationUser = () =>
            {
                var mock = new Mock<InventoryLocationUser>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // InventoryLocationUser Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawInventoryLocations?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // InventoryLocationUser's Associated Objects
                // InventoryLocationUser's Related Objects
                return mock.Object;
            };
            For<IInventoryLocationUser>().Use(() => mockFuncInventoryLocationUser());
            For<InventoryLocationUser>().Use(() => mockFuncInventoryLocationUser());
        }
    }
}
