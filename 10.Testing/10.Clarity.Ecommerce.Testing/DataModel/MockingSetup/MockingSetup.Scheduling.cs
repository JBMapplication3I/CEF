// <autogenerated>
// <copyright file="Scheduling.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Scheduling section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoScheduling { private get; set; }

        // Enable the tables specifically on run
        public bool DoAppointmentTable { private get; set; }
        public bool DoAppointmentStatusTable { private get; set; }
        public bool DoAppointmentTypeTable { private get; set; }
        public bool DoCalendarTable { private get; set; }
        public bool DoCalendarAppointmentTable { private get; set; }

        // Dirty Checking
        public bool AppointmentDirty { private get; set; }
        public bool AppointmentStatusDirty { private get; set; }
        public bool AppointmentTypeDirty { private get; set; }
        public bool CalendarDirty { private get; set; }
        public bool CalendarAppointmentDirty { private get; set; }

        // Sets
        public Mock<DbSet<Appointment>>? Appointments { get; private set; }
        public Mock<DbSet<AppointmentStatus>>? AppointmentStatuses { get; private set; }
        public Mock<DbSet<AppointmentType>>? AppointmentTypes { get; private set; }
        public Mock<DbSet<Calendar>>? Calendars { get; private set; }
        public Mock<DbSet<CalendarAppointment>>? CalendarAppointments { get; private set; }

        // Raw Data
        public List<Mock<Appointment>>? RawAppointments { get; private set; }
        public List<Mock<AppointmentStatus>>? RawAppointmentStatuses { get; private set; }
        public List<Mock<AppointmentType>>? RawAppointmentTypes { get; private set; }
        public List<Mock<Calendar>>? RawCalendars { get; private set; }
        public List<Mock<CalendarAppointment>>? RawCalendarAppointments { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksSchedulingAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoScheduling || (DoAppointmentTable && (!dirtyOnly || AppointmentDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppointments == null) { throw new InvalidOperationException("Raw Appointments was null"); }
                    await InitializeMockSetFromListAsync(Appointments, RawAppointments).ConfigureAwait(false);
                    context.Setup(m => m.Appointments).Returns(() => Appointments?.Object!);
                    context.Setup(m => m.Set<Appointment>()).Returns(() => Appointments?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoScheduling || (DoAppointmentStatusTable && (!dirtyOnly || AppointmentStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppointmentStatuses == null) { throw new InvalidOperationException("Raw AppointmentStatuses was null"); }
                    await InitializeMockSetFromListAsync(AppointmentStatuses, RawAppointmentStatuses).ConfigureAwait(false);
                    context.Setup(m => m.AppointmentStatuses).Returns(() => AppointmentStatuses?.Object!);
                    context.Setup(m => m.Set<AppointmentStatus>()).Returns(() => AppointmentStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoScheduling || (DoAppointmentTypeTable && (!dirtyOnly || AppointmentTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawAppointmentTypes == null) { throw new InvalidOperationException("Raw AppointmentTypes was null"); }
                    await InitializeMockSetFromListAsync(AppointmentTypes, RawAppointmentTypes).ConfigureAwait(false);
                    context.Setup(m => m.AppointmentTypes).Returns(() => AppointmentTypes?.Object!);
                    context.Setup(m => m.Set<AppointmentType>()).Returns(() => AppointmentTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoScheduling || (DoCalendarTable && (!dirtyOnly || CalendarDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCalendars == null) { throw new InvalidOperationException("Raw Calendars was null"); }
                    await InitializeMockSetFromListAsync(Calendars, RawCalendars).ConfigureAwait(false);
                    context.Setup(m => m.Calendars).Returns(() => Calendars?.Object!);
                    context.Setup(m => m.Set<Calendar>()).Returns(() => Calendars?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoScheduling || (DoCalendarAppointmentTable && (!dirtyOnly || CalendarAppointmentDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCalendarAppointments == null) { throw new InvalidOperationException("Raw CalendarAppointments was null"); }
                    await InitializeMockSetFromListAsync(CalendarAppointments, RawCalendarAppointments).ConfigureAwait(false);
                    context.Setup(m => m.CalendarAppointments).Returns(() => CalendarAppointments?.Object!);
                    context.Setup(m => m.Set<CalendarAppointment>()).Returns(() => CalendarAppointments?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppointmentsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Appointment>> data)
        {
            if (!DoAll && !DoScheduling && !DoAppointmentTable) { return; }
            Appointments ??= new Mock<DbSet<Appointment>>();
            await InitializeMockSetFromListAsync(Appointments, data).ConfigureAwait(false);
            context.Setup(m => m.Appointments).Returns(() => Appointments.Object);
            context.Setup(m => m.Set<Appointment>()).Returns(() => Appointments.Object);
            TableRecordCounts[typeof(Appointment)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Appointment)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Appointment)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Appointment)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppointmentStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppointmentStatus>> data)
        {
            if (!DoAll && !DoScheduling && !DoAppointmentStatusTable) { return; }
            AppointmentStatuses ??= new Mock<DbSet<AppointmentStatus>>();
            await InitializeMockSetFromListAsync(AppointmentStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.AppointmentStatuses).Returns(() => AppointmentStatuses.Object);
            context.Setup(m => m.Set<AppointmentStatus>()).Returns(() => AppointmentStatuses.Object);
            TableRecordCounts[typeof(AppointmentStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppointmentStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppointmentStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AppointmentStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AppointmentStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetAppointmentTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<AppointmentType>> data)
        {
            if (!DoAll && !DoScheduling && !DoAppointmentTypeTable) { return; }
            AppointmentTypes ??= new Mock<DbSet<AppointmentType>>();
            await InitializeMockSetFromListAsync(AppointmentTypes, data).ConfigureAwait(false);
            context.Setup(m => m.AppointmentTypes).Returns(() => AppointmentTypes.Object);
            context.Setup(m => m.Set<AppointmentType>()).Returns(() => AppointmentTypes.Object);
            TableRecordCounts[typeof(AppointmentType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(AppointmentType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(AppointmentType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(AppointmentType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(AppointmentType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCalendarsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Calendar>> data)
        {
            if (!DoAll && !DoScheduling && !DoCalendarTable) { return; }
            Calendars ??= new Mock<DbSet<Calendar>>();
            await InitializeMockSetFromListAsync(Calendars, data).ConfigureAwait(false);
            context.Setup(m => m.Calendars).Returns(() => Calendars.Object);
            context.Setup(m => m.Set<Calendar>()).Returns(() => Calendars.Object);
            TableRecordCounts[typeof(Calendar)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Calendar)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Calendar)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCalendarAppointmentsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CalendarAppointment>> data)
        {
            if (!DoAll && !DoScheduling && !DoCalendarAppointmentTable) { return; }
            CalendarAppointments ??= new Mock<DbSet<CalendarAppointment>>();
            await InitializeMockSetFromListAsync(CalendarAppointments, data).ConfigureAwait(false);
            context.Setup(m => m.CalendarAppointments).Returns(() => CalendarAppointments.Object);
            context.Setup(m => m.Set<CalendarAppointment>()).Returns(() => CalendarAppointments.Object);
            TableRecordCounts[typeof(CalendarAppointment)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CalendarAppointment)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CalendarAppointment)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy Appointment.</summary>
        /// <returns>The new Appointment.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Appointment>> CreateADummyAppointmentAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, int statusID = 1, string? jsonAttributes = null, DateTime? appointmentEnd = null!, DateTime? appointmentStart = null!, int? salesOrderID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Appointment>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // Appointment Properties
                mock.Object.AppointmentEnd = appointmentEnd;
                mock.Object.AppointmentStart = appointmentStart;
                mock.Object.SalesOrderID = salesOrderID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawAppointmentTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawAppointmentStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // Appointment's Related Objects
                mock.Setup(m => m.SalesOrder).Returns(() => RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesOrderID)?.Object);
                // Appointment's Associated Objects
                mock.Setup(m => m.Calendars).Returns(() => RawCalendarAppointments?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CalendarAppointment>());
                return mock;
            });
        }

        /// <summary>Creates a dummy AppointmentStatus.</summary>
        /// <returns>The new AppointmentStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppointmentStatus>> CreateADummyAppointmentStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppointmentStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AppointmentStatus Properties
                // Dynamic Linking
                // AppointmentStatus's Related Objects
                // AppointmentStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy AppointmentType.</summary>
        /// <returns>The new AppointmentType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<AppointmentType>> CreateADummyAppointmentTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<AppointmentType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // AppointmentType Properties
                // Dynamic Linking
                // AppointmentType's Related Objects
                // AppointmentType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Calendar.</summary>
        /// <returns>The new Calendar.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Calendar>> CreateADummyCalendarAsync(int id, string? key, string? jsonAttributes = null, int accountID = 1, decimal? fridayHoursEnd = null!, decimal? fridayHoursStart = null!, decimal? mondayHoursEnd = null!, decimal? mondayHoursStart = null!, decimal? saturdayHoursEnd = null!, decimal? saturdayHoursStart = null!, decimal? sundayHoursEnd = null!, decimal? sundayHoursStart = null!, decimal? thursdayHoursEnd = null!, decimal? thursdayHoursStart = null!, decimal? tuesdayHoursEnd = null!, decimal? tuesdayHoursStart = null!, decimal? wednesdayHoursEnd = null!, decimal? wednesdayHoursStart = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Calendar>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // Calendar Properties
                mock.Object.AccountID = accountID;
                mock.Object.FridayHoursEnd = fridayHoursEnd;
                mock.Object.FridayHoursStart = fridayHoursStart;
                mock.Object.MondayHoursEnd = mondayHoursEnd;
                mock.Object.MondayHoursStart = mondayHoursStart;
                mock.Object.SaturdayHoursEnd = saturdayHoursEnd;
                mock.Object.SaturdayHoursStart = saturdayHoursStart;
                mock.Object.SundayHoursEnd = sundayHoursEnd;
                mock.Object.SundayHoursStart = sundayHoursStart;
                mock.Object.ThursdayHoursEnd = thursdayHoursEnd;
                mock.Object.ThursdayHoursStart = thursdayHoursStart;
                mock.Object.TuesdayHoursEnd = tuesdayHoursEnd;
                mock.Object.TuesdayHoursStart = tuesdayHoursStart;
                mock.Object.WednesdayHoursEnd = wednesdayHoursEnd;
                mock.Object.WednesdayHoursStart = wednesdayHoursStart;
                // Dynamic Linking
                // Calendar's Related Objects
                mock.Setup(m => m.Account).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                // Calendar's Associated Objects
                mock.Setup(m => m.Appointments).Returns(() => RawCalendarAppointments?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CalendarAppointment>());
                return mock;
            });
        }

        /// <summary>Creates a dummy CalendarAppointment.</summary>
        /// <returns>The new CalendarAppointment.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CalendarAppointment>> CreateADummyCalendarAppointmentAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CalendarAppointment>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // CalendarAppointment Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // CalendarAppointment's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawCalendars?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawAppointments?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CalendarAppointment's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForScheduling(MockingSetup mockingSetup)
        {
            Func<Appointment> mockFuncAppointment = () =>
            {
                var mock = new Mock<Appointment>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Appointment Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawAppointmentTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawAppointmentStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.SalesOrder).Returns(() => mockingSetup.RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesOrderID)?.Object);
                // Appointment's Associated Objects
                mock.Setup(m => m.Calendars).Returns(() => mockingSetup.RawCalendarAppointments?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CalendarAppointment>());
                // Appointment's Related Objects
                return mock.Object;
            };
            For<IAppointment>().Use(() => mockFuncAppointment());
            For<Appointment>().Use(() => mockFuncAppointment());
            Func<AppointmentStatus> mockFuncAppointmentStatus = () =>
            {
                var mock = new Mock<AppointmentStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppointmentStatus Properties
                // Dynamic Linking
                // AppointmentStatus's Associated Objects
                // AppointmentStatus's Related Objects
                return mock.Object;
            };
            For<IAppointmentStatus>().Use(() => mockFuncAppointmentStatus());
            For<AppointmentStatus>().Use(() => mockFuncAppointmentStatus());
            Func<AppointmentType> mockFuncAppointmentType = () =>
            {
                var mock = new Mock<AppointmentType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // AppointmentType Properties
                // Dynamic Linking
                // AppointmentType's Associated Objects
                // AppointmentType's Related Objects
                return mock.Object;
            };
            For<IAppointmentType>().Use(() => mockFuncAppointmentType());
            For<AppointmentType>().Use(() => mockFuncAppointmentType());
            Func<Calendar> mockFuncCalendar = () =>
            {
                var mock = new Mock<Calendar>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Calendar Properties
                // Dynamic Linking
                mock.Setup(m => m.Account).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                // Calendar's Associated Objects
                mock.Setup(m => m.Appointments).Returns(() => mockingSetup.RawCalendarAppointments?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CalendarAppointment>());
                // Calendar's Related Objects
                return mock.Object;
            };
            For<ICalendar>().Use(() => mockFuncCalendar());
            For<Calendar>().Use(() => mockFuncCalendar());
            Func<CalendarAppointment> mockFuncCalendarAppointment = () =>
            {
                var mock = new Mock<CalendarAppointment>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CalendarAppointment Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCalendars?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAppointments?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CalendarAppointment's Associated Objects
                // CalendarAppointment's Related Objects
                return mock.Object;
            };
            For<ICalendarAppointment>().Use(() => mockFuncCalendarAppointment());
            For<CalendarAppointment>().Use(() => mockFuncCalendarAppointment());
        }
    }
}
