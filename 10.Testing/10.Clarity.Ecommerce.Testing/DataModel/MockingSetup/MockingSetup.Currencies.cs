// <autogenerated>
// <copyright file="Currencies.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Currencies section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoCurrencies { private get; set; }

        // Enable the tables specifically on run
        public bool DoCurrencyTable { private get; set; }
        public bool DoCurrencyConversionTable { private get; set; }
        public bool DoCurrencyImageTable { private get; set; }
        public bool DoCurrencyImageTypeTable { private get; set; }
        public bool DoHistoricalCurrencyRateTable { private get; set; }

        // Dirty Checking
        public bool CurrencyDirty { private get; set; }
        public bool CurrencyConversionDirty { private get; set; }
        public bool CurrencyImageDirty { private get; set; }
        public bool CurrencyImageTypeDirty { private get; set; }
        public bool HistoricalCurrencyRateDirty { private get; set; }

        // Sets
        public Mock<DbSet<Currency>>? Currencies { get; private set; }
        public Mock<DbSet<CurrencyConversion>>? CurrencyConversions { get; private set; }
        public Mock<DbSet<CurrencyImage>>? CurrencyImages { get; private set; }
        public Mock<DbSet<CurrencyImageType>>? CurrencyImageTypes { get; private set; }
        public Mock<DbSet<HistoricalCurrencyRate>>? HistoricalCurrencyRates { get; private set; }

        // Raw Data
        public List<Mock<Currency>>? RawCurrencies { get; private set; }
        public List<Mock<CurrencyConversion>>? RawCurrencyConversions { get; private set; }
        public List<Mock<CurrencyImage>>? RawCurrencyImages { get; private set; }
        public List<Mock<CurrencyImageType>>? RawCurrencyImageTypes { get; private set; }
        public List<Mock<HistoricalCurrencyRate>>? RawHistoricalCurrencyRates { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksCurrenciesAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoCurrencies || (DoCurrencyTable && (!dirtyOnly || CurrencyDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCurrencies == null) { throw new InvalidOperationException("Raw Currencies was null"); }
                    await InitializeMockSetFromListAsync(Currencies, RawCurrencies).ConfigureAwait(false);
                    context.Setup(m => m.Currencies).Returns(() => Currencies?.Object!);
                    context.Setup(m => m.Set<Currency>()).Returns(() => Currencies?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCurrencies || (DoCurrencyConversionTable && (!dirtyOnly || CurrencyConversionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCurrencyConversions == null) { throw new InvalidOperationException("Raw CurrencyConversions was null"); }
                    await InitializeMockSetFromListAsync(CurrencyConversions, RawCurrencyConversions).ConfigureAwait(false);
                    context.Setup(m => m.CurrencyConversions).Returns(() => CurrencyConversions?.Object!);
                    context.Setup(m => m.Set<CurrencyConversion>()).Returns(() => CurrencyConversions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCurrencies || (DoCurrencyImageTable && (!dirtyOnly || CurrencyImageDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCurrencyImages == null) { throw new InvalidOperationException("Raw CurrencyImages was null"); }
                    await InitializeMockSetFromListAsync(CurrencyImages, RawCurrencyImages).ConfigureAwait(false);
                    context.Setup(m => m.CurrencyImages).Returns(() => CurrencyImages?.Object!);
                    context.Setup(m => m.Set<CurrencyImage>()).Returns(() => CurrencyImages?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCurrencies || (DoCurrencyImageTypeTable && (!dirtyOnly || CurrencyImageTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCurrencyImageTypes == null) { throw new InvalidOperationException("Raw CurrencyImageTypes was null"); }
                    await InitializeMockSetFromListAsync(CurrencyImageTypes, RawCurrencyImageTypes).ConfigureAwait(false);
                    context.Setup(m => m.CurrencyImageTypes).Returns(() => CurrencyImageTypes?.Object!);
                    context.Setup(m => m.Set<CurrencyImageType>()).Returns(() => CurrencyImageTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoCurrencies || (DoHistoricalCurrencyRateTable && (!dirtyOnly || HistoricalCurrencyRateDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawHistoricalCurrencyRates == null) { throw new InvalidOperationException("Raw HistoricalCurrencyRates was null"); }
                    await InitializeMockSetFromListAsync(HistoricalCurrencyRates, RawHistoricalCurrencyRates).ConfigureAwait(false);
                    context.Setup(m => m.HistoricalCurrencyRates).Returns(() => HistoricalCurrencyRates?.Object!);
                    context.Setup(m => m.Set<HistoricalCurrencyRate>()).Returns(() => HistoricalCurrencyRates?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCurrenciesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Currency>> data)
        {
            if (!DoAll && !DoCurrencies && !DoCurrencyTable) { return; }
            Currencies ??= new Mock<DbSet<Currency>>();
            await InitializeMockSetFromListAsync(Currencies, data).ConfigureAwait(false);
            context.Setup(m => m.Currencies).Returns(() => Currencies.Object);
            context.Setup(m => m.Set<Currency>()).Returns(() => Currencies.Object);
            TableRecordCounts[typeof(Currency)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Currency)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Currency)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Currency)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCurrencyConversionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CurrencyConversion>> data)
        {
            if (!DoAll && !DoCurrencies && !DoCurrencyConversionTable) { return; }
            CurrencyConversions ??= new Mock<DbSet<CurrencyConversion>>();
            await InitializeMockSetFromListAsync(CurrencyConversions, data).ConfigureAwait(false);
            context.Setup(m => m.CurrencyConversions).Returns(() => CurrencyConversions.Object);
            context.Setup(m => m.Set<CurrencyConversion>()).Returns(() => CurrencyConversions.Object);
            TableRecordCounts[typeof(CurrencyConversion)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CurrencyConversion)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CurrencyConversion)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCurrencyImagesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CurrencyImage>> data)
        {
            if (!DoAll && !DoCurrencies && !DoCurrencyImageTable) { return; }
            CurrencyImages ??= new Mock<DbSet<CurrencyImage>>();
            await InitializeMockSetFromListAsync(CurrencyImages, data).ConfigureAwait(false);
            context.Setup(m => m.CurrencyImages).Returns(() => CurrencyImages.Object);
            context.Setup(m => m.Set<CurrencyImage>()).Returns(() => CurrencyImages.Object);
            TableRecordCounts[typeof(CurrencyImage)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CurrencyImage)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CurrencyImage)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CurrencyImage)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCurrencyImageTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CurrencyImageType>> data)
        {
            if (!DoAll && !DoCurrencies && !DoCurrencyImageTypeTable) { return; }
            CurrencyImageTypes ??= new Mock<DbSet<CurrencyImageType>>();
            await InitializeMockSetFromListAsync(CurrencyImageTypes, data).ConfigureAwait(false);
            context.Setup(m => m.CurrencyImageTypes).Returns(() => CurrencyImageTypes.Object);
            context.Setup(m => m.Set<CurrencyImageType>()).Returns(() => CurrencyImageTypes.Object);
            TableRecordCounts[typeof(CurrencyImageType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CurrencyImageType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CurrencyImageType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CurrencyImageType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(CurrencyImageType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetHistoricalCurrencyRatesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<HistoricalCurrencyRate>> data)
        {
            if (!DoAll && !DoCurrencies && !DoHistoricalCurrencyRateTable) { return; }
            HistoricalCurrencyRates ??= new Mock<DbSet<HistoricalCurrencyRate>>();
            await InitializeMockSetFromListAsync(HistoricalCurrencyRates, data).ConfigureAwait(false);
            context.Setup(m => m.HistoricalCurrencyRates).Returns(() => HistoricalCurrencyRates.Object);
            context.Setup(m => m.Set<HistoricalCurrencyRate>()).Returns(() => HistoricalCurrencyRates.Object);
            TableRecordCounts[typeof(HistoricalCurrencyRate)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(HistoricalCurrencyRate)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(HistoricalCurrencyRate)] = data[0].Object.CustomKey;
            }
        }

        /// <summary>Creates a dummy Currency.</summary>
        /// <returns>The new Currency.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Currency>> CreateADummyCurrencyAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int? decimalPlaceAccuracy = null!, string htmlCharacterCode = null!, string htmlDecimalCharacterCode = null!, string htmlSeparatorCharacterCode = null!, string iSO4217Alpha = null!, int? iSO4217Numeric = null!, string rawCharacter = null!, string rawDecimalCharacter = null!, string rawSeparatorCharacter = null!, decimal unicodeSymbolValue = 0m, bool? useSeparator = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Currency>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // Currency Properties
                mock.Object.DecimalPlaceAccuracy = decimalPlaceAccuracy;
                mock.Object.HtmlCharacterCode = htmlCharacterCode;
                mock.Object.HtmlDecimalCharacterCode = htmlDecimalCharacterCode;
                mock.Object.HtmlSeparatorCharacterCode = htmlSeparatorCharacterCode;
                mock.Object.ISO4217Alpha = iSO4217Alpha;
                mock.Object.ISO4217Numeric = iSO4217Numeric;
                mock.Object.RawCharacter = rawCharacter;
                mock.Object.RawDecimalCharacter = rawDecimalCharacter;
                mock.Object.RawSeparatorCharacter = rawSeparatorCharacter;
                mock.Object.UnicodeSymbolValue = unicodeSymbolValue;
                mock.Object.UseSeparator = useSeparator;
                // Dynamic Linking
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => RawCurrencyImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CurrencyImage>());
                // Currency's Related Objects
                // Currency's Associated Objects
                mock.Setup(m => m.ConversionEndingCurrencies).Returns(() => RawCurrencyConversions?.Where(x => x.Object.EndingCurrencyID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CurrencyConversion>());
                mock.Setup(m => m.ConversionStartingCurrencies).Returns(() => RawCurrencyConversions?.Where(x => x.Object.StartingCurrencyID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CurrencyConversion>());
                mock.Setup(m => m.HistoricalEndingCurrencies).Returns(() => RawHistoricalCurrencyRates?.Where(x => x.Object.EndingCurrencyID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<HistoricalCurrencyRate>());
                mock.Setup(m => m.HistoricalStartingCurrencies).Returns(() => RawHistoricalCurrencyRates?.Where(x => x.Object.StartingCurrencyID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<HistoricalCurrencyRate>());
                return mock;
            });
        }

        /// <summary>Creates a dummy CurrencyConversion.</summary>
        /// <returns>The new CurrencyConversion.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CurrencyConversion>> CreateADummyCurrencyConversionAsync(int id, string? key, string? jsonAttributes = null, DateTime? endDate = null!, int endingCurrencyID = 1, decimal rate = 0m, DateTime? startDate = null!, int startingCurrencyID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CurrencyConversion>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // CurrencyConversion Properties
                mock.Object.EndDate = endDate;
                mock.Object.EndingCurrencyID = endingCurrencyID;
                mock.Object.Rate = rate;
                mock.Object.StartDate = startDate;
                mock.Object.StartingCurrencyID = startingCurrencyID;
                // Dynamic Linking
                // CurrencyConversion's Related Objects
                mock.Setup(m => m.EndingCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.EndingCurrencyID)?.Object);
                mock.Setup(m => m.StartingCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.StartingCurrencyID)?.Object);
                // CurrencyConversion's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CurrencyImage.</summary>
        /// <returns>The new CurrencyImage.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CurrencyImage>> CreateADummyCurrencyImageAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int masterID = 1, int typeID = 1, int? sortOrder = null, string? displayName = null, string? seoTitle = null, string? author = null, DateTime? mediaDate = null, string? copyright = null, string? location = null, decimal? latitude = null, decimal? longitude = null, bool isPrimary = false, int? originalWidth = null, int? originalHeight = null, string? originalFileFormat = null, string? originalFileName = null, bool originalIsStoredInDB = false, byte[] originalBytes = null!, int? thumbnailWidth = null, int? thumbnailHeight = null, string? thumbnailFileFormat = null, string? thumbnailFileName = null, bool thumbnailIsStoredInDB = false, byte[] thumbnailBytes = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CurrencyImage>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IImageBase Properties
                mock.Object.MasterID = masterID;
                mock.Object.TypeID = typeID;
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.SeoTitle = seoTitle;
                mock.Object.Author = author;
                mock.Object.MediaDate = mediaDate;
                mock.Object.Copyright = copyright;
                mock.Object.Location = location;
                mock.Object.Latitude = latitude;
                mock.Object.Longitude = longitude;
                mock.Object.IsPrimary = isPrimary;
                mock.Object.OriginalWidth = originalWidth;
                mock.Object.OriginalHeight = originalHeight;
                mock.Object.OriginalFileFormat = originalFileFormat;
                mock.Object.OriginalFileName = originalFileName;
                mock.Object.OriginalIsStoredInDB = originalIsStoredInDB;
                mock.Object.OriginalBytes = originalBytes;
                mock.Object.ThumbnailWidth = thumbnailWidth;
                mock.Object.ThumbnailHeight = thumbnailHeight;
                mock.Object.ThumbnailFileFormat = thumbnailFileFormat;
                mock.Object.ThumbnailFileName = thumbnailFileName;
                mock.Object.ThumbnailIsStoredInDB = thumbnailIsStoredInDB;
                mock.Object.ThumbnailBytes = thumbnailBytes;
                // CurrencyImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => RawCurrencyImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // CurrencyImage's Related Objects
                // CurrencyImage's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CurrencyImageType.</summary>
        /// <returns>The new CurrencyImageType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CurrencyImageType>> CreateADummyCurrencyImageTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CurrencyImageType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // CurrencyImageType Properties
                // Dynamic Linking
                // CurrencyImageType's Related Objects
                // CurrencyImageType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy HistoricalCurrencyRate.</summary>
        /// <returns>The new HistoricalCurrencyRate.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<HistoricalCurrencyRate>> CreateADummyHistoricalCurrencyRateAsync(int id, string? key, string? jsonAttributes = null, int endingCurrencyID = 1, DateTime onDate = default, decimal rate = 0m, int startingCurrencyID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<HistoricalCurrencyRate>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // HistoricalCurrencyRate Properties
                mock.Object.EndingCurrencyID = endingCurrencyID;
                mock.Object.OnDate = onDate;
                mock.Object.Rate = rate;
                mock.Object.StartingCurrencyID = startingCurrencyID;
                // Dynamic Linking
                // HistoricalCurrencyRate's Related Objects
                mock.Setup(m => m.EndingCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.EndingCurrencyID)?.Object);
                mock.Setup(m => m.StartingCurrency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.StartingCurrencyID)?.Object);
                // HistoricalCurrencyRate's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForCurrencies(MockingSetup mockingSetup)
        {
            Func<Currency> mockFuncCurrency = () =>
            {
                var mock = new Mock<Currency>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Currency Properties
                // Dynamic Linking
                // IHaveImagesBase Properties
                mock.Setup(m => m.Images).Returns(() => mockingSetup.RawCurrencyImages?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CurrencyImage>());
                // Currency's Associated Objects
                mock.Setup(m => m.ConversionEndingCurrencies).Returns(() => mockingSetup.RawCurrencyConversions?.Where(x => x.Object.EndingCurrencyID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CurrencyConversion>());
                mock.Setup(m => m.ConversionStartingCurrencies).Returns(() => mockingSetup.RawCurrencyConversions?.Where(x => x.Object.StartingCurrencyID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CurrencyConversion>());
                mock.Setup(m => m.HistoricalEndingCurrencies).Returns(() => mockingSetup.RawHistoricalCurrencyRates?.Where(x => x.Object.EndingCurrencyID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<HistoricalCurrencyRate>());
                mock.Setup(m => m.HistoricalStartingCurrencies).Returns(() => mockingSetup.RawHistoricalCurrencyRates?.Where(x => x.Object.StartingCurrencyID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<HistoricalCurrencyRate>());
                // Currency's Related Objects
                return mock.Object;
            };
            For<ICurrency>().Use(() => mockFuncCurrency());
            For<Currency>().Use(() => mockFuncCurrency());
            Func<CurrencyConversion> mockFuncCurrencyConversion = () =>
            {
                var mock = new Mock<CurrencyConversion>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CurrencyConversion Properties
                // Dynamic Linking
                mock.Setup(m => m.EndingCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.EndingCurrencyID)?.Object);
                mock.Setup(m => m.StartingCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.StartingCurrencyID)?.Object);
                // CurrencyConversion's Associated Objects
                // CurrencyConversion's Related Objects
                return mock.Object;
            };
            For<ICurrencyConversion>().Use(() => mockFuncCurrencyConversion());
            For<CurrencyConversion>().Use(() => mockFuncCurrencyConversion());
            Func<CurrencyImage> mockFuncCurrencyImage = () =>
            {
                var mock = new Mock<CurrencyImage>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CurrencyImage Properties
                // Dynamic Linking
                // IImageBase Properties
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawCurrencyImageTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // CurrencyImage's Associated Objects
                // CurrencyImage's Related Objects
                return mock.Object;
            };
            For<ICurrencyImage>().Use(() => mockFuncCurrencyImage());
            For<CurrencyImage>().Use(() => mockFuncCurrencyImage());
            Func<CurrencyImageType> mockFuncCurrencyImageType = () =>
            {
                var mock = new Mock<CurrencyImageType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CurrencyImageType Properties
                // Dynamic Linking
                // CurrencyImageType's Associated Objects
                // CurrencyImageType's Related Objects
                return mock.Object;
            };
            For<ICurrencyImageType>().Use(() => mockFuncCurrencyImageType());
            For<CurrencyImageType>().Use(() => mockFuncCurrencyImageType());
            Func<HistoricalCurrencyRate> mockFuncHistoricalCurrencyRate = () =>
            {
                var mock = new Mock<HistoricalCurrencyRate>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // HistoricalCurrencyRate Properties
                // Dynamic Linking
                mock.Setup(m => m.EndingCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.EndingCurrencyID)?.Object);
                mock.Setup(m => m.StartingCurrency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.StartingCurrencyID)?.Object);
                // HistoricalCurrencyRate's Associated Objects
                // HistoricalCurrencyRate's Related Objects
                return mock.Object;
            };
            For<IHistoricalCurrencyRate>().Use(() => mockFuncHistoricalCurrencyRate());
            For<HistoricalCurrencyRate>().Use(() => mockFuncHistoricalCurrencyRate());
        }
    }
}
