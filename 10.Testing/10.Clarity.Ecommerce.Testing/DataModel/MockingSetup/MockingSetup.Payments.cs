// <autogenerated>
// <copyright file="Payments.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Payments section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoPayments { private get; set; }

        // Enable the tables specifically on run
        public bool DoMembershipTable { private get; set; }
        public bool DoMembershipAdZoneAccessTable { private get; set; }
        public bool DoMembershipAdZoneAccessByLevelTable { private get; set; }
        public bool DoMembershipLevelTable { private get; set; }
        public bool DoMembershipRepeatTypeTable { private get; set; }
        public bool DoPaymentTable { private get; set; }
        public bool DoPaymentMethodTable { private get; set; }
        public bool DoPaymentStatusTable { private get; set; }
        public bool DoPaymentTypeTable { private get; set; }
        public bool DoRepeatTypeTable { private get; set; }
        public bool DoSalesInvoicePaymentTable { private get; set; }
        public bool DoSalesOrderPaymentTable { private get; set; }
        public bool DoSalesReturnPaymentTable { private get; set; }
        public bool DoSubscriptionTable { private get; set; }
        public bool DoSubscriptionHistoryTable { private get; set; }
        public bool DoSubscriptionStatusTable { private get; set; }
        public bool DoSubscriptionTypeTable { private get; set; }
        public bool DoSubscriptionTypeRepeatTypeTable { private get; set; }
        public bool DoWalletTable { private get; set; }

        // Dirty Checking
        public bool MembershipDirty { private get; set; }
        public bool MembershipAdZoneAccessDirty { private get; set; }
        public bool MembershipAdZoneAccessByLevelDirty { private get; set; }
        public bool MembershipLevelDirty { private get; set; }
        public bool MembershipRepeatTypeDirty { private get; set; }
        public bool PaymentDirty { private get; set; }
        public bool PaymentMethodDirty { private get; set; }
        public bool PaymentStatusDirty { private get; set; }
        public bool PaymentTypeDirty { private get; set; }
        public bool RepeatTypeDirty { private get; set; }
        public bool SalesInvoicePaymentDirty { private get; set; }
        public bool SalesOrderPaymentDirty { private get; set; }
        public bool SalesReturnPaymentDirty { private get; set; }
        public bool SubscriptionDirty { private get; set; }
        public bool SubscriptionHistoryDirty { private get; set; }
        public bool SubscriptionStatusDirty { private get; set; }
        public bool SubscriptionTypeDirty { private get; set; }
        public bool SubscriptionTypeRepeatTypeDirty { private get; set; }
        public bool WalletDirty { private get; set; }

        // Sets
        public Mock<DbSet<Membership>>? Memberships { get; private set; }
        public Mock<DbSet<MembershipAdZoneAccess>>? MembershipAdZoneAccesses { get; private set; }
        public Mock<DbSet<MembershipAdZoneAccessByLevel>>? MembershipAdZoneAccessByLevels { get; private set; }
        public Mock<DbSet<MembershipLevel>>? MembershipLevels { get; private set; }
        public Mock<DbSet<MembershipRepeatType>>? MembershipRepeatTypes { get; private set; }
        public Mock<DbSet<Payment>>? Payments { get; private set; }
        public Mock<DbSet<PaymentMethod>>? PaymentMethods { get; private set; }
        public Mock<DbSet<PaymentStatus>>? PaymentStatuses { get; private set; }
        public Mock<DbSet<PaymentType>>? PaymentTypes { get; private set; }
        public Mock<DbSet<RepeatType>>? RepeatTypes { get; private set; }
        public Mock<DbSet<SalesInvoicePayment>>? SalesInvoicePayments { get; private set; }
        public Mock<DbSet<SalesOrderPayment>>? SalesOrderPayments { get; private set; }
        public Mock<DbSet<SalesReturnPayment>>? SalesReturnPayments { get; private set; }
        public Mock<DbSet<Subscription>>? Subscriptions { get; private set; }
        public Mock<DbSet<SubscriptionHistory>>? SubscriptionHistories { get; private set; }
        public Mock<DbSet<SubscriptionStatus>>? SubscriptionStatuses { get; private set; }
        public Mock<DbSet<SubscriptionType>>? SubscriptionTypes { get; private set; }
        public Mock<DbSet<SubscriptionTypeRepeatType>>? SubscriptionTypeRepeatTypes { get; private set; }
        public Mock<DbSet<Wallet>>? Wallets { get; private set; }

        // Raw Data
        public List<Mock<Membership>>? RawMemberships { get; private set; }
        public List<Mock<MembershipAdZoneAccess>>? RawMembershipAdZoneAccesses { get; private set; }
        public List<Mock<MembershipAdZoneAccessByLevel>>? RawMembershipAdZoneAccessByLevels { get; private set; }
        public List<Mock<MembershipLevel>>? RawMembershipLevels { get; private set; }
        public List<Mock<MembershipRepeatType>>? RawMembershipRepeatTypes { get; private set; }
        public List<Mock<Payment>>? RawPayments { get; private set; }
        public List<Mock<PaymentMethod>>? RawPaymentMethods { get; private set; }
        public List<Mock<PaymentStatus>>? RawPaymentStatuses { get; private set; }
        public List<Mock<PaymentType>>? RawPaymentTypes { get; private set; }
        public List<Mock<RepeatType>>? RawRepeatTypes { get; private set; }
        public List<Mock<SalesInvoicePayment>>? RawSalesInvoicePayments { get; private set; }
        public List<Mock<SalesOrderPayment>>? RawSalesOrderPayments { get; private set; }
        public List<Mock<SalesReturnPayment>>? RawSalesReturnPayments { get; private set; }
        public List<Mock<Subscription>>? RawSubscriptions { get; private set; }
        public List<Mock<SubscriptionHistory>>? RawSubscriptionHistories { get; private set; }
        public List<Mock<SubscriptionStatus>>? RawSubscriptionStatuses { get; private set; }
        public List<Mock<SubscriptionType>>? RawSubscriptionTypes { get; private set; }
        public List<Mock<SubscriptionTypeRepeatType>>? RawSubscriptionTypeRepeatTypes { get; private set; }
        public List<Mock<Wallet>>? RawWallets { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksPaymentsAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoPayments || (DoMembershipTable && (!dirtyOnly || MembershipDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawMemberships == null) { throw new InvalidOperationException("Raw Memberships was null"); }
                    await InitializeMockSetFromListAsync(Memberships, RawMemberships).ConfigureAwait(false);
                    context.Setup(m => m.Memberships).Returns(() => Memberships?.Object!);
                    context.Setup(m => m.Set<Membership>()).Returns(() => Memberships?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoMembershipAdZoneAccessTable && (!dirtyOnly || MembershipAdZoneAccessDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawMembershipAdZoneAccesses == null) { throw new InvalidOperationException("Raw MembershipAdZoneAccesses was null"); }
                    await InitializeMockSetFromListAsync(MembershipAdZoneAccesses, RawMembershipAdZoneAccesses).ConfigureAwait(false);
                    context.Setup(m => m.MembershipAdZoneAccesses).Returns(() => MembershipAdZoneAccesses?.Object!);
                    context.Setup(m => m.Set<MembershipAdZoneAccess>()).Returns(() => MembershipAdZoneAccesses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoMembershipAdZoneAccessByLevelTable && (!dirtyOnly || MembershipAdZoneAccessByLevelDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawMembershipAdZoneAccessByLevels == null) { throw new InvalidOperationException("Raw MembershipAdZoneAccessByLevels was null"); }
                    await InitializeMockSetFromListAsync(MembershipAdZoneAccessByLevels, RawMembershipAdZoneAccessByLevels).ConfigureAwait(false);
                    context.Setup(m => m.MembershipAdZoneAccessByLevels).Returns(() => MembershipAdZoneAccessByLevels?.Object!);
                    context.Setup(m => m.Set<MembershipAdZoneAccessByLevel>()).Returns(() => MembershipAdZoneAccessByLevels?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoMembershipLevelTable && (!dirtyOnly || MembershipLevelDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawMembershipLevels == null) { throw new InvalidOperationException("Raw MembershipLevels was null"); }
                    await InitializeMockSetFromListAsync(MembershipLevels, RawMembershipLevels).ConfigureAwait(false);
                    context.Setup(m => m.MembershipLevels).Returns(() => MembershipLevels?.Object!);
                    context.Setup(m => m.Set<MembershipLevel>()).Returns(() => MembershipLevels?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoMembershipRepeatTypeTable && (!dirtyOnly || MembershipRepeatTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawMembershipRepeatTypes == null) { throw new InvalidOperationException("Raw MembershipRepeatTypes was null"); }
                    await InitializeMockSetFromListAsync(MembershipRepeatTypes, RawMembershipRepeatTypes).ConfigureAwait(false);
                    context.Setup(m => m.MembershipRepeatTypes).Returns(() => MembershipRepeatTypes?.Object!);
                    context.Setup(m => m.Set<MembershipRepeatType>()).Returns(() => MembershipRepeatTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoPaymentTable && (!dirtyOnly || PaymentDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPayments == null) { throw new InvalidOperationException("Raw Payments was null"); }
                    await InitializeMockSetFromListAsync(Payments, RawPayments).ConfigureAwait(false);
                    context.Setup(m => m.Payments).Returns(() => Payments?.Object!);
                    context.Setup(m => m.Set<Payment>()).Returns(() => Payments?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoPaymentMethodTable && (!dirtyOnly || PaymentMethodDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPaymentMethods == null) { throw new InvalidOperationException("Raw PaymentMethods was null"); }
                    await InitializeMockSetFromListAsync(PaymentMethods, RawPaymentMethods).ConfigureAwait(false);
                    context.Setup(m => m.PaymentMethods).Returns(() => PaymentMethods?.Object!);
                    context.Setup(m => m.Set<PaymentMethod>()).Returns(() => PaymentMethods?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoPaymentStatusTable && (!dirtyOnly || PaymentStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPaymentStatuses == null) { throw new InvalidOperationException("Raw PaymentStatuses was null"); }
                    await InitializeMockSetFromListAsync(PaymentStatuses, RawPaymentStatuses).ConfigureAwait(false);
                    context.Setup(m => m.PaymentStatuses).Returns(() => PaymentStatuses?.Object!);
                    context.Setup(m => m.Set<PaymentStatus>()).Returns(() => PaymentStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoPaymentTypeTable && (!dirtyOnly || PaymentTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPaymentTypes == null) { throw new InvalidOperationException("Raw PaymentTypes was null"); }
                    await InitializeMockSetFromListAsync(PaymentTypes, RawPaymentTypes).ConfigureAwait(false);
                    context.Setup(m => m.PaymentTypes).Returns(() => PaymentTypes?.Object!);
                    context.Setup(m => m.Set<PaymentType>()).Returns(() => PaymentTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoRepeatTypeTable && (!dirtyOnly || RepeatTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawRepeatTypes == null) { throw new InvalidOperationException("Raw RepeatTypes was null"); }
                    await InitializeMockSetFromListAsync(RepeatTypes, RawRepeatTypes).ConfigureAwait(false);
                    context.Setup(m => m.RepeatTypes).Returns(() => RepeatTypes?.Object!);
                    context.Setup(m => m.Set<RepeatType>()).Returns(() => RepeatTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoSalesInvoicePaymentTable && (!dirtyOnly || SalesInvoicePaymentDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesInvoicePayments == null) { throw new InvalidOperationException("Raw SalesInvoicePayments was null"); }
                    await InitializeMockSetFromListAsync(SalesInvoicePayments, RawSalesInvoicePayments).ConfigureAwait(false);
                    context.Setup(m => m.SalesInvoicePayments).Returns(() => SalesInvoicePayments?.Object!);
                    context.Setup(m => m.Set<SalesInvoicePayment>()).Returns(() => SalesInvoicePayments?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoSalesOrderPaymentTable && (!dirtyOnly || SalesOrderPaymentDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesOrderPayments == null) { throw new InvalidOperationException("Raw SalesOrderPayments was null"); }
                    await InitializeMockSetFromListAsync(SalesOrderPayments, RawSalesOrderPayments).ConfigureAwait(false);
                    context.Setup(m => m.SalesOrderPayments).Returns(() => SalesOrderPayments?.Object!);
                    context.Setup(m => m.Set<SalesOrderPayment>()).Returns(() => SalesOrderPayments?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoSalesReturnPaymentTable && (!dirtyOnly || SalesReturnPaymentDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSalesReturnPayments == null) { throw new InvalidOperationException("Raw SalesReturnPayments was null"); }
                    await InitializeMockSetFromListAsync(SalesReturnPayments, RawSalesReturnPayments).ConfigureAwait(false);
                    context.Setup(m => m.SalesReturnPayments).Returns(() => SalesReturnPayments?.Object!);
                    context.Setup(m => m.Set<SalesReturnPayment>()).Returns(() => SalesReturnPayments?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoSubscriptionTable && (!dirtyOnly || SubscriptionDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSubscriptions == null) { throw new InvalidOperationException("Raw Subscriptions was null"); }
                    await InitializeMockSetFromListAsync(Subscriptions, RawSubscriptions).ConfigureAwait(false);
                    context.Setup(m => m.Subscriptions).Returns(() => Subscriptions?.Object!);
                    context.Setup(m => m.Set<Subscription>()).Returns(() => Subscriptions?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoSubscriptionHistoryTable && (!dirtyOnly || SubscriptionHistoryDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSubscriptionHistories == null) { throw new InvalidOperationException("Raw SubscriptionHistories was null"); }
                    await InitializeMockSetFromListAsync(SubscriptionHistories, RawSubscriptionHistories).ConfigureAwait(false);
                    context.Setup(m => m.SubscriptionHistories).Returns(() => SubscriptionHistories?.Object!);
                    context.Setup(m => m.Set<SubscriptionHistory>()).Returns(() => SubscriptionHistories?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoSubscriptionStatusTable && (!dirtyOnly || SubscriptionStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSubscriptionStatuses == null) { throw new InvalidOperationException("Raw SubscriptionStatuses was null"); }
                    await InitializeMockSetFromListAsync(SubscriptionStatuses, RawSubscriptionStatuses).ConfigureAwait(false);
                    context.Setup(m => m.SubscriptionStatuses).Returns(() => SubscriptionStatuses?.Object!);
                    context.Setup(m => m.Set<SubscriptionStatus>()).Returns(() => SubscriptionStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoSubscriptionTypeTable && (!dirtyOnly || SubscriptionTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSubscriptionTypes == null) { throw new InvalidOperationException("Raw SubscriptionTypes was null"); }
                    await InitializeMockSetFromListAsync(SubscriptionTypes, RawSubscriptionTypes).ConfigureAwait(false);
                    context.Setup(m => m.SubscriptionTypes).Returns(() => SubscriptionTypes?.Object!);
                    context.Setup(m => m.Set<SubscriptionType>()).Returns(() => SubscriptionTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoSubscriptionTypeRepeatTypeTable && (!dirtyOnly || SubscriptionTypeRepeatTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawSubscriptionTypeRepeatTypes == null) { throw new InvalidOperationException("Raw SubscriptionTypeRepeatTypes was null"); }
                    await InitializeMockSetFromListAsync(SubscriptionTypeRepeatTypes, RawSubscriptionTypeRepeatTypes).ConfigureAwait(false);
                    context.Setup(m => m.SubscriptionTypeRepeatTypes).Returns(() => SubscriptionTypeRepeatTypes?.Object!);
                    context.Setup(m => m.Set<SubscriptionTypeRepeatType>()).Returns(() => SubscriptionTypeRepeatTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoPayments || (DoWalletTable && (!dirtyOnly || WalletDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawWallets == null) { throw new InvalidOperationException("Raw Wallets was null"); }
                    await InitializeMockSetFromListAsync(Wallets, RawWallets).ConfigureAwait(false);
                    context.Setup(m => m.Wallets).Returns(() => Wallets?.Object!);
                    context.Setup(m => m.Set<Wallet>()).Returns(() => Wallets?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetMembershipsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Membership>> data)
        {
            if (!DoAll && !DoPayments && !DoMembershipTable) { return; }
            Memberships ??= new Mock<DbSet<Membership>>();
            await InitializeMockSetFromListAsync(Memberships, data).ConfigureAwait(false);
            context.Setup(m => m.Memberships).Returns(() => Memberships.Object);
            context.Setup(m => m.Set<Membership>()).Returns(() => Memberships.Object);
            TableRecordCounts[typeof(Membership)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Membership)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Membership)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Membership)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(Membership)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetMembershipAdZoneAccessesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<MembershipAdZoneAccess>> data)
        {
            if (!DoAll && !DoPayments && !DoMembershipAdZoneAccessTable) { return; }
            MembershipAdZoneAccesses ??= new Mock<DbSet<MembershipAdZoneAccess>>();
            await InitializeMockSetFromListAsync(MembershipAdZoneAccesses, data).ConfigureAwait(false);
            context.Setup(m => m.MembershipAdZoneAccesses).Returns(() => MembershipAdZoneAccesses.Object);
            context.Setup(m => m.Set<MembershipAdZoneAccess>()).Returns(() => MembershipAdZoneAccesses.Object);
            TableRecordCounts[typeof(MembershipAdZoneAccess)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(MembershipAdZoneAccess)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(MembershipAdZoneAccess)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetMembershipAdZoneAccessByLevelsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<MembershipAdZoneAccessByLevel>> data)
        {
            if (!DoAll && !DoPayments && !DoMembershipAdZoneAccessByLevelTable) { return; }
            MembershipAdZoneAccessByLevels ??= new Mock<DbSet<MembershipAdZoneAccessByLevel>>();
            await InitializeMockSetFromListAsync(MembershipAdZoneAccessByLevels, data).ConfigureAwait(false);
            context.Setup(m => m.MembershipAdZoneAccessByLevels).Returns(() => MembershipAdZoneAccessByLevels.Object);
            context.Setup(m => m.Set<MembershipAdZoneAccessByLevel>()).Returns(() => MembershipAdZoneAccessByLevels.Object);
            TableRecordCounts[typeof(MembershipAdZoneAccessByLevel)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(MembershipAdZoneAccessByLevel)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(MembershipAdZoneAccessByLevel)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetMembershipLevelsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<MembershipLevel>> data)
        {
            if (!DoAll && !DoPayments && !DoMembershipLevelTable) { return; }
            MembershipLevels ??= new Mock<DbSet<MembershipLevel>>();
            await InitializeMockSetFromListAsync(MembershipLevels, data).ConfigureAwait(false);
            context.Setup(m => m.MembershipLevels).Returns(() => MembershipLevels.Object);
            context.Setup(m => m.Set<MembershipLevel>()).Returns(() => MembershipLevels.Object);
            TableRecordCounts[typeof(MembershipLevel)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(MembershipLevel)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(MembershipLevel)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(MembershipLevel)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(MembershipLevel)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetMembershipRepeatTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<MembershipRepeatType>> data)
        {
            if (!DoAll && !DoPayments && !DoMembershipRepeatTypeTable) { return; }
            MembershipRepeatTypes ??= new Mock<DbSet<MembershipRepeatType>>();
            await InitializeMockSetFromListAsync(MembershipRepeatTypes, data).ConfigureAwait(false);
            context.Setup(m => m.MembershipRepeatTypes).Returns(() => MembershipRepeatTypes.Object);
            context.Setup(m => m.Set<MembershipRepeatType>()).Returns(() => MembershipRepeatTypes.Object);
            TableRecordCounts[typeof(MembershipRepeatType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(MembershipRepeatType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(MembershipRepeatType)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPaymentsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Payment>> data)
        {
            if (!DoAll && !DoPayments && !DoPaymentTable) { return; }
            Payments ??= new Mock<DbSet<Payment>>();
            await InitializeMockSetFromListAsync(Payments, data).ConfigureAwait(false);
            context.Setup(m => m.Payments).Returns(() => Payments.Object);
            context.Setup(m => m.Set<Payment>()).Returns(() => Payments.Object);
            TableRecordCounts[typeof(Payment)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Payment)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Payment)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPaymentMethodsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PaymentMethod>> data)
        {
            if (!DoAll && !DoPayments && !DoPaymentMethodTable) { return; }
            PaymentMethods ??= new Mock<DbSet<PaymentMethod>>();
            await InitializeMockSetFromListAsync(PaymentMethods, data).ConfigureAwait(false);
            context.Setup(m => m.PaymentMethods).Returns(() => PaymentMethods.Object);
            context.Setup(m => m.Set<PaymentMethod>()).Returns(() => PaymentMethods.Object);
            TableRecordCounts[typeof(PaymentMethod)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PaymentMethod)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PaymentMethod)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PaymentMethod)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPaymentStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PaymentStatus>> data)
        {
            if (!DoAll && !DoPayments && !DoPaymentStatusTable) { return; }
            PaymentStatuses ??= new Mock<DbSet<PaymentStatus>>();
            await InitializeMockSetFromListAsync(PaymentStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.PaymentStatuses).Returns(() => PaymentStatuses.Object);
            context.Setup(m => m.Set<PaymentStatus>()).Returns(() => PaymentStatuses.Object);
            TableRecordCounts[typeof(PaymentStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PaymentStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PaymentStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PaymentStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(PaymentStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPaymentTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PaymentType>> data)
        {
            if (!DoAll && !DoPayments && !DoPaymentTypeTable) { return; }
            PaymentTypes ??= new Mock<DbSet<PaymentType>>();
            await InitializeMockSetFromListAsync(PaymentTypes, data).ConfigureAwait(false);
            context.Setup(m => m.PaymentTypes).Returns(() => PaymentTypes.Object);
            context.Setup(m => m.Set<PaymentType>()).Returns(() => PaymentTypes.Object);
            TableRecordCounts[typeof(PaymentType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PaymentType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PaymentType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PaymentType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(PaymentType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetRepeatTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<RepeatType>> data)
        {
            if (!DoAll && !DoPayments && !DoRepeatTypeTable) { return; }
            RepeatTypes ??= new Mock<DbSet<RepeatType>>();
            await InitializeMockSetFromListAsync(RepeatTypes, data).ConfigureAwait(false);
            context.Setup(m => m.RepeatTypes).Returns(() => RepeatTypes.Object);
            context.Setup(m => m.Set<RepeatType>()).Returns(() => RepeatTypes.Object);
            TableRecordCounts[typeof(RepeatType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(RepeatType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(RepeatType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(RepeatType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(RepeatType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesInvoicePaymentsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesInvoicePayment>> data)
        {
            if (!DoAll && !DoPayments && !DoSalesInvoicePaymentTable) { return; }
            SalesInvoicePayments ??= new Mock<DbSet<SalesInvoicePayment>>();
            await InitializeMockSetFromListAsync(SalesInvoicePayments, data).ConfigureAwait(false);
            context.Setup(m => m.SalesInvoicePayments).Returns(() => SalesInvoicePayments.Object);
            context.Setup(m => m.Set<SalesInvoicePayment>()).Returns(() => SalesInvoicePayments.Object);
            TableRecordCounts[typeof(SalesInvoicePayment)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesInvoicePayment)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesInvoicePayment)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesOrderPaymentsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesOrderPayment>> data)
        {
            if (!DoAll && !DoPayments && !DoSalesOrderPaymentTable) { return; }
            SalesOrderPayments ??= new Mock<DbSet<SalesOrderPayment>>();
            await InitializeMockSetFromListAsync(SalesOrderPayments, data).ConfigureAwait(false);
            context.Setup(m => m.SalesOrderPayments).Returns(() => SalesOrderPayments.Object);
            context.Setup(m => m.Set<SalesOrderPayment>()).Returns(() => SalesOrderPayments.Object);
            TableRecordCounts[typeof(SalesOrderPayment)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesOrderPayment)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesOrderPayment)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSalesReturnPaymentsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SalesReturnPayment>> data)
        {
            if (!DoAll && !DoPayments && !DoSalesReturnPaymentTable) { return; }
            SalesReturnPayments ??= new Mock<DbSet<SalesReturnPayment>>();
            await InitializeMockSetFromListAsync(SalesReturnPayments, data).ConfigureAwait(false);
            context.Setup(m => m.SalesReturnPayments).Returns(() => SalesReturnPayments.Object);
            context.Setup(m => m.Set<SalesReturnPayment>()).Returns(() => SalesReturnPayments.Object);
            TableRecordCounts[typeof(SalesReturnPayment)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SalesReturnPayment)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SalesReturnPayment)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSubscriptionsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Subscription>> data)
        {
            if (!DoAll && !DoPayments && !DoSubscriptionTable) { return; }
            Subscriptions ??= new Mock<DbSet<Subscription>>();
            await InitializeMockSetFromListAsync(Subscriptions, data).ConfigureAwait(false);
            context.Setup(m => m.Subscriptions).Returns(() => Subscriptions.Object);
            context.Setup(m => m.Set<Subscription>()).Returns(() => Subscriptions.Object);
            TableRecordCounts[typeof(Subscription)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Subscription)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Subscription)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Subscription)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSubscriptionHistoriesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SubscriptionHistory>> data)
        {
            if (!DoAll && !DoPayments && !DoSubscriptionHistoryTable) { return; }
            SubscriptionHistories ??= new Mock<DbSet<SubscriptionHistory>>();
            await InitializeMockSetFromListAsync(SubscriptionHistories, data).ConfigureAwait(false);
            context.Setup(m => m.SubscriptionHistories).Returns(() => SubscriptionHistories.Object);
            context.Setup(m => m.Set<SubscriptionHistory>()).Returns(() => SubscriptionHistories.Object);
            TableRecordCounts[typeof(SubscriptionHistory)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SubscriptionHistory)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SubscriptionHistory)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSubscriptionStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SubscriptionStatus>> data)
        {
            if (!DoAll && !DoPayments && !DoSubscriptionStatusTable) { return; }
            SubscriptionStatuses ??= new Mock<DbSet<SubscriptionStatus>>();
            await InitializeMockSetFromListAsync(SubscriptionStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.SubscriptionStatuses).Returns(() => SubscriptionStatuses.Object);
            context.Setup(m => m.Set<SubscriptionStatus>()).Returns(() => SubscriptionStatuses.Object);
            TableRecordCounts[typeof(SubscriptionStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SubscriptionStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SubscriptionStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SubscriptionStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SubscriptionStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSubscriptionTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SubscriptionType>> data)
        {
            if (!DoAll && !DoPayments && !DoSubscriptionTypeTable) { return; }
            SubscriptionTypes ??= new Mock<DbSet<SubscriptionType>>();
            await InitializeMockSetFromListAsync(SubscriptionTypes, data).ConfigureAwait(false);
            context.Setup(m => m.SubscriptionTypes).Returns(() => SubscriptionTypes.Object);
            context.Setup(m => m.Set<SubscriptionType>()).Returns(() => SubscriptionTypes.Object);
            TableRecordCounts[typeof(SubscriptionType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SubscriptionType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SubscriptionType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(SubscriptionType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(SubscriptionType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetSubscriptionTypeRepeatTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<SubscriptionTypeRepeatType>> data)
        {
            if (!DoAll && !DoPayments && !DoSubscriptionTypeRepeatTypeTable) { return; }
            SubscriptionTypeRepeatTypes ??= new Mock<DbSet<SubscriptionTypeRepeatType>>();
            await InitializeMockSetFromListAsync(SubscriptionTypeRepeatTypes, data).ConfigureAwait(false);
            context.Setup(m => m.SubscriptionTypeRepeatTypes).Returns(() => SubscriptionTypeRepeatTypes.Object);
            context.Setup(m => m.Set<SubscriptionTypeRepeatType>()).Returns(() => SubscriptionTypeRepeatTypes.Object);
            TableRecordCounts[typeof(SubscriptionTypeRepeatType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(SubscriptionTypeRepeatType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(SubscriptionTypeRepeatType)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetWalletsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Wallet>> data)
        {
            if (!DoAll && !DoPayments && !DoWalletTable) { return; }
            Wallets ??= new Mock<DbSet<Wallet>>();
            await InitializeMockSetFromListAsync(Wallets, data).ConfigureAwait(false);
            context.Setup(m => m.Wallets).Returns(() => Wallets.Object);
            context.Setup(m => m.Set<Wallet>()).Returns(() => Wallets.Object);
            TableRecordCounts[typeof(Wallet)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Wallet)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Wallet)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Wallet)] = data[0].Object.Name;
            }
        }

        /// <summary>Creates a dummy Membership.</summary>
        /// <returns>The new Membership.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Membership>> CreateADummyMembershipAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool isContractual = false, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Membership>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // Membership Properties
                mock.Object.IsContractual = isContractual;
                // Dynamic Linking
                // Membership's Related Objects
                // Membership's Associated Objects
                mock.Setup(m => m.MembershipLevels).Returns(() => RawMembershipLevels?.Where(x => x.Object.MembershipID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MembershipLevel>());
                mock.Setup(m => m.MembershipRepeatTypes).Returns(() => RawMembershipRepeatTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MembershipRepeatType>());
                return mock;
            });
        }

        /// <summary>Creates a dummy MembershipAdZoneAccess.</summary>
        /// <returns>The new MembershipAdZoneAccess.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<MembershipAdZoneAccess>> CreateADummyMembershipAdZoneAccessAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<MembershipAdZoneAccess>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // MembershipAdZoneAccess Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // MembershipAdZoneAccess's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawMemberships?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawAdZoneAccesses?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // MembershipAdZoneAccess's Associated Objects
                mock.Setup(m => m.MembershipAdZoneAccessByLevels).Returns(() => RawMembershipAdZoneAccessByLevels?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MembershipAdZoneAccessByLevel>());
                return mock;
            });
        }

        /// <summary>Creates a dummy MembershipAdZoneAccessByLevel.</summary>
        /// <returns>The new MembershipAdZoneAccessByLevel.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<MembershipAdZoneAccessByLevel>> CreateADummyMembershipAdZoneAccessByLevelAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, int subscriberCountThreshold = 1, int uniqueAdLimit = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<MembershipAdZoneAccessByLevel>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // MembershipAdZoneAccessByLevel Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                mock.Object.SubscriberCountThreshold = subscriberCountThreshold;
                mock.Object.UniqueAdLimit = uniqueAdLimit;
                // Dynamic Linking
                // MembershipAdZoneAccessByLevel's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawMembershipAdZoneAccesses?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawMembershipLevels?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // MembershipAdZoneAccessByLevel's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy MembershipLevel.</summary>
        /// <returns>The new MembershipLevel.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<MembershipLevel>> CreateADummyMembershipLevelAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, int membershipID = 1, string rolesApplied = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<MembershipLevel>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // MembershipLevel Properties
                mock.Object.MembershipID = membershipID;
                mock.Object.RolesApplied = rolesApplied;
                // Dynamic Linking
                // MembershipLevel's Related Objects
                mock.Setup(m => m.Membership).Returns(() => RawMemberships?.FirstOrDefault(x => x.Object.ID == mock.Object.MembershipID)?.Object);
                // MembershipLevel's Associated Objects
                mock.Setup(m => m.MembershipAdZoneAccessByLevels).Returns(() => RawMembershipAdZoneAccessByLevels?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MembershipAdZoneAccessByLevel>());
                return mock;
            });
        }

        /// <summary>Creates a dummy MembershipRepeatType.</summary>
        /// <returns>The new MembershipRepeatType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<MembershipRepeatType>> CreateADummyMembershipRepeatTypeAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<MembershipRepeatType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // MembershipRepeatType Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // MembershipRepeatType's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawMemberships?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawRepeatTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // MembershipRepeatType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Payment.</summary>
        /// <returns>The new Payment.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Payment>> CreateADummyPaymentAsync(int id, string? key, int typeID = 1, int statusID = 1, string? jsonAttributes = null, string accountNumberLast4 = null!, decimal? amount = null!, string authCode = null!, DateTime? authDate = null!, bool? authorized = null!, string bankName = null!, int? billingContactID = null!, int? brandID = null!, string cardMask = null!, int? cardTypeID = null!, string checkNumber = null!, int? currencyID = null!, string cVV = null!, int? expirationMonth = null!, int? expirationYear = null!, string externalCustomerID = null!, string externalPaymentID = null!, string last4CardDigits = null!, string paymentData = null!, int? paymentMethodID = null!, bool? received = null!, DateTime? receivedDate = null!, string referenceNo = null!, string response = null!, string routingNumberLast4 = null!, DateTime? statusDate = null!, int? storeID = null!, string transactionNumber = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Payment>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // Payment Properties
                mock.Object.AccountNumberLast4 = accountNumberLast4;
                mock.Object.Amount = amount;
                mock.Object.AuthCode = authCode;
                mock.Object.AuthDate = authDate;
                mock.Object.Authorized = authorized;
                mock.Object.BankName = bankName;
                mock.Object.BillingContactID = billingContactID;
                mock.Object.BrandID = brandID;
                mock.Object.CardMask = cardMask;
                mock.Object.CardTypeID = cardTypeID;
                mock.Object.CheckNumber = checkNumber;
                mock.Object.CurrencyID = currencyID;
                mock.Object.CVV = cVV;
                mock.Object.ExpirationMonth = expirationMonth;
                mock.Object.ExpirationYear = expirationYear;
                mock.Object.ExternalCustomerID = externalCustomerID;
                mock.Object.ExternalPaymentID = externalPaymentID;
                mock.Object.Last4CardDigits = last4CardDigits;
                mock.Object.PaymentData = paymentData;
                mock.Object.PaymentMethodID = paymentMethodID;
                mock.Object.Received = received;
                mock.Object.ReceivedDate = receivedDate;
                mock.Object.ReferenceNo = referenceNo;
                mock.Object.Response = response;
                mock.Object.RoutingNumberLast4 = routingNumberLast4;
                mock.Object.StatusDate = statusDate;
                mock.Object.StoreID = storeID;
                mock.Object.TransactionNumber = transactionNumber;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawPaymentTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawPaymentStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // Payment's Related Objects
                mock.Setup(m => m.BillingContact).Returns(() => RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Currency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.CurrencyID)?.Object);
                mock.Setup(m => m.PaymentMethod).Returns(() => RawPaymentMethods?.FirstOrDefault(x => x.Object.ID == mock.Object.PaymentMethodID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // Payment's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PaymentMethod.</summary>
        /// <returns>The new PaymentMethod.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PaymentMethod>> CreateADummyPaymentMethodAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PaymentMethod>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // PaymentMethod Properties
                // Dynamic Linking
                // PaymentMethod's Related Objects
                // PaymentMethod's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PaymentStatus.</summary>
        /// <returns>The new PaymentStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PaymentStatus>> CreateADummyPaymentStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PaymentStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // PaymentStatus Properties
                // Dynamic Linking
                // PaymentStatus's Related Objects
                // PaymentStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PaymentType.</summary>
        /// <returns>The new PaymentType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PaymentType>> CreateADummyPaymentTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PaymentType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // PaymentType Properties
                // Dynamic Linking
                // PaymentType's Related Objects
                // PaymentType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy RepeatType.</summary>
        /// <returns>The new RepeatType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<RepeatType>> CreateADummyRepeatTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, int? initialBonusBillingPeriods = null!, int? repeatableBillingPeriods = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<RepeatType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // RepeatType Properties
                mock.Object.InitialBonusBillingPeriods = initialBonusBillingPeriods;
                mock.Object.RepeatableBillingPeriods = repeatableBillingPeriods;
                // Dynamic Linking
                // RepeatType's Related Objects
                // RepeatType's Associated Objects
                mock.Setup(m => m.SubscriptionTypeRepeatTypes).Returns(() => RawSubscriptionTypeRepeatTypes?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SubscriptionTypeRepeatType>());
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesInvoicePayment.</summary>
        /// <returns>The new SalesInvoicePayment.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesInvoicePayment>> CreateADummySalesInvoicePaymentAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesInvoicePayment>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // SalesInvoicePayment Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // SalesInvoicePayment's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawPayments?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesInvoicePayment's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesOrderPayment.</summary>
        /// <returns>The new SalesOrderPayment.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesOrderPayment>> CreateADummySalesOrderPaymentAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesOrderPayment>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // SalesOrderPayment Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // SalesOrderPayment's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawPayments?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesOrderPayment's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SalesReturnPayment.</summary>
        /// <returns>The new SalesReturnPayment.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SalesReturnPayment>> CreateADummySalesReturnPaymentAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SalesReturnPayment>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // SalesReturnPayment Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // SalesReturnPayment's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawPayments?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesReturnPayment's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Subscription.</summary>
        /// <returns>The new Subscription.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Subscription>> CreateADummySubscriptionAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, int statusID = 1, string? jsonAttributes = null, int? accountID = null!, bool autoRenew = false, int billingPeriodsPaid = 1, int billingPeriodsTotal = 1, bool canUpgrade = false, decimal? creditUponUpgrade = null!, DateTime? endsOn = null!, decimal fee = 0m, bool isAutoRefill = false, DateTime? lastPaidDate = null!, DateTime memberSince = default, string memo = null!, int? productMembershipLevelID = null!, int? productSubscriptionTypeID = null!, int repeatTypeID = 1, int? salesGroupID = null!, int? salesInvoiceID = null!, int? salesOrderID = null!, DateTime startsOn = default, int? userID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Subscription>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // Subscription Properties
                mock.Object.AccountID = accountID;
                mock.Object.AutoRenew = autoRenew;
                mock.Object.BillingPeriodsPaid = billingPeriodsPaid;
                mock.Object.BillingPeriodsTotal = billingPeriodsTotal;
                mock.Object.CanUpgrade = canUpgrade;
                mock.Object.CreditUponUpgrade = creditUponUpgrade;
                mock.Object.EndsOn = endsOn;
                mock.Object.Fee = fee;
                mock.Object.IsAutoRefill = isAutoRefill;
                mock.Object.LastPaidDate = lastPaidDate;
                mock.Object.MemberSince = memberSince;
                mock.Object.Memo = memo;
                mock.Object.ProductMembershipLevelID = productMembershipLevelID;
                mock.Object.ProductSubscriptionTypeID = productSubscriptionTypeID;
                mock.Object.RepeatTypeID = repeatTypeID;
                mock.Object.SalesGroupID = salesGroupID;
                mock.Object.SalesInvoiceID = salesInvoiceID;
                mock.Object.SalesOrderID = salesOrderID;
                mock.Object.StartsOn = startsOn;
                mock.Object.UserID = userID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawSubscriptionTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawSubscriptionStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // Subscription's Related Objects
                mock.Setup(m => m.Account).Returns(() => RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.ProductMembershipLevel).Returns(() => RawProductMembershipLevels?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductMembershipLevelID)?.Object);
                mock.Setup(m => m.ProductSubscriptionType).Returns(() => RawProductSubscriptionTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductSubscriptionTypeID)?.Object);
                mock.Setup(m => m.RepeatType).Returns(() => RawRepeatTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.RepeatTypeID)?.Object);
                mock.Setup(m => m.SalesGroup).Returns(() => RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupID)?.Object);
                mock.Setup(m => m.SalesInvoice).Returns(() => RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesInvoiceID)?.Object);
                mock.Setup(m => m.SalesOrder).Returns(() => RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesOrderID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // Subscription's Associated Objects
                mock.Setup(m => m.StoreSubscriptions).Returns(() => RawStoreSubscriptions?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreSubscription>());
                mock.Setup(m => m.SubscriptionHistories).Returns(() => RawSubscriptionHistories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SubscriptionHistory>());
                return mock;
            });
        }

        /// <summary>Creates a dummy SubscriptionHistory.</summary>
        /// <returns>The new SubscriptionHistory.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SubscriptionHistory>> CreateADummySubscriptionHistoryAsync(int id, string? key, string? jsonAttributes = null, int billingPeriodsPaid = 1, int masterID = 1, string memo = null!, DateTime paymentDate = default, bool paymentSuccess = false, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SubscriptionHistory>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // SubscriptionHistory Properties
                mock.Object.BillingPeriodsPaid = billingPeriodsPaid;
                mock.Object.MasterID = masterID;
                mock.Object.Memo = memo;
                mock.Object.PaymentDate = paymentDate;
                mock.Object.PaymentSuccess = paymentSuccess;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // SubscriptionHistory's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSubscriptions?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawPayments?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SubscriptionHistory's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SubscriptionStatus.</summary>
        /// <returns>The new SubscriptionStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SubscriptionStatus>> CreateADummySubscriptionStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SubscriptionStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SubscriptionStatus Properties
                // Dynamic Linking
                // SubscriptionStatus's Related Objects
                // SubscriptionStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy SubscriptionType.</summary>
        /// <returns>The new SubscriptionType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SubscriptionType>> CreateADummySubscriptionTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SubscriptionType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // SubscriptionType Properties
                // Dynamic Linking
                // SubscriptionType's Related Objects
                // SubscriptionType's Associated Objects
                mock.Setup(m => m.ProductSubscriptionTypes).Returns(() => RawProductSubscriptionTypes?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductSubscriptionType>());
                mock.Setup(m => m.SubscriptionTypeRepeatTypes).Returns(() => RawSubscriptionTypeRepeatTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SubscriptionTypeRepeatType>());
                return mock;
            });
        }

        /// <summary>Creates a dummy SubscriptionTypeRepeatType.</summary>
        /// <returns>The new SubscriptionTypeRepeatType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<SubscriptionTypeRepeatType>> CreateADummySubscriptionTypeRepeatTypeAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<SubscriptionTypeRepeatType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // SubscriptionTypeRepeatType Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // SubscriptionTypeRepeatType's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawSubscriptionTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawRepeatTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SubscriptionTypeRepeatType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Wallet.</summary>
        /// <returns>The new Wallet.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Wallet>> CreateADummyWalletAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int? accountContactID = null!, string accountNumber = null!, string bankName = null!, string cardHolderName = null!, string cardType = null!, string creditCardNumber = null!, int? currencyID = null!, int? expirationMonth = null!, int? expirationYear = null!, bool isDefault = false, string routingNumber = null!, string token = null!, int userID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Wallet>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // Wallet Properties
                mock.Object.AccountContactID = accountContactID;
                mock.Object.AccountNumber = accountNumber;
                mock.Object.BankName = bankName;
                mock.Object.CardHolderName = cardHolderName;
                mock.Object.CardType = cardType;
                mock.Object.CreditCardNumber = creditCardNumber;
                mock.Object.CurrencyID = currencyID;
                mock.Object.ExpirationMonth = expirationMonth;
                mock.Object.ExpirationYear = expirationYear;
                mock.Object.IsDefault = isDefault;
                mock.Object.RoutingNumber = routingNumber;
                mock.Object.Token = token;
                mock.Object.UserID = userID;
                // Dynamic Linking
                // Wallet's Related Objects
                mock.Setup(m => m.AccountContact).Returns(() => RawAccountContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.AccountContactID)?.Object);
                mock.Setup(m => m.Currency).Returns(() => RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.CurrencyID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // Wallet's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForPayments(MockingSetup mockingSetup)
        {
            Func<Membership> mockFuncMembership = () =>
            {
                var mock = new Mock<Membership>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Membership Properties
                // Dynamic Linking
                // Membership's Associated Objects
                mock.Setup(m => m.MembershipLevels).Returns(() => mockingSetup.RawMembershipLevels?.Where(x => x.Object.MembershipID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MembershipLevel>());
                mock.Setup(m => m.MembershipRepeatTypes).Returns(() => mockingSetup.RawMembershipRepeatTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MembershipRepeatType>());
                // Membership's Related Objects
                return mock.Object;
            };
            For<IMembership>().Use(() => mockFuncMembership());
            For<Membership>().Use(() => mockFuncMembership());
            Func<MembershipAdZoneAccess> mockFuncMembershipAdZoneAccess = () =>
            {
                var mock = new Mock<MembershipAdZoneAccess>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // MembershipAdZoneAccess Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawMemberships?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAdZoneAccesses?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // MembershipAdZoneAccess's Associated Objects
                mock.Setup(m => m.MembershipAdZoneAccessByLevels).Returns(() => mockingSetup.RawMembershipAdZoneAccessByLevels?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MembershipAdZoneAccessByLevel>());
                // MembershipAdZoneAccess's Related Objects
                return mock.Object;
            };
            For<IMembershipAdZoneAccess>().Use(() => mockFuncMembershipAdZoneAccess());
            For<MembershipAdZoneAccess>().Use(() => mockFuncMembershipAdZoneAccess());
            Func<MembershipAdZoneAccessByLevel> mockFuncMembershipAdZoneAccessByLevel = () =>
            {
                var mock = new Mock<MembershipAdZoneAccessByLevel>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // MembershipAdZoneAccessByLevel Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawMembershipAdZoneAccesses?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawMembershipLevels?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // MembershipAdZoneAccessByLevel's Associated Objects
                // MembershipAdZoneAccessByLevel's Related Objects
                return mock.Object;
            };
            For<IMembershipAdZoneAccessByLevel>().Use(() => mockFuncMembershipAdZoneAccessByLevel());
            For<MembershipAdZoneAccessByLevel>().Use(() => mockFuncMembershipAdZoneAccessByLevel());
            Func<MembershipLevel> mockFuncMembershipLevel = () =>
            {
                var mock = new Mock<MembershipLevel>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // MembershipLevel Properties
                // Dynamic Linking
                mock.Setup(m => m.Membership).Returns(() => mockingSetup.RawMemberships?.FirstOrDefault(x => x.Object.ID == mock.Object.MembershipID)?.Object);
                // MembershipLevel's Associated Objects
                mock.Setup(m => m.MembershipAdZoneAccessByLevels).Returns(() => mockingSetup.RawMembershipAdZoneAccessByLevels?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<MembershipAdZoneAccessByLevel>());
                // MembershipLevel's Related Objects
                return mock.Object;
            };
            For<IMembershipLevel>().Use(() => mockFuncMembershipLevel());
            For<MembershipLevel>().Use(() => mockFuncMembershipLevel());
            Func<MembershipRepeatType> mockFuncMembershipRepeatType = () =>
            {
                var mock = new Mock<MembershipRepeatType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // MembershipRepeatType Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawMemberships?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawRepeatTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // MembershipRepeatType's Associated Objects
                // MembershipRepeatType's Related Objects
                return mock.Object;
            };
            For<IMembershipRepeatType>().Use(() => mockFuncMembershipRepeatType());
            For<MembershipRepeatType>().Use(() => mockFuncMembershipRepeatType());
            Func<Payment> mockFuncPayment = () =>
            {
                var mock = new Mock<Payment>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Payment Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawPaymentTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawPaymentStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.BillingContact).Returns(() => mockingSetup.RawContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.BillingContactID)?.Object);
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Currency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.CurrencyID)?.Object);
                mock.Setup(m => m.PaymentMethod).Returns(() => mockingSetup.RawPaymentMethods?.FirstOrDefault(x => x.Object.ID == mock.Object.PaymentMethodID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // Payment's Associated Objects
                // Payment's Related Objects
                return mock.Object;
            };
            For<IPayment>().Use(() => mockFuncPayment());
            For<Payment>().Use(() => mockFuncPayment());
            Func<PaymentMethod> mockFuncPaymentMethod = () =>
            {
                var mock = new Mock<PaymentMethod>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PaymentMethod Properties
                // Dynamic Linking
                // PaymentMethod's Associated Objects
                // PaymentMethod's Related Objects
                return mock.Object;
            };
            For<IPaymentMethod>().Use(() => mockFuncPaymentMethod());
            For<PaymentMethod>().Use(() => mockFuncPaymentMethod());
            Func<PaymentStatus> mockFuncPaymentStatus = () =>
            {
                var mock = new Mock<PaymentStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PaymentStatus Properties
                // Dynamic Linking
                // PaymentStatus's Associated Objects
                // PaymentStatus's Related Objects
                return mock.Object;
            };
            For<IPaymentStatus>().Use(() => mockFuncPaymentStatus());
            For<PaymentStatus>().Use(() => mockFuncPaymentStatus());
            Func<PaymentType> mockFuncPaymentType = () =>
            {
                var mock = new Mock<PaymentType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PaymentType Properties
                // Dynamic Linking
                // PaymentType's Associated Objects
                // PaymentType's Related Objects
                return mock.Object;
            };
            For<IPaymentType>().Use(() => mockFuncPaymentType());
            For<PaymentType>().Use(() => mockFuncPaymentType());
            Func<RepeatType> mockFuncRepeatType = () =>
            {
                var mock = new Mock<RepeatType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // RepeatType Properties
                // Dynamic Linking
                // RepeatType's Associated Objects
                mock.Setup(m => m.SubscriptionTypeRepeatTypes).Returns(() => mockingSetup.RawSubscriptionTypeRepeatTypes?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SubscriptionTypeRepeatType>());
                // RepeatType's Related Objects
                return mock.Object;
            };
            For<IRepeatType>().Use(() => mockFuncRepeatType());
            For<RepeatType>().Use(() => mockFuncRepeatType());
            Func<SalesInvoicePayment> mockFuncSalesInvoicePayment = () =>
            {
                var mock = new Mock<SalesInvoicePayment>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesInvoicePayment Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawPayments?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesInvoicePayment's Associated Objects
                // SalesInvoicePayment's Related Objects
                return mock.Object;
            };
            For<ISalesInvoicePayment>().Use(() => mockFuncSalesInvoicePayment());
            For<SalesInvoicePayment>().Use(() => mockFuncSalesInvoicePayment());
            Func<SalesOrderPayment> mockFuncSalesOrderPayment = () =>
            {
                var mock = new Mock<SalesOrderPayment>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesOrderPayment Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawPayments?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesOrderPayment's Associated Objects
                // SalesOrderPayment's Related Objects
                return mock.Object;
            };
            For<ISalesOrderPayment>().Use(() => mockFuncSalesOrderPayment());
            For<SalesOrderPayment>().Use(() => mockFuncSalesOrderPayment());
            Func<SalesReturnPayment> mockFuncSalesReturnPayment = () =>
            {
                var mock = new Mock<SalesReturnPayment>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SalesReturnPayment Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSalesReturns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawPayments?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SalesReturnPayment's Associated Objects
                // SalesReturnPayment's Related Objects
                return mock.Object;
            };
            For<ISalesReturnPayment>().Use(() => mockFuncSalesReturnPayment());
            For<SalesReturnPayment>().Use(() => mockFuncSalesReturnPayment());
            Func<Subscription> mockFuncSubscription = () =>
            {
                var mock = new Mock<Subscription>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Subscription Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawSubscriptionTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawSubscriptionStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.Account).Returns(() => mockingSetup.RawAccounts?.FirstOrDefault(x => x.Object.ID == mock.Object.AccountID)?.Object);
                mock.Setup(m => m.ProductMembershipLevel).Returns(() => mockingSetup.RawProductMembershipLevels?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductMembershipLevelID)?.Object);
                mock.Setup(m => m.ProductSubscriptionType).Returns(() => mockingSetup.RawProductSubscriptionTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductSubscriptionTypeID)?.Object);
                mock.Setup(m => m.RepeatType).Returns(() => mockingSetup.RawRepeatTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.RepeatTypeID)?.Object);
                mock.Setup(m => m.SalesGroup).Returns(() => mockingSetup.RawSalesGroups?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesGroupID)?.Object);
                mock.Setup(m => m.SalesInvoice).Returns(() => mockingSetup.RawSalesInvoices?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesInvoiceID)?.Object);
                mock.Setup(m => m.SalesOrder).Returns(() => mockingSetup.RawSalesOrders?.FirstOrDefault(x => x.Object.ID == mock.Object.SalesOrderID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // Subscription's Associated Objects
                mock.Setup(m => m.StoreSubscriptions).Returns(() => mockingSetup.RawStoreSubscriptions?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<StoreSubscription>());
                mock.Setup(m => m.SubscriptionHistories).Returns(() => mockingSetup.RawSubscriptionHistories?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SubscriptionHistory>());
                // Subscription's Related Objects
                return mock.Object;
            };
            For<ISubscription>().Use(() => mockFuncSubscription());
            For<Subscription>().Use(() => mockFuncSubscription());
            Func<SubscriptionHistory> mockFuncSubscriptionHistory = () =>
            {
                var mock = new Mock<SubscriptionHistory>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SubscriptionHistory Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSubscriptions?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawPayments?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SubscriptionHistory's Associated Objects
                // SubscriptionHistory's Related Objects
                return mock.Object;
            };
            For<ISubscriptionHistory>().Use(() => mockFuncSubscriptionHistory());
            For<SubscriptionHistory>().Use(() => mockFuncSubscriptionHistory());
            Func<SubscriptionStatus> mockFuncSubscriptionStatus = () =>
            {
                var mock = new Mock<SubscriptionStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SubscriptionStatus Properties
                // Dynamic Linking
                // SubscriptionStatus's Associated Objects
                // SubscriptionStatus's Related Objects
                return mock.Object;
            };
            For<ISubscriptionStatus>().Use(() => mockFuncSubscriptionStatus());
            For<SubscriptionStatus>().Use(() => mockFuncSubscriptionStatus());
            Func<SubscriptionType> mockFuncSubscriptionType = () =>
            {
                var mock = new Mock<SubscriptionType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SubscriptionType Properties
                // Dynamic Linking
                // SubscriptionType's Associated Objects
                mock.Setup(m => m.ProductSubscriptionTypes).Returns(() => mockingSetup.RawProductSubscriptionTypes?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<ProductSubscriptionType>());
                mock.Setup(m => m.SubscriptionTypeRepeatTypes).Returns(() => mockingSetup.RawSubscriptionTypeRepeatTypes?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<SubscriptionTypeRepeatType>());
                // SubscriptionType's Related Objects
                return mock.Object;
            };
            For<ISubscriptionType>().Use(() => mockFuncSubscriptionType());
            For<SubscriptionType>().Use(() => mockFuncSubscriptionType());
            Func<SubscriptionTypeRepeatType> mockFuncSubscriptionTypeRepeatType = () =>
            {
                var mock = new Mock<SubscriptionTypeRepeatType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // SubscriptionTypeRepeatType Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawSubscriptionTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawRepeatTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // SubscriptionTypeRepeatType's Associated Objects
                // SubscriptionTypeRepeatType's Related Objects
                return mock.Object;
            };
            For<ISubscriptionTypeRepeatType>().Use(() => mockFuncSubscriptionTypeRepeatType());
            For<SubscriptionTypeRepeatType>().Use(() => mockFuncSubscriptionTypeRepeatType());
            Func<Wallet> mockFuncWallet = () =>
            {
                var mock = new Mock<Wallet>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Wallet Properties
                // Dynamic Linking
                mock.Setup(m => m.AccountContact).Returns(() => mockingSetup.RawAccountContacts?.FirstOrDefault(x => x.Object.ID == mock.Object.AccountContactID)?.Object);
                mock.Setup(m => m.Currency).Returns(() => mockingSetup.RawCurrencies?.FirstOrDefault(x => x.Object.ID == mock.Object.CurrencyID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // Wallet's Associated Objects
                // Wallet's Related Objects
                return mock.Object;
            };
            For<IWallet>().Use(() => mockFuncWallet());
            For<Wallet>().Use(() => mockFuncWallet());
        }
    }
}
