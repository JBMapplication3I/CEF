// <autogenerated>
// <copyright file="Tracking.MockingSetup.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Tracking section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by MockingSetupMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
// ReSharper disable CyclomaticComplexity, FunctionComplexityOverflow
#pragma warning disable CS0618 // Obsolete Items warnings ignored inside T4
#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously ignored inside T4
#nullable enable
namespace Clarity.Ecommerce.Testing
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Interfaces.DataModel;
    using Moq;

    public partial class MockingSetup
    {
        // Enable the entire schema on run
        public bool DoTracking { private get; set; }

        // Enable the tables specifically on run
        public bool DoCampaignTable { private get; set; }
        public bool DoCampaignAdTable { private get; set; }
        public bool DoCampaignStatusTable { private get; set; }
        public bool DoCampaignTypeTable { private get; set; }
        public bool DoEventTable { private get; set; }
        public bool DoEventStatusTable { private get; set; }
        public bool DoEventTypeTable { private get; set; }
        public bool DoIPOrganizationTable { private get; set; }
        public bool DoIPOrganizationStatusTable { private get; set; }
        public bool DoPageViewTable { private get; set; }
        public bool DoPageViewEventTable { private get; set; }
        public bool DoPageViewStatusTable { private get; set; }
        public bool DoPageViewTypeTable { private get; set; }
        public bool DoVisitTable { private get; set; }
        public bool DoVisitorTable { private get; set; }
        public bool DoVisitStatusTable { private get; set; }

        // Dirty Checking
        public bool CampaignDirty { private get; set; }
        public bool CampaignAdDirty { private get; set; }
        public bool CampaignStatusDirty { private get; set; }
        public bool CampaignTypeDirty { private get; set; }
        public bool EventDirty { private get; set; }
        public bool EventStatusDirty { private get; set; }
        public bool EventTypeDirty { private get; set; }
        public bool IPOrganizationDirty { private get; set; }
        public bool IPOrganizationStatusDirty { private get; set; }
        public bool PageViewDirty { private get; set; }
        public bool PageViewEventDirty { private get; set; }
        public bool PageViewStatusDirty { private get; set; }
        public bool PageViewTypeDirty { private get; set; }
        public bool VisitDirty { private get; set; }
        public bool VisitorDirty { private get; set; }
        public bool VisitStatusDirty { private get; set; }

        // Sets
        public Mock<DbSet<Campaign>>? Campaigns { get; private set; }
        public Mock<DbSet<CampaignAd>>? CampaignAds { get; private set; }
        public Mock<DbSet<CampaignStatus>>? CampaignStatuses { get; private set; }
        public Mock<DbSet<CampaignType>>? CampaignTypes { get; private set; }
        public Mock<DbSet<Event>>? Events { get; private set; }
        public Mock<DbSet<EventStatus>>? EventStatuses { get; private set; }
        public Mock<DbSet<EventType>>? EventTypes { get; private set; }
        public Mock<DbSet<IPOrganization>>? IPOrganizations { get; private set; }
        public Mock<DbSet<IPOrganizationStatus>>? IPOrganizationStatuses { get; private set; }
        public Mock<DbSet<PageView>>? PageViews { get; private set; }
        public Mock<DbSet<PageViewEvent>>? PageViewEvents { get; private set; }
        public Mock<DbSet<PageViewStatus>>? PageViewStatuses { get; private set; }
        public Mock<DbSet<PageViewType>>? PageViewTypes { get; private set; }
        public Mock<DbSet<Visit>>? Visits { get; private set; }
        public Mock<DbSet<Visitor>>? Visitors { get; private set; }
        public Mock<DbSet<VisitStatus>>? VisitStatuses { get; private set; }

        // Raw Data
        public List<Mock<Campaign>>? RawCampaigns { get; private set; }
        public List<Mock<CampaignAd>>? RawCampaignAds { get; private set; }
        public List<Mock<CampaignStatus>>? RawCampaignStatuses { get; private set; }
        public List<Mock<CampaignType>>? RawCampaignTypes { get; private set; }
        public List<Mock<Event>>? RawEvents { get; private set; }
        public List<Mock<EventStatus>>? RawEventStatuses { get; private set; }
        public List<Mock<EventType>>? RawEventTypes { get; private set; }
        public List<Mock<IPOrganization>>? RawIPOrganizations { get; private set; }
        public List<Mock<IPOrganizationStatus>>? RawIPOrganizationStatuses { get; private set; }
        public List<Mock<PageView>>? RawPageViews { get; private set; }
        public List<Mock<PageViewEvent>>? RawPageViewEvents { get; private set; }
        public List<Mock<PageViewStatus>>? RawPageViewStatuses { get; private set; }
        public List<Mock<PageViewType>>? RawPageViewTypes { get; private set; }
        public List<Mock<Visit>>? RawVisits { get; private set; }
        public List<Mock<Visitor>>? RawVisitors { get; private set; }
        public List<Mock<VisitStatus>>? RawVisitStatuses { get; private set; }

        [System.Diagnostics.DebuggerStepThrough]
        public async Task AssignSchemaMocksTrackingAsync(Mock<IClarityEcommerceEntities> context, bool dirtyOnly)
        {
            if (DoAll || DoTracking || (DoCampaignTable && (!dirtyOnly || CampaignDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCampaigns == null) { throw new InvalidOperationException("Raw Campaigns was null"); }
                    await InitializeMockSetFromListAsync(Campaigns, RawCampaigns).ConfigureAwait(false);
                    context.Setup(m => m.Campaigns).Returns(() => Campaigns?.Object!);
                    context.Setup(m => m.Set<Campaign>()).Returns(() => Campaigns?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoCampaignAdTable && (!dirtyOnly || CampaignAdDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCampaignAds == null) { throw new InvalidOperationException("Raw CampaignAds was null"); }
                    await InitializeMockSetFromListAsync(CampaignAds, RawCampaignAds).ConfigureAwait(false);
                    context.Setup(m => m.CampaignAds).Returns(() => CampaignAds?.Object!);
                    context.Setup(m => m.Set<CampaignAd>()).Returns(() => CampaignAds?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoCampaignStatusTable && (!dirtyOnly || CampaignStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCampaignStatuses == null) { throw new InvalidOperationException("Raw CampaignStatuses was null"); }
                    await InitializeMockSetFromListAsync(CampaignStatuses, RawCampaignStatuses).ConfigureAwait(false);
                    context.Setup(m => m.CampaignStatuses).Returns(() => CampaignStatuses?.Object!);
                    context.Setup(m => m.Set<CampaignStatus>()).Returns(() => CampaignStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoCampaignTypeTable && (!dirtyOnly || CampaignTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawCampaignTypes == null) { throw new InvalidOperationException("Raw CampaignTypes was null"); }
                    await InitializeMockSetFromListAsync(CampaignTypes, RawCampaignTypes).ConfigureAwait(false);
                    context.Setup(m => m.CampaignTypes).Returns(() => CampaignTypes?.Object!);
                    context.Setup(m => m.Set<CampaignType>()).Returns(() => CampaignTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoEventTable && (!dirtyOnly || EventDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawEvents == null) { throw new InvalidOperationException("Raw Events was null"); }
                    await InitializeMockSetFromListAsync(Events, RawEvents).ConfigureAwait(false);
                    context.Setup(m => m.Events).Returns(() => Events?.Object!);
                    context.Setup(m => m.Set<Event>()).Returns(() => Events?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoEventStatusTable && (!dirtyOnly || EventStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawEventStatuses == null) { throw new InvalidOperationException("Raw EventStatuses was null"); }
                    await InitializeMockSetFromListAsync(EventStatuses, RawEventStatuses).ConfigureAwait(false);
                    context.Setup(m => m.EventStatuses).Returns(() => EventStatuses?.Object!);
                    context.Setup(m => m.Set<EventStatus>()).Returns(() => EventStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoEventTypeTable && (!dirtyOnly || EventTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawEventTypes == null) { throw new InvalidOperationException("Raw EventTypes was null"); }
                    await InitializeMockSetFromListAsync(EventTypes, RawEventTypes).ConfigureAwait(false);
                    context.Setup(m => m.EventTypes).Returns(() => EventTypes?.Object!);
                    context.Setup(m => m.Set<EventType>()).Returns(() => EventTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoIPOrganizationTable && (!dirtyOnly || IPOrganizationDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawIPOrganizations == null) { throw new InvalidOperationException("Raw IPOrganizations was null"); }
                    await InitializeMockSetFromListAsync(IPOrganizations, RawIPOrganizations).ConfigureAwait(false);
                    context.Setup(m => m.IPOrganizations).Returns(() => IPOrganizations?.Object!);
                    context.Setup(m => m.Set<IPOrganization>()).Returns(() => IPOrganizations?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoIPOrganizationStatusTable && (!dirtyOnly || IPOrganizationStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawIPOrganizationStatuses == null) { throw new InvalidOperationException("Raw IPOrganizationStatuses was null"); }
                    await InitializeMockSetFromListAsync(IPOrganizationStatuses, RawIPOrganizationStatuses).ConfigureAwait(false);
                    context.Setup(m => m.IPOrganizationStatuses).Returns(() => IPOrganizationStatuses?.Object!);
                    context.Setup(m => m.Set<IPOrganizationStatus>()).Returns(() => IPOrganizationStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoPageViewTable && (!dirtyOnly || PageViewDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPageViews == null) { throw new InvalidOperationException("Raw PageViews was null"); }
                    await InitializeMockSetFromListAsync(PageViews, RawPageViews).ConfigureAwait(false);
                    context.Setup(m => m.PageViews).Returns(() => PageViews?.Object!);
                    context.Setup(m => m.Set<PageView>()).Returns(() => PageViews?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoPageViewEventTable && (!dirtyOnly || PageViewEventDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPageViewEvents == null) { throw new InvalidOperationException("Raw PageViewEvents was null"); }
                    await InitializeMockSetFromListAsync(PageViewEvents, RawPageViewEvents).ConfigureAwait(false);
                    context.Setup(m => m.PageViewEvents).Returns(() => PageViewEvents?.Object!);
                    context.Setup(m => m.Set<PageViewEvent>()).Returns(() => PageViewEvents?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoPageViewStatusTable && (!dirtyOnly || PageViewStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPageViewStatuses == null) { throw new InvalidOperationException("Raw PageViewStatuses was null"); }
                    await InitializeMockSetFromListAsync(PageViewStatuses, RawPageViewStatuses).ConfigureAwait(false);
                    context.Setup(m => m.PageViewStatuses).Returns(() => PageViewStatuses?.Object!);
                    context.Setup(m => m.Set<PageViewStatus>()).Returns(() => PageViewStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoPageViewTypeTable && (!dirtyOnly || PageViewTypeDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawPageViewTypes == null) { throw new InvalidOperationException("Raw PageViewTypes was null"); }
                    await InitializeMockSetFromListAsync(PageViewTypes, RawPageViewTypes).ConfigureAwait(false);
                    context.Setup(m => m.PageViewTypes).Returns(() => PageViewTypes?.Object!);
                    context.Setup(m => m.Set<PageViewType>()).Returns(() => PageViewTypes?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoVisitTable && (!dirtyOnly || VisitDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawVisits == null) { throw new InvalidOperationException("Raw Visits was null"); }
                    await InitializeMockSetFromListAsync(Visits, RawVisits).ConfigureAwait(false);
                    context.Setup(m => m.Visits).Returns(() => Visits?.Object!);
                    context.Setup(m => m.Set<Visit>()).Returns(() => Visits?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoVisitorTable && (!dirtyOnly || VisitorDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawVisitors == null) { throw new InvalidOperationException("Raw Visitors was null"); }
                    await InitializeMockSetFromListAsync(Visitors, RawVisitors).ConfigureAwait(false);
                    context.Setup(m => m.Visitors).Returns(() => Visitors?.Object!);
                    context.Setup(m => m.Set<Visitor>()).Returns(() => Visitors?.Object!);
                })
                .ConfigureAwait(false);
            }
            if (DoAll || DoTracking || (DoVisitStatusTable && (!dirtyOnly || VisitStatusDirty)))
            {
                var attempts = 0;
                await RetryHelper.RetryOnExceptionAsync(async () =>
                {
                    if (++attempts > 1) { System.Diagnostics.Debug.WriteLine($"Assign Schema Mocks is taking extra attempts: {attempts}"); }
                    if (RawVisitStatuses == null) { throw new InvalidOperationException("Raw VisitStatuses was null"); }
                    await InitializeMockSetFromListAsync(VisitStatuses, RawVisitStatuses).ConfigureAwait(false);
                    context.Setup(m => m.VisitStatuses).Returns(() => VisitStatuses?.Object!);
                    context.Setup(m => m.Set<VisitStatus>()).Returns(() => VisitStatuses?.Object!);
                })
                .ConfigureAwait(false);
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCampaignsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Campaign>> data)
        {
            if (!DoAll && !DoTracking && !DoCampaignTable) { return; }
            Campaigns ??= new Mock<DbSet<Campaign>>();
            await InitializeMockSetFromListAsync(Campaigns, data).ConfigureAwait(false);
            context.Setup(m => m.Campaigns).Returns(() => Campaigns.Object);
            context.Setup(m => m.Set<Campaign>()).Returns(() => Campaigns.Object);
            TableRecordCounts[typeof(Campaign)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Campaign)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Campaign)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Campaign)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCampaignAdsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CampaignAd>> data)
        {
            if (!DoAll && !DoTracking && !DoCampaignAdTable) { return; }
            CampaignAds ??= new Mock<DbSet<CampaignAd>>();
            await InitializeMockSetFromListAsync(CampaignAds, data).ConfigureAwait(false);
            context.Setup(m => m.CampaignAds).Returns(() => CampaignAds.Object);
            context.Setup(m => m.Set<CampaignAd>()).Returns(() => CampaignAds.Object);
            TableRecordCounts[typeof(CampaignAd)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CampaignAd)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CampaignAd)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCampaignStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CampaignStatus>> data)
        {
            if (!DoAll && !DoTracking && !DoCampaignStatusTable) { return; }
            CampaignStatuses ??= new Mock<DbSet<CampaignStatus>>();
            await InitializeMockSetFromListAsync(CampaignStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.CampaignStatuses).Returns(() => CampaignStatuses.Object);
            context.Setup(m => m.Set<CampaignStatus>()).Returns(() => CampaignStatuses.Object);
            TableRecordCounts[typeof(CampaignStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CampaignStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CampaignStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CampaignStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(CampaignStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetCampaignTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<CampaignType>> data)
        {
            if (!DoAll && !DoTracking && !DoCampaignTypeTable) { return; }
            CampaignTypes ??= new Mock<DbSet<CampaignType>>();
            await InitializeMockSetFromListAsync(CampaignTypes, data).ConfigureAwait(false);
            context.Setup(m => m.CampaignTypes).Returns(() => CampaignTypes.Object);
            context.Setup(m => m.Set<CampaignType>()).Returns(() => CampaignTypes.Object);
            TableRecordCounts[typeof(CampaignType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(CampaignType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(CampaignType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(CampaignType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(CampaignType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetEventsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Event>> data)
        {
            if (!DoAll && !DoTracking && !DoEventTable) { return; }
            Events ??= new Mock<DbSet<Event>>();
            await InitializeMockSetFromListAsync(Events, data).ConfigureAwait(false);
            context.Setup(m => m.Events).Returns(() => Events.Object);
            context.Setup(m => m.Set<Event>()).Returns(() => Events.Object);
            TableRecordCounts[typeof(Event)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Event)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Event)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Event)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetEventStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<EventStatus>> data)
        {
            if (!DoAll && !DoTracking && !DoEventStatusTable) { return; }
            EventStatuses ??= new Mock<DbSet<EventStatus>>();
            await InitializeMockSetFromListAsync(EventStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.EventStatuses).Returns(() => EventStatuses.Object);
            context.Setup(m => m.Set<EventStatus>()).Returns(() => EventStatuses.Object);
            TableRecordCounts[typeof(EventStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(EventStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(EventStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(EventStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(EventStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetEventTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<EventType>> data)
        {
            if (!DoAll && !DoTracking && !DoEventTypeTable) { return; }
            EventTypes ??= new Mock<DbSet<EventType>>();
            await InitializeMockSetFromListAsync(EventTypes, data).ConfigureAwait(false);
            context.Setup(m => m.EventTypes).Returns(() => EventTypes.Object);
            context.Setup(m => m.Set<EventType>()).Returns(() => EventTypes.Object);
            TableRecordCounts[typeof(EventType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(EventType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(EventType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(EventType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(EventType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetIPOrganizationsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<IPOrganization>> data)
        {
            if (!DoAll && !DoTracking && !DoIPOrganizationTable) { return; }
            IPOrganizations ??= new Mock<DbSet<IPOrganization>>();
            await InitializeMockSetFromListAsync(IPOrganizations, data).ConfigureAwait(false);
            context.Setup(m => m.IPOrganizations).Returns(() => IPOrganizations.Object);
            context.Setup(m => m.Set<IPOrganization>()).Returns(() => IPOrganizations.Object);
            TableRecordCounts[typeof(IPOrganization)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(IPOrganization)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(IPOrganization)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(IPOrganization)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetIPOrganizationStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<IPOrganizationStatus>> data)
        {
            if (!DoAll && !DoTracking && !DoIPOrganizationStatusTable) { return; }
            IPOrganizationStatuses ??= new Mock<DbSet<IPOrganizationStatus>>();
            await InitializeMockSetFromListAsync(IPOrganizationStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.IPOrganizationStatuses).Returns(() => IPOrganizationStatuses.Object);
            context.Setup(m => m.Set<IPOrganizationStatus>()).Returns(() => IPOrganizationStatuses.Object);
            TableRecordCounts[typeof(IPOrganizationStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(IPOrganizationStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(IPOrganizationStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(IPOrganizationStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(IPOrganizationStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPageViewsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PageView>> data)
        {
            if (!DoAll && !DoTracking && !DoPageViewTable) { return; }
            PageViews ??= new Mock<DbSet<PageView>>();
            await InitializeMockSetFromListAsync(PageViews, data).ConfigureAwait(false);
            context.Setup(m => m.PageViews).Returns(() => PageViews.Object);
            context.Setup(m => m.Set<PageView>()).Returns(() => PageViews.Object);
            TableRecordCounts[typeof(PageView)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PageView)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PageView)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PageView)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPageViewEventsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PageViewEvent>> data)
        {
            if (!DoAll && !DoTracking && !DoPageViewEventTable) { return; }
            PageViewEvents ??= new Mock<DbSet<PageViewEvent>>();
            await InitializeMockSetFromListAsync(PageViewEvents, data).ConfigureAwait(false);
            context.Setup(m => m.PageViewEvents).Returns(() => PageViewEvents.Object);
            context.Setup(m => m.Set<PageViewEvent>()).Returns(() => PageViewEvents.Object);
            TableRecordCounts[typeof(PageViewEvent)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PageViewEvent)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PageViewEvent)] = data[0].Object.CustomKey;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPageViewStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PageViewStatus>> data)
        {
            if (!DoAll && !DoTracking && !DoPageViewStatusTable) { return; }
            PageViewStatuses ??= new Mock<DbSet<PageViewStatus>>();
            await InitializeMockSetFromListAsync(PageViewStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.PageViewStatuses).Returns(() => PageViewStatuses.Object);
            context.Setup(m => m.Set<PageViewStatus>()).Returns(() => PageViewStatuses.Object);
            TableRecordCounts[typeof(PageViewStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PageViewStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PageViewStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PageViewStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(PageViewStatus)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetPageViewTypesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<PageViewType>> data)
        {
            if (!DoAll && !DoTracking && !DoPageViewTypeTable) { return; }
            PageViewTypes ??= new Mock<DbSet<PageViewType>>();
            await InitializeMockSetFromListAsync(PageViewTypes, data).ConfigureAwait(false);
            context.Setup(m => m.PageViewTypes).Returns(() => PageViewTypes.Object);
            context.Setup(m => m.Set<PageViewType>()).Returns(() => PageViewTypes.Object);
            TableRecordCounts[typeof(PageViewType)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(PageViewType)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(PageViewType)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(PageViewType)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(PageViewType)] = data[0].Object.DisplayName;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetVisitsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Visit>> data)
        {
            if (!DoAll && !DoTracking && !DoVisitTable) { return; }
            Visits ??= new Mock<DbSet<Visit>>();
            await InitializeMockSetFromListAsync(Visits, data).ConfigureAwait(false);
            context.Setup(m => m.Visits).Returns(() => Visits.Object);
            context.Setup(m => m.Set<Visit>()).Returns(() => Visits.Object);
            TableRecordCounts[typeof(Visit)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Visit)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Visit)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Visit)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetVisitorsAsync(Mock<IClarityEcommerceEntities> context, List<Mock<Visitor>> data)
        {
            if (!DoAll && !DoTracking && !DoVisitorTable) { return; }
            Visitors ??= new Mock<DbSet<Visitor>>();
            await InitializeMockSetFromListAsync(Visitors, data).ConfigureAwait(false);
            context.Setup(m => m.Visitors).Returns(() => Visitors.Object);
            context.Setup(m => m.Set<Visitor>()).Returns(() => Visitors.Object);
            TableRecordCounts[typeof(Visitor)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(Visitor)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(Visitor)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(Visitor)] = data[0].Object.Name;
            }
        }

        [System.Diagnostics.DebuggerStepThrough]
        private async Task InitializeMockSetVisitStatusesAsync(Mock<IClarityEcommerceEntities> context, List<Mock<VisitStatus>> data)
        {
            if (!DoAll && !DoTracking && !DoVisitStatusTable) { return; }
            VisitStatuses ??= new Mock<DbSet<VisitStatus>>();
            await InitializeMockSetFromListAsync(VisitStatuses, data).ConfigureAwait(false);
            context.Setup(m => m.VisitStatuses).Returns(() => VisitStatuses.Object);
            context.Setup(m => m.Set<VisitStatus>()).Returns(() => VisitStatuses.Object);
            TableRecordCounts[typeof(VisitStatus)] = data.Count;
            if (data.Any())
            {
                TableFirstRecordIDs[typeof(VisitStatus)] = data[0].Object.ID;
                TableFirstRecordCustomKeys[typeof(VisitStatus)] = data[0].Object.CustomKey;
                TableFirstRecordNames[typeof(VisitStatus)] = data[0].Object.Name;
                TableFirstRecordDisplayNames[typeof(VisitStatus)] = data[0].Object.DisplayName;
            }
        }

        /// <summary>Creates a dummy Campaign.</summary>
        /// <returns>The new Campaign.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Campaign>> CreateADummyCampaignAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, int statusID = 1, string? jsonAttributes = null, DateTime? actualEnd = null!, DateTime? actualStart = null!, decimal? budgetedCost = null!, string codeName = null!, int? createdByUserID = null!, decimal? exchangeRate = null!, int? expectedResponse = null!, decimal? expectedRevenue = null!, bool? isTemplate = null!, string message = null!, string objective = null!, decimal? otherCost = null!, string promotionCodeName = null!, DateTime? proposedEnd = null!, DateTime? proposedStart = null!, decimal? totalActualCost = null!, decimal? totalCampaignActivityActualCost = null!, int? uTCConversionTimeZoneCode = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Campaign>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // Campaign Properties
                mock.Object.ActualEnd = actualEnd;
                mock.Object.ActualStart = actualStart;
                mock.Object.BudgetedCost = budgetedCost;
                mock.Object.CodeName = codeName;
                mock.Object.CreatedByUserID = createdByUserID;
                mock.Object.ExchangeRate = exchangeRate;
                mock.Object.ExpectedResponse = expectedResponse;
                mock.Object.ExpectedRevenue = expectedRevenue;
                mock.Object.IsTemplate = isTemplate;
                mock.Object.Message = message;
                mock.Object.Objective = objective;
                mock.Object.OtherCost = otherCost;
                mock.Object.PromotionCodeName = promotionCodeName;
                mock.Object.ProposedEnd = proposedEnd;
                mock.Object.ProposedStart = proposedStart;
                mock.Object.TotalActualCost = totalActualCost;
                mock.Object.TotalCampaignActivityActualCost = totalCampaignActivityActualCost;
                mock.Object.UTCConversionTimeZoneCode = uTCConversionTimeZoneCode;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawCampaignTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawCampaignStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // Campaign's Related Objects
                mock.Setup(m => m.CreatedByUser).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.CreatedByUserID)?.Object);
                // Campaign's Associated Objects
                mock.Setup(m => m.CampaignAds).Returns(() => RawCampaignAds?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CampaignAd>());
                return mock;
            });
        }

        /// <summary>Creates a dummy CampaignAd.</summary>
        /// <returns>The new CampaignAd.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CampaignAd>> CreateADummyCampaignAdAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CampaignAd>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // CampaignAd Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // CampaignAd's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawCampaigns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawAds?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CampaignAd's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CampaignStatus.</summary>
        /// <returns>The new CampaignStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CampaignStatus>> CreateADummyCampaignStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CampaignStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // CampaignStatus Properties
                // Dynamic Linking
                // CampaignStatus's Related Objects
                // CampaignStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy CampaignType.</summary>
        /// <returns>The new CampaignType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<CampaignType>> CreateADummyCampaignTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, int? brandID = null!, int? storeID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<CampaignType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // CampaignType Properties
                mock.Object.BrandID = brandID;
                mock.Object.StoreID = storeID;
                // Dynamic Linking
                // CampaignType's Related Objects
                mock.Setup(m => m.Brand).Returns(() => RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Store).Returns(() => RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // CampaignType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Event.</summary>
        /// <returns>The new Event.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Event>> CreateADummyEventAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, int statusID = 1, int? contactID = null, string? jsonAttributes = null, int? addressID = null!, string browser = null!, int? campaignID = null!, bool? containsSocialProfile = null!, int? delta = null!, bool? didBounce = null!, int? duration = null!, DateTime? endedOn = null!, string entryPage = null!, string exitPage = null!, string flash = null!, string iPAddress = null!, int? iPOrganizationID = null!, bool? isFirstTrigger = null!, string keywords = null!, string language = null!, string operatingSystem = null!, string partitionKey = null!, string referrer = null!, string referringHost = null!, string rowKey = null!, int? score = null!, int? siteDomainID = null!, int? source = null!, DateTime? startedOn = null!, string time = null!, int? totalTriggers = null!, int? userID = null!, int? visitID = null!, int? visitorID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Event>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // IHaveANullableContactBase Properties
                mock.Object.ContactID = contactID;
                // Event Properties
                mock.Object.AddressID = addressID;
                mock.Object.Browser = browser;
                mock.Object.CampaignID = campaignID;
                mock.Object.ContainsSocialProfile = containsSocialProfile;
                mock.Object.Delta = delta;
                mock.Object.DidBounce = didBounce;
                mock.Object.Duration = duration;
                mock.Object.EndedOn = endedOn;
                mock.Object.EntryPage = entryPage;
                mock.Object.ExitPage = exitPage;
                mock.Object.Flash = flash;
                mock.Object.IPAddress = iPAddress;
                mock.Object.IPOrganizationID = iPOrganizationID;
                mock.Object.IsFirstTrigger = isFirstTrigger;
                mock.Object.Keywords = keywords;
                mock.Object.Language = language;
                mock.Object.OperatingSystem = operatingSystem;
                mock.Object.PartitionKey = partitionKey;
                mock.Object.Referrer = referrer;
                mock.Object.ReferringHost = referringHost;
                mock.Object.RowKey = rowKey;
                mock.Object.Score = score;
                mock.Object.SiteDomainID = siteDomainID;
                mock.Object.Source = source;
                mock.Object.StartedOn = startedOn;
                mock.Object.Time = time;
                mock.Object.TotalTriggers = totalTriggers;
                mock.Object.UserID = userID;
                mock.Object.VisitID = visitID;
                mock.Object.VisitorID = visitorID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawEventStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => RawContacts == null || mock.Object.ContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // Event's Related Objects
                mock.Setup(m => m.Address).Returns(() => RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                mock.Setup(m => m.Campaign).Returns(() => RawCampaigns?.FirstOrDefault(x => x.Object.ID == mock.Object.CampaignID)?.Object);
                mock.Setup(m => m.IPOrganization).Returns(() => RawIPOrganizations?.FirstOrDefault(x => x.Object.ID == mock.Object.IPOrganizationID)?.Object);
                mock.Setup(m => m.SiteDomain).Returns(() => RawSiteDomains?.FirstOrDefault(x => x.Object.ID == mock.Object.SiteDomainID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Visit).Returns(() => RawVisits?.FirstOrDefault(x => x.Object.ID == mock.Object.VisitID)?.Object);
                mock.Setup(m => m.Visitor).Returns(() => RawVisitors?.FirstOrDefault(x => x.Object.ID == mock.Object.VisitorID)?.Object);
                // Event's Associated Objects
                mock.Setup(m => m.PageViewEvents).Returns(() => RawPageViewEvents?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PageViewEvent>());
                return mock;
            });
        }

        /// <summary>Creates a dummy EventStatus.</summary>
        /// <returns>The new EventStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<EventStatus>> CreateADummyEventStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<EventStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // EventStatus Properties
                // Dynamic Linking
                // EventStatus's Related Objects
                // EventStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy EventType.</summary>
        /// <returns>The new EventType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<EventType>> CreateADummyEventTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<EventType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // EventType Properties
                // Dynamic Linking
                // EventType's Related Objects
                // EventType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy IPOrganization.</summary>
        /// <returns>The new IPOrganization.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<IPOrganization>> CreateADummyIPOrganizationAsync(int id, string? key, string? name, string? desc = null, int statusID = 1, string? jsonAttributes = null, int? addressID = null!, string iPAddress = null!, int? primaryUserID = null!, int? score = null!, string visitorKey = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<IPOrganization>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // IPOrganization Properties
                mock.Object.AddressID = addressID;
                mock.Object.IPAddress = iPAddress;
                mock.Object.PrimaryUserID = primaryUserID;
                mock.Object.Score = score;
                mock.Object.VisitorKey = visitorKey;
                // Dynamic Linking
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawIPOrganizationStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IPOrganization's Related Objects
                mock.Setup(m => m.Address).Returns(() => RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                mock.Setup(m => m.PrimaryUser).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.PrimaryUserID)?.Object);
                // IPOrganization's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy IPOrganizationStatus.</summary>
        /// <returns>The new IPOrganizationStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<IPOrganizationStatus>> CreateADummyIPOrganizationStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<IPOrganizationStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // IPOrganizationStatus Properties
                // Dynamic Linking
                // IPOrganizationStatus's Related Objects
                // IPOrganizationStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PageView.</summary>
        /// <returns>The new PageView.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PageView>> CreateADummyPageViewAsync(int id, string? key, string? name, string? desc = null, int typeID = 1, int statusID = 1, int? contactID = null, string? jsonAttributes = null, int? addressID = null!, string browser = null!, int? campaignID = null!, int? categoryID = null!, bool? containsSocialProfile = null!, int? delta = null!, bool? didBounce = null!, int? duration = null!, DateTime? endedOn = null!, string entryPage = null!, string exitPage = null!, string flash = null!, string iPAddress = null!, int? iPOrganizationID = null!, bool? isFirstTrigger = null!, string keywords = null!, string language = null!, string operatingSystem = null!, string partitionKey = null!, int? productID = null!, string referrer = null!, string referringHost = null!, string rowKey = null!, int? score = null!, int? siteDomainID = null!, int? source = null!, DateTime? startedOn = null!, string time = null!, string title = null!, int? totalTriggers = null!, string uRI = null!, int? userID = null!, DateTime? viewedOn = null!, string visitKey = null!, int? visitorID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PageView>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveATypeBase Properties
                mock.Object.TypeID = typeID;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // IHaveANullableContactBase Properties
                mock.Object.ContactID = contactID;
                // PageView Properties
                mock.Object.AddressID = addressID;
                mock.Object.Browser = browser;
                mock.Object.CampaignID = campaignID;
                mock.Object.CategoryID = categoryID;
                mock.Object.ContainsSocialProfile = containsSocialProfile;
                mock.Object.Delta = delta;
                mock.Object.DidBounce = didBounce;
                mock.Object.Duration = duration;
                mock.Object.EndedOn = endedOn;
                mock.Object.EntryPage = entryPage;
                mock.Object.ExitPage = exitPage;
                mock.Object.Flash = flash;
                mock.Object.IPAddress = iPAddress;
                mock.Object.IPOrganizationID = iPOrganizationID;
                mock.Object.IsFirstTrigger = isFirstTrigger;
                mock.Object.Keywords = keywords;
                mock.Object.Language = language;
                mock.Object.OperatingSystem = operatingSystem;
                mock.Object.PartitionKey = partitionKey;
                mock.Object.ProductID = productID;
                mock.Object.Referrer = referrer;
                mock.Object.ReferringHost = referringHost;
                mock.Object.RowKey = rowKey;
                mock.Object.Score = score;
                mock.Object.SiteDomainID = siteDomainID;
                mock.Object.Source = source;
                mock.Object.StartedOn = startedOn;
                mock.Object.Time = time;
                mock.Object.Title = title;
                mock.Object.TotalTriggers = totalTriggers;
                mock.Object.URI = uRI;
                mock.Object.UserID = userID;
                mock.Object.ViewedOn = viewedOn;
                mock.Object.VisitKey = visitKey;
                mock.Object.VisitorID = visitorID;
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => RawPageViewTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawPageViewStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => RawContacts == null || mock.Object.ContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // PageView's Related Objects
                mock.Setup(m => m.Address).Returns(() => RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                mock.Setup(m => m.Campaign).Returns(() => RawCampaigns?.FirstOrDefault(x => x.Object.ID == mock.Object.CampaignID)?.Object);
                mock.Setup(m => m.Category).Returns(() => RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.CategoryID)?.Object);
                mock.Setup(m => m.IPOrganization).Returns(() => RawIPOrganizations?.FirstOrDefault(x => x.Object.ID == mock.Object.IPOrganizationID)?.Object);
                mock.Setup(m => m.Product).Returns(() => RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.SiteDomain).Returns(() => RawSiteDomains?.FirstOrDefault(x => x.Object.ID == mock.Object.SiteDomainID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Visitor).Returns(() => RawVisitors?.FirstOrDefault(x => x.Object.ID == mock.Object.VisitorID)?.Object);
                // PageView's Associated Objects
                mock.Setup(m => m.PageViewEvents).Returns(() => RawPageViewEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PageViewEvent>());
                return mock;
            });
        }

        /// <summary>Creates a dummy PageViewEvent.</summary>
        /// <returns>The new PageViewEvent.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PageViewEvent>> CreateADummyPageViewEventAsync(int id, string? key, string? jsonAttributes = null, int masterID = 1, int slaveID = 1, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PageViewEvent>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // PageViewEvent Properties
                mock.Object.MasterID = masterID;
                mock.Object.SlaveID = slaveID;
                // Dynamic Linking
                // PageViewEvent's Related Objects
                mock.Setup(m => m.Master).Returns(() => RawPageViews?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => RawEvents?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PageViewEvent's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PageViewStatus.</summary>
        /// <returns>The new PageViewStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PageViewStatus>> CreateADummyPageViewStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PageViewStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // PageViewStatus Properties
                // Dynamic Linking
                // PageViewStatus's Related Objects
                // PageViewStatus's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy PageViewType.</summary>
        /// <returns>The new PageViewType.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<PageViewType>> CreateADummyPageViewTypeAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<PageViewType>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // PageViewType Properties
                // Dynamic Linking
                // PageViewType's Related Objects
                // PageViewType's Associated Objects
                return mock;
            });
        }

        /// <summary>Creates a dummy Visit.</summary>
        /// <returns>The new Visit.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Visit>> CreateADummyVisitAsync(int id, string? key, string? name, string? desc = null, int statusID = 1, int? contactID = null, string? jsonAttributes = null, int? addressID = null!, string browser = null!, int? campaignID = null!, bool? containsSocialProfile = null!, int? delta = null!, bool? didBounce = null!, int? duration = null!, DateTime? endedOn = null!, string entryPage = null!, string exitPage = null!, string flash = null!, string iPAddress = null!, int? iPOrganizationID = null!, bool? isFirstTrigger = null!, string keywords = null!, string language = null!, string operatingSystem = null!, string partitionKey = null!, string referrer = null!, string referringHost = null!, string rowKey = null!, int? score = null!, int? siteDomainID = null!, int? source = null!, DateTime? startedOn = null!, string time = null!, int? totalTriggers = null!, int? userID = null!, int? visitorID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Visit>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IHaveAStatusBase Properties
                mock.Object.StatusID = statusID;
                // IHaveANullableContactBase Properties
                mock.Object.ContactID = contactID;
                // Visit Properties
                mock.Object.AddressID = addressID;
                mock.Object.Browser = browser;
                mock.Object.CampaignID = campaignID;
                mock.Object.ContainsSocialProfile = containsSocialProfile;
                mock.Object.Delta = delta;
                mock.Object.DidBounce = didBounce;
                mock.Object.Duration = duration;
                mock.Object.EndedOn = endedOn;
                mock.Object.EntryPage = entryPage;
                mock.Object.ExitPage = exitPage;
                mock.Object.Flash = flash;
                mock.Object.IPAddress = iPAddress;
                mock.Object.IPOrganizationID = iPOrganizationID;
                mock.Object.IsFirstTrigger = isFirstTrigger;
                mock.Object.Keywords = keywords;
                mock.Object.Language = language;
                mock.Object.OperatingSystem = operatingSystem;
                mock.Object.PartitionKey = partitionKey;
                mock.Object.Referrer = referrer;
                mock.Object.ReferringHost = referringHost;
                mock.Object.RowKey = rowKey;
                mock.Object.Score = score;
                mock.Object.SiteDomainID = siteDomainID;
                mock.Object.Source = source;
                mock.Object.StartedOn = startedOn;
                mock.Object.Time = time;
                mock.Object.TotalTriggers = totalTriggers;
                mock.Object.UserID = userID;
                mock.Object.VisitorID = visitorID;
                // Dynamic Linking
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => RawVisitStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => RawContacts == null || mock.Object.ContactID == null ? null : RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                // Visit's Related Objects
                mock.Setup(m => m.Address).Returns(() => RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                mock.Setup(m => m.Campaign).Returns(() => RawCampaigns?.FirstOrDefault(x => x.Object.ID == mock.Object.CampaignID)?.Object);
                mock.Setup(m => m.IPOrganization).Returns(() => RawIPOrganizations?.FirstOrDefault(x => x.Object.ID == mock.Object.IPOrganizationID)?.Object);
                mock.Setup(m => m.SiteDomain).Returns(() => RawSiteDomains?.FirstOrDefault(x => x.Object.ID == mock.Object.SiteDomainID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Visitor).Returns(() => RawVisitors?.FirstOrDefault(x => x.Object.ID == mock.Object.VisitorID)?.Object);
                // Visit's Associated Objects
                mock.Setup(m => m.Events).Returns(() => RawEvents?.Where(x => x.Object.VisitID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Event>());
                return mock;
            });
        }

        /// <summary>Creates a dummy Visitor.</summary>
        /// <returns>The new Visitor.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<Visitor>> CreateADummyVisitorAsync(int id, string? key, string? name, string? desc = null, string? jsonAttributes = null, int? addressID = null!, string iPAddress = null!, int? iPOrganizationID = null!, int? score = null!, int? userID = null!, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<Visitor>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // Visitor Properties
                mock.Object.AddressID = addressID;
                mock.Object.IPAddress = iPAddress;
                mock.Object.IPOrganizationID = iPOrganizationID;
                mock.Object.Score = score;
                mock.Object.UserID = userID;
                // Dynamic Linking
                // Visitor's Related Objects
                mock.Setup(m => m.Address).Returns(() => RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                mock.Setup(m => m.IPOrganization).Returns(() => RawIPOrganizations?.FirstOrDefault(x => x.Object.ID == mock.Object.IPOrganizationID)?.Object);
                mock.Setup(m => m.User).Returns(() => RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // Visitor's Associated Objects
                mock.Setup(m => m.Visits).Returns(() => RawVisits?.Where(x => x.Object.VisitorID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Visit>());
                return mock;
            });
        }

        /// <summary>Creates a dummy VisitStatus.</summary>
        /// <returns>The new VisitStatus.</returns>
        [System.Diagnostics.DebuggerStepThrough]
        private Task<Mock<VisitStatus>> CreateADummyVisitStatusAsync(int id, string? key, string? name, string? desc = null, int? sortOrder = null, string? displayName = null, string? translationKey = null, string? jsonAttributes = null, bool? active = null)
        {
            return Task.Run(async () =>
            {
                var mock = new Mock<VisitStatus>();
                mock.SetupAllProperties();
                // IBase Properties
                mock.Object.ID = id;
                mock.Object.CustomKey = key;
                mock.Object.Active = active.HasValue ? active.Value : !DoInactives;
                mock.Object.CreatedDate = CreatedDate;
                mock.Object.UpdatedDate = null;
                mock.Object.Hash = null;
                mock.Object.JsonAttributes = jsonAttributes;
                // INameableBase Properties
                mock.Object.Name = name;
                mock.Object.Description = desc;
                // IDisplayableBase Properties
                mock.Object.SortOrder = sortOrder;
                mock.Object.DisplayName = displayName;
                mock.Object.TranslationKey = translationKey;
                // VisitStatus Properties
                // Dynamic Linking
                // VisitStatus's Related Objects
                // VisitStatus's Associated Objects
                return mock;
            });
        }
    }
}

namespace Clarity.Ecommerce.DataModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Moq;

    internal partial class DataModelTestingRegistry
    {
        private void CreateRegistryForTracking(MockingSetup mockingSetup)
        {
            Func<Campaign> mockFuncCampaign = () =>
            {
                var mock = new Mock<Campaign>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Campaign Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawCampaignTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawCampaignStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.CreatedByUser).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.CreatedByUserID)?.Object);
                // Campaign's Associated Objects
                mock.Setup(m => m.CampaignAds).Returns(() => mockingSetup.RawCampaignAds?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<CampaignAd>());
                // Campaign's Related Objects
                return mock.Object;
            };
            For<ICampaign>().Use(() => mockFuncCampaign());
            For<Campaign>().Use(() => mockFuncCampaign());
            Func<CampaignAd> mockFuncCampaignAd = () =>
            {
                var mock = new Mock<CampaignAd>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CampaignAd Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawCampaigns?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawAds?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // CampaignAd's Associated Objects
                // CampaignAd's Related Objects
                return mock.Object;
            };
            For<ICampaignAd>().Use(() => mockFuncCampaignAd());
            For<CampaignAd>().Use(() => mockFuncCampaignAd());
            Func<CampaignStatus> mockFuncCampaignStatus = () =>
            {
                var mock = new Mock<CampaignStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CampaignStatus Properties
                // Dynamic Linking
                // CampaignStatus's Associated Objects
                // CampaignStatus's Related Objects
                return mock.Object;
            };
            For<ICampaignStatus>().Use(() => mockFuncCampaignStatus());
            For<CampaignStatus>().Use(() => mockFuncCampaignStatus());
            Func<CampaignType> mockFuncCampaignType = () =>
            {
                var mock = new Mock<CampaignType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // CampaignType Properties
                // Dynamic Linking
                mock.Setup(m => m.Brand).Returns(() => mockingSetup.RawBrands?.FirstOrDefault(x => x.Object.ID == mock.Object.BrandID)?.Object);
                mock.Setup(m => m.Store).Returns(() => mockingSetup.RawStores?.FirstOrDefault(x => x.Object.ID == mock.Object.StoreID)?.Object);
                // CampaignType's Associated Objects
                // CampaignType's Related Objects
                return mock.Object;
            };
            For<ICampaignType>().Use(() => mockFuncCampaignType());
            For<CampaignType>().Use(() => mockFuncCampaignType());
            Func<Event> mockFuncEvent = () =>
            {
                var mock = new Mock<Event>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Event Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawEventTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawEventStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                mock.Setup(m => m.Address).Returns(() => mockingSetup.RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                mock.Setup(m => m.Campaign).Returns(() => mockingSetup.RawCampaigns?.FirstOrDefault(x => x.Object.ID == mock.Object.CampaignID)?.Object);
                mock.Setup(m => m.IPOrganization).Returns(() => mockingSetup.RawIPOrganizations?.FirstOrDefault(x => x.Object.ID == mock.Object.IPOrganizationID)?.Object);
                mock.Setup(m => m.SiteDomain).Returns(() => mockingSetup.RawSiteDomains?.FirstOrDefault(x => x.Object.ID == mock.Object.SiteDomainID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Visit).Returns(() => mockingSetup.RawVisits?.FirstOrDefault(x => x.Object.ID == mock.Object.VisitID)?.Object);
                mock.Setup(m => m.Visitor).Returns(() => mockingSetup.RawVisitors?.FirstOrDefault(x => x.Object.ID == mock.Object.VisitorID)?.Object);
                // Event's Associated Objects
                mock.Setup(m => m.PageViewEvents).Returns(() => mockingSetup.RawPageViewEvents?.Where(x => x.Object.SlaveID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PageViewEvent>());
                // Event's Related Objects
                return mock.Object;
            };
            For<IEvent>().Use(() => mockFuncEvent());
            For<Event>().Use(() => mockFuncEvent());
            Func<EventStatus> mockFuncEventStatus = () =>
            {
                var mock = new Mock<EventStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // EventStatus Properties
                // Dynamic Linking
                // EventStatus's Associated Objects
                // EventStatus's Related Objects
                return mock.Object;
            };
            For<IEventStatus>().Use(() => mockFuncEventStatus());
            For<EventStatus>().Use(() => mockFuncEventStatus());
            Func<EventType> mockFuncEventType = () =>
            {
                var mock = new Mock<EventType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // EventType Properties
                // Dynamic Linking
                // EventType's Associated Objects
                // EventType's Related Objects
                return mock.Object;
            };
            For<IEventType>().Use(() => mockFuncEventType());
            For<EventType>().Use(() => mockFuncEventType());
            Func<IPOrganization> mockFuncIPOrganization = () =>
            {
                var mock = new Mock<IPOrganization>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // IPOrganization Properties
                // Dynamic Linking
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawIPOrganizationStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                mock.Setup(m => m.Address).Returns(() => mockingSetup.RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                mock.Setup(m => m.PrimaryUser).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.PrimaryUserID)?.Object);
                // IPOrganization's Associated Objects
                // IPOrganization's Related Objects
                return mock.Object;
            };
            For<IIPOrganization>().Use(() => mockFuncIPOrganization());
            For<IPOrganization>().Use(() => mockFuncIPOrganization());
            Func<IPOrganizationStatus> mockFuncIPOrganizationStatus = () =>
            {
                var mock = new Mock<IPOrganizationStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // IPOrganizationStatus Properties
                // Dynamic Linking
                // IPOrganizationStatus's Associated Objects
                // IPOrganizationStatus's Related Objects
                return mock.Object;
            };
            For<IIPOrganizationStatus>().Use(() => mockFuncIPOrganizationStatus());
            For<IPOrganizationStatus>().Use(() => mockFuncIPOrganizationStatus());
            Func<PageView> mockFuncPageView = () =>
            {
                var mock = new Mock<PageView>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PageView Properties
                // Dynamic Linking
                // IHaveATypeBase Properties
                mock.Setup(m => m.Type).Returns(() => mockingSetup.RawPageViewTypes?.FirstOrDefault(x => x.Object.ID == mock.Object.TypeID)?.Object);
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawPageViewStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                mock.Setup(m => m.Address).Returns(() => mockingSetup.RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                mock.Setup(m => m.Campaign).Returns(() => mockingSetup.RawCampaigns?.FirstOrDefault(x => x.Object.ID == mock.Object.CampaignID)?.Object);
                mock.Setup(m => m.Category).Returns(() => mockingSetup.RawCategories?.FirstOrDefault(x => x.Object.ID == mock.Object.CategoryID)?.Object);
                mock.Setup(m => m.IPOrganization).Returns(() => mockingSetup.RawIPOrganizations?.FirstOrDefault(x => x.Object.ID == mock.Object.IPOrganizationID)?.Object);
                mock.Setup(m => m.Product).Returns(() => mockingSetup.RawProducts?.FirstOrDefault(x => x.Object.ID == mock.Object.ProductID)?.Object);
                mock.Setup(m => m.SiteDomain).Returns(() => mockingSetup.RawSiteDomains?.FirstOrDefault(x => x.Object.ID == mock.Object.SiteDomainID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Visitor).Returns(() => mockingSetup.RawVisitors?.FirstOrDefault(x => x.Object.ID == mock.Object.VisitorID)?.Object);
                // PageView's Associated Objects
                mock.Setup(m => m.PageViewEvents).Returns(() => mockingSetup.RawPageViewEvents?.Where(x => x.Object.MasterID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<PageViewEvent>());
                // PageView's Related Objects
                return mock.Object;
            };
            For<IPageView>().Use(() => mockFuncPageView());
            For<PageView>().Use(() => mockFuncPageView());
            Func<PageViewEvent> mockFuncPageViewEvent = () =>
            {
                var mock = new Mock<PageViewEvent>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PageViewEvent Properties
                // Dynamic Linking
                mock.Setup(m => m.Master).Returns(() => mockingSetup.RawPageViews?.FirstOrDefault(x => x.Object.ID == mock.Object.MasterID)?.Object);
                mock.Setup(m => m.Slave).Returns(() => mockingSetup.RawEvents?.FirstOrDefault(x => x.Object.ID == mock.Object.SlaveID)?.Object);
                // PageViewEvent's Associated Objects
                // PageViewEvent's Related Objects
                return mock.Object;
            };
            For<IPageViewEvent>().Use(() => mockFuncPageViewEvent());
            For<PageViewEvent>().Use(() => mockFuncPageViewEvent());
            Func<PageViewStatus> mockFuncPageViewStatus = () =>
            {
                var mock = new Mock<PageViewStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PageViewStatus Properties
                // Dynamic Linking
                // PageViewStatus's Associated Objects
                // PageViewStatus's Related Objects
                return mock.Object;
            };
            For<IPageViewStatus>().Use(() => mockFuncPageViewStatus());
            For<PageViewStatus>().Use(() => mockFuncPageViewStatus());
            Func<PageViewType> mockFuncPageViewType = () =>
            {
                var mock = new Mock<PageViewType>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // PageViewType Properties
                // Dynamic Linking
                // PageViewType's Associated Objects
                // PageViewType's Related Objects
                return mock.Object;
            };
            For<IPageViewType>().Use(() => mockFuncPageViewType());
            For<PageViewType>().Use(() => mockFuncPageViewType());
            Func<Visit> mockFuncVisit = () =>
            {
                var mock = new Mock<Visit>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Visit Properties
                // Dynamic Linking
                // IHaveAStatusBase Properties
                mock.Setup(m => m.Status).Returns(() => mockingSetup.RawVisitStatuses?.FirstOrDefault(x => x.Object.ID == mock.Object.StatusID)?.Object);
                // IHaveANullableContactBase Properties
                mock.Setup(m => m.Contact).Returns(() => mockingSetup.RawContacts == null || mock.Object.ContactID == null ? null : mockingSetup.RawContacts.FirstOrDefault(x => x.Object.ID == mock.Object.ContactID)?.Object);
                mock.Setup(m => m.Address).Returns(() => mockingSetup.RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                mock.Setup(m => m.Campaign).Returns(() => mockingSetup.RawCampaigns?.FirstOrDefault(x => x.Object.ID == mock.Object.CampaignID)?.Object);
                mock.Setup(m => m.IPOrganization).Returns(() => mockingSetup.RawIPOrganizations?.FirstOrDefault(x => x.Object.ID == mock.Object.IPOrganizationID)?.Object);
                mock.Setup(m => m.SiteDomain).Returns(() => mockingSetup.RawSiteDomains?.FirstOrDefault(x => x.Object.ID == mock.Object.SiteDomainID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                mock.Setup(m => m.Visitor).Returns(() => mockingSetup.RawVisitors?.FirstOrDefault(x => x.Object.ID == mock.Object.VisitorID)?.Object);
                // Visit's Associated Objects
                mock.Setup(m => m.Events).Returns(() => mockingSetup.RawEvents?.Where(x => x.Object.VisitID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Event>());
                // Visit's Related Objects
                return mock.Object;
            };
            For<IVisit>().Use(() => mockFuncVisit());
            For<Visit>().Use(() => mockFuncVisit());
            Func<Visitor> mockFuncVisitor = () =>
            {
                var mock = new Mock<Visitor>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // Visitor Properties
                // Dynamic Linking
                mock.Setup(m => m.Address).Returns(() => mockingSetup.RawAddresses?.FirstOrDefault(x => x.Object.ID == mock.Object.AddressID)?.Object);
                mock.Setup(m => m.IPOrganization).Returns(() => mockingSetup.RawIPOrganizations?.FirstOrDefault(x => x.Object.ID == mock.Object.IPOrganizationID)?.Object);
                mock.Setup(m => m.User).Returns(() => mockingSetup.RawUsers?.FirstOrDefault(x => x.Object.ID == mock.Object.UserID)?.Object);
                // Visitor's Associated Objects
                mock.Setup(m => m.Visits).Returns(() => mockingSetup.RawVisits?.Where(x => x.Object.VisitorID == mock.Object.ID).Select(x => x.Object).ToList() ?? new List<Visit>());
                // Visitor's Related Objects
                return mock.Object;
            };
            For<IVisitor>().Use(() => mockFuncVisitor());
            For<Visitor>().Use(() => mockFuncVisitor());
            Func<VisitStatus> mockFuncVisitStatus = () =>
            {
                var mock = new Mock<VisitStatus>();
                mock.SetupAllProperties();
                mock.Setup(m => m.ToHashableString()).CallBase();
                // VisitStatus Properties
                // Dynamic Linking
                // VisitStatus's Associated Objects
                // VisitStatus's Related Objects
                return mock.Object;
            };
            For<IVisitStatus>().Use(() => mockFuncVisitStatus());
            For<VisitStatus>().Use(() => mockFuncVisitStatus());
        }
    }
}
