<#@ template language="C#"
#><#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll"
#><#@ assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Data.Entity"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Text"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
#>// <autogenerated>
// <copyright file="DataModelPropertyTests.cs" company="clarity-ventures.com">
// Copyright (c) 2021-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the DataModel Property Testing Registry to check property assignments and reads
// and provide additional code coverage of non-auto properties.</summary>
// <remarks>This file was auto-generated by DataModelPropertyTests.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
#nullable enable
#pragma warning disable CS0618, CS0619
namespace Clarity.Ecommerce.DataModel.Testing
{
    using System;
    using System.Collections.Generic;
    using Interfaces.DataModel;
    using Xunit;

    [Trait("Category", "DataModel.EntityCustomProperties")]
    public partial class DataModelPropertyTests
    {
        [Fact, Obsolete]
        public void Verify_AssigningAndReadingAnyCustomEntityProperties_Works()
        {
            #region Arrange
            #region To Assign's
<#  foreach (var @group in tableClasses) { #>
            #region <#= @group.Key #>
<#      foreach (var table in @group) { #>
            <#= table.Name #> <#= HelpFunctions.LowerFirstCharacter(table.Name) #>ToAssign = new();
            ICollection<<#= table.Name #>> <#= HelpFunctions.LowerFirstCharacter(table.Name) #>CollectionToAssign = new List<<#= table.Name #>>();
<#      } #>
            #endregion
<#  } #>
            #endregion
            #region To Check's
<#  foreach (var @group in tableClasses) { #>
            #region <#= @group.Key #>
<#      foreach (var table in @group) { #>
            <#= table.Name #> <#= HelpFunctions.LowerFirstCharacter(table.Name) #>ToCheck = new();
<#      } #>
            #endregion
<#  } #>
            #endregion
            #endregion
            #region Act/Assert
<#  foreach (var @group in tableClasses) { #>
            #region <#= @group.Key #>
<#      foreach (var table in @group) {
            var tableNameLowerFirst = HelpFunctions.LowerFirstCharacter(table.Name);
            foreach (var property in table
                                        .GetProperties(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                                        .Select(prop => new { prop, getAccessor = prop.GetGetMethod(true) })
                                        .Where(t => t.getAccessor.IsFinal && @t.getAccessor.IsPrivate)
                                        .Select(t => t.prop))
            {
                var propertyName = property.Name.Substring(property.Name.LastIndexOf('.') + 1);
                var castTypeName = property.Name.Substring(0, property.Name.LastIndexOf('.'))
                    .Replace("Clarity.Ecommerce.Interfaces.DataModel.", string.Empty)
                    .Replace("Clarity.Ecommerce.DataModel.", string.Empty);
                var returnType = property.PropertyType;
                if (returnType.Name == "ICollection`1")
                {
                    returnType = returnType.GetGenericArguments()[0];
                }
                var returnTypeLowerFirst = HelpFunctions.LowerFirstCharacter(returnType.Name);
                var returnTypeToUse = HelpFunctions.SwapToSimpleType(returnType);
#>
            // <#= @group.Key #> / <#= table.Name #> / <#= propertyName #> as <#= returnTypeToUse #>
<#              if (returnTypeToUse == "int") { #>
            Assert.Equal(1, ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #> = 1);
            Assert.Equal(1, ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>);
<#              } else { #>
            Assert.Equal(<#= returnTypeLowerFirst #>ToAssign, ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #> = <#= returnTypeLowerFirst #>ToAssign);
            Assert.Equal(<#= returnTypeLowerFirst #>ToAssign, ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>);
<#              } #>
<#          }
            foreach (var property in table
                                        .GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                                        .Where(prop => prop.PropertyType.Name == "ICollection`1" && prop.Name != "Permissions"))
            {
                var propertyName = property.Name;
                var returnType = property.PropertyType.GetGenericArguments()[0];
                var returnTypeLowerFirst = HelpFunctions.LowerFirstCharacter(returnType.Name);
                var returnTypeToUse = HelpFunctions.SwapToSimpleType(returnType);
#>
            // <#= @group.Key #> / <#= table.Name #> / <#= propertyName #> as ICollection<<#= returnTypeToUse #>>
            Assert.Equal(<#= returnTypeLowerFirst #>CollectionToAssign, <#= tableNameLowerFirst #>ToCheck.<#= propertyName #> = <#= returnTypeLowerFirst #>CollectionToAssign);
            Assert.Equal(<#= returnTypeLowerFirst #>CollectionToAssign, <#= tableNameLowerFirst #>ToCheck.<#= propertyName #>);
<#          } #>
<#      } #>
            #endregion
<#  } #>
            #endregion
        }
    }
}
