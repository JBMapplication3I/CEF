// <autogenerated>
// <copyright file="DataModelPropertyTests.cs" company="clarity-ventures.com">
// Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the DataModel Property Testing Registry to check property assignments and reads
// and provide additional code coverage of non-auto properties.</summary>
// <remarks>This file was auto-generated by DataModelPropertyTests.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
#nullable enable
#pragma warning disable CS0618, CS0619
namespace Clarity.Ecommerce.DataModel.Testing
{
    using System;
    using System.Collections.Generic;
    using Interfaces.DataModel;
    using Xunit;

    [Trait("Category", "DataModel.EntityCustomProperties")]
    public partial class DataModelPropertyTests
    {
        [Fact, Obsolete]
        public void Verify_AssigningAndReadingAnyCustomEntityProperties_Works()
        {
            #region Arrange
            #region To Assign's
            #region Accounts
            Account accountToAssign = new();
            ICollection<Account> accountCollectionToAssign = new List<Account>();
            AccountAssociation accountAssociationToAssign = new();
            ICollection<AccountAssociation> accountAssociationCollectionToAssign = new List<AccountAssociation>();
            AccountAssociationType accountAssociationTypeToAssign = new();
            ICollection<AccountAssociationType> accountAssociationTypeCollectionToAssign = new List<AccountAssociationType>();
            AccountContact accountContactToAssign = new();
            ICollection<AccountContact> accountContactCollectionToAssign = new List<AccountContact>();
            AccountCurrency accountCurrencyToAssign = new();
            ICollection<AccountCurrency> accountCurrencyCollectionToAssign = new List<AccountCurrency>();
            AccountFile accountFileToAssign = new();
            ICollection<AccountFile> accountFileCollectionToAssign = new List<AccountFile>();
            AccountImage accountImageToAssign = new();
            ICollection<AccountImage> accountImageCollectionToAssign = new List<AccountImage>();
            AccountImageType accountImageTypeToAssign = new();
            ICollection<AccountImageType> accountImageTypeCollectionToAssign = new List<AccountImageType>();
            AccountPricePoint accountPricePointToAssign = new();
            ICollection<AccountPricePoint> accountPricePointCollectionToAssign = new List<AccountPricePoint>();
            AccountProduct accountProductToAssign = new();
            ICollection<AccountProduct> accountProductCollectionToAssign = new List<AccountProduct>();
            AccountProductType accountProductTypeToAssign = new();
            ICollection<AccountProductType> accountProductTypeCollectionToAssign = new List<AccountProductType>();
            AccountStatus accountStatusToAssign = new();
            ICollection<AccountStatus> accountStatusCollectionToAssign = new List<AccountStatus>();
            AccountType accountTypeToAssign = new();
            ICollection<AccountType> accountTypeCollectionToAssign = new List<AccountType>();
            AccountUsageBalance accountUsageBalanceToAssign = new();
            ICollection<AccountUsageBalance> accountUsageBalanceCollectionToAssign = new List<AccountUsageBalance>();
            AccountUserRole accountUserRoleToAssign = new();
            ICollection<AccountUserRole> accountUserRoleCollectionToAssign = new List<AccountUserRole>();
            Contractor contractorToAssign = new();
            ICollection<Contractor> contractorCollectionToAssign = new List<Contractor>();
            ServiceArea serviceAreaToAssign = new();
            ICollection<ServiceArea> serviceAreaCollectionToAssign = new List<ServiceArea>();
            #endregion
            #region Advertising
            Ad adToAssign = new();
            ICollection<Ad> adCollectionToAssign = new List<Ad>();
            AdAccount adAccountToAssign = new();
            ICollection<AdAccount> adAccountCollectionToAssign = new List<AdAccount>();
            AdBrand adBrandToAssign = new();
            ICollection<AdBrand> adBrandCollectionToAssign = new List<AdBrand>();
            AdFranchise adFranchiseToAssign = new();
            ICollection<AdFranchise> adFranchiseCollectionToAssign = new List<AdFranchise>();
            AdImage adImageToAssign = new();
            ICollection<AdImage> adImageCollectionToAssign = new List<AdImage>();
            AdImageType adImageTypeToAssign = new();
            ICollection<AdImageType> adImageTypeCollectionToAssign = new List<AdImageType>();
            AdStatus adStatusToAssign = new();
            ICollection<AdStatus> adStatusCollectionToAssign = new List<AdStatus>();
            AdStore adStoreToAssign = new();
            ICollection<AdStore> adStoreCollectionToAssign = new List<AdStore>();
            AdType adTypeToAssign = new();
            ICollection<AdType> adTypeCollectionToAssign = new List<AdType>();
            AdZone adZoneToAssign = new();
            ICollection<AdZone> adZoneCollectionToAssign = new List<AdZone>();
            AdZoneAccess adZoneAccessToAssign = new();
            ICollection<AdZoneAccess> adZoneAccessCollectionToAssign = new List<AdZoneAccess>();
            Zone zoneToAssign = new();
            ICollection<Zone> zoneCollectionToAssign = new List<Zone>();
            ZoneStatus zoneStatusToAssign = new();
            ICollection<ZoneStatus> zoneStatusCollectionToAssign = new List<ZoneStatus>();
            ZoneType zoneTypeToAssign = new();
            ICollection<ZoneType> zoneTypeCollectionToAssign = new List<ZoneType>();
            #endregion
            #region Attributes
            AttributeGroup attributeGroupToAssign = new();
            ICollection<AttributeGroup> attributeGroupCollectionToAssign = new List<AttributeGroup>();
            AttributeTab attributeTabToAssign = new();
            ICollection<AttributeTab> attributeTabCollectionToAssign = new List<AttributeTab>();
            AttributeType attributeTypeToAssign = new();
            ICollection<AttributeType> attributeTypeCollectionToAssign = new List<AttributeType>();
            GeneralAttribute generalAttributeToAssign = new();
            ICollection<GeneralAttribute> generalAttributeCollectionToAssign = new List<GeneralAttribute>();
            GeneralAttributePredefinedOption generalAttributePredefinedOptionToAssign = new();
            ICollection<GeneralAttributePredefinedOption> generalAttributePredefinedOptionCollectionToAssign = new List<GeneralAttributePredefinedOption>();
            #endregion
            #region Auctions
            Auction auctionToAssign = new();
            ICollection<Auction> auctionCollectionToAssign = new List<Auction>();
            AuctionCategory auctionCategoryToAssign = new();
            ICollection<AuctionCategory> auctionCategoryCollectionToAssign = new List<AuctionCategory>();
            AuctionStatus auctionStatusToAssign = new();
            ICollection<AuctionStatus> auctionStatusCollectionToAssign = new List<AuctionStatus>();
            AuctionType auctionTypeToAssign = new();
            ICollection<AuctionType> auctionTypeCollectionToAssign = new List<AuctionType>();
            Bid bidToAssign = new();
            ICollection<Bid> bidCollectionToAssign = new List<Bid>();
            BidStatus bidStatusToAssign = new();
            ICollection<BidStatus> bidStatusCollectionToAssign = new List<BidStatus>();
            BrandAuction brandAuctionToAssign = new();
            ICollection<BrandAuction> brandAuctionCollectionToAssign = new List<BrandAuction>();
            FranchiseAuction franchiseAuctionToAssign = new();
            ICollection<FranchiseAuction> franchiseAuctionCollectionToAssign = new List<FranchiseAuction>();
            Lot lotToAssign = new();
            ICollection<Lot> lotCollectionToAssign = new List<Lot>();
            LotCategory lotCategoryToAssign = new();
            ICollection<LotCategory> lotCategoryCollectionToAssign = new List<LotCategory>();
            LotGroup lotGroupToAssign = new();
            ICollection<LotGroup> lotGroupCollectionToAssign = new List<LotGroup>();
            LotStatus lotStatusToAssign = new();
            ICollection<LotStatus> lotStatusCollectionToAssign = new List<LotStatus>();
            LotType lotTypeToAssign = new();
            ICollection<LotType> lotTypeCollectionToAssign = new List<LotType>();
            StoreAuction storeAuctionToAssign = new();
            ICollection<StoreAuction> storeAuctionCollectionToAssign = new List<StoreAuction>();
            #endregion
            #region Badges
            Badge badgeToAssign = new();
            ICollection<Badge> badgeCollectionToAssign = new List<Badge>();
            BadgeImage badgeImageToAssign = new();
            ICollection<BadgeImage> badgeImageCollectionToAssign = new List<BadgeImage>();
            BadgeImageType badgeImageTypeToAssign = new();
            ICollection<BadgeImageType> badgeImageTypeCollectionToAssign = new List<BadgeImageType>();
            BadgeType badgeTypeToAssign = new();
            ICollection<BadgeType> badgeTypeCollectionToAssign = new List<BadgeType>();
            #endregion
            #region Brands
            Brand brandToAssign = new();
            ICollection<Brand> brandCollectionToAssign = new List<Brand>();
            BrandAccount brandAccountToAssign = new();
            ICollection<BrandAccount> brandAccountCollectionToAssign = new List<BrandAccount>();
            BrandCategory brandCategoryToAssign = new();
            ICollection<BrandCategory> brandCategoryCollectionToAssign = new List<BrandCategory>();
            BrandCurrency brandCurrencyToAssign = new();
            ICollection<BrandCurrency> brandCurrencyCollectionToAssign = new List<BrandCurrency>();
            BrandFranchise brandFranchiseToAssign = new();
            ICollection<BrandFranchise> brandFranchiseCollectionToAssign = new List<BrandFranchise>();
            BrandImage brandImageToAssign = new();
            ICollection<BrandImage> brandImageCollectionToAssign = new List<BrandImage>();
            BrandImageType brandImageTypeToAssign = new();
            ICollection<BrandImageType> brandImageTypeCollectionToAssign = new List<BrandImageType>();
            BrandInventoryLocation brandInventoryLocationToAssign = new();
            ICollection<BrandInventoryLocation> brandInventoryLocationCollectionToAssign = new List<BrandInventoryLocation>();
            BrandInventoryLocationType brandInventoryLocationTypeToAssign = new();
            ICollection<BrandInventoryLocationType> brandInventoryLocationTypeCollectionToAssign = new List<BrandInventoryLocationType>();
            BrandLanguage brandLanguageToAssign = new();
            ICollection<BrandLanguage> brandLanguageCollectionToAssign = new List<BrandLanguage>();
            BrandManufacturer brandManufacturerToAssign = new();
            ICollection<BrandManufacturer> brandManufacturerCollectionToAssign = new List<BrandManufacturer>();
            BrandProduct brandProductToAssign = new();
            ICollection<BrandProduct> brandProductCollectionToAssign = new List<BrandProduct>();
            BrandSiteDomain brandSiteDomainToAssign = new();
            ICollection<BrandSiteDomain> brandSiteDomainCollectionToAssign = new List<BrandSiteDomain>();
            BrandStore brandStoreToAssign = new();
            ICollection<BrandStore> brandStoreCollectionToAssign = new List<BrandStore>();
            BrandUser brandUserToAssign = new();
            ICollection<BrandUser> brandUserCollectionToAssign = new List<BrandUser>();
            BrandVendor brandVendorToAssign = new();
            ICollection<BrandVendor> brandVendorCollectionToAssign = new List<BrandVendor>();
            #endregion
            #region CalendarEvents
            CalendarEvent calendarEventToAssign = new();
            ICollection<CalendarEvent> calendarEventCollectionToAssign = new List<CalendarEvent>();
            CalendarEventDetail calendarEventDetailToAssign = new();
            ICollection<CalendarEventDetail> calendarEventDetailCollectionToAssign = new List<CalendarEventDetail>();
            CalendarEventFile calendarEventFileToAssign = new();
            ICollection<CalendarEventFile> calendarEventFileCollectionToAssign = new List<CalendarEventFile>();
            CalendarEventImage calendarEventImageToAssign = new();
            ICollection<CalendarEventImage> calendarEventImageCollectionToAssign = new List<CalendarEventImage>();
            CalendarEventImageType calendarEventImageTypeToAssign = new();
            ICollection<CalendarEventImageType> calendarEventImageTypeCollectionToAssign = new List<CalendarEventImageType>();
            CalendarEventProduct calendarEventProductToAssign = new();
            ICollection<CalendarEventProduct> calendarEventProductCollectionToAssign = new List<CalendarEventProduct>();
            CalendarEventStatus calendarEventStatusToAssign = new();
            ICollection<CalendarEventStatus> calendarEventStatusCollectionToAssign = new List<CalendarEventStatus>();
            CalendarEventType calendarEventTypeToAssign = new();
            ICollection<CalendarEventType> calendarEventTypeCollectionToAssign = new List<CalendarEventType>();
            UserEventAttendance userEventAttendanceToAssign = new();
            ICollection<UserEventAttendance> userEventAttendanceCollectionToAssign = new List<UserEventAttendance>();
            UserEventAttendanceType userEventAttendanceTypeToAssign = new();
            ICollection<UserEventAttendanceType> userEventAttendanceTypeCollectionToAssign = new List<UserEventAttendanceType>();
            #endregion
            #region Categories
            Category categoryToAssign = new();
            ICollection<Category> categoryCollectionToAssign = new List<Category>();
            CategoryFile categoryFileToAssign = new();
            ICollection<CategoryFile> categoryFileCollectionToAssign = new List<CategoryFile>();
            CategoryImage categoryImageToAssign = new();
            ICollection<CategoryImage> categoryImageCollectionToAssign = new List<CategoryImage>();
            CategoryImageType categoryImageTypeToAssign = new();
            ICollection<CategoryImageType> categoryImageTypeCollectionToAssign = new List<CategoryImageType>();
            CategoryType categoryTypeToAssign = new();
            ICollection<CategoryType> categoryTypeCollectionToAssign = new List<CategoryType>();
            #endregion
            #region Contacts
            Contact contactToAssign = new();
            ICollection<Contact> contactCollectionToAssign = new List<Contact>();
            ContactImage contactImageToAssign = new();
            ICollection<ContactImage> contactImageCollectionToAssign = new List<ContactImage>();
            ContactImageType contactImageTypeToAssign = new();
            ICollection<ContactImageType> contactImageTypeCollectionToAssign = new List<ContactImageType>();
            ContactType contactTypeToAssign = new();
            ICollection<ContactType> contactTypeCollectionToAssign = new List<ContactType>();
            Permission permissionToAssign = new();
            ICollection<Permission> permissionCollectionToAssign = new List<Permission>();
            ProfanityFilter profanityFilterToAssign = new();
            ICollection<ProfanityFilter> profanityFilterCollectionToAssign = new List<ProfanityFilter>();
            ReferralCode referralCodeToAssign = new();
            ICollection<ReferralCode> referralCodeCollectionToAssign = new List<ReferralCode>();
            ReferralCodeStatus referralCodeStatusToAssign = new();
            ICollection<ReferralCodeStatus> referralCodeStatusCollectionToAssign = new List<ReferralCodeStatus>();
            ReferralCodeType referralCodeTypeToAssign = new();
            ICollection<ReferralCodeType> referralCodeTypeCollectionToAssign = new List<ReferralCodeType>();
            RolePermission rolePermissionToAssign = new();
            ICollection<RolePermission> rolePermissionCollectionToAssign = new List<RolePermission>();
            RoleUser roleUserToAssign = new();
            ICollection<RoleUser> roleUserCollectionToAssign = new List<RoleUser>();
            User userToAssign = new();
            ICollection<User> userCollectionToAssign = new List<User>();
            UserClaim userClaimToAssign = new();
            ICollection<UserClaim> userClaimCollectionToAssign = new List<UserClaim>();
            UserFile userFileToAssign = new();
            ICollection<UserFile> userFileCollectionToAssign = new List<UserFile>();
            UserImage userImageToAssign = new();
            ICollection<UserImage> userImageCollectionToAssign = new List<UserImage>();
            UserImageType userImageTypeToAssign = new();
            ICollection<UserImageType> userImageTypeCollectionToAssign = new List<UserImageType>();
            UserLogin userLoginToAssign = new();
            ICollection<UserLogin> userLoginCollectionToAssign = new List<UserLogin>();
            UserOnlineStatus userOnlineStatusToAssign = new();
            ICollection<UserOnlineStatus> userOnlineStatusCollectionToAssign = new List<UserOnlineStatus>();
            UserProductType userProductTypeToAssign = new();
            ICollection<UserProductType> userProductTypeCollectionToAssign = new List<UserProductType>();
            UserRole userRoleToAssign = new();
            ICollection<UserRole> userRoleCollectionToAssign = new List<UserRole>();
            UserStatus userStatusToAssign = new();
            ICollection<UserStatus> userStatusCollectionToAssign = new List<UserStatus>();
            UserType userTypeToAssign = new();
            ICollection<UserType> userTypeCollectionToAssign = new List<UserType>();
            #endregion
            #region Counters
            Counter counterToAssign = new();
            ICollection<Counter> counterCollectionToAssign = new List<Counter>();
            CounterLog counterLogToAssign = new();
            ICollection<CounterLog> counterLogCollectionToAssign = new List<CounterLog>();
            CounterLogType counterLogTypeToAssign = new();
            ICollection<CounterLogType> counterLogTypeCollectionToAssign = new List<CounterLogType>();
            CounterType counterTypeToAssign = new();
            ICollection<CounterType> counterTypeCollectionToAssign = new List<CounterType>();
            #endregion
            #region Currencies
            Currency currencyToAssign = new();
            ICollection<Currency> currencyCollectionToAssign = new List<Currency>();
            CurrencyConversion currencyConversionToAssign = new();
            ICollection<CurrencyConversion> currencyConversionCollectionToAssign = new List<CurrencyConversion>();
            CurrencyImage currencyImageToAssign = new();
            ICollection<CurrencyImage> currencyImageCollectionToAssign = new List<CurrencyImage>();
            CurrencyImageType currencyImageTypeToAssign = new();
            ICollection<CurrencyImageType> currencyImageTypeCollectionToAssign = new List<CurrencyImageType>();
            HistoricalCurrencyRate historicalCurrencyRateToAssign = new();
            ICollection<HistoricalCurrencyRate> historicalCurrencyRateCollectionToAssign = new List<HistoricalCurrencyRate>();
            #endregion
            #region Discounts
            AppliedCartDiscount appliedCartDiscountToAssign = new();
            ICollection<AppliedCartDiscount> appliedCartDiscountCollectionToAssign = new List<AppliedCartDiscount>();
            AppliedCartItemDiscount appliedCartItemDiscountToAssign = new();
            ICollection<AppliedCartItemDiscount> appliedCartItemDiscountCollectionToAssign = new List<AppliedCartItemDiscount>();
            Discount discountToAssign = new();
            ICollection<Discount> discountCollectionToAssign = new List<Discount>();
            DiscountAccount discountAccountToAssign = new();
            ICollection<DiscountAccount> discountAccountCollectionToAssign = new List<DiscountAccount>();
            DiscountAccountType discountAccountTypeToAssign = new();
            ICollection<DiscountAccountType> discountAccountTypeCollectionToAssign = new List<DiscountAccountType>();
            DiscountBrand discountBrandToAssign = new();
            ICollection<DiscountBrand> discountBrandCollectionToAssign = new List<DiscountBrand>();
            DiscountCategory discountCategoryToAssign = new();
            ICollection<DiscountCategory> discountCategoryCollectionToAssign = new List<DiscountCategory>();
            DiscountCode discountCodeToAssign = new();
            ICollection<DiscountCode> discountCodeCollectionToAssign = new List<DiscountCode>();
            DiscountCountry discountCountryToAssign = new();
            ICollection<DiscountCountry> discountCountryCollectionToAssign = new List<DiscountCountry>();
            DiscountFranchise discountFranchiseToAssign = new();
            ICollection<DiscountFranchise> discountFranchiseCollectionToAssign = new List<DiscountFranchise>();
            DiscountManufacturer discountManufacturerToAssign = new();
            ICollection<DiscountManufacturer> discountManufacturerCollectionToAssign = new List<DiscountManufacturer>();
            DiscountProduct discountProductToAssign = new();
            ICollection<DiscountProduct> discountProductCollectionToAssign = new List<DiscountProduct>();
            DiscountProductType discountProductTypeToAssign = new();
            ICollection<DiscountProductType> discountProductTypeCollectionToAssign = new List<DiscountProductType>();
            DiscountShipCarrierMethod discountShipCarrierMethodToAssign = new();
            ICollection<DiscountShipCarrierMethod> discountShipCarrierMethodCollectionToAssign = new List<DiscountShipCarrierMethod>();
            DiscountStore discountStoreToAssign = new();
            ICollection<DiscountStore> discountStoreCollectionToAssign = new List<DiscountStore>();
            DiscountUser discountUserToAssign = new();
            ICollection<DiscountUser> discountUserCollectionToAssign = new List<DiscountUser>();
            DiscountUserRole discountUserRoleToAssign = new();
            ICollection<DiscountUserRole> discountUserRoleCollectionToAssign = new List<DiscountUserRole>();
            DiscountVendor discountVendorToAssign = new();
            ICollection<DiscountVendor> discountVendorCollectionToAssign = new List<DiscountVendor>();
            AppliedPurchaseOrderDiscount appliedPurchaseOrderDiscountToAssign = new();
            ICollection<AppliedPurchaseOrderDiscount> appliedPurchaseOrderDiscountCollectionToAssign = new List<AppliedPurchaseOrderDiscount>();
            AppliedPurchaseOrderItemDiscount appliedPurchaseOrderItemDiscountToAssign = new();
            ICollection<AppliedPurchaseOrderItemDiscount> appliedPurchaseOrderItemDiscountCollectionToAssign = new List<AppliedPurchaseOrderItemDiscount>();
            AppliedSalesInvoiceDiscount appliedSalesInvoiceDiscountToAssign = new();
            ICollection<AppliedSalesInvoiceDiscount> appliedSalesInvoiceDiscountCollectionToAssign = new List<AppliedSalesInvoiceDiscount>();
            AppliedSalesInvoiceItemDiscount appliedSalesInvoiceItemDiscountToAssign = new();
            ICollection<AppliedSalesInvoiceItemDiscount> appliedSalesInvoiceItemDiscountCollectionToAssign = new List<AppliedSalesInvoiceItemDiscount>();
            AppliedSalesOrderDiscount appliedSalesOrderDiscountToAssign = new();
            ICollection<AppliedSalesOrderDiscount> appliedSalesOrderDiscountCollectionToAssign = new List<AppliedSalesOrderDiscount>();
            AppliedSalesOrderItemDiscount appliedSalesOrderItemDiscountToAssign = new();
            ICollection<AppliedSalesOrderItemDiscount> appliedSalesOrderItemDiscountCollectionToAssign = new List<AppliedSalesOrderItemDiscount>();
            AppliedSalesQuoteDiscount appliedSalesQuoteDiscountToAssign = new();
            ICollection<AppliedSalesQuoteDiscount> appliedSalesQuoteDiscountCollectionToAssign = new List<AppliedSalesQuoteDiscount>();
            AppliedSalesQuoteItemDiscount appliedSalesQuoteItemDiscountToAssign = new();
            ICollection<AppliedSalesQuoteItemDiscount> appliedSalesQuoteItemDiscountCollectionToAssign = new List<AppliedSalesQuoteItemDiscount>();
            AppliedSalesReturnDiscount appliedSalesReturnDiscountToAssign = new();
            ICollection<AppliedSalesReturnDiscount> appliedSalesReturnDiscountCollectionToAssign = new List<AppliedSalesReturnDiscount>();
            AppliedSalesReturnItemDiscount appliedSalesReturnItemDiscountToAssign = new();
            ICollection<AppliedSalesReturnItemDiscount> appliedSalesReturnItemDiscountCollectionToAssign = new List<AppliedSalesReturnItemDiscount>();
            AppliedSampleRequestDiscount appliedSampleRequestDiscountToAssign = new();
            ICollection<AppliedSampleRequestDiscount> appliedSampleRequestDiscountCollectionToAssign = new List<AppliedSampleRequestDiscount>();
            AppliedSampleRequestItemDiscount appliedSampleRequestItemDiscountToAssign = new();
            ICollection<AppliedSampleRequestItemDiscount> appliedSampleRequestItemDiscountCollectionToAssign = new List<AppliedSampleRequestItemDiscount>();
            #endregion
            #region Favorites
            FavoriteCategory favoriteCategoryToAssign = new();
            ICollection<FavoriteCategory> favoriteCategoryCollectionToAssign = new List<FavoriteCategory>();
            FavoriteManufacturer favoriteManufacturerToAssign = new();
            ICollection<FavoriteManufacturer> favoriteManufacturerCollectionToAssign = new List<FavoriteManufacturer>();
            FavoriteShipCarrier favoriteShipCarrierToAssign = new();
            ICollection<FavoriteShipCarrier> favoriteShipCarrierCollectionToAssign = new List<FavoriteShipCarrier>();
            FavoriteStore favoriteStoreToAssign = new();
            ICollection<FavoriteStore> favoriteStoreCollectionToAssign = new List<FavoriteStore>();
            FavoriteVendor favoriteVendorToAssign = new();
            ICollection<FavoriteVendor> favoriteVendorCollectionToAssign = new List<FavoriteVendor>();
            #endregion
            #region Franchises
            Franchise franchiseToAssign = new();
            ICollection<Franchise> franchiseCollectionToAssign = new List<Franchise>();
            FranchiseAccount franchiseAccountToAssign = new();
            ICollection<FranchiseAccount> franchiseAccountCollectionToAssign = new List<FranchiseAccount>();
            FranchiseCategory franchiseCategoryToAssign = new();
            ICollection<FranchiseCategory> franchiseCategoryCollectionToAssign = new List<FranchiseCategory>();
            FranchiseCountry franchiseCountryToAssign = new();
            ICollection<FranchiseCountry> franchiseCountryCollectionToAssign = new List<FranchiseCountry>();
            FranchiseCurrency franchiseCurrencyToAssign = new();
            ICollection<FranchiseCurrency> franchiseCurrencyCollectionToAssign = new List<FranchiseCurrency>();
            FranchiseDistrict franchiseDistrictToAssign = new();
            ICollection<FranchiseDistrict> franchiseDistrictCollectionToAssign = new List<FranchiseDistrict>();
            FranchiseImage franchiseImageToAssign = new();
            ICollection<FranchiseImage> franchiseImageCollectionToAssign = new List<FranchiseImage>();
            FranchiseImageType franchiseImageTypeToAssign = new();
            ICollection<FranchiseImageType> franchiseImageTypeCollectionToAssign = new List<FranchiseImageType>();
            FranchiseInventoryLocation franchiseInventoryLocationToAssign = new();
            ICollection<FranchiseInventoryLocation> franchiseInventoryLocationCollectionToAssign = new List<FranchiseInventoryLocation>();
            FranchiseInventoryLocationType franchiseInventoryLocationTypeToAssign = new();
            ICollection<FranchiseInventoryLocationType> franchiseInventoryLocationTypeCollectionToAssign = new List<FranchiseInventoryLocationType>();
            FranchiseLanguage franchiseLanguageToAssign = new();
            ICollection<FranchiseLanguage> franchiseLanguageCollectionToAssign = new List<FranchiseLanguage>();
            FranchiseManufacturer franchiseManufacturerToAssign = new();
            ICollection<FranchiseManufacturer> franchiseManufacturerCollectionToAssign = new List<FranchiseManufacturer>();
            FranchiseProduct franchiseProductToAssign = new();
            ICollection<FranchiseProduct> franchiseProductCollectionToAssign = new List<FranchiseProduct>();
            FranchiseRegion franchiseRegionToAssign = new();
            ICollection<FranchiseRegion> franchiseRegionCollectionToAssign = new List<FranchiseRegion>();
            FranchiseSiteDomain franchiseSiteDomainToAssign = new();
            ICollection<FranchiseSiteDomain> franchiseSiteDomainCollectionToAssign = new List<FranchiseSiteDomain>();
            FranchiseStore franchiseStoreToAssign = new();
            ICollection<FranchiseStore> franchiseStoreCollectionToAssign = new List<FranchiseStore>();
            FranchiseType franchiseTypeToAssign = new();
            ICollection<FranchiseType> franchiseTypeCollectionToAssign = new List<FranchiseType>();
            FranchiseUser franchiseUserToAssign = new();
            ICollection<FranchiseUser> franchiseUserCollectionToAssign = new List<FranchiseUser>();
            FranchiseVendor franchiseVendorToAssign = new();
            ICollection<FranchiseVendor> franchiseVendorCollectionToAssign = new List<FranchiseVendor>();
            #endregion
            #region Geography
            Address addressToAssign = new();
            ICollection<Address> addressCollectionToAssign = new List<Address>();
            Country countryToAssign = new();
            ICollection<Country> countryCollectionToAssign = new List<Country>();
            CountryCurrency countryCurrencyToAssign = new();
            ICollection<CountryCurrency> countryCurrencyCollectionToAssign = new List<CountryCurrency>();
            CountryImage countryImageToAssign = new();
            ICollection<CountryImage> countryImageCollectionToAssign = new List<CountryImage>();
            CountryImageType countryImageTypeToAssign = new();
            ICollection<CountryImageType> countryImageTypeCollectionToAssign = new List<CountryImageType>();
            CountryLanguage countryLanguageToAssign = new();
            ICollection<CountryLanguage> countryLanguageCollectionToAssign = new List<CountryLanguage>();
            District districtToAssign = new();
            ICollection<District> districtCollectionToAssign = new List<District>();
            DistrictCurrency districtCurrencyToAssign = new();
            ICollection<DistrictCurrency> districtCurrencyCollectionToAssign = new List<DistrictCurrency>();
            DistrictImage districtImageToAssign = new();
            ICollection<DistrictImage> districtImageCollectionToAssign = new List<DistrictImage>();
            DistrictImageType districtImageTypeToAssign = new();
            ICollection<DistrictImageType> districtImageTypeCollectionToAssign = new List<DistrictImageType>();
            DistrictLanguage districtLanguageToAssign = new();
            ICollection<DistrictLanguage> districtLanguageCollectionToAssign = new List<DistrictLanguage>();
            HistoricalAddressValidation historicalAddressValidationToAssign = new();
            ICollection<HistoricalAddressValidation> historicalAddressValidationCollectionToAssign = new List<HistoricalAddressValidation>();
            PhonePrefixLookup phonePrefixLookupToAssign = new();
            ICollection<PhonePrefixLookup> phonePrefixLookupCollectionToAssign = new List<PhonePrefixLookup>();
            Region regionToAssign = new();
            ICollection<Region> regionCollectionToAssign = new List<Region>();
            RegionCurrency regionCurrencyToAssign = new();
            ICollection<RegionCurrency> regionCurrencyCollectionToAssign = new List<RegionCurrency>();
            RegionImage regionImageToAssign = new();
            ICollection<RegionImage> regionImageCollectionToAssign = new List<RegionImage>();
            RegionImageType regionImageTypeToAssign = new();
            ICollection<RegionImageType> regionImageTypeCollectionToAssign = new List<RegionImageType>();
            RegionLanguage regionLanguageToAssign = new();
            ICollection<RegionLanguage> regionLanguageCollectionToAssign = new List<RegionLanguage>();
            ZipCode zipCodeToAssign = new();
            ICollection<ZipCode> zipCodeCollectionToAssign = new List<ZipCode>();
            #endregion
            #region Globalization
            Language languageToAssign = new();
            ICollection<Language> languageCollectionToAssign = new List<Language>();
            LanguageImage languageImageToAssign = new();
            ICollection<LanguageImage> languageImageCollectionToAssign = new List<LanguageImage>();
            LanguageImageType languageImageTypeToAssign = new();
            ICollection<LanguageImageType> languageImageTypeCollectionToAssign = new List<LanguageImageType>();
            UiKey uiKeyToAssign = new();
            ICollection<UiKey> uiKeyCollectionToAssign = new List<UiKey>();
            UiTranslation uiTranslationToAssign = new();
            ICollection<UiTranslation> uiTranslationCollectionToAssign = new List<UiTranslation>();
            #endregion
            #region Groups
            Group groupToAssign = new();
            ICollection<Group> groupCollectionToAssign = new List<Group>();
            GroupStatus groupStatusToAssign = new();
            ICollection<GroupStatus> groupStatusCollectionToAssign = new List<GroupStatus>();
            GroupType groupTypeToAssign = new();
            ICollection<GroupType> groupTypeCollectionToAssign = new List<GroupType>();
            GroupUser groupUserToAssign = new();
            ICollection<GroupUser> groupUserCollectionToAssign = new List<GroupUser>();
            #endregion
            #region Hangfire
            HangfireAggregatedCounter hangfireAggregatedCounterToAssign = new();
            ICollection<HangfireAggregatedCounter> hangfireAggregatedCounterCollectionToAssign = new List<HangfireAggregatedCounter>();
            HangfireCounter hangfireCounterToAssign = new();
            ICollection<HangfireCounter> hangfireCounterCollectionToAssign = new List<HangfireCounter>();
            HangfireHash hangfireHashToAssign = new();
            ICollection<HangfireHash> hangfireHashCollectionToAssign = new List<HangfireHash>();
            HangfireJob hangfireJobToAssign = new();
            ICollection<HangfireJob> hangfireJobCollectionToAssign = new List<HangfireJob>();
            HangfireJobParameter hangfireJobParameterToAssign = new();
            ICollection<HangfireJobParameter> hangfireJobParameterCollectionToAssign = new List<HangfireJobParameter>();
            HangfireJobQueue hangfireJobQueueToAssign = new();
            ICollection<HangfireJobQueue> hangfireJobQueueCollectionToAssign = new List<HangfireJobQueue>();
            HangfireList hangfireListToAssign = new();
            ICollection<HangfireList> hangfireListCollectionToAssign = new List<HangfireList>();
            ScheduledJobConfiguration scheduledJobConfigurationToAssign = new();
            ICollection<ScheduledJobConfiguration> scheduledJobConfigurationCollectionToAssign = new List<ScheduledJobConfiguration>();
            ScheduledJobConfigurationSetting scheduledJobConfigurationSettingToAssign = new();
            ICollection<ScheduledJobConfigurationSetting> scheduledJobConfigurationSettingCollectionToAssign = new List<ScheduledJobConfigurationSetting>();
            HangfireSchema hangfireSchemaToAssign = new();
            ICollection<HangfireSchema> hangfireSchemaCollectionToAssign = new List<HangfireSchema>();
            HangfireServer hangfireServerToAssign = new();
            ICollection<HangfireServer> hangfireServerCollectionToAssign = new List<HangfireServer>();
            HangfireSet hangfireSetToAssign = new();
            ICollection<HangfireSet> hangfireSetCollectionToAssign = new List<HangfireSet>();
            HangfireState hangfireStateToAssign = new();
            ICollection<HangfireState> hangfireStateCollectionToAssign = new List<HangfireState>();
            #endregion
            #region Inventory
            InventoryLocation inventoryLocationToAssign = new();
            ICollection<InventoryLocation> inventoryLocationCollectionToAssign = new List<InventoryLocation>();
            InventoryLocationRegion inventoryLocationRegionToAssign = new();
            ICollection<InventoryLocationRegion> inventoryLocationRegionCollectionToAssign = new List<InventoryLocationRegion>();
            InventoryLocationSection inventoryLocationSectionToAssign = new();
            ICollection<InventoryLocationSection> inventoryLocationSectionCollectionToAssign = new List<InventoryLocationSection>();
            InventoryLocationUser inventoryLocationUserToAssign = new();
            ICollection<InventoryLocationUser> inventoryLocationUserCollectionToAssign = new List<InventoryLocationUser>();
            #endregion
            #region Invoicing
            SalesInvoice salesInvoiceToAssign = new();
            ICollection<SalesInvoice> salesInvoiceCollectionToAssign = new List<SalesInvoice>();
            SalesInvoiceContact salesInvoiceContactToAssign = new();
            ICollection<SalesInvoiceContact> salesInvoiceContactCollectionToAssign = new List<SalesInvoiceContact>();
            SalesInvoiceEvent salesInvoiceEventToAssign = new();
            ICollection<SalesInvoiceEvent> salesInvoiceEventCollectionToAssign = new List<SalesInvoiceEvent>();
            SalesInvoiceEventType salesInvoiceEventTypeToAssign = new();
            ICollection<SalesInvoiceEventType> salesInvoiceEventTypeCollectionToAssign = new List<SalesInvoiceEventType>();
            SalesInvoiceFile salesInvoiceFileToAssign = new();
            ICollection<SalesInvoiceFile> salesInvoiceFileCollectionToAssign = new List<SalesInvoiceFile>();
            SalesInvoiceItem salesInvoiceItemToAssign = new();
            ICollection<SalesInvoiceItem> salesInvoiceItemCollectionToAssign = new List<SalesInvoiceItem>();
            SalesInvoiceItemTarget salesInvoiceItemTargetToAssign = new();
            ICollection<SalesInvoiceItemTarget> salesInvoiceItemTargetCollectionToAssign = new List<SalesInvoiceItemTarget>();
            SalesInvoiceState salesInvoiceStateToAssign = new();
            ICollection<SalesInvoiceState> salesInvoiceStateCollectionToAssign = new List<SalesInvoiceState>();
            SalesInvoiceStatus salesInvoiceStatusToAssign = new();
            ICollection<SalesInvoiceStatus> salesInvoiceStatusCollectionToAssign = new List<SalesInvoiceStatus>();
            SalesInvoiceType salesInvoiceTypeToAssign = new();
            ICollection<SalesInvoiceType> salesInvoiceTypeCollectionToAssign = new List<SalesInvoiceType>();
            SalesOrderSalesInvoice salesOrderSalesInvoiceToAssign = new();
            ICollection<SalesOrderSalesInvoice> salesOrderSalesInvoiceCollectionToAssign = new List<SalesOrderSalesInvoice>();
            #endregion
            #region Manufacturers
            Manufacturer manufacturerToAssign = new();
            ICollection<Manufacturer> manufacturerCollectionToAssign = new List<Manufacturer>();
            ManufacturerImage manufacturerImageToAssign = new();
            ICollection<ManufacturerImage> manufacturerImageCollectionToAssign = new List<ManufacturerImage>();
            ManufacturerImageType manufacturerImageTypeToAssign = new();
            ICollection<ManufacturerImageType> manufacturerImageTypeCollectionToAssign = new List<ManufacturerImageType>();
            ManufacturerProduct manufacturerProductToAssign = new();
            ICollection<ManufacturerProduct> manufacturerProductCollectionToAssign = new List<ManufacturerProduct>();
            ManufacturerType manufacturerTypeToAssign = new();
            ICollection<ManufacturerType> manufacturerTypeCollectionToAssign = new List<ManufacturerType>();
            #endregion
            #region Media
            StoredFile storedFileToAssign = new();
            ICollection<StoredFile> storedFileCollectionToAssign = new List<StoredFile>();
            #endregion
            #region Messaging
            Conversation conversationToAssign = new();
            ICollection<Conversation> conversationCollectionToAssign = new List<Conversation>();
            ConversationUser conversationUserToAssign = new();
            ICollection<ConversationUser> conversationUserCollectionToAssign = new List<ConversationUser>();
            EmailQueue emailQueueToAssign = new();
            ICollection<EmailQueue> emailQueueCollectionToAssign = new List<EmailQueue>();
            EmailQueueAttachment emailQueueAttachmentToAssign = new();
            ICollection<EmailQueueAttachment> emailQueueAttachmentCollectionToAssign = new List<EmailQueueAttachment>();
            EmailStatus emailStatusToAssign = new();
            ICollection<EmailStatus> emailStatusCollectionToAssign = new List<EmailStatus>();
            EmailTemplate emailTemplateToAssign = new();
            ICollection<EmailTemplate> emailTemplateCollectionToAssign = new List<EmailTemplate>();
            EmailType emailTypeToAssign = new();
            ICollection<EmailType> emailTypeCollectionToAssign = new List<EmailType>();
            Message messageToAssign = new();
            ICollection<Message> messageCollectionToAssign = new List<Message>();
            MessageAttachment messageAttachmentToAssign = new();
            ICollection<MessageAttachment> messageAttachmentCollectionToAssign = new List<MessageAttachment>();
            MessageRecipient messageRecipientToAssign = new();
            ICollection<MessageRecipient> messageRecipientCollectionToAssign = new List<MessageRecipient>();
            ProductNotification productNotificationToAssign = new();
            ICollection<ProductNotification> productNotificationCollectionToAssign = new List<ProductNotification>();
            UserSupportRequest userSupportRequestToAssign = new();
            ICollection<UserSupportRequest> userSupportRequestCollectionToAssign = new List<UserSupportRequest>();
            #endregion
            #region Ordering
            SalesOrder salesOrderToAssign = new();
            ICollection<SalesOrder> salesOrderCollectionToAssign = new List<SalesOrder>();
            SalesOrderContact salesOrderContactToAssign = new();
            ICollection<SalesOrderContact> salesOrderContactCollectionToAssign = new List<SalesOrderContact>();
            SalesOrderEvent salesOrderEventToAssign = new();
            ICollection<SalesOrderEvent> salesOrderEventCollectionToAssign = new List<SalesOrderEvent>();
            SalesOrderEventType salesOrderEventTypeToAssign = new();
            ICollection<SalesOrderEventType> salesOrderEventTypeCollectionToAssign = new List<SalesOrderEventType>();
            SalesOrderFile salesOrderFileToAssign = new();
            ICollection<SalesOrderFile> salesOrderFileCollectionToAssign = new List<SalesOrderFile>();
            SalesOrderItem salesOrderItemToAssign = new();
            ICollection<SalesOrderItem> salesOrderItemCollectionToAssign = new List<SalesOrderItem>();
            SalesOrderItemTarget salesOrderItemTargetToAssign = new();
            ICollection<SalesOrderItemTarget> salesOrderItemTargetCollectionToAssign = new List<SalesOrderItemTarget>();
            SalesOrderState salesOrderStateToAssign = new();
            ICollection<SalesOrderState> salesOrderStateCollectionToAssign = new List<SalesOrderState>();
            SalesOrderStatus salesOrderStatusToAssign = new();
            ICollection<SalesOrderStatus> salesOrderStatusCollectionToAssign = new List<SalesOrderStatus>();
            SalesOrderType salesOrderTypeToAssign = new();
            ICollection<SalesOrderType> salesOrderTypeCollectionToAssign = new List<SalesOrderType>();
            #endregion
            #region Payments
            Membership membershipToAssign = new();
            ICollection<Membership> membershipCollectionToAssign = new List<Membership>();
            MembershipAdZoneAccess membershipAdZoneAccessToAssign = new();
            ICollection<MembershipAdZoneAccess> membershipAdZoneAccessCollectionToAssign = new List<MembershipAdZoneAccess>();
            MembershipAdZoneAccessByLevel membershipAdZoneAccessByLevelToAssign = new();
            ICollection<MembershipAdZoneAccessByLevel> membershipAdZoneAccessByLevelCollectionToAssign = new List<MembershipAdZoneAccessByLevel>();
            MembershipLevel membershipLevelToAssign = new();
            ICollection<MembershipLevel> membershipLevelCollectionToAssign = new List<MembershipLevel>();
            MembershipRepeatType membershipRepeatTypeToAssign = new();
            ICollection<MembershipRepeatType> membershipRepeatTypeCollectionToAssign = new List<MembershipRepeatType>();
            Payment paymentToAssign = new();
            ICollection<Payment> paymentCollectionToAssign = new List<Payment>();
            PaymentMethod paymentMethodToAssign = new();
            ICollection<PaymentMethod> paymentMethodCollectionToAssign = new List<PaymentMethod>();
            PaymentStatus paymentStatusToAssign = new();
            ICollection<PaymentStatus> paymentStatusCollectionToAssign = new List<PaymentStatus>();
            PaymentType paymentTypeToAssign = new();
            ICollection<PaymentType> paymentTypeCollectionToAssign = new List<PaymentType>();
            RepeatType repeatTypeToAssign = new();
            ICollection<RepeatType> repeatTypeCollectionToAssign = new List<RepeatType>();
            SalesInvoicePayment salesInvoicePaymentToAssign = new();
            ICollection<SalesInvoicePayment> salesInvoicePaymentCollectionToAssign = new List<SalesInvoicePayment>();
            SalesOrderPayment salesOrderPaymentToAssign = new();
            ICollection<SalesOrderPayment> salesOrderPaymentCollectionToAssign = new List<SalesOrderPayment>();
            SalesReturnPayment salesReturnPaymentToAssign = new();
            ICollection<SalesReturnPayment> salesReturnPaymentCollectionToAssign = new List<SalesReturnPayment>();
            Subscription subscriptionToAssign = new();
            ICollection<Subscription> subscriptionCollectionToAssign = new List<Subscription>();
            SubscriptionHistory subscriptionHistoryToAssign = new();
            ICollection<SubscriptionHistory> subscriptionHistoryCollectionToAssign = new List<SubscriptionHistory>();
            SubscriptionStatus subscriptionStatusToAssign = new();
            ICollection<SubscriptionStatus> subscriptionStatusCollectionToAssign = new List<SubscriptionStatus>();
            SubscriptionType subscriptionTypeToAssign = new();
            ICollection<SubscriptionType> subscriptionTypeCollectionToAssign = new List<SubscriptionType>();
            SubscriptionTypeRepeatType subscriptionTypeRepeatTypeToAssign = new();
            ICollection<SubscriptionTypeRepeatType> subscriptionTypeRepeatTypeCollectionToAssign = new List<SubscriptionTypeRepeatType>();
            Wallet walletToAssign = new();
            ICollection<Wallet> walletCollectionToAssign = new List<Wallet>();
            #endregion
            #region Pricing
            PricePoint pricePointToAssign = new();
            ICollection<PricePoint> pricePointCollectionToAssign = new List<PricePoint>();
            PriceRounding priceRoundingToAssign = new();
            ICollection<PriceRounding> priceRoundingCollectionToAssign = new List<PriceRounding>();
            PriceRule priceRuleToAssign = new();
            ICollection<PriceRule> priceRuleCollectionToAssign = new List<PriceRule>();
            PriceRuleAccount priceRuleAccountToAssign = new();
            ICollection<PriceRuleAccount> priceRuleAccountCollectionToAssign = new List<PriceRuleAccount>();
            PriceRuleAccountType priceRuleAccountTypeToAssign = new();
            ICollection<PriceRuleAccountType> priceRuleAccountTypeCollectionToAssign = new List<PriceRuleAccountType>();
            PriceRuleBrand priceRuleBrandToAssign = new();
            ICollection<PriceRuleBrand> priceRuleBrandCollectionToAssign = new List<PriceRuleBrand>();
            PriceRuleCategory priceRuleCategoryToAssign = new();
            ICollection<PriceRuleCategory> priceRuleCategoryCollectionToAssign = new List<PriceRuleCategory>();
            PriceRuleCountry priceRuleCountryToAssign = new();
            ICollection<PriceRuleCountry> priceRuleCountryCollectionToAssign = new List<PriceRuleCountry>();
            PriceRuleFranchise priceRuleFranchiseToAssign = new();
            ICollection<PriceRuleFranchise> priceRuleFranchiseCollectionToAssign = new List<PriceRuleFranchise>();
            PriceRuleManufacturer priceRuleManufacturerToAssign = new();
            ICollection<PriceRuleManufacturer> priceRuleManufacturerCollectionToAssign = new List<PriceRuleManufacturer>();
            PriceRuleProduct priceRuleProductToAssign = new();
            ICollection<PriceRuleProduct> priceRuleProductCollectionToAssign = new List<PriceRuleProduct>();
            PriceRuleProductType priceRuleProductTypeToAssign = new();
            ICollection<PriceRuleProductType> priceRuleProductTypeCollectionToAssign = new List<PriceRuleProductType>();
            PriceRuleStore priceRuleStoreToAssign = new();
            ICollection<PriceRuleStore> priceRuleStoreCollectionToAssign = new List<PriceRuleStore>();
            PriceRuleUserRole priceRuleUserRoleToAssign = new();
            ICollection<PriceRuleUserRole> priceRuleUserRoleCollectionToAssign = new List<PriceRuleUserRole>();
            PriceRuleVendor priceRuleVendorToAssign = new();
            ICollection<PriceRuleVendor> priceRuleVendorCollectionToAssign = new List<PriceRuleVendor>();
            #endregion
            #region Products
            FutureImport futureImportToAssign = new();
            ICollection<FutureImport> futureImportCollectionToAssign = new List<FutureImport>();
            FutureImportStatus futureImportStatusToAssign = new();
            ICollection<FutureImportStatus> futureImportStatusCollectionToAssign = new List<FutureImportStatus>();
            Product productToAssign = new();
            ICollection<Product> productCollectionToAssign = new List<Product>();
            ProductAssociation productAssociationToAssign = new();
            ICollection<ProductAssociation> productAssociationCollectionToAssign = new List<ProductAssociation>();
            ProductAssociationType productAssociationTypeToAssign = new();
            ICollection<ProductAssociationType> productAssociationTypeCollectionToAssign = new List<ProductAssociationType>();
            ProductCategory productCategoryToAssign = new();
            ICollection<ProductCategory> productCategoryCollectionToAssign = new List<ProductCategory>();
            ProductDownload productDownloadToAssign = new();
            ICollection<ProductDownload> productDownloadCollectionToAssign = new List<ProductDownload>();
            ProductDownloadType productDownloadTypeToAssign = new();
            ICollection<ProductDownloadType> productDownloadTypeCollectionToAssign = new List<ProductDownloadType>();
            ProductFile productFileToAssign = new();
            ICollection<ProductFile> productFileCollectionToAssign = new List<ProductFile>();
            ProductImage productImageToAssign = new();
            ICollection<ProductImage> productImageCollectionToAssign = new List<ProductImage>();
            ProductImageType productImageTypeToAssign = new();
            ICollection<ProductImageType> productImageTypeCollectionToAssign = new List<ProductImageType>();
            ProductInventoryLocationSection productInventoryLocationSectionToAssign = new();
            ICollection<ProductInventoryLocationSection> productInventoryLocationSectionCollectionToAssign = new List<ProductInventoryLocationSection>();
            ProductMembershipLevel productMembershipLevelToAssign = new();
            ICollection<ProductMembershipLevel> productMembershipLevelCollectionToAssign = new List<ProductMembershipLevel>();
            ProductPricePoint productPricePointToAssign = new();
            ICollection<ProductPricePoint> productPricePointCollectionToAssign = new List<ProductPricePoint>();
            ProductRestriction productRestrictionToAssign = new();
            ICollection<ProductRestriction> productRestrictionCollectionToAssign = new List<ProductRestriction>();
            ProductShipCarrierMethod productShipCarrierMethodToAssign = new();
            ICollection<ProductShipCarrierMethod> productShipCarrierMethodCollectionToAssign = new List<ProductShipCarrierMethod>();
            ProductStatus productStatusToAssign = new();
            ICollection<ProductStatus> productStatusCollectionToAssign = new List<ProductStatus>();
            ProductSubscriptionType productSubscriptionTypeToAssign = new();
            ICollection<ProductSubscriptionType> productSubscriptionTypeCollectionToAssign = new List<ProductSubscriptionType>();
            ProductType productTypeToAssign = new();
            ICollection<ProductType> productTypeCollectionToAssign = new List<ProductType>();
            #endregion
            #region Purchasing
            PurchaseOrder purchaseOrderToAssign = new();
            ICollection<PurchaseOrder> purchaseOrderCollectionToAssign = new List<PurchaseOrder>();
            PurchaseOrderContact purchaseOrderContactToAssign = new();
            ICollection<PurchaseOrderContact> purchaseOrderContactCollectionToAssign = new List<PurchaseOrderContact>();
            PurchaseOrderEvent purchaseOrderEventToAssign = new();
            ICollection<PurchaseOrderEvent> purchaseOrderEventCollectionToAssign = new List<PurchaseOrderEvent>();
            PurchaseOrderEventType purchaseOrderEventTypeToAssign = new();
            ICollection<PurchaseOrderEventType> purchaseOrderEventTypeCollectionToAssign = new List<PurchaseOrderEventType>();
            PurchaseOrderFile purchaseOrderFileToAssign = new();
            ICollection<PurchaseOrderFile> purchaseOrderFileCollectionToAssign = new List<PurchaseOrderFile>();
            PurchaseOrderItem purchaseOrderItemToAssign = new();
            ICollection<PurchaseOrderItem> purchaseOrderItemCollectionToAssign = new List<PurchaseOrderItem>();
            PurchaseOrderItemTarget purchaseOrderItemTargetToAssign = new();
            ICollection<PurchaseOrderItemTarget> purchaseOrderItemTargetCollectionToAssign = new List<PurchaseOrderItemTarget>();
            PurchaseOrderState purchaseOrderStateToAssign = new();
            ICollection<PurchaseOrderState> purchaseOrderStateCollectionToAssign = new List<PurchaseOrderState>();
            PurchaseOrderStatus purchaseOrderStatusToAssign = new();
            ICollection<PurchaseOrderStatus> purchaseOrderStatusCollectionToAssign = new List<PurchaseOrderStatus>();
            PurchaseOrderType purchaseOrderTypeToAssign = new();
            ICollection<PurchaseOrderType> purchaseOrderTypeCollectionToAssign = new List<PurchaseOrderType>();
            SalesOrderPurchaseOrder salesOrderPurchaseOrderToAssign = new();
            ICollection<SalesOrderPurchaseOrder> salesOrderPurchaseOrderCollectionToAssign = new List<SalesOrderPurchaseOrder>();
            #endregion
            #region Questionnaire
            Answer answerToAssign = new();
            ICollection<Answer> answerCollectionToAssign = new List<Answer>();
            Question questionToAssign = new();
            ICollection<Question> questionCollectionToAssign = new List<Question>();
            QuestionOption questionOptionToAssign = new();
            ICollection<QuestionOption> questionOptionCollectionToAssign = new List<QuestionOption>();
            QuestionType questionTypeToAssign = new();
            ICollection<QuestionType> questionTypeCollectionToAssign = new List<QuestionType>();
            #endregion
            #region Quoting
            SalesQuote salesQuoteToAssign = new();
            ICollection<SalesQuote> salesQuoteCollectionToAssign = new List<SalesQuote>();
            SalesQuoteCategory salesQuoteCategoryToAssign = new();
            ICollection<SalesQuoteCategory> salesQuoteCategoryCollectionToAssign = new List<SalesQuoteCategory>();
            SalesQuoteContact salesQuoteContactToAssign = new();
            ICollection<SalesQuoteContact> salesQuoteContactCollectionToAssign = new List<SalesQuoteContact>();
            SalesQuoteEvent salesQuoteEventToAssign = new();
            ICollection<SalesQuoteEvent> salesQuoteEventCollectionToAssign = new List<SalesQuoteEvent>();
            SalesQuoteEventType salesQuoteEventTypeToAssign = new();
            ICollection<SalesQuoteEventType> salesQuoteEventTypeCollectionToAssign = new List<SalesQuoteEventType>();
            SalesQuoteFile salesQuoteFileToAssign = new();
            ICollection<SalesQuoteFile> salesQuoteFileCollectionToAssign = new List<SalesQuoteFile>();
            SalesQuoteItem salesQuoteItemToAssign = new();
            ICollection<SalesQuoteItem> salesQuoteItemCollectionToAssign = new List<SalesQuoteItem>();
            SalesQuoteItemTarget salesQuoteItemTargetToAssign = new();
            ICollection<SalesQuoteItemTarget> salesQuoteItemTargetCollectionToAssign = new List<SalesQuoteItemTarget>();
            SalesQuoteSalesOrder salesQuoteSalesOrderToAssign = new();
            ICollection<SalesQuoteSalesOrder> salesQuoteSalesOrderCollectionToAssign = new List<SalesQuoteSalesOrder>();
            SalesQuoteState salesQuoteStateToAssign = new();
            ICollection<SalesQuoteState> salesQuoteStateCollectionToAssign = new List<SalesQuoteState>();
            SalesQuoteStatus salesQuoteStatusToAssign = new();
            ICollection<SalesQuoteStatus> salesQuoteStatusCollectionToAssign = new List<SalesQuoteStatus>();
            SalesQuoteType salesQuoteTypeToAssign = new();
            ICollection<SalesQuoteType> salesQuoteTypeCollectionToAssign = new List<SalesQuoteType>();
            #endregion
            #region Reporting
            Report reportToAssign = new();
            ICollection<Report> reportCollectionToAssign = new List<Report>();
            ReportType reportTypeToAssign = new();
            ICollection<ReportType> reportTypeCollectionToAssign = new List<ReportType>();
            #endregion
            #region Returning
            SalesReturn salesReturnToAssign = new();
            ICollection<SalesReturn> salesReturnCollectionToAssign = new List<SalesReturn>();
            SalesReturnContact salesReturnContactToAssign = new();
            ICollection<SalesReturnContact> salesReturnContactCollectionToAssign = new List<SalesReturnContact>();
            SalesReturnEvent salesReturnEventToAssign = new();
            ICollection<SalesReturnEvent> salesReturnEventCollectionToAssign = new List<SalesReturnEvent>();
            SalesReturnEventType salesReturnEventTypeToAssign = new();
            ICollection<SalesReturnEventType> salesReturnEventTypeCollectionToAssign = new List<SalesReturnEventType>();
            SalesReturnFile salesReturnFileToAssign = new();
            ICollection<SalesReturnFile> salesReturnFileCollectionToAssign = new List<SalesReturnFile>();
            SalesReturnItem salesReturnItemToAssign = new();
            ICollection<SalesReturnItem> salesReturnItemCollectionToAssign = new List<SalesReturnItem>();
            SalesReturnItemTarget salesReturnItemTargetToAssign = new();
            ICollection<SalesReturnItemTarget> salesReturnItemTargetCollectionToAssign = new List<SalesReturnItemTarget>();
            SalesReturnReason salesReturnReasonToAssign = new();
            ICollection<SalesReturnReason> salesReturnReasonCollectionToAssign = new List<SalesReturnReason>();
            SalesReturnSalesOrder salesReturnSalesOrderToAssign = new();
            ICollection<SalesReturnSalesOrder> salesReturnSalesOrderCollectionToAssign = new List<SalesReturnSalesOrder>();
            SalesReturnState salesReturnStateToAssign = new();
            ICollection<SalesReturnState> salesReturnStateCollectionToAssign = new List<SalesReturnState>();
            SalesReturnStatus salesReturnStatusToAssign = new();
            ICollection<SalesReturnStatus> salesReturnStatusCollectionToAssign = new List<SalesReturnStatus>();
            SalesReturnType salesReturnTypeToAssign = new();
            ICollection<SalesReturnType> salesReturnTypeCollectionToAssign = new List<SalesReturnType>();
            #endregion
            #region Reviews
            Review reviewToAssign = new();
            ICollection<Review> reviewCollectionToAssign = new List<Review>();
            ReviewType reviewTypeToAssign = new();
            ICollection<ReviewType> reviewTypeCollectionToAssign = new List<ReviewType>();
            #endregion
            #region Sales
            SalesGroup salesGroupToAssign = new();
            ICollection<SalesGroup> salesGroupCollectionToAssign = new List<SalesGroup>();
            SalesItemTargetType salesItemTargetTypeToAssign = new();
            ICollection<SalesItemTargetType> salesItemTargetTypeCollectionToAssign = new List<SalesItemTargetType>();
            #endregion
            #region Sampling
            SampleRequest sampleRequestToAssign = new();
            ICollection<SampleRequest> sampleRequestCollectionToAssign = new List<SampleRequest>();
            SampleRequestContact sampleRequestContactToAssign = new();
            ICollection<SampleRequestContact> sampleRequestContactCollectionToAssign = new List<SampleRequestContact>();
            SampleRequestEvent sampleRequestEventToAssign = new();
            ICollection<SampleRequestEvent> sampleRequestEventCollectionToAssign = new List<SampleRequestEvent>();
            SampleRequestEventType sampleRequestEventTypeToAssign = new();
            ICollection<SampleRequestEventType> sampleRequestEventTypeCollectionToAssign = new List<SampleRequestEventType>();
            SampleRequestFile sampleRequestFileToAssign = new();
            ICollection<SampleRequestFile> sampleRequestFileCollectionToAssign = new List<SampleRequestFile>();
            SampleRequestItem sampleRequestItemToAssign = new();
            ICollection<SampleRequestItem> sampleRequestItemCollectionToAssign = new List<SampleRequestItem>();
            SampleRequestItemTarget sampleRequestItemTargetToAssign = new();
            ICollection<SampleRequestItemTarget> sampleRequestItemTargetCollectionToAssign = new List<SampleRequestItemTarget>();
            SampleRequestState sampleRequestStateToAssign = new();
            ICollection<SampleRequestState> sampleRequestStateCollectionToAssign = new List<SampleRequestState>();
            SampleRequestStatus sampleRequestStatusToAssign = new();
            ICollection<SampleRequestStatus> sampleRequestStatusCollectionToAssign = new List<SampleRequestStatus>();
            SampleRequestType sampleRequestTypeToAssign = new();
            ICollection<SampleRequestType> sampleRequestTypeCollectionToAssign = new List<SampleRequestType>();
            #endregion
            #region Scheduling
            Appointment appointmentToAssign = new();
            ICollection<Appointment> appointmentCollectionToAssign = new List<Appointment>();
            AppointmentStatus appointmentStatusToAssign = new();
            ICollection<AppointmentStatus> appointmentStatusCollectionToAssign = new List<AppointmentStatus>();
            AppointmentType appointmentTypeToAssign = new();
            ICollection<AppointmentType> appointmentTypeCollectionToAssign = new List<AppointmentType>();
            Calendar calendarToAssign = new();
            ICollection<Calendar> calendarCollectionToAssign = new List<Calendar>();
            CalendarAppointment calendarAppointmentToAssign = new();
            ICollection<CalendarAppointment> calendarAppointmentCollectionToAssign = new List<CalendarAppointment>();
            #endregion
            #region Scouting
            Scout scoutToAssign = new();
            ICollection<Scout> scoutCollectionToAssign = new List<Scout>();
            ScoutCategory scoutCategoryToAssign = new();
            ICollection<ScoutCategory> scoutCategoryCollectionToAssign = new List<ScoutCategory>();
            ScoutCategoryType scoutCategoryTypeToAssign = new();
            ICollection<ScoutCategoryType> scoutCategoryTypeCollectionToAssign = new List<ScoutCategoryType>();
            #endregion
            #region Shipping
            Package packageToAssign = new();
            ICollection<Package> packageCollectionToAssign = new List<Package>();
            PackageType packageTypeToAssign = new();
            ICollection<PackageType> packageTypeCollectionToAssign = new List<PackageType>();
            RateQuote rateQuoteToAssign = new();
            ICollection<RateQuote> rateQuoteCollectionToAssign = new List<RateQuote>();
            ShipCarrier shipCarrierToAssign = new();
            ICollection<ShipCarrier> shipCarrierCollectionToAssign = new List<ShipCarrier>();
            ShipCarrierMethod shipCarrierMethodToAssign = new();
            ICollection<ShipCarrierMethod> shipCarrierMethodCollectionToAssign = new List<ShipCarrierMethod>();
            Shipment shipmentToAssign = new();
            ICollection<Shipment> shipmentCollectionToAssign = new List<Shipment>();
            ShipmentEvent shipmentEventToAssign = new();
            ICollection<ShipmentEvent> shipmentEventCollectionToAssign = new List<ShipmentEvent>();
            ShipmentStatus shipmentStatusToAssign = new();
            ICollection<ShipmentStatus> shipmentStatusCollectionToAssign = new List<ShipmentStatus>();
            ShipmentType shipmentTypeToAssign = new();
            ICollection<ShipmentType> shipmentTypeCollectionToAssign = new List<ShipmentType>();
            #endregion
            #region Shopping
            Cart cartToAssign = new();
            ICollection<Cart> cartCollectionToAssign = new List<Cart>();
            CartContact cartContactToAssign = new();
            ICollection<CartContact> cartContactCollectionToAssign = new List<CartContact>();
            CartEvent cartEventToAssign = new();
            ICollection<CartEvent> cartEventCollectionToAssign = new List<CartEvent>();
            CartEventType cartEventTypeToAssign = new();
            ICollection<CartEventType> cartEventTypeCollectionToAssign = new List<CartEventType>();
            CartFile cartFileToAssign = new();
            ICollection<CartFile> cartFileCollectionToAssign = new List<CartFile>();
            CartItem cartItemToAssign = new();
            ICollection<CartItem> cartItemCollectionToAssign = new List<CartItem>();
            CartItemTarget cartItemTargetToAssign = new();
            ICollection<CartItemTarget> cartItemTargetCollectionToAssign = new List<CartItemTarget>();
            CartState cartStateToAssign = new();
            ICollection<CartState> cartStateCollectionToAssign = new List<CartState>();
            CartStatus cartStatusToAssign = new();
            ICollection<CartStatus> cartStatusCollectionToAssign = new List<CartStatus>();
            CartType cartTypeToAssign = new();
            ICollection<CartType> cartTypeCollectionToAssign = new List<CartType>();
            #endregion
            #region Stores
            SiteDomain siteDomainToAssign = new();
            ICollection<SiteDomain> siteDomainCollectionToAssign = new List<SiteDomain>();
            SiteDomainSocialProvider siteDomainSocialProviderToAssign = new();
            ICollection<SiteDomainSocialProvider> siteDomainSocialProviderCollectionToAssign = new List<SiteDomainSocialProvider>();
            SocialProvider socialProviderToAssign = new();
            ICollection<SocialProvider> socialProviderCollectionToAssign = new List<SocialProvider>();
            Store storeToAssign = new();
            ICollection<Store> storeCollectionToAssign = new List<Store>();
            StoreAccount storeAccountToAssign = new();
            ICollection<StoreAccount> storeAccountCollectionToAssign = new List<StoreAccount>();
            StoreBadge storeBadgeToAssign = new();
            ICollection<StoreBadge> storeBadgeCollectionToAssign = new List<StoreBadge>();
            StoreCategory storeCategoryToAssign = new();
            ICollection<StoreCategory> storeCategoryCollectionToAssign = new List<StoreCategory>();
            StoreContact storeContactToAssign = new();
            ICollection<StoreContact> storeContactCollectionToAssign = new List<StoreContact>();
            StoreCountry storeCountryToAssign = new();
            ICollection<StoreCountry> storeCountryCollectionToAssign = new List<StoreCountry>();
            StoreDistrict storeDistrictToAssign = new();
            ICollection<StoreDistrict> storeDistrictCollectionToAssign = new List<StoreDistrict>();
            StoreImage storeImageToAssign = new();
            ICollection<StoreImage> storeImageCollectionToAssign = new List<StoreImage>();
            StoreImageType storeImageTypeToAssign = new();
            ICollection<StoreImageType> storeImageTypeCollectionToAssign = new List<StoreImageType>();
            StoreInventoryLocation storeInventoryLocationToAssign = new();
            ICollection<StoreInventoryLocation> storeInventoryLocationCollectionToAssign = new List<StoreInventoryLocation>();
            StoreInventoryLocationType storeInventoryLocationTypeToAssign = new();
            ICollection<StoreInventoryLocationType> storeInventoryLocationTypeCollectionToAssign = new List<StoreInventoryLocationType>();
            StoreManufacturer storeManufacturerToAssign = new();
            ICollection<StoreManufacturer> storeManufacturerCollectionToAssign = new List<StoreManufacturer>();
            StoreProduct storeProductToAssign = new();
            ICollection<StoreProduct> storeProductCollectionToAssign = new List<StoreProduct>();
            StoreRegion storeRegionToAssign = new();
            ICollection<StoreRegion> storeRegionCollectionToAssign = new List<StoreRegion>();
            StoreSubscription storeSubscriptionToAssign = new();
            ICollection<StoreSubscription> storeSubscriptionCollectionToAssign = new List<StoreSubscription>();
            StoreType storeTypeToAssign = new();
            ICollection<StoreType> storeTypeCollectionToAssign = new List<StoreType>();
            StoreUser storeUserToAssign = new();
            ICollection<StoreUser> storeUserCollectionToAssign = new List<StoreUser>();
            StoreVendor storeVendorToAssign = new();
            ICollection<StoreVendor> storeVendorCollectionToAssign = new List<StoreVendor>();
            #endregion
            #region System
            ImportExportMapping importExportMappingToAssign = new();
            ICollection<ImportExportMapping> importExportMappingCollectionToAssign = new List<ImportExportMapping>();
            Note noteToAssign = new();
            ICollection<Note> noteCollectionToAssign = new List<Note>();
            NoteType noteTypeToAssign = new();
            ICollection<NoteType> noteTypeCollectionToAssign = new List<NoteType>();
            RecordVersion recordVersionToAssign = new();
            ICollection<RecordVersion> recordVersionCollectionToAssign = new List<RecordVersion>();
            RecordVersionType recordVersionTypeToAssign = new();
            ICollection<RecordVersionType> recordVersionTypeCollectionToAssign = new List<RecordVersionType>();
            Setting settingToAssign = new();
            ICollection<Setting> settingCollectionToAssign = new List<Setting>();
            SettingGroup settingGroupToAssign = new();
            ICollection<SettingGroup> settingGroupCollectionToAssign = new List<SettingGroup>();
            SettingType settingTypeToAssign = new();
            ICollection<SettingType> settingTypeCollectionToAssign = new List<SettingType>();
            EventLog eventLogToAssign = new();
            ICollection<EventLog> eventLogCollectionToAssign = new List<EventLog>();
            #endregion
            #region Tax
            HistoricalTaxRate historicalTaxRateToAssign = new();
            ICollection<HistoricalTaxRate> historicalTaxRateCollectionToAssign = new List<HistoricalTaxRate>();
            TaxCountry taxCountryToAssign = new();
            ICollection<TaxCountry> taxCountryCollectionToAssign = new List<TaxCountry>();
            TaxDistrict taxDistrictToAssign = new();
            ICollection<TaxDistrict> taxDistrictCollectionToAssign = new List<TaxDistrict>();
            TaxRegion taxRegionToAssign = new();
            ICollection<TaxRegion> taxRegionCollectionToAssign = new List<TaxRegion>();
            #endregion
            #region Tracking
            Campaign campaignToAssign = new();
            ICollection<Campaign> campaignCollectionToAssign = new List<Campaign>();
            CampaignAd campaignAdToAssign = new();
            ICollection<CampaignAd> campaignAdCollectionToAssign = new List<CampaignAd>();
            CampaignStatus campaignStatusToAssign = new();
            ICollection<CampaignStatus> campaignStatusCollectionToAssign = new List<CampaignStatus>();
            CampaignType campaignTypeToAssign = new();
            ICollection<CampaignType> campaignTypeCollectionToAssign = new List<CampaignType>();
            Event eventToAssign = new();
            ICollection<Event> eventCollectionToAssign = new List<Event>();
            EventStatus eventStatusToAssign = new();
            ICollection<EventStatus> eventStatusCollectionToAssign = new List<EventStatus>();
            EventType eventTypeToAssign = new();
            ICollection<EventType> eventTypeCollectionToAssign = new List<EventType>();
            IPOrganization iPOrganizationToAssign = new();
            ICollection<IPOrganization> iPOrganizationCollectionToAssign = new List<IPOrganization>();
            IPOrganizationStatus iPOrganizationStatusToAssign = new();
            ICollection<IPOrganizationStatus> iPOrganizationStatusCollectionToAssign = new List<IPOrganizationStatus>();
            PageView pageViewToAssign = new();
            ICollection<PageView> pageViewCollectionToAssign = new List<PageView>();
            PageViewEvent pageViewEventToAssign = new();
            ICollection<PageViewEvent> pageViewEventCollectionToAssign = new List<PageViewEvent>();
            PageViewStatus pageViewStatusToAssign = new();
            ICollection<PageViewStatus> pageViewStatusCollectionToAssign = new List<PageViewStatus>();
            PageViewType pageViewTypeToAssign = new();
            ICollection<PageViewType> pageViewTypeCollectionToAssign = new List<PageViewType>();
            Visit visitToAssign = new();
            ICollection<Visit> visitCollectionToAssign = new List<Visit>();
            Visitor visitorToAssign = new();
            ICollection<Visitor> visitorCollectionToAssign = new List<Visitor>();
            VisitStatus visitStatusToAssign = new();
            ICollection<VisitStatus> visitStatusCollectionToAssign = new List<VisitStatus>();
            #endregion
            #region Vendors
            Vendor vendorToAssign = new();
            ICollection<Vendor> vendorCollectionToAssign = new List<Vendor>();
            VendorAccount vendorAccountToAssign = new();
            ICollection<VendorAccount> vendorAccountCollectionToAssign = new List<VendorAccount>();
            VendorImage vendorImageToAssign = new();
            ICollection<VendorImage> vendorImageCollectionToAssign = new List<VendorImage>();
            VendorImageType vendorImageTypeToAssign = new();
            ICollection<VendorImageType> vendorImageTypeCollectionToAssign = new List<VendorImageType>();
            VendorManufacturer vendorManufacturerToAssign = new();
            ICollection<VendorManufacturer> vendorManufacturerCollectionToAssign = new List<VendorManufacturer>();
            VendorProduct vendorProductToAssign = new();
            ICollection<VendorProduct> vendorProductCollectionToAssign = new List<VendorProduct>();
            VendorType vendorTypeToAssign = new();
            ICollection<VendorType> vendorTypeCollectionToAssign = new List<VendorType>();
            #endregion
            #endregion
            #region To Check's
            #region Accounts
            Account accountToCheck = new();
            AccountAssociation accountAssociationToCheck = new();
            AccountAssociationType accountAssociationTypeToCheck = new();
            AccountContact accountContactToCheck = new();
            AccountCurrency accountCurrencyToCheck = new();
            AccountFile accountFileToCheck = new();
            AccountImage accountImageToCheck = new();
            AccountImageType accountImageTypeToCheck = new();
            AccountPricePoint accountPricePointToCheck = new();
            AccountProduct accountProductToCheck = new();
            AccountProductType accountProductTypeToCheck = new();
            AccountStatus accountStatusToCheck = new();
            AccountType accountTypeToCheck = new();
            AccountUsageBalance accountUsageBalanceToCheck = new();
            AccountUserRole accountUserRoleToCheck = new();
            Contractor contractorToCheck = new();
            ServiceArea serviceAreaToCheck = new();
            #endregion
            #region Advertising
            Ad adToCheck = new();
            AdAccount adAccountToCheck = new();
            AdBrand adBrandToCheck = new();
            AdFranchise adFranchiseToCheck = new();
            AdImage adImageToCheck = new();
            AdImageType adImageTypeToCheck = new();
            AdStatus adStatusToCheck = new();
            AdStore adStoreToCheck = new();
            AdType adTypeToCheck = new();
            AdZone adZoneToCheck = new();
            AdZoneAccess adZoneAccessToCheck = new();
            Zone zoneToCheck = new();
            ZoneStatus zoneStatusToCheck = new();
            ZoneType zoneTypeToCheck = new();
            #endregion
            #region Attributes
            AttributeGroup attributeGroupToCheck = new();
            AttributeTab attributeTabToCheck = new();
            AttributeType attributeTypeToCheck = new();
            GeneralAttribute generalAttributeToCheck = new();
            GeneralAttributePredefinedOption generalAttributePredefinedOptionToCheck = new();
            #endregion
            #region Auctions
            Auction auctionToCheck = new();
            AuctionCategory auctionCategoryToCheck = new();
            AuctionStatus auctionStatusToCheck = new();
            AuctionType auctionTypeToCheck = new();
            Bid bidToCheck = new();
            BidStatus bidStatusToCheck = new();
            BrandAuction brandAuctionToCheck = new();
            FranchiseAuction franchiseAuctionToCheck = new();
            Lot lotToCheck = new();
            LotCategory lotCategoryToCheck = new();
            LotGroup lotGroupToCheck = new();
            LotStatus lotStatusToCheck = new();
            LotType lotTypeToCheck = new();
            StoreAuction storeAuctionToCheck = new();
            #endregion
            #region Badges
            Badge badgeToCheck = new();
            BadgeImage badgeImageToCheck = new();
            BadgeImageType badgeImageTypeToCheck = new();
            BadgeType badgeTypeToCheck = new();
            #endregion
            #region Brands
            Brand brandToCheck = new();
            BrandAccount brandAccountToCheck = new();
            BrandCategory brandCategoryToCheck = new();
            BrandCurrency brandCurrencyToCheck = new();
            BrandFranchise brandFranchiseToCheck = new();
            BrandImage brandImageToCheck = new();
            BrandImageType brandImageTypeToCheck = new();
            BrandInventoryLocation brandInventoryLocationToCheck = new();
            BrandInventoryLocationType brandInventoryLocationTypeToCheck = new();
            BrandLanguage brandLanguageToCheck = new();
            BrandManufacturer brandManufacturerToCheck = new();
            BrandProduct brandProductToCheck = new();
            BrandSiteDomain brandSiteDomainToCheck = new();
            BrandStore brandStoreToCheck = new();
            BrandUser brandUserToCheck = new();
            BrandVendor brandVendorToCheck = new();
            #endregion
            #region CalendarEvents
            CalendarEvent calendarEventToCheck = new();
            CalendarEventDetail calendarEventDetailToCheck = new();
            CalendarEventFile calendarEventFileToCheck = new();
            CalendarEventImage calendarEventImageToCheck = new();
            CalendarEventImageType calendarEventImageTypeToCheck = new();
            CalendarEventProduct calendarEventProductToCheck = new();
            CalendarEventStatus calendarEventStatusToCheck = new();
            CalendarEventType calendarEventTypeToCheck = new();
            UserEventAttendance userEventAttendanceToCheck = new();
            UserEventAttendanceType userEventAttendanceTypeToCheck = new();
            #endregion
            #region Categories
            Category categoryToCheck = new();
            CategoryFile categoryFileToCheck = new();
            CategoryImage categoryImageToCheck = new();
            CategoryImageType categoryImageTypeToCheck = new();
            CategoryType categoryTypeToCheck = new();
            #endregion
            #region Contacts
            Contact contactToCheck = new();
            ContactImage contactImageToCheck = new();
            ContactImageType contactImageTypeToCheck = new();
            ContactType contactTypeToCheck = new();
            Permission permissionToCheck = new();
            ProfanityFilter profanityFilterToCheck = new();
            ReferralCode referralCodeToCheck = new();
            ReferralCodeStatus referralCodeStatusToCheck = new();
            ReferralCodeType referralCodeTypeToCheck = new();
            RolePermission rolePermissionToCheck = new();
            RoleUser roleUserToCheck = new();
            User userToCheck = new();
            UserClaim userClaimToCheck = new();
            UserFile userFileToCheck = new();
            UserImage userImageToCheck = new();
            UserImageType userImageTypeToCheck = new();
            UserLogin userLoginToCheck = new();
            UserOnlineStatus userOnlineStatusToCheck = new();
            UserProductType userProductTypeToCheck = new();
            UserRole userRoleToCheck = new();
            UserStatus userStatusToCheck = new();
            UserType userTypeToCheck = new();
            #endregion
            #region Counters
            Counter counterToCheck = new();
            CounterLog counterLogToCheck = new();
            CounterLogType counterLogTypeToCheck = new();
            CounterType counterTypeToCheck = new();
            #endregion
            #region Currencies
            Currency currencyToCheck = new();
            CurrencyConversion currencyConversionToCheck = new();
            CurrencyImage currencyImageToCheck = new();
            CurrencyImageType currencyImageTypeToCheck = new();
            HistoricalCurrencyRate historicalCurrencyRateToCheck = new();
            #endregion
            #region Discounts
            AppliedCartDiscount appliedCartDiscountToCheck = new();
            AppliedCartItemDiscount appliedCartItemDiscountToCheck = new();
            Discount discountToCheck = new();
            DiscountAccount discountAccountToCheck = new();
            DiscountAccountType discountAccountTypeToCheck = new();
            DiscountBrand discountBrandToCheck = new();
            DiscountCategory discountCategoryToCheck = new();
            DiscountCode discountCodeToCheck = new();
            DiscountCountry discountCountryToCheck = new();
            DiscountFranchise discountFranchiseToCheck = new();
            DiscountManufacturer discountManufacturerToCheck = new();
            DiscountProduct discountProductToCheck = new();
            DiscountProductType discountProductTypeToCheck = new();
            DiscountShipCarrierMethod discountShipCarrierMethodToCheck = new();
            DiscountStore discountStoreToCheck = new();
            DiscountUser discountUserToCheck = new();
            DiscountUserRole discountUserRoleToCheck = new();
            DiscountVendor discountVendorToCheck = new();
            AppliedPurchaseOrderDiscount appliedPurchaseOrderDiscountToCheck = new();
            AppliedPurchaseOrderItemDiscount appliedPurchaseOrderItemDiscountToCheck = new();
            AppliedSalesInvoiceDiscount appliedSalesInvoiceDiscountToCheck = new();
            AppliedSalesInvoiceItemDiscount appliedSalesInvoiceItemDiscountToCheck = new();
            AppliedSalesOrderDiscount appliedSalesOrderDiscountToCheck = new();
            AppliedSalesOrderItemDiscount appliedSalesOrderItemDiscountToCheck = new();
            AppliedSalesQuoteDiscount appliedSalesQuoteDiscountToCheck = new();
            AppliedSalesQuoteItemDiscount appliedSalesQuoteItemDiscountToCheck = new();
            AppliedSalesReturnDiscount appliedSalesReturnDiscountToCheck = new();
            AppliedSalesReturnItemDiscount appliedSalesReturnItemDiscountToCheck = new();
            AppliedSampleRequestDiscount appliedSampleRequestDiscountToCheck = new();
            AppliedSampleRequestItemDiscount appliedSampleRequestItemDiscountToCheck = new();
            #endregion
            #region Favorites
            FavoriteCategory favoriteCategoryToCheck = new();
            FavoriteManufacturer favoriteManufacturerToCheck = new();
            FavoriteShipCarrier favoriteShipCarrierToCheck = new();
            FavoriteStore favoriteStoreToCheck = new();
            FavoriteVendor favoriteVendorToCheck = new();
            #endregion
            #region Franchises
            Franchise franchiseToCheck = new();
            FranchiseAccount franchiseAccountToCheck = new();
            FranchiseCategory franchiseCategoryToCheck = new();
            FranchiseCountry franchiseCountryToCheck = new();
            FranchiseCurrency franchiseCurrencyToCheck = new();
            FranchiseDistrict franchiseDistrictToCheck = new();
            FranchiseImage franchiseImageToCheck = new();
            FranchiseImageType franchiseImageTypeToCheck = new();
            FranchiseInventoryLocation franchiseInventoryLocationToCheck = new();
            FranchiseInventoryLocationType franchiseInventoryLocationTypeToCheck = new();
            FranchiseLanguage franchiseLanguageToCheck = new();
            FranchiseManufacturer franchiseManufacturerToCheck = new();
            FranchiseProduct franchiseProductToCheck = new();
            FranchiseRegion franchiseRegionToCheck = new();
            FranchiseSiteDomain franchiseSiteDomainToCheck = new();
            FranchiseStore franchiseStoreToCheck = new();
            FranchiseType franchiseTypeToCheck = new();
            FranchiseUser franchiseUserToCheck = new();
            FranchiseVendor franchiseVendorToCheck = new();
            #endregion
            #region Geography
            Address addressToCheck = new();
            Country countryToCheck = new();
            CountryCurrency countryCurrencyToCheck = new();
            CountryImage countryImageToCheck = new();
            CountryImageType countryImageTypeToCheck = new();
            CountryLanguage countryLanguageToCheck = new();
            District districtToCheck = new();
            DistrictCurrency districtCurrencyToCheck = new();
            DistrictImage districtImageToCheck = new();
            DistrictImageType districtImageTypeToCheck = new();
            DistrictLanguage districtLanguageToCheck = new();
            HistoricalAddressValidation historicalAddressValidationToCheck = new();
            PhonePrefixLookup phonePrefixLookupToCheck = new();
            Region regionToCheck = new();
            RegionCurrency regionCurrencyToCheck = new();
            RegionImage regionImageToCheck = new();
            RegionImageType regionImageTypeToCheck = new();
            RegionLanguage regionLanguageToCheck = new();
            ZipCode zipCodeToCheck = new();
            #endregion
            #region Globalization
            Language languageToCheck = new();
            LanguageImage languageImageToCheck = new();
            LanguageImageType languageImageTypeToCheck = new();
            UiKey uiKeyToCheck = new();
            UiTranslation uiTranslationToCheck = new();
            #endregion
            #region Groups
            Group groupToCheck = new();
            GroupStatus groupStatusToCheck = new();
            GroupType groupTypeToCheck = new();
            GroupUser groupUserToCheck = new();
            #endregion
            #region Hangfire
            HangfireAggregatedCounter hangfireAggregatedCounterToCheck = new();
            HangfireCounter hangfireCounterToCheck = new();
            HangfireHash hangfireHashToCheck = new();
            HangfireJob hangfireJobToCheck = new();
            HangfireJobParameter hangfireJobParameterToCheck = new();
            HangfireJobQueue hangfireJobQueueToCheck = new();
            HangfireList hangfireListToCheck = new();
            ScheduledJobConfiguration scheduledJobConfigurationToCheck = new();
            ScheduledJobConfigurationSetting scheduledJobConfigurationSettingToCheck = new();
            HangfireSchema hangfireSchemaToCheck = new();
            HangfireServer hangfireServerToCheck = new();
            HangfireSet hangfireSetToCheck = new();
            HangfireState hangfireStateToCheck = new();
            #endregion
            #region Inventory
            InventoryLocation inventoryLocationToCheck = new();
            InventoryLocationRegion inventoryLocationRegionToCheck = new();
            InventoryLocationSection inventoryLocationSectionToCheck = new();
            InventoryLocationUser inventoryLocationUserToCheck = new();
            #endregion
            #region Invoicing
            SalesInvoice salesInvoiceToCheck = new();
            SalesInvoiceContact salesInvoiceContactToCheck = new();
            SalesInvoiceEvent salesInvoiceEventToCheck = new();
            SalesInvoiceEventType salesInvoiceEventTypeToCheck = new();
            SalesInvoiceFile salesInvoiceFileToCheck = new();
            SalesInvoiceItem salesInvoiceItemToCheck = new();
            SalesInvoiceItemTarget salesInvoiceItemTargetToCheck = new();
            SalesInvoiceState salesInvoiceStateToCheck = new();
            SalesInvoiceStatus salesInvoiceStatusToCheck = new();
            SalesInvoiceType salesInvoiceTypeToCheck = new();
            SalesOrderSalesInvoice salesOrderSalesInvoiceToCheck = new();
            #endregion
            #region Manufacturers
            Manufacturer manufacturerToCheck = new();
            ManufacturerImage manufacturerImageToCheck = new();
            ManufacturerImageType manufacturerImageTypeToCheck = new();
            ManufacturerProduct manufacturerProductToCheck = new();
            ManufacturerType manufacturerTypeToCheck = new();
            #endregion
            #region Media
            StoredFile storedFileToCheck = new();
            #endregion
            #region Messaging
            Conversation conversationToCheck = new();
            ConversationUser conversationUserToCheck = new();
            EmailQueue emailQueueToCheck = new();
            EmailQueueAttachment emailQueueAttachmentToCheck = new();
            EmailStatus emailStatusToCheck = new();
            EmailTemplate emailTemplateToCheck = new();
            EmailType emailTypeToCheck = new();
            Message messageToCheck = new();
            MessageAttachment messageAttachmentToCheck = new();
            MessageRecipient messageRecipientToCheck = new();
            ProductNotification productNotificationToCheck = new();
            UserSupportRequest userSupportRequestToCheck = new();
            #endregion
            #region Ordering
            SalesOrder salesOrderToCheck = new();
            SalesOrderContact salesOrderContactToCheck = new();
            SalesOrderEvent salesOrderEventToCheck = new();
            SalesOrderEventType salesOrderEventTypeToCheck = new();
            SalesOrderFile salesOrderFileToCheck = new();
            SalesOrderItem salesOrderItemToCheck = new();
            SalesOrderItemTarget salesOrderItemTargetToCheck = new();
            SalesOrderState salesOrderStateToCheck = new();
            SalesOrderStatus salesOrderStatusToCheck = new();
            SalesOrderType salesOrderTypeToCheck = new();
            #endregion
            #region Payments
            Membership membershipToCheck = new();
            MembershipAdZoneAccess membershipAdZoneAccessToCheck = new();
            MembershipAdZoneAccessByLevel membershipAdZoneAccessByLevelToCheck = new();
            MembershipLevel membershipLevelToCheck = new();
            MembershipRepeatType membershipRepeatTypeToCheck = new();
            Payment paymentToCheck = new();
            PaymentMethod paymentMethodToCheck = new();
            PaymentStatus paymentStatusToCheck = new();
            PaymentType paymentTypeToCheck = new();
            RepeatType repeatTypeToCheck = new();
            SalesInvoicePayment salesInvoicePaymentToCheck = new();
            SalesOrderPayment salesOrderPaymentToCheck = new();
            SalesReturnPayment salesReturnPaymentToCheck = new();
            Subscription subscriptionToCheck = new();
            SubscriptionHistory subscriptionHistoryToCheck = new();
            SubscriptionStatus subscriptionStatusToCheck = new();
            SubscriptionType subscriptionTypeToCheck = new();
            SubscriptionTypeRepeatType subscriptionTypeRepeatTypeToCheck = new();
            Wallet walletToCheck = new();
            #endregion
            #region Pricing
            PricePoint pricePointToCheck = new();
            PriceRounding priceRoundingToCheck = new();
            PriceRule priceRuleToCheck = new();
            PriceRuleAccount priceRuleAccountToCheck = new();
            PriceRuleAccountType priceRuleAccountTypeToCheck = new();
            PriceRuleBrand priceRuleBrandToCheck = new();
            PriceRuleCategory priceRuleCategoryToCheck = new();
            PriceRuleCountry priceRuleCountryToCheck = new();
            PriceRuleFranchise priceRuleFranchiseToCheck = new();
            PriceRuleManufacturer priceRuleManufacturerToCheck = new();
            PriceRuleProduct priceRuleProductToCheck = new();
            PriceRuleProductType priceRuleProductTypeToCheck = new();
            PriceRuleStore priceRuleStoreToCheck = new();
            PriceRuleUserRole priceRuleUserRoleToCheck = new();
            PriceRuleVendor priceRuleVendorToCheck = new();
            #endregion
            #region Products
            FutureImport futureImportToCheck = new();
            FutureImportStatus futureImportStatusToCheck = new();
            Product productToCheck = new();
            ProductAssociation productAssociationToCheck = new();
            ProductAssociationType productAssociationTypeToCheck = new();
            ProductCategory productCategoryToCheck = new();
            ProductDownload productDownloadToCheck = new();
            ProductDownloadType productDownloadTypeToCheck = new();
            ProductFile productFileToCheck = new();
            ProductImage productImageToCheck = new();
            ProductImageType productImageTypeToCheck = new();
            ProductInventoryLocationSection productInventoryLocationSectionToCheck = new();
            ProductMembershipLevel productMembershipLevelToCheck = new();
            ProductPricePoint productPricePointToCheck = new();
            ProductRestriction productRestrictionToCheck = new();
            ProductShipCarrierMethod productShipCarrierMethodToCheck = new();
            ProductStatus productStatusToCheck = new();
            ProductSubscriptionType productSubscriptionTypeToCheck = new();
            ProductType productTypeToCheck = new();
            #endregion
            #region Purchasing
            PurchaseOrder purchaseOrderToCheck = new();
            PurchaseOrderContact purchaseOrderContactToCheck = new();
            PurchaseOrderEvent purchaseOrderEventToCheck = new();
            PurchaseOrderEventType purchaseOrderEventTypeToCheck = new();
            PurchaseOrderFile purchaseOrderFileToCheck = new();
            PurchaseOrderItem purchaseOrderItemToCheck = new();
            PurchaseOrderItemTarget purchaseOrderItemTargetToCheck = new();
            PurchaseOrderState purchaseOrderStateToCheck = new();
            PurchaseOrderStatus purchaseOrderStatusToCheck = new();
            PurchaseOrderType purchaseOrderTypeToCheck = new();
            SalesOrderPurchaseOrder salesOrderPurchaseOrderToCheck = new();
            #endregion
            #region Questionnaire
            Answer answerToCheck = new();
            Question questionToCheck = new();
            QuestionOption questionOptionToCheck = new();
            QuestionType questionTypeToCheck = new();
            #endregion
            #region Quoting
            SalesQuote salesQuoteToCheck = new();
            SalesQuoteCategory salesQuoteCategoryToCheck = new();
            SalesQuoteContact salesQuoteContactToCheck = new();
            SalesQuoteEvent salesQuoteEventToCheck = new();
            SalesQuoteEventType salesQuoteEventTypeToCheck = new();
            SalesQuoteFile salesQuoteFileToCheck = new();
            SalesQuoteItem salesQuoteItemToCheck = new();
            SalesQuoteItemTarget salesQuoteItemTargetToCheck = new();
            SalesQuoteSalesOrder salesQuoteSalesOrderToCheck = new();
            SalesQuoteState salesQuoteStateToCheck = new();
            SalesQuoteStatus salesQuoteStatusToCheck = new();
            SalesQuoteType salesQuoteTypeToCheck = new();
            #endregion
            #region Reporting
            Report reportToCheck = new();
            ReportType reportTypeToCheck = new();
            #endregion
            #region Returning
            SalesReturn salesReturnToCheck = new();
            SalesReturnContact salesReturnContactToCheck = new();
            SalesReturnEvent salesReturnEventToCheck = new();
            SalesReturnEventType salesReturnEventTypeToCheck = new();
            SalesReturnFile salesReturnFileToCheck = new();
            SalesReturnItem salesReturnItemToCheck = new();
            SalesReturnItemTarget salesReturnItemTargetToCheck = new();
            SalesReturnReason salesReturnReasonToCheck = new();
            SalesReturnSalesOrder salesReturnSalesOrderToCheck = new();
            SalesReturnState salesReturnStateToCheck = new();
            SalesReturnStatus salesReturnStatusToCheck = new();
            SalesReturnType salesReturnTypeToCheck = new();
            #endregion
            #region Reviews
            Review reviewToCheck = new();
            ReviewType reviewTypeToCheck = new();
            #endregion
            #region Sales
            SalesGroup salesGroupToCheck = new();
            SalesItemTargetType salesItemTargetTypeToCheck = new();
            #endregion
            #region Sampling
            SampleRequest sampleRequestToCheck = new();
            SampleRequestContact sampleRequestContactToCheck = new();
            SampleRequestEvent sampleRequestEventToCheck = new();
            SampleRequestEventType sampleRequestEventTypeToCheck = new();
            SampleRequestFile sampleRequestFileToCheck = new();
            SampleRequestItem sampleRequestItemToCheck = new();
            SampleRequestItemTarget sampleRequestItemTargetToCheck = new();
            SampleRequestState sampleRequestStateToCheck = new();
            SampleRequestStatus sampleRequestStatusToCheck = new();
            SampleRequestType sampleRequestTypeToCheck = new();
            #endregion
            #region Scheduling
            Appointment appointmentToCheck = new();
            AppointmentStatus appointmentStatusToCheck = new();
            AppointmentType appointmentTypeToCheck = new();
            Calendar calendarToCheck = new();
            CalendarAppointment calendarAppointmentToCheck = new();
            #endregion
            #region Scouting
            Scout scoutToCheck = new();
            ScoutCategory scoutCategoryToCheck = new();
            ScoutCategoryType scoutCategoryTypeToCheck = new();
            #endregion
            #region Shipping
            Package packageToCheck = new();
            PackageType packageTypeToCheck = new();
            RateQuote rateQuoteToCheck = new();
            ShipCarrier shipCarrierToCheck = new();
            ShipCarrierMethod shipCarrierMethodToCheck = new();
            Shipment shipmentToCheck = new();
            ShipmentEvent shipmentEventToCheck = new();
            ShipmentStatus shipmentStatusToCheck = new();
            ShipmentType shipmentTypeToCheck = new();
            #endregion
            #region Shopping
            Cart cartToCheck = new();
            CartContact cartContactToCheck = new();
            CartEvent cartEventToCheck = new();
            CartEventType cartEventTypeToCheck = new();
            CartFile cartFileToCheck = new();
            CartItem cartItemToCheck = new();
            CartItemTarget cartItemTargetToCheck = new();
            CartState cartStateToCheck = new();
            CartStatus cartStatusToCheck = new();
            CartType cartTypeToCheck = new();
            #endregion
            #region Stores
            SiteDomain siteDomainToCheck = new();
            SiteDomainSocialProvider siteDomainSocialProviderToCheck = new();
            SocialProvider socialProviderToCheck = new();
            Store storeToCheck = new();
            StoreAccount storeAccountToCheck = new();
            StoreBadge storeBadgeToCheck = new();
            StoreCategory storeCategoryToCheck = new();
            StoreContact storeContactToCheck = new();
            StoreCountry storeCountryToCheck = new();
            StoreDistrict storeDistrictToCheck = new();
            StoreImage storeImageToCheck = new();
            StoreImageType storeImageTypeToCheck = new();
            StoreInventoryLocation storeInventoryLocationToCheck = new();
            StoreInventoryLocationType storeInventoryLocationTypeToCheck = new();
            StoreManufacturer storeManufacturerToCheck = new();
            StoreProduct storeProductToCheck = new();
            StoreRegion storeRegionToCheck = new();
            StoreSubscription storeSubscriptionToCheck = new();
            StoreType storeTypeToCheck = new();
            StoreUser storeUserToCheck = new();
            StoreVendor storeVendorToCheck = new();
            #endregion
            #region System
            ImportExportMapping importExportMappingToCheck = new();
            Note noteToCheck = new();
            NoteType noteTypeToCheck = new();
            RecordVersion recordVersionToCheck = new();
            RecordVersionType recordVersionTypeToCheck = new();
            Setting settingToCheck = new();
            SettingGroup settingGroupToCheck = new();
            SettingType settingTypeToCheck = new();
            EventLog eventLogToCheck = new();
            #endregion
            #region Tax
            HistoricalTaxRate historicalTaxRateToCheck = new();
            TaxCountry taxCountryToCheck = new();
            TaxDistrict taxDistrictToCheck = new();
            TaxRegion taxRegionToCheck = new();
            #endregion
            #region Tracking
            Campaign campaignToCheck = new();
            CampaignAd campaignAdToCheck = new();
            CampaignStatus campaignStatusToCheck = new();
            CampaignType campaignTypeToCheck = new();
            Event eventToCheck = new();
            EventStatus eventStatusToCheck = new();
            EventType eventTypeToCheck = new();
            IPOrganization iPOrganizationToCheck = new();
            IPOrganizationStatus iPOrganizationStatusToCheck = new();
            PageView pageViewToCheck = new();
            PageViewEvent pageViewEventToCheck = new();
            PageViewStatus pageViewStatusToCheck = new();
            PageViewType pageViewTypeToCheck = new();
            Visit visitToCheck = new();
            Visitor visitorToCheck = new();
            VisitStatus visitStatusToCheck = new();
            #endregion
            #region Vendors
            Vendor vendorToCheck = new();
            VendorAccount vendorAccountToCheck = new();
            VendorImage vendorImageToCheck = new();
            VendorImageType vendorImageTypeToCheck = new();
            VendorManufacturer vendorManufacturerToCheck = new();
            VendorProduct vendorProductToCheck = new();
            VendorType vendorTypeToCheck = new();
            #endregion
            #endregion
            #endregion
            #region Act/Assert
            #region Accounts
            // Accounts / Account / Images as ICollection<AccountImage>
            Assert.Equal(accountImageCollectionToAssign, accountToCheck.Images = accountImageCollectionToAssign);
            Assert.Equal(accountImageCollectionToAssign, accountToCheck.Images);
            // Accounts / Account / StoredFiles as ICollection<AccountFile>
            Assert.Equal(accountFileCollectionToAssign, accountToCheck.StoredFiles = accountFileCollectionToAssign);
            Assert.Equal(accountFileCollectionToAssign, accountToCheck.StoredFiles);
            // Accounts / Account / Brands as ICollection<BrandAccount>
            Assert.Equal(brandAccountCollectionToAssign, accountToCheck.Brands = brandAccountCollectionToAssign);
            Assert.Equal(brandAccountCollectionToAssign, accountToCheck.Brands);
            // Accounts / Account / Franchises as ICollection<FranchiseAccount>
            Assert.Equal(franchiseAccountCollectionToAssign, accountToCheck.Franchises = franchiseAccountCollectionToAssign);
            Assert.Equal(franchiseAccountCollectionToAssign, accountToCheck.Franchises);
            // Accounts / Account / Stores as ICollection<StoreAccount>
            Assert.Equal(storeAccountCollectionToAssign, accountToCheck.Stores = storeAccountCollectionToAssign);
            Assert.Equal(storeAccountCollectionToAssign, accountToCheck.Stores);
            // Accounts / Account / Products as ICollection<AccountProduct>
            Assert.Equal(accountProductCollectionToAssign, accountToCheck.Products = accountProductCollectionToAssign);
            Assert.Equal(accountProductCollectionToAssign, accountToCheck.Products);
            // Accounts / Account / Vendors as ICollection<VendorAccount>
            Assert.Equal(vendorAccountCollectionToAssign, accountToCheck.Vendors = vendorAccountCollectionToAssign);
            Assert.Equal(vendorAccountCollectionToAssign, accountToCheck.Vendors);
            // Accounts / Account / Users as ICollection<User>
            Assert.Equal(userCollectionToAssign, accountToCheck.Users = userCollectionToAssign);
            Assert.Equal(userCollectionToAssign, accountToCheck.Users);
            // Accounts / Account / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, accountToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, accountToCheck.Notes);
            // Accounts / Account / AccountContacts as ICollection<AccountContact>
            Assert.Equal(accountContactCollectionToAssign, accountToCheck.AccountContacts = accountContactCollectionToAssign);
            Assert.Equal(accountContactCollectionToAssign, accountToCheck.AccountContacts);
            // Accounts / Account / AccountCurrencies as ICollection<AccountCurrency>
            Assert.Equal(accountCurrencyCollectionToAssign, accountToCheck.AccountCurrencies = accountCurrencyCollectionToAssign);
            Assert.Equal(accountCurrencyCollectionToAssign, accountToCheck.AccountCurrencies);
            // Accounts / Account / AccountPricePoints as ICollection<AccountPricePoint>
            Assert.Equal(accountPricePointCollectionToAssign, accountToCheck.AccountPricePoints = accountPricePointCollectionToAssign);
            Assert.Equal(accountPricePointCollectionToAssign, accountToCheck.AccountPricePoints);
            // Accounts / Account / AccountAssociations as ICollection<AccountAssociation>
            Assert.Equal(accountAssociationCollectionToAssign, accountToCheck.AccountAssociations = accountAssociationCollectionToAssign);
            Assert.Equal(accountAssociationCollectionToAssign, accountToCheck.AccountAssociations);
            // Accounts / Account / AccountsAssociatedWith as ICollection<AccountAssociation>
            Assert.Equal(accountAssociationCollectionToAssign, accountToCheck.AccountsAssociatedWith = accountAssociationCollectionToAssign);
            Assert.Equal(accountAssociationCollectionToAssign, accountToCheck.AccountsAssociatedWith);
            // Accounts / Account / AccountUserRoles as ICollection<AccountUserRole>
            Assert.Equal(accountUserRoleCollectionToAssign, accountToCheck.AccountUserRoles = accountUserRoleCollectionToAssign);
            Assert.Equal(accountUserRoleCollectionToAssign, accountToCheck.AccountUserRoles);
            // Accounts / Account / Subscriptions as ICollection<Subscription>
            Assert.Equal(subscriptionCollectionToAssign, accountToCheck.Subscriptions = subscriptionCollectionToAssign);
            Assert.Equal(subscriptionCollectionToAssign, accountToCheck.Subscriptions);
            // Accounts / Account / PurchaseOrders as ICollection<PurchaseOrder>
            Assert.Equal(purchaseOrderCollectionToAssign, accountToCheck.PurchaseOrders = purchaseOrderCollectionToAssign);
            Assert.Equal(purchaseOrderCollectionToAssign, accountToCheck.PurchaseOrders);
            // Accounts / AccountContact / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Contact>)accountContactToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Contact>)accountContactToCheck).AccountID);
            // Accounts / AccountContact / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Contact>)accountContactToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Contact>)accountContactToCheck).Account);
            // Accounts / AccountContact / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)accountContactToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)accountContactToCheck).AccountID);
            // Accounts / AccountContact / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountContactToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountContactToCheck).Account);
            // Accounts / AccountContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBase)accountContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBase)accountContactToCheck).ContactID);
            // Accounts / AccountContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBase)accountContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBase)accountContactToCheck).Contact);
            // Accounts / AccountCurrency / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Currency>)accountCurrencyToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Currency>)accountCurrencyToCheck).AccountID);
            // Accounts / AccountCurrency / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Currency>)accountCurrencyToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Currency>)accountCurrencyToCheck).Account);
            // Accounts / AccountCurrency / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)accountCurrencyToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)accountCurrencyToCheck).AccountID);
            // Accounts / AccountCurrency / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountCurrencyToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountCurrencyToCheck).Account);
            // Accounts / AccountFile / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)accountFileToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)accountFileToCheck).AccountID);
            // Accounts / AccountFile / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountFileToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountFileToCheck).Account);
            // Accounts / AccountFile / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<StoredFile>)accountFileToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<StoredFile>)accountFileToCheck).AccountID);
            // Accounts / AccountFile / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<StoredFile>)accountFileToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<StoredFile>)accountFileToCheck).Account);
            // Accounts / AccountImage / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)accountImageToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)accountImageToCheck).AccountID);
            // Accounts / AccountImage / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountImageToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountImageToCheck).Account);
            // Accounts / AccountPricePoint / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)accountPricePointToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)accountPricePointToCheck).AccountID);
            // Accounts / AccountPricePoint / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountPricePointToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountPricePointToCheck).Account);
            // Accounts / AccountPricePoint / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<PricePoint>)accountPricePointToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<PricePoint>)accountPricePointToCheck).AccountID);
            // Accounts / AccountPricePoint / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<PricePoint>)accountPricePointToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<PricePoint>)accountPricePointToCheck).Account);
            // Accounts / AccountProduct / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)accountProductToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)accountProductToCheck).AccountID);
            // Accounts / AccountProduct / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountProductToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountProductToCheck).Account);
            // Accounts / AccountProduct / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Product>)accountProductToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Product>)accountProductToCheck).AccountID);
            // Accounts / AccountProduct / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Product>)accountProductToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Product>)accountProductToCheck).Account);
            // Accounts / AccountProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)accountProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)accountProductToCheck).ProductID);
            // Accounts / AccountProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)accountProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)accountProductToCheck).Product);
            // Accounts / AccountProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Account>)accountProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Account>)accountProductToCheck).ProductID);
            // Accounts / AccountProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Account>)accountProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Account>)accountProductToCheck).Product);
            // Accounts / AccountUsageBalance / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)accountUsageBalanceToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)accountUsageBalanceToCheck).AccountID);
            // Accounts / AccountUsageBalance / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountUsageBalanceToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountUsageBalanceToCheck).Account);
            // Accounts / AccountUsageBalance / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Product>)accountUsageBalanceToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Product>)accountUsageBalanceToCheck).AccountID);
            // Accounts / AccountUsageBalance / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Product>)accountUsageBalanceToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMaster<Product>)accountUsageBalanceToCheck).Account);
            // Accounts / AccountUsageBalance / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Account>)accountUsageBalanceToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Account>)accountUsageBalanceToCheck).ProductID);
            // Accounts / AccountUsageBalance / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Account>)accountUsageBalanceToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Account>)accountUsageBalanceToCheck).Product);
            // Accounts / AccountUsageBalance / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)accountUsageBalanceToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)accountUsageBalanceToCheck).ProductID);
            // Accounts / AccountUsageBalance / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)accountUsageBalanceToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)accountUsageBalanceToCheck).Product);
            // Accounts / AccountUserRole / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)accountUserRoleToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)accountUserRoleToCheck).AccountID);
            // Accounts / AccountUserRole / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountUserRoleToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)accountUserRoleToCheck).Account);
            // Accounts / Contractor / ServiceAreas as ICollection<ServiceArea>
            Assert.Equal(serviceAreaCollectionToAssign, contractorToCheck.ServiceAreas = serviceAreaCollectionToAssign);
            Assert.Equal(serviceAreaCollectionToAssign, contractorToCheck.ServiceAreas);
            #endregion
            #region Advertising
            // Advertising / Ad / Images as ICollection<AdImage>
            Assert.Equal(adImageCollectionToAssign, adToCheck.Images = adImageCollectionToAssign);
            Assert.Equal(adImageCollectionToAssign, adToCheck.Images);
            // Advertising / Ad / Brands as ICollection<AdBrand>
            Assert.Equal(adBrandCollectionToAssign, adToCheck.Brands = adBrandCollectionToAssign);
            Assert.Equal(adBrandCollectionToAssign, adToCheck.Brands);
            // Advertising / Ad / Franchises as ICollection<AdFranchise>
            Assert.Equal(adFranchiseCollectionToAssign, adToCheck.Franchises = adFranchiseCollectionToAssign);
            Assert.Equal(adFranchiseCollectionToAssign, adToCheck.Franchises);
            // Advertising / Ad / Stores as ICollection<AdStore>
            Assert.Equal(adStoreCollectionToAssign, adToCheck.Stores = adStoreCollectionToAssign);
            Assert.Equal(adStoreCollectionToAssign, adToCheck.Stores);
            // Advertising / Ad / Accounts as ICollection<AdAccount>
            Assert.Equal(adAccountCollectionToAssign, adToCheck.Accounts = adAccountCollectionToAssign);
            Assert.Equal(adAccountCollectionToAssign, adToCheck.Accounts);
            // Advertising / Ad / AdZones as ICollection<AdZone>
            Assert.Equal(adZoneCollectionToAssign, adToCheck.AdZones = adZoneCollectionToAssign);
            Assert.Equal(adZoneCollectionToAssign, adToCheck.AdZones);
            // Advertising / Ad / CampaignAds as ICollection<CampaignAd>
            Assert.Equal(campaignAdCollectionToAssign, adToCheck.CampaignAds = campaignAdCollectionToAssign);
            Assert.Equal(campaignAdCollectionToAssign, adToCheck.CampaignAds);
            // Advertising / AdAccount / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)adAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)adAccountToCheck).AccountID);
            // Advertising / AdAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)adAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)adAccountToCheck).Account);
            // Advertising / AdAccount / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Ad>)adAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Ad>)adAccountToCheck).AccountID);
            // Advertising / AdAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Ad>)adAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Ad>)adAccountToCheck).Account);
            // Advertising / AdBrand / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)adBrandToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)adBrandToCheck).BrandID);
            // Advertising / AdBrand / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)adBrandToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)adBrandToCheck).Brand);
            // Advertising / AdBrand / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheSlave<Ad>)adBrandToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheSlave<Ad>)adBrandToCheck).BrandID);
            // Advertising / AdBrand / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheSlave<Ad>)adBrandToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheSlave<Ad>)adBrandToCheck).Brand);
            // Advertising / AdFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)adFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)adFranchiseToCheck).FranchiseID);
            // Advertising / AdFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)adFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)adFranchiseToCheck).Franchise);
            // Advertising / AdFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<Ad>)adFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<Ad>)adFranchiseToCheck).FranchiseID);
            // Advertising / AdFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<Ad>)adFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<Ad>)adFranchiseToCheck).Franchise);
            // Advertising / AdStore / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)adStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)adStoreToCheck).StoreID);
            // Advertising / AdStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)adStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)adStoreToCheck).Store);
            // Advertising / AdStore / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Ad>)adStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Ad>)adStoreToCheck).StoreID);
            // Advertising / AdStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Ad>)adStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Ad>)adStoreToCheck).Store);
            // Advertising / AdZoneAccess / AdZones as ICollection<AdZone>
            Assert.Equal(adZoneCollectionToAssign, adZoneAccessToCheck.AdZones = adZoneCollectionToAssign);
            Assert.Equal(adZoneCollectionToAssign, adZoneAccessToCheck.AdZones);
            // Advertising / Zone / AdZones as ICollection<AdZone>
            Assert.Equal(adZoneCollectionToAssign, zoneToCheck.AdZones = adZoneCollectionToAssign);
            Assert.Equal(adZoneCollectionToAssign, zoneToCheck.AdZones);
            #endregion
            #region Attributes
            // Attributes / AttributeType / GeneralAttributes as ICollection<GeneralAttribute>
            Assert.Equal(generalAttributeCollectionToAssign, attributeTypeToCheck.GeneralAttributes = generalAttributeCollectionToAssign);
            Assert.Equal(generalAttributeCollectionToAssign, attributeTypeToCheck.GeneralAttributes);
            // Attributes / GeneralAttribute / GeneralAttributePredefinedOptions as ICollection<GeneralAttributePredefinedOption>
            Assert.Equal(generalAttributePredefinedOptionCollectionToAssign, generalAttributeToCheck.GeneralAttributePredefinedOptions = generalAttributePredefinedOptionCollectionToAssign);
            Assert.Equal(generalAttributePredefinedOptionCollectionToAssign, generalAttributeToCheck.GeneralAttributePredefinedOptions);
            #endregion
            #region Auctions
            // Auctions / Auction / Brands as ICollection<BrandAuction>
            Assert.Equal(brandAuctionCollectionToAssign, auctionToCheck.Brands = brandAuctionCollectionToAssign);
            Assert.Equal(brandAuctionCollectionToAssign, auctionToCheck.Brands);
            // Auctions / Auction / Categories as ICollection<AuctionCategory>
            Assert.Equal(auctionCategoryCollectionToAssign, auctionToCheck.Categories = auctionCategoryCollectionToAssign);
            Assert.Equal(auctionCategoryCollectionToAssign, auctionToCheck.Categories);
            // Auctions / Auction / Franchises as ICollection<FranchiseAuction>
            Assert.Equal(franchiseAuctionCollectionToAssign, auctionToCheck.Franchises = franchiseAuctionCollectionToAssign);
            Assert.Equal(franchiseAuctionCollectionToAssign, auctionToCheck.Franchises);
            // Auctions / Auction / Stores as ICollection<StoreAuction>
            Assert.Equal(storeAuctionCollectionToAssign, auctionToCheck.Stores = storeAuctionCollectionToAssign);
            Assert.Equal(storeAuctionCollectionToAssign, auctionToCheck.Stores);
            // Auctions / Auction / Lots as ICollection<Lot>
            Assert.Equal(lotCollectionToAssign, auctionToCheck.Lots = lotCollectionToAssign);
            Assert.Equal(lotCollectionToAssign, auctionToCheck.Lots);
            // Auctions / AuctionCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategory)auctionCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategory)auctionCategoryToCheck).CategoryID);
            // Auctions / AuctionCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)auctionCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)auctionCategoryToCheck).Category);
            // Auctions / AuctionCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Auction>)auctionCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Auction>)auctionCategoryToCheck).CategoryID);
            // Auctions / AuctionCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Auction>)auctionCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Auction>)auctionCategoryToCheck).Category);
            // Auctions / BrandAuction / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)brandAuctionToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)brandAuctionToCheck).BrandID);
            // Auctions / BrandAuction / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandAuctionToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandAuctionToCheck).Brand);
            // Auctions / BrandAuction / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Auction>)brandAuctionToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Auction>)brandAuctionToCheck).BrandID);
            // Auctions / BrandAuction / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Auction>)brandAuctionToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Auction>)brandAuctionToCheck).Brand);
            // Auctions / FranchiseAuction / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseAuctionToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseAuctionToCheck).FranchiseID);
            // Auctions / FranchiseAuction / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseAuctionToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseAuctionToCheck).Franchise);
            // Auctions / FranchiseAuction / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Auction>)franchiseAuctionToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Auction>)franchiseAuctionToCheck).FranchiseID);
            // Auctions / FranchiseAuction / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Auction>)franchiseAuctionToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Auction>)franchiseAuctionToCheck).Franchise);
            // Auctions / Lot / Categories as ICollection<LotCategory>
            Assert.Equal(lotCategoryCollectionToAssign, lotToCheck.Categories = lotCategoryCollectionToAssign);
            Assert.Equal(lotCategoryCollectionToAssign, lotToCheck.Categories);
            // Auctions / Lot / Bids as ICollection<Bid>
            Assert.Equal(bidCollectionToAssign, lotToCheck.Bids = bidCollectionToAssign);
            Assert.Equal(bidCollectionToAssign, lotToCheck.Bids);
            // Auctions / LotCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategory)lotCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategory)lotCategoryToCheck).CategoryID);
            // Auctions / LotCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)lotCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)lotCategoryToCheck).Category);
            // Auctions / LotCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Lot>)lotCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Lot>)lotCategoryToCheck).CategoryID);
            // Auctions / LotCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Lot>)lotCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Lot>)lotCategoryToCheck).Category);
            // Auctions / StoreAuction / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)storeAuctionToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)storeAuctionToCheck).StoreID);
            // Auctions / StoreAuction / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeAuctionToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeAuctionToCheck).Store);
            // Auctions / StoreAuction / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Auction>)storeAuctionToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Auction>)storeAuctionToCheck).StoreID);
            // Auctions / StoreAuction / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Auction>)storeAuctionToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Auction>)storeAuctionToCheck).Store);
            #endregion
            #region Badges
            // Badges / Badge / Images as ICollection<BadgeImage>
            Assert.Equal(badgeImageCollectionToAssign, badgeToCheck.Images = badgeImageCollectionToAssign);
            Assert.Equal(badgeImageCollectionToAssign, badgeToCheck.Images);
            #endregion
            #region Brands
            // Brands / Brand / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, brandToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, brandToCheck.Notes);
            // Brands / Brand / Images as ICollection<BrandImage>
            Assert.Equal(brandImageCollectionToAssign, brandToCheck.Images = brandImageCollectionToAssign);
            Assert.Equal(brandImageCollectionToAssign, brandToCheck.Images);
            // Brands / Brand / Accounts as ICollection<BrandAccount>
            Assert.Equal(brandAccountCollectionToAssign, brandToCheck.Accounts = brandAccountCollectionToAssign);
            Assert.Equal(brandAccountCollectionToAssign, brandToCheck.Accounts);
            // Brands / Brand / Categories as ICollection<BrandCategory>
            Assert.Equal(brandCategoryCollectionToAssign, brandToCheck.Categories = brandCategoryCollectionToAssign);
            Assert.Equal(brandCategoryCollectionToAssign, brandToCheck.Categories);
            // Brands / Brand / Franchises as ICollection<BrandFranchise>
            Assert.Equal(brandFranchiseCollectionToAssign, brandToCheck.Franchises = brandFranchiseCollectionToAssign);
            Assert.Equal(brandFranchiseCollectionToAssign, brandToCheck.Franchises);
            // Brands / Brand / Products as ICollection<BrandProduct>
            Assert.Equal(brandProductCollectionToAssign, brandToCheck.Products = brandProductCollectionToAssign);
            Assert.Equal(brandProductCollectionToAssign, brandToCheck.Products);
            // Brands / Brand / Stores as ICollection<BrandStore>
            Assert.Equal(brandStoreCollectionToAssign, brandToCheck.Stores = brandStoreCollectionToAssign);
            Assert.Equal(brandStoreCollectionToAssign, brandToCheck.Stores);
            // Brands / Brand / Users as ICollection<BrandUser>
            Assert.Equal(brandUserCollectionToAssign, brandToCheck.Users = brandUserCollectionToAssign);
            Assert.Equal(brandUserCollectionToAssign, brandToCheck.Users);
            // Brands / Brand / BrandCurrencies as ICollection<BrandCurrency>
            Assert.Equal(brandCurrencyCollectionToAssign, brandToCheck.BrandCurrencies = brandCurrencyCollectionToAssign);
            Assert.Equal(brandCurrencyCollectionToAssign, brandToCheck.BrandCurrencies);
            // Brands / Brand / BrandInventoryLocations as ICollection<BrandInventoryLocation>
            Assert.Equal(brandInventoryLocationCollectionToAssign, brandToCheck.BrandInventoryLocations = brandInventoryLocationCollectionToAssign);
            Assert.Equal(brandInventoryLocationCollectionToAssign, brandToCheck.BrandInventoryLocations);
            // Brands / Brand / BrandLanguages as ICollection<BrandLanguage>
            Assert.Equal(brandLanguageCollectionToAssign, brandToCheck.BrandLanguages = brandLanguageCollectionToAssign);
            Assert.Equal(brandLanguageCollectionToAssign, brandToCheck.BrandLanguages);
            // Brands / Brand / BrandSiteDomains as ICollection<BrandSiteDomain>
            Assert.Equal(brandSiteDomainCollectionToAssign, brandToCheck.BrandSiteDomains = brandSiteDomainCollectionToAssign);
            Assert.Equal(brandSiteDomainCollectionToAssign, brandToCheck.BrandSiteDomains);
            // Brands / BrandAccount / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)brandAccountToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)brandAccountToCheck).BrandID);
            // Brands / BrandAccount / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandAccountToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandAccountToCheck).Brand);
            // Brands / BrandAccount / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Account>)brandAccountToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Account>)brandAccountToCheck).BrandID);
            // Brands / BrandAccount / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Account>)brandAccountToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Account>)brandAccountToCheck).Brand);
            // Brands / BrandAccount / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)brandAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)brandAccountToCheck).AccountID);
            // Brands / BrandAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)brandAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)brandAccountToCheck).Account);
            // Brands / BrandAccount / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Brand>)brandAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Brand>)brandAccountToCheck).AccountID);
            // Brands / BrandAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Brand>)brandAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Brand>)brandAccountToCheck).Account);
            // Brands / BrandCategory / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)brandCategoryToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)brandCategoryToCheck).BrandID);
            // Brands / BrandCategory / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandCategoryToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandCategoryToCheck).Brand);
            // Brands / BrandCategory / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Category>)brandCategoryToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Category>)brandCategoryToCheck).BrandID);
            // Brands / BrandCategory / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Category>)brandCategoryToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Category>)brandCategoryToCheck).Brand);
            // Brands / BrandCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategory)brandCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategory)brandCategoryToCheck).CategoryID);
            // Brands / BrandCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)brandCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)brandCategoryToCheck).Category);
            // Brands / BrandCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Brand>)brandCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Brand>)brandCategoryToCheck).CategoryID);
            // Brands / BrandCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Brand>)brandCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Brand>)brandCategoryToCheck).Category);
            // Brands / BrandCurrency / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)brandCurrencyToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)brandCurrencyToCheck).BrandID);
            // Brands / BrandCurrency / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandCurrencyToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandCurrencyToCheck).Brand);
            // Brands / BrandCurrency / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Currency>)brandCurrencyToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Currency>)brandCurrencyToCheck).BrandID);
            // Brands / BrandCurrency / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Currency>)brandCurrencyToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Currency>)brandCurrencyToCheck).Brand);
            // Brands / BrandFranchise / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)brandFranchiseToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)brandFranchiseToCheck).BrandID);
            // Brands / BrandFranchise / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandFranchiseToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandFranchiseToCheck).Brand);
            // Brands / BrandFranchise / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Franchise>)brandFranchiseToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Franchise>)brandFranchiseToCheck).BrandID);
            // Brands / BrandFranchise / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Franchise>)brandFranchiseToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Franchise>)brandFranchiseToCheck).Brand);
            // Brands / BrandFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)brandFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)brandFranchiseToCheck).FranchiseID);
            // Brands / BrandFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)brandFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)brandFranchiseToCheck).Franchise);
            // Brands / BrandFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<Brand>)brandFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<Brand>)brandFranchiseToCheck).FranchiseID);
            // Brands / BrandFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<Brand>)brandFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<Brand>)brandFranchiseToCheck).Franchise);
            // Brands / BrandImage / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)brandImageToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)brandImageToCheck).BrandID);
            // Brands / BrandImage / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandImageToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandImageToCheck).Brand);
            // Brands / BrandInventoryLocation / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)brandInventoryLocationToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)brandInventoryLocationToCheck).BrandID);
            // Brands / BrandInventoryLocation / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandInventoryLocationToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandInventoryLocationToCheck).Brand);
            // Brands / BrandInventoryLocation / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<InventoryLocation>)brandInventoryLocationToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<InventoryLocation>)brandInventoryLocationToCheck).BrandID);
            // Brands / BrandInventoryLocation / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<InventoryLocation>)brandInventoryLocationToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<InventoryLocation>)brandInventoryLocationToCheck).Brand);
            // Brands / BrandLanguage / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)brandLanguageToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)brandLanguageToCheck).BrandID);
            // Brands / BrandLanguage / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandLanguageToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandLanguageToCheck).Brand);
            // Brands / BrandLanguage / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Language>)brandLanguageToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Language>)brandLanguageToCheck).BrandID);
            // Brands / BrandLanguage / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Language>)brandLanguageToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Language>)brandLanguageToCheck).Brand);
            // Brands / BrandManufacturer / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)brandManufacturerToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)brandManufacturerToCheck).BrandID);
            // Brands / BrandManufacturer / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandManufacturerToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandManufacturerToCheck).Brand);
            // Brands / BrandManufacturer / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Manufacturer>)brandManufacturerToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Manufacturer>)brandManufacturerToCheck).BrandID);
            // Brands / BrandManufacturer / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Manufacturer>)brandManufacturerToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Manufacturer>)brandManufacturerToCheck).Brand);
            // Brands / BrandManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturer)brandManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturer)brandManufacturerToCheck).ManufacturerID);
            // Brands / BrandManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)brandManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)brandManufacturerToCheck).Manufacturer);
            // Brands / BrandManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Brand>)brandManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Brand>)brandManufacturerToCheck).ManufacturerID);
            // Brands / BrandManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Brand>)brandManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Brand>)brandManufacturerToCheck).Manufacturer);
            // Brands / BrandProduct / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)brandProductToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)brandProductToCheck).BrandID);
            // Brands / BrandProduct / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandProductToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandProductToCheck).Brand);
            // Brands / BrandProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)brandProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)brandProductToCheck).ProductID);
            // Brands / BrandProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)brandProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)brandProductToCheck).Product);
            // Brands / BrandProduct / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Product>)brandProductToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Product>)brandProductToCheck).BrandID);
            // Brands / BrandProduct / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Product>)brandProductToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Product>)brandProductToCheck).Brand);
            // Brands / BrandProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Brand>)brandProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Brand>)brandProductToCheck).ProductID);
            // Brands / BrandProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Brand>)brandProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Brand>)brandProductToCheck).Product);
            // Brands / BrandSiteDomain / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)brandSiteDomainToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)brandSiteDomainToCheck).BrandID);
            // Brands / BrandSiteDomain / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandSiteDomainToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandSiteDomainToCheck).Brand);
            // Brands / BrandSiteDomain / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<SiteDomain>)brandSiteDomainToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<SiteDomain>)brandSiteDomainToCheck).BrandID);
            // Brands / BrandSiteDomain / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<SiteDomain>)brandSiteDomainToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<SiteDomain>)brandSiteDomainToCheck).Brand);
            // Brands / BrandStore / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)brandStoreToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)brandStoreToCheck).BrandID);
            // Brands / BrandStore / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandStoreToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandStoreToCheck).Brand);
            // Brands / BrandStore / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Store>)brandStoreToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Store>)brandStoreToCheck).BrandID);
            // Brands / BrandStore / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Store>)brandStoreToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Store>)brandStoreToCheck).Brand);
            // Brands / BrandStore / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)brandStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)brandStoreToCheck).StoreID);
            // Brands / BrandStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)brandStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)brandStoreToCheck).Store);
            // Brands / BrandStore / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Brand>)brandStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Brand>)brandStoreToCheck).StoreID);
            // Brands / BrandStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Brand>)brandStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Brand>)brandStoreToCheck).Store);
            // Brands / BrandUser / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)brandUserToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)brandUserToCheck).BrandID);
            // Brands / BrandUser / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandUserToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandUserToCheck).Brand);
            // Brands / BrandUser / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<User>)brandUserToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<User>)brandUserToCheck).BrandID);
            // Brands / BrandUser / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<User>)brandUserToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<User>)brandUserToCheck).Brand);
            // Brands / BrandUser / UserID as int
            Assert.Equal(1, ((IAmFilterableByUser)brandUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUser)brandUserToCheck).UserID);
            // Brands / BrandUser / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUser)brandUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUser)brandUserToCheck).User);
            // Brands / BrandUser / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Brand>)brandUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Brand>)brandUserToCheck).UserID);
            // Brands / BrandUser / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Brand>)brandUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Brand>)brandUserToCheck).User);
            // Brands / BrandVendor / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)brandVendorToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)brandVendorToCheck).BrandID);
            // Brands / BrandVendor / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandVendorToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)brandVendorToCheck).Brand);
            // Brands / BrandVendor / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Vendor>)brandVendorToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Vendor>)brandVendorToCheck).BrandID);
            // Brands / BrandVendor / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Vendor>)brandVendorToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMaster<Vendor>)brandVendorToCheck).Brand);
            // Brands / BrandVendor / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendor)brandVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendor)brandVendorToCheck).VendorID);
            // Brands / BrandVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)brandVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)brandVendorToCheck).Vendor);
            // Brands / BrandVendor / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Brand>)brandVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Brand>)brandVendorToCheck).VendorID);
            // Brands / BrandVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Brand>)brandVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Brand>)brandVendorToCheck).Vendor);
            #endregion
            #region CalendarEvents
            // CalendarEvents / CalendarEvent / Images as ICollection<CalendarEventImage>
            Assert.Equal(calendarEventImageCollectionToAssign, calendarEventToCheck.Images = calendarEventImageCollectionToAssign);
            Assert.Equal(calendarEventImageCollectionToAssign, calendarEventToCheck.Images);
            // CalendarEvents / CalendarEvent / StoredFiles as ICollection<CalendarEventFile>
            Assert.Equal(calendarEventFileCollectionToAssign, calendarEventToCheck.StoredFiles = calendarEventFileCollectionToAssign);
            Assert.Equal(calendarEventFileCollectionToAssign, calendarEventToCheck.StoredFiles);
            // CalendarEvents / CalendarEvent / Products as ICollection<CalendarEventProduct>
            Assert.Equal(calendarEventProductCollectionToAssign, calendarEventToCheck.Products = calendarEventProductCollectionToAssign);
            Assert.Equal(calendarEventProductCollectionToAssign, calendarEventToCheck.Products);
            // CalendarEvents / CalendarEvent / CalendarEventDetails as ICollection<CalendarEventDetail>
            Assert.Equal(calendarEventDetailCollectionToAssign, calendarEventToCheck.CalendarEventDetails = calendarEventDetailCollectionToAssign);
            Assert.Equal(calendarEventDetailCollectionToAssign, calendarEventToCheck.CalendarEventDetails);
            // CalendarEvents / CalendarEvent / UserEventAttendances as ICollection<UserEventAttendance>
            Assert.Equal(userEventAttendanceCollectionToAssign, calendarEventToCheck.UserEventAttendances = userEventAttendanceCollectionToAssign);
            Assert.Equal(userEventAttendanceCollectionToAssign, calendarEventToCheck.UserEventAttendances);
            // CalendarEvents / CalendarEventProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)calendarEventProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)calendarEventProductToCheck).ProductID);
            // CalendarEvents / CalendarEventProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)calendarEventProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)calendarEventProductToCheck).Product);
            // CalendarEvents / CalendarEventProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<CalendarEvent>)calendarEventProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<CalendarEvent>)calendarEventProductToCheck).ProductID);
            // CalendarEvents / CalendarEventProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<CalendarEvent>)calendarEventProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<CalendarEvent>)calendarEventProductToCheck).Product);
            // CalendarEvents / UserEventAttendance / UserID as int
            Assert.Equal(1, ((IAmFilterableByUser)userEventAttendanceToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUser)userEventAttendanceToCheck).UserID);
            // CalendarEvents / UserEventAttendance / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUser)userEventAttendanceToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUser)userEventAttendanceToCheck).User);
            // CalendarEvents / UserEventAttendance / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<CalendarEvent>)userEventAttendanceToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<CalendarEvent>)userEventAttendanceToCheck).UserID);
            // CalendarEvents / UserEventAttendance / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<CalendarEvent>)userEventAttendanceToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<CalendarEvent>)userEventAttendanceToCheck).User);
            #endregion
            #region Categories
            // Categories / Category / Children as ICollection<Category>
            Assert.Equal(categoryCollectionToAssign, categoryToCheck.Children = categoryCollectionToAssign);
            Assert.Equal(categoryCollectionToAssign, categoryToCheck.Children);
            // Categories / Category / Brands as ICollection<BrandCategory>
            Assert.Equal(brandCategoryCollectionToAssign, categoryToCheck.Brands = brandCategoryCollectionToAssign);
            Assert.Equal(brandCategoryCollectionToAssign, categoryToCheck.Brands);
            // Categories / Category / Stores as ICollection<StoreCategory>
            Assert.Equal(storeCategoryCollectionToAssign, categoryToCheck.Stores = storeCategoryCollectionToAssign);
            Assert.Equal(storeCategoryCollectionToAssign, categoryToCheck.Stores);
            // Categories / Category / Franchises as ICollection<FranchiseCategory>
            Assert.Equal(franchiseCategoryCollectionToAssign, categoryToCheck.Franchises = franchiseCategoryCollectionToAssign);
            Assert.Equal(franchiseCategoryCollectionToAssign, categoryToCheck.Franchises);
            // Categories / Category / Products as ICollection<ProductCategory>
            Assert.Equal(productCategoryCollectionToAssign, categoryToCheck.Products = productCategoryCollectionToAssign);
            Assert.Equal(productCategoryCollectionToAssign, categoryToCheck.Products);
            // Categories / Category / Reviews as ICollection<Review>
            Assert.Equal(reviewCollectionToAssign, categoryToCheck.Reviews = reviewCollectionToAssign);
            Assert.Equal(reviewCollectionToAssign, categoryToCheck.Reviews);
            // Categories / Category / Images as ICollection<CategoryImage>
            Assert.Equal(categoryImageCollectionToAssign, categoryToCheck.Images = categoryImageCollectionToAssign);
            Assert.Equal(categoryImageCollectionToAssign, categoryToCheck.Images);
            // Categories / Category / StoredFiles as ICollection<CategoryFile>
            Assert.Equal(categoryFileCollectionToAssign, categoryToCheck.StoredFiles = categoryFileCollectionToAssign);
            Assert.Equal(categoryFileCollectionToAssign, categoryToCheck.StoredFiles);
            // Categories / Category / MinimumOrderDollarAmountBufferCategories as ICollection<Category>
            Assert.Equal(categoryCollectionToAssign, categoryToCheck.MinimumOrderDollarAmountBufferCategories = categoryCollectionToAssign);
            Assert.Equal(categoryCollectionToAssign, categoryToCheck.MinimumOrderDollarAmountBufferCategories);
            // Categories / Category / MinimumOrderQuantityAmountBufferCategories as ICollection<Category>
            Assert.Equal(categoryCollectionToAssign, categoryToCheck.MinimumOrderQuantityAmountBufferCategories = categoryCollectionToAssign);
            Assert.Equal(categoryCollectionToAssign, categoryToCheck.MinimumOrderQuantityAmountBufferCategories);
            // Categories / Category / ManufacturerMinimumOrderDollarAmountBufferCategories as ICollection<Manufacturer>
            Assert.Equal(manufacturerCollectionToAssign, categoryToCheck.ManufacturerMinimumOrderDollarAmountBufferCategories = manufacturerCollectionToAssign);
            Assert.Equal(manufacturerCollectionToAssign, categoryToCheck.ManufacturerMinimumOrderDollarAmountBufferCategories);
            // Categories / Category / ManufacturerMinimumOrderQuantityAmountBufferCategories as ICollection<Manufacturer>
            Assert.Equal(manufacturerCollectionToAssign, categoryToCheck.ManufacturerMinimumOrderQuantityAmountBufferCategories = manufacturerCollectionToAssign);
            Assert.Equal(manufacturerCollectionToAssign, categoryToCheck.ManufacturerMinimumOrderQuantityAmountBufferCategories);
            // Categories / Category / BrandMinimumOrderDollarAmountBufferCategories as ICollection<Brand>
            Assert.Equal(brandCollectionToAssign, categoryToCheck.BrandMinimumOrderDollarAmountBufferCategories = brandCollectionToAssign);
            Assert.Equal(brandCollectionToAssign, categoryToCheck.BrandMinimumOrderDollarAmountBufferCategories);
            // Categories / Category / BrandMinimumOrderQuantityAmountBufferCategories as ICollection<Brand>
            Assert.Equal(brandCollectionToAssign, categoryToCheck.BrandMinimumOrderQuantityAmountBufferCategories = brandCollectionToAssign);
            Assert.Equal(brandCollectionToAssign, categoryToCheck.BrandMinimumOrderQuantityAmountBufferCategories);
            // Categories / Category / FranchiseMinimumOrderDollarAmountBufferCategories as ICollection<Franchise>
            Assert.Equal(franchiseCollectionToAssign, categoryToCheck.FranchiseMinimumOrderDollarAmountBufferCategories = franchiseCollectionToAssign);
            Assert.Equal(franchiseCollectionToAssign, categoryToCheck.FranchiseMinimumOrderDollarAmountBufferCategories);
            // Categories / Category / FranchiseMinimumOrderQuantityAmountBufferCategories as ICollection<Franchise>
            Assert.Equal(franchiseCollectionToAssign, categoryToCheck.FranchiseMinimumOrderQuantityAmountBufferCategories = franchiseCollectionToAssign);
            Assert.Equal(franchiseCollectionToAssign, categoryToCheck.FranchiseMinimumOrderQuantityAmountBufferCategories);
            // Categories / Category / StoreMinimumOrderDollarAmountBufferCategories as ICollection<Store>
            Assert.Equal(storeCollectionToAssign, categoryToCheck.StoreMinimumOrderDollarAmountBufferCategories = storeCollectionToAssign);
            Assert.Equal(storeCollectionToAssign, categoryToCheck.StoreMinimumOrderDollarAmountBufferCategories);
            // Categories / Category / StoreMinimumOrderQuantityAmountBufferCategories as ICollection<Store>
            Assert.Equal(storeCollectionToAssign, categoryToCheck.StoreMinimumOrderQuantityAmountBufferCategories = storeCollectionToAssign);
            Assert.Equal(storeCollectionToAssign, categoryToCheck.StoreMinimumOrderQuantityAmountBufferCategories);
            // Categories / Category / VendorMinimumOrderDollarAmountBufferCategories as ICollection<Vendor>
            Assert.Equal(vendorCollectionToAssign, categoryToCheck.VendorMinimumOrderDollarAmountBufferCategories = vendorCollectionToAssign);
            Assert.Equal(vendorCollectionToAssign, categoryToCheck.VendorMinimumOrderDollarAmountBufferCategories);
            // Categories / Category / VendorMinimumOrderQuantityAmountBufferCategories as ICollection<Vendor>
            Assert.Equal(vendorCollectionToAssign, categoryToCheck.VendorMinimumOrderQuantityAmountBufferCategories = vendorCollectionToAssign);
            Assert.Equal(vendorCollectionToAssign, categoryToCheck.VendorMinimumOrderQuantityAmountBufferCategories);
            // Categories / Category / MinimumForFreeShippingDollarAmountBufferCategories as ICollection<Category>
            Assert.Equal(categoryCollectionToAssign, categoryToCheck.MinimumForFreeShippingDollarAmountBufferCategories = categoryCollectionToAssign);
            Assert.Equal(categoryCollectionToAssign, categoryToCheck.MinimumForFreeShippingDollarAmountBufferCategories);
            // Categories / Category / MinimumForFreeShippingQuantityAmountBufferCategories as ICollection<Category>
            Assert.Equal(categoryCollectionToAssign, categoryToCheck.MinimumForFreeShippingQuantityAmountBufferCategories = categoryCollectionToAssign);
            Assert.Equal(categoryCollectionToAssign, categoryToCheck.MinimumForFreeShippingQuantityAmountBufferCategories);
            // Categories / Category / ManufacturerMinimumForFreeShippingDollarAmountBufferCategories as ICollection<Manufacturer>
            Assert.Equal(manufacturerCollectionToAssign, categoryToCheck.ManufacturerMinimumForFreeShippingDollarAmountBufferCategories = manufacturerCollectionToAssign);
            Assert.Equal(manufacturerCollectionToAssign, categoryToCheck.ManufacturerMinimumForFreeShippingDollarAmountBufferCategories);
            // Categories / Category / ManufacturerMinimumForFreeShippingQuantityAmountBufferCategories as ICollection<Manufacturer>
            Assert.Equal(manufacturerCollectionToAssign, categoryToCheck.ManufacturerMinimumForFreeShippingQuantityAmountBufferCategories = manufacturerCollectionToAssign);
            Assert.Equal(manufacturerCollectionToAssign, categoryToCheck.ManufacturerMinimumForFreeShippingQuantityAmountBufferCategories);
            // Categories / Category / BrandMinimumForFreeShippingDollarAmountBufferCategories as ICollection<Brand>
            Assert.Equal(brandCollectionToAssign, categoryToCheck.BrandMinimumForFreeShippingDollarAmountBufferCategories = brandCollectionToAssign);
            Assert.Equal(brandCollectionToAssign, categoryToCheck.BrandMinimumForFreeShippingDollarAmountBufferCategories);
            // Categories / Category / BrandMinimumForFreeShippingQuantityAmountBufferCategories as ICollection<Brand>
            Assert.Equal(brandCollectionToAssign, categoryToCheck.BrandMinimumForFreeShippingQuantityAmountBufferCategories = brandCollectionToAssign);
            Assert.Equal(brandCollectionToAssign, categoryToCheck.BrandMinimumForFreeShippingQuantityAmountBufferCategories);
            // Categories / Category / FranchiseMinimumForFreeShippingDollarAmountBufferCategories as ICollection<Franchise>
            Assert.Equal(franchiseCollectionToAssign, categoryToCheck.FranchiseMinimumForFreeShippingDollarAmountBufferCategories = franchiseCollectionToAssign);
            Assert.Equal(franchiseCollectionToAssign, categoryToCheck.FranchiseMinimumForFreeShippingDollarAmountBufferCategories);
            // Categories / Category / FranchiseMinimumForFreeShippingQuantityAmountBufferCategories as ICollection<Franchise>
            Assert.Equal(franchiseCollectionToAssign, categoryToCheck.FranchiseMinimumForFreeShippingQuantityAmountBufferCategories = franchiseCollectionToAssign);
            Assert.Equal(franchiseCollectionToAssign, categoryToCheck.FranchiseMinimumForFreeShippingQuantityAmountBufferCategories);
            // Categories / Category / StoreMinimumForFreeShippingDollarAmountBufferCategories as ICollection<Store>
            Assert.Equal(storeCollectionToAssign, categoryToCheck.StoreMinimumForFreeShippingDollarAmountBufferCategories = storeCollectionToAssign);
            Assert.Equal(storeCollectionToAssign, categoryToCheck.StoreMinimumForFreeShippingDollarAmountBufferCategories);
            // Categories / Category / StoreMinimumForFreeShippingQuantityAmountBufferCategories as ICollection<Store>
            Assert.Equal(storeCollectionToAssign, categoryToCheck.StoreMinimumForFreeShippingQuantityAmountBufferCategories = storeCollectionToAssign);
            Assert.Equal(storeCollectionToAssign, categoryToCheck.StoreMinimumForFreeShippingQuantityAmountBufferCategories);
            // Categories / Category / VendorMinimumForFreeShippingDollarAmountBufferCategories as ICollection<Vendor>
            Assert.Equal(vendorCollectionToAssign, categoryToCheck.VendorMinimumForFreeShippingDollarAmountBufferCategories = vendorCollectionToAssign);
            Assert.Equal(vendorCollectionToAssign, categoryToCheck.VendorMinimumForFreeShippingDollarAmountBufferCategories);
            // Categories / Category / VendorMinimumForFreeShippingQuantityAmountBufferCategories as ICollection<Vendor>
            Assert.Equal(vendorCollectionToAssign, categoryToCheck.VendorMinimumForFreeShippingQuantityAmountBufferCategories = vendorCollectionToAssign);
            Assert.Equal(vendorCollectionToAssign, categoryToCheck.VendorMinimumForFreeShippingQuantityAmountBufferCategories);
            // Categories / CategoryFile / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategory)categoryFileToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategory)categoryFileToCheck).CategoryID);
            // Categories / CategoryFile / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)categoryFileToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)categoryFileToCheck).Category);
            // Categories / CategoryFile / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheMaster<StoredFile>)categoryFileToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheMaster<StoredFile>)categoryFileToCheck).CategoryID);
            // Categories / CategoryFile / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheMaster<StoredFile>)categoryFileToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheMaster<StoredFile>)categoryFileToCheck).Category);
            // Categories / CategoryImage / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategory)categoryImageToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategory)categoryImageToCheck).CategoryID);
            // Categories / CategoryImage / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)categoryImageToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)categoryImageToCheck).Category);
            #endregion
            #region Contacts
            // Contacts / Contact / Images as ICollection<ContactImage>
            Assert.Equal(contactImageCollectionToAssign, contactToCheck.Images = contactImageCollectionToAssign);
            Assert.Equal(contactImageCollectionToAssign, contactToCheck.Images);
            // Contacts / Contact / Stores as ICollection<Store>
            Assert.Equal(storeCollectionToAssign, contactToCheck.Stores = storeCollectionToAssign);
            Assert.Equal(storeCollectionToAssign, contactToCheck.Stores);
            // Contacts / Contact / Vendors as ICollection<Vendor>
            Assert.Equal(vendorCollectionToAssign, contactToCheck.Vendors = vendorCollectionToAssign);
            Assert.Equal(vendorCollectionToAssign, contactToCheck.Vendors);
            // Contacts / Contact / ShippingContactsSalesInvoices as ICollection<SalesInvoice>
            Assert.Equal(salesInvoiceCollectionToAssign, contactToCheck.ShippingContactsSalesInvoices = salesInvoiceCollectionToAssign);
            Assert.Equal(salesInvoiceCollectionToAssign, contactToCheck.ShippingContactsSalesInvoices);
            // Contacts / Contact / BillingContactsSalesInvoices as ICollection<SalesInvoice>
            Assert.Equal(salesInvoiceCollectionToAssign, contactToCheck.BillingContactsSalesInvoices = salesInvoiceCollectionToAssign);
            Assert.Equal(salesInvoiceCollectionToAssign, contactToCheck.BillingContactsSalesInvoices);
            // Contacts / Contact / ShippingContactsSalesQuotes as ICollection<SalesQuote>
            Assert.Equal(salesQuoteCollectionToAssign, contactToCheck.ShippingContactsSalesQuotes = salesQuoteCollectionToAssign);
            Assert.Equal(salesQuoteCollectionToAssign, contactToCheck.ShippingContactsSalesQuotes);
            // Contacts / Contact / BillingContactsSalesQuotes as ICollection<SalesQuote>
            Assert.Equal(salesQuoteCollectionToAssign, contactToCheck.BillingContactsSalesQuotes = salesQuoteCollectionToAssign);
            Assert.Equal(salesQuoteCollectionToAssign, contactToCheck.BillingContactsSalesQuotes);
            // Contacts / Contact / BillingContactsSalesOrders as ICollection<SalesOrder>
            Assert.Equal(salesOrderCollectionToAssign, contactToCheck.BillingContactsSalesOrders = salesOrderCollectionToAssign);
            Assert.Equal(salesOrderCollectionToAssign, contactToCheck.BillingContactsSalesOrders);
            // Contacts / Contact / ShippingContactsSalesOrders as ICollection<SalesOrder>
            Assert.Equal(salesOrderCollectionToAssign, contactToCheck.ShippingContactsSalesOrders = salesOrderCollectionToAssign);
            Assert.Equal(salesOrderCollectionToAssign, contactToCheck.ShippingContactsSalesOrders);
            // Contacts / Contact / BillingContactsSalesReturns as ICollection<SalesReturn>
            Assert.Equal(salesReturnCollectionToAssign, contactToCheck.BillingContactsSalesReturns = salesReturnCollectionToAssign);
            Assert.Equal(salesReturnCollectionToAssign, contactToCheck.BillingContactsSalesReturns);
            // Contacts / Contact / ShippingContactsSalesReturns as ICollection<SalesReturn>
            Assert.Equal(salesReturnCollectionToAssign, contactToCheck.ShippingContactsSalesReturns = salesReturnCollectionToAssign);
            Assert.Equal(salesReturnCollectionToAssign, contactToCheck.ShippingContactsSalesReturns);
            // Contacts / Contact / ShippingContactsPurchaseOrders as ICollection<PurchaseOrder>
            Assert.Equal(purchaseOrderCollectionToAssign, contactToCheck.ShippingContactsPurchaseOrders = purchaseOrderCollectionToAssign);
            Assert.Equal(purchaseOrderCollectionToAssign, contactToCheck.ShippingContactsPurchaseOrders);
            // Contacts / Contact / BillingContactsPurchaseOrders as ICollection<PurchaseOrder>
            Assert.Equal(purchaseOrderCollectionToAssign, contactToCheck.BillingContactsPurchaseOrders = purchaseOrderCollectionToAssign);
            Assert.Equal(purchaseOrderCollectionToAssign, contactToCheck.BillingContactsPurchaseOrders);
            // Contacts / Contact / OriginContactsShipments as ICollection<Shipment>
            Assert.Equal(shipmentCollectionToAssign, contactToCheck.OriginContactsShipments = shipmentCollectionToAssign);
            Assert.Equal(shipmentCollectionToAssign, contactToCheck.OriginContactsShipments);
            // Contacts / Contact / DestinationContactsShipments as ICollection<Shipment>
            Assert.Equal(shipmentCollectionToAssign, contactToCheck.DestinationContactsShipments = shipmentCollectionToAssign);
            Assert.Equal(shipmentCollectionToAssign, contactToCheck.DestinationContactsShipments);
            // Contacts / Contact / Payments as ICollection<Payment>
            Assert.Equal(paymentCollectionToAssign, contactToCheck.Payments = paymentCollectionToAssign);
            Assert.Equal(paymentCollectionToAssign, contactToCheck.Payments);
            // Contacts / User / Brands as ICollection<BrandUser>
            Assert.Equal(brandUserCollectionToAssign, userToCheck.Brands = brandUserCollectionToAssign);
            Assert.Equal(brandUserCollectionToAssign, userToCheck.Brands);
            // Contacts / User / Franchises as ICollection<FranchiseUser>
            Assert.Equal(franchiseUserCollectionToAssign, userToCheck.Franchises = franchiseUserCollectionToAssign);
            Assert.Equal(franchiseUserCollectionToAssign, userToCheck.Franchises);
            // Contacts / User / Stores as ICollection<StoreUser>
            Assert.Equal(storeUserCollectionToAssign, userToCheck.Stores = storeUserCollectionToAssign);
            Assert.Equal(storeUserCollectionToAssign, userToCheck.Stores);
            // Contacts / User / Images as ICollection<UserImage>
            Assert.Equal(userImageCollectionToAssign, userToCheck.Images = userImageCollectionToAssign);
            Assert.Equal(userImageCollectionToAssign, userToCheck.Images);
            // Contacts / User / StoredFiles as ICollection<UserFile>
            Assert.Equal(userFileCollectionToAssign, userToCheck.StoredFiles = userFileCollectionToAssign);
            Assert.Equal(userFileCollectionToAssign, userToCheck.StoredFiles);
            // Contacts / User / FavoriteCategories as ICollection<FavoriteCategory>
            Assert.Equal(favoriteCategoryCollectionToAssign, userToCheck.FavoriteCategories = favoriteCategoryCollectionToAssign);
            Assert.Equal(favoriteCategoryCollectionToAssign, userToCheck.FavoriteCategories);
            // Contacts / User / FavoriteVendors as ICollection<FavoriteVendor>
            Assert.Equal(favoriteVendorCollectionToAssign, userToCheck.FavoriteVendors = favoriteVendorCollectionToAssign);
            Assert.Equal(favoriteVendorCollectionToAssign, userToCheck.FavoriteVendors);
            // Contacts / User / FavoriteManufacturers as ICollection<FavoriteManufacturer>
            Assert.Equal(favoriteManufacturerCollectionToAssign, userToCheck.FavoriteManufacturers = favoriteManufacturerCollectionToAssign);
            Assert.Equal(favoriteManufacturerCollectionToAssign, userToCheck.FavoriteManufacturers);
            // Contacts / User / FavoriteStores as ICollection<FavoriteStore>
            Assert.Equal(favoriteStoreCollectionToAssign, userToCheck.FavoriteStores = favoriteStoreCollectionToAssign);
            Assert.Equal(favoriteStoreCollectionToAssign, userToCheck.FavoriteStores);
            // Contacts / User / ReferralCodes as ICollection<ReferralCode>
            Assert.Equal(referralCodeCollectionToAssign, userToCheck.ReferralCodes = referralCodeCollectionToAssign);
            Assert.Equal(referralCodeCollectionToAssign, userToCheck.ReferralCodes);
            // Contacts / User / UserProductTypes as ICollection<UserProductType>
            Assert.Equal(userProductTypeCollectionToAssign, userToCheck.UserProductTypes = userProductTypeCollectionToAssign);
            Assert.Equal(userProductTypeCollectionToAssign, userToCheck.UserProductTypes);
            // Contacts / User / SalesInvoices as ICollection<SalesInvoice>
            Assert.Equal(salesInvoiceCollectionToAssign, userToCheck.SalesInvoices = salesInvoiceCollectionToAssign);
            Assert.Equal(salesInvoiceCollectionToAssign, userToCheck.SalesInvoices);
            // Contacts / User / SalesQuotes as ICollection<SalesQuote>
            Assert.Equal(salesQuoteCollectionToAssign, userToCheck.SalesQuotes = salesQuoteCollectionToAssign);
            Assert.Equal(salesQuoteCollectionToAssign, userToCheck.SalesQuotes);
            // Contacts / User / SalesOrders as ICollection<SalesOrder>
            Assert.Equal(salesOrderCollectionToAssign, userToCheck.SalesOrders = salesOrderCollectionToAssign);
            Assert.Equal(salesOrderCollectionToAssign, userToCheck.SalesOrders);
            // Contacts / User / Subscriptions as ICollection<Subscription>
            Assert.Equal(subscriptionCollectionToAssign, userToCheck.Subscriptions = subscriptionCollectionToAssign);
            Assert.Equal(subscriptionCollectionToAssign, userToCheck.Subscriptions);
            // Contacts / User / SentMessages as ICollection<Message>
            Assert.Equal(messageCollectionToAssign, userToCheck.SentMessages = messageCollectionToAssign);
            Assert.Equal(messageCollectionToAssign, userToCheck.SentMessages);
            // Contacts / User / ReceivedMessages as ICollection<MessageRecipient>
            Assert.Equal(messageRecipientCollectionToAssign, userToCheck.ReceivedMessages = messageRecipientCollectionToAssign);
            Assert.Equal(messageRecipientCollectionToAssign, userToCheck.ReceivedMessages);
            // Contacts / User / ConversationUsers as ICollection<ConversationUser>
            Assert.Equal(conversationUserCollectionToAssign, userToCheck.ConversationUsers = conversationUserCollectionToAssign);
            Assert.Equal(conversationUserCollectionToAssign, userToCheck.ConversationUsers);
            // Contacts / User / DiscountCodes as ICollection<DiscountCode>
            Assert.Equal(discountCodeCollectionToAssign, userToCheck.DiscountCodes = discountCodeCollectionToAssign);
            Assert.Equal(discountCodeCollectionToAssign, userToCheck.DiscountCodes);
            // Contacts / User / Wallets as ICollection<Wallet>
            Assert.Equal(walletCollectionToAssign, userToCheck.Wallets = walletCollectionToAssign);
            Assert.Equal(walletCollectionToAssign, userToCheck.Wallets);
            // Contacts / User / MessageAttachmentsCreated as ICollection<MessageAttachment>
            Assert.Equal(messageAttachmentCollectionToAssign, userToCheck.MessageAttachmentsCreated = messageAttachmentCollectionToAssign);
            Assert.Equal(messageAttachmentCollectionToAssign, userToCheck.MessageAttachmentsCreated);
            // Contacts / User / MessageAttachmentsUpdated as ICollection<MessageAttachment>
            Assert.Equal(messageAttachmentCollectionToAssign, userToCheck.MessageAttachmentsUpdated = messageAttachmentCollectionToAssign);
            Assert.Equal(messageAttachmentCollectionToAssign, userToCheck.MessageAttachmentsUpdated);
            // Contacts / User / NotesCreated as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, userToCheck.NotesCreated = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, userToCheck.NotesCreated);
            // Contacts / User / NotesUpdated as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, userToCheck.NotesUpdated = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, userToCheck.NotesUpdated);
            // Contacts / User / ReviewsSubmitted as ICollection<Review>
            Assert.Equal(reviewCollectionToAssign, userToCheck.ReviewsSubmitted = reviewCollectionToAssign);
            Assert.Equal(reviewCollectionToAssign, userToCheck.ReviewsSubmitted);
            // Contacts / User / ReviewsApproved as ICollection<Review>
            Assert.Equal(reviewCollectionToAssign, userToCheck.ReviewsApproved = reviewCollectionToAssign);
            Assert.Equal(reviewCollectionToAssign, userToCheck.ReviewsApproved);
            // Contacts / User / UserEventAttendances as ICollection<UserEventAttendance>
            Assert.Equal(userEventAttendanceCollectionToAssign, userToCheck.UserEventAttendances = userEventAttendanceCollectionToAssign);
            Assert.Equal(userEventAttendanceCollectionToAssign, userToCheck.UserEventAttendances);
            // Contacts / User / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, userToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, userToCheck.Notes);
            // Contacts / User / Reviews as ICollection<Review>
            Assert.Equal(reviewCollectionToAssign, userToCheck.Reviews = reviewCollectionToAssign);
            Assert.Equal(reviewCollectionToAssign, userToCheck.Reviews);
            // Contacts / UserFile / UserID as int
            Assert.Equal(1, ((IAmFilterableByUser)userFileToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUser)userFileToCheck).UserID);
            // Contacts / UserFile / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUser)userFileToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUser)userFileToCheck).User);
            // Contacts / UserFile / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheMaster<StoredFile>)userFileToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheMaster<StoredFile>)userFileToCheck).UserID);
            // Contacts / UserFile / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheMaster<StoredFile>)userFileToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheMaster<StoredFile>)userFileToCheck).User);
            // Contacts / UserImage / UserID as int
            Assert.Equal(1, ((IAmFilterableByUser)userImageToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUser)userImageToCheck).UserID);
            // Contacts / UserImage / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUser)userImageToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUser)userImageToCheck).User);
            // Contacts / UserProductType / UserID as int
            Assert.Equal(1, ((IAmFilterableByUser)userProductTypeToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUser)userProductTypeToCheck).UserID);
            // Contacts / UserProductType / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUser)userProductTypeToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUser)userProductTypeToCheck).User);
            // Contacts / UserProductType / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheMaster<ProductType>)userProductTypeToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheMaster<ProductType>)userProductTypeToCheck).UserID);
            // Contacts / UserProductType / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheMaster<ProductType>)userProductTypeToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheMaster<ProductType>)userProductTypeToCheck).User);
            #endregion
            #region Counters
            // Counters / Counter / CounterLogs as ICollection<CounterLog>
            Assert.Equal(counterLogCollectionToAssign, counterToCheck.CounterLogs = counterLogCollectionToAssign);
            Assert.Equal(counterLogCollectionToAssign, counterToCheck.CounterLogs);
            #endregion
            #region Currencies
            // Currencies / Currency / Images as ICollection<CurrencyImage>
            Assert.Equal(currencyImageCollectionToAssign, currencyToCheck.Images = currencyImageCollectionToAssign);
            Assert.Equal(currencyImageCollectionToAssign, currencyToCheck.Images);
            // Currencies / Currency / HistoricalStartingCurrencies as ICollection<HistoricalCurrencyRate>
            Assert.Equal(historicalCurrencyRateCollectionToAssign, currencyToCheck.HistoricalStartingCurrencies = historicalCurrencyRateCollectionToAssign);
            Assert.Equal(historicalCurrencyRateCollectionToAssign, currencyToCheck.HistoricalStartingCurrencies);
            // Currencies / Currency / HistoricalEndingCurrencies as ICollection<HistoricalCurrencyRate>
            Assert.Equal(historicalCurrencyRateCollectionToAssign, currencyToCheck.HistoricalEndingCurrencies = historicalCurrencyRateCollectionToAssign);
            Assert.Equal(historicalCurrencyRateCollectionToAssign, currencyToCheck.HistoricalEndingCurrencies);
            // Currencies / Currency / ConversionStartingCurrencies as ICollection<CurrencyConversion>
            Assert.Equal(currencyConversionCollectionToAssign, currencyToCheck.ConversionStartingCurrencies = currencyConversionCollectionToAssign);
            Assert.Equal(currencyConversionCollectionToAssign, currencyToCheck.ConversionStartingCurrencies);
            // Currencies / Currency / ConversionEndingCurrencies as ICollection<CurrencyConversion>
            Assert.Equal(currencyConversionCollectionToAssign, currencyToCheck.ConversionEndingCurrencies = currencyConversionCollectionToAssign);
            Assert.Equal(currencyConversionCollectionToAssign, currencyToCheck.ConversionEndingCurrencies);
            #endregion
            #region Discounts
            // Discounts / Discount / Products as ICollection<DiscountProduct>
            Assert.Equal(discountProductCollectionToAssign, discountToCheck.Products = discountProductCollectionToAssign);
            Assert.Equal(discountProductCollectionToAssign, discountToCheck.Products);
            // Discounts / Discount / Brands as ICollection<DiscountBrand>
            Assert.Equal(discountBrandCollectionToAssign, discountToCheck.Brands = discountBrandCollectionToAssign);
            Assert.Equal(discountBrandCollectionToAssign, discountToCheck.Brands);
            // Discounts / Discount / Franchises as ICollection<DiscountFranchise>
            Assert.Equal(discountFranchiseCollectionToAssign, discountToCheck.Franchises = discountFranchiseCollectionToAssign);
            Assert.Equal(discountFranchiseCollectionToAssign, discountToCheck.Franchises);
            // Discounts / Discount / Stores as ICollection<DiscountStore>
            Assert.Equal(discountStoreCollectionToAssign, discountToCheck.Stores = discountStoreCollectionToAssign);
            Assert.Equal(discountStoreCollectionToAssign, discountToCheck.Stores);
            // Discounts / Discount / Accounts as ICollection<DiscountAccount>
            Assert.Equal(discountAccountCollectionToAssign, discountToCheck.Accounts = discountAccountCollectionToAssign);
            Assert.Equal(discountAccountCollectionToAssign, discountToCheck.Accounts);
            // Discounts / Discount / Users as ICollection<DiscountUser>
            Assert.Equal(discountUserCollectionToAssign, discountToCheck.Users = discountUserCollectionToAssign);
            Assert.Equal(discountUserCollectionToAssign, discountToCheck.Users);
            // Discounts / Discount / Vendors as ICollection<DiscountVendor>
            Assert.Equal(discountVendorCollectionToAssign, discountToCheck.Vendors = discountVendorCollectionToAssign);
            Assert.Equal(discountVendorCollectionToAssign, discountToCheck.Vendors);
            // Discounts / Discount / Manufacturers as ICollection<DiscountManufacturer>
            Assert.Equal(discountManufacturerCollectionToAssign, discountToCheck.Manufacturers = discountManufacturerCollectionToAssign);
            Assert.Equal(discountManufacturerCollectionToAssign, discountToCheck.Manufacturers);
            // Discounts / Discount / Codes as ICollection<DiscountCode>
            Assert.Equal(discountCodeCollectionToAssign, discountToCheck.Codes = discountCodeCollectionToAssign);
            Assert.Equal(discountCodeCollectionToAssign, discountToCheck.Codes);
            // Discounts / Discount / Countries as ICollection<DiscountCountry>
            Assert.Equal(discountCountryCollectionToAssign, discountToCheck.Countries = discountCountryCollectionToAssign);
            Assert.Equal(discountCountryCollectionToAssign, discountToCheck.Countries);
            // Discounts / Discount / UserRoles as ICollection<DiscountUserRole>
            Assert.Equal(discountUserRoleCollectionToAssign, discountToCheck.UserRoles = discountUserRoleCollectionToAssign);
            Assert.Equal(discountUserRoleCollectionToAssign, discountToCheck.UserRoles);
            // Discounts / Discount / Categories as ICollection<DiscountCategory>
            Assert.Equal(discountCategoryCollectionToAssign, discountToCheck.Categories = discountCategoryCollectionToAssign);
            Assert.Equal(discountCategoryCollectionToAssign, discountToCheck.Categories);
            // Discounts / Discount / AccountTypes as ICollection<DiscountAccountType>
            Assert.Equal(discountAccountTypeCollectionToAssign, discountToCheck.AccountTypes = discountAccountTypeCollectionToAssign);
            Assert.Equal(discountAccountTypeCollectionToAssign, discountToCheck.AccountTypes);
            // Discounts / Discount / ProductTypes as ICollection<DiscountProductType>
            Assert.Equal(discountProductTypeCollectionToAssign, discountToCheck.ProductTypes = discountProductTypeCollectionToAssign);
            Assert.Equal(discountProductTypeCollectionToAssign, discountToCheck.ProductTypes);
            // Discounts / Discount / ShipCarrierMethods as ICollection<DiscountShipCarrierMethod>
            Assert.Equal(discountShipCarrierMethodCollectionToAssign, discountToCheck.ShipCarrierMethods = discountShipCarrierMethodCollectionToAssign);
            Assert.Equal(discountShipCarrierMethodCollectionToAssign, discountToCheck.ShipCarrierMethods);
            // Discounts / DiscountAccount / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)discountAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)discountAccountToCheck).AccountID);
            // Discounts / DiscountAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)discountAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)discountAccountToCheck).Account);
            // Discounts / DiscountAccount / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Discount>)discountAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Discount>)discountAccountToCheck).AccountID);
            // Discounts / DiscountAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Discount>)discountAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Discount>)discountAccountToCheck).Account);
            // Discounts / DiscountBrand / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)discountBrandToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)discountBrandToCheck).BrandID);
            // Discounts / DiscountBrand / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)discountBrandToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)discountBrandToCheck).Brand);
            // Discounts / DiscountBrand / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheSlave<Discount>)discountBrandToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheSlave<Discount>)discountBrandToCheck).BrandID);
            // Discounts / DiscountBrand / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheSlave<Discount>)discountBrandToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheSlave<Discount>)discountBrandToCheck).Brand);
            // Discounts / DiscountCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategory)discountCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategory)discountCategoryToCheck).CategoryID);
            // Discounts / DiscountCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)discountCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)discountCategoryToCheck).Category);
            // Discounts / DiscountCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Discount>)discountCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Discount>)discountCategoryToCheck).CategoryID);
            // Discounts / DiscountCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Discount>)discountCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Discount>)discountCategoryToCheck).Category);
            // Discounts / DiscountFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)discountFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)discountFranchiseToCheck).FranchiseID);
            // Discounts / DiscountFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)discountFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)discountFranchiseToCheck).Franchise);
            // Discounts / DiscountFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<Discount>)discountFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<Discount>)discountFranchiseToCheck).FranchiseID);
            // Discounts / DiscountFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<Discount>)discountFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<Discount>)discountFranchiseToCheck).Franchise);
            // Discounts / DiscountManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturer)discountManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturer)discountManufacturerToCheck).ManufacturerID);
            // Discounts / DiscountManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)discountManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)discountManufacturerToCheck).Manufacturer);
            // Discounts / DiscountManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Discount>)discountManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Discount>)discountManufacturerToCheck).ManufacturerID);
            // Discounts / DiscountManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Discount>)discountManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Discount>)discountManufacturerToCheck).Manufacturer);
            // Discounts / DiscountProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)discountProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)discountProductToCheck).ProductID);
            // Discounts / DiscountProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)discountProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)discountProductToCheck).Product);
            // Discounts / DiscountProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Discount>)discountProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Discount>)discountProductToCheck).ProductID);
            // Discounts / DiscountProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Discount>)discountProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Discount>)discountProductToCheck).Product);
            // Discounts / DiscountStore / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)discountStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)discountStoreToCheck).StoreID);
            // Discounts / DiscountStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)discountStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)discountStoreToCheck).Store);
            // Discounts / DiscountStore / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Discount>)discountStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Discount>)discountStoreToCheck).StoreID);
            // Discounts / DiscountStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Discount>)discountStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Discount>)discountStoreToCheck).Store);
            // Discounts / DiscountUser / UserID as int
            Assert.Equal(1, ((IAmFilterableByUser)discountUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUser)discountUserToCheck).UserID);
            // Discounts / DiscountUser / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUser)discountUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUser)discountUserToCheck).User);
            // Discounts / DiscountUser / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Discount>)discountUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Discount>)discountUserToCheck).UserID);
            // Discounts / DiscountUser / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Discount>)discountUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Discount>)discountUserToCheck).User);
            // Discounts / DiscountVendor / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendor)discountVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendor)discountVendorToCheck).VendorID);
            // Discounts / DiscountVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)discountVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)discountVendorToCheck).Vendor);
            // Discounts / DiscountVendor / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Discount>)discountVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Discount>)discountVendorToCheck).VendorID);
            // Discounts / DiscountVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Discount>)discountVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Discount>)discountVendorToCheck).Vendor);
            #endregion
            #region Favorites
            // Favorites / FavoriteManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturer)favoriteManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturer)favoriteManufacturerToCheck).ManufacturerID);
            // Favorites / FavoriteManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)favoriteManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)favoriteManufacturerToCheck).Manufacturer);
            // Favorites / FavoriteManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<User>)favoriteManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<User>)favoriteManufacturerToCheck).ManufacturerID);
            // Favorites / FavoriteManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<User>)favoriteManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<User>)favoriteManufacturerToCheck).Manufacturer);
            // Favorites / FavoriteStore / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)favoriteStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)favoriteStoreToCheck).StoreID);
            // Favorites / FavoriteStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)favoriteStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)favoriteStoreToCheck).Store);
            // Favorites / FavoriteStore / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<User>)favoriteStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<User>)favoriteStoreToCheck).StoreID);
            // Favorites / FavoriteStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<User>)favoriteStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<User>)favoriteStoreToCheck).Store);
            // Favorites / FavoriteVendor / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendor)favoriteVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendor)favoriteVendorToCheck).VendorID);
            // Favorites / FavoriteVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)favoriteVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)favoriteVendorToCheck).Vendor);
            // Favorites / FavoriteVendor / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<User>)favoriteVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<User>)favoriteVendorToCheck).VendorID);
            // Favorites / FavoriteVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<User>)favoriteVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<User>)favoriteVendorToCheck).Vendor);
            #endregion
            #region Franchises
            // Franchises / Franchise / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, franchiseToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, franchiseToCheck.Notes);
            // Franchises / Franchise / Images as ICollection<FranchiseImage>
            Assert.Equal(franchiseImageCollectionToAssign, franchiseToCheck.Images = franchiseImageCollectionToAssign);
            Assert.Equal(franchiseImageCollectionToAssign, franchiseToCheck.Images);
            // Franchises / Franchise / Accounts as ICollection<FranchiseAccount>
            Assert.Equal(franchiseAccountCollectionToAssign, franchiseToCheck.Accounts = franchiseAccountCollectionToAssign);
            Assert.Equal(franchiseAccountCollectionToAssign, franchiseToCheck.Accounts);
            // Franchises / Franchise / Brands as ICollection<BrandFranchise>
            Assert.Equal(brandFranchiseCollectionToAssign, franchiseToCheck.Brands = brandFranchiseCollectionToAssign);
            Assert.Equal(brandFranchiseCollectionToAssign, franchiseToCheck.Brands);
            // Franchises / Franchise / Categories as ICollection<FranchiseCategory>
            Assert.Equal(franchiseCategoryCollectionToAssign, franchiseToCheck.Categories = franchiseCategoryCollectionToAssign);
            Assert.Equal(franchiseCategoryCollectionToAssign, franchiseToCheck.Categories);
            // Franchises / Franchise / Manufacturers as ICollection<FranchiseManufacturer>
            Assert.Equal(franchiseManufacturerCollectionToAssign, franchiseToCheck.Manufacturers = franchiseManufacturerCollectionToAssign);
            Assert.Equal(franchiseManufacturerCollectionToAssign, franchiseToCheck.Manufacturers);
            // Franchises / Franchise / Products as ICollection<FranchiseProduct>
            Assert.Equal(franchiseProductCollectionToAssign, franchiseToCheck.Products = franchiseProductCollectionToAssign);
            Assert.Equal(franchiseProductCollectionToAssign, franchiseToCheck.Products);
            // Franchises / Franchise / Stores as ICollection<FranchiseStore>
            Assert.Equal(franchiseStoreCollectionToAssign, franchiseToCheck.Stores = franchiseStoreCollectionToAssign);
            Assert.Equal(franchiseStoreCollectionToAssign, franchiseToCheck.Stores);
            // Franchises / Franchise / Users as ICollection<FranchiseUser>
            Assert.Equal(franchiseUserCollectionToAssign, franchiseToCheck.Users = franchiseUserCollectionToAssign);
            Assert.Equal(franchiseUserCollectionToAssign, franchiseToCheck.Users);
            // Franchises / Franchise / Vendors as ICollection<FranchiseVendor>
            Assert.Equal(franchiseVendorCollectionToAssign, franchiseToCheck.Vendors = franchiseVendorCollectionToAssign);
            Assert.Equal(franchiseVendorCollectionToAssign, franchiseToCheck.Vendors);
            // Franchises / Franchise / FranchiseCurrencies as ICollection<FranchiseCurrency>
            Assert.Equal(franchiseCurrencyCollectionToAssign, franchiseToCheck.FranchiseCurrencies = franchiseCurrencyCollectionToAssign);
            Assert.Equal(franchiseCurrencyCollectionToAssign, franchiseToCheck.FranchiseCurrencies);
            // Franchises / Franchise / FranchiseInventoryLocations as ICollection<FranchiseInventoryLocation>
            Assert.Equal(franchiseInventoryLocationCollectionToAssign, franchiseToCheck.FranchiseInventoryLocations = franchiseInventoryLocationCollectionToAssign);
            Assert.Equal(franchiseInventoryLocationCollectionToAssign, franchiseToCheck.FranchiseInventoryLocations);
            // Franchises / Franchise / FranchiseLanguages as ICollection<FranchiseLanguage>
            Assert.Equal(franchiseLanguageCollectionToAssign, franchiseToCheck.FranchiseLanguages = franchiseLanguageCollectionToAssign);
            Assert.Equal(franchiseLanguageCollectionToAssign, franchiseToCheck.FranchiseLanguages);
            // Franchises / Franchise / FranchiseSiteDomains as ICollection<FranchiseSiteDomain>
            Assert.Equal(franchiseSiteDomainCollectionToAssign, franchiseToCheck.FranchiseSiteDomains = franchiseSiteDomainCollectionToAssign);
            Assert.Equal(franchiseSiteDomainCollectionToAssign, franchiseToCheck.FranchiseSiteDomains);
            // Franchises / Franchise / FranchiseCountries as ICollection<FranchiseCountry>
            Assert.Equal(franchiseCountryCollectionToAssign, franchiseToCheck.FranchiseCountries = franchiseCountryCollectionToAssign);
            Assert.Equal(franchiseCountryCollectionToAssign, franchiseToCheck.FranchiseCountries);
            // Franchises / Franchise / FranchiseRegions as ICollection<FranchiseRegion>
            Assert.Equal(franchiseRegionCollectionToAssign, franchiseToCheck.FranchiseRegions = franchiseRegionCollectionToAssign);
            Assert.Equal(franchiseRegionCollectionToAssign, franchiseToCheck.FranchiseRegions);
            // Franchises / Franchise / FranchiseDistricts as ICollection<FranchiseDistrict>
            Assert.Equal(franchiseDistrictCollectionToAssign, franchiseToCheck.FranchiseDistricts = franchiseDistrictCollectionToAssign);
            Assert.Equal(franchiseDistrictCollectionToAssign, franchiseToCheck.FranchiseDistricts);
            // Franchises / FranchiseAccount / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseAccountToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseAccountToCheck).FranchiseID);
            // Franchises / FranchiseAccount / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseAccountToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseAccountToCheck).Franchise);
            // Franchises / FranchiseAccount / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Account>)franchiseAccountToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Account>)franchiseAccountToCheck).FranchiseID);
            // Franchises / FranchiseAccount / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Account>)franchiseAccountToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Account>)franchiseAccountToCheck).Franchise);
            // Franchises / FranchiseAccount / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)franchiseAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)franchiseAccountToCheck).AccountID);
            // Franchises / FranchiseAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)franchiseAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)franchiseAccountToCheck).Account);
            // Franchises / FranchiseAccount / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Franchise>)franchiseAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Franchise>)franchiseAccountToCheck).AccountID);
            // Franchises / FranchiseAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Franchise>)franchiseAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Franchise>)franchiseAccountToCheck).Account);
            // Franchises / FranchiseCategory / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseCategoryToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseCategoryToCheck).FranchiseID);
            // Franchises / FranchiseCategory / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseCategoryToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseCategoryToCheck).Franchise);
            // Franchises / FranchiseCategory / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Category>)franchiseCategoryToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Category>)franchiseCategoryToCheck).FranchiseID);
            // Franchises / FranchiseCategory / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Category>)franchiseCategoryToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Category>)franchiseCategoryToCheck).Franchise);
            // Franchises / FranchiseCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategory)franchiseCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategory)franchiseCategoryToCheck).CategoryID);
            // Franchises / FranchiseCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)franchiseCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)franchiseCategoryToCheck).Category);
            // Franchises / FranchiseCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Franchise>)franchiseCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Franchise>)franchiseCategoryToCheck).CategoryID);
            // Franchises / FranchiseCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Franchise>)franchiseCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Franchise>)franchiseCategoryToCheck).Category);
            // Franchises / FranchiseCountry / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseCountryToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseCountryToCheck).FranchiseID);
            // Franchises / FranchiseCountry / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseCountryToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseCountryToCheck).Franchise);
            // Franchises / FranchiseCountry / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Country>)franchiseCountryToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Country>)franchiseCountryToCheck).FranchiseID);
            // Franchises / FranchiseCountry / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Country>)franchiseCountryToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Country>)franchiseCountryToCheck).Franchise);
            // Franchises / FranchiseCurrency / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseCurrencyToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseCurrencyToCheck).FranchiseID);
            // Franchises / FranchiseCurrency / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseCurrencyToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseCurrencyToCheck).Franchise);
            // Franchises / FranchiseCurrency / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Currency>)franchiseCurrencyToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Currency>)franchiseCurrencyToCheck).FranchiseID);
            // Franchises / FranchiseCurrency / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Currency>)franchiseCurrencyToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Currency>)franchiseCurrencyToCheck).Franchise);
            // Franchises / FranchiseDistrict / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseDistrictToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseDistrictToCheck).FranchiseID);
            // Franchises / FranchiseDistrict / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseDistrictToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseDistrictToCheck).Franchise);
            // Franchises / FranchiseDistrict / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<District>)franchiseDistrictToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<District>)franchiseDistrictToCheck).FranchiseID);
            // Franchises / FranchiseDistrict / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<District>)franchiseDistrictToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<District>)franchiseDistrictToCheck).Franchise);
            // Franchises / FranchiseImage / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseImageToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseImageToCheck).FranchiseID);
            // Franchises / FranchiseImage / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseImageToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseImageToCheck).Franchise);
            // Franchises / FranchiseInventoryLocation / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseInventoryLocationToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseInventoryLocationToCheck).FranchiseID);
            // Franchises / FranchiseInventoryLocation / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseInventoryLocationToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseInventoryLocationToCheck).Franchise);
            // Franchises / FranchiseInventoryLocation / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<InventoryLocation>)franchiseInventoryLocationToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<InventoryLocation>)franchiseInventoryLocationToCheck).FranchiseID);
            // Franchises / FranchiseInventoryLocation / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<InventoryLocation>)franchiseInventoryLocationToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<InventoryLocation>)franchiseInventoryLocationToCheck).Franchise);
            // Franchises / FranchiseLanguage / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseLanguageToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseLanguageToCheck).FranchiseID);
            // Franchises / FranchiseLanguage / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseLanguageToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseLanguageToCheck).Franchise);
            // Franchises / FranchiseLanguage / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Language>)franchiseLanguageToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Language>)franchiseLanguageToCheck).FranchiseID);
            // Franchises / FranchiseLanguage / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Language>)franchiseLanguageToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Language>)franchiseLanguageToCheck).Franchise);
            // Franchises / FranchiseManufacturer / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseManufacturerToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseManufacturerToCheck).FranchiseID);
            // Franchises / FranchiseManufacturer / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseManufacturerToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseManufacturerToCheck).Franchise);
            // Franchises / FranchiseManufacturer / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Manufacturer>)franchiseManufacturerToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Manufacturer>)franchiseManufacturerToCheck).FranchiseID);
            // Franchises / FranchiseManufacturer / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Manufacturer>)franchiseManufacturerToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Manufacturer>)franchiseManufacturerToCheck).Franchise);
            // Franchises / FranchiseManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturer)franchiseManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturer)franchiseManufacturerToCheck).ManufacturerID);
            // Franchises / FranchiseManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)franchiseManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)franchiseManufacturerToCheck).Manufacturer);
            // Franchises / FranchiseManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Franchise>)franchiseManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Franchise>)franchiseManufacturerToCheck).ManufacturerID);
            // Franchises / FranchiseManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Franchise>)franchiseManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Franchise>)franchiseManufacturerToCheck).Manufacturer);
            // Franchises / FranchiseProduct / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseProductToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseProductToCheck).FranchiseID);
            // Franchises / FranchiseProduct / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseProductToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseProductToCheck).Franchise);
            // Franchises / FranchiseProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)franchiseProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)franchiseProductToCheck).ProductID);
            // Franchises / FranchiseProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)franchiseProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)franchiseProductToCheck).Product);
            // Franchises / FranchiseProduct / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Product>)franchiseProductToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Product>)franchiseProductToCheck).FranchiseID);
            // Franchises / FranchiseProduct / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Product>)franchiseProductToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Product>)franchiseProductToCheck).Franchise);
            // Franchises / FranchiseProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Franchise>)franchiseProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Franchise>)franchiseProductToCheck).ProductID);
            // Franchises / FranchiseProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Franchise>)franchiseProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Franchise>)franchiseProductToCheck).Product);
            // Franchises / FranchiseRegion / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseRegionToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseRegionToCheck).FranchiseID);
            // Franchises / FranchiseRegion / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseRegionToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseRegionToCheck).Franchise);
            // Franchises / FranchiseRegion / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Region>)franchiseRegionToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Region>)franchiseRegionToCheck).FranchiseID);
            // Franchises / FranchiseRegion / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Region>)franchiseRegionToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Region>)franchiseRegionToCheck).Franchise);
            // Franchises / FranchiseSiteDomain / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseSiteDomainToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseSiteDomainToCheck).FranchiseID);
            // Franchises / FranchiseSiteDomain / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseSiteDomainToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseSiteDomainToCheck).Franchise);
            // Franchises / FranchiseSiteDomain / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<SiteDomain>)franchiseSiteDomainToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<SiteDomain>)franchiseSiteDomainToCheck).FranchiseID);
            // Franchises / FranchiseSiteDomain / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<SiteDomain>)franchiseSiteDomainToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<SiteDomain>)franchiseSiteDomainToCheck).Franchise);
            // Franchises / FranchiseStore / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseStoreToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseStoreToCheck).FranchiseID);
            // Franchises / FranchiseStore / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseStoreToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseStoreToCheck).Franchise);
            // Franchises / FranchiseStore / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Store>)franchiseStoreToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Store>)franchiseStoreToCheck).FranchiseID);
            // Franchises / FranchiseStore / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Store>)franchiseStoreToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Store>)franchiseStoreToCheck).Franchise);
            // Franchises / FranchiseStore / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)franchiseStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)franchiseStoreToCheck).StoreID);
            // Franchises / FranchiseStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)franchiseStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)franchiseStoreToCheck).Store);
            // Franchises / FranchiseStore / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Franchise>)franchiseStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Franchise>)franchiseStoreToCheck).StoreID);
            // Franchises / FranchiseStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Franchise>)franchiseStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<Franchise>)franchiseStoreToCheck).Store);
            // Franchises / FranchiseUser / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseUserToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseUserToCheck).FranchiseID);
            // Franchises / FranchiseUser / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseUserToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseUserToCheck).Franchise);
            // Franchises / FranchiseUser / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<User>)franchiseUserToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<User>)franchiseUserToCheck).FranchiseID);
            // Franchises / FranchiseUser / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<User>)franchiseUserToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<User>)franchiseUserToCheck).Franchise);
            // Franchises / FranchiseUser / UserID as int
            Assert.Equal(1, ((IAmFilterableByUser)franchiseUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUser)franchiseUserToCheck).UserID);
            // Franchises / FranchiseUser / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUser)franchiseUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUser)franchiseUserToCheck).User);
            // Franchises / FranchiseUser / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Franchise>)franchiseUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Franchise>)franchiseUserToCheck).UserID);
            // Franchises / FranchiseUser / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Franchise>)franchiseUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Franchise>)franchiseUserToCheck).User);
            // Franchises / FranchiseVendor / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseVendorToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)franchiseVendorToCheck).FranchiseID);
            // Franchises / FranchiseVendor / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseVendorToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)franchiseVendorToCheck).Franchise);
            // Franchises / FranchiseVendor / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Vendor>)franchiseVendorToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Vendor>)franchiseVendorToCheck).FranchiseID);
            // Franchises / FranchiseVendor / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Vendor>)franchiseVendorToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMaster<Vendor>)franchiseVendorToCheck).Franchise);
            // Franchises / FranchiseVendor / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendor)franchiseVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendor)franchiseVendorToCheck).VendorID);
            // Franchises / FranchiseVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)franchiseVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)franchiseVendorToCheck).Vendor);
            // Franchises / FranchiseVendor / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Franchise>)franchiseVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Franchise>)franchiseVendorToCheck).VendorID);
            // Franchises / FranchiseVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Franchise>)franchiseVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Franchise>)franchiseVendorToCheck).Vendor);
            #endregion
            #region Geography
            // Geography / Country / Images as ICollection<CountryImage>
            Assert.Equal(countryImageCollectionToAssign, countryToCheck.Images = countryImageCollectionToAssign);
            Assert.Equal(countryImageCollectionToAssign, countryToCheck.Images);
            // Geography / Country / Languages as ICollection<CountryLanguage>
            Assert.Equal(countryLanguageCollectionToAssign, countryToCheck.Languages = countryLanguageCollectionToAssign);
            Assert.Equal(countryLanguageCollectionToAssign, countryToCheck.Languages);
            // Geography / Country / Currencies as ICollection<CountryCurrency>
            Assert.Equal(countryCurrencyCollectionToAssign, countryToCheck.Currencies = countryCurrencyCollectionToAssign);
            Assert.Equal(countryCurrencyCollectionToAssign, countryToCheck.Currencies);
            // Geography / Country / Taxes as ICollection<TaxCountry>
            Assert.Equal(taxCountryCollectionToAssign, countryToCheck.Taxes = taxCountryCollectionToAssign);
            Assert.Equal(taxCountryCollectionToAssign, countryToCheck.Taxes);
            // Geography / Country / Regions as ICollection<Region>
            Assert.Equal(regionCollectionToAssign, countryToCheck.Regions = regionCollectionToAssign);
            Assert.Equal(regionCollectionToAssign, countryToCheck.Regions);
            // Geography / Country / Districts as ICollection<District>
            Assert.Equal(districtCollectionToAssign, countryToCheck.Districts = districtCollectionToAssign);
            Assert.Equal(districtCollectionToAssign, countryToCheck.Districts);
            // Geography / District / Images as ICollection<DistrictImage>
            Assert.Equal(districtImageCollectionToAssign, districtToCheck.Images = districtImageCollectionToAssign);
            Assert.Equal(districtImageCollectionToAssign, districtToCheck.Images);
            // Geography / District / Languages as ICollection<DistrictLanguage>
            Assert.Equal(districtLanguageCollectionToAssign, districtToCheck.Languages = districtLanguageCollectionToAssign);
            Assert.Equal(districtLanguageCollectionToAssign, districtToCheck.Languages);
            // Geography / District / Currencies as ICollection<DistrictCurrency>
            Assert.Equal(districtCurrencyCollectionToAssign, districtToCheck.Currencies = districtCurrencyCollectionToAssign);
            Assert.Equal(districtCurrencyCollectionToAssign, districtToCheck.Currencies);
            // Geography / District / Taxes as ICollection<TaxDistrict>
            Assert.Equal(taxDistrictCollectionToAssign, districtToCheck.Taxes = taxDistrictCollectionToAssign);
            Assert.Equal(taxDistrictCollectionToAssign, districtToCheck.Taxes);
            // Geography / Region / Images as ICollection<RegionImage>
            Assert.Equal(regionImageCollectionToAssign, regionToCheck.Images = regionImageCollectionToAssign);
            Assert.Equal(regionImageCollectionToAssign, regionToCheck.Images);
            // Geography / Region / Languages as ICollection<RegionLanguage>
            Assert.Equal(regionLanguageCollectionToAssign, regionToCheck.Languages = regionLanguageCollectionToAssign);
            Assert.Equal(regionLanguageCollectionToAssign, regionToCheck.Languages);
            // Geography / Region / Currencies as ICollection<RegionCurrency>
            Assert.Equal(regionCurrencyCollectionToAssign, regionToCheck.Currencies = regionCurrencyCollectionToAssign);
            Assert.Equal(regionCurrencyCollectionToAssign, regionToCheck.Currencies);
            // Geography / Region / Taxes as ICollection<TaxRegion>
            Assert.Equal(taxRegionCollectionToAssign, regionToCheck.Taxes = taxRegionCollectionToAssign);
            Assert.Equal(taxRegionCollectionToAssign, regionToCheck.Taxes);
            // Geography / Region / Districts as ICollection<District>
            Assert.Equal(districtCollectionToAssign, regionToCheck.Districts = districtCollectionToAssign);
            Assert.Equal(districtCollectionToAssign, regionToCheck.Districts);
            #endregion
            #region Globalization
            // Globalization / Language / Images as ICollection<LanguageImage>
            Assert.Equal(languageImageCollectionToAssign, languageToCheck.Images = languageImageCollectionToAssign);
            Assert.Equal(languageImageCollectionToAssign, languageToCheck.Images);
            // Globalization / UiKey / UiTranslations as ICollection<UiTranslation>
            Assert.Equal(uiTranslationCollectionToAssign, uiKeyToCheck.UiTranslations = uiTranslationCollectionToAssign);
            Assert.Equal(uiTranslationCollectionToAssign, uiKeyToCheck.UiTranslations);
            #endregion
            #region Groups
            // Groups / Group / Children as ICollection<Group>
            Assert.Equal(groupCollectionToAssign, groupToCheck.Children = groupCollectionToAssign);
            Assert.Equal(groupCollectionToAssign, groupToCheck.Children);
            // Groups / Group / Users as ICollection<GroupUser>
            Assert.Equal(groupUserCollectionToAssign, groupToCheck.Users = groupUserCollectionToAssign);
            Assert.Equal(groupUserCollectionToAssign, groupToCheck.Users);
            // Groups / GroupUser / UserID as int
            Assert.Equal(1, ((IAmFilterableByUser)groupUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUser)groupUserToCheck).UserID);
            // Groups / GroupUser / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUser)groupUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUser)groupUserToCheck).User);
            // Groups / GroupUser / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Group>)groupUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Group>)groupUserToCheck).UserID);
            // Groups / GroupUser / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Group>)groupUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Group>)groupUserToCheck).User);
            #endregion
            #region Hangfire
            // Hangfire / HangfireJob / JobParameters as ICollection<HangfireJobParameter>
            Assert.Equal(hangfireJobParameterCollectionToAssign, hangfireJobToCheck.JobParameters = hangfireJobParameterCollectionToAssign);
            Assert.Equal(hangfireJobParameterCollectionToAssign, hangfireJobToCheck.JobParameters);
            // Hangfire / HangfireJob / States as ICollection<HangfireState>
            Assert.Equal(hangfireStateCollectionToAssign, hangfireJobToCheck.States = hangfireStateCollectionToAssign);
            Assert.Equal(hangfireStateCollectionToAssign, hangfireJobToCheck.States);
            // Hangfire / ScheduledJobConfiguration / ScheduledJobConfigurationSettings as ICollection<ScheduledJobConfigurationSetting>
            Assert.Equal(scheduledJobConfigurationSettingCollectionToAssign, scheduledJobConfigurationToCheck.ScheduledJobConfigurationSettings = scheduledJobConfigurationSettingCollectionToAssign);
            Assert.Equal(scheduledJobConfigurationSettingCollectionToAssign, scheduledJobConfigurationToCheck.ScheduledJobConfigurationSettings);
            #endregion
            #region Inventory
            // Inventory / InventoryLocation / Brands as ICollection<BrandInventoryLocation>
            Assert.Equal(brandInventoryLocationCollectionToAssign, inventoryLocationToCheck.Brands = brandInventoryLocationCollectionToAssign);
            Assert.Equal(brandInventoryLocationCollectionToAssign, inventoryLocationToCheck.Brands);
            // Inventory / InventoryLocation / Franchises as ICollection<FranchiseInventoryLocation>
            Assert.Equal(franchiseInventoryLocationCollectionToAssign, inventoryLocationToCheck.Franchises = franchiseInventoryLocationCollectionToAssign);
            Assert.Equal(franchiseInventoryLocationCollectionToAssign, inventoryLocationToCheck.Franchises);
            // Inventory / InventoryLocation / Stores as ICollection<StoreInventoryLocation>
            Assert.Equal(storeInventoryLocationCollectionToAssign, inventoryLocationToCheck.Stores = storeInventoryLocationCollectionToAssign);
            Assert.Equal(storeInventoryLocationCollectionToAssign, inventoryLocationToCheck.Stores);
            // Inventory / InventoryLocation / Sections as ICollection<InventoryLocationSection>
            Assert.Equal(inventoryLocationSectionCollectionToAssign, inventoryLocationToCheck.Sections = inventoryLocationSectionCollectionToAssign);
            Assert.Equal(inventoryLocationSectionCollectionToAssign, inventoryLocationToCheck.Sections);
            // Inventory / InventoryLocation / Regions as ICollection<InventoryLocationRegion>
            Assert.Equal(inventoryLocationRegionCollectionToAssign, inventoryLocationToCheck.Regions = inventoryLocationRegionCollectionToAssign);
            Assert.Equal(inventoryLocationRegionCollectionToAssign, inventoryLocationToCheck.Regions);
            // Inventory / InventoryLocation / Users as ICollection<InventoryLocationUser>
            Assert.Equal(inventoryLocationUserCollectionToAssign, inventoryLocationToCheck.Users = inventoryLocationUserCollectionToAssign);
            Assert.Equal(inventoryLocationUserCollectionToAssign, inventoryLocationToCheck.Users);
            // Inventory / InventoryLocationSection / ProductInventoryLocationSections as ICollection<ProductInventoryLocationSection>
            Assert.Equal(productInventoryLocationSectionCollectionToAssign, inventoryLocationSectionToCheck.ProductInventoryLocationSections = productInventoryLocationSectionCollectionToAssign);
            Assert.Equal(productInventoryLocationSectionCollectionToAssign, inventoryLocationSectionToCheck.ProductInventoryLocationSections);
            // Inventory / InventoryLocationSection / Shipments as ICollection<Shipment>
            Assert.Equal(shipmentCollectionToAssign, inventoryLocationSectionToCheck.Shipments = shipmentCollectionToAssign);
            Assert.Equal(shipmentCollectionToAssign, inventoryLocationSectionToCheck.Shipments);
            #endregion
            #region Invoicing
            // Invoicing / SalesInvoice / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, salesInvoiceToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, salesInvoiceToCheck.Notes);
            // Invoicing / SalesInvoice / AssociatedSalesOrders as ICollection<SalesOrderSalesInvoice>
            Assert.Equal(salesOrderSalesInvoiceCollectionToAssign, salesInvoiceToCheck.AssociatedSalesOrders = salesOrderSalesInvoiceCollectionToAssign);
            Assert.Equal(salesOrderSalesInvoiceCollectionToAssign, salesInvoiceToCheck.AssociatedSalesOrders);
            // Invoicing / SalesInvoice / SalesInvoicePayments as ICollection<SalesInvoicePayment>
            Assert.Equal(salesInvoicePaymentCollectionToAssign, salesInvoiceToCheck.SalesInvoicePayments = salesInvoicePaymentCollectionToAssign);
            Assert.Equal(salesInvoicePaymentCollectionToAssign, salesInvoiceToCheck.SalesInvoicePayments);
            // Invoicing / SalesInvoiceContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBase)salesInvoiceContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBase)salesInvoiceContactToCheck).ContactID);
            // Invoicing / SalesInvoiceContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBase)salesInvoiceContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBase)salesInvoiceContactToCheck).Contact);
            // Invoicing / SalesOrderSalesInvoice / SalesOrderID as int
            Assert.Equal(1, ((ISalesOrderSalesInvoice)salesOrderSalesInvoiceToCheck).SalesOrderID = 1);
            Assert.Equal(1, ((ISalesOrderSalesInvoice)salesOrderSalesInvoiceToCheck).SalesOrderID);
            // Invoicing / SalesOrderSalesInvoice / SalesOrder as SalesOrder
            Assert.Equal(salesOrderToAssign, ((ISalesOrderSalesInvoice)salesOrderSalesInvoiceToCheck).SalesOrder = salesOrderToAssign);
            Assert.Equal(salesOrderToAssign, ((ISalesOrderSalesInvoice)salesOrderSalesInvoiceToCheck).SalesOrder);
            // Invoicing / SalesOrderSalesInvoice / SalesInvoiceID as int
            Assert.Equal(1, ((ISalesOrderSalesInvoice)salesOrderSalesInvoiceToCheck).SalesInvoiceID = 1);
            Assert.Equal(1, ((ISalesOrderSalesInvoice)salesOrderSalesInvoiceToCheck).SalesInvoiceID);
            // Invoicing / SalesOrderSalesInvoice / SalesInvoice as SalesInvoice
            Assert.Equal(salesInvoiceToAssign, ((ISalesOrderSalesInvoice)salesOrderSalesInvoiceToCheck).SalesInvoice = salesInvoiceToAssign);
            Assert.Equal(salesInvoiceToAssign, ((ISalesOrderSalesInvoice)salesOrderSalesInvoiceToCheck).SalesInvoice);
            #endregion
            #region Manufacturers
            // Manufacturers / Manufacturer / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, manufacturerToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, manufacturerToCheck.Notes);
            // Manufacturers / Manufacturer / Images as ICollection<ManufacturerImage>
            Assert.Equal(manufacturerImageCollectionToAssign, manufacturerToCheck.Images = manufacturerImageCollectionToAssign);
            Assert.Equal(manufacturerImageCollectionToAssign, manufacturerToCheck.Images);
            // Manufacturers / Manufacturer / Reviews as ICollection<Review>
            Assert.Equal(reviewCollectionToAssign, manufacturerToCheck.Reviews = reviewCollectionToAssign);
            Assert.Equal(reviewCollectionToAssign, manufacturerToCheck.Reviews);
            // Manufacturers / Manufacturer / Brands as ICollection<BrandManufacturer>
            Assert.Equal(brandManufacturerCollectionToAssign, manufacturerToCheck.Brands = brandManufacturerCollectionToAssign);
            Assert.Equal(brandManufacturerCollectionToAssign, manufacturerToCheck.Brands);
            // Manufacturers / Manufacturer / Franchises as ICollection<FranchiseManufacturer>
            Assert.Equal(franchiseManufacturerCollectionToAssign, manufacturerToCheck.Franchises = franchiseManufacturerCollectionToAssign);
            Assert.Equal(franchiseManufacturerCollectionToAssign, manufacturerToCheck.Franchises);
            // Manufacturers / Manufacturer / Products as ICollection<ManufacturerProduct>
            Assert.Equal(manufacturerProductCollectionToAssign, manufacturerToCheck.Products = manufacturerProductCollectionToAssign);
            Assert.Equal(manufacturerProductCollectionToAssign, manufacturerToCheck.Products);
            // Manufacturers / Manufacturer / Stores as ICollection<StoreManufacturer>
            Assert.Equal(storeManufacturerCollectionToAssign, manufacturerToCheck.Stores = storeManufacturerCollectionToAssign);
            Assert.Equal(storeManufacturerCollectionToAssign, manufacturerToCheck.Stores);
            // Manufacturers / Manufacturer / Vendors as ICollection<VendorManufacturer>
            Assert.Equal(vendorManufacturerCollectionToAssign, manufacturerToCheck.Vendors = vendorManufacturerCollectionToAssign);
            Assert.Equal(vendorManufacturerCollectionToAssign, manufacturerToCheck.Vendors);
            // Manufacturers / ManufacturerProduct / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturer)manufacturerProductToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturer)manufacturerProductToCheck).ManufacturerID);
            // Manufacturers / ManufacturerProduct / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)manufacturerProductToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)manufacturerProductToCheck).Manufacturer);
            // Manufacturers / ManufacturerProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)manufacturerProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)manufacturerProductToCheck).ProductID);
            // Manufacturers / ManufacturerProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)manufacturerProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)manufacturerProductToCheck).Product);
            // Manufacturers / ManufacturerProduct / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheMaster<Product>)manufacturerProductToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheMaster<Product>)manufacturerProductToCheck).ManufacturerID);
            // Manufacturers / ManufacturerProduct / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheMaster<Product>)manufacturerProductToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheMaster<Product>)manufacturerProductToCheck).Manufacturer);
            // Manufacturers / ManufacturerProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Manufacturer>)manufacturerProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Manufacturer>)manufacturerProductToCheck).ProductID);
            // Manufacturers / ManufacturerProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Manufacturer>)manufacturerProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Manufacturer>)manufacturerProductToCheck).Product);
            #endregion
            #region Media
            // Media / StoredFile / AccountFiles as ICollection<AccountFile>
            Assert.Equal(accountFileCollectionToAssign, storedFileToCheck.AccountFiles = accountFileCollectionToAssign);
            Assert.Equal(accountFileCollectionToAssign, storedFileToCheck.AccountFiles);
            // Media / StoredFile / CategoryFiles as ICollection<CategoryFile>
            Assert.Equal(categoryFileCollectionToAssign, storedFileToCheck.CategoryFiles = categoryFileCollectionToAssign);
            Assert.Equal(categoryFileCollectionToAssign, storedFileToCheck.CategoryFiles);
            #endregion
            #region Messaging
            // Messaging / Conversation / Users as ICollection<ConversationUser>
            Assert.Equal(conversationUserCollectionToAssign, conversationToCheck.Users = conversationUserCollectionToAssign);
            Assert.Equal(conversationUserCollectionToAssign, conversationToCheck.Users);
            // Messaging / Conversation / Messages as ICollection<Message>
            Assert.Equal(messageCollectionToAssign, conversationToCheck.Messages = messageCollectionToAssign);
            Assert.Equal(messageCollectionToAssign, conversationToCheck.Messages);
            // Messaging / ConversationUser / UserID as int
            Assert.Equal(1, ((IAmFilterableByUser)conversationUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUser)conversationUserToCheck).UserID);
            // Messaging / ConversationUser / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUser)conversationUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUser)conversationUserToCheck).User);
            // Messaging / ConversationUser / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Conversation>)conversationUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Conversation>)conversationUserToCheck).UserID);
            // Messaging / ConversationUser / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Conversation>)conversationUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Conversation>)conversationUserToCheck).User);
            // Messaging / EmailQueue / EmailQueueAttachments as ICollection<EmailQueueAttachment>
            Assert.Equal(emailQueueAttachmentCollectionToAssign, emailQueueToCheck.EmailQueueAttachments = emailQueueAttachmentCollectionToAssign);
            Assert.Equal(emailQueueAttachmentCollectionToAssign, emailQueueToCheck.EmailQueueAttachments);
            // Messaging / Message / MessageRecipients as ICollection<MessageRecipient>
            Assert.Equal(messageRecipientCollectionToAssign, messageToCheck.MessageRecipients = messageRecipientCollectionToAssign);
            Assert.Equal(messageRecipientCollectionToAssign, messageToCheck.MessageRecipients);
            // Messaging / Message / MessageAttachments as ICollection<MessageAttachment>
            Assert.Equal(messageAttachmentCollectionToAssign, messageToCheck.MessageAttachments = messageAttachmentCollectionToAssign);
            Assert.Equal(messageAttachmentCollectionToAssign, messageToCheck.MessageAttachments);
            // Messaging / MessageRecipient / UserID as int
            Assert.Equal(1, ((IAmFilterableByUser)messageRecipientToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUser)messageRecipientToCheck).UserID);
            // Messaging / MessageRecipient / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUser)messageRecipientToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUser)messageRecipientToCheck).User);
            // Messaging / MessageRecipient / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Message>)messageRecipientToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Message>)messageRecipientToCheck).UserID);
            // Messaging / MessageRecipient / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Message>)messageRecipientToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Message>)messageRecipientToCheck).User);
            // Messaging / MessageRecipient / EmailQueues as ICollection<EmailQueue>
            Assert.Equal(emailQueueCollectionToAssign, messageRecipientToCheck.EmailQueues = emailQueueCollectionToAssign);
            Assert.Equal(emailQueueCollectionToAssign, messageRecipientToCheck.EmailQueues);
            #endregion
            #region Ordering
            // Ordering / SalesOrder / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, salesOrderToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, salesOrderToCheck.Notes);
            // Ordering / SalesOrder / SalesOrderPayments as ICollection<SalesOrderPayment>
            Assert.Equal(salesOrderPaymentCollectionToAssign, salesOrderToCheck.SalesOrderPayments = salesOrderPaymentCollectionToAssign);
            Assert.Equal(salesOrderPaymentCollectionToAssign, salesOrderToCheck.SalesOrderPayments);
            // Ordering / SalesOrder / AssociatedSalesQuotes as ICollection<SalesQuoteSalesOrder>
            Assert.Equal(salesQuoteSalesOrderCollectionToAssign, salesOrderToCheck.AssociatedSalesQuotes = salesQuoteSalesOrderCollectionToAssign);
            Assert.Equal(salesQuoteSalesOrderCollectionToAssign, salesOrderToCheck.AssociatedSalesQuotes);
            // Ordering / SalesOrder / AssociatedSalesReturns as ICollection<SalesReturnSalesOrder>
            Assert.Equal(salesReturnSalesOrderCollectionToAssign, salesOrderToCheck.AssociatedSalesReturns = salesReturnSalesOrderCollectionToAssign);
            Assert.Equal(salesReturnSalesOrderCollectionToAssign, salesOrderToCheck.AssociatedSalesReturns);
            // Ordering / SalesOrder / AssociatedSalesInvoices as ICollection<SalesOrderSalesInvoice>
            Assert.Equal(salesOrderSalesInvoiceCollectionToAssign, salesOrderToCheck.AssociatedSalesInvoices = salesOrderSalesInvoiceCollectionToAssign);
            Assert.Equal(salesOrderSalesInvoiceCollectionToAssign, salesOrderToCheck.AssociatedSalesInvoices);
            // Ordering / SalesOrder / AssociatedPurchaseOrders as ICollection<SalesOrderPurchaseOrder>
            Assert.Equal(salesOrderPurchaseOrderCollectionToAssign, salesOrderToCheck.AssociatedPurchaseOrders = salesOrderPurchaseOrderCollectionToAssign);
            Assert.Equal(salesOrderPurchaseOrderCollectionToAssign, salesOrderToCheck.AssociatedPurchaseOrders);
            // Ordering / SalesOrderContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBase)salesOrderContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBase)salesOrderContactToCheck).ContactID);
            // Ordering / SalesOrderContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBase)salesOrderContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBase)salesOrderContactToCheck).Contact);
            #endregion
            #region Payments
            // Payments / Membership / MembershipLevels as ICollection<MembershipLevel>
            Assert.Equal(membershipLevelCollectionToAssign, membershipToCheck.MembershipLevels = membershipLevelCollectionToAssign);
            Assert.Equal(membershipLevelCollectionToAssign, membershipToCheck.MembershipLevels);
            // Payments / Membership / MembershipRepeatTypes as ICollection<MembershipRepeatType>
            Assert.Equal(membershipRepeatTypeCollectionToAssign, membershipToCheck.MembershipRepeatTypes = membershipRepeatTypeCollectionToAssign);
            Assert.Equal(membershipRepeatTypeCollectionToAssign, membershipToCheck.MembershipRepeatTypes);
            // Payments / MembershipAdZoneAccess / MembershipAdZoneAccessByLevels as ICollection<MembershipAdZoneAccessByLevel>
            Assert.Equal(membershipAdZoneAccessByLevelCollectionToAssign, membershipAdZoneAccessToCheck.MembershipAdZoneAccessByLevels = membershipAdZoneAccessByLevelCollectionToAssign);
            Assert.Equal(membershipAdZoneAccessByLevelCollectionToAssign, membershipAdZoneAccessToCheck.MembershipAdZoneAccessByLevels);
            // Payments / MembershipLevel / MembershipAdZoneAccessByLevels as ICollection<MembershipAdZoneAccessByLevel>
            Assert.Equal(membershipAdZoneAccessByLevelCollectionToAssign, membershipLevelToCheck.MembershipAdZoneAccessByLevels = membershipAdZoneAccessByLevelCollectionToAssign);
            Assert.Equal(membershipAdZoneAccessByLevelCollectionToAssign, membershipLevelToCheck.MembershipAdZoneAccessByLevels);
            // Payments / RepeatType / SubscriptionTypeRepeatTypes as ICollection<SubscriptionTypeRepeatType>
            Assert.Equal(subscriptionTypeRepeatTypeCollectionToAssign, repeatTypeToCheck.SubscriptionTypeRepeatTypes = subscriptionTypeRepeatTypeCollectionToAssign);
            Assert.Equal(subscriptionTypeRepeatTypeCollectionToAssign, repeatTypeToCheck.SubscriptionTypeRepeatTypes);
            // Payments / Subscription / SubscriptionHistories as ICollection<SubscriptionHistory>
            Assert.Equal(subscriptionHistoryCollectionToAssign, subscriptionToCheck.SubscriptionHistories = subscriptionHistoryCollectionToAssign);
            Assert.Equal(subscriptionHistoryCollectionToAssign, subscriptionToCheck.SubscriptionHistories);
            // Payments / Subscription / StoreSubscriptions as ICollection<StoreSubscription>
            Assert.Equal(storeSubscriptionCollectionToAssign, subscriptionToCheck.StoreSubscriptions = storeSubscriptionCollectionToAssign);
            Assert.Equal(storeSubscriptionCollectionToAssign, subscriptionToCheck.StoreSubscriptions);
            // Payments / SubscriptionType / ProductSubscriptionTypes as ICollection<ProductSubscriptionType>
            Assert.Equal(productSubscriptionTypeCollectionToAssign, subscriptionTypeToCheck.ProductSubscriptionTypes = productSubscriptionTypeCollectionToAssign);
            Assert.Equal(productSubscriptionTypeCollectionToAssign, subscriptionTypeToCheck.ProductSubscriptionTypes);
            // Payments / SubscriptionType / SubscriptionTypeRepeatTypes as ICollection<SubscriptionTypeRepeatType>
            Assert.Equal(subscriptionTypeRepeatTypeCollectionToAssign, subscriptionTypeToCheck.SubscriptionTypeRepeatTypes = subscriptionTypeRepeatTypeCollectionToAssign);
            Assert.Equal(subscriptionTypeRepeatTypeCollectionToAssign, subscriptionTypeToCheck.SubscriptionTypeRepeatTypes);
            #endregion
            #region Pricing
            // Pricing / PricePoint / StoreAccounts as ICollection<StoreAccount>
            Assert.Equal(storeAccountCollectionToAssign, pricePointToCheck.StoreAccounts = storeAccountCollectionToAssign);
            Assert.Equal(storeAccountCollectionToAssign, pricePointToCheck.StoreAccounts);
            // Pricing / PriceRule / Products as ICollection<PriceRuleProduct>
            Assert.Equal(priceRuleProductCollectionToAssign, priceRuleToCheck.Products = priceRuleProductCollectionToAssign);
            Assert.Equal(priceRuleProductCollectionToAssign, priceRuleToCheck.Products);
            // Pricing / PriceRule / Brands as ICollection<PriceRuleBrand>
            Assert.Equal(priceRuleBrandCollectionToAssign, priceRuleToCheck.Brands = priceRuleBrandCollectionToAssign);
            Assert.Equal(priceRuleBrandCollectionToAssign, priceRuleToCheck.Brands);
            // Pricing / PriceRule / Franchises as ICollection<PriceRuleFranchise>
            Assert.Equal(priceRuleFranchiseCollectionToAssign, priceRuleToCheck.Franchises = priceRuleFranchiseCollectionToAssign);
            Assert.Equal(priceRuleFranchiseCollectionToAssign, priceRuleToCheck.Franchises);
            // Pricing / PriceRule / Stores as ICollection<PriceRuleStore>
            Assert.Equal(priceRuleStoreCollectionToAssign, priceRuleToCheck.Stores = priceRuleStoreCollectionToAssign);
            Assert.Equal(priceRuleStoreCollectionToAssign, priceRuleToCheck.Stores);
            // Pricing / PriceRule / Accounts as ICollection<PriceRuleAccount>
            Assert.Equal(priceRuleAccountCollectionToAssign, priceRuleToCheck.Accounts = priceRuleAccountCollectionToAssign);
            Assert.Equal(priceRuleAccountCollectionToAssign, priceRuleToCheck.Accounts);
            // Pricing / PriceRule / Vendors as ICollection<PriceRuleVendor>
            Assert.Equal(priceRuleVendorCollectionToAssign, priceRuleToCheck.Vendors = priceRuleVendorCollectionToAssign);
            Assert.Equal(priceRuleVendorCollectionToAssign, priceRuleToCheck.Vendors);
            // Pricing / PriceRule / Manufacturers as ICollection<PriceRuleManufacturer>
            Assert.Equal(priceRuleManufacturerCollectionToAssign, priceRuleToCheck.Manufacturers = priceRuleManufacturerCollectionToAssign);
            Assert.Equal(priceRuleManufacturerCollectionToAssign, priceRuleToCheck.Manufacturers);
            // Pricing / PriceRule / PriceRuleCountries as ICollection<PriceRuleCountry>
            Assert.Equal(priceRuleCountryCollectionToAssign, priceRuleToCheck.PriceRuleCountries = priceRuleCountryCollectionToAssign);
            Assert.Equal(priceRuleCountryCollectionToAssign, priceRuleToCheck.PriceRuleCountries);
            // Pricing / PriceRule / PriceRuleUserRoles as ICollection<PriceRuleUserRole>
            Assert.Equal(priceRuleUserRoleCollectionToAssign, priceRuleToCheck.PriceRuleUserRoles = priceRuleUserRoleCollectionToAssign);
            Assert.Equal(priceRuleUserRoleCollectionToAssign, priceRuleToCheck.PriceRuleUserRoles);
            // Pricing / PriceRule / PriceRuleCategories as ICollection<PriceRuleCategory>
            Assert.Equal(priceRuleCategoryCollectionToAssign, priceRuleToCheck.PriceRuleCategories = priceRuleCategoryCollectionToAssign);
            Assert.Equal(priceRuleCategoryCollectionToAssign, priceRuleToCheck.PriceRuleCategories);
            // Pricing / PriceRule / PriceRuleAccountTypes as ICollection<PriceRuleAccountType>
            Assert.Equal(priceRuleAccountTypeCollectionToAssign, priceRuleToCheck.PriceRuleAccountTypes = priceRuleAccountTypeCollectionToAssign);
            Assert.Equal(priceRuleAccountTypeCollectionToAssign, priceRuleToCheck.PriceRuleAccountTypes);
            // Pricing / PriceRule / PriceRuleProductTypes as ICollection<PriceRuleProductType>
            Assert.Equal(priceRuleProductTypeCollectionToAssign, priceRuleToCheck.PriceRuleProductTypes = priceRuleProductTypeCollectionToAssign);
            Assert.Equal(priceRuleProductTypeCollectionToAssign, priceRuleToCheck.PriceRuleProductTypes);
            // Pricing / PriceRuleAccount / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)priceRuleAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)priceRuleAccountToCheck).AccountID);
            // Pricing / PriceRuleAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)priceRuleAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)priceRuleAccountToCheck).Account);
            // Pricing / PriceRuleAccount / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<PriceRule>)priceRuleAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<PriceRule>)priceRuleAccountToCheck).AccountID);
            // Pricing / PriceRuleAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<PriceRule>)priceRuleAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<PriceRule>)priceRuleAccountToCheck).Account);
            // Pricing / PriceRuleBrand / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrand)priceRuleBrandToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrand)priceRuleBrandToCheck).BrandID);
            // Pricing / PriceRuleBrand / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)priceRuleBrandToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrand)priceRuleBrandToCheck).Brand);
            // Pricing / PriceRuleBrand / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheSlave<PriceRule>)priceRuleBrandToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheSlave<PriceRule>)priceRuleBrandToCheck).BrandID);
            // Pricing / PriceRuleBrand / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheSlave<PriceRule>)priceRuleBrandToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheSlave<PriceRule>)priceRuleBrandToCheck).Brand);
            // Pricing / PriceRuleCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategory)priceRuleCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategory)priceRuleCategoryToCheck).CategoryID);
            // Pricing / PriceRuleCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)priceRuleCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)priceRuleCategoryToCheck).Category);
            // Pricing / PriceRuleCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<PriceRule>)priceRuleCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<PriceRule>)priceRuleCategoryToCheck).CategoryID);
            // Pricing / PriceRuleCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<PriceRule>)priceRuleCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<PriceRule>)priceRuleCategoryToCheck).Category);
            // Pricing / PriceRuleFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchise)priceRuleFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchise)priceRuleFranchiseToCheck).FranchiseID);
            // Pricing / PriceRuleFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)priceRuleFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchise)priceRuleFranchiseToCheck).Franchise);
            // Pricing / PriceRuleFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<PriceRule>)priceRuleFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<PriceRule>)priceRuleFranchiseToCheck).FranchiseID);
            // Pricing / PriceRuleFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<PriceRule>)priceRuleFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave<PriceRule>)priceRuleFranchiseToCheck).Franchise);
            // Pricing / PriceRuleManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturer)priceRuleManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturer)priceRuleManufacturerToCheck).ManufacturerID);
            // Pricing / PriceRuleManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)priceRuleManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)priceRuleManufacturerToCheck).Manufacturer);
            // Pricing / PriceRuleManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<PriceRule>)priceRuleManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<PriceRule>)priceRuleManufacturerToCheck).ManufacturerID);
            // Pricing / PriceRuleManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<PriceRule>)priceRuleManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<PriceRule>)priceRuleManufacturerToCheck).Manufacturer);
            // Pricing / PriceRuleProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)priceRuleProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)priceRuleProductToCheck).ProductID);
            // Pricing / PriceRuleProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)priceRuleProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)priceRuleProductToCheck).Product);
            // Pricing / PriceRuleProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<PriceRule>)priceRuleProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<PriceRule>)priceRuleProductToCheck).ProductID);
            // Pricing / PriceRuleProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<PriceRule>)priceRuleProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<PriceRule>)priceRuleProductToCheck).Product);
            // Pricing / PriceRuleStore / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)priceRuleStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)priceRuleStoreToCheck).StoreID);
            // Pricing / PriceRuleStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)priceRuleStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)priceRuleStoreToCheck).Store);
            // Pricing / PriceRuleStore / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<PriceRule>)priceRuleStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<PriceRule>)priceRuleStoreToCheck).StoreID);
            // Pricing / PriceRuleStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<PriceRule>)priceRuleStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlave<PriceRule>)priceRuleStoreToCheck).Store);
            // Pricing / PriceRuleVendor / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendor)priceRuleVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendor)priceRuleVendorToCheck).VendorID);
            // Pricing / PriceRuleVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)priceRuleVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)priceRuleVendorToCheck).Vendor);
            // Pricing / PriceRuleVendor / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<PriceRule>)priceRuleVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<PriceRule>)priceRuleVendorToCheck).VendorID);
            // Pricing / PriceRuleVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<PriceRule>)priceRuleVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<PriceRule>)priceRuleVendorToCheck).Vendor);
            #endregion
            #region Products
            // Products / Product / Images as ICollection<ProductImage>
            Assert.Equal(productImageCollectionToAssign, productToCheck.Images = productImageCollectionToAssign);
            Assert.Equal(productImageCollectionToAssign, productToCheck.Images);
            // Products / Product / StoredFiles as ICollection<ProductFile>
            Assert.Equal(productFileCollectionToAssign, productToCheck.StoredFiles = productFileCollectionToAssign);
            Assert.Equal(productFileCollectionToAssign, productToCheck.StoredFiles);
            // Products / Product / Accounts as ICollection<AccountProduct>
            Assert.Equal(accountProductCollectionToAssign, productToCheck.Accounts = accountProductCollectionToAssign);
            Assert.Equal(accountProductCollectionToAssign, productToCheck.Accounts);
            // Products / Product / Brands as ICollection<BrandProduct>
            Assert.Equal(brandProductCollectionToAssign, productToCheck.Brands = brandProductCollectionToAssign);
            Assert.Equal(brandProductCollectionToAssign, productToCheck.Brands);
            // Products / Product / Categories as ICollection<ProductCategory>
            Assert.Equal(productCategoryCollectionToAssign, productToCheck.Categories = productCategoryCollectionToAssign);
            Assert.Equal(productCategoryCollectionToAssign, productToCheck.Categories);
            // Products / Product / Franchises as ICollection<FranchiseProduct>
            Assert.Equal(franchiseProductCollectionToAssign, productToCheck.Franchises = franchiseProductCollectionToAssign);
            Assert.Equal(franchiseProductCollectionToAssign, productToCheck.Franchises);
            // Products / Product / Manufacturers as ICollection<ManufacturerProduct>
            Assert.Equal(manufacturerProductCollectionToAssign, productToCheck.Manufacturers = manufacturerProductCollectionToAssign);
            Assert.Equal(manufacturerProductCollectionToAssign, productToCheck.Manufacturers);
            // Products / Product / Stores as ICollection<StoreProduct>
            Assert.Equal(storeProductCollectionToAssign, productToCheck.Stores = storeProductCollectionToAssign);
            Assert.Equal(storeProductCollectionToAssign, productToCheck.Stores);
            // Products / Product / Vendors as ICollection<VendorProduct>
            Assert.Equal(vendorProductCollectionToAssign, productToCheck.Vendors = vendorProductCollectionToAssign);
            Assert.Equal(vendorProductCollectionToAssign, productToCheck.Vendors);
            // Products / Product / ProductAssociations as ICollection<ProductAssociation>
            Assert.Equal(productAssociationCollectionToAssign, productToCheck.ProductAssociations = productAssociationCollectionToAssign);
            Assert.Equal(productAssociationCollectionToAssign, productToCheck.ProductAssociations);
            // Products / Product / ProductsAssociatedWith as ICollection<ProductAssociation>
            Assert.Equal(productAssociationCollectionToAssign, productToCheck.ProductsAssociatedWith = productAssociationCollectionToAssign);
            Assert.Equal(productAssociationCollectionToAssign, productToCheck.ProductsAssociatedWith);
            // Products / Product / ProductMembershipLevels as ICollection<ProductMembershipLevel>
            Assert.Equal(productMembershipLevelCollectionToAssign, productToCheck.ProductMembershipLevels = productMembershipLevelCollectionToAssign);
            Assert.Equal(productMembershipLevelCollectionToAssign, productToCheck.ProductMembershipLevels);
            // Products / Product / ProductDownloads as ICollection<ProductDownload>
            Assert.Equal(productDownloadCollectionToAssign, productToCheck.ProductDownloads = productDownloadCollectionToAssign);
            Assert.Equal(productDownloadCollectionToAssign, productToCheck.ProductDownloads);
            // Products / Product / ProductShipCarrierMethods as ICollection<ProductShipCarrierMethod>
            Assert.Equal(productShipCarrierMethodCollectionToAssign, productToCheck.ProductShipCarrierMethods = productShipCarrierMethodCollectionToAssign);
            Assert.Equal(productShipCarrierMethodCollectionToAssign, productToCheck.ProductShipCarrierMethods);
            // Products / Product / ProductSubscriptionTypes as ICollection<ProductSubscriptionType>
            Assert.Equal(productSubscriptionTypeCollectionToAssign, productToCheck.ProductSubscriptionTypes = productSubscriptionTypeCollectionToAssign);
            Assert.Equal(productSubscriptionTypeCollectionToAssign, productToCheck.ProductSubscriptionTypes);
            // Products / Product / ProductRestrictions as ICollection<ProductRestriction>
            Assert.Equal(productRestrictionCollectionToAssign, productToCheck.ProductRestrictions = productRestrictionCollectionToAssign);
            Assert.Equal(productRestrictionCollectionToAssign, productToCheck.ProductRestrictions);
            // Products / Product / ProductNotifications as ICollection<ProductNotification>
            Assert.Equal(productNotificationCollectionToAssign, productToCheck.ProductNotifications = productNotificationCollectionToAssign);
            Assert.Equal(productNotificationCollectionToAssign, productToCheck.ProductNotifications);
            // Products / Product / Reviews as ICollection<Review>
            Assert.Equal(reviewCollectionToAssign, productToCheck.Reviews = reviewCollectionToAssign);
            Assert.Equal(reviewCollectionToAssign, productToCheck.Reviews);
            // Products / Product / ProductInventoryLocationSections as ICollection<ProductInventoryLocationSection>
            Assert.Equal(productInventoryLocationSectionCollectionToAssign, productToCheck.ProductInventoryLocationSections = productInventoryLocationSectionCollectionToAssign);
            Assert.Equal(productInventoryLocationSectionCollectionToAssign, productToCheck.ProductInventoryLocationSections);
            // Products / Product / ProductPricePoints as ICollection<ProductPricePoint>
            Assert.Equal(productPricePointCollectionToAssign, productToCheck.ProductPricePoints = productPricePointCollectionToAssign);
            Assert.Equal(productPricePointCollectionToAssign, productToCheck.ProductPricePoints);
            // Products / Product / CartItems as ICollection<CartItem>
            Assert.Equal(cartItemCollectionToAssign, productToCheck.CartItems = cartItemCollectionToAssign);
            Assert.Equal(cartItemCollectionToAssign, productToCheck.CartItems);
            // Products / Product / SalesOrderItems as ICollection<SalesOrderItem>
            Assert.Equal(salesOrderItemCollectionToAssign, productToCheck.SalesOrderItems = salesOrderItemCollectionToAssign);
            Assert.Equal(salesOrderItemCollectionToAssign, productToCheck.SalesOrderItems);
            // Products / Product / SalesReturnItems as ICollection<SalesReturnItem>
            Assert.Equal(salesReturnItemCollectionToAssign, productToCheck.SalesReturnItems = salesReturnItemCollectionToAssign);
            Assert.Equal(salesReturnItemCollectionToAssign, productToCheck.SalesReturnItems);
            // Products / Product / DiscountProducts as ICollection<DiscountProduct>
            Assert.Equal(discountProductCollectionToAssign, productToCheck.DiscountProducts = discountProductCollectionToAssign);
            Assert.Equal(discountProductCollectionToAssign, productToCheck.DiscountProducts);
            // Products / ProductCategory / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)productCategoryToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)productCategoryToCheck).ProductID);
            // Products / ProductCategory / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)productCategoryToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)productCategoryToCheck).Product);
            // Products / ProductCategory / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMaster<Category>)productCategoryToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMaster<Category>)productCategoryToCheck).ProductID);
            // Products / ProductCategory / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMaster<Category>)productCategoryToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMaster<Category>)productCategoryToCheck).Product);
            // Products / ProductCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategory)productCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategory)productCategoryToCheck).CategoryID);
            // Products / ProductCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)productCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)productCategoryToCheck).Category);
            // Products / ProductCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Product>)productCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Product>)productCategoryToCheck).CategoryID);
            // Products / ProductCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Product>)productCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Product>)productCategoryToCheck).Category);
            // Products / ProductInventoryLocationSection / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)productInventoryLocationSectionToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)productInventoryLocationSectionToCheck).ProductID);
            // Products / ProductInventoryLocationSection / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)productInventoryLocationSectionToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)productInventoryLocationSectionToCheck).Product);
            // Products / ProductInventoryLocationSection / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMaster<InventoryLocationSection>)productInventoryLocationSectionToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMaster<InventoryLocationSection>)productInventoryLocationSectionToCheck).ProductID);
            // Products / ProductInventoryLocationSection / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMaster<InventoryLocationSection>)productInventoryLocationSectionToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMaster<InventoryLocationSection>)productInventoryLocationSectionToCheck).Product);
            // Products / ProductMembershipLevel / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)productMembershipLevelToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)productMembershipLevelToCheck).ProductID);
            // Products / ProductMembershipLevel / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)productMembershipLevelToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)productMembershipLevelToCheck).Product);
            // Products / ProductMembershipLevel / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMaster<MembershipLevel>)productMembershipLevelToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMaster<MembershipLevel>)productMembershipLevelToCheck).ProductID);
            // Products / ProductMembershipLevel / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMaster<MembershipLevel>)productMembershipLevelToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMaster<MembershipLevel>)productMembershipLevelToCheck).Product);
            // Products / ProductMembershipLevel / Subscriptions as ICollection<Subscription>
            Assert.Equal(subscriptionCollectionToAssign, productMembershipLevelToCheck.Subscriptions = subscriptionCollectionToAssign);
            Assert.Equal(subscriptionCollectionToAssign, productMembershipLevelToCheck.Subscriptions);
            // Products / ProductPricePoint / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)productPricePointToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)productPricePointToCheck).ProductID);
            // Products / ProductPricePoint / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)productPricePointToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)productPricePointToCheck).Product);
            // Products / ProductPricePoint / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMaster<PricePoint>)productPricePointToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMaster<PricePoint>)productPricePointToCheck).ProductID);
            // Products / ProductPricePoint / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMaster<PricePoint>)productPricePointToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMaster<PricePoint>)productPricePointToCheck).Product);
            // Products / ProductShipCarrierMethod / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)productShipCarrierMethodToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)productShipCarrierMethodToCheck).ProductID);
            // Products / ProductShipCarrierMethod / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)productShipCarrierMethodToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)productShipCarrierMethodToCheck).Product);
            // Products / ProductShipCarrierMethod / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMaster<ShipCarrierMethod>)productShipCarrierMethodToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMaster<ShipCarrierMethod>)productShipCarrierMethodToCheck).ProductID);
            // Products / ProductShipCarrierMethod / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMaster<ShipCarrierMethod>)productShipCarrierMethodToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMaster<ShipCarrierMethod>)productShipCarrierMethodToCheck).Product);
            // Products / ProductSubscriptionType / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)productSubscriptionTypeToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)productSubscriptionTypeToCheck).ProductID);
            // Products / ProductSubscriptionType / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)productSubscriptionTypeToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)productSubscriptionTypeToCheck).Product);
            // Products / ProductSubscriptionType / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMaster<SubscriptionType>)productSubscriptionTypeToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMaster<SubscriptionType>)productSubscriptionTypeToCheck).ProductID);
            // Products / ProductSubscriptionType / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMaster<SubscriptionType>)productSubscriptionTypeToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMaster<SubscriptionType>)productSubscriptionTypeToCheck).Product);
            #endregion
            #region Purchasing
            // Purchasing / PurchaseOrder / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, purchaseOrderToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, purchaseOrderToCheck.Notes);
            // Purchasing / PurchaseOrder / AssociatedSalesOrders as ICollection<SalesOrderPurchaseOrder>
            Assert.Equal(salesOrderPurchaseOrderCollectionToAssign, purchaseOrderToCheck.AssociatedSalesOrders = salesOrderPurchaseOrderCollectionToAssign);
            Assert.Equal(salesOrderPurchaseOrderCollectionToAssign, purchaseOrderToCheck.AssociatedSalesOrders);
            // Purchasing / PurchaseOrderContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBase)purchaseOrderContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBase)purchaseOrderContactToCheck).ContactID);
            // Purchasing / PurchaseOrderContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBase)purchaseOrderContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBase)purchaseOrderContactToCheck).Contact);
            // Purchasing / SalesOrderPurchaseOrder / SalesOrderID as int
            Assert.Equal(1, ((ISalesOrderPurchaseOrder)salesOrderPurchaseOrderToCheck).SalesOrderID = 1);
            Assert.Equal(1, ((ISalesOrderPurchaseOrder)salesOrderPurchaseOrderToCheck).SalesOrderID);
            // Purchasing / SalesOrderPurchaseOrder / SalesOrder as SalesOrder
            Assert.Equal(salesOrderToAssign, ((ISalesOrderPurchaseOrder)salesOrderPurchaseOrderToCheck).SalesOrder = salesOrderToAssign);
            Assert.Equal(salesOrderToAssign, ((ISalesOrderPurchaseOrder)salesOrderPurchaseOrderToCheck).SalesOrder);
            // Purchasing / SalesOrderPurchaseOrder / PurchaseOrderID as int
            Assert.Equal(1, ((ISalesOrderPurchaseOrder)salesOrderPurchaseOrderToCheck).PurchaseOrderID = 1);
            Assert.Equal(1, ((ISalesOrderPurchaseOrder)salesOrderPurchaseOrderToCheck).PurchaseOrderID);
            // Purchasing / SalesOrderPurchaseOrder / PurchaseOrder as PurchaseOrder
            Assert.Equal(purchaseOrderToAssign, ((ISalesOrderPurchaseOrder)salesOrderPurchaseOrderToCheck).PurchaseOrder = purchaseOrderToAssign);
            Assert.Equal(purchaseOrderToAssign, ((ISalesOrderPurchaseOrder)salesOrderPurchaseOrderToCheck).PurchaseOrder);
            #endregion
            #region Questionnaire
            // Questionnaire / Question / Options as ICollection<QuestionOption>
            Assert.Equal(questionOptionCollectionToAssign, questionToCheck.Options = questionOptionCollectionToAssign);
            Assert.Equal(questionOptionCollectionToAssign, questionToCheck.Options);
            // Questionnaire / Question / FollowUpQuestionOptions as ICollection<QuestionOption>
            Assert.Equal(questionOptionCollectionToAssign, questionToCheck.FollowUpQuestionOptions = questionOptionCollectionToAssign);
            Assert.Equal(questionOptionCollectionToAssign, questionToCheck.FollowUpQuestionOptions);
            // Questionnaire / Question / ParentQuestions as ICollection<Question>
            Assert.Equal(questionCollectionToAssign, questionToCheck.ParentQuestions = questionCollectionToAssign);
            Assert.Equal(questionCollectionToAssign, questionToCheck.ParentQuestions);
            // Questionnaire / Question / Answers as ICollection<Answer>
            Assert.Equal(answerCollectionToAssign, questionToCheck.Answers = answerCollectionToAssign);
            Assert.Equal(answerCollectionToAssign, questionToCheck.Answers);
            // Questionnaire / QuestionOption / Answers as ICollection<Answer>
            Assert.Equal(answerCollectionToAssign, questionOptionToCheck.Answers = answerCollectionToAssign);
            Assert.Equal(answerCollectionToAssign, questionOptionToCheck.Answers);
            #endregion
            #region Quoting
            // Quoting / SalesQuote / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, salesQuoteToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, salesQuoteToCheck.Notes);
            // Quoting / SalesQuote / AssociatedSalesOrders as ICollection<SalesQuoteSalesOrder>
            Assert.Equal(salesQuoteSalesOrderCollectionToAssign, salesQuoteToCheck.AssociatedSalesOrders = salesQuoteSalesOrderCollectionToAssign);
            Assert.Equal(salesQuoteSalesOrderCollectionToAssign, salesQuoteToCheck.AssociatedSalesOrders);
            // Quoting / SalesQuote / SalesQuoteCategories as ICollection<SalesQuoteCategory>
            Assert.Equal(salesQuoteCategoryCollectionToAssign, salesQuoteToCheck.SalesQuoteCategories = salesQuoteCategoryCollectionToAssign);
            Assert.Equal(salesQuoteCategoryCollectionToAssign, salesQuoteToCheck.SalesQuoteCategories);
            // Quoting / SalesQuoteCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategory)salesQuoteCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategory)salesQuoteCategoryToCheck).CategoryID);
            // Quoting / SalesQuoteCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)salesQuoteCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)salesQuoteCategoryToCheck).Category);
            // Quoting / SalesQuoteCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<SalesQuote>)salesQuoteCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<SalesQuote>)salesQuoteCategoryToCheck).CategoryID);
            // Quoting / SalesQuoteCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<SalesQuote>)salesQuoteCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<SalesQuote>)salesQuoteCategoryToCheck).Category);
            // Quoting / SalesQuoteContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBase)salesQuoteContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBase)salesQuoteContactToCheck).ContactID);
            // Quoting / SalesQuoteContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBase)salesQuoteContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBase)salesQuoteContactToCheck).Contact);
            // Quoting / SalesQuoteSalesOrder / SalesQuoteID as int
            Assert.Equal(1, ((ISalesQuoteSalesOrder)salesQuoteSalesOrderToCheck).SalesQuoteID = 1);
            Assert.Equal(1, ((ISalesQuoteSalesOrder)salesQuoteSalesOrderToCheck).SalesQuoteID);
            // Quoting / SalesQuoteSalesOrder / SalesQuote as SalesQuote
            Assert.Equal(salesQuoteToAssign, ((ISalesQuoteSalesOrder)salesQuoteSalesOrderToCheck).SalesQuote = salesQuoteToAssign);
            Assert.Equal(salesQuoteToAssign, ((ISalesQuoteSalesOrder)salesQuoteSalesOrderToCheck).SalesQuote);
            // Quoting / SalesQuoteSalesOrder / SalesOrderID as int
            Assert.Equal(1, ((ISalesQuoteSalesOrder)salesQuoteSalesOrderToCheck).SalesOrderID = 1);
            Assert.Equal(1, ((ISalesQuoteSalesOrder)salesQuoteSalesOrderToCheck).SalesOrderID);
            // Quoting / SalesQuoteSalesOrder / SalesOrder as SalesOrder
            Assert.Equal(salesOrderToAssign, ((ISalesQuoteSalesOrder)salesQuoteSalesOrderToCheck).SalesOrder = salesOrderToAssign);
            Assert.Equal(salesOrderToAssign, ((ISalesQuoteSalesOrder)salesQuoteSalesOrderToCheck).SalesOrder);
            #endregion
            #region Reporting
            #endregion
            #region Returning
            // Returning / SalesReturn / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, salesReturnToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, salesReturnToCheck.Notes);
            // Returning / SalesReturn / SalesReturnPayments as ICollection<SalesReturnPayment>
            Assert.Equal(salesReturnPaymentCollectionToAssign, salesReturnToCheck.SalesReturnPayments = salesReturnPaymentCollectionToAssign);
            Assert.Equal(salesReturnPaymentCollectionToAssign, salesReturnToCheck.SalesReturnPayments);
            // Returning / SalesReturn / AssociatedSalesOrders as ICollection<SalesReturnSalesOrder>
            Assert.Equal(salesReturnSalesOrderCollectionToAssign, salesReturnToCheck.AssociatedSalesOrders = salesReturnSalesOrderCollectionToAssign);
            Assert.Equal(salesReturnSalesOrderCollectionToAssign, salesReturnToCheck.AssociatedSalesOrders);
            // Returning / SalesReturnContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBase)salesReturnContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBase)salesReturnContactToCheck).ContactID);
            // Returning / SalesReturnContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBase)salesReturnContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBase)salesReturnContactToCheck).Contact);
            // Returning / SalesReturnSalesOrder / SalesReturnID as int
            Assert.Equal(1, ((ISalesReturnSalesOrder)salesReturnSalesOrderToCheck).SalesReturnID = 1);
            Assert.Equal(1, ((ISalesReturnSalesOrder)salesReturnSalesOrderToCheck).SalesReturnID);
            // Returning / SalesReturnSalesOrder / SalesReturn as SalesReturn
            Assert.Equal(salesReturnToAssign, ((ISalesReturnSalesOrder)salesReturnSalesOrderToCheck).SalesReturn = salesReturnToAssign);
            Assert.Equal(salesReturnToAssign, ((ISalesReturnSalesOrder)salesReturnSalesOrderToCheck).SalesReturn);
            // Returning / SalesReturnSalesOrder / SalesOrderID as int
            Assert.Equal(1, ((ISalesReturnSalesOrder)salesReturnSalesOrderToCheck).SalesOrderID = 1);
            Assert.Equal(1, ((ISalesReturnSalesOrder)salesReturnSalesOrderToCheck).SalesOrderID);
            // Returning / SalesReturnSalesOrder / SalesOrder as SalesOrder
            Assert.Equal(salesOrderToAssign, ((ISalesReturnSalesOrder)salesReturnSalesOrderToCheck).SalesOrder = salesOrderToAssign);
            Assert.Equal(salesOrderToAssign, ((ISalesReturnSalesOrder)salesReturnSalesOrderToCheck).SalesOrder);
            #endregion
            #region Reviews
            #endregion
            #region Sales
            // Sales / SalesGroup / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, salesGroupToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, salesGroupToCheck.Notes);
            // Sales / SalesGroup / SalesQuoteRequestMasters as ICollection<SalesQuote>
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteRequestMasters = salesQuoteCollectionToAssign);
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteRequestMasters);
            // Sales / SalesGroup / SalesQuoteRequestSubs as ICollection<SalesQuote>
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteRequestSubs = salesQuoteCollectionToAssign);
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteRequestSubs);
            // Sales / SalesGroup / SalesQuoteResponseMasters as ICollection<SalesQuote>
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteResponseMasters = salesQuoteCollectionToAssign);
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteResponseMasters);
            // Sales / SalesGroup / SalesQuoteResponseSubs as ICollection<SalesQuote>
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteResponseSubs = salesQuoteCollectionToAssign);
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteResponseSubs);
            // Sales / SalesGroup / SubSalesOrders as ICollection<SalesOrder>
            Assert.Equal(salesOrderCollectionToAssign, salesGroupToCheck.SubSalesOrders = salesOrderCollectionToAssign);
            Assert.Equal(salesOrderCollectionToAssign, salesGroupToCheck.SubSalesOrders);
            // Sales / SalesGroup / SalesOrderMasters as ICollection<SalesOrder>
            Assert.Equal(salesOrderCollectionToAssign, salesGroupToCheck.SalesOrderMasters = salesOrderCollectionToAssign);
            Assert.Equal(salesOrderCollectionToAssign, salesGroupToCheck.SalesOrderMasters);
            // Sales / SalesGroup / PurchaseOrders as ICollection<PurchaseOrder>
            Assert.Equal(purchaseOrderCollectionToAssign, salesGroupToCheck.PurchaseOrders = purchaseOrderCollectionToAssign);
            Assert.Equal(purchaseOrderCollectionToAssign, salesGroupToCheck.PurchaseOrders);
            // Sales / SalesGroup / SalesInvoices as ICollection<SalesInvoice>
            Assert.Equal(salesInvoiceCollectionToAssign, salesGroupToCheck.SalesInvoices = salesInvoiceCollectionToAssign);
            Assert.Equal(salesInvoiceCollectionToAssign, salesGroupToCheck.SalesInvoices);
            // Sales / SalesGroup / SalesReturns as ICollection<SalesReturn>
            Assert.Equal(salesReturnCollectionToAssign, salesGroupToCheck.SalesReturns = salesReturnCollectionToAssign);
            Assert.Equal(salesReturnCollectionToAssign, salesGroupToCheck.SalesReturns);
            // Sales / SalesGroup / SampleRequests as ICollection<SampleRequest>
            Assert.Equal(sampleRequestCollectionToAssign, salesGroupToCheck.SampleRequests = sampleRequestCollectionToAssign);
            Assert.Equal(sampleRequestCollectionToAssign, salesGroupToCheck.SampleRequests);
            #endregion
            #region Sampling
            // Sampling / SampleRequest / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, sampleRequestToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, sampleRequestToCheck.Notes);
            // Sampling / SampleRequestContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBase)sampleRequestContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBase)sampleRequestContactToCheck).ContactID);
            // Sampling / SampleRequestContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBase)sampleRequestContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBase)sampleRequestContactToCheck).Contact);
            #endregion
            #region Scheduling
            // Scheduling / Appointment / Calendars as ICollection<CalendarAppointment>
            Assert.Equal(calendarAppointmentCollectionToAssign, appointmentToCheck.Calendars = calendarAppointmentCollectionToAssign);
            Assert.Equal(calendarAppointmentCollectionToAssign, appointmentToCheck.Calendars);
            // Scheduling / Calendar / Appointments as ICollection<CalendarAppointment>
            Assert.Equal(calendarAppointmentCollectionToAssign, calendarToCheck.Appointments = calendarAppointmentCollectionToAssign);
            Assert.Equal(calendarAppointmentCollectionToAssign, calendarToCheck.Appointments);
            #endregion
            #region Scouting
            // Scouting / Scout / Categories as ICollection<ScoutCategory>
            Assert.Equal(scoutCategoryCollectionToAssign, scoutToCheck.Categories = scoutCategoryCollectionToAssign);
            Assert.Equal(scoutCategoryCollectionToAssign, scoutToCheck.Categories);
            // Scouting / ScoutCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Scout>)scoutCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Scout>)scoutCategoryToCheck).CategoryID);
            // Scouting / ScoutCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategory)scoutCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategory)scoutCategoryToCheck).CategoryID);
            // Scouting / ScoutCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Scout>)scoutCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Scout>)scoutCategoryToCheck).Category);
            // Scouting / ScoutCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)scoutCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)scoutCategoryToCheck).Category);
            #endregion
            #region Shipping
            // Shipping / ShipCarrier / PurchaseOrders as ICollection<PurchaseOrder>
            Assert.Equal(purchaseOrderCollectionToAssign, shipCarrierToCheck.PurchaseOrders = purchaseOrderCollectionToAssign);
            Assert.Equal(purchaseOrderCollectionToAssign, shipCarrierToCheck.PurchaseOrders);
            // Shipping / ShipCarrier / ShipCarrierMethods as ICollection<ShipCarrierMethod>
            Assert.Equal(shipCarrierMethodCollectionToAssign, shipCarrierToCheck.ShipCarrierMethods = shipCarrierMethodCollectionToAssign);
            Assert.Equal(shipCarrierMethodCollectionToAssign, shipCarrierToCheck.ShipCarrierMethods);
            // Shipping / ShipCarrier / Shipments as ICollection<Shipment>
            Assert.Equal(shipmentCollectionToAssign, shipCarrierToCheck.Shipments = shipmentCollectionToAssign);
            Assert.Equal(shipmentCollectionToAssign, shipCarrierToCheck.Shipments);
            // Shipping / ShipCarrierMethod / ProductShipCarrierMethods as ICollection<ProductShipCarrierMethod>
            Assert.Equal(productShipCarrierMethodCollectionToAssign, shipCarrierMethodToCheck.ProductShipCarrierMethods = productShipCarrierMethodCollectionToAssign);
            Assert.Equal(productShipCarrierMethodCollectionToAssign, shipCarrierMethodToCheck.ProductShipCarrierMethods);
            // Shipping / Shipment / ShipmentEvents as ICollection<ShipmentEvent>
            Assert.Equal(shipmentEventCollectionToAssign, shipmentToCheck.ShipmentEvents = shipmentEventCollectionToAssign);
            Assert.Equal(shipmentEventCollectionToAssign, shipmentToCheck.ShipmentEvents);
            #endregion
            #region Shopping
            // Shopping / Cart / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, cartToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, cartToCheck.Notes);
            // Shopping / CartContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBase)cartContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBase)cartContactToCheck).ContactID);
            // Shopping / CartContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBase)cartContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBase)cartContactToCheck).Contact);
            #endregion
            #region Stores
            // Stores / SiteDomain / Brands as ICollection<BrandSiteDomain>
            Assert.Equal(brandSiteDomainCollectionToAssign, siteDomainToCheck.Brands = brandSiteDomainCollectionToAssign);
            Assert.Equal(brandSiteDomainCollectionToAssign, siteDomainToCheck.Brands);
            // Stores / SiteDomain / Franchises as ICollection<FranchiseSiteDomain>
            //Assert.Equal(franchiseSiteDomainCollectionToAssign, siteDomainToCheck.Franchises = franchiseSiteDomainCollectionToAssign);
            //Assert.Equal(franchiseSiteDomainCollectionToAssign, siteDomainToCheck.Franchises);
            //// Stores / SiteDomain / SiteDomainSocialProviders as ICollection<SiteDomainSocialProvider>
            //Assert.Equal(siteDomainSocialProviderCollectionToAssign, siteDomainToCheck.SiteDomainSocialProviders = siteDomainSocialProviderCollectionToAssign);
            //Assert.Equal(siteDomainSocialProviderCollectionToAssign, siteDomainToCheck.SiteDomainSocialProviders);
            // Stores / SocialProvider / SiteDomainSocialProviders as ICollection<SiteDomainSocialProvider>
            Assert.Equal(siteDomainSocialProviderCollectionToAssign, socialProviderToCheck.SiteDomainSocialProviders = siteDomainSocialProviderCollectionToAssign);
            Assert.Equal(siteDomainSocialProviderCollectionToAssign, socialProviderToCheck.SiteDomainSocialProviders);
            // Stores / Store / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, storeToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, storeToCheck.Notes);
            // Stores / Store / Images as ICollection<StoreImage>
            Assert.Equal(storeImageCollectionToAssign, storeToCheck.Images = storeImageCollectionToAssign);
            Assert.Equal(storeImageCollectionToAssign, storeToCheck.Images);
            // Stores / Store / Reviews as ICollection<Review>
            Assert.Equal(reviewCollectionToAssign, storeToCheck.Reviews = reviewCollectionToAssign);
            Assert.Equal(reviewCollectionToAssign, storeToCheck.Reviews);
            // Stores / Store / Products as ICollection<StoreProduct>
            Assert.Equal(storeProductCollectionToAssign, storeToCheck.Products = storeProductCollectionToAssign);
            Assert.Equal(storeProductCollectionToAssign, storeToCheck.Products);
            // Stores / Store / Accounts as ICollection<StoreAccount>
            Assert.Equal(storeAccountCollectionToAssign, storeToCheck.Accounts = storeAccountCollectionToAssign);
            Assert.Equal(storeAccountCollectionToAssign, storeToCheck.Accounts);
            // Stores / Store / Users as ICollection<StoreUser>
            Assert.Equal(storeUserCollectionToAssign, storeToCheck.Users = storeUserCollectionToAssign);
            Assert.Equal(storeUserCollectionToAssign, storeToCheck.Users);
            // Stores / Store / Vendors as ICollection<StoreVendor>
            Assert.Equal(storeVendorCollectionToAssign, storeToCheck.Vendors = storeVendorCollectionToAssign);
            Assert.Equal(storeVendorCollectionToAssign, storeToCheck.Vendors);
            // Stores / Store / Categories as ICollection<StoreCategory>
            Assert.Equal(storeCategoryCollectionToAssign, storeToCheck.Categories = storeCategoryCollectionToAssign);
            Assert.Equal(storeCategoryCollectionToAssign, storeToCheck.Categories);
            // Stores / Store / Brands as ICollection<BrandStore>
            Assert.Equal(brandStoreCollectionToAssign, storeToCheck.Brands = brandStoreCollectionToAssign);
            Assert.Equal(brandStoreCollectionToAssign, storeToCheck.Brands);
            // Stores / Store / Franchises as ICollection<FranchiseStore>
            Assert.Equal(franchiseStoreCollectionToAssign, storeToCheck.Franchises = franchiseStoreCollectionToAssign);
            Assert.Equal(franchiseStoreCollectionToAssign, storeToCheck.Franchises);
            // Stores / Store / Manufacturers as ICollection<StoreManufacturer>
            Assert.Equal(storeManufacturerCollectionToAssign, storeToCheck.Manufacturers = storeManufacturerCollectionToAssign);
            Assert.Equal(storeManufacturerCollectionToAssign, storeToCheck.Manufacturers);
            // Stores / Store / StoreBadges as ICollection<StoreBadge>
            Assert.Equal(storeBadgeCollectionToAssign, storeToCheck.StoreBadges = storeBadgeCollectionToAssign);
            Assert.Equal(storeBadgeCollectionToAssign, storeToCheck.StoreBadges);
            // Stores / Store / StoreContacts as ICollection<StoreContact>
            Assert.Equal(storeContactCollectionToAssign, storeToCheck.StoreContacts = storeContactCollectionToAssign);
            Assert.Equal(storeContactCollectionToAssign, storeToCheck.StoreContacts);
            // Stores / Store / StoreInventoryLocations as ICollection<StoreInventoryLocation>
            Assert.Equal(storeInventoryLocationCollectionToAssign, storeToCheck.StoreInventoryLocations = storeInventoryLocationCollectionToAssign);
            Assert.Equal(storeInventoryLocationCollectionToAssign, storeToCheck.StoreInventoryLocations);
            // Stores / Store / StoreSubscriptions as ICollection<StoreSubscription>
            Assert.Equal(storeSubscriptionCollectionToAssign, storeToCheck.StoreSubscriptions = storeSubscriptionCollectionToAssign);
            Assert.Equal(storeSubscriptionCollectionToAssign, storeToCheck.StoreSubscriptions);
            // Stores / Store / StoreCountries as ICollection<StoreCountry>
            Assert.Equal(storeCountryCollectionToAssign, storeToCheck.StoreCountries = storeCountryCollectionToAssign);
            Assert.Equal(storeCountryCollectionToAssign, storeToCheck.StoreCountries);
            // Stores / Store / StoreRegions as ICollection<StoreRegion>
            Assert.Equal(storeRegionCollectionToAssign, storeToCheck.StoreRegions = storeRegionCollectionToAssign);
            Assert.Equal(storeRegionCollectionToAssign, storeToCheck.StoreRegions);
            // Stores / Store / StoreDistricts as ICollection<StoreDistrict>
            Assert.Equal(storeDistrictCollectionToAssign, storeToCheck.StoreDistricts = storeDistrictCollectionToAssign);
            Assert.Equal(storeDistrictCollectionToAssign, storeToCheck.StoreDistricts);
            // Stores / StoreAccount / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)storeAccountToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)storeAccountToCheck).StoreID);
            // Stores / StoreAccount / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeAccountToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeAccountToCheck).Store);
            // Stores / StoreAccount / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Account>)storeAccountToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Account>)storeAccountToCheck).StoreID);
            // Stores / StoreAccount / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Account>)storeAccountToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Account>)storeAccountToCheck).Store);
            // Stores / StoreAccount / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)storeAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)storeAccountToCheck).AccountID);
            // Stores / StoreAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)storeAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)storeAccountToCheck).Account);
            // Stores / StoreAccount / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Store>)storeAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Store>)storeAccountToCheck).AccountID);
            // Stores / StoreAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Store>)storeAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Store>)storeAccountToCheck).Account);
            // Stores / StoreBadge / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)storeBadgeToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)storeBadgeToCheck).StoreID);
            // Stores / StoreBadge / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeBadgeToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeBadgeToCheck).Store);
            // Stores / StoreBadge / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Badge>)storeBadgeToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Badge>)storeBadgeToCheck).StoreID);
            // Stores / StoreBadge / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Badge>)storeBadgeToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Badge>)storeBadgeToCheck).Store);
            // Stores / StoreCategory / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Category>)storeCategoryToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Category>)storeCategoryToCheck).StoreID);
            // Stores / StoreCategory / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Category>)storeCategoryToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Category>)storeCategoryToCheck).Store);
            // Stores / StoreCategory / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)storeCategoryToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)storeCategoryToCheck).StoreID);
            // Stores / StoreCategory / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeCategoryToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeCategoryToCheck).Store);
            // Stores / StoreCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Store>)storeCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Store>)storeCategoryToCheck).CategoryID);
            // Stores / StoreCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Store>)storeCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlave<Store>)storeCategoryToCheck).Category);
            // Stores / StoreCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategory)storeCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategory)storeCategoryToCheck).CategoryID);
            // Stores / StoreCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)storeCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategory)storeCategoryToCheck).Category);
            // Stores / StoreContact / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)storeContactToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)storeContactToCheck).StoreID);
            // Stores / StoreContact / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeContactToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeContactToCheck).Store);
            // Stores / StoreContact / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Contact>)storeContactToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Contact>)storeContactToCheck).StoreID);
            // Stores / StoreContact / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Contact>)storeContactToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Contact>)storeContactToCheck).Store);
            // Stores / StoreContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBase)storeContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBase)storeContactToCheck).ContactID);
            // Stores / StoreContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBase)storeContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBase)storeContactToCheck).Contact);
            // Stores / StoreCountry / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Country>)storeCountryToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Country>)storeCountryToCheck).StoreID);
            // Stores / StoreCountry / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Country>)storeCountryToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Country>)storeCountryToCheck).Store);
            // Stores / StoreCountry / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)storeCountryToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)storeCountryToCheck).StoreID);
            // Stores / StoreCountry / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeCountryToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeCountryToCheck).Store);
            // Stores / StoreDistrict / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<District>)storeDistrictToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<District>)storeDistrictToCheck).StoreID);
            // Stores / StoreDistrict / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<District>)storeDistrictToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<District>)storeDistrictToCheck).Store);
            // Stores / StoreDistrict / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)storeDistrictToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)storeDistrictToCheck).StoreID);
            // Stores / StoreDistrict / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeDistrictToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeDistrictToCheck).Store);
            // Stores / StoreInventoryLocation / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)storeInventoryLocationToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)storeInventoryLocationToCheck).StoreID);
            // Stores / StoreInventoryLocation / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeInventoryLocationToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeInventoryLocationToCheck).Store);
            // Stores / StoreInventoryLocation / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<InventoryLocation>)storeInventoryLocationToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<InventoryLocation>)storeInventoryLocationToCheck).StoreID);
            // Stores / StoreInventoryLocation / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<InventoryLocation>)storeInventoryLocationToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<InventoryLocation>)storeInventoryLocationToCheck).Store);
            // Stores / StoreManufacturer / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)storeManufacturerToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)storeManufacturerToCheck).StoreID);
            // Stores / StoreManufacturer / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeManufacturerToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeManufacturerToCheck).Store);
            // Stores / StoreManufacturer / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Manufacturer>)storeManufacturerToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Manufacturer>)storeManufacturerToCheck).StoreID);
            // Stores / StoreManufacturer / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Manufacturer>)storeManufacturerToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Manufacturer>)storeManufacturerToCheck).Store);
            // Stores / StoreManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturer)storeManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturer)storeManufacturerToCheck).ManufacturerID);
            // Stores / StoreManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)storeManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)storeManufacturerToCheck).Manufacturer);
            // Stores / StoreManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Store>)storeManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Store>)storeManufacturerToCheck).ManufacturerID);
            // Stores / StoreManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Store>)storeManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Store>)storeManufacturerToCheck).Manufacturer);
            // Stores / StoreProduct / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)storeProductToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)storeProductToCheck).StoreID);
            // Stores / StoreProduct / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeProductToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeProductToCheck).Store);
            // Stores / StoreProduct / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Product>)storeProductToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Product>)storeProductToCheck).StoreID);
            // Stores / StoreProduct / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Product>)storeProductToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Product>)storeProductToCheck).Store);
            // Stores / StoreProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)storeProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)storeProductToCheck).ProductID);
            // Stores / StoreProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)storeProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)storeProductToCheck).Product);
            // Stores / StoreProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Store>)storeProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Store>)storeProductToCheck).ProductID);
            // Stores / StoreProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Store>)storeProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Store>)storeProductToCheck).Product);
            // Stores / StoreRegion / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Region>)storeRegionToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Region>)storeRegionToCheck).StoreID);
            // Stores / StoreRegion / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Region>)storeRegionToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Region>)storeRegionToCheck).Store);
            // Stores / StoreRegion / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)storeRegionToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)storeRegionToCheck).StoreID);
            // Stores / StoreRegion / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeRegionToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeRegionToCheck).Store);
            // Stores / StoreSubscription / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)storeSubscriptionToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)storeSubscriptionToCheck).StoreID);
            // Stores / StoreSubscription / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeSubscriptionToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeSubscriptionToCheck).Store);
            // Stores / StoreSubscription / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Subscription>)storeSubscriptionToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Subscription>)storeSubscriptionToCheck).StoreID);
            // Stores / StoreSubscription / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Subscription>)storeSubscriptionToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Subscription>)storeSubscriptionToCheck).Store);
            // Stores / StoreUser / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)storeUserToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)storeUserToCheck).StoreID);
            // Stores / StoreUser / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeUserToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeUserToCheck).Store);
            // Stores / StoreUser / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<User>)storeUserToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<User>)storeUserToCheck).StoreID);
            // Stores / StoreUser / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<User>)storeUserToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<User>)storeUserToCheck).Store);
            // Stores / StoreUser / UserID as int
            Assert.Equal(1, ((IAmFilterableByUser)storeUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUser)storeUserToCheck).UserID);
            // Stores / StoreUser / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUser)storeUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUser)storeUserToCheck).User);
            // Stores / StoreUser / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Store>)storeUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Store>)storeUserToCheck).UserID);
            // Stores / StoreUser / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Store>)storeUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlave<Store>)storeUserToCheck).User);
            // Stores / StoreVendor / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStore)storeVendorToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStore)storeVendorToCheck).StoreID);
            // Stores / StoreVendor / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeVendorToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStore)storeVendorToCheck).Store);
            // Stores / StoreVendor / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Vendor>)storeVendorToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Vendor>)storeVendorToCheck).StoreID);
            // Stores / StoreVendor / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Vendor>)storeVendorToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMaster<Vendor>)storeVendorToCheck).Store);
            // Stores / StoreVendor / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendor)storeVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendor)storeVendorToCheck).VendorID);
            // Stores / StoreVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)storeVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)storeVendorToCheck).Vendor);
            // Stores / StoreVendor / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Store>)storeVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Store>)storeVendorToCheck).VendorID);
            // Stores / StoreVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Store>)storeVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlave<Store>)storeVendorToCheck).Vendor);
            #endregion
            #region System
            #endregion
            #region Tax
            #endregion
            #region Tracking
            // Tracking / Campaign / CampaignAds as ICollection<CampaignAd>
            Assert.Equal(campaignAdCollectionToAssign, campaignToCheck.CampaignAds = campaignAdCollectionToAssign);
            Assert.Equal(campaignAdCollectionToAssign, campaignToCheck.CampaignAds);
            // Tracking / Event / PageViewEvents as ICollection<PageViewEvent>
            Assert.Equal(pageViewEventCollectionToAssign, eventToCheck.PageViewEvents = pageViewEventCollectionToAssign);
            Assert.Equal(pageViewEventCollectionToAssign, eventToCheck.PageViewEvents);
            // Tracking / PageView / PageViewEvents as ICollection<PageViewEvent>
            Assert.Equal(pageViewEventCollectionToAssign, pageViewToCheck.PageViewEvents = pageViewEventCollectionToAssign);
            Assert.Equal(pageViewEventCollectionToAssign, pageViewToCheck.PageViewEvents);
            // Tracking / Visit / Events as ICollection<Event>
            Assert.Equal(eventCollectionToAssign, visitToCheck.Events = eventCollectionToAssign);
            Assert.Equal(eventCollectionToAssign, visitToCheck.Events);
            // Tracking / Visitor / Visits as ICollection<Visit>
            Assert.Equal(visitCollectionToAssign, visitorToCheck.Visits = visitCollectionToAssign);
            Assert.Equal(visitCollectionToAssign, visitorToCheck.Visits);
            #endregion
            #region Vendors
            // Vendors / Vendor / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, vendorToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, vendorToCheck.Notes);
            // Vendors / Vendor / Images as ICollection<VendorImage>
            Assert.Equal(vendorImageCollectionToAssign, vendorToCheck.Images = vendorImageCollectionToAssign);
            Assert.Equal(vendorImageCollectionToAssign, vendorToCheck.Images);
            // Vendors / Vendor / Reviews as ICollection<Review>
            Assert.Equal(reviewCollectionToAssign, vendorToCheck.Reviews = reviewCollectionToAssign);
            Assert.Equal(reviewCollectionToAssign, vendorToCheck.Reviews);
            // Vendors / Vendor / Accounts as ICollection<VendorAccount>
            Assert.Equal(vendorAccountCollectionToAssign, vendorToCheck.Accounts = vendorAccountCollectionToAssign);
            Assert.Equal(vendorAccountCollectionToAssign, vendorToCheck.Accounts);
            // Vendors / Vendor / Brands as ICollection<BrandVendor>
            Assert.Equal(brandVendorCollectionToAssign, vendorToCheck.Brands = brandVendorCollectionToAssign);
            Assert.Equal(brandVendorCollectionToAssign, vendorToCheck.Brands);
            // Vendors / Vendor / Franchises as ICollection<FranchiseVendor>
            Assert.Equal(franchiseVendorCollectionToAssign, vendorToCheck.Franchises = franchiseVendorCollectionToAssign);
            Assert.Equal(franchiseVendorCollectionToAssign, vendorToCheck.Franchises);
            // Vendors / Vendor / Manufacturers as ICollection<VendorManufacturer>
            Assert.Equal(vendorManufacturerCollectionToAssign, vendorToCheck.Manufacturers = vendorManufacturerCollectionToAssign);
            Assert.Equal(vendorManufacturerCollectionToAssign, vendorToCheck.Manufacturers);
            // Vendors / Vendor / Products as ICollection<VendorProduct>
            Assert.Equal(vendorProductCollectionToAssign, vendorToCheck.Products = vendorProductCollectionToAssign);
            Assert.Equal(vendorProductCollectionToAssign, vendorToCheck.Products);
            // Vendors / Vendor / Stores as ICollection<StoreVendor>
            Assert.Equal(storeVendorCollectionToAssign, vendorToCheck.Stores = storeVendorCollectionToAssign);
            Assert.Equal(storeVendorCollectionToAssign, vendorToCheck.Stores);
            // Vendors / Vendor / Shipments as ICollection<Shipment>
            Assert.Equal(shipmentCollectionToAssign, vendorToCheck.Shipments = shipmentCollectionToAssign);
            Assert.Equal(shipmentCollectionToAssign, vendorToCheck.Shipments);
            // Vendors / Vendor / PurchaseOrders as ICollection<PurchaseOrder>
            Assert.Equal(purchaseOrderCollectionToAssign, vendorToCheck.PurchaseOrders = purchaseOrderCollectionToAssign);
            Assert.Equal(purchaseOrderCollectionToAssign, vendorToCheck.PurchaseOrders);
            // Vendors / VendorAccount / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendor)vendorAccountToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendor)vendorAccountToCheck).VendorID);
            // Vendors / VendorAccount / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)vendorAccountToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)vendorAccountToCheck).Vendor);
            // Vendors / VendorAccount / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheMaster<Account>)vendorAccountToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheMaster<Account>)vendorAccountToCheck).VendorID);
            // Vendors / VendorAccount / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheMaster<Account>)vendorAccountToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheMaster<Account>)vendorAccountToCheck).Vendor);
            // Vendors / VendorAccount / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccount)vendorAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccount)vendorAccountToCheck).AccountID);
            // Vendors / VendorAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)vendorAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccount)vendorAccountToCheck).Account);
            // Vendors / VendorAccount / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Vendor>)vendorAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Vendor>)vendorAccountToCheck).AccountID);
            // Vendors / VendorAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Vendor>)vendorAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlave<Vendor>)vendorAccountToCheck).Account);
            // Vendors / VendorManufacturer / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendor)vendorManufacturerToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendor)vendorManufacturerToCheck).VendorID);
            // Vendors / VendorManufacturer / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)vendorManufacturerToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)vendorManufacturerToCheck).Vendor);
            // Vendors / VendorManufacturer / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheMaster<Manufacturer>)vendorManufacturerToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheMaster<Manufacturer>)vendorManufacturerToCheck).VendorID);
            // Vendors / VendorManufacturer / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheMaster<Manufacturer>)vendorManufacturerToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheMaster<Manufacturer>)vendorManufacturerToCheck).Vendor);
            // Vendors / VendorManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturer)vendorManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturer)vendorManufacturerToCheck).ManufacturerID);
            // Vendors / VendorManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)vendorManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturer)vendorManufacturerToCheck).Manufacturer);
            // Vendors / VendorManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Vendor>)vendorManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Vendor>)vendorManufacturerToCheck).ManufacturerID);
            // Vendors / VendorManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Vendor>)vendorManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave<Vendor>)vendorManufacturerToCheck).Manufacturer);
            // Vendors / VendorProduct / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendor)vendorProductToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendor)vendorProductToCheck).VendorID);
            // Vendors / VendorProduct / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)vendorProductToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendor)vendorProductToCheck).Vendor);
            // Vendors / VendorProduct / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheMaster<Product>)vendorProductToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheMaster<Product>)vendorProductToCheck).VendorID);
            // Vendors / VendorProduct / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheMaster<Product>)vendorProductToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheMaster<Product>)vendorProductToCheck).Vendor);
            // Vendors / VendorProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProduct)vendorProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProduct)vendorProductToCheck).ProductID);
            // Vendors / VendorProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)vendorProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProduct)vendorProductToCheck).Product);
            // Vendors / VendorProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Vendor>)vendorProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Vendor>)vendorProductToCheck).ProductID);
            // Vendors / VendorProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Vendor>)vendorProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlave<Vendor>)vendorProductToCheck).Product);
            #endregion
            #endregion
        }
    }
}
