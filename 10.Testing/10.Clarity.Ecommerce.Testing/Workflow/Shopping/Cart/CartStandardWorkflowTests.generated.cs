// <autogenerated>
// <copyright file="Shopping.StandardWorkflowTests.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Shopping section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by StandardWorkflowTestsMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
#pragma warning disable CS0618 // Obsoletes Ignored in T4s
#nullable enable
// ReSharper disable PartialTypeWithSinglePart
namespace Clarity.Ecommerce.Workflow.Testing
{
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using Models;
    using Moq;
    using Workflow;
    using Xunit;

    public abstract class Shopping_Carts_WorkflowTestsBase
        : AbstractBase<
            ICart,
            Cart,
            ICartModel,
            CartModel,
            ICartSearchModel,
            CartSearchModel,
            CartWorkflow>
    {
        protected Shopping_Carts_WorkflowTestsBase(Xunit.Abstractions.ITestOutputHelper testOutputHelper) : base(testOutputHelper) { }

        protected override MockingSetup GetMockingSetupWithExistingDataForThisTable()
        {
            return new MockingSetup { DoCartTable = true };
        }

        protected override MockingSetup GetMockingSetupWithExistingDataForThisTableAndExpandedTables()
        {
            return new MockingSetup
            {
                DoAccountTable = true,
                DoAccountStatusTable = true,
                DoAccountTypeTable = true,
                DoAddressTable = true,
                DoAppliedCartItemDiscountTable = true,
                DoBrandTable = true,
                DoCartTable = true,
                DoCartContactTable = true,
                DoCartFileTable = true,
                DoCartItemTable = true,
                DoCartItemTargetTable = true,
                DoCartStateTable = true,
                DoCartStatusTable = true,
                DoCartTypeTable = true,
                DoContactTable = true,
                DoContactTypeTable = true,
                DoCountryTable = true,
                DoFranchiseTable = true,
                DoGeneralAttributeTable = true,
                DoManufacturerProductTable = true,
                DoNoteTable = true,
                DoNoteTypeTable = true,
                DoPackageTypeTable = true,
                DoProductTable = true,
                DoProductFileTable = true,
                DoProductImageTable = true,
                DoProductInventoryLocationSectionTable = true,
                DoProductPricePointTable = true,
                DoRateQuoteTable = true,
                DoRegionTable = true,
                DoShipmentTable = true,
                DoStoreTable = true,
                DoStoreProductTable = true,
                DoUserTable = true,
                DoVendorProductTable = true,
            };
        }

        /// <inheritdoc/>
        protected override Mock<DbSet<Cart>>? GetMockSet(MockingSetup mockingSetup)
        {
            return mockingSetup.Carts;
        }

        /// <inheritdoc/>
        protected override List<Mock<Cart>>? GetRawSet(MockingSetup mockingSetup)
        {
            return mockingSetup.RawCarts;
        }

        /// <inheritdoc/>
        protected override async Task<CartModel> GenNewModelAsync(MockingSetup mockingSetup, string contextProfileName)
        {
            return new CartModel
            {
                Active = true,
                CustomKey = await GetCustomKeyAsync(mockingSetup, contextProfileName).ConfigureAwait(false),
                // Required Related Properties
                StatusID = mockingSetup.RawCartStatuses.First().Object.ID,
                StateID = mockingSetup.RawCartStates.First().Object.ID,
                TypeID = mockingSetup.RawCartTypes.First().Object.ID,
                // Optional Related Properties
                ShipmentID = null,
                AccountID = null,
                BrandID = null,
                FranchiseID = null,
                StoreID = null,
                UserID = null,
                BillingContactID = null,
                ShippingContactID = null,
            };
        }
    }

    [Trait("Category", "Workflows.Shopping.Carts.Standard")]
    public partial class Shopping_Carts_StandardWorkflowTests : Shopping_Carts_WorkflowTestsBase
    {
        public Shopping_Carts_StandardWorkflowTests(Xunit.Abstractions.ITestOutputHelper testOutputHelper) : base(testOutputHelper) { }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_CheckExists_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_CheckExistsByID_ThatExists_Should_ReturnAnID(),
                Verify_CheckExistsByID_ThatDoesntExist_Should_ReturnNull(),
                Verify_CheckExistsByID_WithAnInvalidID_Should_ThrowAnInvalidOperationException(),
                Verify_CheckExistsByKey_ThatExists_Should_ReturnAnID(),
                Verify_CheckExistsByKey_ThatDoesntExist_Should_ReturnNull(),
                Verify_CheckExistsByKey_WithAnInvalidKey_Should_ThrowAnInvalidOperationException());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Get_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Get_ByID_Should_ReturnAModelWithFullMap(),
                Verify_Get_ByKey_Should_ReturnAModelWithFullMap());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Resolve_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Resolve_WithAnIDThatExists_Should_ReturnAModelWithFullMap(),
                Verify_Resolve_WithAKeyThatExists_Should_ReturnAModelWithFullMap(),
                Verify_ResolveWithAutoGenerate_WithAValidModelThatDoesntExist_Should_CreateAndReturnAModelWithFullMap(),
                Verify_ResolveWithAutoGenerate_WithNoDataAndANullModel_Should_ThrowAnInvalidDataException(),
                Verify_ResolveWithAutoGenerateOptional_WithNoDataAndANullModel_Should_ReturnNull());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Search_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Search_WithAsListingTrue_Should_ReturnAListOfModelsWithListingMapping(),
                Verify_Search_Should_ReturnAListOfModelsWithLiteMapping(),
                Verify_SearchForConnect_Should_ReturnAListOfModelsWithLiteMapping(),
                Verify_GetDigest_Should_ReturnAListOfModelsWithLiteMapping());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Create_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Create_WithValidData_Should_AddToTheDbSetAndSaveChangesAndReturnAModelWithFullMapAndNewID(),
                Verify_Create_WithADuplicateKey_Should_ThrowAnInvalidOperationException(),
                Verify_Create_WithDataThatCantBeSaved_Should_ThrowAnInvalidDataException(),
                Verify_Create_WithAPositiveNonMaximumId_Should_ThrowAnInvalidOperationException());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Update_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Update_WithValidData_Should_UpdateValuesAndUpdatedDateAndReturnAModelWithFullMap(),
                Verify_Update_WithDataThatCantBeSaved_Should_ThrowAnInvalidDataException(),
                Verify_Update_WithAnIDLessThanOrEqualToZeroOrMinOrMax_Should_ThrowAnInvalidOperationException(),
                Verify_Update_WithAnIDNotInTheData_Should_ThrowAnArgumentException());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Upsert_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Upsert_WithValidData_ThatShouldCreate_Should_AddToTheDbSetAndSaveChangesAndReturnAModelWithFullMapAndNewID(),
                Verify_Upsert_WithValidData_ThatShouldUpdate_Should_UpdateValuesAndUpdatedDateAndReturnAModelWithFullMap(),
                Verify_Upsert_WithValidDataButNoID_ThatShouldUpdate_Should_UpdateValuesAndUpdatedDateAndReturnAModelWithFullMap());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Deactivate_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Deactivate_ByID_WithAValidIDInTheData_Should_UpdateActiveAndUpdatedDateValuesAndSaveChanges(),
                Verify_Deactivate_ByID_WithAnIDNotInTheData_Should_ReturnFalse(),
                Verify_Deactivate_ByID_WithAnInvalidID_Should_ThrowAnInvalidOperationException(),
                Verify_Deactivate_ByID_ThatIsNotActive_Should_NotUpdateItemAndReturnTrue(),
                Verify_Deactivate_ByKey_WithAValidKeyInTheData_Should_UpdateActiveAndUpdatedDateValuesAndSaveChangesAndNoLongerBeGettable(),
                Verify_Deactivate_ByKey_WithAKeyNotInTheData_Should_ReturnFalse(),
                Verify_Deactivate_ByKey_WithAnInvalidKey_Should_ThrowAnInvalidOperationException(),
                Verify_Deactivate_ByKey_ThatIsNotActive_Should_NotUpdateItemAndReturnTrueAndNoLongerBeGettable());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Reactivate_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Reactivate_ByID_WithAValidIDInTheData_Should_UpdateActiveAndUpdatedDateValuesAndSaveChanges(),
                Verify_Reactivate_ByID_WithAnIDNotInTheData_Should_ReturnFalse(),
                Verify_Reactivate_ByID_WithAnInvalidID_Should_ThrowAnInvalidOperationException(),
                Verify_Reactivate_ByID_ThatIsActive_Should_NotUpdateItemAndReturnTrue(),
                Verify_Reactivate_ByKey_WithAValidKeyInTheData_Should_UpdateActiveAndUpdatedDateValuesAndSaveChanges(),
                Verify_Reactivate_ByKey_WithAKeyNotInTheData_Should_ReturnFalse(),
                Verify_Reactivate_ByKey_WithAnInvalidKey_Should_ThrowAnInvalidOperationException(),
                Verify_Reactivate_ByKey_ThatIsActive_Should_NotUpdateItemAndReturnTrue());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Delete_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Delete_ByID_WithAValidIDInTheData_Should_RemoveAndSaveChanges(),
                Verify_Delete_ByID_WithAnIDNotInTheData_Should_ReturnTrue(),
                Verify_Delete_ByID_WithAnInvalidID_Should_ThrowAnInvalidOperationException(),
                Verify_Delete_ByKey_WithAValidKeyInTheData_Should_RemoveAndSaveChanges(),
                Verify_Delete_ByKey_WithAKeyNotInTheData_Should_ReturnTrue(),
                Verify_Delete_ByKey_WithAnInvalidKey_Should_ThrowAnInvalidOperationException());
        }
    }
}
