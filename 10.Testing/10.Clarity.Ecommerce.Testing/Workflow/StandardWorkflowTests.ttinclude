<#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System"
#><#@ import namespace="System.Collections"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Diagnostics"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Clarity.Ecommerce.Interfaces.DataModel"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#+
    // TODO@JTG: Associate an object where the MatchObjectModelWithObjectEntityAdditionalChecks is not overridden (there are lots of them)
    // TODO@JTG: Send SocialProvider with .SiteDomainSocialProviders populated
    // TODO@JTG: Get PriceRounding by it's search model
    // TODO@JTG: Send Vendor with .Terms populated
    // TODO@JTG: All Optional Relates with No Value
    // TODO@JTG: All Optional Relates with Bad Value
    // TODO@JTG: All Optional Relates with Valid Value
    // TODO@JTG: All Required Relates with No Value
    // TODO@JTG: All Required Relates with Bad Value
    // TODO@JTG: All Required Relates with Valid Value
    // TODO@JTG: All Associates with Null Array
    // TODO@JTG: All Associates with Empty Array
    // TODO@JTG: All Associates with Valid Array that matches
    // TODO@JTG: All Associates with Valid Array that changes by adding
    // TODO@JTG: All Associates with Valid Array that changes by removing
    // TODO@JTG: All Associates with Valid Array that changes by updating
    // TODO@JTG: All Associates with Valid Array that changes by mixed

    void GenerateStandardWorkflowTestsFile(string schema, Type theType)
    {
        var td = new TypeDeterminer(theType);
        var theTypeName = theType.Name;
        var theTypeNamePluralized = HelpFunctions.PluralizeName(theType);
        var theModelTypeName = HelpFunctions.SwapToModelType(theType.Name);
        var addedPropertyTypes = new List<string>();
        var requiredRelatedIDProperties = new List<string>();
        var optionalRelatedIDProperties = new List<string>();
#>// <autogenerated>
// <copyright file="<#= schema #>.StandardWorkflowTests.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the <#= schema #> section of the Mocking Setup class</summary>
// <remarks>This file was auto-generated by StandardWorkflowTestsMaster.tt, changes to this
// file will be overwritten automatically when the T4 template is run again</remarks>
// </autogenerated>
#pragma warning disable CS0618 // Obsoletes Ignored in T4s
#nullable enable
// ReSharper disable PartialTypeWithSinglePart
namespace Clarity.Ecommerce.Workflow.Testing
{
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using Models;
    using Moq;
    using Workflow;
    using Xunit;

    public abstract class <#= schema #>_<#= theTypeNamePluralized #>_WorkflowTestsBase
        : Abstract<#= td.IsITypableBase ? "Typable" : ""
        #><#= td.IsIStatusableBase ? "Statusable" : ""
        #><#= td.IsIStateableBase ? "Stateable" : ""
        #><#= td.IsINameableBase && !(td.IsIDisplayableBase) ? "Nameable" : "" #>Base<
            I<#= theTypeName #>,
            <#= theTypeName #>,
            I<#= theModelTypeName #>Model<#= theModelTypeName == "SalesItemBase" ? "<IApplied" + theTypeName + "DiscountModel>" : "" #>,
            <#= theModelTypeName #>Model<#= theModelTypeName == "SalesItemBase" ? "<IApplied" + theTypeName + "DiscountModel, Applied" + theTypeName + "DiscountModel>" : "" #>,
            I<#= theModelTypeName #>SearchModel,
            <#= theModelTypeName #>SearchModel,
            <#= theTypeName #>Workflow>
    {
        protected <#= schema #>_<#= theTypeNamePluralized #>_WorkflowTestsBase(Xunit.Abstractions.ITestOutputHelper testOutputHelper) : base(testOutputHelper) { }

        protected override MockingSetup GetMockingSetupWithExistingDataForThisTable()
        {
            return new MockingSetup { Do<#= theTypeName #>Table = true };
        }

        protected override MockingSetup GetMockingSetupWithExistingDataForThisTableAndExpandedTables()
        {
            return new MockingSetup
            {
<#+         addedPropertyTypes.Add(theTypeName);
            foreach (PropertyInfo property in theType.GetProperties()
                .Where(x => x.CanWrite
                        && ((!x.Name.EndsWith("ID") && x.Name != "Parent"
                                && x.GetMethod.ReturnType.Name != "ICollection`1"
                                && x.GetMethod.ReturnType.Name != "String" && x.GetMethod.ReturnType.Name != "DateTime"
                                && x.GetMethod.ReturnType.Name != "Boolean" && x.GetMethod.ReturnType.Name != "Nullable`1"
                                && !x.GetCustomAttributes<DontMapInWithRelateWorkflowsAttribute>().Any()
                                && !x.GetCustomAttributes<DontMapInEverAttribute>().Any()
                        ) || (x.GetMethod.ReturnType.Name == "ICollection`1"
                                && !x.GetCustomAttributes<DontMapInWithAssociateWorkflowsAttribute>().Any()
                                && !x.GetCustomAttributes<DontMapInEverAttribute>().Any()
                        )
                    )
                )
            ) {
                PropertyInfo idProperty = theType.GetProperties().FirstOrDefault(x => x.Name == property.Name + "ID");
                if (property.GetMethod.ReturnType.Name != "ICollection`1" && idProperty == null) { continue; }
                if (idProperty != null)
                {
                    if (idProperty.GetMethod.ReturnType.Name == "Nullable`1"
                        && !optionalRelatedIDProperties.Contains(idProperty.Name))
                    {
                        optionalRelatedIDProperties.Add(idProperty.Name);
                    }
                    else if (idProperty.GetMethod.ReturnType.Name != "Nullable`1"
                                && !requiredRelatedIDProperties.Contains(idProperty.Name))
                    {
                        requiredRelatedIDProperties.Add(idProperty.Name);
                    }
                }
                // Look for directly Related and Associated objects
                string propertyTypeName = property.GetMethod.ReturnType.Name == "ICollection`1"
                    ? property.GetMethod.ReturnType.GetGenericArguments()[0].Name
                    : property.GetMethod.ReturnType.Name;
                addedPropertyTypes.Add(propertyTypeName);
            }
            addedPropertyTypes = addedPropertyTypes.Distinct().OrderBy(x => x).ToList();
            int totalCount, thisCount;
            do
            {
                totalCount = addedPropertyTypes.Count;
                thisCount = 0;
                for (var i = 0; i < addedPropertyTypes.Count; i++)
                {
                    // TODO: Use reflection (see above loop) 4 layers deep instead of this manual process
                    if (addedPropertyTypes[i].EndsWith("Contact"))
                    {
                        if (!addedPropertyTypes.Contains("Contact"))
                        {
                            addedPropertyTypes.Add("Contact");
                        }
                    }
                    if (addedPropertyTypes[i] == "Contact")
                    {
                        if (!addedPropertyTypes.Contains("Address"))
                        {
                            addedPropertyTypes.Add("Address");
                        }
                        if (!addedPropertyTypes.Contains("ContactType"))
                        {
                            addedPropertyTypes.Add("ContactType");
                        }
                    }
                    if (addedPropertyTypes[i] == "Address")
                    {
                        if (!addedPropertyTypes.Contains("Country"))
                        {
                            addedPropertyTypes.Add("Country");
                        }
                        if (!addedPropertyTypes.Contains("Region"))
                        {
                            addedPropertyTypes.Add("Region");
                        }
                    }
                    if (addedPropertyTypes[i] == "AccountPricePoint")
                    {
                        if (!addedPropertyTypes.Contains("PricePoint"))
                        {
                            addedPropertyTypes.Add("PricePoint");
                        }
                    }
                    if (addedPropertyTypes[i] == "Account")
                    {
                        if (!addedPropertyTypes.Contains("AccountType"))
                        {
                            addedPropertyTypes.Add("AccountType");
                        }
                        if (!addedPropertyTypes.Contains("AccountStatus"))
                        {
                            addedPropertyTypes.Add("AccountStatus");
                        }
                    }
                    if (addedPropertyTypes[i] == "Product")
                    {
                        if (!addedPropertyTypes.Contains("ProductImage"))
                        {
                            addedPropertyTypes.Add("ProductImage");
                        }
                        if (!addedPropertyTypes.Contains("ProductFile"))
                        {
                            addedPropertyTypes.Add("ProductFile");
                        }
                        if (!addedPropertyTypes.Contains("ProductInventoryLocationSection"))
                        {
                            addedPropertyTypes.Add("ProductInventoryLocationSection");
                        }
                        if (!addedPropertyTypes.Contains("PackageType"))
                        {
                            addedPropertyTypes.Add("PackageType");
                        }
                        if (!addedPropertyTypes.Contains("GeneralAttribute"))
                        {
                            addedPropertyTypes.Add("GeneralAttribute");
                        }
                    }
                    if (addedPropertyTypes[i] == "Package")
                    {
                        if (!addedPropertyTypes.Contains("PackageType"))
                        {
                            addedPropertyTypes.Add("PackageType");
                        }
                    }
                    if (addedPropertyTypes[i] == "SalesReturn")
                    {
                        if (!addedPropertyTypes.Contains("SalesReturnReason"))
                        {
                            addedPropertyTypes.Add("SalesReturnReason");
                        }
                    }
                    if (addedPropertyTypes[i] == "Note")
                    {
                        if (!addedPropertyTypes.Contains("NoteType"))
                        {
                            addedPropertyTypes.Add("NoteType");
                        }
                    }
                    if (addedPropertyTypes[i] == "CartItem")
                    {
                        if (!addedPropertyTypes.Contains("Cart"))
                        {
                            addedPropertyTypes.Add("Cart");
                        }
                    }
                    if (addedPropertyTypes[i].EndsWith("Event"))
                    {
                        if (addedPropertyTypes[i].Contains("Cart") && !addedPropertyTypes.Contains("Cart"))
                        {
                            addedPropertyTypes.Add("Cart");
                        }
                        if (addedPropertyTypes[i].Contains("SalesInvoice") && !addedPropertyTypes.Contains("SalesInvoice"))
                        {
                            addedPropertyTypes.Add("SalesInvoice");
                        }
                        if (addedPropertyTypes[i].Contains("SalesOrder") && !addedPropertyTypes.Contains("SalesOrder"))
                        {
                            addedPropertyTypes.Add("SalesOrder");
                        }
                        if (addedPropertyTypes[i].Contains("SalesQuote") && !addedPropertyTypes.Contains("SalesQuote"))
                        {
                            addedPropertyTypes.Add("SalesQuote");
                        }
                        if (addedPropertyTypes[i].Contains("SalesReturn") && !addedPropertyTypes.Contains("SalesReturn"))
                        {
                            addedPropertyTypes.Add("SalesReturn");
                        }
                        if (addedPropertyTypes[i].Contains("PurchaseOrder") && !addedPropertyTypes.Contains("PurchaseOrder"))
                        {
                            addedPropertyTypes.Add("PurchaseOrder");
                        }
                        if (addedPropertyTypes[i].Contains("SampleRequest") && !addedPropertyTypes.Contains("SampleRequest"))
                        {
                            addedPropertyTypes.Add("SampleRequest");
                        }
                    }
                    if (addedPropertyTypes[i] == "Cart" && addedPropertyTypes.Contains("CartItem"))
                    {
                        if (!addedPropertyTypes.Contains("AppliedCartItemDiscount"))
                        {
                            addedPropertyTypes.Add("AppliedCartItemDiscount");
                        }
                        if (!addedPropertyTypes.Contains("CartItemTarget"))
                        {
                            addedPropertyTypes.Add("CartItemTarget");
                        }
                        if (!addedPropertyTypes.Contains("Product"))
                        {
                            addedPropertyTypes.Add("Product");
                        }
                        if (!addedPropertyTypes.Contains("VendorProduct"))
                        {
                            addedPropertyTypes.Add("VendorProduct");
                        }
                        if (!addedPropertyTypes.Contains("ManufacturerProduct"))
                        {
                            addedPropertyTypes.Add("ManufacturerProduct");
                        }
                        if (!addedPropertyTypes.Contains("StoreProduct"))
                        {
                            addedPropertyTypes.Add("StoreProduct");
                        }
                        if (!addedPropertyTypes.Contains("ProductPricePoint"))
                        {
                            addedPropertyTypes.Add("ProductPricePoint");
                        }
                    }
                }
                thisCount = addedPropertyTypes.Count;
            }
            while (thisCount != totalCount);
            foreach (var added in addedPropertyTypes.Distinct().OrderBy(x => x))
            { #>
                Do<#= added #>Table = true,
<#+         } #>
            };
        }

        /// <inheritdoc/>
        protected override Mock<DbSet<<#= theTypeName #>>>? GetMockSet(MockingSetup mockingSetup)
        {
            return mockingSetup.<#= theTypeNamePluralized #>;
        }

        /// <inheritdoc/>
        protected override List<Mock<<#= theTypeName #>>>? GetRawSet(MockingSetup mockingSetup)
        {
            return mockingSetup.Raw<#= theTypeNamePluralized #>;
        }

        /// <inheritdoc/>
        protected override async Task<<#= theModelTypeName #>Model<#= theModelTypeName == "SalesItemBase" ? "<IApplied" + theTypeName + "DiscountModel, Applied" + theTypeName + "DiscountModel>" : "" #>> GenNewModelAsync(MockingSetup mockingSetup, string contextProfileName)
        {
            return new <#= theModelTypeName #>Model<#= theModelTypeName == "SalesItemBase" ? "<IApplied" + theTypeName + "DiscountModel, Applied" + theTypeName + "DiscountModel>" : "" #>
            {
                Active = true,
                CustomKey = await GetCustomKeyAsync(mockingSetup, contextProfileName).ConfigureAwait(false),
<#+         if (td.IsINameableBase) { #>
                Name = await GetNameAsync(mockingSetup, contextProfileName).ConfigureAwait(false),
<#+         } #>
<#+         if (td.IsIDisplayableBase) { #>
                DisplayName = await GetDisplayNameAsync(mockingSetup, contextProfileName).ConfigureAwait(false),
<#+         } #>
                // Required Related Properties
<#+         foreach (string requiredRelatedIDProperty in requiredRelatedIDProperties) { #>
                <#= requiredRelatedIDProperty #> = mockingSetup.Raw<#= HelpFunctions.PluralizeName(theType.GetProperties().First(x => x.Name == requiredRelatedIDProperty.Substring(0, requiredRelatedIDProperty.Length - 2)).GetMethod.ReturnType.Name) #>.First().Object.ID,
<#+         } #>
                // Optional Related Properties
<#+         foreach (string optionalRelatedIDProperty in optionalRelatedIDProperties) { #>
                <#= optionalRelatedIDProperty #> = null,
<#+         } #>
            };
        }
    }

    [Trait("Category", "Workflows.<#= schema #>.<#= theTypeNamePluralized #>.Standard")]
    public partial class <#= schema #>_<#= theTypeNamePluralized #>_StandardWorkflowTests : <#= schema #>_<#= theTypeNamePluralized #>_WorkflowTestsBase
    {
        public <#= schema #>_<#= theTypeNamePluralized #>_StandardWorkflowTests(Xunit.Abstractions.ITestOutputHelper testOutputHelper) : base(testOutputHelper) { }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_CheckExists_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_CheckExistsByID_ThatExists_Should_ReturnAnID(),
                Verify_CheckExistsByID_ThatDoesntExist_Should_ReturnNull(),
                Verify_CheckExistsByID_WithAnInvalidID_Should_ThrowAnInvalidOperationException(),
                Verify_CheckExistsByKey_ThatExists_Should_ReturnAnID(),
                Verify_CheckExistsByKey_ThatDoesntExist_Should_ReturnNull(),
                Verify_CheckExistsByKey_WithAnInvalidKey_Should_ThrowAnInvalidOperationException());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Get_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Get_ByID_Should_ReturnAModelWithFullMap(),
                Verify_Get_ByKey_Should_ReturnAModelWithFullMap());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Resolve_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Resolve_WithAnIDThatExists_Should_ReturnAModelWithFullMap(),
                Verify_Resolve_WithAKeyThatExists_Should_ReturnAModelWithFullMap(),
                Verify_ResolveWithAutoGenerate_WithAValidModelThatDoesntExist_Should_CreateAndReturnAModelWithFullMap(),
                Verify_ResolveWithAutoGenerate_WithNoDataAndANullModel_Should_ThrowAnInvalidDataException(),
                Verify_ResolveWithAutoGenerateOptional_WithNoDataAndANullModel_Should_ReturnNull());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Search_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Search_WithAsListingTrue_Should_ReturnAListOfModelsWithListingMapping(),
                Verify_Search_Should_ReturnAListOfModelsWithLiteMapping(),
                Verify_SearchForConnect_Should_ReturnAListOfModelsWithLiteMapping(),
                Verify_GetDigest_Should_ReturnAListOfModelsWithLiteMapping());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Create_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Create_WithValidData_Should_AddToTheDbSetAndSaveChangesAndReturnAModelWithFullMapAndNewID(),
                <#= (theTypeName == "EventLog" || theTypeName == "SalesOrderEvent" || theTypeName == "Contact" || theTypeName == "BrandProduct" || theTypeName == "FranchiseProduct" || theTypeName == "RecordVersion") ? "// Skip: Duplicates Allowed for this Entity kind: " : string.Empty #>Verify_Create_WithADuplicateKey_Should_ThrowAnInvalidOperationException(),
                Verify_Create_WithDataThatCantBeSaved_Should_ThrowAnInvalidDataException(),
                Verify_Create_WithAPositiveNonMaximumId_Should_ThrowAnInvalidOperationException());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Update_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Update_WithValidData_Should_UpdateValuesAndUpdatedDateAndReturnAModelWithFullMap(),
                Verify_Update_WithDataThatCantBeSaved_Should_ThrowAnInvalidDataException(),
                Verify_Update_WithAnIDLessThanOrEqualToZeroOrMinOrMax_Should_ThrowAnInvalidOperationException(),
                Verify_Update_WithAnIDNotInTheData_Should_ThrowAnArgumentException());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Upsert_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Upsert_WithValidData_ThatShouldCreate_Should_AddToTheDbSetAndSaveChangesAndReturnAModelWithFullMapAndNewID(),
                Verify_Upsert_WithValidData_ThatShouldUpdate_Should_UpdateValuesAndUpdatedDateAndReturnAModelWithFullMap(),
                Verify_Upsert_WithValidDataButNoID_ThatShouldUpdate_Should_UpdateValuesAndUpdatedDateAndReturnAModelWithFullMap());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Deactivate_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Deactivate_ByID_WithAValidIDInTheData_Should_UpdateActiveAndUpdatedDateValuesAndSaveChanges(),
                Verify_Deactivate_ByID_WithAnIDNotInTheData_Should_ReturnFalse(),
                Verify_Deactivate_ByID_WithAnInvalidID_Should_ThrowAnInvalidOperationException(),
                Verify_Deactivate_ByID_ThatIsNotActive_Should_NotUpdateItemAndReturnTrue(),
                Verify_Deactivate_ByKey_WithAValidKeyInTheData_Should_UpdateActiveAndUpdatedDateValuesAndSaveChangesAndNoLongerBeGettable(),
                Verify_Deactivate_ByKey_WithAKeyNotInTheData_Should_ReturnFalse(),
                Verify_Deactivate_ByKey_WithAnInvalidKey_Should_ThrowAnInvalidOperationException(),
                Verify_Deactivate_ByKey_ThatIsNotActive_Should_NotUpdateItemAndReturnTrueAndNoLongerBeGettable());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Reactivate_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Reactivate_ByID_WithAValidIDInTheData_Should_UpdateActiveAndUpdatedDateValuesAndSaveChanges(),
                Verify_Reactivate_ByID_WithAnIDNotInTheData_Should_ReturnFalse(),
                Verify_Reactivate_ByID_WithAnInvalidID_Should_ThrowAnInvalidOperationException(),
                Verify_Reactivate_ByID_ThatIsActive_Should_NotUpdateItemAndReturnTrue(),
                Verify_Reactivate_ByKey_WithAValidKeyInTheData_Should_UpdateActiveAndUpdatedDateValuesAndSaveChanges(),
                Verify_Reactivate_ByKey_WithAKeyNotInTheData_Should_ReturnFalse(),
                Verify_Reactivate_ByKey_WithAnInvalidKey_Should_ThrowAnInvalidOperationException(),
                Verify_Reactivate_ByKey_ThatIsActive_Should_NotUpdateItemAndReturnTrue());
        }

        [Fact]
        public virtual async Task Verify_ThisTablesTests_Delete_RunAppropriately()
        {
            await Task.WhenAll(
                Verify_Delete_ByID_WithAValidIDInTheData_Should_RemoveAndSaveChanges(),
                Verify_Delete_ByID_WithAnIDNotInTheData_Should_ReturnTrue(),
                Verify_Delete_ByID_WithAnInvalidID_Should_ThrowAnInvalidOperationException(),
                Verify_Delete_ByKey_WithAValidKeyInTheData_Should_RemoveAndSaveChanges(),
                Verify_Delete_ByKey_WithAKeyNotInTheData_Should_ReturnTrue(),
                Verify_Delete_ByKey_WithAnInvalidKey_Should_ThrowAnInvalidOperationException());
        }
<#+         if (td.IsINameableBase) { #>

        [Fact]
        public virtual async Task Verify_ThisTablesTests_NameableBase_RunAppropriately()
        {
            await Task.WhenAll(
                // Check Exists
                Verify_CheckExistsByName_ThatExists_Should_ReturnAnID(),
                Verify_CheckExistsByName_ThatDoesntExist_Should_ReturnNull(),
                Verify_CheckExistsByName_WithAnInvalidName_Should_ThrowAnInvalidOperationException(),
                // Get
                Verify_Get_ByName_Should_ReturnAModelWithFullMap(),
                // Resolve
                Verify_ResolveNameable_WithANameThatExists_Should_ReturnAModelWithFullMap(),
                Verify_ResolveNameableWithAutoGenerate_WithANameThatExists_Should_ReturnAModelWithFullMap(),
                Verify_ResolveNameableWithAutoGenerate_WithAValidModelThatDoesntExist_Should_CreateAndReturnAModelWithFullMap(),
                Verify_ResolveNameableWithAutoGenerate_WithNoDataAndANullModel_Should_ThrowAnInvalidDataException(),
                Verify_ResolveNameableWithAutoGenerateOptional_WithNoDataAndANullModel_Should_ReturnNull());
        }
<#+         } #>
<#+         if (td.IsIDisplayableBase) { #>

        [Fact]
        public virtual async Task Verify_ThisTablesTests_DisplayableBase_RunAppropriately()
        {
            await Task.WhenAll(
                // Check Exists
                Verify_CheckExistsByDisplayName_ThatExists_Should_ReturnAnID(),
                Verify_CheckExistsByDisplayName_ThatDoesntExist_Should_ReturnNull(),
                Verify_CheckExistsByDisplayName_WithAnInvalidName_Should_ThrowAnInvalidOperationException(),
                // Get
                Verify_Get_ByDisplayName_Should_ReturnAModelWithFullMap(),
                // Resolve
                Verify_Resolve_WithADisplayNameThatExists_Should_ReturnAModelWithFullMap(),
                Verify_ResolveWithAutoGenerate_WithADisplayNameThatExists_Should_ReturnAModelWithFullMap());
        }
<#+         } #>
    }
}
<#+ } // End Function GenerateStandardWorkflowTestsFile #>