<#@ template language="C#"
#><#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll"
#><#@ assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Data.Entity"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Text"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
var skips = new[]
{
    "AccountUserRole", "RolePermission", "UserClaim", "UserLogin", "UserRole", "HangfireAggregatedCounter",
    "HangfireCounter", "HangfireHash", "HangfireJob", "HangfireJobQueue", "HangfireJobParameter", "HangfireList",
    "HangfireSchema", "HangfireServer", "HangfireSet", "HangfireState", "UserSupportRequest", "Report",
    "Permission", "RoleUser",
};
#>// <autogenerated>
// <copyright file="MappingObjectsTests.cs" company="clarity-ventures.com">
// Copyright (c) 2021-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Mapping Objects between DataModel and Model to check property assignments
// and provide additional code coverage.</summary>
// <remarks>This file was auto-generated by MappingObjectsTests.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
#nullable enable
#pragma warning disable CS0618, CS0619
// ReSharper disable SuggestVarOrType_Elsewhere, UnusedVariable
namespace Clarity.Ecommerce.Mapper.Testing
{
    using System;
    using System.Diagnostics;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using Moq;
    using StructureMap;
    using Xunit;

    [Trait("Category", "Mapping.ObjectProperties")]
    public partial class MappingObjectsTests
    {
        [Fact, Obsolete]
        public async Task Verify_AssigningAndReadingAnyCustomEntityProperties_Works_Async()
        {
            const string contextProfileName = "MappingObjectsTests|Verify_AssigningAndReadingAnyCustomEntityProperties_Works";
            using (var childContainer = RegistryLoader.RootContainer.CreateChildContainer())
            {
                var mockingSetup = new MockingSetup { DoAll = true, };
                await DoSetupAsync(childContainer, mockingSetup, contextProfileName).ConfigureAwait(false);
                var timestamp = new DateTime(<#= DateTime.Today.Year #>, 1, 1);
                var paging = new Paging(10, 0);
                var sort = Array.Empty<Sort>();
                var grouping = Array.Empty<Grouping>();
                await Task.WhenAll(
<#  foreach (var @group in tableClasses) { #>
<#      foreach (var table in @group) {
            if (skips.Contains(table.Name) || HelpFunctions.SwapToModelType(table.Name) == "SalesItemBase")
            { #>
                    // Skipping <#= @group.Key #> / <#= table.Name #>
<#              continue;
            } #>
                    Verify_AssigningAndReadingAnyCustomEntityProperties_<#= @group.Key #>_<#= table.Name #>_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
<#      } #>
<#  } #>
                    Task.CompletedTask);
            }
            RegistryLoader.RemoveOverrideContainer(contextProfileName);
        }

<#  foreach (var @group in tableClasses) { #>
        #region <#= @group.Key #>
<#      foreach (var table in @group) {
            if (skips.Contains(table.Name) || HelpFunctions.SwapToModelType(table.Name) == "SalesItemBase")
            { #>
                // Skipping <#= @group.Key #> / <#= table.Name #>
<#              continue;
            }
                var tableNameLowerFirst = HelpFunctions.LowerFirstCharacter(table.Name); #>
        #region <#= @group.Key #> / <#= table.Name #>
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_<#= @group.Key #>_<#= table.Name #>_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.<#= HelpFunctions.PluralizeName(table.Name) #>;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<I<#= HelpFunctions.SwapToModelType(table.Name) #>Model>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.Create<#= table.Name #>Entity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.Create<#= table.Name #>ModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.Create<#= table.Name #>ModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.Create<#= table.Name #>ModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstList<#= table.Name #>AndMapTo<#= HelpFunctions.SwapToModelType(table.Name) #>Model(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFull<#= table.Name #>AndMapTo<#= HelpFunctions.SwapToModelType(table.Name) #>Model(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleList<#= table.Name #>AndMapTo<#= HelpFunctions.SwapToModelType(table.Name) #>Model(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLite<#= table.Name #>AndMapTo<#= HelpFunctions.SwapToModelType(table.Name) #>Model(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFull<#= table.Name #>AndMapTo<#= HelpFunctions.SwapToModelType(table.Name) #>Model(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectList<#= table.Name #>AndMapTo<#= HelpFunctions.SwapToModelType(table.Name) #>Model(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLite<#= table.Name #>AndMapTo<#= HelpFunctions.SwapToModelType(table.Name) #>Model(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFull<#= table.Name #>AndMapTo<#= HelpFunctions.SwapToModelType(table.Name) #>Model(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectList<#= table.Name #>AndMapTo<#= HelpFunctions.SwapToModelType(table.Name) #>Model(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLite<#= table.Name #>AndMapTo<#= HelpFunctions.SwapToModelType(table.Name) #>Model(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFull<#= table.Name #>AndMapTo<#= HelpFunctions.SwapToModelType(table.Name) #>Model(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
<#      } #>
        #endregion
<#  } #>

        [DebuggerStepThrough]
        private async Task DoSetupAsync(IContainer childContainer, MockingSetup mockingSetup, string contextProfileName)
        {
            await mockingSetup.DoMockingSetupForContextAsync(contextProfileName).ConfigureAwait(false);
            childContainer.Configure(x =>
            {
                x.For<IClarityEcommerceEntities>().Use(() => mockingSetup.MockContext.Object);
                x.AddRegistry(new DataModelTestingRegistry(mockingSetup));
            });
            RegistryLoader.OverrideContainer(childContainer, contextProfileName);
        }
    }
}
