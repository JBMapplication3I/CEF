// <autogenerated>
// <copyright file="MappingObjectsTests.cs" company="clarity-ventures.com">
// Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Mapping Objects between DataModel and Model to check property assignments
// and provide additional code coverage.</summary>
// <remarks>This file was auto-generated by MappingObjectsTests.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
#nullable enable
#pragma warning disable CS0618, CS0619
// ReSharper disable SuggestVarOrType_Elsewhere, UnusedVariable
namespace Clarity.Ecommerce.Mapper.Testing
{
    using System;
    using System.Diagnostics;
    using System.Linq;
    using System.Threading.Tasks;
    using DataModel;
    using Ecommerce.Testing;
    using Interfaces.DataModel;
    using Interfaces.Models;
    using Moq;
    using StructureMap;
    using Xunit;

    [Trait("Category", "Mapping.ObjectProperties")]
    public partial class MappingObjectsTests
    {
        [Fact, Obsolete]
        public async Task Verify_AssigningAndReadingAnyCustomEntityProperties_Works_Async()
        {
            const string contextProfileName = "MappingObjectsTests|Verify_AssigningAndReadingAnyCustomEntityProperties_Works";
            using (var childContainer = RegistryLoader.RootContainer.CreateChildContainer())
            {
                var mockingSetup = new MockingSetup { DoAll = true, };
                await DoSetupAsync(childContainer, mockingSetup, contextProfileName).ConfigureAwait(false);
                var timestamp = new DateTime(2023, 1, 1);
                var paging = new Paging(10, 0);
                var sort = Array.Empty<Sort>();
                var grouping = Array.Empty<Grouping>();
                await Task.WhenAll(
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_Account_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountAssociation_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountAssociationType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountContact_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountCurrency_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountFile_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountPricePoint_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountProduct_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountProductType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountUsageBalance_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Accounts / AccountUserRole
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_Contractor_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_ServiceArea_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_Ad_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdAccount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdBrand_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdFranchise_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdStore_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdZone_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdZoneAccess_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_Zone_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_ZoneStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_ZoneType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Attributes_AttributeGroup_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Attributes_AttributeTab_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Attributes_AttributeType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Attributes_GeneralAttribute_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Attributes_GeneralAttributePredefinedOption_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_Auction_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_AuctionCategory_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_AuctionStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_AuctionType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_Bid_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_BidStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_BrandAuction_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_FranchiseAuction_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_Lot_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_LotCategory_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_LotGroup_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_LotStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_LotType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_StoreAuction_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Badges_Badge_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Badges_BadgeImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Badges_BadgeImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Badges_BadgeType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_Brand_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandAccount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandCategory_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandCurrency_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandFranchise_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandInventoryLocation_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandInventoryLocationType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandLanguage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandManufacturer_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandProduct_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandSiteDomain_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandStore_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandUser_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandVendor_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEvent_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEventDetail_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEventFile_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEventImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEventImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEventProduct_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEventStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEventType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_UserEventAttendance_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_UserEventAttendanceType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Categories_Category_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Categories_CategoryFile_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Categories_CategoryImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Categories_CategoryImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Categories_CategoryType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_Contact_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_ContactImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_ContactImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_ContactType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Contacts / Permission
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_ProfanityFilter_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_ReferralCode_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_ReferralCodeStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_ReferralCodeType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Contacts / RolePermission
                    // Skipping Contacts / RoleUser
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_User_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Contacts / UserClaim
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_UserFile_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_UserImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_UserImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Contacts / UserLogin
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_UserOnlineStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_UserProductType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Contacts / UserRole
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_UserStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_UserType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Counters_Counter_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Counters_CounterLog_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Counters_CounterLogType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Counters_CounterType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Currencies_Currency_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Currencies_CurrencyConversion_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Currencies_CurrencyImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Currencies_CurrencyImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Currencies_HistoricalCurrencyRate_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedCartDiscount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedCartItemDiscount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_Discount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountAccount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountAccountType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountBrand_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountCategory_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountCode_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountCountry_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountFranchise_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountManufacturer_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountProduct_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountProductType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountShipCarrierMethod_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountStore_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountUser_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountUserRole_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountVendor_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedPurchaseOrderDiscount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedPurchaseOrderItemDiscount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesInvoiceDiscount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesInvoiceItemDiscount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesOrderDiscount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesOrderItemDiscount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesQuoteDiscount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesQuoteItemDiscount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesReturnDiscount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesReturnItemDiscount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSampleRequestDiscount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSampleRequestItemDiscount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Favorites_FavoriteCategory_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Favorites_FavoriteManufacturer_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Favorites_FavoriteShipCarrier_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Favorites_FavoriteStore_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Favorites_FavoriteVendor_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_Franchise_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseAccount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseCategory_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseCountry_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseCurrency_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseDistrict_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseInventoryLocation_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseInventoryLocationType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseLanguage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseManufacturer_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseProduct_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseRegion_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseSiteDomain_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseStore_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseUser_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseVendor_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_Address_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_Country_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_CountryCurrency_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_CountryImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_CountryImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_CountryLanguage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_District_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_DistrictCurrency_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_DistrictImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_DistrictImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_DistrictLanguage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_HistoricalAddressValidation_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_PhonePrefixLookup_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_Region_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_RegionCurrency_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_RegionImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_RegionImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_RegionLanguage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_ZipCode_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Globalization_Language_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Globalization_LanguageImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Globalization_LanguageImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Globalization_UiKey_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Globalization_UiTranslation_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Groups_Group_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Groups_GroupStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Groups_GroupType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Groups_GroupUser_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Hangfire / HangfireAggregatedCounter
                    // Skipping Hangfire / HangfireCounter
                    // Skipping Hangfire / HangfireHash
                    // Skipping Hangfire / HangfireJob
                    // Skipping Hangfire / HangfireJobParameter
                    // Skipping Hangfire / HangfireJobQueue
                    // Skipping Hangfire / HangfireList
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Hangfire_ScheduledJobConfiguration_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Hangfire_ScheduledJobConfigurationSetting_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Hangfire / HangfireSchema
                    // Skipping Hangfire / HangfireServer
                    // Skipping Hangfire / HangfireSet
                    // Skipping Hangfire / HangfireState
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Inventory_InventoryLocation_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Inventory_InventoryLocationRegion_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Inventory_InventoryLocationSection_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Inventory_InventoryLocationUser_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoice_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceContact_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceEvent_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceEventType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceFile_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Invoicing / SalesInvoiceItem
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceItemTarget_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceState_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesOrderSalesInvoice_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Manufacturers_Manufacturer_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Manufacturers_ManufacturerImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Manufacturers_ManufacturerImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Manufacturers_ManufacturerProduct_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Manufacturers_ManufacturerType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Media_StoredFile_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_Conversation_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_ConversationUser_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_EmailQueue_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_EmailQueueAttachment_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_EmailStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_EmailTemplate_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_EmailType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_Message_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_MessageAttachment_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_MessageRecipient_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_ProductNotification_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Messaging / UserSupportRequest
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrder_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderContact_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderEvent_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderEventType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderFile_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Ordering / SalesOrderItem
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderItemTarget_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderState_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_Membership_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_MembershipAdZoneAccess_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_MembershipAdZoneAccessByLevel_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_MembershipLevel_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_MembershipRepeatType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_Payment_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_PaymentMethod_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_PaymentStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_PaymentType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_RepeatType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_SalesInvoicePayment_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_SalesOrderPayment_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_SalesReturnPayment_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_Subscription_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_SubscriptionHistory_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_SubscriptionStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_SubscriptionType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_SubscriptionTypeRepeatType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_Wallet_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PricePoint_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRounding_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRule_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleAccount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleAccountType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleBrand_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleCategory_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleCountry_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleFranchise_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleManufacturer_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleProduct_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleProductType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleStore_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleUserRole_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleVendor_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_FutureImport_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_FutureImportStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_Product_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductAssociation_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductAssociationType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductCategory_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductDownload_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductDownloadType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductFile_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductInventoryLocationSection_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductMembershipLevel_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductPricePoint_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductRestriction_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductShipCarrierMethod_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductSubscriptionType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrder_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderContact_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderEvent_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderEventType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderFile_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Purchasing / PurchaseOrderItem
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderItemTarget_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderState_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_SalesOrderPurchaseOrder_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Questionnaire_Answer_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Questionnaire_Question_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Questionnaire_QuestionOption_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Questionnaire_QuestionType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuote_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteCategory_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteContact_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteEvent_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteEventType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteFile_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Quoting / SalesQuoteItem
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteItemTarget_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteSalesOrder_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteState_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Reporting / Report
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Reporting_ReportType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturn_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnContact_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnEvent_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnEventType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnFile_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Returning / SalesReturnItem
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnItemTarget_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnReason_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnSalesOrder_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnState_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Reviews_Review_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Reviews_ReviewType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Sales_SalesGroup_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Sales_SalesItemTargetType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequest_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestContact_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestEvent_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestEventType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestFile_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Sampling / SampleRequestItem
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestItemTarget_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestState_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Scheduling_Appointment_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Scheduling_AppointmentStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Scheduling_AppointmentType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Scheduling_Calendar_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Scheduling_CalendarAppointment_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Scouting_Scout_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Scouting_ScoutCategory_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Scouting_ScoutCategoryType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_Package_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_PackageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_RateQuote_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_ShipCarrier_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_ShipCarrierMethod_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_Shipment_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_ShipmentEvent_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_ShipmentStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_ShipmentType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_Cart_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartContact_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartEvent_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartEventType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartFile_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    // Skipping Shopping / CartItem
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartItemTarget_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartState_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_SiteDomain_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_SiteDomainSocialProvider_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_SocialProvider_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_Store_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreAccount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreBadge_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreCategory_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreContact_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreCountry_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreDistrict_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreInventoryLocation_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreInventoryLocationType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreManufacturer_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreProduct_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreRegion_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreSubscription_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreUser_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreVendor_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_System_ImportExportMapping_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_System_Note_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_System_NoteType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_System_RecordVersion_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_System_RecordVersionType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_System_Setting_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_System_SettingGroup_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_System_SettingType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_System_EventLog_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tax_HistoricalTaxRate_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tax_TaxCountry_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tax_TaxDistrict_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tax_TaxRegion_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_Campaign_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_CampaignAd_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_CampaignStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_CampaignType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_Event_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_EventStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_EventType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_IPOrganization_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_IPOrganizationStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_PageView_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_PageViewEvent_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_PageViewStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_PageViewType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_Visit_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_Visitor_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_VisitStatus_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Vendors_Vendor_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Vendors_VendorAccount_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Vendors_VendorImage_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Vendors_VendorImageType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Vendors_VendorManufacturer_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Vendors_VendorProduct_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Verify_AssigningAndReadingAnyCustomEntityProperties_Vendors_VendorType_Works_Async(mockingSetup, timestamp, paging, sort, grouping, contextProfileName),
                    Task.CompletedTask);
            }
            RegistryLoader.RemoveOverrideContainer(contextProfileName);
        }

        #region Accounts
        #region Accounts / Account
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_Account_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Accounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAccountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAccountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAccountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAccountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAccountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAccountAndMapToAccountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAccountAndMapToAccountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAccountAndMapToAccountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAccountAndMapToAccountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAccountAndMapToAccountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAccountAndMapToAccountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAccountAndMapToAccountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAccountAndMapToAccountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAccountAndMapToAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAccountAndMapToAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAccountAndMapToAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Accounts / AccountAssociation
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountAssociation_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AccountAssociations;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAccountAssociationModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAccountAssociationEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAccountAssociationModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAccountAssociationModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAccountAssociationModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAccountAssociationAndMapToAccountAssociationModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAccountAssociationAndMapToAccountAssociationModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAccountAssociationAndMapToAccountAssociationModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAccountAssociationAndMapToAccountAssociationModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAccountAssociationAndMapToAccountAssociationModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAccountAssociationAndMapToAccountAssociationModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAccountAssociationAndMapToAccountAssociationModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAccountAssociationAndMapToAccountAssociationModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAccountAssociationAndMapToAccountAssociationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAccountAssociationAndMapToAccountAssociationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAccountAssociationAndMapToAccountAssociationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Accounts / AccountAssociationType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountAssociationType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AccountAssociationTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAccountAssociationTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAccountAssociationTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAccountAssociationTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAccountAssociationTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAccountAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAccountAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAccountAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAccountAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAccountAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAccountAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAccountAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAccountAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAccountAssociationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAccountAssociationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAccountAssociationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Accounts / AccountContact
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountContact_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AccountContacts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAccountContactModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAccountContactEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAccountContactModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAccountContactModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAccountContactModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAccountContactAndMapToAccountContactModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAccountContactAndMapToAccountContactModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAccountContactAndMapToAccountContactModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAccountContactAndMapToAccountContactModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAccountContactAndMapToAccountContactModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAccountContactAndMapToAccountContactModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAccountContactAndMapToAccountContactModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAccountContactAndMapToAccountContactModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAccountContactAndMapToAccountContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAccountContactAndMapToAccountContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAccountContactAndMapToAccountContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Accounts / AccountCurrency
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountCurrency_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AccountCurrencies;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAccountCurrencyModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAccountCurrencyEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAccountCurrencyModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAccountCurrencyModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAccountCurrencyModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAccountCurrencyAndMapToAccountCurrencyModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAccountCurrencyAndMapToAccountCurrencyModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAccountCurrencyAndMapToAccountCurrencyModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAccountCurrencyAndMapToAccountCurrencyModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAccountCurrencyAndMapToAccountCurrencyModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAccountCurrencyAndMapToAccountCurrencyModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAccountCurrencyAndMapToAccountCurrencyModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAccountCurrencyAndMapToAccountCurrencyModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAccountCurrencyAndMapToAccountCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAccountCurrencyAndMapToAccountCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAccountCurrencyAndMapToAccountCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Accounts / AccountFile
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountFile_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AccountFiles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAccountFileModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAccountFileEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAccountFileModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAccountFileModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAccountFileModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAccountFileAndMapToAccountFileModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAccountFileAndMapToAccountFileModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAccountFileAndMapToAccountFileModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAccountFileAndMapToAccountFileModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAccountFileAndMapToAccountFileModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAccountFileAndMapToAccountFileModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAccountFileAndMapToAccountFileModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAccountFileAndMapToAccountFileModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAccountFileAndMapToAccountFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAccountFileAndMapToAccountFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAccountFileAndMapToAccountFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Accounts / AccountImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AccountImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAccountImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAccountImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAccountImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAccountImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAccountImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAccountImageAndMapToAccountImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAccountImageAndMapToAccountImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAccountImageAndMapToAccountImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAccountImageAndMapToAccountImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAccountImageAndMapToAccountImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAccountImageAndMapToAccountImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAccountImageAndMapToAccountImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAccountImageAndMapToAccountImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAccountImageAndMapToAccountImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAccountImageAndMapToAccountImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAccountImageAndMapToAccountImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Accounts / AccountImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AccountImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAccountImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAccountImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAccountImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAccountImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAccountImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAccountImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAccountImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAccountImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAccountImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAccountImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAccountImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAccountImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAccountImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAccountImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAccountImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Accounts / AccountPricePoint
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountPricePoint_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AccountPricePoints;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAccountPricePointModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAccountPricePointEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAccountPricePointModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAccountPricePointModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAccountPricePointModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAccountPricePointAndMapToAccountPricePointModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAccountPricePointAndMapToAccountPricePointModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAccountPricePointAndMapToAccountPricePointModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAccountPricePointAndMapToAccountPricePointModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAccountPricePointAndMapToAccountPricePointModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAccountPricePointAndMapToAccountPricePointModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAccountPricePointAndMapToAccountPricePointModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAccountPricePointAndMapToAccountPricePointModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAccountPricePointAndMapToAccountPricePointModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAccountPricePointAndMapToAccountPricePointModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAccountPricePointAndMapToAccountPricePointModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Accounts / AccountProduct
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountProduct_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AccountProducts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAccountProductModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAccountProductEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAccountProductModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAccountProductModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAccountProductModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAccountProductAndMapToAccountProductModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAccountProductAndMapToAccountProductModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAccountProductAndMapToAccountProductModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAccountProductAndMapToAccountProductModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAccountProductAndMapToAccountProductModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAccountProductAndMapToAccountProductModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAccountProductAndMapToAccountProductModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAccountProductAndMapToAccountProductModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAccountProductAndMapToAccountProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAccountProductAndMapToAccountProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAccountProductAndMapToAccountProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Accounts / AccountProductType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountProductType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AccountProductTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAccountProductTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAccountProductTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAccountProductTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAccountProductTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAccountProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAccountProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAccountProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAccountProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAccountProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAccountProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAccountProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAccountProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAccountProductTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAccountProductTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAccountProductTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Accounts / AccountStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AccountStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAccountStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAccountStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAccountStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAccountStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAccountStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAccountStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAccountStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAccountStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAccountStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAccountStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAccountStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAccountStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAccountStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAccountStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAccountStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Accounts / AccountType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AccountTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAccountTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAccountTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAccountTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAccountTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAccountTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAccountTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAccountTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAccountTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAccountTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAccountTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAccountTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAccountTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAccountTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAccountTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAccountTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Accounts / AccountUsageBalance
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_AccountUsageBalance_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AccountUsageBalances;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAccountUsageBalanceModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAccountUsageBalanceEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAccountUsageBalanceModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAccountUsageBalanceModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAccountUsageBalanceModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAccountUsageBalanceAndMapToAccountUsageBalanceModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAccountUsageBalanceAndMapToAccountUsageBalanceModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAccountUsageBalanceAndMapToAccountUsageBalanceModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAccountUsageBalanceAndMapToAccountUsageBalanceModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAccountUsageBalanceAndMapToAccountUsageBalanceModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAccountUsageBalanceAndMapToAccountUsageBalanceModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAccountUsageBalanceAndMapToAccountUsageBalanceModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAccountUsageBalanceAndMapToAccountUsageBalanceModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAccountUsageBalanceAndMapToAccountUsageBalanceModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAccountUsageBalanceAndMapToAccountUsageBalanceModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAccountUsageBalanceAndMapToAccountUsageBalanceModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Accounts / AccountUserRole
        #region Accounts / Contractor
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_Contractor_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Contractors;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IContractorModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateContractorEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateContractorModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateContractorModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateContractorModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListContractorAndMapToContractorModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullContractorAndMapToContractorModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListContractorAndMapToContractorModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteContractorAndMapToContractorModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullContractorAndMapToContractorModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListContractorAndMapToContractorModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteContractorAndMapToContractorModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullContractorAndMapToContractorModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListContractorAndMapToContractorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteContractorAndMapToContractorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullContractorAndMapToContractorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Accounts / ServiceArea
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Accounts_ServiceArea_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ServiceAreas;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IServiceAreaModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateServiceAreaEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateServiceAreaModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateServiceAreaModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateServiceAreaModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListServiceAreaAndMapToServiceAreaModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullServiceAreaAndMapToServiceAreaModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListServiceAreaAndMapToServiceAreaModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteServiceAreaAndMapToServiceAreaModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullServiceAreaAndMapToServiceAreaModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListServiceAreaAndMapToServiceAreaModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteServiceAreaAndMapToServiceAreaModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullServiceAreaAndMapToServiceAreaModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListServiceAreaAndMapToServiceAreaModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteServiceAreaAndMapToServiceAreaModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullServiceAreaAndMapToServiceAreaModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Advertising
        #region Advertising / Ad
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_Ad_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Ads;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAdModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAdEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAdModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAdModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAdModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAdAndMapToAdModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAdAndMapToAdModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAdAndMapToAdModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAdAndMapToAdModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAdAndMapToAdModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAdAndMapToAdModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAdAndMapToAdModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAdAndMapToAdModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAdAndMapToAdModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAdAndMapToAdModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAdAndMapToAdModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Advertising / AdAccount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdAccount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AdAccounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAdAccountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAdAccountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAdAccountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAdAccountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAdAccountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAdAccountAndMapToAdAccountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAdAccountAndMapToAdAccountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAdAccountAndMapToAdAccountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAdAccountAndMapToAdAccountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAdAccountAndMapToAdAccountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAdAccountAndMapToAdAccountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAdAccountAndMapToAdAccountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAdAccountAndMapToAdAccountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAdAccountAndMapToAdAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAdAccountAndMapToAdAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAdAccountAndMapToAdAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Advertising / AdBrand
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdBrand_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AdBrands;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAdBrandModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAdBrandEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAdBrandModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAdBrandModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAdBrandModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAdBrandAndMapToAdBrandModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAdBrandAndMapToAdBrandModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAdBrandAndMapToAdBrandModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAdBrandAndMapToAdBrandModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAdBrandAndMapToAdBrandModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAdBrandAndMapToAdBrandModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAdBrandAndMapToAdBrandModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAdBrandAndMapToAdBrandModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAdBrandAndMapToAdBrandModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAdBrandAndMapToAdBrandModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAdBrandAndMapToAdBrandModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Advertising / AdFranchise
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdFranchise_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AdFranchises;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAdFranchiseModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAdFranchiseEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAdFranchiseModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAdFranchiseModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAdFranchiseModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAdFranchiseAndMapToAdFranchiseModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAdFranchiseAndMapToAdFranchiseModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAdFranchiseAndMapToAdFranchiseModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAdFranchiseAndMapToAdFranchiseModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAdFranchiseAndMapToAdFranchiseModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAdFranchiseAndMapToAdFranchiseModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAdFranchiseAndMapToAdFranchiseModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAdFranchiseAndMapToAdFranchiseModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAdFranchiseAndMapToAdFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAdFranchiseAndMapToAdFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAdFranchiseAndMapToAdFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Advertising / AdImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AdImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAdImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAdImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAdImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAdImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAdImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAdImageAndMapToAdImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAdImageAndMapToAdImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAdImageAndMapToAdImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAdImageAndMapToAdImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAdImageAndMapToAdImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAdImageAndMapToAdImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAdImageAndMapToAdImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAdImageAndMapToAdImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAdImageAndMapToAdImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAdImageAndMapToAdImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAdImageAndMapToAdImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Advertising / AdImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AdImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAdImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAdImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAdImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAdImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAdImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAdImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAdImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAdImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAdImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAdImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAdImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAdImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAdImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAdImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAdImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Advertising / AdStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AdStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAdStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAdStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAdStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAdStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAdStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAdStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAdStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAdStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAdStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAdStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAdStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAdStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAdStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAdStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAdStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Advertising / AdStore
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdStore_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AdStores;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAdStoreModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAdStoreEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAdStoreModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAdStoreModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAdStoreModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAdStoreAndMapToAdStoreModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAdStoreAndMapToAdStoreModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAdStoreAndMapToAdStoreModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAdStoreAndMapToAdStoreModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAdStoreAndMapToAdStoreModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAdStoreAndMapToAdStoreModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAdStoreAndMapToAdStoreModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAdStoreAndMapToAdStoreModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAdStoreAndMapToAdStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAdStoreAndMapToAdStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAdStoreAndMapToAdStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Advertising / AdType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AdTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAdTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAdTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAdTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAdTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAdTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAdTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAdTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAdTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAdTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAdTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAdTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAdTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAdTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAdTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAdTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Advertising / AdZone
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdZone_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AdZones;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAdZoneModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAdZoneEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAdZoneModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAdZoneModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAdZoneModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAdZoneAndMapToAdZoneModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAdZoneAndMapToAdZoneModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAdZoneAndMapToAdZoneModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAdZoneAndMapToAdZoneModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAdZoneAndMapToAdZoneModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAdZoneAndMapToAdZoneModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAdZoneAndMapToAdZoneModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAdZoneAndMapToAdZoneModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAdZoneAndMapToAdZoneModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAdZoneAndMapToAdZoneModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAdZoneAndMapToAdZoneModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Advertising / AdZoneAccess
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_AdZoneAccess_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AdZoneAccesses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAdZoneAccessModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAdZoneAccessEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAdZoneAccessModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAdZoneAccessModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAdZoneAccessModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAdZoneAccessAndMapToAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAdZoneAccessAndMapToAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAdZoneAccessAndMapToAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAdZoneAccessAndMapToAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAdZoneAccessAndMapToAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAdZoneAccessAndMapToAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAdZoneAccessAndMapToAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAdZoneAccessAndMapToAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAdZoneAccessAndMapToAdZoneAccessModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAdZoneAccessAndMapToAdZoneAccessModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAdZoneAccessAndMapToAdZoneAccessModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Advertising / Zone
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_Zone_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Zones;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IZoneModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateZoneEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateZoneModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateZoneModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateZoneModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListZoneAndMapToZoneModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullZoneAndMapToZoneModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListZoneAndMapToZoneModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteZoneAndMapToZoneModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullZoneAndMapToZoneModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListZoneAndMapToZoneModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteZoneAndMapToZoneModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullZoneAndMapToZoneModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListZoneAndMapToZoneModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteZoneAndMapToZoneModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullZoneAndMapToZoneModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Advertising / ZoneStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_ZoneStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ZoneStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateZoneStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateZoneStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateZoneStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateZoneStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListZoneStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullZoneStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListZoneStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteZoneStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullZoneStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListZoneStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteZoneStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullZoneStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListZoneStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteZoneStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullZoneStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Advertising / ZoneType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Advertising_ZoneType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ZoneTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateZoneTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateZoneTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateZoneTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateZoneTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListZoneTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullZoneTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListZoneTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteZoneTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullZoneTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListZoneTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteZoneTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullZoneTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListZoneTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteZoneTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullZoneTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Attributes
        #region Attributes / AttributeGroup
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Attributes_AttributeGroup_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AttributeGroups;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAttributeGroupModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAttributeGroupEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAttributeGroupModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAttributeGroupModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAttributeGroupModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAttributeGroupAndMapToAttributeGroupModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAttributeGroupAndMapToAttributeGroupModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAttributeGroupAndMapToAttributeGroupModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAttributeGroupAndMapToAttributeGroupModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAttributeGroupAndMapToAttributeGroupModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAttributeGroupAndMapToAttributeGroupModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAttributeGroupAndMapToAttributeGroupModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAttributeGroupAndMapToAttributeGroupModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAttributeGroupAndMapToAttributeGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAttributeGroupAndMapToAttributeGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAttributeGroupAndMapToAttributeGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Attributes / AttributeTab
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Attributes_AttributeTab_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AttributeTabs;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAttributeTabModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAttributeTabEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAttributeTabModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAttributeTabModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAttributeTabModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAttributeTabAndMapToAttributeTabModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAttributeTabAndMapToAttributeTabModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAttributeTabAndMapToAttributeTabModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAttributeTabAndMapToAttributeTabModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAttributeTabAndMapToAttributeTabModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAttributeTabAndMapToAttributeTabModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAttributeTabAndMapToAttributeTabModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAttributeTabAndMapToAttributeTabModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAttributeTabAndMapToAttributeTabModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAttributeTabAndMapToAttributeTabModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAttributeTabAndMapToAttributeTabModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Attributes / AttributeType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Attributes_AttributeType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AttributeTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAttributeTypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAttributeTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAttributeTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAttributeTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAttributeTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAttributeTypeAndMapToAttributeTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAttributeTypeAndMapToAttributeTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAttributeTypeAndMapToAttributeTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAttributeTypeAndMapToAttributeTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAttributeTypeAndMapToAttributeTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAttributeTypeAndMapToAttributeTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAttributeTypeAndMapToAttributeTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAttributeTypeAndMapToAttributeTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAttributeTypeAndMapToAttributeTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAttributeTypeAndMapToAttributeTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAttributeTypeAndMapToAttributeTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Attributes / GeneralAttribute
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Attributes_GeneralAttribute_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.GeneralAttributes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IGeneralAttributeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateGeneralAttributeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateGeneralAttributeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateGeneralAttributeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateGeneralAttributeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListGeneralAttributeAndMapToGeneralAttributeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullGeneralAttributeAndMapToGeneralAttributeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListGeneralAttributeAndMapToGeneralAttributeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteGeneralAttributeAndMapToGeneralAttributeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullGeneralAttributeAndMapToGeneralAttributeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListGeneralAttributeAndMapToGeneralAttributeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteGeneralAttributeAndMapToGeneralAttributeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullGeneralAttributeAndMapToGeneralAttributeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListGeneralAttributeAndMapToGeneralAttributeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteGeneralAttributeAndMapToGeneralAttributeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullGeneralAttributeAndMapToGeneralAttributeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Attributes / GeneralAttributePredefinedOption
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Attributes_GeneralAttributePredefinedOption_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.GeneralAttributePredefinedOptions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IGeneralAttributePredefinedOptionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateGeneralAttributePredefinedOptionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateGeneralAttributePredefinedOptionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateGeneralAttributePredefinedOptionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateGeneralAttributePredefinedOptionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListGeneralAttributePredefinedOptionAndMapToGeneralAttributePredefinedOptionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullGeneralAttributePredefinedOptionAndMapToGeneralAttributePredefinedOptionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListGeneralAttributePredefinedOptionAndMapToGeneralAttributePredefinedOptionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteGeneralAttributePredefinedOptionAndMapToGeneralAttributePredefinedOptionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullGeneralAttributePredefinedOptionAndMapToGeneralAttributePredefinedOptionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListGeneralAttributePredefinedOptionAndMapToGeneralAttributePredefinedOptionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteGeneralAttributePredefinedOptionAndMapToGeneralAttributePredefinedOptionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullGeneralAttributePredefinedOptionAndMapToGeneralAttributePredefinedOptionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListGeneralAttributePredefinedOptionAndMapToGeneralAttributePredefinedOptionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteGeneralAttributePredefinedOptionAndMapToGeneralAttributePredefinedOptionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullGeneralAttributePredefinedOptionAndMapToGeneralAttributePredefinedOptionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Auctions
        #region Auctions / Auction
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_Auction_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Auctions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAuctionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAuctionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAuctionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAuctionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAuctionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAuctionAndMapToAuctionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAuctionAndMapToAuctionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAuctionAndMapToAuctionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAuctionAndMapToAuctionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAuctionAndMapToAuctionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAuctionAndMapToAuctionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAuctionAndMapToAuctionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAuctionAndMapToAuctionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAuctionAndMapToAuctionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAuctionAndMapToAuctionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAuctionAndMapToAuctionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Auctions / AuctionCategory
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_AuctionCategory_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AuctionCategories;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAuctionCategoryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAuctionCategoryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAuctionCategoryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAuctionCategoryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAuctionCategoryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAuctionCategoryAndMapToAuctionCategoryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAuctionCategoryAndMapToAuctionCategoryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAuctionCategoryAndMapToAuctionCategoryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAuctionCategoryAndMapToAuctionCategoryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAuctionCategoryAndMapToAuctionCategoryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAuctionCategoryAndMapToAuctionCategoryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAuctionCategoryAndMapToAuctionCategoryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAuctionCategoryAndMapToAuctionCategoryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAuctionCategoryAndMapToAuctionCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAuctionCategoryAndMapToAuctionCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAuctionCategoryAndMapToAuctionCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Auctions / AuctionStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_AuctionStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AuctionStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAuctionStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAuctionStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAuctionStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAuctionStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAuctionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAuctionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAuctionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAuctionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAuctionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAuctionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAuctionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAuctionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAuctionStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAuctionStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAuctionStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Auctions / AuctionType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_AuctionType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AuctionTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAuctionTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAuctionTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAuctionTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAuctionTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAuctionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAuctionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAuctionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAuctionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAuctionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAuctionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAuctionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAuctionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAuctionTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAuctionTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAuctionTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Auctions / Bid
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_Bid_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Bids;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBidModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBidEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBidModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBidModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBidModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBidAndMapToBidModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBidAndMapToBidModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBidAndMapToBidModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBidAndMapToBidModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBidAndMapToBidModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBidAndMapToBidModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBidAndMapToBidModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBidAndMapToBidModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBidAndMapToBidModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBidAndMapToBidModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBidAndMapToBidModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Auctions / BidStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_BidStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BidStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBidStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBidStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBidStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBidStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBidStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBidStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBidStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBidStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBidStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBidStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBidStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBidStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBidStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBidStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBidStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Auctions / BrandAuction
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_BrandAuction_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandAuctions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandAuctionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandAuctionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandAuctionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandAuctionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandAuctionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandAuctionAndMapToBrandAuctionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandAuctionAndMapToBrandAuctionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandAuctionAndMapToBrandAuctionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandAuctionAndMapToBrandAuctionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandAuctionAndMapToBrandAuctionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandAuctionAndMapToBrandAuctionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandAuctionAndMapToBrandAuctionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandAuctionAndMapToBrandAuctionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandAuctionAndMapToBrandAuctionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandAuctionAndMapToBrandAuctionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandAuctionAndMapToBrandAuctionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Auctions / FranchiseAuction
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_FranchiseAuction_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseAuctions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseAuctionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseAuctionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseAuctionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseAuctionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseAuctionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseAuctionAndMapToFranchiseAuctionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseAuctionAndMapToFranchiseAuctionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseAuctionAndMapToFranchiseAuctionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseAuctionAndMapToFranchiseAuctionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseAuctionAndMapToFranchiseAuctionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseAuctionAndMapToFranchiseAuctionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseAuctionAndMapToFranchiseAuctionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseAuctionAndMapToFranchiseAuctionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseAuctionAndMapToFranchiseAuctionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseAuctionAndMapToFranchiseAuctionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseAuctionAndMapToFranchiseAuctionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Auctions / Lot
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_Lot_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Lots;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ILotModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateLotEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateLotModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateLotModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateLotModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListLotAndMapToLotModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullLotAndMapToLotModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListLotAndMapToLotModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteLotAndMapToLotModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullLotAndMapToLotModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListLotAndMapToLotModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteLotAndMapToLotModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullLotAndMapToLotModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListLotAndMapToLotModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteLotAndMapToLotModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullLotAndMapToLotModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Auctions / LotCategory
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_LotCategory_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.LotCategories;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ILotCategoryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateLotCategoryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateLotCategoryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateLotCategoryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateLotCategoryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListLotCategoryAndMapToLotCategoryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullLotCategoryAndMapToLotCategoryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListLotCategoryAndMapToLotCategoryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteLotCategoryAndMapToLotCategoryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullLotCategoryAndMapToLotCategoryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListLotCategoryAndMapToLotCategoryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteLotCategoryAndMapToLotCategoryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullLotCategoryAndMapToLotCategoryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListLotCategoryAndMapToLotCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteLotCategoryAndMapToLotCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullLotCategoryAndMapToLotCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Auctions / LotGroup
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_LotGroup_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.LotGroups;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ILotGroupModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateLotGroupEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateLotGroupModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateLotGroupModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateLotGroupModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListLotGroupAndMapToLotGroupModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullLotGroupAndMapToLotGroupModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListLotGroupAndMapToLotGroupModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteLotGroupAndMapToLotGroupModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullLotGroupAndMapToLotGroupModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListLotGroupAndMapToLotGroupModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteLotGroupAndMapToLotGroupModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullLotGroupAndMapToLotGroupModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListLotGroupAndMapToLotGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteLotGroupAndMapToLotGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullLotGroupAndMapToLotGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Auctions / LotStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_LotStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.LotStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateLotStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateLotStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateLotStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateLotStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListLotStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullLotStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListLotStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteLotStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullLotStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListLotStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteLotStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullLotStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListLotStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteLotStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullLotStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Auctions / LotType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_LotType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.LotTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateLotTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateLotTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateLotTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateLotTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListLotTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullLotTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListLotTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteLotTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullLotTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListLotTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteLotTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullLotTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListLotTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteLotTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullLotTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Auctions / StoreAuction
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Auctions_StoreAuction_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreAuctions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreAuctionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreAuctionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreAuctionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreAuctionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreAuctionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreAuctionAndMapToStoreAuctionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreAuctionAndMapToStoreAuctionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreAuctionAndMapToStoreAuctionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreAuctionAndMapToStoreAuctionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreAuctionAndMapToStoreAuctionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreAuctionAndMapToStoreAuctionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreAuctionAndMapToStoreAuctionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreAuctionAndMapToStoreAuctionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreAuctionAndMapToStoreAuctionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreAuctionAndMapToStoreAuctionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreAuctionAndMapToStoreAuctionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Badges
        #region Badges / Badge
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Badges_Badge_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Badges;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBadgeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBadgeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBadgeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBadgeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBadgeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBadgeAndMapToBadgeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBadgeAndMapToBadgeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBadgeAndMapToBadgeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBadgeAndMapToBadgeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBadgeAndMapToBadgeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBadgeAndMapToBadgeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBadgeAndMapToBadgeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBadgeAndMapToBadgeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBadgeAndMapToBadgeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBadgeAndMapToBadgeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBadgeAndMapToBadgeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Badges / BadgeImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Badges_BadgeImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BadgeImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBadgeImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBadgeImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBadgeImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBadgeImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBadgeImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBadgeImageAndMapToBadgeImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBadgeImageAndMapToBadgeImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBadgeImageAndMapToBadgeImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBadgeImageAndMapToBadgeImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBadgeImageAndMapToBadgeImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBadgeImageAndMapToBadgeImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBadgeImageAndMapToBadgeImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBadgeImageAndMapToBadgeImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBadgeImageAndMapToBadgeImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBadgeImageAndMapToBadgeImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBadgeImageAndMapToBadgeImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Badges / BadgeImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Badges_BadgeImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BadgeImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBadgeImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBadgeImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBadgeImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBadgeImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBadgeImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBadgeImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBadgeImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBadgeImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBadgeImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBadgeImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBadgeImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBadgeImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBadgeImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBadgeImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBadgeImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Badges / BadgeType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Badges_BadgeType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BadgeTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBadgeTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBadgeTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBadgeTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBadgeTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBadgeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBadgeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBadgeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBadgeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBadgeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBadgeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBadgeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBadgeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBadgeTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBadgeTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBadgeTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Brands
        #region Brands / Brand
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_Brand_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Brands;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandAndMapToBrandModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandAndMapToBrandModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandAndMapToBrandModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandAndMapToBrandModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandAndMapToBrandModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandAndMapToBrandModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandAndMapToBrandModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandAndMapToBrandModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandAndMapToBrandModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandAndMapToBrandModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandAndMapToBrandModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandAccount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandAccount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandAccounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandAccountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandAccountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandAccountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandAccountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandAccountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandAccountAndMapToBrandAccountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandAccountAndMapToBrandAccountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandAccountAndMapToBrandAccountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandAccountAndMapToBrandAccountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandAccountAndMapToBrandAccountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandAccountAndMapToBrandAccountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandAccountAndMapToBrandAccountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandAccountAndMapToBrandAccountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandAccountAndMapToBrandAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandAccountAndMapToBrandAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandAccountAndMapToBrandAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandCategory
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandCategory_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandCategories;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandCategoryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandCategoryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandCategoryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandCategoryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandCategoryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandCategoryAndMapToBrandCategoryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandCategoryAndMapToBrandCategoryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandCategoryAndMapToBrandCategoryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandCategoryAndMapToBrandCategoryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandCategoryAndMapToBrandCategoryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandCategoryAndMapToBrandCategoryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandCategoryAndMapToBrandCategoryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandCategoryAndMapToBrandCategoryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandCategoryAndMapToBrandCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandCategoryAndMapToBrandCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandCategoryAndMapToBrandCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandCurrency
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandCurrency_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandCurrencies;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandCurrencyModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandCurrencyEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandCurrencyModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandCurrencyModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandCurrencyModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandCurrencyAndMapToBrandCurrencyModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandCurrencyAndMapToBrandCurrencyModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandCurrencyAndMapToBrandCurrencyModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandCurrencyAndMapToBrandCurrencyModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandCurrencyAndMapToBrandCurrencyModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandCurrencyAndMapToBrandCurrencyModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandCurrencyAndMapToBrandCurrencyModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandCurrencyAndMapToBrandCurrencyModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandCurrencyAndMapToBrandCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandCurrencyAndMapToBrandCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandCurrencyAndMapToBrandCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandFranchise
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandFranchise_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandFranchises;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandFranchiseModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandFranchiseEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandFranchiseModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandFranchiseModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandFranchiseModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandFranchiseAndMapToBrandFranchiseModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandFranchiseAndMapToBrandFranchiseModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandFranchiseAndMapToBrandFranchiseModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandFranchiseAndMapToBrandFranchiseModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandFranchiseAndMapToBrandFranchiseModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandFranchiseAndMapToBrandFranchiseModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandFranchiseAndMapToBrandFranchiseModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandFranchiseAndMapToBrandFranchiseModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandFranchiseAndMapToBrandFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandFranchiseAndMapToBrandFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandFranchiseAndMapToBrandFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandImageAndMapToBrandImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandImageAndMapToBrandImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandImageAndMapToBrandImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandImageAndMapToBrandImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandImageAndMapToBrandImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandImageAndMapToBrandImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandImageAndMapToBrandImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandImageAndMapToBrandImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandImageAndMapToBrandImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandImageAndMapToBrandImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandImageAndMapToBrandImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandInventoryLocation
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandInventoryLocation_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandInventoryLocations;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandInventoryLocationModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandInventoryLocationEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandInventoryLocationModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandInventoryLocationModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandInventoryLocationModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandInventoryLocationAndMapToBrandInventoryLocationModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandInventoryLocationAndMapToBrandInventoryLocationModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandInventoryLocationAndMapToBrandInventoryLocationModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandInventoryLocationAndMapToBrandInventoryLocationModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandInventoryLocationAndMapToBrandInventoryLocationModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandInventoryLocationAndMapToBrandInventoryLocationModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandInventoryLocationAndMapToBrandInventoryLocationModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandInventoryLocationAndMapToBrandInventoryLocationModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandInventoryLocationAndMapToBrandInventoryLocationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandInventoryLocationAndMapToBrandInventoryLocationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandInventoryLocationAndMapToBrandInventoryLocationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandInventoryLocationType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandInventoryLocationType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandInventoryLocationTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandInventoryLocationTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandInventoryLocationTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandInventoryLocationTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandInventoryLocationTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandInventoryLocationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandInventoryLocationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandInventoryLocationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandLanguage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandLanguage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandLanguages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandLanguageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandLanguageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandLanguageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandLanguageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandLanguageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandLanguageAndMapToBrandLanguageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandLanguageAndMapToBrandLanguageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandLanguageAndMapToBrandLanguageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandLanguageAndMapToBrandLanguageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandLanguageAndMapToBrandLanguageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandLanguageAndMapToBrandLanguageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandLanguageAndMapToBrandLanguageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandLanguageAndMapToBrandLanguageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandLanguageAndMapToBrandLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandLanguageAndMapToBrandLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandLanguageAndMapToBrandLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandManufacturer
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandManufacturer_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandManufacturers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandManufacturerModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandManufacturerEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandManufacturerModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandManufacturerModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandManufacturerModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandManufacturerAndMapToBrandManufacturerModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandManufacturerAndMapToBrandManufacturerModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandManufacturerAndMapToBrandManufacturerModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandManufacturerAndMapToBrandManufacturerModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandManufacturerAndMapToBrandManufacturerModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandManufacturerAndMapToBrandManufacturerModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandManufacturerAndMapToBrandManufacturerModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandManufacturerAndMapToBrandManufacturerModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandManufacturerAndMapToBrandManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandManufacturerAndMapToBrandManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandManufacturerAndMapToBrandManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandProduct
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandProduct_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandProducts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandProductModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandProductEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandProductModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandProductModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandProductModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandProductAndMapToBrandProductModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandProductAndMapToBrandProductModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandProductAndMapToBrandProductModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandProductAndMapToBrandProductModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandProductAndMapToBrandProductModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandProductAndMapToBrandProductModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandProductAndMapToBrandProductModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandProductAndMapToBrandProductModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandProductAndMapToBrandProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandProductAndMapToBrandProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandProductAndMapToBrandProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandSiteDomain
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandSiteDomain_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandSiteDomains;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandSiteDomainModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandSiteDomainEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandSiteDomainModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandSiteDomainModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandSiteDomainModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandSiteDomainAndMapToBrandSiteDomainModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandSiteDomainAndMapToBrandSiteDomainModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandSiteDomainAndMapToBrandSiteDomainModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandSiteDomainAndMapToBrandSiteDomainModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandSiteDomainAndMapToBrandSiteDomainModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandSiteDomainAndMapToBrandSiteDomainModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandSiteDomainAndMapToBrandSiteDomainModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandSiteDomainAndMapToBrandSiteDomainModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandSiteDomainAndMapToBrandSiteDomainModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandSiteDomainAndMapToBrandSiteDomainModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandSiteDomainAndMapToBrandSiteDomainModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandStore
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandStore_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandStores;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandStoreModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandStoreEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandStoreModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandStoreModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandStoreModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandStoreAndMapToBrandStoreModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandStoreAndMapToBrandStoreModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandStoreAndMapToBrandStoreModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandStoreAndMapToBrandStoreModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandStoreAndMapToBrandStoreModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandStoreAndMapToBrandStoreModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandStoreAndMapToBrandStoreModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandStoreAndMapToBrandStoreModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandStoreAndMapToBrandStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandStoreAndMapToBrandStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandStoreAndMapToBrandStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandUser
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandUser_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandUsers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandUserModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandUserEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandUserModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandUserModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandUserModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandUserAndMapToBrandUserModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandUserAndMapToBrandUserModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandUserAndMapToBrandUserModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandUserAndMapToBrandUserModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandUserAndMapToBrandUserModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandUserAndMapToBrandUserModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandUserAndMapToBrandUserModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandUserAndMapToBrandUserModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandUserAndMapToBrandUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandUserAndMapToBrandUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandUserAndMapToBrandUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Brands / BrandVendor
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Brands_BrandVendor_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.BrandVendors;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IBrandVendorModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateBrandVendorEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateBrandVendorModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateBrandVendorModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateBrandVendorModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListBrandVendorAndMapToBrandVendorModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullBrandVendorAndMapToBrandVendorModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListBrandVendorAndMapToBrandVendorModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteBrandVendorAndMapToBrandVendorModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullBrandVendorAndMapToBrandVendorModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListBrandVendorAndMapToBrandVendorModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteBrandVendorAndMapToBrandVendorModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullBrandVendorAndMapToBrandVendorModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListBrandVendorAndMapToBrandVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteBrandVendorAndMapToBrandVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullBrandVendorAndMapToBrandVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region CalendarEvents
        #region CalendarEvents / CalendarEvent
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEvent_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CalendarEvents;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICalendarEventModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCalendarEventEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCalendarEventModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCalendarEventModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCalendarEventModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCalendarEventAndMapToCalendarEventModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCalendarEventAndMapToCalendarEventModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCalendarEventAndMapToCalendarEventModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCalendarEventAndMapToCalendarEventModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCalendarEventAndMapToCalendarEventModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCalendarEventAndMapToCalendarEventModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCalendarEventAndMapToCalendarEventModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCalendarEventAndMapToCalendarEventModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCalendarEventAndMapToCalendarEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCalendarEventAndMapToCalendarEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCalendarEventAndMapToCalendarEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region CalendarEvents / CalendarEventDetail
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEventDetail_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CalendarEventDetails;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICalendarEventDetailModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCalendarEventDetailEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCalendarEventDetailModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCalendarEventDetailModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCalendarEventDetailModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCalendarEventDetailAndMapToCalendarEventDetailModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCalendarEventDetailAndMapToCalendarEventDetailModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCalendarEventDetailAndMapToCalendarEventDetailModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCalendarEventDetailAndMapToCalendarEventDetailModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCalendarEventDetailAndMapToCalendarEventDetailModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCalendarEventDetailAndMapToCalendarEventDetailModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCalendarEventDetailAndMapToCalendarEventDetailModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCalendarEventDetailAndMapToCalendarEventDetailModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCalendarEventDetailAndMapToCalendarEventDetailModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCalendarEventDetailAndMapToCalendarEventDetailModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCalendarEventDetailAndMapToCalendarEventDetailModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region CalendarEvents / CalendarEventFile
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEventFile_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CalendarEventFiles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICalendarEventFileModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCalendarEventFileEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCalendarEventFileModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCalendarEventFileModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCalendarEventFileModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCalendarEventFileAndMapToCalendarEventFileModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCalendarEventFileAndMapToCalendarEventFileModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCalendarEventFileAndMapToCalendarEventFileModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCalendarEventFileAndMapToCalendarEventFileModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCalendarEventFileAndMapToCalendarEventFileModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCalendarEventFileAndMapToCalendarEventFileModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCalendarEventFileAndMapToCalendarEventFileModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCalendarEventFileAndMapToCalendarEventFileModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCalendarEventFileAndMapToCalendarEventFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCalendarEventFileAndMapToCalendarEventFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCalendarEventFileAndMapToCalendarEventFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region CalendarEvents / CalendarEventImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEventImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CalendarEventImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICalendarEventImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCalendarEventImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCalendarEventImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCalendarEventImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCalendarEventImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCalendarEventImageAndMapToCalendarEventImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCalendarEventImageAndMapToCalendarEventImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCalendarEventImageAndMapToCalendarEventImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCalendarEventImageAndMapToCalendarEventImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCalendarEventImageAndMapToCalendarEventImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCalendarEventImageAndMapToCalendarEventImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCalendarEventImageAndMapToCalendarEventImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCalendarEventImageAndMapToCalendarEventImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCalendarEventImageAndMapToCalendarEventImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCalendarEventImageAndMapToCalendarEventImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCalendarEventImageAndMapToCalendarEventImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region CalendarEvents / CalendarEventImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEventImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CalendarEventImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCalendarEventImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCalendarEventImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCalendarEventImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCalendarEventImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCalendarEventImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCalendarEventImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCalendarEventImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCalendarEventImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCalendarEventImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCalendarEventImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCalendarEventImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCalendarEventImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCalendarEventImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCalendarEventImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCalendarEventImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region CalendarEvents / CalendarEventProduct
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEventProduct_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CalendarEventProducts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICalendarEventProductModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCalendarEventProductEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCalendarEventProductModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCalendarEventProductModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCalendarEventProductModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCalendarEventProductAndMapToCalendarEventProductModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCalendarEventProductAndMapToCalendarEventProductModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCalendarEventProductAndMapToCalendarEventProductModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCalendarEventProductAndMapToCalendarEventProductModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCalendarEventProductAndMapToCalendarEventProductModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCalendarEventProductAndMapToCalendarEventProductModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCalendarEventProductAndMapToCalendarEventProductModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCalendarEventProductAndMapToCalendarEventProductModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCalendarEventProductAndMapToCalendarEventProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCalendarEventProductAndMapToCalendarEventProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCalendarEventProductAndMapToCalendarEventProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region CalendarEvents / CalendarEventStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEventStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CalendarEventStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCalendarEventStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCalendarEventStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCalendarEventStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCalendarEventStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCalendarEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCalendarEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCalendarEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCalendarEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCalendarEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCalendarEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCalendarEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCalendarEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCalendarEventStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCalendarEventStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCalendarEventStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region CalendarEvents / CalendarEventType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_CalendarEventType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CalendarEventTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCalendarEventTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCalendarEventTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCalendarEventTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCalendarEventTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCalendarEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCalendarEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCalendarEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCalendarEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCalendarEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCalendarEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCalendarEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCalendarEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCalendarEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCalendarEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCalendarEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region CalendarEvents / UserEventAttendance
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_UserEventAttendance_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.UserEventAttendances;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IUserEventAttendanceModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateUserEventAttendanceEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateUserEventAttendanceModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateUserEventAttendanceModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateUserEventAttendanceModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListUserEventAttendanceAndMapToUserEventAttendanceModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullUserEventAttendanceAndMapToUserEventAttendanceModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListUserEventAttendanceAndMapToUserEventAttendanceModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteUserEventAttendanceAndMapToUserEventAttendanceModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullUserEventAttendanceAndMapToUserEventAttendanceModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListUserEventAttendanceAndMapToUserEventAttendanceModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteUserEventAttendanceAndMapToUserEventAttendanceModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullUserEventAttendanceAndMapToUserEventAttendanceModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListUserEventAttendanceAndMapToUserEventAttendanceModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteUserEventAttendanceAndMapToUserEventAttendanceModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullUserEventAttendanceAndMapToUserEventAttendanceModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region CalendarEvents / UserEventAttendanceType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_CalendarEvents_UserEventAttendanceType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.UserEventAttendanceTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateUserEventAttendanceTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateUserEventAttendanceTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateUserEventAttendanceTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateUserEventAttendanceTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListUserEventAttendanceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullUserEventAttendanceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListUserEventAttendanceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteUserEventAttendanceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullUserEventAttendanceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListUserEventAttendanceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteUserEventAttendanceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullUserEventAttendanceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListUserEventAttendanceTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteUserEventAttendanceTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullUserEventAttendanceTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Categories
        #region Categories / Category
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Categories_Category_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Categories;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICategoryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCategoryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCategoryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCategoryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCategoryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCategoryAndMapToCategoryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCategoryAndMapToCategoryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCategoryAndMapToCategoryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCategoryAndMapToCategoryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCategoryAndMapToCategoryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCategoryAndMapToCategoryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCategoryAndMapToCategoryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCategoryAndMapToCategoryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCategoryAndMapToCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCategoryAndMapToCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCategoryAndMapToCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Categories / CategoryFile
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Categories_CategoryFile_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CategoryFiles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICategoryFileModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCategoryFileEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCategoryFileModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCategoryFileModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCategoryFileModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCategoryFileAndMapToCategoryFileModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCategoryFileAndMapToCategoryFileModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCategoryFileAndMapToCategoryFileModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCategoryFileAndMapToCategoryFileModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCategoryFileAndMapToCategoryFileModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCategoryFileAndMapToCategoryFileModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCategoryFileAndMapToCategoryFileModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCategoryFileAndMapToCategoryFileModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCategoryFileAndMapToCategoryFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCategoryFileAndMapToCategoryFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCategoryFileAndMapToCategoryFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Categories / CategoryImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Categories_CategoryImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CategoryImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICategoryImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCategoryImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCategoryImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCategoryImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCategoryImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCategoryImageAndMapToCategoryImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCategoryImageAndMapToCategoryImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCategoryImageAndMapToCategoryImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCategoryImageAndMapToCategoryImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCategoryImageAndMapToCategoryImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCategoryImageAndMapToCategoryImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCategoryImageAndMapToCategoryImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCategoryImageAndMapToCategoryImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCategoryImageAndMapToCategoryImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCategoryImageAndMapToCategoryImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCategoryImageAndMapToCategoryImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Categories / CategoryImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Categories_CategoryImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CategoryImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCategoryImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCategoryImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCategoryImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCategoryImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCategoryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCategoryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCategoryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCategoryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCategoryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCategoryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCategoryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCategoryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCategoryImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCategoryImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCategoryImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Categories / CategoryType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Categories_CategoryType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CategoryTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCategoryTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCategoryTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCategoryTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCategoryTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCategoryTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCategoryTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCategoryTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Contacts
        #region Contacts / Contact
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_Contact_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Contacts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IContactModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateContactEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateContactModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateContactModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateContactModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListContactAndMapToContactModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullContactAndMapToContactModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListContactAndMapToContactModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteContactAndMapToContactModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullContactAndMapToContactModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListContactAndMapToContactModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteContactAndMapToContactModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullContactAndMapToContactModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListContactAndMapToContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteContactAndMapToContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullContactAndMapToContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Contacts / ContactImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_ContactImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ContactImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IContactImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateContactImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateContactImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateContactImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateContactImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListContactImageAndMapToContactImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullContactImageAndMapToContactImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListContactImageAndMapToContactImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteContactImageAndMapToContactImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullContactImageAndMapToContactImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListContactImageAndMapToContactImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteContactImageAndMapToContactImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullContactImageAndMapToContactImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListContactImageAndMapToContactImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteContactImageAndMapToContactImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullContactImageAndMapToContactImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Contacts / ContactImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_ContactImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ContactImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateContactImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateContactImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateContactImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateContactImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListContactImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullContactImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListContactImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteContactImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullContactImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListContactImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteContactImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullContactImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListContactImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteContactImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullContactImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Contacts / ContactType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_ContactType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ContactTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateContactTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateContactTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateContactTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateContactTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListContactTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullContactTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListContactTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteContactTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullContactTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListContactTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteContactTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullContactTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListContactTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteContactTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullContactTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Contacts / Permission
        #region Contacts / ProfanityFilter
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_ProfanityFilter_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProfanityFilters;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IProfanityFilterModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProfanityFilterEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProfanityFilterModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProfanityFilterModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProfanityFilterModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProfanityFilterAndMapToProfanityFilterModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProfanityFilterAndMapToProfanityFilterModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProfanityFilterAndMapToProfanityFilterModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProfanityFilterAndMapToProfanityFilterModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProfanityFilterAndMapToProfanityFilterModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProfanityFilterAndMapToProfanityFilterModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProfanityFilterAndMapToProfanityFilterModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProfanityFilterAndMapToProfanityFilterModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProfanityFilterAndMapToProfanityFilterModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProfanityFilterAndMapToProfanityFilterModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProfanityFilterAndMapToProfanityFilterModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Contacts / ReferralCode
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_ReferralCode_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ReferralCodes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IReferralCodeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateReferralCodeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateReferralCodeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateReferralCodeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateReferralCodeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListReferralCodeAndMapToReferralCodeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullReferralCodeAndMapToReferralCodeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListReferralCodeAndMapToReferralCodeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteReferralCodeAndMapToReferralCodeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullReferralCodeAndMapToReferralCodeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListReferralCodeAndMapToReferralCodeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteReferralCodeAndMapToReferralCodeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullReferralCodeAndMapToReferralCodeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListReferralCodeAndMapToReferralCodeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteReferralCodeAndMapToReferralCodeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullReferralCodeAndMapToReferralCodeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Contacts / ReferralCodeStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_ReferralCodeStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ReferralCodeStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateReferralCodeStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateReferralCodeStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateReferralCodeStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateReferralCodeStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListReferralCodeStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullReferralCodeStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListReferralCodeStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteReferralCodeStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullReferralCodeStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListReferralCodeStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteReferralCodeStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullReferralCodeStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListReferralCodeStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteReferralCodeStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullReferralCodeStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Contacts / ReferralCodeType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_ReferralCodeType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ReferralCodeTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateReferralCodeTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateReferralCodeTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateReferralCodeTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateReferralCodeTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListReferralCodeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullReferralCodeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListReferralCodeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteReferralCodeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullReferralCodeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListReferralCodeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteReferralCodeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullReferralCodeTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListReferralCodeTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteReferralCodeTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullReferralCodeTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Contacts / RolePermission
                // Skipping Contacts / RoleUser
        #region Contacts / User
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_User_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Users;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IUserModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateUserEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateUserModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateUserModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateUserModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListUserAndMapToUserModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullUserAndMapToUserModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListUserAndMapToUserModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteUserAndMapToUserModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullUserAndMapToUserModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListUserAndMapToUserModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteUserAndMapToUserModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullUserAndMapToUserModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListUserAndMapToUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteUserAndMapToUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullUserAndMapToUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Contacts / UserClaim
        #region Contacts / UserFile
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_UserFile_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.UserFiles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IUserFileModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateUserFileEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateUserFileModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateUserFileModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateUserFileModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListUserFileAndMapToUserFileModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullUserFileAndMapToUserFileModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListUserFileAndMapToUserFileModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteUserFileAndMapToUserFileModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullUserFileAndMapToUserFileModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListUserFileAndMapToUserFileModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteUserFileAndMapToUserFileModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullUserFileAndMapToUserFileModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListUserFileAndMapToUserFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteUserFileAndMapToUserFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullUserFileAndMapToUserFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Contacts / UserImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_UserImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.UserImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IUserImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateUserImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateUserImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateUserImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateUserImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListUserImageAndMapToUserImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullUserImageAndMapToUserImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListUserImageAndMapToUserImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteUserImageAndMapToUserImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullUserImageAndMapToUserImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListUserImageAndMapToUserImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteUserImageAndMapToUserImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullUserImageAndMapToUserImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListUserImageAndMapToUserImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteUserImageAndMapToUserImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullUserImageAndMapToUserImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Contacts / UserImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_UserImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.UserImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateUserImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateUserImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateUserImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateUserImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListUserImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullUserImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListUserImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteUserImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullUserImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListUserImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteUserImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullUserImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListUserImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteUserImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullUserImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Contacts / UserLogin
        #region Contacts / UserOnlineStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_UserOnlineStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.UserOnlineStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateUserOnlineStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateUserOnlineStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateUserOnlineStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateUserOnlineStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListUserOnlineStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullUserOnlineStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListUserOnlineStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteUserOnlineStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullUserOnlineStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListUserOnlineStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteUserOnlineStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullUserOnlineStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListUserOnlineStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteUserOnlineStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullUserOnlineStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Contacts / UserProductType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_UserProductType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.UserProductTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IUserProductTypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateUserProductTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateUserProductTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateUserProductTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateUserProductTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListUserProductTypeAndMapToUserProductTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullUserProductTypeAndMapToUserProductTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListUserProductTypeAndMapToUserProductTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteUserProductTypeAndMapToUserProductTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullUserProductTypeAndMapToUserProductTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListUserProductTypeAndMapToUserProductTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteUserProductTypeAndMapToUserProductTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullUserProductTypeAndMapToUserProductTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListUserProductTypeAndMapToUserProductTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteUserProductTypeAndMapToUserProductTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullUserProductTypeAndMapToUserProductTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Contacts / UserRole
        #region Contacts / UserStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_UserStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.UserStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateUserStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateUserStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateUserStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateUserStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListUserStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullUserStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListUserStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteUserStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullUserStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListUserStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteUserStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullUserStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListUserStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteUserStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullUserStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Contacts / UserType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Contacts_UserType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.UserTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateUserTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateUserTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateUserTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateUserTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListUserTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullUserTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListUserTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteUserTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullUserTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListUserTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteUserTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullUserTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListUserTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteUserTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullUserTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Counters
        #region Counters / Counter
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Counters_Counter_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Counters;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICounterModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCounterEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCounterModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCounterModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCounterModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCounterAndMapToCounterModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCounterAndMapToCounterModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCounterAndMapToCounterModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCounterAndMapToCounterModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCounterAndMapToCounterModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCounterAndMapToCounterModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCounterAndMapToCounterModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCounterAndMapToCounterModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCounterAndMapToCounterModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCounterAndMapToCounterModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCounterAndMapToCounterModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Counters / CounterLog
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Counters_CounterLog_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CounterLogs;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICounterLogModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCounterLogEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCounterLogModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCounterLogModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCounterLogModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCounterLogAndMapToCounterLogModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCounterLogAndMapToCounterLogModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCounterLogAndMapToCounterLogModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCounterLogAndMapToCounterLogModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCounterLogAndMapToCounterLogModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCounterLogAndMapToCounterLogModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCounterLogAndMapToCounterLogModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCounterLogAndMapToCounterLogModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCounterLogAndMapToCounterLogModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCounterLogAndMapToCounterLogModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCounterLogAndMapToCounterLogModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Counters / CounterLogType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Counters_CounterLogType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CounterLogTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCounterLogTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCounterLogTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCounterLogTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCounterLogTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCounterLogTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCounterLogTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCounterLogTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCounterLogTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCounterLogTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCounterLogTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCounterLogTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCounterLogTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCounterLogTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCounterLogTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCounterLogTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Counters / CounterType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Counters_CounterType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CounterTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCounterTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCounterTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCounterTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCounterTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCounterTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCounterTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCounterTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCounterTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCounterTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCounterTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCounterTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCounterTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCounterTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCounterTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCounterTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Currencies
        #region Currencies / Currency
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Currencies_Currency_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Currencies;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICurrencyModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCurrencyEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCurrencyModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCurrencyModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCurrencyModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCurrencyAndMapToCurrencyModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCurrencyAndMapToCurrencyModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCurrencyAndMapToCurrencyModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCurrencyAndMapToCurrencyModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCurrencyAndMapToCurrencyModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCurrencyAndMapToCurrencyModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCurrencyAndMapToCurrencyModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCurrencyAndMapToCurrencyModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCurrencyAndMapToCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCurrencyAndMapToCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCurrencyAndMapToCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Currencies / CurrencyConversion
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Currencies_CurrencyConversion_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CurrencyConversions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICurrencyConversionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCurrencyConversionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCurrencyConversionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCurrencyConversionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCurrencyConversionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCurrencyConversionAndMapToCurrencyConversionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCurrencyConversionAndMapToCurrencyConversionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCurrencyConversionAndMapToCurrencyConversionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCurrencyConversionAndMapToCurrencyConversionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCurrencyConversionAndMapToCurrencyConversionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCurrencyConversionAndMapToCurrencyConversionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCurrencyConversionAndMapToCurrencyConversionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCurrencyConversionAndMapToCurrencyConversionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCurrencyConversionAndMapToCurrencyConversionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCurrencyConversionAndMapToCurrencyConversionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCurrencyConversionAndMapToCurrencyConversionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Currencies / CurrencyImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Currencies_CurrencyImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CurrencyImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICurrencyImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCurrencyImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCurrencyImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCurrencyImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCurrencyImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCurrencyImageAndMapToCurrencyImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCurrencyImageAndMapToCurrencyImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCurrencyImageAndMapToCurrencyImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCurrencyImageAndMapToCurrencyImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCurrencyImageAndMapToCurrencyImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCurrencyImageAndMapToCurrencyImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCurrencyImageAndMapToCurrencyImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCurrencyImageAndMapToCurrencyImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCurrencyImageAndMapToCurrencyImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCurrencyImageAndMapToCurrencyImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCurrencyImageAndMapToCurrencyImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Currencies / CurrencyImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Currencies_CurrencyImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CurrencyImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCurrencyImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCurrencyImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCurrencyImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCurrencyImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCurrencyImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCurrencyImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCurrencyImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCurrencyImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCurrencyImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCurrencyImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCurrencyImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCurrencyImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCurrencyImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCurrencyImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCurrencyImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Currencies / HistoricalCurrencyRate
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Currencies_HistoricalCurrencyRate_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.HistoricalCurrencyRates;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IHistoricalCurrencyRateModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateHistoricalCurrencyRateEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateHistoricalCurrencyRateModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateHistoricalCurrencyRateModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateHistoricalCurrencyRateModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListHistoricalCurrencyRateAndMapToHistoricalCurrencyRateModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullHistoricalCurrencyRateAndMapToHistoricalCurrencyRateModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListHistoricalCurrencyRateAndMapToHistoricalCurrencyRateModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteHistoricalCurrencyRateAndMapToHistoricalCurrencyRateModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullHistoricalCurrencyRateAndMapToHistoricalCurrencyRateModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListHistoricalCurrencyRateAndMapToHistoricalCurrencyRateModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteHistoricalCurrencyRateAndMapToHistoricalCurrencyRateModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullHistoricalCurrencyRateAndMapToHistoricalCurrencyRateModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListHistoricalCurrencyRateAndMapToHistoricalCurrencyRateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteHistoricalCurrencyRateAndMapToHistoricalCurrencyRateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullHistoricalCurrencyRateAndMapToHistoricalCurrencyRateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Discounts
        #region Discounts / AppliedCartDiscount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedCartDiscount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppliedCartDiscounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppliedCartDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppliedCartDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppliedCartDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppliedCartDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppliedCartDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppliedCartDiscountAndMapToAppliedCartDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppliedCartDiscountAndMapToAppliedCartDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppliedCartDiscountAndMapToAppliedCartDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppliedCartDiscountAndMapToAppliedCartDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppliedCartDiscountAndMapToAppliedCartDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppliedCartDiscountAndMapToAppliedCartDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppliedCartDiscountAndMapToAppliedCartDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppliedCartDiscountAndMapToAppliedCartDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppliedCartDiscountAndMapToAppliedCartDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppliedCartDiscountAndMapToAppliedCartDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppliedCartDiscountAndMapToAppliedCartDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / AppliedCartItemDiscount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedCartItemDiscount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppliedCartItemDiscounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppliedCartItemDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppliedCartItemDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppliedCartItemDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppliedCartItemDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppliedCartItemDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppliedCartItemDiscountAndMapToAppliedCartItemDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppliedCartItemDiscountAndMapToAppliedCartItemDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppliedCartItemDiscountAndMapToAppliedCartItemDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppliedCartItemDiscountAndMapToAppliedCartItemDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppliedCartItemDiscountAndMapToAppliedCartItemDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppliedCartItemDiscountAndMapToAppliedCartItemDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppliedCartItemDiscountAndMapToAppliedCartItemDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppliedCartItemDiscountAndMapToAppliedCartItemDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppliedCartItemDiscountAndMapToAppliedCartItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppliedCartItemDiscountAndMapToAppliedCartItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppliedCartItemDiscountAndMapToAppliedCartItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / Discount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_Discount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Discounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountAndMapToDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountAndMapToDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountAndMapToDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountAndMapToDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountAndMapToDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountAndMapToDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountAndMapToDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountAndMapToDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountAndMapToDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountAndMapToDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountAndMapToDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountAccount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountAccount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountAccounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountAccountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountAccountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountAccountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountAccountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountAccountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountAccountAndMapToDiscountAccountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountAccountAndMapToDiscountAccountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountAccountAndMapToDiscountAccountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountAccountAndMapToDiscountAccountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountAccountAndMapToDiscountAccountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountAccountAndMapToDiscountAccountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountAccountAndMapToDiscountAccountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountAccountAndMapToDiscountAccountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountAccountAndMapToDiscountAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountAccountAndMapToDiscountAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountAccountAndMapToDiscountAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountAccountType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountAccountType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountAccountTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountAccountTypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountAccountTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountAccountTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountAccountTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountAccountTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountAccountTypeAndMapToDiscountAccountTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountAccountTypeAndMapToDiscountAccountTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountAccountTypeAndMapToDiscountAccountTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountAccountTypeAndMapToDiscountAccountTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountAccountTypeAndMapToDiscountAccountTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountAccountTypeAndMapToDiscountAccountTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountAccountTypeAndMapToDiscountAccountTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountAccountTypeAndMapToDiscountAccountTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountAccountTypeAndMapToDiscountAccountTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountAccountTypeAndMapToDiscountAccountTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountAccountTypeAndMapToDiscountAccountTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountBrand
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountBrand_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountBrands;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountBrandModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountBrandEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountBrandModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountBrandModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountBrandModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountBrandAndMapToDiscountBrandModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountBrandAndMapToDiscountBrandModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountBrandAndMapToDiscountBrandModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountBrandAndMapToDiscountBrandModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountBrandAndMapToDiscountBrandModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountBrandAndMapToDiscountBrandModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountBrandAndMapToDiscountBrandModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountBrandAndMapToDiscountBrandModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountBrandAndMapToDiscountBrandModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountBrandAndMapToDiscountBrandModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountBrandAndMapToDiscountBrandModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountCategory
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountCategory_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountCategories;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountCategoryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountCategoryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountCategoryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountCategoryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountCategoryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountCategoryAndMapToDiscountCategoryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountCategoryAndMapToDiscountCategoryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountCategoryAndMapToDiscountCategoryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountCategoryAndMapToDiscountCategoryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountCategoryAndMapToDiscountCategoryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountCategoryAndMapToDiscountCategoryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountCategoryAndMapToDiscountCategoryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountCategoryAndMapToDiscountCategoryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountCategoryAndMapToDiscountCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountCategoryAndMapToDiscountCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountCategoryAndMapToDiscountCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountCode
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountCode_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountCodes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountCodeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountCodeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountCodeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountCodeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountCodeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountCodeAndMapToDiscountCodeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountCodeAndMapToDiscountCodeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountCodeAndMapToDiscountCodeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountCodeAndMapToDiscountCodeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountCodeAndMapToDiscountCodeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountCodeAndMapToDiscountCodeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountCodeAndMapToDiscountCodeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountCodeAndMapToDiscountCodeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountCodeAndMapToDiscountCodeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountCodeAndMapToDiscountCodeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountCodeAndMapToDiscountCodeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountCountry
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountCountry_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountCountries;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountCountryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountCountryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountCountryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountCountryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountCountryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountCountryAndMapToDiscountCountryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountCountryAndMapToDiscountCountryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountCountryAndMapToDiscountCountryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountCountryAndMapToDiscountCountryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountCountryAndMapToDiscountCountryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountCountryAndMapToDiscountCountryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountCountryAndMapToDiscountCountryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountCountryAndMapToDiscountCountryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountCountryAndMapToDiscountCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountCountryAndMapToDiscountCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountCountryAndMapToDiscountCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountFranchise
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountFranchise_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountFranchises;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountFranchiseModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountFranchiseEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountFranchiseModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountFranchiseModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountFranchiseModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountFranchiseAndMapToDiscountFranchiseModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountFranchiseAndMapToDiscountFranchiseModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountFranchiseAndMapToDiscountFranchiseModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountFranchiseAndMapToDiscountFranchiseModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountFranchiseAndMapToDiscountFranchiseModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountFranchiseAndMapToDiscountFranchiseModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountFranchiseAndMapToDiscountFranchiseModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountFranchiseAndMapToDiscountFranchiseModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountFranchiseAndMapToDiscountFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountFranchiseAndMapToDiscountFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountFranchiseAndMapToDiscountFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountManufacturer
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountManufacturer_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountManufacturers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountManufacturerModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountManufacturerEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountManufacturerModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountManufacturerModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountManufacturerModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountManufacturerAndMapToDiscountManufacturerModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountManufacturerAndMapToDiscountManufacturerModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountManufacturerAndMapToDiscountManufacturerModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountManufacturerAndMapToDiscountManufacturerModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountManufacturerAndMapToDiscountManufacturerModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountManufacturerAndMapToDiscountManufacturerModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountManufacturerAndMapToDiscountManufacturerModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountManufacturerAndMapToDiscountManufacturerModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountManufacturerAndMapToDiscountManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountManufacturerAndMapToDiscountManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountManufacturerAndMapToDiscountManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountProduct
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountProduct_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountProducts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountProductModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountProductEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountProductModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountProductModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountProductModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountProductAndMapToDiscountProductModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountProductAndMapToDiscountProductModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountProductAndMapToDiscountProductModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountProductAndMapToDiscountProductModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountProductAndMapToDiscountProductModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountProductAndMapToDiscountProductModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountProductAndMapToDiscountProductModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountProductAndMapToDiscountProductModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountProductAndMapToDiscountProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountProductAndMapToDiscountProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountProductAndMapToDiscountProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountProductType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountProductType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountProductTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountProductTypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountProductTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountProductTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountProductTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountProductTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountProductTypeAndMapToDiscountProductTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountProductTypeAndMapToDiscountProductTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountProductTypeAndMapToDiscountProductTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountProductTypeAndMapToDiscountProductTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountProductTypeAndMapToDiscountProductTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountProductTypeAndMapToDiscountProductTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountProductTypeAndMapToDiscountProductTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountProductTypeAndMapToDiscountProductTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountProductTypeAndMapToDiscountProductTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountProductTypeAndMapToDiscountProductTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountProductTypeAndMapToDiscountProductTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountShipCarrierMethod
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountShipCarrierMethod_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountShipCarrierMethods;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountShipCarrierMethodModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountShipCarrierMethodEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountShipCarrierMethodModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountShipCarrierMethodModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountShipCarrierMethodModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountShipCarrierMethodAndMapToDiscountShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountShipCarrierMethodAndMapToDiscountShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountShipCarrierMethodAndMapToDiscountShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountShipCarrierMethodAndMapToDiscountShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountShipCarrierMethodAndMapToDiscountShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountShipCarrierMethodAndMapToDiscountShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountShipCarrierMethodAndMapToDiscountShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountShipCarrierMethodAndMapToDiscountShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountShipCarrierMethodAndMapToDiscountShipCarrierMethodModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountShipCarrierMethodAndMapToDiscountShipCarrierMethodModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountShipCarrierMethodAndMapToDiscountShipCarrierMethodModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountStore
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountStore_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountStores;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountStoreModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountStoreEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountStoreModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountStoreModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountStoreModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountStoreAndMapToDiscountStoreModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountStoreAndMapToDiscountStoreModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountStoreAndMapToDiscountStoreModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountStoreAndMapToDiscountStoreModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountStoreAndMapToDiscountStoreModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountStoreAndMapToDiscountStoreModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountStoreAndMapToDiscountStoreModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountStoreAndMapToDiscountStoreModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountStoreAndMapToDiscountStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountStoreAndMapToDiscountStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountStoreAndMapToDiscountStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountUser
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountUser_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountUsers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountUserModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountUserEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountUserModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountUserModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountUserModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountUserAndMapToDiscountUserModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountUserAndMapToDiscountUserModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountUserAndMapToDiscountUserModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountUserAndMapToDiscountUserModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountUserAndMapToDiscountUserModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountUserAndMapToDiscountUserModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountUserAndMapToDiscountUserModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountUserAndMapToDiscountUserModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountUserAndMapToDiscountUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountUserAndMapToDiscountUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountUserAndMapToDiscountUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountUserRole
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountUserRole_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountUserRoles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountUserRoleModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountUserRoleEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountUserRoleModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountUserRoleModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountUserRoleModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountUserRoleAndMapToDiscountUserRoleModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountUserRoleAndMapToDiscountUserRoleModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountUserRoleAndMapToDiscountUserRoleModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountUserRoleAndMapToDiscountUserRoleModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountUserRoleAndMapToDiscountUserRoleModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountUserRoleAndMapToDiscountUserRoleModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountUserRoleAndMapToDiscountUserRoleModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountUserRoleAndMapToDiscountUserRoleModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountUserRoleAndMapToDiscountUserRoleModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountUserRoleAndMapToDiscountUserRoleModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountUserRoleAndMapToDiscountUserRoleModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / DiscountVendor
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_DiscountVendor_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DiscountVendors;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDiscountVendorModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDiscountVendorEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDiscountVendorModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDiscountVendorModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDiscountVendorModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDiscountVendorAndMapToDiscountVendorModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDiscountVendorAndMapToDiscountVendorModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDiscountVendorAndMapToDiscountVendorModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDiscountVendorAndMapToDiscountVendorModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDiscountVendorAndMapToDiscountVendorModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDiscountVendorAndMapToDiscountVendorModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDiscountVendorAndMapToDiscountVendorModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDiscountVendorAndMapToDiscountVendorModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDiscountVendorAndMapToDiscountVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDiscountVendorAndMapToDiscountVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDiscountVendorAndMapToDiscountVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / AppliedPurchaseOrderDiscount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedPurchaseOrderDiscount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppliedPurchaseOrderDiscounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppliedPurchaseOrderDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppliedPurchaseOrderDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppliedPurchaseOrderDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppliedPurchaseOrderDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppliedPurchaseOrderDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppliedPurchaseOrderDiscountAndMapToAppliedPurchaseOrderDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppliedPurchaseOrderDiscountAndMapToAppliedPurchaseOrderDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppliedPurchaseOrderDiscountAndMapToAppliedPurchaseOrderDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppliedPurchaseOrderDiscountAndMapToAppliedPurchaseOrderDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppliedPurchaseOrderDiscountAndMapToAppliedPurchaseOrderDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppliedPurchaseOrderDiscountAndMapToAppliedPurchaseOrderDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppliedPurchaseOrderDiscountAndMapToAppliedPurchaseOrderDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppliedPurchaseOrderDiscountAndMapToAppliedPurchaseOrderDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppliedPurchaseOrderDiscountAndMapToAppliedPurchaseOrderDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppliedPurchaseOrderDiscountAndMapToAppliedPurchaseOrderDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppliedPurchaseOrderDiscountAndMapToAppliedPurchaseOrderDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / AppliedPurchaseOrderItemDiscount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedPurchaseOrderItemDiscount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppliedPurchaseOrderItemDiscounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppliedPurchaseOrderItemDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppliedPurchaseOrderItemDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppliedPurchaseOrderItemDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppliedPurchaseOrderItemDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppliedPurchaseOrderItemDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppliedPurchaseOrderItemDiscountAndMapToAppliedPurchaseOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppliedPurchaseOrderItemDiscountAndMapToAppliedPurchaseOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppliedPurchaseOrderItemDiscountAndMapToAppliedPurchaseOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppliedPurchaseOrderItemDiscountAndMapToAppliedPurchaseOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppliedPurchaseOrderItemDiscountAndMapToAppliedPurchaseOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppliedPurchaseOrderItemDiscountAndMapToAppliedPurchaseOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppliedPurchaseOrderItemDiscountAndMapToAppliedPurchaseOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppliedPurchaseOrderItemDiscountAndMapToAppliedPurchaseOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppliedPurchaseOrderItemDiscountAndMapToAppliedPurchaseOrderItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppliedPurchaseOrderItemDiscountAndMapToAppliedPurchaseOrderItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppliedPurchaseOrderItemDiscountAndMapToAppliedPurchaseOrderItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / AppliedSalesInvoiceDiscount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesInvoiceDiscount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppliedSalesInvoiceDiscounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppliedSalesInvoiceDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppliedSalesInvoiceDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppliedSalesInvoiceDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppliedSalesInvoiceDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppliedSalesInvoiceDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppliedSalesInvoiceDiscountAndMapToAppliedSalesInvoiceDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppliedSalesInvoiceDiscountAndMapToAppliedSalesInvoiceDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppliedSalesInvoiceDiscountAndMapToAppliedSalesInvoiceDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppliedSalesInvoiceDiscountAndMapToAppliedSalesInvoiceDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppliedSalesInvoiceDiscountAndMapToAppliedSalesInvoiceDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppliedSalesInvoiceDiscountAndMapToAppliedSalesInvoiceDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppliedSalesInvoiceDiscountAndMapToAppliedSalesInvoiceDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppliedSalesInvoiceDiscountAndMapToAppliedSalesInvoiceDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppliedSalesInvoiceDiscountAndMapToAppliedSalesInvoiceDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppliedSalesInvoiceDiscountAndMapToAppliedSalesInvoiceDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppliedSalesInvoiceDiscountAndMapToAppliedSalesInvoiceDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / AppliedSalesInvoiceItemDiscount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesInvoiceItemDiscount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppliedSalesInvoiceItemDiscounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppliedSalesInvoiceItemDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppliedSalesInvoiceItemDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppliedSalesInvoiceItemDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppliedSalesInvoiceItemDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppliedSalesInvoiceItemDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppliedSalesInvoiceItemDiscountAndMapToAppliedSalesInvoiceItemDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppliedSalesInvoiceItemDiscountAndMapToAppliedSalesInvoiceItemDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppliedSalesInvoiceItemDiscountAndMapToAppliedSalesInvoiceItemDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppliedSalesInvoiceItemDiscountAndMapToAppliedSalesInvoiceItemDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppliedSalesInvoiceItemDiscountAndMapToAppliedSalesInvoiceItemDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppliedSalesInvoiceItemDiscountAndMapToAppliedSalesInvoiceItemDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppliedSalesInvoiceItemDiscountAndMapToAppliedSalesInvoiceItemDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppliedSalesInvoiceItemDiscountAndMapToAppliedSalesInvoiceItemDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppliedSalesInvoiceItemDiscountAndMapToAppliedSalesInvoiceItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppliedSalesInvoiceItemDiscountAndMapToAppliedSalesInvoiceItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppliedSalesInvoiceItemDiscountAndMapToAppliedSalesInvoiceItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / AppliedSalesOrderDiscount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesOrderDiscount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppliedSalesOrderDiscounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppliedSalesOrderDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppliedSalesOrderDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppliedSalesOrderDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppliedSalesOrderDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppliedSalesOrderDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppliedSalesOrderDiscountAndMapToAppliedSalesOrderDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppliedSalesOrderDiscountAndMapToAppliedSalesOrderDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppliedSalesOrderDiscountAndMapToAppliedSalesOrderDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppliedSalesOrderDiscountAndMapToAppliedSalesOrderDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppliedSalesOrderDiscountAndMapToAppliedSalesOrderDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppliedSalesOrderDiscountAndMapToAppliedSalesOrderDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppliedSalesOrderDiscountAndMapToAppliedSalesOrderDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppliedSalesOrderDiscountAndMapToAppliedSalesOrderDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppliedSalesOrderDiscountAndMapToAppliedSalesOrderDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppliedSalesOrderDiscountAndMapToAppliedSalesOrderDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppliedSalesOrderDiscountAndMapToAppliedSalesOrderDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / AppliedSalesOrderItemDiscount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesOrderItemDiscount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppliedSalesOrderItemDiscounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppliedSalesOrderItemDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppliedSalesOrderItemDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppliedSalesOrderItemDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppliedSalesOrderItemDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppliedSalesOrderItemDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppliedSalesOrderItemDiscountAndMapToAppliedSalesOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppliedSalesOrderItemDiscountAndMapToAppliedSalesOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppliedSalesOrderItemDiscountAndMapToAppliedSalesOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppliedSalesOrderItemDiscountAndMapToAppliedSalesOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppliedSalesOrderItemDiscountAndMapToAppliedSalesOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppliedSalesOrderItemDiscountAndMapToAppliedSalesOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppliedSalesOrderItemDiscountAndMapToAppliedSalesOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppliedSalesOrderItemDiscountAndMapToAppliedSalesOrderItemDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppliedSalesOrderItemDiscountAndMapToAppliedSalesOrderItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppliedSalesOrderItemDiscountAndMapToAppliedSalesOrderItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppliedSalesOrderItemDiscountAndMapToAppliedSalesOrderItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / AppliedSalesQuoteDiscount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesQuoteDiscount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppliedSalesQuoteDiscounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppliedSalesQuoteDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppliedSalesQuoteDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppliedSalesQuoteDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppliedSalesQuoteDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppliedSalesQuoteDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppliedSalesQuoteDiscountAndMapToAppliedSalesQuoteDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppliedSalesQuoteDiscountAndMapToAppliedSalesQuoteDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppliedSalesQuoteDiscountAndMapToAppliedSalesQuoteDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppliedSalesQuoteDiscountAndMapToAppliedSalesQuoteDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppliedSalesQuoteDiscountAndMapToAppliedSalesQuoteDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppliedSalesQuoteDiscountAndMapToAppliedSalesQuoteDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppliedSalesQuoteDiscountAndMapToAppliedSalesQuoteDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppliedSalesQuoteDiscountAndMapToAppliedSalesQuoteDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppliedSalesQuoteDiscountAndMapToAppliedSalesQuoteDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppliedSalesQuoteDiscountAndMapToAppliedSalesQuoteDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppliedSalesQuoteDiscountAndMapToAppliedSalesQuoteDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / AppliedSalesQuoteItemDiscount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesQuoteItemDiscount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppliedSalesQuoteItemDiscounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppliedSalesQuoteItemDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppliedSalesQuoteItemDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppliedSalesQuoteItemDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppliedSalesQuoteItemDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppliedSalesQuoteItemDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppliedSalesQuoteItemDiscountAndMapToAppliedSalesQuoteItemDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppliedSalesQuoteItemDiscountAndMapToAppliedSalesQuoteItemDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppliedSalesQuoteItemDiscountAndMapToAppliedSalesQuoteItemDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppliedSalesQuoteItemDiscountAndMapToAppliedSalesQuoteItemDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppliedSalesQuoteItemDiscountAndMapToAppliedSalesQuoteItemDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppliedSalesQuoteItemDiscountAndMapToAppliedSalesQuoteItemDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppliedSalesQuoteItemDiscountAndMapToAppliedSalesQuoteItemDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppliedSalesQuoteItemDiscountAndMapToAppliedSalesQuoteItemDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppliedSalesQuoteItemDiscountAndMapToAppliedSalesQuoteItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppliedSalesQuoteItemDiscountAndMapToAppliedSalesQuoteItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppliedSalesQuoteItemDiscountAndMapToAppliedSalesQuoteItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / AppliedSalesReturnDiscount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesReturnDiscount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppliedSalesReturnDiscounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppliedSalesReturnDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppliedSalesReturnDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppliedSalesReturnDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppliedSalesReturnDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppliedSalesReturnDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppliedSalesReturnDiscountAndMapToAppliedSalesReturnDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppliedSalesReturnDiscountAndMapToAppliedSalesReturnDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppliedSalesReturnDiscountAndMapToAppliedSalesReturnDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppliedSalesReturnDiscountAndMapToAppliedSalesReturnDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppliedSalesReturnDiscountAndMapToAppliedSalesReturnDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppliedSalesReturnDiscountAndMapToAppliedSalesReturnDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppliedSalesReturnDiscountAndMapToAppliedSalesReturnDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppliedSalesReturnDiscountAndMapToAppliedSalesReturnDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppliedSalesReturnDiscountAndMapToAppliedSalesReturnDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppliedSalesReturnDiscountAndMapToAppliedSalesReturnDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppliedSalesReturnDiscountAndMapToAppliedSalesReturnDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / AppliedSalesReturnItemDiscount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSalesReturnItemDiscount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppliedSalesReturnItemDiscounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppliedSalesReturnItemDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppliedSalesReturnItemDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppliedSalesReturnItemDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppliedSalesReturnItemDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppliedSalesReturnItemDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppliedSalesReturnItemDiscountAndMapToAppliedSalesReturnItemDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppliedSalesReturnItemDiscountAndMapToAppliedSalesReturnItemDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppliedSalesReturnItemDiscountAndMapToAppliedSalesReturnItemDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppliedSalesReturnItemDiscountAndMapToAppliedSalesReturnItemDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppliedSalesReturnItemDiscountAndMapToAppliedSalesReturnItemDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppliedSalesReturnItemDiscountAndMapToAppliedSalesReturnItemDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppliedSalesReturnItemDiscountAndMapToAppliedSalesReturnItemDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppliedSalesReturnItemDiscountAndMapToAppliedSalesReturnItemDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppliedSalesReturnItemDiscountAndMapToAppliedSalesReturnItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppliedSalesReturnItemDiscountAndMapToAppliedSalesReturnItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppliedSalesReturnItemDiscountAndMapToAppliedSalesReturnItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / AppliedSampleRequestDiscount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSampleRequestDiscount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppliedSampleRequestDiscounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppliedSampleRequestDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppliedSampleRequestDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppliedSampleRequestDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppliedSampleRequestDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppliedSampleRequestDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppliedSampleRequestDiscountAndMapToAppliedSampleRequestDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Discounts / AppliedSampleRequestItemDiscount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Discounts_AppliedSampleRequestItemDiscount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppliedSampleRequestItemDiscounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppliedSampleRequestItemDiscountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppliedSampleRequestItemDiscountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppliedSampleRequestItemDiscountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppliedSampleRequestItemDiscountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppliedSampleRequestItemDiscountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppliedSampleRequestItemDiscountAndMapToAppliedSampleRequestItemDiscountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppliedSampleRequestItemDiscountAndMapToAppliedSampleRequestItemDiscountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppliedSampleRequestItemDiscountAndMapToAppliedSampleRequestItemDiscountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppliedSampleRequestItemDiscountAndMapToAppliedSampleRequestItemDiscountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppliedSampleRequestItemDiscountAndMapToAppliedSampleRequestItemDiscountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppliedSampleRequestItemDiscountAndMapToAppliedSampleRequestItemDiscountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppliedSampleRequestItemDiscountAndMapToAppliedSampleRequestItemDiscountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppliedSampleRequestItemDiscountAndMapToAppliedSampleRequestItemDiscountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppliedSampleRequestItemDiscountAndMapToAppliedSampleRequestItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppliedSampleRequestItemDiscountAndMapToAppliedSampleRequestItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppliedSampleRequestItemDiscountAndMapToAppliedSampleRequestItemDiscountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Favorites
        #region Favorites / FavoriteCategory
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Favorites_FavoriteCategory_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FavoriteCategories;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFavoriteCategoryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFavoriteCategoryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFavoriteCategoryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFavoriteCategoryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFavoriteCategoryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFavoriteCategoryAndMapToFavoriteCategoryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFavoriteCategoryAndMapToFavoriteCategoryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFavoriteCategoryAndMapToFavoriteCategoryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFavoriteCategoryAndMapToFavoriteCategoryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFavoriteCategoryAndMapToFavoriteCategoryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFavoriteCategoryAndMapToFavoriteCategoryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFavoriteCategoryAndMapToFavoriteCategoryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFavoriteCategoryAndMapToFavoriteCategoryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFavoriteCategoryAndMapToFavoriteCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFavoriteCategoryAndMapToFavoriteCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFavoriteCategoryAndMapToFavoriteCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Favorites / FavoriteManufacturer
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Favorites_FavoriteManufacturer_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FavoriteManufacturers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFavoriteManufacturerModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFavoriteManufacturerEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFavoriteManufacturerModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFavoriteManufacturerModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFavoriteManufacturerModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFavoriteManufacturerAndMapToFavoriteManufacturerModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFavoriteManufacturerAndMapToFavoriteManufacturerModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFavoriteManufacturerAndMapToFavoriteManufacturerModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFavoriteManufacturerAndMapToFavoriteManufacturerModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFavoriteManufacturerAndMapToFavoriteManufacturerModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFavoriteManufacturerAndMapToFavoriteManufacturerModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFavoriteManufacturerAndMapToFavoriteManufacturerModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFavoriteManufacturerAndMapToFavoriteManufacturerModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFavoriteManufacturerAndMapToFavoriteManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFavoriteManufacturerAndMapToFavoriteManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFavoriteManufacturerAndMapToFavoriteManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Favorites / FavoriteShipCarrier
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Favorites_FavoriteShipCarrier_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FavoriteShipCarriers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFavoriteShipCarrierModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFavoriteShipCarrierEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFavoriteShipCarrierModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFavoriteShipCarrierModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFavoriteShipCarrierModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFavoriteShipCarrierAndMapToFavoriteShipCarrierModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFavoriteShipCarrierAndMapToFavoriteShipCarrierModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFavoriteShipCarrierAndMapToFavoriteShipCarrierModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFavoriteShipCarrierAndMapToFavoriteShipCarrierModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFavoriteShipCarrierAndMapToFavoriteShipCarrierModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFavoriteShipCarrierAndMapToFavoriteShipCarrierModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFavoriteShipCarrierAndMapToFavoriteShipCarrierModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFavoriteShipCarrierAndMapToFavoriteShipCarrierModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFavoriteShipCarrierAndMapToFavoriteShipCarrierModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFavoriteShipCarrierAndMapToFavoriteShipCarrierModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFavoriteShipCarrierAndMapToFavoriteShipCarrierModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Favorites / FavoriteStore
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Favorites_FavoriteStore_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FavoriteStores;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFavoriteStoreModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFavoriteStoreEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFavoriteStoreModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFavoriteStoreModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFavoriteStoreModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFavoriteStoreAndMapToFavoriteStoreModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFavoriteStoreAndMapToFavoriteStoreModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFavoriteStoreAndMapToFavoriteStoreModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFavoriteStoreAndMapToFavoriteStoreModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFavoriteStoreAndMapToFavoriteStoreModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFavoriteStoreAndMapToFavoriteStoreModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFavoriteStoreAndMapToFavoriteStoreModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFavoriteStoreAndMapToFavoriteStoreModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFavoriteStoreAndMapToFavoriteStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFavoriteStoreAndMapToFavoriteStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFavoriteStoreAndMapToFavoriteStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Favorites / FavoriteVendor
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Favorites_FavoriteVendor_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FavoriteVendors;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFavoriteVendorModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFavoriteVendorEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFavoriteVendorModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFavoriteVendorModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFavoriteVendorModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFavoriteVendorAndMapToFavoriteVendorModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFavoriteVendorAndMapToFavoriteVendorModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFavoriteVendorAndMapToFavoriteVendorModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFavoriteVendorAndMapToFavoriteVendorModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFavoriteVendorAndMapToFavoriteVendorModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFavoriteVendorAndMapToFavoriteVendorModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFavoriteVendorAndMapToFavoriteVendorModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFavoriteVendorAndMapToFavoriteVendorModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFavoriteVendorAndMapToFavoriteVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFavoriteVendorAndMapToFavoriteVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFavoriteVendorAndMapToFavoriteVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Franchises
        #region Franchises / Franchise
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_Franchise_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Franchises;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseAndMapToFranchiseModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseAndMapToFranchiseModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseAndMapToFranchiseModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseAndMapToFranchiseModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseAndMapToFranchiseModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseAndMapToFranchiseModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseAndMapToFranchiseModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseAndMapToFranchiseModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseAndMapToFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseAndMapToFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseAndMapToFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseAccount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseAccount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseAccounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseAccountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseAccountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseAccountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseAccountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseAccountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseAccountAndMapToFranchiseAccountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseAccountAndMapToFranchiseAccountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseAccountAndMapToFranchiseAccountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseAccountAndMapToFranchiseAccountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseAccountAndMapToFranchiseAccountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseAccountAndMapToFranchiseAccountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseAccountAndMapToFranchiseAccountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseAccountAndMapToFranchiseAccountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseAccountAndMapToFranchiseAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseAccountAndMapToFranchiseAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseAccountAndMapToFranchiseAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseCategory
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseCategory_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseCategories;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseCategoryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseCategoryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseCategoryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseCategoryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseCategoryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseCategoryAndMapToFranchiseCategoryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseCategoryAndMapToFranchiseCategoryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseCategoryAndMapToFranchiseCategoryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseCategoryAndMapToFranchiseCategoryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseCategoryAndMapToFranchiseCategoryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseCategoryAndMapToFranchiseCategoryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseCategoryAndMapToFranchiseCategoryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseCategoryAndMapToFranchiseCategoryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseCategoryAndMapToFranchiseCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseCategoryAndMapToFranchiseCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseCategoryAndMapToFranchiseCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseCountry
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseCountry_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseCountries;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseCountryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseCountryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseCountryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseCountryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseCountryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseCountryAndMapToFranchiseCountryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseCountryAndMapToFranchiseCountryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseCountryAndMapToFranchiseCountryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseCountryAndMapToFranchiseCountryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseCountryAndMapToFranchiseCountryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseCountryAndMapToFranchiseCountryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseCountryAndMapToFranchiseCountryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseCountryAndMapToFranchiseCountryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseCountryAndMapToFranchiseCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseCountryAndMapToFranchiseCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseCountryAndMapToFranchiseCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseCurrency
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseCurrency_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseCurrencies;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseCurrencyModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseCurrencyEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseCurrencyModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseCurrencyModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseCurrencyModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseCurrencyAndMapToFranchiseCurrencyModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseCurrencyAndMapToFranchiseCurrencyModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseCurrencyAndMapToFranchiseCurrencyModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseCurrencyAndMapToFranchiseCurrencyModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseCurrencyAndMapToFranchiseCurrencyModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseCurrencyAndMapToFranchiseCurrencyModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseCurrencyAndMapToFranchiseCurrencyModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseCurrencyAndMapToFranchiseCurrencyModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseCurrencyAndMapToFranchiseCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseCurrencyAndMapToFranchiseCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseCurrencyAndMapToFranchiseCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseDistrict
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseDistrict_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseDistricts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseDistrictModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseDistrictEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseDistrictModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseDistrictModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseDistrictModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseDistrictAndMapToFranchiseDistrictModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseDistrictAndMapToFranchiseDistrictModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseDistrictAndMapToFranchiseDistrictModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseDistrictAndMapToFranchiseDistrictModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseDistrictAndMapToFranchiseDistrictModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseDistrictAndMapToFranchiseDistrictModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseDistrictAndMapToFranchiseDistrictModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseDistrictAndMapToFranchiseDistrictModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseDistrictAndMapToFranchiseDistrictModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseDistrictAndMapToFranchiseDistrictModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseDistrictAndMapToFranchiseDistrictModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseImageAndMapToFranchiseImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseImageAndMapToFranchiseImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseImageAndMapToFranchiseImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseImageAndMapToFranchiseImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseImageAndMapToFranchiseImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseImageAndMapToFranchiseImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseImageAndMapToFranchiseImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseImageAndMapToFranchiseImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseImageAndMapToFranchiseImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseImageAndMapToFranchiseImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseImageAndMapToFranchiseImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseInventoryLocation
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseInventoryLocation_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseInventoryLocations;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseInventoryLocationModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseInventoryLocationEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseInventoryLocationModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseInventoryLocationModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseInventoryLocationModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseInventoryLocationAndMapToFranchiseInventoryLocationModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseInventoryLocationAndMapToFranchiseInventoryLocationModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseInventoryLocationAndMapToFranchiseInventoryLocationModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseInventoryLocationAndMapToFranchiseInventoryLocationModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseInventoryLocationAndMapToFranchiseInventoryLocationModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseInventoryLocationAndMapToFranchiseInventoryLocationModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseInventoryLocationAndMapToFranchiseInventoryLocationModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseInventoryLocationAndMapToFranchiseInventoryLocationModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseInventoryLocationAndMapToFranchiseInventoryLocationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseInventoryLocationAndMapToFranchiseInventoryLocationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseInventoryLocationAndMapToFranchiseInventoryLocationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseInventoryLocationType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseInventoryLocationType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseInventoryLocationTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseInventoryLocationTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseInventoryLocationTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseInventoryLocationTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseInventoryLocationTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseInventoryLocationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseInventoryLocationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseInventoryLocationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseLanguage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseLanguage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseLanguages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseLanguageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseLanguageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseLanguageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseLanguageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseLanguageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseLanguageAndMapToFranchiseLanguageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseLanguageAndMapToFranchiseLanguageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseLanguageAndMapToFranchiseLanguageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseLanguageAndMapToFranchiseLanguageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseLanguageAndMapToFranchiseLanguageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseLanguageAndMapToFranchiseLanguageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseLanguageAndMapToFranchiseLanguageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseLanguageAndMapToFranchiseLanguageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseLanguageAndMapToFranchiseLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseLanguageAndMapToFranchiseLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseLanguageAndMapToFranchiseLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseManufacturer
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseManufacturer_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseManufacturers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseManufacturerModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseManufacturerEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseManufacturerModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseManufacturerModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseManufacturerModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseManufacturerAndMapToFranchiseManufacturerModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseManufacturerAndMapToFranchiseManufacturerModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseManufacturerAndMapToFranchiseManufacturerModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseManufacturerAndMapToFranchiseManufacturerModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseManufacturerAndMapToFranchiseManufacturerModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseManufacturerAndMapToFranchiseManufacturerModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseManufacturerAndMapToFranchiseManufacturerModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseManufacturerAndMapToFranchiseManufacturerModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseManufacturerAndMapToFranchiseManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseManufacturerAndMapToFranchiseManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseManufacturerAndMapToFranchiseManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseProduct
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseProduct_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseProducts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseProductModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseProductEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseProductModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseProductModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseProductModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseProductAndMapToFranchiseProductModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseProductAndMapToFranchiseProductModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseProductAndMapToFranchiseProductModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseProductAndMapToFranchiseProductModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseProductAndMapToFranchiseProductModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseProductAndMapToFranchiseProductModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseProductAndMapToFranchiseProductModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseProductAndMapToFranchiseProductModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseProductAndMapToFranchiseProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseProductAndMapToFranchiseProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseProductAndMapToFranchiseProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseRegion
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseRegion_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseRegions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseRegionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseRegionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseRegionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseRegionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseRegionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseRegionAndMapToFranchiseRegionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseRegionAndMapToFranchiseRegionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseRegionAndMapToFranchiseRegionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseRegionAndMapToFranchiseRegionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseRegionAndMapToFranchiseRegionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseRegionAndMapToFranchiseRegionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseRegionAndMapToFranchiseRegionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseRegionAndMapToFranchiseRegionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseRegionAndMapToFranchiseRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseRegionAndMapToFranchiseRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseRegionAndMapToFranchiseRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseSiteDomain
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseSiteDomain_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseSiteDomains;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseSiteDomainModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseSiteDomainEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseSiteDomainModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseSiteDomainModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseSiteDomainModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseSiteDomainAndMapToFranchiseSiteDomainModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseSiteDomainAndMapToFranchiseSiteDomainModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseSiteDomainAndMapToFranchiseSiteDomainModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseSiteDomainAndMapToFranchiseSiteDomainModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseSiteDomainAndMapToFranchiseSiteDomainModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseSiteDomainAndMapToFranchiseSiteDomainModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseSiteDomainAndMapToFranchiseSiteDomainModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseSiteDomainAndMapToFranchiseSiteDomainModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseSiteDomainAndMapToFranchiseSiteDomainModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseSiteDomainAndMapToFranchiseSiteDomainModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseSiteDomainAndMapToFranchiseSiteDomainModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseStore
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseStore_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseStores;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseStoreModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseStoreEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseStoreModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseStoreModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseStoreModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseStoreAndMapToFranchiseStoreModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseStoreAndMapToFranchiseStoreModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseStoreAndMapToFranchiseStoreModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseStoreAndMapToFranchiseStoreModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseStoreAndMapToFranchiseStoreModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseStoreAndMapToFranchiseStoreModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseStoreAndMapToFranchiseStoreModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseStoreAndMapToFranchiseStoreModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseStoreAndMapToFranchiseStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseStoreAndMapToFranchiseStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseStoreAndMapToFranchiseStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseUser
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseUser_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseUsers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseUserModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseUserEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseUserModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseUserModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseUserModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseUserAndMapToFranchiseUserModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseUserAndMapToFranchiseUserModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseUserAndMapToFranchiseUserModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseUserAndMapToFranchiseUserModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseUserAndMapToFranchiseUserModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseUserAndMapToFranchiseUserModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseUserAndMapToFranchiseUserModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseUserAndMapToFranchiseUserModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseUserAndMapToFranchiseUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseUserAndMapToFranchiseUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseUserAndMapToFranchiseUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Franchises / FranchiseVendor
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Franchises_FranchiseVendor_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FranchiseVendors;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFranchiseVendorModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFranchiseVendorEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFranchiseVendorModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFranchiseVendorModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFranchiseVendorModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFranchiseVendorAndMapToFranchiseVendorModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFranchiseVendorAndMapToFranchiseVendorModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFranchiseVendorAndMapToFranchiseVendorModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFranchiseVendorAndMapToFranchiseVendorModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFranchiseVendorAndMapToFranchiseVendorModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFranchiseVendorAndMapToFranchiseVendorModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFranchiseVendorAndMapToFranchiseVendorModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFranchiseVendorAndMapToFranchiseVendorModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFranchiseVendorAndMapToFranchiseVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFranchiseVendorAndMapToFranchiseVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFranchiseVendorAndMapToFranchiseVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Geography
        #region Geography / Address
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_Address_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Addresses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAddressModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAddressEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAddressModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAddressModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAddressModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAddressAndMapToAddressModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAddressAndMapToAddressModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAddressAndMapToAddressModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAddressAndMapToAddressModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAddressAndMapToAddressModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAddressAndMapToAddressModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAddressAndMapToAddressModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAddressAndMapToAddressModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAddressAndMapToAddressModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAddressAndMapToAddressModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAddressAndMapToAddressModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / Country
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_Country_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Countries;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICountryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCountryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCountryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCountryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCountryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCountryAndMapToCountryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCountryAndMapToCountryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCountryAndMapToCountryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCountryAndMapToCountryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCountryAndMapToCountryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCountryAndMapToCountryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCountryAndMapToCountryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCountryAndMapToCountryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCountryAndMapToCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCountryAndMapToCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCountryAndMapToCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / CountryCurrency
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_CountryCurrency_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CountryCurrencies;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICountryCurrencyModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCountryCurrencyEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCountryCurrencyModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCountryCurrencyModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCountryCurrencyModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCountryCurrencyAndMapToCountryCurrencyModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCountryCurrencyAndMapToCountryCurrencyModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCountryCurrencyAndMapToCountryCurrencyModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCountryCurrencyAndMapToCountryCurrencyModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCountryCurrencyAndMapToCountryCurrencyModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCountryCurrencyAndMapToCountryCurrencyModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCountryCurrencyAndMapToCountryCurrencyModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCountryCurrencyAndMapToCountryCurrencyModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCountryCurrencyAndMapToCountryCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCountryCurrencyAndMapToCountryCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCountryCurrencyAndMapToCountryCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / CountryImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_CountryImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CountryImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICountryImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCountryImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCountryImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCountryImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCountryImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCountryImageAndMapToCountryImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCountryImageAndMapToCountryImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCountryImageAndMapToCountryImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCountryImageAndMapToCountryImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCountryImageAndMapToCountryImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCountryImageAndMapToCountryImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCountryImageAndMapToCountryImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCountryImageAndMapToCountryImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCountryImageAndMapToCountryImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCountryImageAndMapToCountryImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCountryImageAndMapToCountryImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / CountryImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_CountryImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CountryImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCountryImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCountryImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCountryImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCountryImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCountryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCountryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCountryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCountryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCountryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCountryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCountryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCountryImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCountryImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCountryImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCountryImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / CountryLanguage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_CountryLanguage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CountryLanguages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICountryLanguageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCountryLanguageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCountryLanguageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCountryLanguageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCountryLanguageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCountryLanguageAndMapToCountryLanguageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCountryLanguageAndMapToCountryLanguageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCountryLanguageAndMapToCountryLanguageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCountryLanguageAndMapToCountryLanguageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCountryLanguageAndMapToCountryLanguageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCountryLanguageAndMapToCountryLanguageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCountryLanguageAndMapToCountryLanguageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCountryLanguageAndMapToCountryLanguageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCountryLanguageAndMapToCountryLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCountryLanguageAndMapToCountryLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCountryLanguageAndMapToCountryLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / District
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_District_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Districts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDistrictModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDistrictEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDistrictModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDistrictModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDistrictModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDistrictAndMapToDistrictModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDistrictAndMapToDistrictModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDistrictAndMapToDistrictModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDistrictAndMapToDistrictModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDistrictAndMapToDistrictModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDistrictAndMapToDistrictModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDistrictAndMapToDistrictModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDistrictAndMapToDistrictModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDistrictAndMapToDistrictModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDistrictAndMapToDistrictModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDistrictAndMapToDistrictModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / DistrictCurrency
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_DistrictCurrency_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DistrictCurrencies;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDistrictCurrencyModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDistrictCurrencyEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDistrictCurrencyModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDistrictCurrencyModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDistrictCurrencyModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDistrictCurrencyAndMapToDistrictCurrencyModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDistrictCurrencyAndMapToDistrictCurrencyModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDistrictCurrencyAndMapToDistrictCurrencyModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDistrictCurrencyAndMapToDistrictCurrencyModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDistrictCurrencyAndMapToDistrictCurrencyModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDistrictCurrencyAndMapToDistrictCurrencyModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDistrictCurrencyAndMapToDistrictCurrencyModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDistrictCurrencyAndMapToDistrictCurrencyModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDistrictCurrencyAndMapToDistrictCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDistrictCurrencyAndMapToDistrictCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDistrictCurrencyAndMapToDistrictCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / DistrictImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_DistrictImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DistrictImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDistrictImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDistrictImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDistrictImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDistrictImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDistrictImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDistrictImageAndMapToDistrictImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDistrictImageAndMapToDistrictImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDistrictImageAndMapToDistrictImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDistrictImageAndMapToDistrictImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDistrictImageAndMapToDistrictImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDistrictImageAndMapToDistrictImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDistrictImageAndMapToDistrictImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDistrictImageAndMapToDistrictImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDistrictImageAndMapToDistrictImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDistrictImageAndMapToDistrictImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDistrictImageAndMapToDistrictImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / DistrictImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_DistrictImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DistrictImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDistrictImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDistrictImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDistrictImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDistrictImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDistrictImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDistrictImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDistrictImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDistrictImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDistrictImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDistrictImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDistrictImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDistrictImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDistrictImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDistrictImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDistrictImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / DistrictLanguage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_DistrictLanguage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.DistrictLanguages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IDistrictLanguageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateDistrictLanguageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateDistrictLanguageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateDistrictLanguageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateDistrictLanguageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListDistrictLanguageAndMapToDistrictLanguageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullDistrictLanguageAndMapToDistrictLanguageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListDistrictLanguageAndMapToDistrictLanguageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteDistrictLanguageAndMapToDistrictLanguageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullDistrictLanguageAndMapToDistrictLanguageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListDistrictLanguageAndMapToDistrictLanguageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteDistrictLanguageAndMapToDistrictLanguageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullDistrictLanguageAndMapToDistrictLanguageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListDistrictLanguageAndMapToDistrictLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteDistrictLanguageAndMapToDistrictLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullDistrictLanguageAndMapToDistrictLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / HistoricalAddressValidation
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_HistoricalAddressValidation_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.HistoricalAddressValidations;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IHistoricalAddressValidationModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateHistoricalAddressValidationEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateHistoricalAddressValidationModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateHistoricalAddressValidationModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateHistoricalAddressValidationModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullHistoricalAddressValidationAndMapToHistoricalAddressValidationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / PhonePrefixLookup
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_PhonePrefixLookup_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PhonePrefixLookups;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPhonePrefixLookupModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePhonePrefixLookupEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePhonePrefixLookupModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePhonePrefixLookupModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePhonePrefixLookupModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPhonePrefixLookupAndMapToPhonePrefixLookupModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPhonePrefixLookupAndMapToPhonePrefixLookupModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPhonePrefixLookupAndMapToPhonePrefixLookupModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePhonePrefixLookupAndMapToPhonePrefixLookupModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPhonePrefixLookupAndMapToPhonePrefixLookupModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPhonePrefixLookupAndMapToPhonePrefixLookupModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePhonePrefixLookupAndMapToPhonePrefixLookupModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPhonePrefixLookupAndMapToPhonePrefixLookupModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPhonePrefixLookupAndMapToPhonePrefixLookupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePhonePrefixLookupAndMapToPhonePrefixLookupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPhonePrefixLookupAndMapToPhonePrefixLookupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / Region
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_Region_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Regions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IRegionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateRegionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateRegionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateRegionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateRegionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListRegionAndMapToRegionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullRegionAndMapToRegionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListRegionAndMapToRegionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteRegionAndMapToRegionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullRegionAndMapToRegionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListRegionAndMapToRegionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteRegionAndMapToRegionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullRegionAndMapToRegionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListRegionAndMapToRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteRegionAndMapToRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullRegionAndMapToRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / RegionCurrency
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_RegionCurrency_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.RegionCurrencies;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IRegionCurrencyModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateRegionCurrencyEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateRegionCurrencyModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateRegionCurrencyModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateRegionCurrencyModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListRegionCurrencyAndMapToRegionCurrencyModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullRegionCurrencyAndMapToRegionCurrencyModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListRegionCurrencyAndMapToRegionCurrencyModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteRegionCurrencyAndMapToRegionCurrencyModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullRegionCurrencyAndMapToRegionCurrencyModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListRegionCurrencyAndMapToRegionCurrencyModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteRegionCurrencyAndMapToRegionCurrencyModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullRegionCurrencyAndMapToRegionCurrencyModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListRegionCurrencyAndMapToRegionCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteRegionCurrencyAndMapToRegionCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullRegionCurrencyAndMapToRegionCurrencyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / RegionImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_RegionImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.RegionImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IRegionImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateRegionImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateRegionImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateRegionImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateRegionImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListRegionImageAndMapToRegionImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullRegionImageAndMapToRegionImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListRegionImageAndMapToRegionImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteRegionImageAndMapToRegionImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullRegionImageAndMapToRegionImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListRegionImageAndMapToRegionImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteRegionImageAndMapToRegionImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullRegionImageAndMapToRegionImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListRegionImageAndMapToRegionImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteRegionImageAndMapToRegionImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullRegionImageAndMapToRegionImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / RegionImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_RegionImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.RegionImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateRegionImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateRegionImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateRegionImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateRegionImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListRegionImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullRegionImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListRegionImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteRegionImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullRegionImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListRegionImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteRegionImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullRegionImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListRegionImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteRegionImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullRegionImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / RegionLanguage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_RegionLanguage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.RegionLanguages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IRegionLanguageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateRegionLanguageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateRegionLanguageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateRegionLanguageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateRegionLanguageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListRegionLanguageAndMapToRegionLanguageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullRegionLanguageAndMapToRegionLanguageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListRegionLanguageAndMapToRegionLanguageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteRegionLanguageAndMapToRegionLanguageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullRegionLanguageAndMapToRegionLanguageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListRegionLanguageAndMapToRegionLanguageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteRegionLanguageAndMapToRegionLanguageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullRegionLanguageAndMapToRegionLanguageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListRegionLanguageAndMapToRegionLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteRegionLanguageAndMapToRegionLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullRegionLanguageAndMapToRegionLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Geography / ZipCode
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Geography_ZipCode_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ZipCodes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IZipCodeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateZipCodeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateZipCodeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateZipCodeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateZipCodeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListZipCodeAndMapToZipCodeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullZipCodeAndMapToZipCodeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListZipCodeAndMapToZipCodeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteZipCodeAndMapToZipCodeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullZipCodeAndMapToZipCodeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListZipCodeAndMapToZipCodeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteZipCodeAndMapToZipCodeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullZipCodeAndMapToZipCodeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListZipCodeAndMapToZipCodeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteZipCodeAndMapToZipCodeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullZipCodeAndMapToZipCodeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Globalization
        #region Globalization / Language
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Globalization_Language_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Languages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ILanguageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateLanguageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateLanguageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateLanguageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateLanguageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListLanguageAndMapToLanguageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullLanguageAndMapToLanguageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListLanguageAndMapToLanguageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteLanguageAndMapToLanguageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullLanguageAndMapToLanguageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListLanguageAndMapToLanguageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteLanguageAndMapToLanguageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullLanguageAndMapToLanguageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListLanguageAndMapToLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteLanguageAndMapToLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullLanguageAndMapToLanguageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Globalization / LanguageImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Globalization_LanguageImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.LanguageImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ILanguageImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateLanguageImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateLanguageImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateLanguageImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateLanguageImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListLanguageImageAndMapToLanguageImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullLanguageImageAndMapToLanguageImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListLanguageImageAndMapToLanguageImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteLanguageImageAndMapToLanguageImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullLanguageImageAndMapToLanguageImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListLanguageImageAndMapToLanguageImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteLanguageImageAndMapToLanguageImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullLanguageImageAndMapToLanguageImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListLanguageImageAndMapToLanguageImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteLanguageImageAndMapToLanguageImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullLanguageImageAndMapToLanguageImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Globalization / LanguageImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Globalization_LanguageImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.LanguageImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateLanguageImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateLanguageImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateLanguageImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateLanguageImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListLanguageImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullLanguageImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListLanguageImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteLanguageImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullLanguageImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListLanguageImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteLanguageImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullLanguageImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListLanguageImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteLanguageImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullLanguageImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Globalization / UiKey
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Globalization_UiKey_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.UiKeys;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IUiKeyModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateUiKeyEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateUiKeyModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateUiKeyModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateUiKeyModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListUiKeyAndMapToUiKeyModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullUiKeyAndMapToUiKeyModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListUiKeyAndMapToUiKeyModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteUiKeyAndMapToUiKeyModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullUiKeyAndMapToUiKeyModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListUiKeyAndMapToUiKeyModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteUiKeyAndMapToUiKeyModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullUiKeyAndMapToUiKeyModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListUiKeyAndMapToUiKeyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteUiKeyAndMapToUiKeyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullUiKeyAndMapToUiKeyModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Globalization / UiTranslation
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Globalization_UiTranslation_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.UiTranslations;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IUiTranslationModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateUiTranslationEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateUiTranslationModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateUiTranslationModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateUiTranslationModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListUiTranslationAndMapToUiTranslationModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullUiTranslationAndMapToUiTranslationModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListUiTranslationAndMapToUiTranslationModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteUiTranslationAndMapToUiTranslationModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullUiTranslationAndMapToUiTranslationModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListUiTranslationAndMapToUiTranslationModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteUiTranslationAndMapToUiTranslationModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullUiTranslationAndMapToUiTranslationModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListUiTranslationAndMapToUiTranslationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteUiTranslationAndMapToUiTranslationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullUiTranslationAndMapToUiTranslationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Groups
        #region Groups / Group
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Groups_Group_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Groups;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IGroupModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateGroupEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateGroupModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateGroupModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateGroupModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListGroupAndMapToGroupModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullGroupAndMapToGroupModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListGroupAndMapToGroupModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteGroupAndMapToGroupModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullGroupAndMapToGroupModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListGroupAndMapToGroupModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteGroupAndMapToGroupModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullGroupAndMapToGroupModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListGroupAndMapToGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteGroupAndMapToGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullGroupAndMapToGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Groups / GroupStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Groups_GroupStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.GroupStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateGroupStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateGroupStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateGroupStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateGroupStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListGroupStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullGroupStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListGroupStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteGroupStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullGroupStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListGroupStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteGroupStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullGroupStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListGroupStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteGroupStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullGroupStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Groups / GroupType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Groups_GroupType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.GroupTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateGroupTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateGroupTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateGroupTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateGroupTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListGroupTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullGroupTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListGroupTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteGroupTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullGroupTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListGroupTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteGroupTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullGroupTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListGroupTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteGroupTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullGroupTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Groups / GroupUser
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Groups_GroupUser_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.GroupUsers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IGroupUserModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateGroupUserEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateGroupUserModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateGroupUserModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateGroupUserModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListGroupUserAndMapToGroupUserModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullGroupUserAndMapToGroupUserModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListGroupUserAndMapToGroupUserModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteGroupUserAndMapToGroupUserModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullGroupUserAndMapToGroupUserModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListGroupUserAndMapToGroupUserModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteGroupUserAndMapToGroupUserModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullGroupUserAndMapToGroupUserModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListGroupUserAndMapToGroupUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteGroupUserAndMapToGroupUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullGroupUserAndMapToGroupUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Hangfire
                // Skipping Hangfire / HangfireAggregatedCounter
                // Skipping Hangfire / HangfireCounter
                // Skipping Hangfire / HangfireHash
                // Skipping Hangfire / HangfireJob
                // Skipping Hangfire / HangfireJobParameter
                // Skipping Hangfire / HangfireJobQueue
                // Skipping Hangfire / HangfireList
        #region Hangfire / ScheduledJobConfiguration
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Hangfire_ScheduledJobConfiguration_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ScheduledJobConfigurations;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IScheduledJobConfigurationModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateScheduledJobConfigurationEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateScheduledJobConfigurationModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateScheduledJobConfigurationModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateScheduledJobConfigurationModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullScheduledJobConfigurationAndMapToScheduledJobConfigurationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Hangfire / ScheduledJobConfigurationSetting
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Hangfire_ScheduledJobConfigurationSetting_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ScheduledJobConfigurationSettings;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IScheduledJobConfigurationSettingModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateScheduledJobConfigurationSettingEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateScheduledJobConfigurationSettingModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateScheduledJobConfigurationSettingModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateScheduledJobConfigurationSettingModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListScheduledJobConfigurationSettingAndMapToScheduledJobConfigurationSettingModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullScheduledJobConfigurationSettingAndMapToScheduledJobConfigurationSettingModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListScheduledJobConfigurationSettingAndMapToScheduledJobConfigurationSettingModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteScheduledJobConfigurationSettingAndMapToScheduledJobConfigurationSettingModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullScheduledJobConfigurationSettingAndMapToScheduledJobConfigurationSettingModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListScheduledJobConfigurationSettingAndMapToScheduledJobConfigurationSettingModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteScheduledJobConfigurationSettingAndMapToScheduledJobConfigurationSettingModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullScheduledJobConfigurationSettingAndMapToScheduledJobConfigurationSettingModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListScheduledJobConfigurationSettingAndMapToScheduledJobConfigurationSettingModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteScheduledJobConfigurationSettingAndMapToScheduledJobConfigurationSettingModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullScheduledJobConfigurationSettingAndMapToScheduledJobConfigurationSettingModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Hangfire / HangfireSchema
                // Skipping Hangfire / HangfireServer
                // Skipping Hangfire / HangfireSet
                // Skipping Hangfire / HangfireState
        #endregion
        #region Inventory
        #region Inventory / InventoryLocation
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Inventory_InventoryLocation_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.InventoryLocations;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IInventoryLocationModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateInventoryLocationEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateInventoryLocationModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateInventoryLocationModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateInventoryLocationModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListInventoryLocationAndMapToInventoryLocationModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullInventoryLocationAndMapToInventoryLocationModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListInventoryLocationAndMapToInventoryLocationModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteInventoryLocationAndMapToInventoryLocationModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullInventoryLocationAndMapToInventoryLocationModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListInventoryLocationAndMapToInventoryLocationModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteInventoryLocationAndMapToInventoryLocationModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullInventoryLocationAndMapToInventoryLocationModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListInventoryLocationAndMapToInventoryLocationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteInventoryLocationAndMapToInventoryLocationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullInventoryLocationAndMapToInventoryLocationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Inventory / InventoryLocationRegion
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Inventory_InventoryLocationRegion_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.InventoryLocationRegions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IInventoryLocationRegionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateInventoryLocationRegionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateInventoryLocationRegionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateInventoryLocationRegionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateInventoryLocationRegionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListInventoryLocationRegionAndMapToInventoryLocationRegionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullInventoryLocationRegionAndMapToInventoryLocationRegionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListInventoryLocationRegionAndMapToInventoryLocationRegionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteInventoryLocationRegionAndMapToInventoryLocationRegionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullInventoryLocationRegionAndMapToInventoryLocationRegionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListInventoryLocationRegionAndMapToInventoryLocationRegionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteInventoryLocationRegionAndMapToInventoryLocationRegionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullInventoryLocationRegionAndMapToInventoryLocationRegionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListInventoryLocationRegionAndMapToInventoryLocationRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteInventoryLocationRegionAndMapToInventoryLocationRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullInventoryLocationRegionAndMapToInventoryLocationRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Inventory / InventoryLocationSection
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Inventory_InventoryLocationSection_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.InventoryLocationSections;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IInventoryLocationSectionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateInventoryLocationSectionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateInventoryLocationSectionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateInventoryLocationSectionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateInventoryLocationSectionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListInventoryLocationSectionAndMapToInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullInventoryLocationSectionAndMapToInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListInventoryLocationSectionAndMapToInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteInventoryLocationSectionAndMapToInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullInventoryLocationSectionAndMapToInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListInventoryLocationSectionAndMapToInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteInventoryLocationSectionAndMapToInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullInventoryLocationSectionAndMapToInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListInventoryLocationSectionAndMapToInventoryLocationSectionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteInventoryLocationSectionAndMapToInventoryLocationSectionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullInventoryLocationSectionAndMapToInventoryLocationSectionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Inventory / InventoryLocationUser
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Inventory_InventoryLocationUser_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.InventoryLocationUsers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IInventoryLocationUserModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateInventoryLocationUserEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateInventoryLocationUserModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateInventoryLocationUserModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateInventoryLocationUserModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListInventoryLocationUserAndMapToInventoryLocationUserModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullInventoryLocationUserAndMapToInventoryLocationUserModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListInventoryLocationUserAndMapToInventoryLocationUserModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteInventoryLocationUserAndMapToInventoryLocationUserModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullInventoryLocationUserAndMapToInventoryLocationUserModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListInventoryLocationUserAndMapToInventoryLocationUserModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteInventoryLocationUserAndMapToInventoryLocationUserModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullInventoryLocationUserAndMapToInventoryLocationUserModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListInventoryLocationUserAndMapToInventoryLocationUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteInventoryLocationUserAndMapToInventoryLocationUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullInventoryLocationUserAndMapToInventoryLocationUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Invoicing
        #region Invoicing / SalesInvoice
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoice_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesInvoices;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesInvoiceModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesInvoiceEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesInvoiceModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesInvoiceModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesInvoiceModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesInvoiceAndMapToSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesInvoiceAndMapToSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesInvoiceAndMapToSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesInvoiceAndMapToSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesInvoiceAndMapToSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesInvoiceAndMapToSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesInvoiceAndMapToSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesInvoiceAndMapToSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesInvoiceAndMapToSalesInvoiceModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesInvoiceAndMapToSalesInvoiceModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesInvoiceAndMapToSalesInvoiceModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Invoicing / SalesInvoiceContact
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceContact_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesInvoiceContacts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesInvoiceContactModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesInvoiceContactEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesInvoiceContactModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesInvoiceContactModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesInvoiceContactModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesInvoiceContactAndMapToSalesInvoiceContactModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesInvoiceContactAndMapToSalesInvoiceContactModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesInvoiceContactAndMapToSalesInvoiceContactModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesInvoiceContactAndMapToSalesInvoiceContactModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesInvoiceContactAndMapToSalesInvoiceContactModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesInvoiceContactAndMapToSalesInvoiceContactModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesInvoiceContactAndMapToSalesInvoiceContactModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesInvoiceContactAndMapToSalesInvoiceContactModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesInvoiceContactAndMapToSalesInvoiceContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesInvoiceContactAndMapToSalesInvoiceContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesInvoiceContactAndMapToSalesInvoiceContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Invoicing / SalesInvoiceEvent
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceEvent_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesInvoiceEvents;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesInvoiceEventModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesInvoiceEventEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesInvoiceEventModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesInvoiceEventModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesInvoiceEventModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesInvoiceEventAndMapToSalesInvoiceEventModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesInvoiceEventAndMapToSalesInvoiceEventModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesInvoiceEventAndMapToSalesInvoiceEventModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesInvoiceEventAndMapToSalesInvoiceEventModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesInvoiceEventAndMapToSalesInvoiceEventModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesInvoiceEventAndMapToSalesInvoiceEventModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesInvoiceEventAndMapToSalesInvoiceEventModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesInvoiceEventAndMapToSalesInvoiceEventModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesInvoiceEventAndMapToSalesInvoiceEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesInvoiceEventAndMapToSalesInvoiceEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesInvoiceEventAndMapToSalesInvoiceEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Invoicing / SalesInvoiceEventType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceEventType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesInvoiceEventTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesInvoiceEventTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesInvoiceEventTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesInvoiceEventTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesInvoiceEventTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesInvoiceEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesInvoiceEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesInvoiceEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesInvoiceEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesInvoiceEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesInvoiceEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesInvoiceEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesInvoiceEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesInvoiceEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesInvoiceEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesInvoiceEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Invoicing / SalesInvoiceFile
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceFile_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesInvoiceFiles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesInvoiceFileModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesInvoiceFileEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesInvoiceFileModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesInvoiceFileModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesInvoiceFileModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesInvoiceFileAndMapToSalesInvoiceFileModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesInvoiceFileAndMapToSalesInvoiceFileModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesInvoiceFileAndMapToSalesInvoiceFileModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesInvoiceFileAndMapToSalesInvoiceFileModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesInvoiceFileAndMapToSalesInvoiceFileModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesInvoiceFileAndMapToSalesInvoiceFileModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesInvoiceFileAndMapToSalesInvoiceFileModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesInvoiceFileAndMapToSalesInvoiceFileModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesInvoiceFileAndMapToSalesInvoiceFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesInvoiceFileAndMapToSalesInvoiceFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesInvoiceFileAndMapToSalesInvoiceFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Invoicing / SalesInvoiceItem
        #region Invoicing / SalesInvoiceItemTarget
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceItemTarget_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesInvoiceItemTargets;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesItemTargetBaseModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesInvoiceItemTargetEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesInvoiceItemTargetModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesInvoiceItemTargetModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesInvoiceItemTargetModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesInvoiceItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesInvoiceItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesInvoiceItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesInvoiceItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesInvoiceItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesInvoiceItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesInvoiceItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesInvoiceItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesInvoiceItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesInvoiceItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesInvoiceItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Invoicing / SalesInvoiceState
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceState_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesInvoiceStates;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStateModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesInvoiceStateEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesInvoiceStateModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesInvoiceStateModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesInvoiceStateModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesInvoiceStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesInvoiceStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesInvoiceStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesInvoiceStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesInvoiceStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesInvoiceStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesInvoiceStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesInvoiceStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesInvoiceStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesInvoiceStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesInvoiceStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Invoicing / SalesInvoiceStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesInvoiceStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesInvoiceStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesInvoiceStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesInvoiceStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesInvoiceStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesInvoiceStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesInvoiceStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesInvoiceStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesInvoiceStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesInvoiceStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesInvoiceStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesInvoiceStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesInvoiceStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesInvoiceStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesInvoiceStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesInvoiceStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Invoicing / SalesInvoiceType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesInvoiceType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesInvoiceTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesInvoiceTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesInvoiceTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesInvoiceTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesInvoiceTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesInvoiceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesInvoiceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesInvoiceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesInvoiceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesInvoiceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesInvoiceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesInvoiceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesInvoiceTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesInvoiceTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesInvoiceTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesInvoiceTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Invoicing / SalesOrderSalesInvoice
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Invoicing_SalesOrderSalesInvoice_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesOrderSalesInvoices;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesOrderSalesInvoiceModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesOrderSalesInvoiceEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesOrderSalesInvoiceModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesOrderSalesInvoiceModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesOrderSalesInvoiceModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesOrderSalesInvoiceAndMapToSalesOrderSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesOrderSalesInvoiceAndMapToSalesOrderSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesOrderSalesInvoiceAndMapToSalesOrderSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesOrderSalesInvoiceAndMapToSalesOrderSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesOrderSalesInvoiceAndMapToSalesOrderSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesOrderSalesInvoiceAndMapToSalesOrderSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesOrderSalesInvoiceAndMapToSalesOrderSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesOrderSalesInvoiceAndMapToSalesOrderSalesInvoiceModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesOrderSalesInvoiceAndMapToSalesOrderSalesInvoiceModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesOrderSalesInvoiceAndMapToSalesOrderSalesInvoiceModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesOrderSalesInvoiceAndMapToSalesOrderSalesInvoiceModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Manufacturers
        #region Manufacturers / Manufacturer
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Manufacturers_Manufacturer_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Manufacturers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IManufacturerModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateManufacturerEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateManufacturerModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateManufacturerModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateManufacturerModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListManufacturerAndMapToManufacturerModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullManufacturerAndMapToManufacturerModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListManufacturerAndMapToManufacturerModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteManufacturerAndMapToManufacturerModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullManufacturerAndMapToManufacturerModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListManufacturerAndMapToManufacturerModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteManufacturerAndMapToManufacturerModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullManufacturerAndMapToManufacturerModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListManufacturerAndMapToManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteManufacturerAndMapToManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullManufacturerAndMapToManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Manufacturers / ManufacturerImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Manufacturers_ManufacturerImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ManufacturerImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IManufacturerImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateManufacturerImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateManufacturerImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateManufacturerImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateManufacturerImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListManufacturerImageAndMapToManufacturerImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullManufacturerImageAndMapToManufacturerImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListManufacturerImageAndMapToManufacturerImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteManufacturerImageAndMapToManufacturerImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullManufacturerImageAndMapToManufacturerImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListManufacturerImageAndMapToManufacturerImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteManufacturerImageAndMapToManufacturerImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullManufacturerImageAndMapToManufacturerImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListManufacturerImageAndMapToManufacturerImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteManufacturerImageAndMapToManufacturerImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullManufacturerImageAndMapToManufacturerImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Manufacturers / ManufacturerImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Manufacturers_ManufacturerImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ManufacturerImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateManufacturerImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateManufacturerImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateManufacturerImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateManufacturerImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListManufacturerImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullManufacturerImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListManufacturerImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteManufacturerImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullManufacturerImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListManufacturerImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteManufacturerImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullManufacturerImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListManufacturerImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteManufacturerImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullManufacturerImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Manufacturers / ManufacturerProduct
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Manufacturers_ManufacturerProduct_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ManufacturerProducts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IManufacturerProductModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateManufacturerProductEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateManufacturerProductModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateManufacturerProductModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateManufacturerProductModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListManufacturerProductAndMapToManufacturerProductModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullManufacturerProductAndMapToManufacturerProductModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListManufacturerProductAndMapToManufacturerProductModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteManufacturerProductAndMapToManufacturerProductModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullManufacturerProductAndMapToManufacturerProductModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListManufacturerProductAndMapToManufacturerProductModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteManufacturerProductAndMapToManufacturerProductModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullManufacturerProductAndMapToManufacturerProductModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListManufacturerProductAndMapToManufacturerProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteManufacturerProductAndMapToManufacturerProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullManufacturerProductAndMapToManufacturerProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Manufacturers / ManufacturerType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Manufacturers_ManufacturerType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ManufacturerTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateManufacturerTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateManufacturerTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateManufacturerTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateManufacturerTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListManufacturerTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullManufacturerTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListManufacturerTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteManufacturerTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullManufacturerTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListManufacturerTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteManufacturerTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullManufacturerTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListManufacturerTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteManufacturerTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullManufacturerTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Media
        #region Media / StoredFile
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Media_StoredFile_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoredFiles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoredFileModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoredFileEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoredFileModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoredFileModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoredFileModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoredFileAndMapToStoredFileModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoredFileAndMapToStoredFileModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoredFileAndMapToStoredFileModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoredFileAndMapToStoredFileModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoredFileAndMapToStoredFileModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoredFileAndMapToStoredFileModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoredFileAndMapToStoredFileModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoredFileAndMapToStoredFileModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoredFileAndMapToStoredFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoredFileAndMapToStoredFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoredFileAndMapToStoredFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Messaging
        #region Messaging / Conversation
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_Conversation_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Conversations;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IConversationModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateConversationEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateConversationModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateConversationModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateConversationModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListConversationAndMapToConversationModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullConversationAndMapToConversationModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListConversationAndMapToConversationModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteConversationAndMapToConversationModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullConversationAndMapToConversationModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListConversationAndMapToConversationModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteConversationAndMapToConversationModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullConversationAndMapToConversationModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListConversationAndMapToConversationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteConversationAndMapToConversationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullConversationAndMapToConversationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Messaging / ConversationUser
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_ConversationUser_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ConversationUsers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IConversationUserModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateConversationUserEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateConversationUserModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateConversationUserModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateConversationUserModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListConversationUserAndMapToConversationUserModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullConversationUserAndMapToConversationUserModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListConversationUserAndMapToConversationUserModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteConversationUserAndMapToConversationUserModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullConversationUserAndMapToConversationUserModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListConversationUserAndMapToConversationUserModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteConversationUserAndMapToConversationUserModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullConversationUserAndMapToConversationUserModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListConversationUserAndMapToConversationUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteConversationUserAndMapToConversationUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullConversationUserAndMapToConversationUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Messaging / EmailQueue
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_EmailQueue_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.EmailQueues;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IEmailQueueModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateEmailQueueEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateEmailQueueModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateEmailQueueModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateEmailQueueModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListEmailQueueAndMapToEmailQueueModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullEmailQueueAndMapToEmailQueueModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListEmailQueueAndMapToEmailQueueModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteEmailQueueAndMapToEmailQueueModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullEmailQueueAndMapToEmailQueueModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListEmailQueueAndMapToEmailQueueModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteEmailQueueAndMapToEmailQueueModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullEmailQueueAndMapToEmailQueueModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListEmailQueueAndMapToEmailQueueModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteEmailQueueAndMapToEmailQueueModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullEmailQueueAndMapToEmailQueueModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Messaging / EmailQueueAttachment
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_EmailQueueAttachment_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.EmailQueueAttachments;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IEmailQueueAttachmentModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateEmailQueueAttachmentEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateEmailQueueAttachmentModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateEmailQueueAttachmentModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateEmailQueueAttachmentModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListEmailQueueAttachmentAndMapToEmailQueueAttachmentModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullEmailQueueAttachmentAndMapToEmailQueueAttachmentModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListEmailQueueAttachmentAndMapToEmailQueueAttachmentModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteEmailQueueAttachmentAndMapToEmailQueueAttachmentModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullEmailQueueAttachmentAndMapToEmailQueueAttachmentModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListEmailQueueAttachmentAndMapToEmailQueueAttachmentModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteEmailQueueAttachmentAndMapToEmailQueueAttachmentModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullEmailQueueAttachmentAndMapToEmailQueueAttachmentModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListEmailQueueAttachmentAndMapToEmailQueueAttachmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteEmailQueueAttachmentAndMapToEmailQueueAttachmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullEmailQueueAttachmentAndMapToEmailQueueAttachmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Messaging / EmailStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_EmailStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.EmailStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateEmailStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateEmailStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateEmailStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateEmailStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListEmailStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullEmailStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListEmailStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteEmailStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullEmailStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListEmailStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteEmailStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullEmailStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListEmailStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteEmailStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullEmailStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Messaging / EmailTemplate
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_EmailTemplate_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.EmailTemplates;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IEmailTemplateModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateEmailTemplateEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateEmailTemplateModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateEmailTemplateModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateEmailTemplateModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListEmailTemplateAndMapToEmailTemplateModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullEmailTemplateAndMapToEmailTemplateModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListEmailTemplateAndMapToEmailTemplateModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteEmailTemplateAndMapToEmailTemplateModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullEmailTemplateAndMapToEmailTemplateModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListEmailTemplateAndMapToEmailTemplateModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteEmailTemplateAndMapToEmailTemplateModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullEmailTemplateAndMapToEmailTemplateModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListEmailTemplateAndMapToEmailTemplateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteEmailTemplateAndMapToEmailTemplateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullEmailTemplateAndMapToEmailTemplateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Messaging / EmailType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_EmailType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.EmailTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateEmailTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateEmailTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateEmailTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateEmailTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListEmailTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullEmailTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListEmailTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteEmailTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullEmailTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListEmailTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteEmailTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullEmailTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListEmailTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteEmailTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullEmailTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Messaging / Message
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_Message_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Messages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IMessageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateMessageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateMessageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateMessageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateMessageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListMessageAndMapToMessageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullMessageAndMapToMessageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListMessageAndMapToMessageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteMessageAndMapToMessageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullMessageAndMapToMessageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListMessageAndMapToMessageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteMessageAndMapToMessageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullMessageAndMapToMessageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListMessageAndMapToMessageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteMessageAndMapToMessageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullMessageAndMapToMessageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Messaging / MessageAttachment
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_MessageAttachment_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.MessageAttachments;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IMessageAttachmentModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateMessageAttachmentEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateMessageAttachmentModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateMessageAttachmentModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateMessageAttachmentModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListMessageAttachmentAndMapToMessageAttachmentModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullMessageAttachmentAndMapToMessageAttachmentModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListMessageAttachmentAndMapToMessageAttachmentModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteMessageAttachmentAndMapToMessageAttachmentModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullMessageAttachmentAndMapToMessageAttachmentModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListMessageAttachmentAndMapToMessageAttachmentModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteMessageAttachmentAndMapToMessageAttachmentModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullMessageAttachmentAndMapToMessageAttachmentModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListMessageAttachmentAndMapToMessageAttachmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteMessageAttachmentAndMapToMessageAttachmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullMessageAttachmentAndMapToMessageAttachmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Messaging / MessageRecipient
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_MessageRecipient_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.MessageRecipients;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IMessageRecipientModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateMessageRecipientEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateMessageRecipientModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateMessageRecipientModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateMessageRecipientModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListMessageRecipientAndMapToMessageRecipientModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullMessageRecipientAndMapToMessageRecipientModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListMessageRecipientAndMapToMessageRecipientModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteMessageRecipientAndMapToMessageRecipientModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullMessageRecipientAndMapToMessageRecipientModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListMessageRecipientAndMapToMessageRecipientModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteMessageRecipientAndMapToMessageRecipientModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullMessageRecipientAndMapToMessageRecipientModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListMessageRecipientAndMapToMessageRecipientModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteMessageRecipientAndMapToMessageRecipientModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullMessageRecipientAndMapToMessageRecipientModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Messaging / ProductNotification
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Messaging_ProductNotification_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductNotifications;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IProductNotificationModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductNotificationEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductNotificationModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductNotificationModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductNotificationModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductNotificationAndMapToProductNotificationModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductNotificationAndMapToProductNotificationModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductNotificationAndMapToProductNotificationModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductNotificationAndMapToProductNotificationModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductNotificationAndMapToProductNotificationModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductNotificationAndMapToProductNotificationModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductNotificationAndMapToProductNotificationModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductNotificationAndMapToProductNotificationModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductNotificationAndMapToProductNotificationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductNotificationAndMapToProductNotificationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductNotificationAndMapToProductNotificationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Messaging / UserSupportRequest
        #endregion
        #region Ordering
        #region Ordering / SalesOrder
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrder_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesOrders;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesOrderModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesOrderEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesOrderModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesOrderModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesOrderModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesOrderAndMapToSalesOrderModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesOrderAndMapToSalesOrderModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesOrderAndMapToSalesOrderModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesOrderAndMapToSalesOrderModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesOrderAndMapToSalesOrderModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesOrderAndMapToSalesOrderModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesOrderAndMapToSalesOrderModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesOrderAndMapToSalesOrderModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesOrderAndMapToSalesOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesOrderAndMapToSalesOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesOrderAndMapToSalesOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Ordering / SalesOrderContact
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderContact_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesOrderContacts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesOrderContactModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesOrderContactEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesOrderContactModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesOrderContactModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesOrderContactModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesOrderContactAndMapToSalesOrderContactModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesOrderContactAndMapToSalesOrderContactModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesOrderContactAndMapToSalesOrderContactModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesOrderContactAndMapToSalesOrderContactModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesOrderContactAndMapToSalesOrderContactModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesOrderContactAndMapToSalesOrderContactModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesOrderContactAndMapToSalesOrderContactModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesOrderContactAndMapToSalesOrderContactModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesOrderContactAndMapToSalesOrderContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesOrderContactAndMapToSalesOrderContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesOrderContactAndMapToSalesOrderContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Ordering / SalesOrderEvent
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderEvent_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesOrderEvents;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesOrderEventModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesOrderEventEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesOrderEventModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesOrderEventModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesOrderEventModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesOrderEventAndMapToSalesOrderEventModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesOrderEventAndMapToSalesOrderEventModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesOrderEventAndMapToSalesOrderEventModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesOrderEventAndMapToSalesOrderEventModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesOrderEventAndMapToSalesOrderEventModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesOrderEventAndMapToSalesOrderEventModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesOrderEventAndMapToSalesOrderEventModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesOrderEventAndMapToSalesOrderEventModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesOrderEventAndMapToSalesOrderEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesOrderEventAndMapToSalesOrderEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesOrderEventAndMapToSalesOrderEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Ordering / SalesOrderEventType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderEventType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesOrderEventTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesOrderEventTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesOrderEventTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesOrderEventTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesOrderEventTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesOrderEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesOrderEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesOrderEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Ordering / SalesOrderFile
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderFile_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesOrderFiles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesOrderFileModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesOrderFileEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesOrderFileModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesOrderFileModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesOrderFileModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesOrderFileAndMapToSalesOrderFileModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesOrderFileAndMapToSalesOrderFileModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesOrderFileAndMapToSalesOrderFileModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesOrderFileAndMapToSalesOrderFileModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesOrderFileAndMapToSalesOrderFileModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesOrderFileAndMapToSalesOrderFileModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesOrderFileAndMapToSalesOrderFileModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesOrderFileAndMapToSalesOrderFileModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesOrderFileAndMapToSalesOrderFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesOrderFileAndMapToSalesOrderFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesOrderFileAndMapToSalesOrderFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Ordering / SalesOrderItem
        #region Ordering / SalesOrderItemTarget
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderItemTarget_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesOrderItemTargets;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesItemTargetBaseModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesOrderItemTargetEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesOrderItemTargetModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesOrderItemTargetModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesOrderItemTargetModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesOrderItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesOrderItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesOrderItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Ordering / SalesOrderState
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderState_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesOrderStates;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStateModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesOrderStateEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesOrderStateModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesOrderStateModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesOrderStateModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesOrderStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesOrderStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesOrderStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Ordering / SalesOrderStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesOrderStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesOrderStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesOrderStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesOrderStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesOrderStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesOrderStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesOrderStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesOrderStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Ordering / SalesOrderType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Ordering_SalesOrderType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesOrderTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesOrderTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesOrderTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesOrderTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesOrderTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesOrderTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesOrderTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesOrderTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Payments
        #region Payments / Membership
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_Membership_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Memberships;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IMembershipModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateMembershipEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateMembershipModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateMembershipModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateMembershipModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListMembershipAndMapToMembershipModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullMembershipAndMapToMembershipModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListMembershipAndMapToMembershipModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteMembershipAndMapToMembershipModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullMembershipAndMapToMembershipModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListMembershipAndMapToMembershipModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteMembershipAndMapToMembershipModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullMembershipAndMapToMembershipModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListMembershipAndMapToMembershipModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteMembershipAndMapToMembershipModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullMembershipAndMapToMembershipModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / MembershipAdZoneAccess
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_MembershipAdZoneAccess_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.MembershipAdZoneAccesses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IMembershipAdZoneAccessModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateMembershipAdZoneAccessEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateMembershipAdZoneAccessModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateMembershipAdZoneAccessModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateMembershipAdZoneAccessModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListMembershipAdZoneAccessAndMapToMembershipAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullMembershipAdZoneAccessAndMapToMembershipAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListMembershipAdZoneAccessAndMapToMembershipAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteMembershipAdZoneAccessAndMapToMembershipAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullMembershipAdZoneAccessAndMapToMembershipAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListMembershipAdZoneAccessAndMapToMembershipAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteMembershipAdZoneAccessAndMapToMembershipAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullMembershipAdZoneAccessAndMapToMembershipAdZoneAccessModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListMembershipAdZoneAccessAndMapToMembershipAdZoneAccessModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteMembershipAdZoneAccessAndMapToMembershipAdZoneAccessModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullMembershipAdZoneAccessAndMapToMembershipAdZoneAccessModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / MembershipAdZoneAccessByLevel
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_MembershipAdZoneAccessByLevel_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.MembershipAdZoneAccessByLevels;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IMembershipAdZoneAccessByLevelModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateMembershipAdZoneAccessByLevelEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateMembershipAdZoneAccessByLevelModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateMembershipAdZoneAccessByLevelModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateMembershipAdZoneAccessByLevelModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListMembershipAdZoneAccessByLevelAndMapToMembershipAdZoneAccessByLevelModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullMembershipAdZoneAccessByLevelAndMapToMembershipAdZoneAccessByLevelModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListMembershipAdZoneAccessByLevelAndMapToMembershipAdZoneAccessByLevelModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteMembershipAdZoneAccessByLevelAndMapToMembershipAdZoneAccessByLevelModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullMembershipAdZoneAccessByLevelAndMapToMembershipAdZoneAccessByLevelModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListMembershipAdZoneAccessByLevelAndMapToMembershipAdZoneAccessByLevelModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteMembershipAdZoneAccessByLevelAndMapToMembershipAdZoneAccessByLevelModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullMembershipAdZoneAccessByLevelAndMapToMembershipAdZoneAccessByLevelModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListMembershipAdZoneAccessByLevelAndMapToMembershipAdZoneAccessByLevelModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteMembershipAdZoneAccessByLevelAndMapToMembershipAdZoneAccessByLevelModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullMembershipAdZoneAccessByLevelAndMapToMembershipAdZoneAccessByLevelModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / MembershipLevel
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_MembershipLevel_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.MembershipLevels;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IMembershipLevelModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateMembershipLevelEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateMembershipLevelModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateMembershipLevelModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateMembershipLevelModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListMembershipLevelAndMapToMembershipLevelModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullMembershipLevelAndMapToMembershipLevelModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListMembershipLevelAndMapToMembershipLevelModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteMembershipLevelAndMapToMembershipLevelModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullMembershipLevelAndMapToMembershipLevelModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListMembershipLevelAndMapToMembershipLevelModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteMembershipLevelAndMapToMembershipLevelModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullMembershipLevelAndMapToMembershipLevelModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListMembershipLevelAndMapToMembershipLevelModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteMembershipLevelAndMapToMembershipLevelModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullMembershipLevelAndMapToMembershipLevelModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / MembershipRepeatType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_MembershipRepeatType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.MembershipRepeatTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IMembershipRepeatTypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateMembershipRepeatTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateMembershipRepeatTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateMembershipRepeatTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateMembershipRepeatTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListMembershipRepeatTypeAndMapToMembershipRepeatTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullMembershipRepeatTypeAndMapToMembershipRepeatTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListMembershipRepeatTypeAndMapToMembershipRepeatTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteMembershipRepeatTypeAndMapToMembershipRepeatTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullMembershipRepeatTypeAndMapToMembershipRepeatTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListMembershipRepeatTypeAndMapToMembershipRepeatTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteMembershipRepeatTypeAndMapToMembershipRepeatTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullMembershipRepeatTypeAndMapToMembershipRepeatTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListMembershipRepeatTypeAndMapToMembershipRepeatTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteMembershipRepeatTypeAndMapToMembershipRepeatTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullMembershipRepeatTypeAndMapToMembershipRepeatTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / Payment
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_Payment_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Payments;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPaymentModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePaymentEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePaymentModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePaymentModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePaymentModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPaymentAndMapToPaymentModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPaymentAndMapToPaymentModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPaymentAndMapToPaymentModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePaymentAndMapToPaymentModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPaymentAndMapToPaymentModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPaymentAndMapToPaymentModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePaymentAndMapToPaymentModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPaymentAndMapToPaymentModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPaymentAndMapToPaymentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePaymentAndMapToPaymentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPaymentAndMapToPaymentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / PaymentMethod
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_PaymentMethod_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PaymentMethods;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPaymentMethodModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePaymentMethodEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePaymentMethodModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePaymentMethodModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePaymentMethodModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPaymentMethodAndMapToPaymentMethodModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPaymentMethodAndMapToPaymentMethodModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPaymentMethodAndMapToPaymentMethodModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePaymentMethodAndMapToPaymentMethodModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPaymentMethodAndMapToPaymentMethodModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPaymentMethodAndMapToPaymentMethodModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePaymentMethodAndMapToPaymentMethodModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPaymentMethodAndMapToPaymentMethodModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPaymentMethodAndMapToPaymentMethodModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePaymentMethodAndMapToPaymentMethodModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPaymentMethodAndMapToPaymentMethodModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / PaymentStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_PaymentStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PaymentStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePaymentStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePaymentStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePaymentStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePaymentStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPaymentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPaymentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPaymentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePaymentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPaymentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPaymentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePaymentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPaymentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPaymentStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePaymentStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPaymentStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / PaymentType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_PaymentType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PaymentTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePaymentTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePaymentTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePaymentTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePaymentTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPaymentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPaymentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPaymentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePaymentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPaymentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPaymentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePaymentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPaymentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPaymentTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePaymentTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPaymentTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / RepeatType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_RepeatType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.RepeatTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IRepeatTypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateRepeatTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateRepeatTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateRepeatTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateRepeatTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListRepeatTypeAndMapToRepeatTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullRepeatTypeAndMapToRepeatTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListRepeatTypeAndMapToRepeatTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteRepeatTypeAndMapToRepeatTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullRepeatTypeAndMapToRepeatTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListRepeatTypeAndMapToRepeatTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteRepeatTypeAndMapToRepeatTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullRepeatTypeAndMapToRepeatTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListRepeatTypeAndMapToRepeatTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteRepeatTypeAndMapToRepeatTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullRepeatTypeAndMapToRepeatTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / SalesInvoicePayment
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_SalesInvoicePayment_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesInvoicePayments;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesInvoicePaymentModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesInvoicePaymentEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesInvoicePaymentModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesInvoicePaymentModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesInvoicePaymentModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesInvoicePaymentAndMapToSalesInvoicePaymentModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesInvoicePaymentAndMapToSalesInvoicePaymentModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesInvoicePaymentAndMapToSalesInvoicePaymentModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesInvoicePaymentAndMapToSalesInvoicePaymentModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesInvoicePaymentAndMapToSalesInvoicePaymentModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesInvoicePaymentAndMapToSalesInvoicePaymentModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesInvoicePaymentAndMapToSalesInvoicePaymentModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesInvoicePaymentAndMapToSalesInvoicePaymentModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesInvoicePaymentAndMapToSalesInvoicePaymentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesInvoicePaymentAndMapToSalesInvoicePaymentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesInvoicePaymentAndMapToSalesInvoicePaymentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / SalesOrderPayment
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_SalesOrderPayment_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesOrderPayments;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesOrderPaymentModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesOrderPaymentEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesOrderPaymentModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesOrderPaymentModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesOrderPaymentModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesOrderPaymentAndMapToSalesOrderPaymentModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesOrderPaymentAndMapToSalesOrderPaymentModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesOrderPaymentAndMapToSalesOrderPaymentModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesOrderPaymentAndMapToSalesOrderPaymentModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesOrderPaymentAndMapToSalesOrderPaymentModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesOrderPaymentAndMapToSalesOrderPaymentModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesOrderPaymentAndMapToSalesOrderPaymentModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesOrderPaymentAndMapToSalesOrderPaymentModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesOrderPaymentAndMapToSalesOrderPaymentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesOrderPaymentAndMapToSalesOrderPaymentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesOrderPaymentAndMapToSalesOrderPaymentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / SalesReturnPayment
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_SalesReturnPayment_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesReturnPayments;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesReturnPaymentModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesReturnPaymentEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesReturnPaymentModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesReturnPaymentModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesReturnPaymentModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesReturnPaymentAndMapToSalesReturnPaymentModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesReturnPaymentAndMapToSalesReturnPaymentModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesReturnPaymentAndMapToSalesReturnPaymentModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesReturnPaymentAndMapToSalesReturnPaymentModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesReturnPaymentAndMapToSalesReturnPaymentModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesReturnPaymentAndMapToSalesReturnPaymentModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesReturnPaymentAndMapToSalesReturnPaymentModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesReturnPaymentAndMapToSalesReturnPaymentModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesReturnPaymentAndMapToSalesReturnPaymentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesReturnPaymentAndMapToSalesReturnPaymentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesReturnPaymentAndMapToSalesReturnPaymentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / Subscription
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_Subscription_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Subscriptions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISubscriptionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSubscriptionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSubscriptionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSubscriptionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSubscriptionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSubscriptionAndMapToSubscriptionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSubscriptionAndMapToSubscriptionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSubscriptionAndMapToSubscriptionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSubscriptionAndMapToSubscriptionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSubscriptionAndMapToSubscriptionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSubscriptionAndMapToSubscriptionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSubscriptionAndMapToSubscriptionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSubscriptionAndMapToSubscriptionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSubscriptionAndMapToSubscriptionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSubscriptionAndMapToSubscriptionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSubscriptionAndMapToSubscriptionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / SubscriptionHistory
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_SubscriptionHistory_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SubscriptionHistories;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISubscriptionHistoryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSubscriptionHistoryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSubscriptionHistoryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSubscriptionHistoryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSubscriptionHistoryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSubscriptionHistoryAndMapToSubscriptionHistoryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSubscriptionHistoryAndMapToSubscriptionHistoryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSubscriptionHistoryAndMapToSubscriptionHistoryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSubscriptionHistoryAndMapToSubscriptionHistoryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSubscriptionHistoryAndMapToSubscriptionHistoryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSubscriptionHistoryAndMapToSubscriptionHistoryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSubscriptionHistoryAndMapToSubscriptionHistoryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSubscriptionHistoryAndMapToSubscriptionHistoryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSubscriptionHistoryAndMapToSubscriptionHistoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSubscriptionHistoryAndMapToSubscriptionHistoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSubscriptionHistoryAndMapToSubscriptionHistoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / SubscriptionStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_SubscriptionStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SubscriptionStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSubscriptionStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSubscriptionStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSubscriptionStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSubscriptionStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSubscriptionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSubscriptionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSubscriptionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSubscriptionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSubscriptionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSubscriptionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSubscriptionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSubscriptionStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSubscriptionStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSubscriptionStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSubscriptionStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / SubscriptionType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_SubscriptionType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SubscriptionTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISubscriptionTypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSubscriptionTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSubscriptionTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSubscriptionTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSubscriptionTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSubscriptionTypeAndMapToSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSubscriptionTypeAndMapToSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSubscriptionTypeAndMapToSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSubscriptionTypeAndMapToSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSubscriptionTypeAndMapToSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSubscriptionTypeAndMapToSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSubscriptionTypeAndMapToSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSubscriptionTypeAndMapToSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSubscriptionTypeAndMapToSubscriptionTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSubscriptionTypeAndMapToSubscriptionTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSubscriptionTypeAndMapToSubscriptionTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / SubscriptionTypeRepeatType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_SubscriptionTypeRepeatType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SubscriptionTypeRepeatTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISubscriptionTypeRepeatTypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSubscriptionTypeRepeatTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSubscriptionTypeRepeatTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSubscriptionTypeRepeatTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSubscriptionTypeRepeatTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSubscriptionTypeRepeatTypeAndMapToSubscriptionTypeRepeatTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSubscriptionTypeRepeatTypeAndMapToSubscriptionTypeRepeatTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSubscriptionTypeRepeatTypeAndMapToSubscriptionTypeRepeatTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSubscriptionTypeRepeatTypeAndMapToSubscriptionTypeRepeatTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSubscriptionTypeRepeatTypeAndMapToSubscriptionTypeRepeatTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSubscriptionTypeRepeatTypeAndMapToSubscriptionTypeRepeatTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSubscriptionTypeRepeatTypeAndMapToSubscriptionTypeRepeatTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSubscriptionTypeRepeatTypeAndMapToSubscriptionTypeRepeatTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSubscriptionTypeRepeatTypeAndMapToSubscriptionTypeRepeatTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSubscriptionTypeRepeatTypeAndMapToSubscriptionTypeRepeatTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSubscriptionTypeRepeatTypeAndMapToSubscriptionTypeRepeatTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Payments / Wallet
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Payments_Wallet_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Wallets;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IWalletModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateWalletEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateWalletModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateWalletModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateWalletModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListWalletAndMapToWalletModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullWalletAndMapToWalletModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListWalletAndMapToWalletModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteWalletAndMapToWalletModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullWalletAndMapToWalletModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListWalletAndMapToWalletModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteWalletAndMapToWalletModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullWalletAndMapToWalletModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListWalletAndMapToWalletModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteWalletAndMapToWalletModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullWalletAndMapToWalletModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Pricing
        #region Pricing / PricePoint
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PricePoint_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PricePoints;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPricePointModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePricePointEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePricePointModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePricePointModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePricePointModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPricePointAndMapToPricePointModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPricePointAndMapToPricePointModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPricePointAndMapToPricePointModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePricePointAndMapToPricePointModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPricePointAndMapToPricePointModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPricePointAndMapToPricePointModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePricePointAndMapToPricePointModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPricePointAndMapToPricePointModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPricePointAndMapToPricePointModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePricePointAndMapToPricePointModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPricePointAndMapToPricePointModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Pricing / PriceRounding
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRounding_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PriceRoundings;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPriceRoundingModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePriceRoundingEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePriceRoundingModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePriceRoundingModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePriceRoundingModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPriceRoundingAndMapToPriceRoundingModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPriceRoundingAndMapToPriceRoundingModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPriceRoundingAndMapToPriceRoundingModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePriceRoundingAndMapToPriceRoundingModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPriceRoundingAndMapToPriceRoundingModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPriceRoundingAndMapToPriceRoundingModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePriceRoundingAndMapToPriceRoundingModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPriceRoundingAndMapToPriceRoundingModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPriceRoundingAndMapToPriceRoundingModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePriceRoundingAndMapToPriceRoundingModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPriceRoundingAndMapToPriceRoundingModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Pricing / PriceRule
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRule_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PriceRules;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPriceRuleModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePriceRuleEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePriceRuleModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePriceRuleModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePriceRuleModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPriceRuleAndMapToPriceRuleModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPriceRuleAndMapToPriceRuleModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPriceRuleAndMapToPriceRuleModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePriceRuleAndMapToPriceRuleModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPriceRuleAndMapToPriceRuleModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPriceRuleAndMapToPriceRuleModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePriceRuleAndMapToPriceRuleModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPriceRuleAndMapToPriceRuleModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPriceRuleAndMapToPriceRuleModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePriceRuleAndMapToPriceRuleModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPriceRuleAndMapToPriceRuleModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Pricing / PriceRuleAccount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleAccount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PriceRuleAccounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPriceRuleAccountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePriceRuleAccountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePriceRuleAccountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePriceRuleAccountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePriceRuleAccountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPriceRuleAccountAndMapToPriceRuleAccountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPriceRuleAccountAndMapToPriceRuleAccountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPriceRuleAccountAndMapToPriceRuleAccountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePriceRuleAccountAndMapToPriceRuleAccountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPriceRuleAccountAndMapToPriceRuleAccountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPriceRuleAccountAndMapToPriceRuleAccountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePriceRuleAccountAndMapToPriceRuleAccountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPriceRuleAccountAndMapToPriceRuleAccountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPriceRuleAccountAndMapToPriceRuleAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePriceRuleAccountAndMapToPriceRuleAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPriceRuleAccountAndMapToPriceRuleAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Pricing / PriceRuleAccountType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleAccountType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PriceRuleAccountTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPriceRuleAccountTypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePriceRuleAccountTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePriceRuleAccountTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePriceRuleAccountTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePriceRuleAccountTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPriceRuleAccountTypeAndMapToPriceRuleAccountTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPriceRuleAccountTypeAndMapToPriceRuleAccountTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPriceRuleAccountTypeAndMapToPriceRuleAccountTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePriceRuleAccountTypeAndMapToPriceRuleAccountTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPriceRuleAccountTypeAndMapToPriceRuleAccountTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPriceRuleAccountTypeAndMapToPriceRuleAccountTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePriceRuleAccountTypeAndMapToPriceRuleAccountTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPriceRuleAccountTypeAndMapToPriceRuleAccountTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPriceRuleAccountTypeAndMapToPriceRuleAccountTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePriceRuleAccountTypeAndMapToPriceRuleAccountTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPriceRuleAccountTypeAndMapToPriceRuleAccountTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Pricing / PriceRuleBrand
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleBrand_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PriceRuleBrands;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPriceRuleBrandModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePriceRuleBrandEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePriceRuleBrandModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePriceRuleBrandModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePriceRuleBrandModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPriceRuleBrandAndMapToPriceRuleBrandModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPriceRuleBrandAndMapToPriceRuleBrandModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPriceRuleBrandAndMapToPriceRuleBrandModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePriceRuleBrandAndMapToPriceRuleBrandModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPriceRuleBrandAndMapToPriceRuleBrandModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPriceRuleBrandAndMapToPriceRuleBrandModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePriceRuleBrandAndMapToPriceRuleBrandModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPriceRuleBrandAndMapToPriceRuleBrandModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPriceRuleBrandAndMapToPriceRuleBrandModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePriceRuleBrandAndMapToPriceRuleBrandModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPriceRuleBrandAndMapToPriceRuleBrandModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Pricing / PriceRuleCategory
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleCategory_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PriceRuleCategories;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPriceRuleCategoryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePriceRuleCategoryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePriceRuleCategoryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePriceRuleCategoryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePriceRuleCategoryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPriceRuleCategoryAndMapToPriceRuleCategoryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPriceRuleCategoryAndMapToPriceRuleCategoryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPriceRuleCategoryAndMapToPriceRuleCategoryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePriceRuleCategoryAndMapToPriceRuleCategoryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPriceRuleCategoryAndMapToPriceRuleCategoryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPriceRuleCategoryAndMapToPriceRuleCategoryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePriceRuleCategoryAndMapToPriceRuleCategoryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPriceRuleCategoryAndMapToPriceRuleCategoryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPriceRuleCategoryAndMapToPriceRuleCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePriceRuleCategoryAndMapToPriceRuleCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPriceRuleCategoryAndMapToPriceRuleCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Pricing / PriceRuleCountry
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleCountry_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PriceRuleCountries;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPriceRuleCountryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePriceRuleCountryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePriceRuleCountryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePriceRuleCountryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePriceRuleCountryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPriceRuleCountryAndMapToPriceRuleCountryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPriceRuleCountryAndMapToPriceRuleCountryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPriceRuleCountryAndMapToPriceRuleCountryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePriceRuleCountryAndMapToPriceRuleCountryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPriceRuleCountryAndMapToPriceRuleCountryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPriceRuleCountryAndMapToPriceRuleCountryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePriceRuleCountryAndMapToPriceRuleCountryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPriceRuleCountryAndMapToPriceRuleCountryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPriceRuleCountryAndMapToPriceRuleCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePriceRuleCountryAndMapToPriceRuleCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPriceRuleCountryAndMapToPriceRuleCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Pricing / PriceRuleFranchise
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleFranchise_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PriceRuleFranchises;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPriceRuleFranchiseModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePriceRuleFranchiseEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePriceRuleFranchiseModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePriceRuleFranchiseModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePriceRuleFranchiseModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPriceRuleFranchiseAndMapToPriceRuleFranchiseModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPriceRuleFranchiseAndMapToPriceRuleFranchiseModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPriceRuleFranchiseAndMapToPriceRuleFranchiseModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePriceRuleFranchiseAndMapToPriceRuleFranchiseModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPriceRuleFranchiseAndMapToPriceRuleFranchiseModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPriceRuleFranchiseAndMapToPriceRuleFranchiseModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePriceRuleFranchiseAndMapToPriceRuleFranchiseModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPriceRuleFranchiseAndMapToPriceRuleFranchiseModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPriceRuleFranchiseAndMapToPriceRuleFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePriceRuleFranchiseAndMapToPriceRuleFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPriceRuleFranchiseAndMapToPriceRuleFranchiseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Pricing / PriceRuleManufacturer
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleManufacturer_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PriceRuleManufacturers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPriceRuleManufacturerModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePriceRuleManufacturerEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePriceRuleManufacturerModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePriceRuleManufacturerModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePriceRuleManufacturerModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPriceRuleManufacturerAndMapToPriceRuleManufacturerModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPriceRuleManufacturerAndMapToPriceRuleManufacturerModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPriceRuleManufacturerAndMapToPriceRuleManufacturerModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePriceRuleManufacturerAndMapToPriceRuleManufacturerModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPriceRuleManufacturerAndMapToPriceRuleManufacturerModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPriceRuleManufacturerAndMapToPriceRuleManufacturerModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePriceRuleManufacturerAndMapToPriceRuleManufacturerModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPriceRuleManufacturerAndMapToPriceRuleManufacturerModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPriceRuleManufacturerAndMapToPriceRuleManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePriceRuleManufacturerAndMapToPriceRuleManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPriceRuleManufacturerAndMapToPriceRuleManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Pricing / PriceRuleProduct
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleProduct_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PriceRuleProducts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPriceRuleProductModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePriceRuleProductEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePriceRuleProductModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePriceRuleProductModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePriceRuleProductModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPriceRuleProductAndMapToPriceRuleProductModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPriceRuleProductAndMapToPriceRuleProductModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPriceRuleProductAndMapToPriceRuleProductModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePriceRuleProductAndMapToPriceRuleProductModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPriceRuleProductAndMapToPriceRuleProductModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPriceRuleProductAndMapToPriceRuleProductModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePriceRuleProductAndMapToPriceRuleProductModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPriceRuleProductAndMapToPriceRuleProductModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPriceRuleProductAndMapToPriceRuleProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePriceRuleProductAndMapToPriceRuleProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPriceRuleProductAndMapToPriceRuleProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Pricing / PriceRuleProductType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleProductType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PriceRuleProductTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPriceRuleProductTypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePriceRuleProductTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePriceRuleProductTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePriceRuleProductTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePriceRuleProductTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPriceRuleProductTypeAndMapToPriceRuleProductTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPriceRuleProductTypeAndMapToPriceRuleProductTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPriceRuleProductTypeAndMapToPriceRuleProductTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePriceRuleProductTypeAndMapToPriceRuleProductTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPriceRuleProductTypeAndMapToPriceRuleProductTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPriceRuleProductTypeAndMapToPriceRuleProductTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePriceRuleProductTypeAndMapToPriceRuleProductTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPriceRuleProductTypeAndMapToPriceRuleProductTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPriceRuleProductTypeAndMapToPriceRuleProductTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePriceRuleProductTypeAndMapToPriceRuleProductTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPriceRuleProductTypeAndMapToPriceRuleProductTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Pricing / PriceRuleStore
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleStore_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PriceRuleStores;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPriceRuleStoreModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePriceRuleStoreEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePriceRuleStoreModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePriceRuleStoreModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePriceRuleStoreModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPriceRuleStoreAndMapToPriceRuleStoreModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPriceRuleStoreAndMapToPriceRuleStoreModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPriceRuleStoreAndMapToPriceRuleStoreModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePriceRuleStoreAndMapToPriceRuleStoreModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPriceRuleStoreAndMapToPriceRuleStoreModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPriceRuleStoreAndMapToPriceRuleStoreModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePriceRuleStoreAndMapToPriceRuleStoreModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPriceRuleStoreAndMapToPriceRuleStoreModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPriceRuleStoreAndMapToPriceRuleStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePriceRuleStoreAndMapToPriceRuleStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPriceRuleStoreAndMapToPriceRuleStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Pricing / PriceRuleUserRole
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleUserRole_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PriceRuleUserRoles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPriceRuleUserRoleModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePriceRuleUserRoleEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePriceRuleUserRoleModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePriceRuleUserRoleModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePriceRuleUserRoleModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePriceRuleUserRoleAndMapToPriceRuleUserRoleModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePriceRuleUserRoleAndMapToPriceRuleUserRoleModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePriceRuleUserRoleAndMapToPriceRuleUserRoleModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPriceRuleUserRoleAndMapToPriceRuleUserRoleModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Pricing / PriceRuleVendor
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Pricing_PriceRuleVendor_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PriceRuleVendors;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPriceRuleVendorModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePriceRuleVendorEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePriceRuleVendorModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePriceRuleVendorModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePriceRuleVendorModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPriceRuleVendorAndMapToPriceRuleVendorModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPriceRuleVendorAndMapToPriceRuleVendorModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPriceRuleVendorAndMapToPriceRuleVendorModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePriceRuleVendorAndMapToPriceRuleVendorModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPriceRuleVendorAndMapToPriceRuleVendorModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPriceRuleVendorAndMapToPriceRuleVendorModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePriceRuleVendorAndMapToPriceRuleVendorModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPriceRuleVendorAndMapToPriceRuleVendorModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPriceRuleVendorAndMapToPriceRuleVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePriceRuleVendorAndMapToPriceRuleVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPriceRuleVendorAndMapToPriceRuleVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Products
        #region Products / FutureImport
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_FutureImport_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FutureImports;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IFutureImportModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFutureImportEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFutureImportModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFutureImportModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFutureImportModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFutureImportAndMapToFutureImportModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFutureImportAndMapToFutureImportModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFutureImportAndMapToFutureImportModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFutureImportAndMapToFutureImportModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFutureImportAndMapToFutureImportModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFutureImportAndMapToFutureImportModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFutureImportAndMapToFutureImportModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFutureImportAndMapToFutureImportModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFutureImportAndMapToFutureImportModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFutureImportAndMapToFutureImportModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFutureImportAndMapToFutureImportModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / FutureImportStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_FutureImportStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.FutureImportStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateFutureImportStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateFutureImportStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateFutureImportStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateFutureImportStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListFutureImportStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullFutureImportStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListFutureImportStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteFutureImportStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullFutureImportStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListFutureImportStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteFutureImportStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullFutureImportStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListFutureImportStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteFutureImportStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullFutureImportStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / Product
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_Product_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Products;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IProductModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductAndMapToProductModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductAndMapToProductModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductAndMapToProductModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductAndMapToProductModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductAndMapToProductModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductAndMapToProductModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductAndMapToProductModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductAndMapToProductModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductAndMapToProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductAndMapToProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductAndMapToProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductAssociation
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductAssociation_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductAssociations;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IProductAssociationModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductAssociationEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductAssociationModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductAssociationModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductAssociationModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductAssociationAndMapToProductAssociationModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductAssociationAndMapToProductAssociationModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductAssociationAndMapToProductAssociationModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductAssociationAndMapToProductAssociationModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductAssociationAndMapToProductAssociationModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductAssociationAndMapToProductAssociationModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductAssociationAndMapToProductAssociationModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductAssociationAndMapToProductAssociationModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductAssociationAndMapToProductAssociationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductAssociationAndMapToProductAssociationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductAssociationAndMapToProductAssociationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductAssociationType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductAssociationType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductAssociationTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductAssociationTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductAssociationTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductAssociationTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductAssociationTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductAssociationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductAssociationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductAssociationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductAssociationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductCategory
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductCategory_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductCategories;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IProductCategoryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductCategoryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductCategoryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductCategoryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductCategoryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductCategoryAndMapToProductCategoryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductCategoryAndMapToProductCategoryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductCategoryAndMapToProductCategoryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductCategoryAndMapToProductCategoryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductCategoryAndMapToProductCategoryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductCategoryAndMapToProductCategoryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductCategoryAndMapToProductCategoryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductCategoryAndMapToProductCategoryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductCategoryAndMapToProductCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductCategoryAndMapToProductCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductCategoryAndMapToProductCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductDownload
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductDownload_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductDownloads;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IProductDownloadModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductDownloadEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductDownloadModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductDownloadModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductDownloadModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductDownloadAndMapToProductDownloadModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductDownloadAndMapToProductDownloadModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductDownloadAndMapToProductDownloadModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductDownloadAndMapToProductDownloadModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductDownloadAndMapToProductDownloadModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductDownloadAndMapToProductDownloadModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductDownloadAndMapToProductDownloadModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductDownloadAndMapToProductDownloadModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductDownloadAndMapToProductDownloadModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductDownloadAndMapToProductDownloadModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductDownloadAndMapToProductDownloadModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductDownloadType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductDownloadType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductDownloadTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductDownloadTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductDownloadTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductDownloadTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductDownloadTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductDownloadTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductDownloadTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductDownloadTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductDownloadTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductDownloadTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductDownloadTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductDownloadTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductDownloadTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductDownloadTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductDownloadTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductDownloadTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductFile
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductFile_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductFiles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IProductFileModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductFileEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductFileModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductFileModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductFileModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductFileAndMapToProductFileModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductFileAndMapToProductFileModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductFileAndMapToProductFileModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductFileAndMapToProductFileModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductFileAndMapToProductFileModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductFileAndMapToProductFileModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductFileAndMapToProductFileModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductFileAndMapToProductFileModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductFileAndMapToProductFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductFileAndMapToProductFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductFileAndMapToProductFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IProductImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductImageAndMapToProductImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductImageAndMapToProductImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductImageAndMapToProductImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductImageAndMapToProductImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductImageAndMapToProductImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductImageAndMapToProductImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductImageAndMapToProductImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductImageAndMapToProductImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductImageAndMapToProductImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductImageAndMapToProductImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductImageAndMapToProductImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductInventoryLocationSection
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductInventoryLocationSection_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductInventoryLocationSections;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IProductInventoryLocationSectionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductInventoryLocationSectionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductInventoryLocationSectionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductInventoryLocationSectionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductInventoryLocationSectionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductInventoryLocationSectionAndMapToProductInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductInventoryLocationSectionAndMapToProductInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductInventoryLocationSectionAndMapToProductInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductInventoryLocationSectionAndMapToProductInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductInventoryLocationSectionAndMapToProductInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductInventoryLocationSectionAndMapToProductInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductInventoryLocationSectionAndMapToProductInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductInventoryLocationSectionAndMapToProductInventoryLocationSectionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductInventoryLocationSectionAndMapToProductInventoryLocationSectionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductInventoryLocationSectionAndMapToProductInventoryLocationSectionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductInventoryLocationSectionAndMapToProductInventoryLocationSectionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductMembershipLevel
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductMembershipLevel_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductMembershipLevels;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IProductMembershipLevelModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductMembershipLevelEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductMembershipLevelModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductMembershipLevelModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductMembershipLevelModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductMembershipLevelAndMapToProductMembershipLevelModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductMembershipLevelAndMapToProductMembershipLevelModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductMembershipLevelAndMapToProductMembershipLevelModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductMembershipLevelAndMapToProductMembershipLevelModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductMembershipLevelAndMapToProductMembershipLevelModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductMembershipLevelAndMapToProductMembershipLevelModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductMembershipLevelAndMapToProductMembershipLevelModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductMembershipLevelAndMapToProductMembershipLevelModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductMembershipLevelAndMapToProductMembershipLevelModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductMembershipLevelAndMapToProductMembershipLevelModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductMembershipLevelAndMapToProductMembershipLevelModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductPricePoint
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductPricePoint_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductPricePoints;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IProductPricePointModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductPricePointEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductPricePointModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductPricePointModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductPricePointModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductPricePointAndMapToProductPricePointModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductPricePointAndMapToProductPricePointModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductPricePointAndMapToProductPricePointModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductPricePointAndMapToProductPricePointModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductPricePointAndMapToProductPricePointModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductPricePointAndMapToProductPricePointModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductPricePointAndMapToProductPricePointModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductPricePointAndMapToProductPricePointModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductPricePointAndMapToProductPricePointModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductPricePointAndMapToProductPricePointModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductPricePointAndMapToProductPricePointModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductRestriction
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductRestriction_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductRestrictions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IProductRestrictionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductRestrictionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductRestrictionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductRestrictionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductRestrictionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductRestrictionAndMapToProductRestrictionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductRestrictionAndMapToProductRestrictionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductRestrictionAndMapToProductRestrictionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductRestrictionAndMapToProductRestrictionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductRestrictionAndMapToProductRestrictionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductRestrictionAndMapToProductRestrictionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductRestrictionAndMapToProductRestrictionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductRestrictionAndMapToProductRestrictionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductRestrictionAndMapToProductRestrictionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductRestrictionAndMapToProductRestrictionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductRestrictionAndMapToProductRestrictionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductShipCarrierMethod
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductShipCarrierMethod_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductShipCarrierMethods;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IProductShipCarrierMethodModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductShipCarrierMethodEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductShipCarrierMethodModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductShipCarrierMethodModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductShipCarrierMethodModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductShipCarrierMethodAndMapToProductShipCarrierMethodModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductSubscriptionType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductSubscriptionType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductSubscriptionTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IProductSubscriptionTypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductSubscriptionTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductSubscriptionTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductSubscriptionTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductSubscriptionTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductSubscriptionTypeAndMapToProductSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductSubscriptionTypeAndMapToProductSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductSubscriptionTypeAndMapToProductSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductSubscriptionTypeAndMapToProductSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductSubscriptionTypeAndMapToProductSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductSubscriptionTypeAndMapToProductSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductSubscriptionTypeAndMapToProductSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductSubscriptionTypeAndMapToProductSubscriptionTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductSubscriptionTypeAndMapToProductSubscriptionTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductSubscriptionTypeAndMapToProductSubscriptionTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductSubscriptionTypeAndMapToProductSubscriptionTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Products / ProductType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Products_ProductType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ProductTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateProductTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateProductTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateProductTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateProductTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullProductTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListProductTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteProductTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullProductTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Purchasing
        #region Purchasing / PurchaseOrder
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrder_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PurchaseOrders;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPurchaseOrderModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePurchaseOrderEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePurchaseOrderModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePurchaseOrderModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePurchaseOrderModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPurchaseOrderAndMapToPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPurchaseOrderAndMapToPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPurchaseOrderAndMapToPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePurchaseOrderAndMapToPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPurchaseOrderAndMapToPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPurchaseOrderAndMapToPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePurchaseOrderAndMapToPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPurchaseOrderAndMapToPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPurchaseOrderAndMapToPurchaseOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePurchaseOrderAndMapToPurchaseOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPurchaseOrderAndMapToPurchaseOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Purchasing / PurchaseOrderContact
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderContact_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PurchaseOrderContacts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPurchaseOrderContactModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePurchaseOrderContactEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePurchaseOrderContactModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePurchaseOrderContactModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePurchaseOrderContactModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPurchaseOrderContactAndMapToPurchaseOrderContactModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPurchaseOrderContactAndMapToPurchaseOrderContactModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPurchaseOrderContactAndMapToPurchaseOrderContactModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePurchaseOrderContactAndMapToPurchaseOrderContactModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPurchaseOrderContactAndMapToPurchaseOrderContactModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPurchaseOrderContactAndMapToPurchaseOrderContactModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePurchaseOrderContactAndMapToPurchaseOrderContactModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPurchaseOrderContactAndMapToPurchaseOrderContactModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPurchaseOrderContactAndMapToPurchaseOrderContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePurchaseOrderContactAndMapToPurchaseOrderContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPurchaseOrderContactAndMapToPurchaseOrderContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Purchasing / PurchaseOrderEvent
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderEvent_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PurchaseOrderEvents;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPurchaseOrderEventModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePurchaseOrderEventEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePurchaseOrderEventModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePurchaseOrderEventModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePurchaseOrderEventModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPurchaseOrderEventAndMapToPurchaseOrderEventModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPurchaseOrderEventAndMapToPurchaseOrderEventModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPurchaseOrderEventAndMapToPurchaseOrderEventModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePurchaseOrderEventAndMapToPurchaseOrderEventModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPurchaseOrderEventAndMapToPurchaseOrderEventModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPurchaseOrderEventAndMapToPurchaseOrderEventModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePurchaseOrderEventAndMapToPurchaseOrderEventModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPurchaseOrderEventAndMapToPurchaseOrderEventModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPurchaseOrderEventAndMapToPurchaseOrderEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePurchaseOrderEventAndMapToPurchaseOrderEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPurchaseOrderEventAndMapToPurchaseOrderEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Purchasing / PurchaseOrderEventType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderEventType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PurchaseOrderEventTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePurchaseOrderEventTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePurchaseOrderEventTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePurchaseOrderEventTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePurchaseOrderEventTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPurchaseOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPurchaseOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPurchaseOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePurchaseOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPurchaseOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPurchaseOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePurchaseOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPurchaseOrderEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPurchaseOrderEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePurchaseOrderEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPurchaseOrderEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Purchasing / PurchaseOrderFile
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderFile_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PurchaseOrderFiles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPurchaseOrderFileModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePurchaseOrderFileEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePurchaseOrderFileModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePurchaseOrderFileModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePurchaseOrderFileModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPurchaseOrderFileAndMapToPurchaseOrderFileModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPurchaseOrderFileAndMapToPurchaseOrderFileModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPurchaseOrderFileAndMapToPurchaseOrderFileModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePurchaseOrderFileAndMapToPurchaseOrderFileModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPurchaseOrderFileAndMapToPurchaseOrderFileModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPurchaseOrderFileAndMapToPurchaseOrderFileModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePurchaseOrderFileAndMapToPurchaseOrderFileModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPurchaseOrderFileAndMapToPurchaseOrderFileModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPurchaseOrderFileAndMapToPurchaseOrderFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePurchaseOrderFileAndMapToPurchaseOrderFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPurchaseOrderFileAndMapToPurchaseOrderFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Purchasing / PurchaseOrderItem
        #region Purchasing / PurchaseOrderItemTarget
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderItemTarget_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PurchaseOrderItemTargets;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesItemTargetBaseModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePurchaseOrderItemTargetEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePurchaseOrderItemTargetModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePurchaseOrderItemTargetModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePurchaseOrderItemTargetModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPurchaseOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPurchaseOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPurchaseOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePurchaseOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPurchaseOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPurchaseOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePurchaseOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPurchaseOrderItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPurchaseOrderItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePurchaseOrderItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPurchaseOrderItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Purchasing / PurchaseOrderState
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderState_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PurchaseOrderStates;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStateModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePurchaseOrderStateEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePurchaseOrderStateModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePurchaseOrderStateModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePurchaseOrderStateModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPurchaseOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPurchaseOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPurchaseOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePurchaseOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPurchaseOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPurchaseOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePurchaseOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPurchaseOrderStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPurchaseOrderStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePurchaseOrderStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPurchaseOrderStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Purchasing / PurchaseOrderStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PurchaseOrderStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePurchaseOrderStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePurchaseOrderStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePurchaseOrderStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePurchaseOrderStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPurchaseOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPurchaseOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPurchaseOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePurchaseOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPurchaseOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPurchaseOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePurchaseOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPurchaseOrderStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPurchaseOrderStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePurchaseOrderStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPurchaseOrderStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Purchasing / PurchaseOrderType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_PurchaseOrderType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PurchaseOrderTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePurchaseOrderTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePurchaseOrderTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePurchaseOrderTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePurchaseOrderTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPurchaseOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPurchaseOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPurchaseOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePurchaseOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPurchaseOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPurchaseOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePurchaseOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPurchaseOrderTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPurchaseOrderTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePurchaseOrderTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPurchaseOrderTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Purchasing / SalesOrderPurchaseOrder
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Purchasing_SalesOrderPurchaseOrder_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesOrderPurchaseOrders;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesOrderPurchaseOrderModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesOrderPurchaseOrderEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesOrderPurchaseOrderModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesOrderPurchaseOrderModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesOrderPurchaseOrderModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesOrderPurchaseOrderAndMapToSalesOrderPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesOrderPurchaseOrderAndMapToSalesOrderPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesOrderPurchaseOrderAndMapToSalesOrderPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesOrderPurchaseOrderAndMapToSalesOrderPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesOrderPurchaseOrderAndMapToSalesOrderPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesOrderPurchaseOrderAndMapToSalesOrderPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesOrderPurchaseOrderAndMapToSalesOrderPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesOrderPurchaseOrderAndMapToSalesOrderPurchaseOrderModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesOrderPurchaseOrderAndMapToSalesOrderPurchaseOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesOrderPurchaseOrderAndMapToSalesOrderPurchaseOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesOrderPurchaseOrderAndMapToSalesOrderPurchaseOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Questionnaire
        #region Questionnaire / Answer
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Questionnaire_Answer_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Answers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAnswerModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAnswerEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAnswerModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAnswerModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAnswerModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAnswerAndMapToAnswerModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAnswerAndMapToAnswerModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAnswerAndMapToAnswerModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAnswerAndMapToAnswerModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAnswerAndMapToAnswerModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAnswerAndMapToAnswerModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAnswerAndMapToAnswerModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAnswerAndMapToAnswerModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAnswerAndMapToAnswerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAnswerAndMapToAnswerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAnswerAndMapToAnswerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Questionnaire / Question
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Questionnaire_Question_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Questions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IQuestionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateQuestionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateQuestionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateQuestionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateQuestionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListQuestionAndMapToQuestionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullQuestionAndMapToQuestionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListQuestionAndMapToQuestionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteQuestionAndMapToQuestionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullQuestionAndMapToQuestionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListQuestionAndMapToQuestionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteQuestionAndMapToQuestionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullQuestionAndMapToQuestionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListQuestionAndMapToQuestionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteQuestionAndMapToQuestionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullQuestionAndMapToQuestionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Questionnaire / QuestionOption
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Questionnaire_QuestionOption_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.QuestionOptions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IQuestionOptionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateQuestionOptionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateQuestionOptionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateQuestionOptionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateQuestionOptionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListQuestionOptionAndMapToQuestionOptionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullQuestionOptionAndMapToQuestionOptionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListQuestionOptionAndMapToQuestionOptionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteQuestionOptionAndMapToQuestionOptionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullQuestionOptionAndMapToQuestionOptionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListQuestionOptionAndMapToQuestionOptionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteQuestionOptionAndMapToQuestionOptionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullQuestionOptionAndMapToQuestionOptionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListQuestionOptionAndMapToQuestionOptionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteQuestionOptionAndMapToQuestionOptionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullQuestionOptionAndMapToQuestionOptionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Questionnaire / QuestionType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Questionnaire_QuestionType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.QuestionTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateQuestionTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateQuestionTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateQuestionTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateQuestionTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListQuestionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullQuestionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListQuestionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteQuestionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullQuestionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListQuestionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteQuestionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullQuestionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListQuestionTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteQuestionTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullQuestionTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Quoting
        #region Quoting / SalesQuote
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuote_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesQuotes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesQuoteModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesQuoteEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesQuoteModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesQuoteModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesQuoteModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesQuoteAndMapToSalesQuoteModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesQuoteAndMapToSalesQuoteModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesQuoteAndMapToSalesQuoteModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesQuoteAndMapToSalesQuoteModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesQuoteAndMapToSalesQuoteModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesQuoteAndMapToSalesQuoteModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesQuoteAndMapToSalesQuoteModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesQuoteAndMapToSalesQuoteModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesQuoteAndMapToSalesQuoteModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesQuoteAndMapToSalesQuoteModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesQuoteAndMapToSalesQuoteModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Quoting / SalesQuoteCategory
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteCategory_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesQuoteCategories;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesQuoteCategoryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesQuoteCategoryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesQuoteCategoryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesQuoteCategoryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesQuoteCategoryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesQuoteCategoryAndMapToSalesQuoteCategoryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesQuoteCategoryAndMapToSalesQuoteCategoryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesQuoteCategoryAndMapToSalesQuoteCategoryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesQuoteCategoryAndMapToSalesQuoteCategoryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesQuoteCategoryAndMapToSalesQuoteCategoryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesQuoteCategoryAndMapToSalesQuoteCategoryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesQuoteCategoryAndMapToSalesQuoteCategoryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesQuoteCategoryAndMapToSalesQuoteCategoryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesQuoteCategoryAndMapToSalesQuoteCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesQuoteCategoryAndMapToSalesQuoteCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesQuoteCategoryAndMapToSalesQuoteCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Quoting / SalesQuoteContact
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteContact_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesQuoteContacts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesQuoteContactModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesQuoteContactEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesQuoteContactModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesQuoteContactModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesQuoteContactModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesQuoteContactAndMapToSalesQuoteContactModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesQuoteContactAndMapToSalesQuoteContactModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesQuoteContactAndMapToSalesQuoteContactModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesQuoteContactAndMapToSalesQuoteContactModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesQuoteContactAndMapToSalesQuoteContactModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesQuoteContactAndMapToSalesQuoteContactModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesQuoteContactAndMapToSalesQuoteContactModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesQuoteContactAndMapToSalesQuoteContactModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesQuoteContactAndMapToSalesQuoteContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesQuoteContactAndMapToSalesQuoteContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesQuoteContactAndMapToSalesQuoteContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Quoting / SalesQuoteEvent
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteEvent_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesQuoteEvents;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesQuoteEventModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesQuoteEventEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesQuoteEventModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesQuoteEventModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesQuoteEventModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesQuoteEventAndMapToSalesQuoteEventModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesQuoteEventAndMapToSalesQuoteEventModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesQuoteEventAndMapToSalesQuoteEventModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesQuoteEventAndMapToSalesQuoteEventModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesQuoteEventAndMapToSalesQuoteEventModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesQuoteEventAndMapToSalesQuoteEventModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesQuoteEventAndMapToSalesQuoteEventModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesQuoteEventAndMapToSalesQuoteEventModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesQuoteEventAndMapToSalesQuoteEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesQuoteEventAndMapToSalesQuoteEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesQuoteEventAndMapToSalesQuoteEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Quoting / SalesQuoteEventType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteEventType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesQuoteEventTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesQuoteEventTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesQuoteEventTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesQuoteEventTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesQuoteEventTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesQuoteEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesQuoteEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesQuoteEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesQuoteEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesQuoteEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesQuoteEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesQuoteEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesQuoteEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesQuoteEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesQuoteEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesQuoteEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Quoting / SalesQuoteFile
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteFile_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesQuoteFiles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesQuoteFileModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesQuoteFileEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesQuoteFileModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesQuoteFileModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesQuoteFileModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesQuoteFileAndMapToSalesQuoteFileModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesQuoteFileAndMapToSalesQuoteFileModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesQuoteFileAndMapToSalesQuoteFileModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesQuoteFileAndMapToSalesQuoteFileModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesQuoteFileAndMapToSalesQuoteFileModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesQuoteFileAndMapToSalesQuoteFileModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesQuoteFileAndMapToSalesQuoteFileModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesQuoteFileAndMapToSalesQuoteFileModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesQuoteFileAndMapToSalesQuoteFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesQuoteFileAndMapToSalesQuoteFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesQuoteFileAndMapToSalesQuoteFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Quoting / SalesQuoteItem
        #region Quoting / SalesQuoteItemTarget
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteItemTarget_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesQuoteItemTargets;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesItemTargetBaseModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesQuoteItemTargetEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesQuoteItemTargetModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesQuoteItemTargetModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesQuoteItemTargetModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesQuoteItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesQuoteItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesQuoteItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesQuoteItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesQuoteItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesQuoteItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesQuoteItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesQuoteItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesQuoteItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesQuoteItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesQuoteItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Quoting / SalesQuoteSalesOrder
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteSalesOrder_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesQuoteSalesOrders;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesQuoteSalesOrderModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesQuoteSalesOrderEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesQuoteSalesOrderModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesQuoteSalesOrderModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesQuoteSalesOrderModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesQuoteSalesOrderAndMapToSalesQuoteSalesOrderModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesQuoteSalesOrderAndMapToSalesQuoteSalesOrderModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesQuoteSalesOrderAndMapToSalesQuoteSalesOrderModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesQuoteSalesOrderAndMapToSalesQuoteSalesOrderModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesQuoteSalesOrderAndMapToSalesQuoteSalesOrderModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesQuoteSalesOrderAndMapToSalesQuoteSalesOrderModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesQuoteSalesOrderAndMapToSalesQuoteSalesOrderModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesQuoteSalesOrderAndMapToSalesQuoteSalesOrderModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesQuoteSalesOrderAndMapToSalesQuoteSalesOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesQuoteSalesOrderAndMapToSalesQuoteSalesOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesQuoteSalesOrderAndMapToSalesQuoteSalesOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Quoting / SalesQuoteState
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteState_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesQuoteStates;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStateModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesQuoteStateEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesQuoteStateModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesQuoteStateModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesQuoteStateModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesQuoteStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesQuoteStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesQuoteStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesQuoteStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesQuoteStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesQuoteStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesQuoteStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesQuoteStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesQuoteStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesQuoteStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesQuoteStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Quoting / SalesQuoteStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesQuoteStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesQuoteStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesQuoteStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesQuoteStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesQuoteStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesQuoteStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesQuoteStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesQuoteStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesQuoteStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesQuoteStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesQuoteStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesQuoteStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesQuoteStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesQuoteStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesQuoteStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesQuoteStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Quoting / SalesQuoteType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Quoting_SalesQuoteType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesQuoteTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesQuoteTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesQuoteTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesQuoteTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesQuoteTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesQuoteTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesQuoteTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesQuoteTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesQuoteTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesQuoteTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesQuoteTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesQuoteTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesQuoteTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesQuoteTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesQuoteTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesQuoteTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Reporting
                // Skipping Reporting / Report
        #region Reporting / ReportType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Reporting_ReportType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ReportTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IReportTypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateReportTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateReportTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateReportTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateReportTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListReportTypeAndMapToReportTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullReportTypeAndMapToReportTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListReportTypeAndMapToReportTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteReportTypeAndMapToReportTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullReportTypeAndMapToReportTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListReportTypeAndMapToReportTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteReportTypeAndMapToReportTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullReportTypeAndMapToReportTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListReportTypeAndMapToReportTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteReportTypeAndMapToReportTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullReportTypeAndMapToReportTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Returning
        #region Returning / SalesReturn
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturn_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesReturns;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesReturnModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesReturnEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesReturnModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesReturnModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesReturnModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesReturnAndMapToSalesReturnModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesReturnAndMapToSalesReturnModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesReturnAndMapToSalesReturnModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesReturnAndMapToSalesReturnModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesReturnAndMapToSalesReturnModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesReturnAndMapToSalesReturnModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesReturnAndMapToSalesReturnModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesReturnAndMapToSalesReturnModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesReturnAndMapToSalesReturnModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesReturnAndMapToSalesReturnModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesReturnAndMapToSalesReturnModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Returning / SalesReturnContact
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnContact_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesReturnContacts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesReturnContactModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesReturnContactEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesReturnContactModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesReturnContactModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesReturnContactModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesReturnContactAndMapToSalesReturnContactModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesReturnContactAndMapToSalesReturnContactModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesReturnContactAndMapToSalesReturnContactModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesReturnContactAndMapToSalesReturnContactModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesReturnContactAndMapToSalesReturnContactModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesReturnContactAndMapToSalesReturnContactModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesReturnContactAndMapToSalesReturnContactModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesReturnContactAndMapToSalesReturnContactModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesReturnContactAndMapToSalesReturnContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesReturnContactAndMapToSalesReturnContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesReturnContactAndMapToSalesReturnContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Returning / SalesReturnEvent
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnEvent_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesReturnEvents;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesReturnEventModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesReturnEventEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesReturnEventModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesReturnEventModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesReturnEventModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesReturnEventAndMapToSalesReturnEventModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesReturnEventAndMapToSalesReturnEventModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesReturnEventAndMapToSalesReturnEventModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesReturnEventAndMapToSalesReturnEventModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesReturnEventAndMapToSalesReturnEventModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesReturnEventAndMapToSalesReturnEventModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesReturnEventAndMapToSalesReturnEventModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesReturnEventAndMapToSalesReturnEventModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesReturnEventAndMapToSalesReturnEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesReturnEventAndMapToSalesReturnEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesReturnEventAndMapToSalesReturnEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Returning / SalesReturnEventType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnEventType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesReturnEventTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesReturnEventTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesReturnEventTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesReturnEventTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesReturnEventTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesReturnEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesReturnEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesReturnEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesReturnEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesReturnEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesReturnEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesReturnEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesReturnEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesReturnEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesReturnEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesReturnEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Returning / SalesReturnFile
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnFile_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesReturnFiles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesReturnFileModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesReturnFileEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesReturnFileModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesReturnFileModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesReturnFileModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesReturnFileAndMapToSalesReturnFileModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesReturnFileAndMapToSalesReturnFileModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesReturnFileAndMapToSalesReturnFileModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesReturnFileAndMapToSalesReturnFileModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesReturnFileAndMapToSalesReturnFileModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesReturnFileAndMapToSalesReturnFileModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesReturnFileAndMapToSalesReturnFileModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesReturnFileAndMapToSalesReturnFileModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesReturnFileAndMapToSalesReturnFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesReturnFileAndMapToSalesReturnFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesReturnFileAndMapToSalesReturnFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Returning / SalesReturnItem
        #region Returning / SalesReturnItemTarget
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnItemTarget_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesReturnItemTargets;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesItemTargetBaseModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesReturnItemTargetEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesReturnItemTargetModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesReturnItemTargetModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesReturnItemTargetModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesReturnItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesReturnItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesReturnItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesReturnItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesReturnItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesReturnItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesReturnItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesReturnItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesReturnItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesReturnItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesReturnItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Returning / SalesReturnReason
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnReason_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesReturnReasons;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesReturnReasonModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesReturnReasonEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesReturnReasonModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesReturnReasonModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesReturnReasonModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesReturnReasonAndMapToSalesReturnReasonModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesReturnReasonAndMapToSalesReturnReasonModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesReturnReasonAndMapToSalesReturnReasonModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesReturnReasonAndMapToSalesReturnReasonModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesReturnReasonAndMapToSalesReturnReasonModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesReturnReasonAndMapToSalesReturnReasonModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesReturnReasonAndMapToSalesReturnReasonModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesReturnReasonAndMapToSalesReturnReasonModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesReturnReasonAndMapToSalesReturnReasonModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesReturnReasonAndMapToSalesReturnReasonModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesReturnReasonAndMapToSalesReturnReasonModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Returning / SalesReturnSalesOrder
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnSalesOrder_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesReturnSalesOrders;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesReturnSalesOrderModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesReturnSalesOrderEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesReturnSalesOrderModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesReturnSalesOrderModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesReturnSalesOrderModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesReturnSalesOrderAndMapToSalesReturnSalesOrderModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesReturnSalesOrderAndMapToSalesReturnSalesOrderModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesReturnSalesOrderAndMapToSalesReturnSalesOrderModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesReturnSalesOrderAndMapToSalesReturnSalesOrderModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesReturnSalesOrderAndMapToSalesReturnSalesOrderModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesReturnSalesOrderAndMapToSalesReturnSalesOrderModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesReturnSalesOrderAndMapToSalesReturnSalesOrderModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesReturnSalesOrderAndMapToSalesReturnSalesOrderModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesReturnSalesOrderAndMapToSalesReturnSalesOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesReturnSalesOrderAndMapToSalesReturnSalesOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesReturnSalesOrderAndMapToSalesReturnSalesOrderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Returning / SalesReturnState
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnState_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesReturnStates;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStateModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesReturnStateEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesReturnStateModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesReturnStateModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesReturnStateModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesReturnStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesReturnStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesReturnStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesReturnStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesReturnStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesReturnStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesReturnStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesReturnStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesReturnStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesReturnStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesReturnStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Returning / SalesReturnStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesReturnStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesReturnStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesReturnStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesReturnStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesReturnStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesReturnStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesReturnStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesReturnStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesReturnStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesReturnStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesReturnStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesReturnStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesReturnStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesReturnStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesReturnStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesReturnStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Returning / SalesReturnType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Returning_SalesReturnType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesReturnTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesReturnTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesReturnTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesReturnTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesReturnTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesReturnTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesReturnTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesReturnTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesReturnTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesReturnTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesReturnTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesReturnTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesReturnTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesReturnTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesReturnTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesReturnTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Reviews
        #region Reviews / Review
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Reviews_Review_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Reviews;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IReviewModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateReviewEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateReviewModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateReviewModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateReviewModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListReviewAndMapToReviewModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullReviewAndMapToReviewModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListReviewAndMapToReviewModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteReviewAndMapToReviewModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullReviewAndMapToReviewModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListReviewAndMapToReviewModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteReviewAndMapToReviewModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullReviewAndMapToReviewModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListReviewAndMapToReviewModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteReviewAndMapToReviewModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullReviewAndMapToReviewModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Reviews / ReviewType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Reviews_ReviewType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ReviewTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateReviewTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateReviewTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateReviewTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateReviewTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListReviewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullReviewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListReviewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteReviewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullReviewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListReviewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteReviewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullReviewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListReviewTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteReviewTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullReviewTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Sales
        #region Sales / SalesGroup
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Sales_SalesGroup_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesGroups;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesGroupModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesGroupEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesGroupModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesGroupModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesGroupModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesGroupAndMapToSalesGroupModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesGroupAndMapToSalesGroupModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesGroupAndMapToSalesGroupModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesGroupAndMapToSalesGroupModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesGroupAndMapToSalesGroupModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesGroupAndMapToSalesGroupModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesGroupAndMapToSalesGroupModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesGroupAndMapToSalesGroupModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesGroupAndMapToSalesGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesGroupAndMapToSalesGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesGroupAndMapToSalesGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Sales / SalesItemTargetType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Sales_SalesItemTargetType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SalesItemTargetTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSalesItemTargetTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSalesItemTargetTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSalesItemTargetTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSalesItemTargetTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSalesItemTargetTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSalesItemTargetTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSalesItemTargetTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSalesItemTargetTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSalesItemTargetTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSalesItemTargetTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSalesItemTargetTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSalesItemTargetTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSalesItemTargetTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSalesItemTargetTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSalesItemTargetTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Sampling
        #region Sampling / SampleRequest
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequest_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SampleRequests;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISampleRequestModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSampleRequestEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSampleRequestModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSampleRequestModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSampleRequestModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSampleRequestAndMapToSampleRequestModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSampleRequestAndMapToSampleRequestModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSampleRequestAndMapToSampleRequestModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSampleRequestAndMapToSampleRequestModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSampleRequestAndMapToSampleRequestModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSampleRequestAndMapToSampleRequestModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSampleRequestAndMapToSampleRequestModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSampleRequestAndMapToSampleRequestModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSampleRequestAndMapToSampleRequestModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSampleRequestAndMapToSampleRequestModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSampleRequestAndMapToSampleRequestModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Sampling / SampleRequestContact
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestContact_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SampleRequestContacts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISampleRequestContactModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSampleRequestContactEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSampleRequestContactModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSampleRequestContactModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSampleRequestContactModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSampleRequestContactAndMapToSampleRequestContactModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSampleRequestContactAndMapToSampleRequestContactModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSampleRequestContactAndMapToSampleRequestContactModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSampleRequestContactAndMapToSampleRequestContactModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSampleRequestContactAndMapToSampleRequestContactModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSampleRequestContactAndMapToSampleRequestContactModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSampleRequestContactAndMapToSampleRequestContactModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSampleRequestContactAndMapToSampleRequestContactModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSampleRequestContactAndMapToSampleRequestContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSampleRequestContactAndMapToSampleRequestContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSampleRequestContactAndMapToSampleRequestContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Sampling / SampleRequestEvent
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestEvent_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SampleRequestEvents;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISampleRequestEventModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSampleRequestEventEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSampleRequestEventModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSampleRequestEventModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSampleRequestEventModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSampleRequestEventAndMapToSampleRequestEventModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSampleRequestEventAndMapToSampleRequestEventModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSampleRequestEventAndMapToSampleRequestEventModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSampleRequestEventAndMapToSampleRequestEventModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSampleRequestEventAndMapToSampleRequestEventModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSampleRequestEventAndMapToSampleRequestEventModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSampleRequestEventAndMapToSampleRequestEventModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSampleRequestEventAndMapToSampleRequestEventModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSampleRequestEventAndMapToSampleRequestEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSampleRequestEventAndMapToSampleRequestEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSampleRequestEventAndMapToSampleRequestEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Sampling / SampleRequestEventType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestEventType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SampleRequestEventTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSampleRequestEventTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSampleRequestEventTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSampleRequestEventTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSampleRequestEventTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSampleRequestEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSampleRequestEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSampleRequestEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSampleRequestEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSampleRequestEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSampleRequestEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSampleRequestEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSampleRequestEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSampleRequestEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSampleRequestEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSampleRequestEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Sampling / SampleRequestFile
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestFile_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SampleRequestFiles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISampleRequestFileModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSampleRequestFileEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSampleRequestFileModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSampleRequestFileModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSampleRequestFileModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSampleRequestFileAndMapToSampleRequestFileModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSampleRequestFileAndMapToSampleRequestFileModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSampleRequestFileAndMapToSampleRequestFileModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSampleRequestFileAndMapToSampleRequestFileModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSampleRequestFileAndMapToSampleRequestFileModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSampleRequestFileAndMapToSampleRequestFileModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSampleRequestFileAndMapToSampleRequestFileModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSampleRequestFileAndMapToSampleRequestFileModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSampleRequestFileAndMapToSampleRequestFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSampleRequestFileAndMapToSampleRequestFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSampleRequestFileAndMapToSampleRequestFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Sampling / SampleRequestItem
        #region Sampling / SampleRequestItemTarget
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestItemTarget_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SampleRequestItemTargets;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesItemTargetBaseModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSampleRequestItemTargetEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSampleRequestItemTargetModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSampleRequestItemTargetModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSampleRequestItemTargetModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSampleRequestItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSampleRequestItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSampleRequestItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSampleRequestItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSampleRequestItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSampleRequestItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSampleRequestItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSampleRequestItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSampleRequestItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSampleRequestItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSampleRequestItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Sampling / SampleRequestState
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestState_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SampleRequestStates;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStateModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSampleRequestStateEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSampleRequestStateModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSampleRequestStateModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSampleRequestStateModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSampleRequestStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSampleRequestStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSampleRequestStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSampleRequestStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSampleRequestStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSampleRequestStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSampleRequestStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSampleRequestStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSampleRequestStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSampleRequestStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSampleRequestStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Sampling / SampleRequestStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SampleRequestStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSampleRequestStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSampleRequestStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSampleRequestStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSampleRequestStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSampleRequestStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSampleRequestStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSampleRequestStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSampleRequestStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSampleRequestStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSampleRequestStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSampleRequestStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSampleRequestStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSampleRequestStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSampleRequestStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSampleRequestStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Sampling / SampleRequestType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Sampling_SampleRequestType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SampleRequestTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSampleRequestTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSampleRequestTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSampleRequestTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSampleRequestTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSampleRequestTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSampleRequestTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSampleRequestTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSampleRequestTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSampleRequestTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSampleRequestTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSampleRequestTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSampleRequestTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSampleRequestTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSampleRequestTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSampleRequestTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Scheduling
        #region Scheduling / Appointment
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Scheduling_Appointment_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Appointments;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IAppointmentModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppointmentEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppointmentModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppointmentModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppointmentModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppointmentAndMapToAppointmentModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppointmentAndMapToAppointmentModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppointmentAndMapToAppointmentModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppointmentAndMapToAppointmentModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppointmentAndMapToAppointmentModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppointmentAndMapToAppointmentModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppointmentAndMapToAppointmentModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppointmentAndMapToAppointmentModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppointmentAndMapToAppointmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppointmentAndMapToAppointmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppointmentAndMapToAppointmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Scheduling / AppointmentStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Scheduling_AppointmentStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppointmentStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppointmentStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppointmentStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppointmentStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppointmentStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppointmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppointmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppointmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppointmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppointmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppointmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppointmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppointmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppointmentStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppointmentStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppointmentStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Scheduling / AppointmentType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Scheduling_AppointmentType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.AppointmentTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateAppointmentTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateAppointmentTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateAppointmentTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateAppointmentTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListAppointmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullAppointmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListAppointmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteAppointmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullAppointmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListAppointmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteAppointmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullAppointmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListAppointmentTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteAppointmentTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullAppointmentTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Scheduling / Calendar
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Scheduling_Calendar_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Calendars;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICalendarModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCalendarEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCalendarModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCalendarModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCalendarModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCalendarAndMapToCalendarModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCalendarAndMapToCalendarModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCalendarAndMapToCalendarModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCalendarAndMapToCalendarModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCalendarAndMapToCalendarModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCalendarAndMapToCalendarModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCalendarAndMapToCalendarModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCalendarAndMapToCalendarModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCalendarAndMapToCalendarModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCalendarAndMapToCalendarModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCalendarAndMapToCalendarModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Scheduling / CalendarAppointment
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Scheduling_CalendarAppointment_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CalendarAppointments;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICalendarAppointmentModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCalendarAppointmentEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCalendarAppointmentModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCalendarAppointmentModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCalendarAppointmentModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCalendarAppointmentAndMapToCalendarAppointmentModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCalendarAppointmentAndMapToCalendarAppointmentModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCalendarAppointmentAndMapToCalendarAppointmentModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCalendarAppointmentAndMapToCalendarAppointmentModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCalendarAppointmentAndMapToCalendarAppointmentModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCalendarAppointmentAndMapToCalendarAppointmentModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCalendarAppointmentAndMapToCalendarAppointmentModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCalendarAppointmentAndMapToCalendarAppointmentModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCalendarAppointmentAndMapToCalendarAppointmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCalendarAppointmentAndMapToCalendarAppointmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCalendarAppointmentAndMapToCalendarAppointmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Scouting
        #region Scouting / Scout
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Scouting_Scout_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Scouts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IScoutModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateScoutEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateScoutModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateScoutModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateScoutModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListScoutAndMapToScoutModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullScoutAndMapToScoutModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListScoutAndMapToScoutModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteScoutAndMapToScoutModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullScoutAndMapToScoutModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListScoutAndMapToScoutModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteScoutAndMapToScoutModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullScoutAndMapToScoutModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListScoutAndMapToScoutModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteScoutAndMapToScoutModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullScoutAndMapToScoutModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Scouting / ScoutCategory
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Scouting_ScoutCategory_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ScoutCategories;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IScoutCategoryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateScoutCategoryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateScoutCategoryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateScoutCategoryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateScoutCategoryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListScoutCategoryAndMapToScoutCategoryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullScoutCategoryAndMapToScoutCategoryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListScoutCategoryAndMapToScoutCategoryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteScoutCategoryAndMapToScoutCategoryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullScoutCategoryAndMapToScoutCategoryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListScoutCategoryAndMapToScoutCategoryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteScoutCategoryAndMapToScoutCategoryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullScoutCategoryAndMapToScoutCategoryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListScoutCategoryAndMapToScoutCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteScoutCategoryAndMapToScoutCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullScoutCategoryAndMapToScoutCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Scouting / ScoutCategoryType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Scouting_ScoutCategoryType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ScoutCategoryTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateScoutCategoryTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateScoutCategoryTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateScoutCategoryTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateScoutCategoryTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListScoutCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullScoutCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListScoutCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteScoutCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullScoutCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListScoutCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteScoutCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullScoutCategoryTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListScoutCategoryTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteScoutCategoryTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullScoutCategoryTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Shipping
        #region Shipping / Package
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_Package_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Packages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPackageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePackageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePackageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePackageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePackageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPackageAndMapToPackageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPackageAndMapToPackageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPackageAndMapToPackageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePackageAndMapToPackageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPackageAndMapToPackageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPackageAndMapToPackageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePackageAndMapToPackageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPackageAndMapToPackageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPackageAndMapToPackageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePackageAndMapToPackageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPackageAndMapToPackageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shipping / PackageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_PackageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PackageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePackageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePackageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePackageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePackageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPackageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPackageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPackageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePackageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPackageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPackageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePackageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPackageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPackageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePackageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPackageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shipping / RateQuote
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_RateQuote_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.RateQuotes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IRateQuoteModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateRateQuoteEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateRateQuoteModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateRateQuoteModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateRateQuoteModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListRateQuoteAndMapToRateQuoteModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullRateQuoteAndMapToRateQuoteModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListRateQuoteAndMapToRateQuoteModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteRateQuoteAndMapToRateQuoteModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullRateQuoteAndMapToRateQuoteModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListRateQuoteAndMapToRateQuoteModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteRateQuoteAndMapToRateQuoteModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullRateQuoteAndMapToRateQuoteModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListRateQuoteAndMapToRateQuoteModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteRateQuoteAndMapToRateQuoteModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullRateQuoteAndMapToRateQuoteModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shipping / ShipCarrier
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_ShipCarrier_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ShipCarriers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IShipCarrierModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateShipCarrierEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateShipCarrierModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateShipCarrierModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateShipCarrierModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListShipCarrierAndMapToShipCarrierModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullShipCarrierAndMapToShipCarrierModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListShipCarrierAndMapToShipCarrierModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteShipCarrierAndMapToShipCarrierModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullShipCarrierAndMapToShipCarrierModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListShipCarrierAndMapToShipCarrierModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteShipCarrierAndMapToShipCarrierModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullShipCarrierAndMapToShipCarrierModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListShipCarrierAndMapToShipCarrierModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteShipCarrierAndMapToShipCarrierModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullShipCarrierAndMapToShipCarrierModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shipping / ShipCarrierMethod
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_ShipCarrierMethod_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ShipCarrierMethods;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IShipCarrierMethodModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateShipCarrierMethodEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateShipCarrierMethodModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateShipCarrierMethodModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateShipCarrierMethodModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListShipCarrierMethodAndMapToShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullShipCarrierMethodAndMapToShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListShipCarrierMethodAndMapToShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteShipCarrierMethodAndMapToShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullShipCarrierMethodAndMapToShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListShipCarrierMethodAndMapToShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteShipCarrierMethodAndMapToShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullShipCarrierMethodAndMapToShipCarrierMethodModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListShipCarrierMethodAndMapToShipCarrierMethodModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteShipCarrierMethodAndMapToShipCarrierMethodModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullShipCarrierMethodAndMapToShipCarrierMethodModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shipping / Shipment
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_Shipment_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Shipments;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IShipmentModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateShipmentEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateShipmentModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateShipmentModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateShipmentModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListShipmentAndMapToShipmentModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullShipmentAndMapToShipmentModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListShipmentAndMapToShipmentModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteShipmentAndMapToShipmentModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullShipmentAndMapToShipmentModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListShipmentAndMapToShipmentModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteShipmentAndMapToShipmentModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullShipmentAndMapToShipmentModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListShipmentAndMapToShipmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteShipmentAndMapToShipmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullShipmentAndMapToShipmentModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shipping / ShipmentEvent
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_ShipmentEvent_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ShipmentEvents;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IShipmentEventModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateShipmentEventEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateShipmentEventModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateShipmentEventModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateShipmentEventModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListShipmentEventAndMapToShipmentEventModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullShipmentEventAndMapToShipmentEventModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListShipmentEventAndMapToShipmentEventModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteShipmentEventAndMapToShipmentEventModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullShipmentEventAndMapToShipmentEventModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListShipmentEventAndMapToShipmentEventModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteShipmentEventAndMapToShipmentEventModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullShipmentEventAndMapToShipmentEventModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListShipmentEventAndMapToShipmentEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteShipmentEventAndMapToShipmentEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullShipmentEventAndMapToShipmentEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shipping / ShipmentStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_ShipmentStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ShipmentStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateShipmentStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateShipmentStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateShipmentStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateShipmentStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListShipmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullShipmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListShipmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteShipmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullShipmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListShipmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteShipmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullShipmentStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListShipmentStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteShipmentStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullShipmentStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shipping / ShipmentType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shipping_ShipmentType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ShipmentTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateShipmentTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateShipmentTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateShipmentTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateShipmentTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListShipmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullShipmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListShipmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteShipmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullShipmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListShipmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteShipmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullShipmentTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListShipmentTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteShipmentTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullShipmentTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Shopping
        #region Shopping / Cart
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_Cart_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Carts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICartModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCartEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCartModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCartModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCartModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCartAndMapToCartModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCartAndMapToCartModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCartAndMapToCartModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCartAndMapToCartModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCartAndMapToCartModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCartAndMapToCartModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCartAndMapToCartModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCartAndMapToCartModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCartAndMapToCartModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCartAndMapToCartModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCartAndMapToCartModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shopping / CartContact
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartContact_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CartContacts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICartContactModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCartContactEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCartContactModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCartContactModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCartContactModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCartContactAndMapToCartContactModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCartContactAndMapToCartContactModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCartContactAndMapToCartContactModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCartContactAndMapToCartContactModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCartContactAndMapToCartContactModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCartContactAndMapToCartContactModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCartContactAndMapToCartContactModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCartContactAndMapToCartContactModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCartContactAndMapToCartContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCartContactAndMapToCartContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCartContactAndMapToCartContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shopping / CartEvent
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartEvent_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CartEvents;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICartEventModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCartEventEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCartEventModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCartEventModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCartEventModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCartEventAndMapToCartEventModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCartEventAndMapToCartEventModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCartEventAndMapToCartEventModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCartEventAndMapToCartEventModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCartEventAndMapToCartEventModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCartEventAndMapToCartEventModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCartEventAndMapToCartEventModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCartEventAndMapToCartEventModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCartEventAndMapToCartEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCartEventAndMapToCartEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCartEventAndMapToCartEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shopping / CartEventType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartEventType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CartEventTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCartEventTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCartEventTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCartEventTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCartEventTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCartEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCartEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCartEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCartEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCartEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCartEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCartEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCartEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCartEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCartEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCartEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shopping / CartFile
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartFile_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CartFiles;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICartFileModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCartFileEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCartFileModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCartFileModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCartFileModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCartFileAndMapToCartFileModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCartFileAndMapToCartFileModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCartFileAndMapToCartFileModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCartFileAndMapToCartFileModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCartFileAndMapToCartFileModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCartFileAndMapToCartFileModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCartFileAndMapToCartFileModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCartFileAndMapToCartFileModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCartFileAndMapToCartFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCartFileAndMapToCartFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCartFileAndMapToCartFileModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
                // Skipping Shopping / CartItem
        #region Shopping / CartItemTarget
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartItemTarget_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CartItemTargets;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISalesItemTargetBaseModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCartItemTargetEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCartItemTargetModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCartItemTargetModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCartItemTargetModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCartItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCartItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCartItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCartItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCartItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCartItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCartItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCartItemTargetAndMapToSalesItemTargetBaseModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCartItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCartItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCartItemTargetAndMapToSalesItemTargetBaseModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shopping / CartState
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartState_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CartStates;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStateModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCartStateEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCartStateModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCartStateModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCartStateModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCartStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCartStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCartStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCartStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCartStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCartStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCartStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCartStateAndMapToStateModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCartStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCartStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCartStateAndMapToStateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shopping / CartStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CartStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCartStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCartStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCartStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCartStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCartStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCartStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCartStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCartStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCartStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCartStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCartStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCartStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCartStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCartStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCartStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Shopping / CartType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Shopping_CartType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CartTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICartTypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCartTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCartTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCartTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCartTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCartTypeAndMapToCartTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCartTypeAndMapToCartTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCartTypeAndMapToCartTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCartTypeAndMapToCartTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCartTypeAndMapToCartTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCartTypeAndMapToCartTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCartTypeAndMapToCartTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCartTypeAndMapToCartTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCartTypeAndMapToCartTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCartTypeAndMapToCartTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCartTypeAndMapToCartTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Stores
        #region Stores / SiteDomain
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_SiteDomain_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SiteDomains;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISiteDomainModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSiteDomainEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSiteDomainModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSiteDomainModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSiteDomainModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSiteDomainAndMapToSiteDomainModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSiteDomainAndMapToSiteDomainModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSiteDomainAndMapToSiteDomainModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSiteDomainAndMapToSiteDomainModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSiteDomainAndMapToSiteDomainModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSiteDomainAndMapToSiteDomainModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSiteDomainAndMapToSiteDomainModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSiteDomainAndMapToSiteDomainModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSiteDomainAndMapToSiteDomainModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSiteDomainAndMapToSiteDomainModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSiteDomainAndMapToSiteDomainModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / SiteDomainSocialProvider
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_SiteDomainSocialProvider_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SiteDomainSocialProviders;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISiteDomainSocialProviderModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSiteDomainSocialProviderEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSiteDomainSocialProviderModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSiteDomainSocialProviderModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSiteDomainSocialProviderModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSiteDomainSocialProviderAndMapToSiteDomainSocialProviderModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSiteDomainSocialProviderAndMapToSiteDomainSocialProviderModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSiteDomainSocialProviderAndMapToSiteDomainSocialProviderModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSiteDomainSocialProviderAndMapToSiteDomainSocialProviderModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSiteDomainSocialProviderAndMapToSiteDomainSocialProviderModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSiteDomainSocialProviderAndMapToSiteDomainSocialProviderModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSiteDomainSocialProviderAndMapToSiteDomainSocialProviderModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSiteDomainSocialProviderAndMapToSiteDomainSocialProviderModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSiteDomainSocialProviderAndMapToSiteDomainSocialProviderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSiteDomainSocialProviderAndMapToSiteDomainSocialProviderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSiteDomainSocialProviderAndMapToSiteDomainSocialProviderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / SocialProvider
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_SocialProvider_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SocialProviders;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISocialProviderModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSocialProviderEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSocialProviderModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSocialProviderModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSocialProviderModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSocialProviderAndMapToSocialProviderModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSocialProviderAndMapToSocialProviderModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSocialProviderAndMapToSocialProviderModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSocialProviderAndMapToSocialProviderModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSocialProviderAndMapToSocialProviderModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSocialProviderAndMapToSocialProviderModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSocialProviderAndMapToSocialProviderModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSocialProviderAndMapToSocialProviderModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSocialProviderAndMapToSocialProviderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSocialProviderAndMapToSocialProviderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSocialProviderAndMapToSocialProviderModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / Store
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_Store_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Stores;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreAndMapToStoreModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreAndMapToStoreModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreAndMapToStoreModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreAndMapToStoreModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreAndMapToStoreModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreAndMapToStoreModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreAndMapToStoreModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreAndMapToStoreModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreAndMapToStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreAndMapToStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreAndMapToStoreModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreAccount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreAccount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreAccounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreAccountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreAccountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreAccountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreAccountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreAccountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreAccountAndMapToStoreAccountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreAccountAndMapToStoreAccountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreAccountAndMapToStoreAccountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreAccountAndMapToStoreAccountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreAccountAndMapToStoreAccountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreAccountAndMapToStoreAccountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreAccountAndMapToStoreAccountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreAccountAndMapToStoreAccountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreAccountAndMapToStoreAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreAccountAndMapToStoreAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreAccountAndMapToStoreAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreBadge
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreBadge_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreBadges;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreBadgeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreBadgeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreBadgeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreBadgeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreBadgeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreBadgeAndMapToStoreBadgeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreBadgeAndMapToStoreBadgeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreBadgeAndMapToStoreBadgeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreBadgeAndMapToStoreBadgeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreBadgeAndMapToStoreBadgeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreBadgeAndMapToStoreBadgeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreBadgeAndMapToStoreBadgeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreBadgeAndMapToStoreBadgeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreBadgeAndMapToStoreBadgeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreBadgeAndMapToStoreBadgeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreBadgeAndMapToStoreBadgeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreCategory
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreCategory_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreCategories;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreCategoryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreCategoryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreCategoryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreCategoryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreCategoryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreCategoryAndMapToStoreCategoryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreCategoryAndMapToStoreCategoryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreCategoryAndMapToStoreCategoryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreCategoryAndMapToStoreCategoryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreCategoryAndMapToStoreCategoryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreCategoryAndMapToStoreCategoryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreCategoryAndMapToStoreCategoryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreCategoryAndMapToStoreCategoryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreCategoryAndMapToStoreCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreCategoryAndMapToStoreCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreCategoryAndMapToStoreCategoryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreContact
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreContact_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreContacts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreContactModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreContactEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreContactModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreContactModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreContactModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreContactAndMapToStoreContactModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreContactAndMapToStoreContactModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreContactAndMapToStoreContactModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreContactAndMapToStoreContactModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreContactAndMapToStoreContactModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreContactAndMapToStoreContactModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreContactAndMapToStoreContactModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreContactAndMapToStoreContactModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreContactAndMapToStoreContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreContactAndMapToStoreContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreContactAndMapToStoreContactModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreCountry
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreCountry_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreCountries;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreCountryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreCountryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreCountryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreCountryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreCountryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreCountryAndMapToStoreCountryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreCountryAndMapToStoreCountryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreCountryAndMapToStoreCountryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreCountryAndMapToStoreCountryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreCountryAndMapToStoreCountryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreCountryAndMapToStoreCountryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreCountryAndMapToStoreCountryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreCountryAndMapToStoreCountryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreCountryAndMapToStoreCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreCountryAndMapToStoreCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreCountryAndMapToStoreCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreDistrict
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreDistrict_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreDistricts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreDistrictModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreDistrictEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreDistrictModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreDistrictModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreDistrictModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreDistrictAndMapToStoreDistrictModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreDistrictAndMapToStoreDistrictModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreDistrictAndMapToStoreDistrictModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreDistrictAndMapToStoreDistrictModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreDistrictAndMapToStoreDistrictModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreDistrictAndMapToStoreDistrictModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreDistrictAndMapToStoreDistrictModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreDistrictAndMapToStoreDistrictModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreDistrictAndMapToStoreDistrictModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreDistrictAndMapToStoreDistrictModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreDistrictAndMapToStoreDistrictModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreImageAndMapToStoreImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreImageAndMapToStoreImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreImageAndMapToStoreImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreImageAndMapToStoreImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreImageAndMapToStoreImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreImageAndMapToStoreImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreImageAndMapToStoreImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreImageAndMapToStoreImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreImageAndMapToStoreImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreImageAndMapToStoreImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreImageAndMapToStoreImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreInventoryLocation
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreInventoryLocation_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreInventoryLocations;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreInventoryLocationModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreInventoryLocationEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreInventoryLocationModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreInventoryLocationModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreInventoryLocationModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreInventoryLocationAndMapToStoreInventoryLocationModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreInventoryLocationAndMapToStoreInventoryLocationModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreInventoryLocationAndMapToStoreInventoryLocationModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreInventoryLocationAndMapToStoreInventoryLocationModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreInventoryLocationAndMapToStoreInventoryLocationModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreInventoryLocationAndMapToStoreInventoryLocationModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreInventoryLocationAndMapToStoreInventoryLocationModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreInventoryLocationAndMapToStoreInventoryLocationModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreInventoryLocationAndMapToStoreInventoryLocationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreInventoryLocationAndMapToStoreInventoryLocationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreInventoryLocationAndMapToStoreInventoryLocationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreInventoryLocationType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreInventoryLocationType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreInventoryLocationTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreInventoryLocationTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreInventoryLocationTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreInventoryLocationTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreInventoryLocationTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreInventoryLocationTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreInventoryLocationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreInventoryLocationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreInventoryLocationTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreManufacturer
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreManufacturer_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreManufacturers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreManufacturerModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreManufacturerEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreManufacturerModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreManufacturerModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreManufacturerModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreManufacturerAndMapToStoreManufacturerModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreManufacturerAndMapToStoreManufacturerModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreManufacturerAndMapToStoreManufacturerModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreManufacturerAndMapToStoreManufacturerModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreManufacturerAndMapToStoreManufacturerModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreManufacturerAndMapToStoreManufacturerModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreManufacturerAndMapToStoreManufacturerModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreManufacturerAndMapToStoreManufacturerModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreManufacturerAndMapToStoreManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreManufacturerAndMapToStoreManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreManufacturerAndMapToStoreManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreProduct
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreProduct_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreProducts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreProductModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreProductEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreProductModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreProductModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreProductModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreProductAndMapToStoreProductModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreProductAndMapToStoreProductModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreProductAndMapToStoreProductModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreProductAndMapToStoreProductModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreProductAndMapToStoreProductModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreProductAndMapToStoreProductModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreProductAndMapToStoreProductModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreProductAndMapToStoreProductModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreProductAndMapToStoreProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreProductAndMapToStoreProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreProductAndMapToStoreProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreRegion
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreRegion_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreRegions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreRegionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreRegionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreRegionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreRegionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreRegionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreRegionAndMapToStoreRegionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreRegionAndMapToStoreRegionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreRegionAndMapToStoreRegionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreRegionAndMapToStoreRegionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreRegionAndMapToStoreRegionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreRegionAndMapToStoreRegionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreRegionAndMapToStoreRegionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreRegionAndMapToStoreRegionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreRegionAndMapToStoreRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreRegionAndMapToStoreRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreRegionAndMapToStoreRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreSubscription
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreSubscription_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreSubscriptions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreSubscriptionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreSubscriptionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreSubscriptionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreSubscriptionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreSubscriptionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreSubscriptionAndMapToStoreSubscriptionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreSubscriptionAndMapToStoreSubscriptionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreSubscriptionAndMapToStoreSubscriptionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreSubscriptionAndMapToStoreSubscriptionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreSubscriptionAndMapToStoreSubscriptionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreSubscriptionAndMapToStoreSubscriptionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreSubscriptionAndMapToStoreSubscriptionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreSubscriptionAndMapToStoreSubscriptionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreSubscriptionAndMapToStoreSubscriptionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreSubscriptionAndMapToStoreSubscriptionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreSubscriptionAndMapToStoreSubscriptionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreUser
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreUser_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreUsers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreUserModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreUserEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreUserModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreUserModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreUserModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreUserAndMapToStoreUserModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreUserAndMapToStoreUserModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreUserAndMapToStoreUserModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreUserAndMapToStoreUserModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreUserAndMapToStoreUserModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreUserAndMapToStoreUserModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreUserAndMapToStoreUserModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreUserAndMapToStoreUserModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreUserAndMapToStoreUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreUserAndMapToStoreUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreUserAndMapToStoreUserModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Stores / StoreVendor
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Stores_StoreVendor_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.StoreVendors;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStoreVendorModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateStoreVendorEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateStoreVendorModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateStoreVendorModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateStoreVendorModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListStoreVendorAndMapToStoreVendorModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullStoreVendorAndMapToStoreVendorModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListStoreVendorAndMapToStoreVendorModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteStoreVendorAndMapToStoreVendorModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullStoreVendorAndMapToStoreVendorModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListStoreVendorAndMapToStoreVendorModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteStoreVendorAndMapToStoreVendorModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullStoreVendorAndMapToStoreVendorModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListStoreVendorAndMapToStoreVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteStoreVendorAndMapToStoreVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullStoreVendorAndMapToStoreVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region System
        #region System / ImportExportMapping
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_System_ImportExportMapping_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.ImportExportMappings;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IImportExportMappingModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateImportExportMappingEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateImportExportMappingModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateImportExportMappingModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateImportExportMappingModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListImportExportMappingAndMapToImportExportMappingModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullImportExportMappingAndMapToImportExportMappingModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListImportExportMappingAndMapToImportExportMappingModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteImportExportMappingAndMapToImportExportMappingModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullImportExportMappingAndMapToImportExportMappingModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListImportExportMappingAndMapToImportExportMappingModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteImportExportMappingAndMapToImportExportMappingModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullImportExportMappingAndMapToImportExportMappingModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListImportExportMappingAndMapToImportExportMappingModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteImportExportMappingAndMapToImportExportMappingModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullImportExportMappingAndMapToImportExportMappingModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region System / Note
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_System_Note_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Notes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<INoteModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateNoteEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateNoteModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateNoteModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateNoteModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListNoteAndMapToNoteModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullNoteAndMapToNoteModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListNoteAndMapToNoteModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteNoteAndMapToNoteModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullNoteAndMapToNoteModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListNoteAndMapToNoteModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteNoteAndMapToNoteModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullNoteAndMapToNoteModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListNoteAndMapToNoteModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteNoteAndMapToNoteModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullNoteAndMapToNoteModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region System / NoteType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_System_NoteType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.NoteTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<INoteTypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateNoteTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateNoteTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateNoteTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateNoteTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListNoteTypeAndMapToNoteTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullNoteTypeAndMapToNoteTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListNoteTypeAndMapToNoteTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteNoteTypeAndMapToNoteTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullNoteTypeAndMapToNoteTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListNoteTypeAndMapToNoteTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteNoteTypeAndMapToNoteTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullNoteTypeAndMapToNoteTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListNoteTypeAndMapToNoteTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteNoteTypeAndMapToNoteTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullNoteTypeAndMapToNoteTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region System / RecordVersion
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_System_RecordVersion_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.RecordVersions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IRecordVersionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateRecordVersionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateRecordVersionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateRecordVersionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateRecordVersionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListRecordVersionAndMapToRecordVersionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullRecordVersionAndMapToRecordVersionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListRecordVersionAndMapToRecordVersionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteRecordVersionAndMapToRecordVersionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullRecordVersionAndMapToRecordVersionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListRecordVersionAndMapToRecordVersionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteRecordVersionAndMapToRecordVersionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullRecordVersionAndMapToRecordVersionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListRecordVersionAndMapToRecordVersionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteRecordVersionAndMapToRecordVersionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullRecordVersionAndMapToRecordVersionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region System / RecordVersionType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_System_RecordVersionType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.RecordVersionTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateRecordVersionTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateRecordVersionTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateRecordVersionTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateRecordVersionTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListRecordVersionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullRecordVersionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListRecordVersionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteRecordVersionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullRecordVersionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListRecordVersionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteRecordVersionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullRecordVersionTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListRecordVersionTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteRecordVersionTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullRecordVersionTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region System / Setting
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_System_Setting_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Settings;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISettingModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSettingEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSettingModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSettingModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSettingModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSettingAndMapToSettingModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSettingAndMapToSettingModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSettingAndMapToSettingModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSettingAndMapToSettingModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSettingAndMapToSettingModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSettingAndMapToSettingModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSettingAndMapToSettingModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSettingAndMapToSettingModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSettingAndMapToSettingModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSettingAndMapToSettingModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSettingAndMapToSettingModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region System / SettingGroup
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_System_SettingGroup_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SettingGroups;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ISettingGroupModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSettingGroupEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSettingGroupModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSettingGroupModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSettingGroupModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSettingGroupAndMapToSettingGroupModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSettingGroupAndMapToSettingGroupModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSettingGroupAndMapToSettingGroupModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSettingGroupAndMapToSettingGroupModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSettingGroupAndMapToSettingGroupModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSettingGroupAndMapToSettingGroupModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSettingGroupAndMapToSettingGroupModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSettingGroupAndMapToSettingGroupModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSettingGroupAndMapToSettingGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSettingGroupAndMapToSettingGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSettingGroupAndMapToSettingGroupModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region System / SettingType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_System_SettingType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.SettingTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateSettingTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateSettingTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateSettingTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateSettingTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListSettingTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullSettingTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListSettingTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteSettingTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullSettingTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListSettingTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteSettingTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullSettingTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListSettingTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteSettingTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullSettingTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region System / EventLog
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_System_EventLog_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.EventLogs;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IEventLogModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateEventLogEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateEventLogModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateEventLogModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateEventLogModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListEventLogAndMapToEventLogModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullEventLogAndMapToEventLogModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListEventLogAndMapToEventLogModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteEventLogAndMapToEventLogModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullEventLogAndMapToEventLogModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListEventLogAndMapToEventLogModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteEventLogAndMapToEventLogModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullEventLogAndMapToEventLogModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListEventLogAndMapToEventLogModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteEventLogAndMapToEventLogModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullEventLogAndMapToEventLogModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Tax
        #region Tax / HistoricalTaxRate
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tax_HistoricalTaxRate_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.HistoricalTaxRates;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IHistoricalTaxRateModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateHistoricalTaxRateEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateHistoricalTaxRateModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateHistoricalTaxRateModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateHistoricalTaxRateModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListHistoricalTaxRateAndMapToHistoricalTaxRateModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullHistoricalTaxRateAndMapToHistoricalTaxRateModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListHistoricalTaxRateAndMapToHistoricalTaxRateModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteHistoricalTaxRateAndMapToHistoricalTaxRateModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullHistoricalTaxRateAndMapToHistoricalTaxRateModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListHistoricalTaxRateAndMapToHistoricalTaxRateModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteHistoricalTaxRateAndMapToHistoricalTaxRateModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullHistoricalTaxRateAndMapToHistoricalTaxRateModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListHistoricalTaxRateAndMapToHistoricalTaxRateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteHistoricalTaxRateAndMapToHistoricalTaxRateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullHistoricalTaxRateAndMapToHistoricalTaxRateModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tax / TaxCountry
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tax_TaxCountry_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.TaxCountries;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITaxCountryModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateTaxCountryEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateTaxCountryModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateTaxCountryModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateTaxCountryModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListTaxCountryAndMapToTaxCountryModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullTaxCountryAndMapToTaxCountryModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListTaxCountryAndMapToTaxCountryModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteTaxCountryAndMapToTaxCountryModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullTaxCountryAndMapToTaxCountryModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListTaxCountryAndMapToTaxCountryModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteTaxCountryAndMapToTaxCountryModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullTaxCountryAndMapToTaxCountryModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListTaxCountryAndMapToTaxCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteTaxCountryAndMapToTaxCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullTaxCountryAndMapToTaxCountryModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tax / TaxDistrict
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tax_TaxDistrict_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.TaxDistricts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITaxDistrictModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateTaxDistrictEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateTaxDistrictModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateTaxDistrictModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateTaxDistrictModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListTaxDistrictAndMapToTaxDistrictModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullTaxDistrictAndMapToTaxDistrictModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListTaxDistrictAndMapToTaxDistrictModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteTaxDistrictAndMapToTaxDistrictModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullTaxDistrictAndMapToTaxDistrictModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListTaxDistrictAndMapToTaxDistrictModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteTaxDistrictAndMapToTaxDistrictModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullTaxDistrictAndMapToTaxDistrictModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListTaxDistrictAndMapToTaxDistrictModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteTaxDistrictAndMapToTaxDistrictModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullTaxDistrictAndMapToTaxDistrictModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tax / TaxRegion
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tax_TaxRegion_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.TaxRegions;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITaxRegionModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateTaxRegionEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateTaxRegionModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateTaxRegionModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateTaxRegionModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListTaxRegionAndMapToTaxRegionModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullTaxRegionAndMapToTaxRegionModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListTaxRegionAndMapToTaxRegionModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteTaxRegionAndMapToTaxRegionModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullTaxRegionAndMapToTaxRegionModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListTaxRegionAndMapToTaxRegionModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteTaxRegionAndMapToTaxRegionModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullTaxRegionAndMapToTaxRegionModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListTaxRegionAndMapToTaxRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteTaxRegionAndMapToTaxRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullTaxRegionAndMapToTaxRegionModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Tracking
        #region Tracking / Campaign
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_Campaign_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Campaigns;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICampaignModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCampaignEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCampaignModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCampaignModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCampaignModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCampaignAndMapToCampaignModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCampaignAndMapToCampaignModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCampaignAndMapToCampaignModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCampaignAndMapToCampaignModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCampaignAndMapToCampaignModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCampaignAndMapToCampaignModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCampaignAndMapToCampaignModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCampaignAndMapToCampaignModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCampaignAndMapToCampaignModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCampaignAndMapToCampaignModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCampaignAndMapToCampaignModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / CampaignAd
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_CampaignAd_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CampaignAds;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ICampaignAdModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCampaignAdEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCampaignAdModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCampaignAdModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCampaignAdModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCampaignAdAndMapToCampaignAdModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCampaignAdAndMapToCampaignAdModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCampaignAdAndMapToCampaignAdModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCampaignAdAndMapToCampaignAdModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCampaignAdAndMapToCampaignAdModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCampaignAdAndMapToCampaignAdModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCampaignAdAndMapToCampaignAdModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCampaignAdAndMapToCampaignAdModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCampaignAdAndMapToCampaignAdModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCampaignAdAndMapToCampaignAdModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCampaignAdAndMapToCampaignAdModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / CampaignStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_CampaignStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CampaignStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCampaignStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCampaignStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCampaignStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCampaignStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCampaignStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCampaignStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCampaignStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCampaignStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCampaignStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCampaignStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCampaignStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCampaignStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCampaignStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCampaignStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCampaignStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / CampaignType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_CampaignType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.CampaignTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateCampaignTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateCampaignTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateCampaignTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateCampaignTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListCampaignTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullCampaignTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListCampaignTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteCampaignTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullCampaignTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListCampaignTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteCampaignTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullCampaignTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListCampaignTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteCampaignTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullCampaignTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / Event
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_Event_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Events;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IEventModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateEventEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateEventModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateEventModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateEventModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListEventAndMapToEventModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullEventAndMapToEventModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListEventAndMapToEventModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteEventAndMapToEventModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullEventAndMapToEventModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListEventAndMapToEventModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteEventAndMapToEventModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullEventAndMapToEventModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListEventAndMapToEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteEventAndMapToEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullEventAndMapToEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / EventStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_EventStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.EventStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateEventStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateEventStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateEventStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateEventStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullEventStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListEventStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteEventStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullEventStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / EventType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_EventType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.EventTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateEventTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateEventTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateEventTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateEventTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullEventTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullEventTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / IPOrganization
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_IPOrganization_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.IPOrganizations;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IIPOrganizationModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateIPOrganizationEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateIPOrganizationModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateIPOrganizationModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateIPOrganizationModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListIPOrganizationAndMapToIPOrganizationModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullIPOrganizationAndMapToIPOrganizationModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListIPOrganizationAndMapToIPOrganizationModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteIPOrganizationAndMapToIPOrganizationModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullIPOrganizationAndMapToIPOrganizationModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListIPOrganizationAndMapToIPOrganizationModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteIPOrganizationAndMapToIPOrganizationModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullIPOrganizationAndMapToIPOrganizationModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListIPOrganizationAndMapToIPOrganizationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteIPOrganizationAndMapToIPOrganizationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullIPOrganizationAndMapToIPOrganizationModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / IPOrganizationStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_IPOrganizationStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.IPOrganizationStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateIPOrganizationStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateIPOrganizationStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateIPOrganizationStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateIPOrganizationStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListIPOrganizationStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullIPOrganizationStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListIPOrganizationStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteIPOrganizationStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullIPOrganizationStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListIPOrganizationStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteIPOrganizationStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullIPOrganizationStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListIPOrganizationStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteIPOrganizationStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullIPOrganizationStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / PageView
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_PageView_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PageViews;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPageViewModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePageViewEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePageViewModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePageViewModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePageViewModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPageViewAndMapToPageViewModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPageViewAndMapToPageViewModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPageViewAndMapToPageViewModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePageViewAndMapToPageViewModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPageViewAndMapToPageViewModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPageViewAndMapToPageViewModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePageViewAndMapToPageViewModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPageViewAndMapToPageViewModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPageViewAndMapToPageViewModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePageViewAndMapToPageViewModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPageViewAndMapToPageViewModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / PageViewEvent
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_PageViewEvent_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PageViewEvents;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IPageViewEventModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePageViewEventEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePageViewEventModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePageViewEventModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePageViewEventModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPageViewEventAndMapToPageViewEventModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPageViewEventAndMapToPageViewEventModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPageViewEventAndMapToPageViewEventModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePageViewEventAndMapToPageViewEventModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPageViewEventAndMapToPageViewEventModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPageViewEventAndMapToPageViewEventModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePageViewEventAndMapToPageViewEventModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPageViewEventAndMapToPageViewEventModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPageViewEventAndMapToPageViewEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePageViewEventAndMapToPageViewEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPageViewEventAndMapToPageViewEventModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / PageViewStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_PageViewStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PageViewStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePageViewStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePageViewStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePageViewStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePageViewStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPageViewStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPageViewStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPageViewStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePageViewStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPageViewStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPageViewStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePageViewStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPageViewStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPageViewStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePageViewStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPageViewStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / PageViewType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_PageViewType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.PageViewTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreatePageViewTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreatePageViewTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreatePageViewTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreatePageViewTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListPageViewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullPageViewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListPageViewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLitePageViewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullPageViewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListPageViewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLitePageViewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullPageViewTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListPageViewTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLitePageViewTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullPageViewTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / Visit
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_Visit_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Visits;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IVisitModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateVisitEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateVisitModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateVisitModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateVisitModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListVisitAndMapToVisitModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullVisitAndMapToVisitModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListVisitAndMapToVisitModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteVisitAndMapToVisitModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullVisitAndMapToVisitModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListVisitAndMapToVisitModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteVisitAndMapToVisitModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullVisitAndMapToVisitModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListVisitAndMapToVisitModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteVisitAndMapToVisitModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullVisitAndMapToVisitModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / Visitor
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_Visitor_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Visitors;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IVisitorModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateVisitorEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateVisitorModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateVisitorModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateVisitorModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListVisitorAndMapToVisitorModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullVisitorAndMapToVisitorModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListVisitorAndMapToVisitorModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteVisitorAndMapToVisitorModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullVisitorAndMapToVisitorModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListVisitorAndMapToVisitorModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteVisitorAndMapToVisitorModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullVisitorAndMapToVisitorModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListVisitorAndMapToVisitorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteVisitorAndMapToVisitorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullVisitorAndMapToVisitorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Tracking / VisitStatus
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Tracking_VisitStatus_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.VisitStatuses;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IStatusModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateVisitStatusEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateVisitStatusModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateVisitStatusModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateVisitStatusModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListVisitStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullVisitStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListVisitStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteVisitStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullVisitStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListVisitStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteVisitStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullVisitStatusAndMapToStatusModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListVisitStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteVisitStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullVisitStatusAndMapToStatusModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion
        #region Vendors
        #region Vendors / Vendor
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Vendors_Vendor_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.Vendors;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IVendorModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateVendorEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateVendorModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateVendorModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateVendorModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListVendorAndMapToVendorModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullVendorAndMapToVendorModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListVendorAndMapToVendorModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteVendorAndMapToVendorModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullVendorAndMapToVendorModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListVendorAndMapToVendorModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteVendorAndMapToVendorModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullVendorAndMapToVendorModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListVendorAndMapToVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteVendorAndMapToVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullVendorAndMapToVendorModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Vendors / VendorAccount
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Vendors_VendorAccount_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.VendorAccounts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IVendorAccountModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateVendorAccountEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateVendorAccountModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateVendorAccountModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateVendorAccountModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListVendorAccountAndMapToVendorAccountModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullVendorAccountAndMapToVendorAccountModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListVendorAccountAndMapToVendorAccountModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteVendorAccountAndMapToVendorAccountModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullVendorAccountAndMapToVendorAccountModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListVendorAccountAndMapToVendorAccountModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteVendorAccountAndMapToVendorAccountModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullVendorAccountAndMapToVendorAccountModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListVendorAccountAndMapToVendorAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteVendorAccountAndMapToVendorAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullVendorAccountAndMapToVendorAccountModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Vendors / VendorImage
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Vendors_VendorImage_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.VendorImages;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IVendorImageModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateVendorImageEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateVendorImageModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateVendorImageModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateVendorImageModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListVendorImageAndMapToVendorImageModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullVendorImageAndMapToVendorImageModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListVendorImageAndMapToVendorImageModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteVendorImageAndMapToVendorImageModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullVendorImageAndMapToVendorImageModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListVendorImageAndMapToVendorImageModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteVendorImageAndMapToVendorImageModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullVendorImageAndMapToVendorImageModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListVendorImageAndMapToVendorImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteVendorImageAndMapToVendorImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullVendorImageAndMapToVendorImageModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Vendors / VendorImageType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Vendors_VendorImageType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.VendorImageTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateVendorImageTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateVendorImageTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateVendorImageTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateVendorImageTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListVendorImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullVendorImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListVendorImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteVendorImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullVendorImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListVendorImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteVendorImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullVendorImageTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListVendorImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteVendorImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullVendorImageTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Vendors / VendorManufacturer
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Vendors_VendorManufacturer_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.VendorManufacturers;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IVendorManufacturerModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateVendorManufacturerEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateVendorManufacturerModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateVendorManufacturerModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateVendorManufacturerModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListVendorManufacturerAndMapToVendorManufacturerModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullVendorManufacturerAndMapToVendorManufacturerModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListVendorManufacturerAndMapToVendorManufacturerModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteVendorManufacturerAndMapToVendorManufacturerModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullVendorManufacturerAndMapToVendorManufacturerModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListVendorManufacturerAndMapToVendorManufacturerModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteVendorManufacturerAndMapToVendorManufacturerModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullVendorManufacturerAndMapToVendorManufacturerModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListVendorManufacturerAndMapToVendorManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteVendorManufacturerAndMapToVendorManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullVendorManufacturerAndMapToVendorManufacturerModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Vendors / VendorProduct
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Vendors_VendorProduct_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.VendorProducts;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<IVendorProductModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateVendorProductEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateVendorProductModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateVendorProductModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateVendorProductModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListVendorProductAndMapToVendorProductModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullVendorProductAndMapToVendorProductModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListVendorProductAndMapToVendorProductModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteVendorProductAndMapToVendorProductModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullVendorProductAndMapToVendorProductModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListVendorProductAndMapToVendorProductModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteVendorProductAndMapToVendorProductModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullVendorProductAndMapToVendorProductModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListVendorProductAndMapToVendorProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteVendorProductAndMapToVendorProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullVendorProductAndMapToVendorProductModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #region Vendors / VendorType
        private Task Verify_AssigningAndReadingAnyCustomEntityProperties_Vendors_VendorType_Works_Async(
            MockingSetup mockingSetup,
            DateTime timestamp,
            Paging paging,
            Sort[] sort,
            Grouping[] grouping,
            string contextProfileName)
        {
            var mockOfIQueryable = mockingSetup.MockContext.Object.VendorTypes;
            var mockOfEntity = mockOfIQueryable.First();
            var mockOfModel = Mock.Of<ITypeModel>();
            var count = mockOfIQueryable.Count();
            var pages = Math.Ceiling(count / 10m);
            var result00 = mockOfModel.CreateVendorTypeEntity(timestamp, contextProfileName);
            Assert.NotNull(result00);
            var result01 = mockOfEntity.CreateVendorTypeModelFromEntity(MappingMode.List, contextProfileName);
            Assert.NotNull(result01);
            var result02 = mockOfEntity.CreateVendorTypeModelFromEntity(MappingMode.Lite, contextProfileName);
            Assert.NotNull(result02);
            var result03 = mockOfEntity.CreateVendorTypeModelFromEntity(MappingMode.Full, contextProfileName);
            Assert.NotNull(result03);
            var result04 = mockOfIQueryable.SelectFirstListVendorTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result04);
            var result05 = mockOfIQueryable.SelectFirstFullVendorTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result05);
            var result06 = mockOfIQueryable.SelectSingleListVendorTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result06);
            var result07 = mockOfIQueryable.SelectSingleLiteVendorTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result07);
            var result08 = mockOfIQueryable.SelectSingleFullVendorTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result08);
            var result09 = mockOfIQueryable.SelectListVendorTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result09);
            var result10 = mockOfIQueryable.SelectLiteVendorTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result10);
            var result11 = mockOfIQueryable.SelectFullVendorTypeAndMapToTypeModel(contextProfileName);
            Assert.NotNull(result11);
            var (result12a, result12Pages, result12Count) = mockOfIQueryable.SelectListVendorTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result12a);
            Assert.Equal(count, result12Count);
            Assert.Equal(pages, result12Pages);
            var (result13a, result13Pages, result13Count) = mockOfIQueryable.SelectLiteVendorTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result13a);
            Assert.Equal(count, result13Count);
            Assert.Equal(pages, result13Pages);
            var (result14a, result14Pages, result14Count) = mockOfIQueryable.SelectFullVendorTypeAndMapToTypeModel(paging, sort, grouping, contextProfileName);
            Assert.NotNull(result14a);
            Assert.Equal(count, result14Count);
            Assert.Equal(pages, result14Pages);
            return Task.CompletedTask;
        }
        #endregion
        #endregion

        [DebuggerStepThrough]
        private async Task DoSetupAsync(IContainer childContainer, MockingSetup mockingSetup, string contextProfileName)
        {
            await mockingSetup.DoMockingSetupForContextAsync(contextProfileName).ConfigureAwait(false);
            childContainer.Configure(x =>
            {
                x.For<IClarityEcommerceEntities>().Use(() => mockingSetup.MockContext.Object);
                x.AddRegistry(new DataModelTestingRegistry(mockingSetup));
            });
            RegistryLoader.OverrideContainer(childContainer, contextProfileName);
        }
    }
}
