// <autogenerated>
// <copyright file="ModelsPropertyTests.cs" company="clarity-ventures.com">
// Copyright (c) 2021-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Model Property Testing Registry to check property assignments and reads
// and provide additional code coverage of non-auto properties.</summary>
// <remarks>This file was auto-generated by ModelsPropertyTests.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
#nullable enable
#pragma warning disable CS0618, CS0619
// ReSharper disable SuggestVarOrType_Elsewhere, UnusedVariable
namespace Clarity.Ecommerce.Models.Testing
{
    using System;
    using System.Collections.Generic;
    using Interfaces.Models;
    using Xunit;

    [Trait("Category", "Models.ModelCustomProperties")]
    public partial class ModelsPropertyTests
    {
        [Fact, Obsolete]
        public void Verify_AssigningAndReadingAnyCustomEntityProperties_Works()
        {
            #region Arrange
            #region To Assign's
            #region Accounts
            AccountModel accountToAssign = new();
            List<AccountModel> accountCollectionToAssign = new List<AccountModel>();
            AccountAssociationModel accountAssociationToAssign = new();
            List<AccountAssociationModel> accountAssociationCollectionToAssign = new List<AccountAssociationModel>();
            TypeModel accountAssociationTypeToAssign = new();
            List<TypeModel> accountAssociationTypeCollectionToAssign = new List<TypeModel>();
            AccountContactModel accountContactToAssign = new();
            List<AccountContactModel> accountContactCollectionToAssign = new List<AccountContactModel>();
            AccountCurrencyModel accountCurrencyToAssign = new();
            List<AccountCurrencyModel> accountCurrencyCollectionToAssign = new List<AccountCurrencyModel>();
            AccountFileModel accountFileToAssign = new();
            List<AccountFileModel> accountFileCollectionToAssign = new List<AccountFileModel>();
            AccountImageModel accountImageToAssign = new();
            List<AccountImageModel> accountImageCollectionToAssign = new List<AccountImageModel>();
            TypeModel accountImageTypeToAssign = new();
            List<TypeModel> accountImageTypeCollectionToAssign = new List<TypeModel>();
            AccountPricePointModel accountPricePointToAssign = new();
            List<AccountPricePointModel> accountPricePointCollectionToAssign = new List<AccountPricePointModel>();
            AccountProductModel accountProductToAssign = new();
            List<AccountProductModel> accountProductCollectionToAssign = new List<AccountProductModel>();
            TypeModel accountProductTypeToAssign = new();
            List<TypeModel> accountProductTypeCollectionToAssign = new List<TypeModel>();
            StatusModel accountStatusToAssign = new();
            List<StatusModel> accountStatusCollectionToAssign = new List<StatusModel>();
            TypeModel accountTypeToAssign = new();
            List<TypeModel> accountTypeCollectionToAssign = new List<TypeModel>();
            AccountUsageBalanceModel accountUsageBalanceToAssign = new();
            List<AccountUsageBalanceModel> accountUsageBalanceCollectionToAssign = new List<AccountUsageBalanceModel>();
            ContractorModel contractorToAssign = new();
            List<ContractorModel> contractorCollectionToAssign = new List<ContractorModel>();
            ServiceAreaModel serviceAreaToAssign = new();
            List<ServiceAreaModel> serviceAreaCollectionToAssign = new List<ServiceAreaModel>();
            #endregion
            #region Advertising
            AdModel adToAssign = new();
            List<AdModel> adCollectionToAssign = new List<AdModel>();
            AdAccountModel adAccountToAssign = new();
            List<AdAccountModel> adAccountCollectionToAssign = new List<AdAccountModel>();
            AdBrandModel adBrandToAssign = new();
            List<AdBrandModel> adBrandCollectionToAssign = new List<AdBrandModel>();
            AdFranchiseModel adFranchiseToAssign = new();
            List<AdFranchiseModel> adFranchiseCollectionToAssign = new List<AdFranchiseModel>();
            AdImageModel adImageToAssign = new();
            List<AdImageModel> adImageCollectionToAssign = new List<AdImageModel>();
            TypeModel adImageTypeToAssign = new();
            List<TypeModel> adImageTypeCollectionToAssign = new List<TypeModel>();
            StatusModel adStatusToAssign = new();
            List<StatusModel> adStatusCollectionToAssign = new List<StatusModel>();
            AdStoreModel adStoreToAssign = new();
            List<AdStoreModel> adStoreCollectionToAssign = new List<AdStoreModel>();
            TypeModel adTypeToAssign = new();
            List<TypeModel> adTypeCollectionToAssign = new List<TypeModel>();
            AdZoneModel adZoneToAssign = new();
            List<AdZoneModel> adZoneCollectionToAssign = new List<AdZoneModel>();
            AdZoneAccessModel adZoneAccessToAssign = new();
            List<AdZoneAccessModel> adZoneAccessCollectionToAssign = new List<AdZoneAccessModel>();
            ZoneModel zoneToAssign = new();
            List<ZoneModel> zoneCollectionToAssign = new List<ZoneModel>();
            StatusModel zoneStatusToAssign = new();
            List<StatusModel> zoneStatusCollectionToAssign = new List<StatusModel>();
            TypeModel zoneTypeToAssign = new();
            List<TypeModel> zoneTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Attributes
            AttributeGroupModel attributeGroupToAssign = new();
            List<AttributeGroupModel> attributeGroupCollectionToAssign = new List<AttributeGroupModel>();
            AttributeTabModel attributeTabToAssign = new();
            List<AttributeTabModel> attributeTabCollectionToAssign = new List<AttributeTabModel>();
            AttributeTypeModel attributeTypeToAssign = new();
            List<AttributeTypeModel> attributeTypeCollectionToAssign = new List<AttributeTypeModel>();
            GeneralAttributeModel generalAttributeToAssign = new();
            List<GeneralAttributeModel> generalAttributeCollectionToAssign = new List<GeneralAttributeModel>();
            GeneralAttributePredefinedOptionModel generalAttributePredefinedOptionToAssign = new();
            List<GeneralAttributePredefinedOptionModel> generalAttributePredefinedOptionCollectionToAssign = new List<GeneralAttributePredefinedOptionModel>();
            #endregion
            #region Auctions
            AuctionModel auctionToAssign = new();
            List<AuctionModel> auctionCollectionToAssign = new List<AuctionModel>();
            AuctionCategoryModel auctionCategoryToAssign = new();
            List<AuctionCategoryModel> auctionCategoryCollectionToAssign = new List<AuctionCategoryModel>();
            StatusModel auctionStatusToAssign = new();
            List<StatusModel> auctionStatusCollectionToAssign = new List<StatusModel>();
            TypeModel auctionTypeToAssign = new();
            List<TypeModel> auctionTypeCollectionToAssign = new List<TypeModel>();
            BidModel bidToAssign = new();
            List<BidModel> bidCollectionToAssign = new List<BidModel>();
            StatusModel bidStatusToAssign = new();
            List<StatusModel> bidStatusCollectionToAssign = new List<StatusModel>();
            BrandAuctionModel brandAuctionToAssign = new();
            List<BrandAuctionModel> brandAuctionCollectionToAssign = new List<BrandAuctionModel>();
            FranchiseAuctionModel franchiseAuctionToAssign = new();
            List<FranchiseAuctionModel> franchiseAuctionCollectionToAssign = new List<FranchiseAuctionModel>();
            LotModel lotToAssign = new();
            List<LotModel> lotCollectionToAssign = new List<LotModel>();
            LotCategoryModel lotCategoryToAssign = new();
            List<LotCategoryModel> lotCategoryCollectionToAssign = new List<LotCategoryModel>();
            LotGroupModel lotGroupToAssign = new();
            List<LotGroupModel> lotGroupCollectionToAssign = new List<LotGroupModel>();
            StatusModel lotStatusToAssign = new();
            List<StatusModel> lotStatusCollectionToAssign = new List<StatusModel>();
            TypeModel lotTypeToAssign = new();
            List<TypeModel> lotTypeCollectionToAssign = new List<TypeModel>();
            StoreAuctionModel storeAuctionToAssign = new();
            List<StoreAuctionModel> storeAuctionCollectionToAssign = new List<StoreAuctionModel>();
            #endregion
            #region Badges
            BadgeModel badgeToAssign = new();
            List<BadgeModel> badgeCollectionToAssign = new List<BadgeModel>();
            BadgeImageModel badgeImageToAssign = new();
            List<BadgeImageModel> badgeImageCollectionToAssign = new List<BadgeImageModel>();
            TypeModel badgeImageTypeToAssign = new();
            List<TypeModel> badgeImageTypeCollectionToAssign = new List<TypeModel>();
            TypeModel badgeTypeToAssign = new();
            List<TypeModel> badgeTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Brands
            BrandModel brandToAssign = new();
            List<BrandModel> brandCollectionToAssign = new List<BrandModel>();
            BrandAccountModel brandAccountToAssign = new();
            List<BrandAccountModel> brandAccountCollectionToAssign = new List<BrandAccountModel>();
            BrandCategoryModel brandCategoryToAssign = new();
            List<BrandCategoryModel> brandCategoryCollectionToAssign = new List<BrandCategoryModel>();
            BrandCurrencyModel brandCurrencyToAssign = new();
            List<BrandCurrencyModel> brandCurrencyCollectionToAssign = new List<BrandCurrencyModel>();
            BrandFranchiseModel brandFranchiseToAssign = new();
            List<BrandFranchiseModel> brandFranchiseCollectionToAssign = new List<BrandFranchiseModel>();
            BrandImageModel brandImageToAssign = new();
            List<BrandImageModel> brandImageCollectionToAssign = new List<BrandImageModel>();
            TypeModel brandImageTypeToAssign = new();
            List<TypeModel> brandImageTypeCollectionToAssign = new List<TypeModel>();
            BrandInventoryLocationModel brandInventoryLocationToAssign = new();
            List<BrandInventoryLocationModel> brandInventoryLocationCollectionToAssign = new List<BrandInventoryLocationModel>();
            TypeModel brandInventoryLocationTypeToAssign = new();
            List<TypeModel> brandInventoryLocationTypeCollectionToAssign = new List<TypeModel>();
            BrandLanguageModel brandLanguageToAssign = new();
            List<BrandLanguageModel> brandLanguageCollectionToAssign = new List<BrandLanguageModel>();
            BrandManufacturerModel brandManufacturerToAssign = new();
            List<BrandManufacturerModel> brandManufacturerCollectionToAssign = new List<BrandManufacturerModel>();
            BrandProductModel brandProductToAssign = new();
            List<BrandProductModel> brandProductCollectionToAssign = new List<BrandProductModel>();
            BrandSiteDomainModel brandSiteDomainToAssign = new();
            List<BrandSiteDomainModel> brandSiteDomainCollectionToAssign = new List<BrandSiteDomainModel>();
            BrandStoreModel brandStoreToAssign = new();
            List<BrandStoreModel> brandStoreCollectionToAssign = new List<BrandStoreModel>();
            BrandUserModel brandUserToAssign = new();
            List<BrandUserModel> brandUserCollectionToAssign = new List<BrandUserModel>();
            BrandVendorModel brandVendorToAssign = new();
            List<BrandVendorModel> brandVendorCollectionToAssign = new List<BrandVendorModel>();
            #endregion
            #region CalendarEvents
            CalendarEventModel calendarEventToAssign = new();
            List<CalendarEventModel> calendarEventCollectionToAssign = new List<CalendarEventModel>();
            CalendarEventDetailModel calendarEventDetailToAssign = new();
            List<CalendarEventDetailModel> calendarEventDetailCollectionToAssign = new List<CalendarEventDetailModel>();
            CalendarEventFileModel calendarEventFileToAssign = new();
            List<CalendarEventFileModel> calendarEventFileCollectionToAssign = new List<CalendarEventFileModel>();
            CalendarEventImageModel calendarEventImageToAssign = new();
            List<CalendarEventImageModel> calendarEventImageCollectionToAssign = new List<CalendarEventImageModel>();
            TypeModel calendarEventImageTypeToAssign = new();
            List<TypeModel> calendarEventImageTypeCollectionToAssign = new List<TypeModel>();
            CalendarEventProductModel calendarEventProductToAssign = new();
            List<CalendarEventProductModel> calendarEventProductCollectionToAssign = new List<CalendarEventProductModel>();
            StatusModel calendarEventStatusToAssign = new();
            List<StatusModel> calendarEventStatusCollectionToAssign = new List<StatusModel>();
            TypeModel calendarEventTypeToAssign = new();
            List<TypeModel> calendarEventTypeCollectionToAssign = new List<TypeModel>();
            UserEventAttendanceModel userEventAttendanceToAssign = new();
            List<UserEventAttendanceModel> userEventAttendanceCollectionToAssign = new List<UserEventAttendanceModel>();
            TypeModel userEventAttendanceTypeToAssign = new();
            List<TypeModel> userEventAttendanceTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Categories
            CategoryModel categoryToAssign = new();
            List<CategoryModel> categoryCollectionToAssign = new List<CategoryModel>();
            CategoryFileModel categoryFileToAssign = new();
            List<CategoryFileModel> categoryFileCollectionToAssign = new List<CategoryFileModel>();
            CategoryImageModel categoryImageToAssign = new();
            List<CategoryImageModel> categoryImageCollectionToAssign = new List<CategoryImageModel>();
            TypeModel categoryImageTypeToAssign = new();
            List<TypeModel> categoryImageTypeCollectionToAssign = new List<TypeModel>();
            TypeModel categoryTypeToAssign = new();
            List<TypeModel> categoryTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Contacts
            ContactModel contactToAssign = new();
            List<ContactModel> contactCollectionToAssign = new List<ContactModel>();
            ContactImageModel contactImageToAssign = new();
            List<ContactImageModel> contactImageCollectionToAssign = new List<ContactImageModel>();
            TypeModel contactImageTypeToAssign = new();
            List<TypeModel> contactImageTypeCollectionToAssign = new List<TypeModel>();
            TypeModel contactTypeToAssign = new();
            List<TypeModel> contactTypeCollectionToAssign = new List<TypeModel>();
            PermissionModel permissionToAssign = new();
            List<PermissionModel> permissionCollectionToAssign = new List<PermissionModel>();
            ProfanityFilterModel profanityFilterToAssign = new();
            List<ProfanityFilterModel> profanityFilterCollectionToAssign = new List<ProfanityFilterModel>();
            ReferralCodeModel referralCodeToAssign = new();
            List<ReferralCodeModel> referralCodeCollectionToAssign = new List<ReferralCodeModel>();
            StatusModel referralCodeStatusToAssign = new();
            List<StatusModel> referralCodeStatusCollectionToAssign = new List<StatusModel>();
            TypeModel referralCodeTypeToAssign = new();
            List<TypeModel> referralCodeTypeCollectionToAssign = new List<TypeModel>();
            RoleUserModel roleUserToAssign = new();
            List<RoleUserModel> roleUserCollectionToAssign = new List<RoleUserModel>();
            UserModel userToAssign = new();
            List<UserModel> userCollectionToAssign = new List<UserModel>();
            UserFileModel userFileToAssign = new();
            List<UserFileModel> userFileCollectionToAssign = new List<UserFileModel>();
            UserImageModel userImageToAssign = new();
            List<UserImageModel> userImageCollectionToAssign = new List<UserImageModel>();
            TypeModel userImageTypeToAssign = new();
            List<TypeModel> userImageTypeCollectionToAssign = new List<TypeModel>();
            StatusModel userOnlineStatusToAssign = new();
            List<StatusModel> userOnlineStatusCollectionToAssign = new List<StatusModel>();
            UserProductTypeModel userProductTypeToAssign = new();
            List<UserProductTypeModel> userProductTypeCollectionToAssign = new List<UserProductTypeModel>();
            StatusModel userStatusToAssign = new();
            List<StatusModel> userStatusCollectionToAssign = new List<StatusModel>();
            TypeModel userTypeToAssign = new();
            List<TypeModel> userTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Counters
            CounterModel counterToAssign = new();
            List<CounterModel> counterCollectionToAssign = new List<CounterModel>();
            CounterLogModel counterLogToAssign = new();
            List<CounterLogModel> counterLogCollectionToAssign = new List<CounterLogModel>();
            TypeModel counterLogTypeToAssign = new();
            List<TypeModel> counterLogTypeCollectionToAssign = new List<TypeModel>();
            TypeModel counterTypeToAssign = new();
            List<TypeModel> counterTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Currencies
            CurrencyModel currencyToAssign = new();
            List<CurrencyModel> currencyCollectionToAssign = new List<CurrencyModel>();
            CurrencyConversionModel currencyConversionToAssign = new();
            List<CurrencyConversionModel> currencyConversionCollectionToAssign = new List<CurrencyConversionModel>();
            CurrencyImageModel currencyImageToAssign = new();
            List<CurrencyImageModel> currencyImageCollectionToAssign = new List<CurrencyImageModel>();
            TypeModel currencyImageTypeToAssign = new();
            List<TypeModel> currencyImageTypeCollectionToAssign = new List<TypeModel>();
            HistoricalCurrencyRateModel historicalCurrencyRateToAssign = new();
            List<HistoricalCurrencyRateModel> historicalCurrencyRateCollectionToAssign = new List<HistoricalCurrencyRateModel>();
            #endregion
            #region Discounts
            AppliedCartDiscountModel appliedCartDiscountToAssign = new();
            List<AppliedCartDiscountModel> appliedCartDiscountCollectionToAssign = new List<AppliedCartDiscountModel>();
            AppliedCartItemDiscountModel appliedCartItemDiscountToAssign = new();
            List<AppliedCartItemDiscountModel> appliedCartItemDiscountCollectionToAssign = new List<AppliedCartItemDiscountModel>();
            DiscountModel discountToAssign = new();
            List<DiscountModel> discountCollectionToAssign = new List<DiscountModel>();
            DiscountAccountModel discountAccountToAssign = new();
            List<DiscountAccountModel> discountAccountCollectionToAssign = new List<DiscountAccountModel>();
            DiscountAccountTypeModel discountAccountTypeToAssign = new();
            List<DiscountAccountTypeModel> discountAccountTypeCollectionToAssign = new List<DiscountAccountTypeModel>();
            DiscountBrandModel discountBrandToAssign = new();
            List<DiscountBrandModel> discountBrandCollectionToAssign = new List<DiscountBrandModel>();
            DiscountCategoryModel discountCategoryToAssign = new();
            List<DiscountCategoryModel> discountCategoryCollectionToAssign = new List<DiscountCategoryModel>();
            DiscountCodeModel discountCodeToAssign = new();
            List<DiscountCodeModel> discountCodeCollectionToAssign = new List<DiscountCodeModel>();
            DiscountCountryModel discountCountryToAssign = new();
            List<DiscountCountryModel> discountCountryCollectionToAssign = new List<DiscountCountryModel>();
            DiscountFranchiseModel discountFranchiseToAssign = new();
            List<DiscountFranchiseModel> discountFranchiseCollectionToAssign = new List<DiscountFranchiseModel>();
            DiscountManufacturerModel discountManufacturerToAssign = new();
            List<DiscountManufacturerModel> discountManufacturerCollectionToAssign = new List<DiscountManufacturerModel>();
            DiscountProductModel discountProductToAssign = new();
            List<DiscountProductModel> discountProductCollectionToAssign = new List<DiscountProductModel>();
            DiscountProductTypeModel discountProductTypeToAssign = new();
            List<DiscountProductTypeModel> discountProductTypeCollectionToAssign = new List<DiscountProductTypeModel>();
            DiscountShipCarrierMethodModel discountShipCarrierMethodToAssign = new();
            List<DiscountShipCarrierMethodModel> discountShipCarrierMethodCollectionToAssign = new List<DiscountShipCarrierMethodModel>();
            DiscountStoreModel discountStoreToAssign = new();
            List<DiscountStoreModel> discountStoreCollectionToAssign = new List<DiscountStoreModel>();
            DiscountUserModel discountUserToAssign = new();
            List<DiscountUserModel> discountUserCollectionToAssign = new List<DiscountUserModel>();
            DiscountUserRoleModel discountUserRoleToAssign = new();
            List<DiscountUserRoleModel> discountUserRoleCollectionToAssign = new List<DiscountUserRoleModel>();
            DiscountVendorModel discountVendorToAssign = new();
            List<DiscountVendorModel> discountVendorCollectionToAssign = new List<DiscountVendorModel>();
            AppliedPurchaseOrderDiscountModel appliedPurchaseOrderDiscountToAssign = new();
            List<AppliedPurchaseOrderDiscountModel> appliedPurchaseOrderDiscountCollectionToAssign = new List<AppliedPurchaseOrderDiscountModel>();
            AppliedPurchaseOrderItemDiscountModel appliedPurchaseOrderItemDiscountToAssign = new();
            List<AppliedPurchaseOrderItemDiscountModel> appliedPurchaseOrderItemDiscountCollectionToAssign = new List<AppliedPurchaseOrderItemDiscountModel>();
            AppliedSalesInvoiceDiscountModel appliedSalesInvoiceDiscountToAssign = new();
            List<AppliedSalesInvoiceDiscountModel> appliedSalesInvoiceDiscountCollectionToAssign = new List<AppliedSalesInvoiceDiscountModel>();
            AppliedSalesInvoiceItemDiscountModel appliedSalesInvoiceItemDiscountToAssign = new();
            List<AppliedSalesInvoiceItemDiscountModel> appliedSalesInvoiceItemDiscountCollectionToAssign = new List<AppliedSalesInvoiceItemDiscountModel>();
            AppliedSalesOrderDiscountModel appliedSalesOrderDiscountToAssign = new();
            List<AppliedSalesOrderDiscountModel> appliedSalesOrderDiscountCollectionToAssign = new List<AppliedSalesOrderDiscountModel>();
            AppliedSalesOrderItemDiscountModel appliedSalesOrderItemDiscountToAssign = new();
            List<AppliedSalesOrderItemDiscountModel> appliedSalesOrderItemDiscountCollectionToAssign = new List<AppliedSalesOrderItemDiscountModel>();
            AppliedSalesQuoteDiscountModel appliedSalesQuoteDiscountToAssign = new();
            List<AppliedSalesQuoteDiscountModel> appliedSalesQuoteDiscountCollectionToAssign = new List<AppliedSalesQuoteDiscountModel>();
            AppliedSalesQuoteItemDiscountModel appliedSalesQuoteItemDiscountToAssign = new();
            List<AppliedSalesQuoteItemDiscountModel> appliedSalesQuoteItemDiscountCollectionToAssign = new List<AppliedSalesQuoteItemDiscountModel>();
            AppliedSalesReturnDiscountModel appliedSalesReturnDiscountToAssign = new();
            List<AppliedSalesReturnDiscountModel> appliedSalesReturnDiscountCollectionToAssign = new List<AppliedSalesReturnDiscountModel>();
            AppliedSalesReturnItemDiscountModel appliedSalesReturnItemDiscountToAssign = new();
            List<AppliedSalesReturnItemDiscountModel> appliedSalesReturnItemDiscountCollectionToAssign = new List<AppliedSalesReturnItemDiscountModel>();
            AppliedSampleRequestDiscountModel appliedSampleRequestDiscountToAssign = new();
            List<AppliedSampleRequestDiscountModel> appliedSampleRequestDiscountCollectionToAssign = new List<AppliedSampleRequestDiscountModel>();
            AppliedSampleRequestItemDiscountModel appliedSampleRequestItemDiscountToAssign = new();
            List<AppliedSampleRequestItemDiscountModel> appliedSampleRequestItemDiscountCollectionToAssign = new List<AppliedSampleRequestItemDiscountModel>();
            #endregion
            #region Favorites
            FavoriteCategoryModel favoriteCategoryToAssign = new();
            List<FavoriteCategoryModel> favoriteCategoryCollectionToAssign = new List<FavoriteCategoryModel>();
            FavoriteManufacturerModel favoriteManufacturerToAssign = new();
            List<FavoriteManufacturerModel> favoriteManufacturerCollectionToAssign = new List<FavoriteManufacturerModel>();
            FavoriteShipCarrierModel favoriteShipCarrierToAssign = new();
            List<FavoriteShipCarrierModel> favoriteShipCarrierCollectionToAssign = new List<FavoriteShipCarrierModel>();
            FavoriteStoreModel favoriteStoreToAssign = new();
            List<FavoriteStoreModel> favoriteStoreCollectionToAssign = new List<FavoriteStoreModel>();
            FavoriteVendorModel favoriteVendorToAssign = new();
            List<FavoriteVendorModel> favoriteVendorCollectionToAssign = new List<FavoriteVendorModel>();
            #endregion
            #region Franchises
            FranchiseModel franchiseToAssign = new();
            List<FranchiseModel> franchiseCollectionToAssign = new List<FranchiseModel>();
            FranchiseAccountModel franchiseAccountToAssign = new();
            List<FranchiseAccountModel> franchiseAccountCollectionToAssign = new List<FranchiseAccountModel>();
            FranchiseCategoryModel franchiseCategoryToAssign = new();
            List<FranchiseCategoryModel> franchiseCategoryCollectionToAssign = new List<FranchiseCategoryModel>();
            FranchiseCountryModel franchiseCountryToAssign = new();
            List<FranchiseCountryModel> franchiseCountryCollectionToAssign = new List<FranchiseCountryModel>();
            FranchiseCurrencyModel franchiseCurrencyToAssign = new();
            List<FranchiseCurrencyModel> franchiseCurrencyCollectionToAssign = new List<FranchiseCurrencyModel>();
            FranchiseDistrictModel franchiseDistrictToAssign = new();
            List<FranchiseDistrictModel> franchiseDistrictCollectionToAssign = new List<FranchiseDistrictModel>();
            FranchiseImageModel franchiseImageToAssign = new();
            List<FranchiseImageModel> franchiseImageCollectionToAssign = new List<FranchiseImageModel>();
            TypeModel franchiseImageTypeToAssign = new();
            List<TypeModel> franchiseImageTypeCollectionToAssign = new List<TypeModel>();
            FranchiseInventoryLocationModel franchiseInventoryLocationToAssign = new();
            List<FranchiseInventoryLocationModel> franchiseInventoryLocationCollectionToAssign = new List<FranchiseInventoryLocationModel>();
            TypeModel franchiseInventoryLocationTypeToAssign = new();
            List<TypeModel> franchiseInventoryLocationTypeCollectionToAssign = new List<TypeModel>();
            FranchiseLanguageModel franchiseLanguageToAssign = new();
            List<FranchiseLanguageModel> franchiseLanguageCollectionToAssign = new List<FranchiseLanguageModel>();
            FranchiseManufacturerModel franchiseManufacturerToAssign = new();
            List<FranchiseManufacturerModel> franchiseManufacturerCollectionToAssign = new List<FranchiseManufacturerModel>();
            FranchiseProductModel franchiseProductToAssign = new();
            List<FranchiseProductModel> franchiseProductCollectionToAssign = new List<FranchiseProductModel>();
            FranchiseRegionModel franchiseRegionToAssign = new();
            List<FranchiseRegionModel> franchiseRegionCollectionToAssign = new List<FranchiseRegionModel>();
            FranchiseSiteDomainModel franchiseSiteDomainToAssign = new();
            List<FranchiseSiteDomainModel> franchiseSiteDomainCollectionToAssign = new List<FranchiseSiteDomainModel>();
            FranchiseStoreModel franchiseStoreToAssign = new();
            List<FranchiseStoreModel> franchiseStoreCollectionToAssign = new List<FranchiseStoreModel>();
            TypeModel franchiseTypeToAssign = new();
            List<TypeModel> franchiseTypeCollectionToAssign = new List<TypeModel>();
            FranchiseUserModel franchiseUserToAssign = new();
            List<FranchiseUserModel> franchiseUserCollectionToAssign = new List<FranchiseUserModel>();
            FranchiseVendorModel franchiseVendorToAssign = new();
            List<FranchiseVendorModel> franchiseVendorCollectionToAssign = new List<FranchiseVendorModel>();
            #endregion
            #region Geography
            AddressModel addressToAssign = new();
            List<AddressModel> addressCollectionToAssign = new List<AddressModel>();
            CountryModel countryToAssign = new();
            List<CountryModel> countryCollectionToAssign = new List<CountryModel>();
            CountryCurrencyModel countryCurrencyToAssign = new();
            List<CountryCurrencyModel> countryCurrencyCollectionToAssign = new List<CountryCurrencyModel>();
            CountryImageModel countryImageToAssign = new();
            List<CountryImageModel> countryImageCollectionToAssign = new List<CountryImageModel>();
            TypeModel countryImageTypeToAssign = new();
            List<TypeModel> countryImageTypeCollectionToAssign = new List<TypeModel>();
            CountryLanguageModel countryLanguageToAssign = new();
            List<CountryLanguageModel> countryLanguageCollectionToAssign = new List<CountryLanguageModel>();
            DistrictModel districtToAssign = new();
            List<DistrictModel> districtCollectionToAssign = new List<DistrictModel>();
            DistrictCurrencyModel districtCurrencyToAssign = new();
            List<DistrictCurrencyModel> districtCurrencyCollectionToAssign = new List<DistrictCurrencyModel>();
            DistrictImageModel districtImageToAssign = new();
            List<DistrictImageModel> districtImageCollectionToAssign = new List<DistrictImageModel>();
            TypeModel districtImageTypeToAssign = new();
            List<TypeModel> districtImageTypeCollectionToAssign = new List<TypeModel>();
            DistrictLanguageModel districtLanguageToAssign = new();
            List<DistrictLanguageModel> districtLanguageCollectionToAssign = new List<DistrictLanguageModel>();
            HistoricalAddressValidationModel historicalAddressValidationToAssign = new();
            List<HistoricalAddressValidationModel> historicalAddressValidationCollectionToAssign = new List<HistoricalAddressValidationModel>();
            PhonePrefixLookupModel phonePrefixLookupToAssign = new();
            List<PhonePrefixLookupModel> phonePrefixLookupCollectionToAssign = new List<PhonePrefixLookupModel>();
            RegionModel regionToAssign = new();
            List<RegionModel> regionCollectionToAssign = new List<RegionModel>();
            RegionCurrencyModel regionCurrencyToAssign = new();
            List<RegionCurrencyModel> regionCurrencyCollectionToAssign = new List<RegionCurrencyModel>();
            RegionImageModel regionImageToAssign = new();
            List<RegionImageModel> regionImageCollectionToAssign = new List<RegionImageModel>();
            TypeModel regionImageTypeToAssign = new();
            List<TypeModel> regionImageTypeCollectionToAssign = new List<TypeModel>();
            RegionLanguageModel regionLanguageToAssign = new();
            List<RegionLanguageModel> regionLanguageCollectionToAssign = new List<RegionLanguageModel>();
            ZipCodeModel zipCodeToAssign = new();
            List<ZipCodeModel> zipCodeCollectionToAssign = new List<ZipCodeModel>();
            #endregion
            #region Globalization
            LanguageModel languageToAssign = new();
            List<LanguageModel> languageCollectionToAssign = new List<LanguageModel>();
            LanguageImageModel languageImageToAssign = new();
            List<LanguageImageModel> languageImageCollectionToAssign = new List<LanguageImageModel>();
            TypeModel languageImageTypeToAssign = new();
            List<TypeModel> languageImageTypeCollectionToAssign = new List<TypeModel>();
            UiKeyModel uiKeyToAssign = new();
            List<UiKeyModel> uiKeyCollectionToAssign = new List<UiKeyModel>();
            UiTranslationModel uiTranslationToAssign = new();
            List<UiTranslationModel> uiTranslationCollectionToAssign = new List<UiTranslationModel>();
            #endregion
            #region Groups
            GroupModel groupToAssign = new();
            List<GroupModel> groupCollectionToAssign = new List<GroupModel>();
            StatusModel groupStatusToAssign = new();
            List<StatusModel> groupStatusCollectionToAssign = new List<StatusModel>();
            TypeModel groupTypeToAssign = new();
            List<TypeModel> groupTypeCollectionToAssign = new List<TypeModel>();
            GroupUserModel groupUserToAssign = new();
            List<GroupUserModel> groupUserCollectionToAssign = new List<GroupUserModel>();
            #endregion
            #region Hangfire
            ScheduledJobConfigurationModel scheduledJobConfigurationToAssign = new();
            List<ScheduledJobConfigurationModel> scheduledJobConfigurationCollectionToAssign = new List<ScheduledJobConfigurationModel>();
            ScheduledJobConfigurationSettingModel scheduledJobConfigurationSettingToAssign = new();
            List<ScheduledJobConfigurationSettingModel> scheduledJobConfigurationSettingCollectionToAssign = new List<ScheduledJobConfigurationSettingModel>();
            StateModel hangfireStateToAssign = new();
            List<StateModel> hangfireStateCollectionToAssign = new List<StateModel>();
            #endregion
            #region Inventory
            InventoryLocationModel inventoryLocationToAssign = new();
            List<InventoryLocationModel> inventoryLocationCollectionToAssign = new List<InventoryLocationModel>();
            InventoryLocationRegionModel inventoryLocationRegionToAssign = new();
            List<InventoryLocationRegionModel> inventoryLocationRegionCollectionToAssign = new List<InventoryLocationRegionModel>();
            InventoryLocationSectionModel inventoryLocationSectionToAssign = new();
            List<InventoryLocationSectionModel> inventoryLocationSectionCollectionToAssign = new List<InventoryLocationSectionModel>();
            InventoryLocationUserModel inventoryLocationUserToAssign = new();
            List<InventoryLocationUserModel> inventoryLocationUserCollectionToAssign = new List<InventoryLocationUserModel>();
            #endregion
            #region Invoicing
            SalesInvoiceModel salesInvoiceToAssign = new();
            List<SalesInvoiceModel> salesInvoiceCollectionToAssign = new List<SalesInvoiceModel>();
            SalesInvoiceContactModel salesInvoiceContactToAssign = new();
            List<SalesInvoiceContactModel> salesInvoiceContactCollectionToAssign = new List<SalesInvoiceContactModel>();
            SalesInvoiceEventModel salesInvoiceEventToAssign = new();
            List<SalesInvoiceEventModel> salesInvoiceEventCollectionToAssign = new List<SalesInvoiceEventModel>();
            TypeModel salesInvoiceEventTypeToAssign = new();
            List<TypeModel> salesInvoiceEventTypeCollectionToAssign = new List<TypeModel>();
            SalesInvoiceFileModel salesInvoiceFileToAssign = new();
            List<SalesInvoiceFileModel> salesInvoiceFileCollectionToAssign = new List<SalesInvoiceFileModel>();
            SalesItemBaseModel salesInvoiceItemToAssign = new();
            List<SalesItemBaseModel> salesInvoiceItemCollectionToAssign = new List<SalesItemBaseModel>();
            SalesItemTargetBaseModel salesInvoiceItemTargetToAssign = new();
            List<SalesItemTargetBaseModel> salesInvoiceItemTargetCollectionToAssign = new List<SalesItemTargetBaseModel>();
            StateModel salesInvoiceStateToAssign = new();
            List<StateModel> salesInvoiceStateCollectionToAssign = new List<StateModel>();
            StatusModel salesInvoiceStatusToAssign = new();
            List<StatusModel> salesInvoiceStatusCollectionToAssign = new List<StatusModel>();
            TypeModel salesInvoiceTypeToAssign = new();
            List<TypeModel> salesInvoiceTypeCollectionToAssign = new List<TypeModel>();
            SalesOrderSalesInvoiceModel salesOrderSalesInvoiceToAssign = new();
            List<SalesOrderSalesInvoiceModel> salesOrderSalesInvoiceCollectionToAssign = new List<SalesOrderSalesInvoiceModel>();
            #endregion
            #region Manufacturers
            ManufacturerModel manufacturerToAssign = new();
            List<ManufacturerModel> manufacturerCollectionToAssign = new List<ManufacturerModel>();
            ManufacturerImageModel manufacturerImageToAssign = new();
            List<ManufacturerImageModel> manufacturerImageCollectionToAssign = new List<ManufacturerImageModel>();
            TypeModel manufacturerImageTypeToAssign = new();
            List<TypeModel> manufacturerImageTypeCollectionToAssign = new List<TypeModel>();
            ManufacturerProductModel manufacturerProductToAssign = new();
            List<ManufacturerProductModel> manufacturerProductCollectionToAssign = new List<ManufacturerProductModel>();
            TypeModel manufacturerTypeToAssign = new();
            List<TypeModel> manufacturerTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Media
            StoredFileModel storedFileToAssign = new();
            List<StoredFileModel> storedFileCollectionToAssign = new List<StoredFileModel>();
            #endregion
            #region Messaging
            ConversationModel conversationToAssign = new();
            List<ConversationModel> conversationCollectionToAssign = new List<ConversationModel>();
            ConversationUserModel conversationUserToAssign = new();
            List<ConversationUserModel> conversationUserCollectionToAssign = new List<ConversationUserModel>();
            EmailQueueModel emailQueueToAssign = new();
            List<EmailQueueModel> emailQueueCollectionToAssign = new List<EmailQueueModel>();
            EmailQueueAttachmentModel emailQueueAttachmentToAssign = new();
            List<EmailQueueAttachmentModel> emailQueueAttachmentCollectionToAssign = new List<EmailQueueAttachmentModel>();
            StatusModel emailStatusToAssign = new();
            List<StatusModel> emailStatusCollectionToAssign = new List<StatusModel>();
            EmailTemplateModel emailTemplateToAssign = new();
            List<EmailTemplateModel> emailTemplateCollectionToAssign = new List<EmailTemplateModel>();
            TypeModel emailTypeToAssign = new();
            List<TypeModel> emailTypeCollectionToAssign = new List<TypeModel>();
            MessageModel messageToAssign = new();
            List<MessageModel> messageCollectionToAssign = new List<MessageModel>();
            MessageAttachmentModel messageAttachmentToAssign = new();
            List<MessageAttachmentModel> messageAttachmentCollectionToAssign = new List<MessageAttachmentModel>();
            MessageRecipientModel messageRecipientToAssign = new();
            List<MessageRecipientModel> messageRecipientCollectionToAssign = new List<MessageRecipientModel>();
            ProductNotificationModel productNotificationToAssign = new();
            List<ProductNotificationModel> productNotificationCollectionToAssign = new List<ProductNotificationModel>();
            #endregion
            #region Ordering
            SalesOrderModel salesOrderToAssign = new();
            List<SalesOrderModel> salesOrderCollectionToAssign = new List<SalesOrderModel>();
            SalesOrderContactModel salesOrderContactToAssign = new();
            List<SalesOrderContactModel> salesOrderContactCollectionToAssign = new List<SalesOrderContactModel>();
            SalesOrderEventModel salesOrderEventToAssign = new();
            List<SalesOrderEventModel> salesOrderEventCollectionToAssign = new List<SalesOrderEventModel>();
            TypeModel salesOrderEventTypeToAssign = new();
            List<TypeModel> salesOrderEventTypeCollectionToAssign = new List<TypeModel>();
            SalesOrderFileModel salesOrderFileToAssign = new();
            List<SalesOrderFileModel> salesOrderFileCollectionToAssign = new List<SalesOrderFileModel>();
            SalesItemBaseModel salesOrderItemToAssign = new();
            List<SalesItemBaseModel> salesOrderItemCollectionToAssign = new List<SalesItemBaseModel>();
            SalesItemTargetBaseModel salesOrderItemTargetToAssign = new();
            List<SalesItemTargetBaseModel> salesOrderItemTargetCollectionToAssign = new List<SalesItemTargetBaseModel>();
            StateModel salesOrderStateToAssign = new();
            List<StateModel> salesOrderStateCollectionToAssign = new List<StateModel>();
            StatusModel salesOrderStatusToAssign = new();
            List<StatusModel> salesOrderStatusCollectionToAssign = new List<StatusModel>();
            TypeModel salesOrderTypeToAssign = new();
            List<TypeModel> salesOrderTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Payments
            MembershipModel membershipToAssign = new();
            List<MembershipModel> membershipCollectionToAssign = new List<MembershipModel>();
            MembershipAdZoneAccessModel membershipAdZoneAccessToAssign = new();
            List<MembershipAdZoneAccessModel> membershipAdZoneAccessCollectionToAssign = new List<MembershipAdZoneAccessModel>();
            MembershipAdZoneAccessByLevelModel membershipAdZoneAccessByLevelToAssign = new();
            List<MembershipAdZoneAccessByLevelModel> membershipAdZoneAccessByLevelCollectionToAssign = new List<MembershipAdZoneAccessByLevelModel>();
            MembershipLevelModel membershipLevelToAssign = new();
            List<MembershipLevelModel> membershipLevelCollectionToAssign = new List<MembershipLevelModel>();
            MembershipRepeatTypeModel membershipRepeatTypeToAssign = new();
            List<MembershipRepeatTypeModel> membershipRepeatTypeCollectionToAssign = new List<MembershipRepeatTypeModel>();
            PaymentModel paymentToAssign = new();
            List<PaymentModel> paymentCollectionToAssign = new List<PaymentModel>();
            PaymentMethodModel paymentMethodToAssign = new();
            List<PaymentMethodModel> paymentMethodCollectionToAssign = new List<PaymentMethodModel>();
            StatusModel paymentStatusToAssign = new();
            List<StatusModel> paymentStatusCollectionToAssign = new List<StatusModel>();
            TypeModel paymentTypeToAssign = new();
            List<TypeModel> paymentTypeCollectionToAssign = new List<TypeModel>();
            RepeatTypeModel repeatTypeToAssign = new();
            List<RepeatTypeModel> repeatTypeCollectionToAssign = new List<RepeatTypeModel>();
            SalesInvoicePaymentModel salesInvoicePaymentToAssign = new();
            List<SalesInvoicePaymentModel> salesInvoicePaymentCollectionToAssign = new List<SalesInvoicePaymentModel>();
            SalesOrderPaymentModel salesOrderPaymentToAssign = new();
            List<SalesOrderPaymentModel> salesOrderPaymentCollectionToAssign = new List<SalesOrderPaymentModel>();
            SalesReturnPaymentModel salesReturnPaymentToAssign = new();
            List<SalesReturnPaymentModel> salesReturnPaymentCollectionToAssign = new List<SalesReturnPaymentModel>();
            SubscriptionModel subscriptionToAssign = new();
            List<SubscriptionModel> subscriptionCollectionToAssign = new List<SubscriptionModel>();
            SubscriptionHistoryModel subscriptionHistoryToAssign = new();
            List<SubscriptionHistoryModel> subscriptionHistoryCollectionToAssign = new List<SubscriptionHistoryModel>();
            StatusModel subscriptionStatusToAssign = new();
            List<StatusModel> subscriptionStatusCollectionToAssign = new List<StatusModel>();
            SubscriptionTypeModel subscriptionTypeToAssign = new();
            List<SubscriptionTypeModel> subscriptionTypeCollectionToAssign = new List<SubscriptionTypeModel>();
            SubscriptionTypeRepeatTypeModel subscriptionTypeRepeatTypeToAssign = new();
            List<SubscriptionTypeRepeatTypeModel> subscriptionTypeRepeatTypeCollectionToAssign = new List<SubscriptionTypeRepeatTypeModel>();
            WalletModel walletToAssign = new();
            List<WalletModel> walletCollectionToAssign = new List<WalletModel>();
            #endregion
            #region Pricing
            PricePointModel pricePointToAssign = new();
            List<PricePointModel> pricePointCollectionToAssign = new List<PricePointModel>();
            PriceRoundingModel priceRoundingToAssign = new();
            List<PriceRoundingModel> priceRoundingCollectionToAssign = new List<PriceRoundingModel>();
            PriceRuleModel priceRuleToAssign = new();
            List<PriceRuleModel> priceRuleCollectionToAssign = new List<PriceRuleModel>();
            PriceRuleAccountModel priceRuleAccountToAssign = new();
            List<PriceRuleAccountModel> priceRuleAccountCollectionToAssign = new List<PriceRuleAccountModel>();
            PriceRuleAccountTypeModel priceRuleAccountTypeToAssign = new();
            List<PriceRuleAccountTypeModel> priceRuleAccountTypeCollectionToAssign = new List<PriceRuleAccountTypeModel>();
            PriceRuleBrandModel priceRuleBrandToAssign = new();
            List<PriceRuleBrandModel> priceRuleBrandCollectionToAssign = new List<PriceRuleBrandModel>();
            PriceRuleCategoryModel priceRuleCategoryToAssign = new();
            List<PriceRuleCategoryModel> priceRuleCategoryCollectionToAssign = new List<PriceRuleCategoryModel>();
            PriceRuleCountryModel priceRuleCountryToAssign = new();
            List<PriceRuleCountryModel> priceRuleCountryCollectionToAssign = new List<PriceRuleCountryModel>();
            PriceRuleFranchiseModel priceRuleFranchiseToAssign = new();
            List<PriceRuleFranchiseModel> priceRuleFranchiseCollectionToAssign = new List<PriceRuleFranchiseModel>();
            PriceRuleManufacturerModel priceRuleManufacturerToAssign = new();
            List<PriceRuleManufacturerModel> priceRuleManufacturerCollectionToAssign = new List<PriceRuleManufacturerModel>();
            PriceRuleProductModel priceRuleProductToAssign = new();
            List<PriceRuleProductModel> priceRuleProductCollectionToAssign = new List<PriceRuleProductModel>();
            PriceRuleProductTypeModel priceRuleProductTypeToAssign = new();
            List<PriceRuleProductTypeModel> priceRuleProductTypeCollectionToAssign = new List<PriceRuleProductTypeModel>();
            PriceRuleStoreModel priceRuleStoreToAssign = new();
            List<PriceRuleStoreModel> priceRuleStoreCollectionToAssign = new List<PriceRuleStoreModel>();
            PriceRuleUserRoleModel priceRuleUserRoleToAssign = new();
            List<PriceRuleUserRoleModel> priceRuleUserRoleCollectionToAssign = new List<PriceRuleUserRoleModel>();
            PriceRuleVendorModel priceRuleVendorToAssign = new();
            List<PriceRuleVendorModel> priceRuleVendorCollectionToAssign = new List<PriceRuleVendorModel>();
            #endregion
            #region Products
            FutureImportModel futureImportToAssign = new();
            List<FutureImportModel> futureImportCollectionToAssign = new List<FutureImportModel>();
            StatusModel futureImportStatusToAssign = new();
            List<StatusModel> futureImportStatusCollectionToAssign = new List<StatusModel>();
            ProductModel productToAssign = new();
            List<ProductModel> productCollectionToAssign = new List<ProductModel>();
            ProductAssociationModel productAssociationToAssign = new();
            List<ProductAssociationModel> productAssociationCollectionToAssign = new List<ProductAssociationModel>();
            TypeModel productAssociationTypeToAssign = new();
            List<TypeModel> productAssociationTypeCollectionToAssign = new List<TypeModel>();
            ProductCategoryModel productCategoryToAssign = new();
            List<ProductCategoryModel> productCategoryCollectionToAssign = new List<ProductCategoryModel>();
            ProductDownloadModel productDownloadToAssign = new();
            List<ProductDownloadModel> productDownloadCollectionToAssign = new List<ProductDownloadModel>();
            TypeModel productDownloadTypeToAssign = new();
            List<TypeModel> productDownloadTypeCollectionToAssign = new List<TypeModel>();
            ProductFileModel productFileToAssign = new();
            List<ProductFileModel> productFileCollectionToAssign = new List<ProductFileModel>();
            ProductImageModel productImageToAssign = new();
            List<ProductImageModel> productImageCollectionToAssign = new List<ProductImageModel>();
            TypeModel productImageTypeToAssign = new();
            List<TypeModel> productImageTypeCollectionToAssign = new List<TypeModel>();
            ProductInventoryLocationSectionModel productInventoryLocationSectionToAssign = new();
            List<ProductInventoryLocationSectionModel> productInventoryLocationSectionCollectionToAssign = new List<ProductInventoryLocationSectionModel>();
            ProductMembershipLevelModel productMembershipLevelToAssign = new();
            List<ProductMembershipLevelModel> productMembershipLevelCollectionToAssign = new List<ProductMembershipLevelModel>();
            ProductPricePointModel productPricePointToAssign = new();
            List<ProductPricePointModel> productPricePointCollectionToAssign = new List<ProductPricePointModel>();
            ProductRestrictionModel productRestrictionToAssign = new();
            List<ProductRestrictionModel> productRestrictionCollectionToAssign = new List<ProductRestrictionModel>();
            ProductShipCarrierMethodModel productShipCarrierMethodToAssign = new();
            List<ProductShipCarrierMethodModel> productShipCarrierMethodCollectionToAssign = new List<ProductShipCarrierMethodModel>();
            StatusModel productStatusToAssign = new();
            List<StatusModel> productStatusCollectionToAssign = new List<StatusModel>();
            ProductSubscriptionTypeModel productSubscriptionTypeToAssign = new();
            List<ProductSubscriptionTypeModel> productSubscriptionTypeCollectionToAssign = new List<ProductSubscriptionTypeModel>();
            TypeModel productTypeToAssign = new();
            List<TypeModel> productTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Purchasing
            PurchaseOrderModel purchaseOrderToAssign = new();
            List<PurchaseOrderModel> purchaseOrderCollectionToAssign = new List<PurchaseOrderModel>();
            PurchaseOrderContactModel purchaseOrderContactToAssign = new();
            List<PurchaseOrderContactModel> purchaseOrderContactCollectionToAssign = new List<PurchaseOrderContactModel>();
            PurchaseOrderEventModel purchaseOrderEventToAssign = new();
            List<PurchaseOrderEventModel> purchaseOrderEventCollectionToAssign = new List<PurchaseOrderEventModel>();
            TypeModel purchaseOrderEventTypeToAssign = new();
            List<TypeModel> purchaseOrderEventTypeCollectionToAssign = new List<TypeModel>();
            PurchaseOrderFileModel purchaseOrderFileToAssign = new();
            List<PurchaseOrderFileModel> purchaseOrderFileCollectionToAssign = new List<PurchaseOrderFileModel>();
            SalesItemBaseModel purchaseOrderItemToAssign = new();
            List<SalesItemBaseModel> purchaseOrderItemCollectionToAssign = new List<SalesItemBaseModel>();
            SalesItemTargetBaseModel purchaseOrderItemTargetToAssign = new();
            List<SalesItemTargetBaseModel> purchaseOrderItemTargetCollectionToAssign = new List<SalesItemTargetBaseModel>();
            StateModel purchaseOrderStateToAssign = new();
            List<StateModel> purchaseOrderStateCollectionToAssign = new List<StateModel>();
            StatusModel purchaseOrderStatusToAssign = new();
            List<StatusModel> purchaseOrderStatusCollectionToAssign = new List<StatusModel>();
            TypeModel purchaseOrderTypeToAssign = new();
            List<TypeModel> purchaseOrderTypeCollectionToAssign = new List<TypeModel>();
            SalesOrderPurchaseOrderModel salesOrderPurchaseOrderToAssign = new();
            List<SalesOrderPurchaseOrderModel> salesOrderPurchaseOrderCollectionToAssign = new List<SalesOrderPurchaseOrderModel>();
            #endregion
            #region Questionnaire
            AnswerModel answerToAssign = new();
            List<AnswerModel> answerCollectionToAssign = new List<AnswerModel>();
            QuestionModel questionToAssign = new();
            List<QuestionModel> questionCollectionToAssign = new List<QuestionModel>();
            QuestionOptionModel questionOptionToAssign = new();
            List<QuestionOptionModel> questionOptionCollectionToAssign = new List<QuestionOptionModel>();
            TypeModel questionTypeToAssign = new();
            List<TypeModel> questionTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Quoting
            SalesQuoteModel salesQuoteToAssign = new();
            List<SalesQuoteModel> salesQuoteCollectionToAssign = new List<SalesQuoteModel>();
            SalesQuoteCategoryModel salesQuoteCategoryToAssign = new();
            List<SalesQuoteCategoryModel> salesQuoteCategoryCollectionToAssign = new List<SalesQuoteCategoryModel>();
            SalesQuoteContactModel salesQuoteContactToAssign = new();
            List<SalesQuoteContactModel> salesQuoteContactCollectionToAssign = new List<SalesQuoteContactModel>();
            SalesQuoteEventModel salesQuoteEventToAssign = new();
            List<SalesQuoteEventModel> salesQuoteEventCollectionToAssign = new List<SalesQuoteEventModel>();
            TypeModel salesQuoteEventTypeToAssign = new();
            List<TypeModel> salesQuoteEventTypeCollectionToAssign = new List<TypeModel>();
            SalesQuoteFileModel salesQuoteFileToAssign = new();
            List<SalesQuoteFileModel> salesQuoteFileCollectionToAssign = new List<SalesQuoteFileModel>();
            SalesItemBaseModel salesQuoteItemToAssign = new();
            List<SalesItemBaseModel> salesQuoteItemCollectionToAssign = new List<SalesItemBaseModel>();
            SalesItemTargetBaseModel salesQuoteItemTargetToAssign = new();
            List<SalesItemTargetBaseModel> salesQuoteItemTargetCollectionToAssign = new List<SalesItemTargetBaseModel>();
            SalesQuoteSalesOrderModel salesQuoteSalesOrderToAssign = new();
            List<SalesQuoteSalesOrderModel> salesQuoteSalesOrderCollectionToAssign = new List<SalesQuoteSalesOrderModel>();
            StateModel salesQuoteStateToAssign = new();
            List<StateModel> salesQuoteStateCollectionToAssign = new List<StateModel>();
            StatusModel salesQuoteStatusToAssign = new();
            List<StatusModel> salesQuoteStatusCollectionToAssign = new List<StatusModel>();
            TypeModel salesQuoteTypeToAssign = new();
            List<TypeModel> salesQuoteTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Reporting
            ReportTypeModel reportTypeToAssign = new();
            List<ReportTypeModel> reportTypeCollectionToAssign = new List<ReportTypeModel>();
            #endregion
            #region Returning
            SalesReturnModel salesReturnToAssign = new();
            List<SalesReturnModel> salesReturnCollectionToAssign = new List<SalesReturnModel>();
            SalesReturnContactModel salesReturnContactToAssign = new();
            List<SalesReturnContactModel> salesReturnContactCollectionToAssign = new List<SalesReturnContactModel>();
            SalesReturnEventModel salesReturnEventToAssign = new();
            List<SalesReturnEventModel> salesReturnEventCollectionToAssign = new List<SalesReturnEventModel>();
            TypeModel salesReturnEventTypeToAssign = new();
            List<TypeModel> salesReturnEventTypeCollectionToAssign = new List<TypeModel>();
            SalesReturnFileModel salesReturnFileToAssign = new();
            List<SalesReturnFileModel> salesReturnFileCollectionToAssign = new List<SalesReturnFileModel>();
            SalesItemBaseModel salesReturnItemToAssign = new();
            List<SalesItemBaseModel> salesReturnItemCollectionToAssign = new List<SalesItemBaseModel>();
            SalesItemTargetBaseModel salesReturnItemTargetToAssign = new();
            List<SalesItemTargetBaseModel> salesReturnItemTargetCollectionToAssign = new List<SalesItemTargetBaseModel>();
            SalesReturnReasonModel salesReturnReasonToAssign = new();
            List<SalesReturnReasonModel> salesReturnReasonCollectionToAssign = new List<SalesReturnReasonModel>();
            SalesReturnSalesOrderModel salesReturnSalesOrderToAssign = new();
            List<SalesReturnSalesOrderModel> salesReturnSalesOrderCollectionToAssign = new List<SalesReturnSalesOrderModel>();
            StateModel salesReturnStateToAssign = new();
            List<StateModel> salesReturnStateCollectionToAssign = new List<StateModel>();
            StatusModel salesReturnStatusToAssign = new();
            List<StatusModel> salesReturnStatusCollectionToAssign = new List<StatusModel>();
            TypeModel salesReturnTypeToAssign = new();
            List<TypeModel> salesReturnTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Reviews
            ReviewModel reviewToAssign = new();
            List<ReviewModel> reviewCollectionToAssign = new List<ReviewModel>();
            TypeModel reviewTypeToAssign = new();
            List<TypeModel> reviewTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Sales
            SalesGroupModel salesGroupToAssign = new();
            List<SalesGroupModel> salesGroupCollectionToAssign = new List<SalesGroupModel>();
            TypeModel salesItemTargetTypeToAssign = new();
            List<TypeModel> salesItemTargetTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Sampling
            SampleRequestModel sampleRequestToAssign = new();
            List<SampleRequestModel> sampleRequestCollectionToAssign = new List<SampleRequestModel>();
            SampleRequestContactModel sampleRequestContactToAssign = new();
            List<SampleRequestContactModel> sampleRequestContactCollectionToAssign = new List<SampleRequestContactModel>();
            SampleRequestEventModel sampleRequestEventToAssign = new();
            List<SampleRequestEventModel> sampleRequestEventCollectionToAssign = new List<SampleRequestEventModel>();
            TypeModel sampleRequestEventTypeToAssign = new();
            List<TypeModel> sampleRequestEventTypeCollectionToAssign = new List<TypeModel>();
            SampleRequestFileModel sampleRequestFileToAssign = new();
            List<SampleRequestFileModel> sampleRequestFileCollectionToAssign = new List<SampleRequestFileModel>();
            SalesItemBaseModel sampleRequestItemToAssign = new();
            List<SalesItemBaseModel> sampleRequestItemCollectionToAssign = new List<SalesItemBaseModel>();
            SalesItemTargetBaseModel sampleRequestItemTargetToAssign = new();
            List<SalesItemTargetBaseModel> sampleRequestItemTargetCollectionToAssign = new List<SalesItemTargetBaseModel>();
            StateModel sampleRequestStateToAssign = new();
            List<StateModel> sampleRequestStateCollectionToAssign = new List<StateModel>();
            StatusModel sampleRequestStatusToAssign = new();
            List<StatusModel> sampleRequestStatusCollectionToAssign = new List<StatusModel>();
            TypeModel sampleRequestTypeToAssign = new();
            List<TypeModel> sampleRequestTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Scheduling
            AppointmentModel appointmentToAssign = new();
            List<AppointmentModel> appointmentCollectionToAssign = new List<AppointmentModel>();
            StatusModel appointmentStatusToAssign = new();
            List<StatusModel> appointmentStatusCollectionToAssign = new List<StatusModel>();
            TypeModel appointmentTypeToAssign = new();
            List<TypeModel> appointmentTypeCollectionToAssign = new List<TypeModel>();
            CalendarModel calendarToAssign = new();
            List<CalendarModel> calendarCollectionToAssign = new List<CalendarModel>();
            CalendarAppointmentModel calendarAppointmentToAssign = new();
            List<CalendarAppointmentModel> calendarAppointmentCollectionToAssign = new List<CalendarAppointmentModel>();
            #endregion
            #region Scouting
            ScoutModel scoutToAssign = new();
            List<ScoutModel> scoutCollectionToAssign = new List<ScoutModel>();
            ScoutCategoryModel scoutCategoryToAssign = new();
            List<ScoutCategoryModel> scoutCategoryCollectionToAssign = new List<ScoutCategoryModel>();
            TypeModel scoutCategoryTypeToAssign = new();
            List<TypeModel> scoutCategoryTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Shipping
            PackageModel packageToAssign = new();
            List<PackageModel> packageCollectionToAssign = new List<PackageModel>();
            TypeModel packageTypeToAssign = new();
            List<TypeModel> packageTypeCollectionToAssign = new List<TypeModel>();
            RateQuoteModel rateQuoteToAssign = new();
            List<RateQuoteModel> rateQuoteCollectionToAssign = new List<RateQuoteModel>();
            ShipCarrierModel shipCarrierToAssign = new();
            List<ShipCarrierModel> shipCarrierCollectionToAssign = new List<ShipCarrierModel>();
            ShipCarrierMethodModel shipCarrierMethodToAssign = new();
            List<ShipCarrierMethodModel> shipCarrierMethodCollectionToAssign = new List<ShipCarrierMethodModel>();
            ShipmentModel shipmentToAssign = new();
            List<ShipmentModel> shipmentCollectionToAssign = new List<ShipmentModel>();
            ShipmentEventModel shipmentEventToAssign = new();
            List<ShipmentEventModel> shipmentEventCollectionToAssign = new List<ShipmentEventModel>();
            StatusModel shipmentStatusToAssign = new();
            List<StatusModel> shipmentStatusCollectionToAssign = new List<StatusModel>();
            TypeModel shipmentTypeToAssign = new();
            List<TypeModel> shipmentTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #region Shopping
            CartModel cartToAssign = new();
            List<CartModel> cartCollectionToAssign = new List<CartModel>();
            CartContactModel cartContactToAssign = new();
            List<CartContactModel> cartContactCollectionToAssign = new List<CartContactModel>();
            CartEventModel cartEventToAssign = new();
            List<CartEventModel> cartEventCollectionToAssign = new List<CartEventModel>();
            TypeModel cartEventTypeToAssign = new();
            List<TypeModel> cartEventTypeCollectionToAssign = new List<TypeModel>();
            CartFileModel cartFileToAssign = new();
            List<CartFileModel> cartFileCollectionToAssign = new List<CartFileModel>();
            SalesItemBaseModel cartItemToAssign = new();
            List<SalesItemBaseModel> cartItemCollectionToAssign = new List<SalesItemBaseModel>();
            SalesItemTargetBaseModel cartItemTargetToAssign = new();
            List<SalesItemTargetBaseModel> cartItemTargetCollectionToAssign = new List<SalesItemTargetBaseModel>();
            StateModel cartStateToAssign = new();
            List<StateModel> cartStateCollectionToAssign = new List<StateModel>();
            StatusModel cartStatusToAssign = new();
            List<StatusModel> cartStatusCollectionToAssign = new List<StatusModel>();
            CartTypeModel cartTypeToAssign = new();
            List<CartTypeModel> cartTypeCollectionToAssign = new List<CartTypeModel>();
            #endregion
            #region Stores
            SiteDomainModel siteDomainToAssign = new();
            List<SiteDomainModel> siteDomainCollectionToAssign = new List<SiteDomainModel>();
            SiteDomainSocialProviderModel siteDomainSocialProviderToAssign = new();
            List<SiteDomainSocialProviderModel> siteDomainSocialProviderCollectionToAssign = new List<SiteDomainSocialProviderModel>();
            SocialProviderModel socialProviderToAssign = new();
            List<SocialProviderModel> socialProviderCollectionToAssign = new List<SocialProviderModel>();
            StoreModel storeToAssign = new();
            List<StoreModel> storeCollectionToAssign = new List<StoreModel>();
            StoreAccountModel storeAccountToAssign = new();
            List<StoreAccountModel> storeAccountCollectionToAssign = new List<StoreAccountModel>();
            StoreBadgeModel storeBadgeToAssign = new();
            List<StoreBadgeModel> storeBadgeCollectionToAssign = new List<StoreBadgeModel>();
            StoreCategoryModel storeCategoryToAssign = new();
            List<StoreCategoryModel> storeCategoryCollectionToAssign = new List<StoreCategoryModel>();
            StoreContactModel storeContactToAssign = new();
            List<StoreContactModel> storeContactCollectionToAssign = new List<StoreContactModel>();
            StoreCountryModel storeCountryToAssign = new();
            List<StoreCountryModel> storeCountryCollectionToAssign = new List<StoreCountryModel>();
            StoreDistrictModel storeDistrictToAssign = new();
            List<StoreDistrictModel> storeDistrictCollectionToAssign = new List<StoreDistrictModel>();
            StoreImageModel storeImageToAssign = new();
            List<StoreImageModel> storeImageCollectionToAssign = new List<StoreImageModel>();
            TypeModel storeImageTypeToAssign = new();
            List<TypeModel> storeImageTypeCollectionToAssign = new List<TypeModel>();
            StoreInventoryLocationModel storeInventoryLocationToAssign = new();
            List<StoreInventoryLocationModel> storeInventoryLocationCollectionToAssign = new List<StoreInventoryLocationModel>();
            TypeModel storeInventoryLocationTypeToAssign = new();
            List<TypeModel> storeInventoryLocationTypeCollectionToAssign = new List<TypeModel>();
            StoreManufacturerModel storeManufacturerToAssign = new();
            List<StoreManufacturerModel> storeManufacturerCollectionToAssign = new List<StoreManufacturerModel>();
            StoreProductModel storeProductToAssign = new();
            List<StoreProductModel> storeProductCollectionToAssign = new List<StoreProductModel>();
            StoreRegionModel storeRegionToAssign = new();
            List<StoreRegionModel> storeRegionCollectionToAssign = new List<StoreRegionModel>();
            StoreSubscriptionModel storeSubscriptionToAssign = new();
            List<StoreSubscriptionModel> storeSubscriptionCollectionToAssign = new List<StoreSubscriptionModel>();
            TypeModel storeTypeToAssign = new();
            List<TypeModel> storeTypeCollectionToAssign = new List<TypeModel>();
            StoreUserModel storeUserToAssign = new();
            List<StoreUserModel> storeUserCollectionToAssign = new List<StoreUserModel>();
            StoreVendorModel storeVendorToAssign = new();
            List<StoreVendorModel> storeVendorCollectionToAssign = new List<StoreVendorModel>();
            #endregion
            #region System
            ImportExportMappingModel importExportMappingToAssign = new();
            List<ImportExportMappingModel> importExportMappingCollectionToAssign = new List<ImportExportMappingModel>();
            NoteModel noteToAssign = new();
            List<NoteModel> noteCollectionToAssign = new List<NoteModel>();
            NoteTypeModel noteTypeToAssign = new();
            List<NoteTypeModel> noteTypeCollectionToAssign = new List<NoteTypeModel>();
            RecordVersionModel recordVersionToAssign = new();
            List<RecordVersionModel> recordVersionCollectionToAssign = new List<RecordVersionModel>();
            TypeModel recordVersionTypeToAssign = new();
            List<TypeModel> recordVersionTypeCollectionToAssign = new List<TypeModel>();
            SettingModel settingToAssign = new();
            List<SettingModel> settingCollectionToAssign = new List<SettingModel>();
            SettingGroupModel settingGroupToAssign = new();
            List<SettingGroupModel> settingGroupCollectionToAssign = new List<SettingGroupModel>();
            TypeModel settingTypeToAssign = new();
            List<TypeModel> settingTypeCollectionToAssign = new List<TypeModel>();
            EventLogModel eventLogToAssign = new();
            List<EventLogModel> eventLogCollectionToAssign = new List<EventLogModel>();
            #endregion
            #region Tax
            HistoricalTaxRateModel historicalTaxRateToAssign = new();
            List<HistoricalTaxRateModel> historicalTaxRateCollectionToAssign = new List<HistoricalTaxRateModel>();
            TaxCountryModel taxCountryToAssign = new();
            List<TaxCountryModel> taxCountryCollectionToAssign = new List<TaxCountryModel>();
            TaxDistrictModel taxDistrictToAssign = new();
            List<TaxDistrictModel> taxDistrictCollectionToAssign = new List<TaxDistrictModel>();
            TaxRegionModel taxRegionToAssign = new();
            List<TaxRegionModel> taxRegionCollectionToAssign = new List<TaxRegionModel>();
            #endregion
            #region Tracking
            CampaignModel campaignToAssign = new();
            List<CampaignModel> campaignCollectionToAssign = new List<CampaignModel>();
            CampaignAdModel campaignAdToAssign = new();
            List<CampaignAdModel> campaignAdCollectionToAssign = new List<CampaignAdModel>();
            StatusModel campaignStatusToAssign = new();
            List<StatusModel> campaignStatusCollectionToAssign = new List<StatusModel>();
            TypeModel campaignTypeToAssign = new();
            List<TypeModel> campaignTypeCollectionToAssign = new List<TypeModel>();
            EventModel eventToAssign = new();
            List<EventModel> eventCollectionToAssign = new List<EventModel>();
            StatusModel eventStatusToAssign = new();
            List<StatusModel> eventStatusCollectionToAssign = new List<StatusModel>();
            TypeModel eventTypeToAssign = new();
            List<TypeModel> eventTypeCollectionToAssign = new List<TypeModel>();
            IPOrganizationModel iPOrganizationToAssign = new();
            List<IPOrganizationModel> iPOrganizationCollectionToAssign = new List<IPOrganizationModel>();
            StatusModel iPOrganizationStatusToAssign = new();
            List<StatusModel> iPOrganizationStatusCollectionToAssign = new List<StatusModel>();
            PageViewModel pageViewToAssign = new();
            List<PageViewModel> pageViewCollectionToAssign = new List<PageViewModel>();
            PageViewEventModel pageViewEventToAssign = new();
            List<PageViewEventModel> pageViewEventCollectionToAssign = new List<PageViewEventModel>();
            StatusModel pageViewStatusToAssign = new();
            List<StatusModel> pageViewStatusCollectionToAssign = new List<StatusModel>();
            TypeModel pageViewTypeToAssign = new();
            List<TypeModel> pageViewTypeCollectionToAssign = new List<TypeModel>();
            VisitModel visitToAssign = new();
            List<VisitModel> visitCollectionToAssign = new List<VisitModel>();
            VisitorModel visitorToAssign = new();
            List<VisitorModel> visitorCollectionToAssign = new List<VisitorModel>();
            StatusModel visitStatusToAssign = new();
            List<StatusModel> visitStatusCollectionToAssign = new List<StatusModel>();
            #endregion
            #region Vendors
            VendorModel vendorToAssign = new();
            List<VendorModel> vendorCollectionToAssign = new List<VendorModel>();
            VendorAccountModel vendorAccountToAssign = new();
            List<VendorAccountModel> vendorAccountCollectionToAssign = new List<VendorAccountModel>();
            VendorImageModel vendorImageToAssign = new();
            List<VendorImageModel> vendorImageCollectionToAssign = new List<VendorImageModel>();
            TypeModel vendorImageTypeToAssign = new();
            List<TypeModel> vendorImageTypeCollectionToAssign = new List<TypeModel>();
            VendorManufacturerModel vendorManufacturerToAssign = new();
            List<VendorManufacturerModel> vendorManufacturerCollectionToAssign = new List<VendorManufacturerModel>();
            VendorProductModel vendorProductToAssign = new();
            List<VendorProductModel> vendorProductCollectionToAssign = new List<VendorProductModel>();
            TypeModel vendorTypeToAssign = new();
            List<TypeModel> vendorTypeCollectionToAssign = new List<TypeModel>();
            #endregion
            #endregion
            #region To Check's
            #region Accounts
            AccountModel accountToCheck = new();
            AccountAssociationModel accountAssociationToCheck = new();
            TypeModel accountAssociationTypeToCheck = new();
            AccountContactModel accountContactToCheck = new();
            AccountCurrencyModel accountCurrencyToCheck = new();
            AccountFileModel accountFileToCheck = new();
            AccountImageModel accountImageToCheck = new();
            TypeModel accountImageTypeToCheck = new();
            AccountPricePointModel accountPricePointToCheck = new();
            AccountProductModel accountProductToCheck = new();
            TypeModel accountProductTypeToCheck = new();
            StatusModel accountStatusToCheck = new();
            TypeModel accountTypeToCheck = new();
            AccountUsageBalanceModel accountUsageBalanceToCheck = new();
            ContractorModel contractorToCheck = new();
            ServiceAreaModel serviceAreaToCheck = new();
            #endregion
            #region Advertising
            AdModel adToCheck = new();
            AdAccountModel adAccountToCheck = new();
            AdBrandModel adBrandToCheck = new();
            AdFranchiseModel adFranchiseToCheck = new();
            AdImageModel adImageToCheck = new();
            TypeModel adImageTypeToCheck = new();
            StatusModel adStatusToCheck = new();
            AdStoreModel adStoreToCheck = new();
            TypeModel adTypeToCheck = new();
            AdZoneModel adZoneToCheck = new();
            AdZoneAccessModel adZoneAccessToCheck = new();
            ZoneModel zoneToCheck = new();
            StatusModel zoneStatusToCheck = new();
            TypeModel zoneTypeToCheck = new();
            #endregion
            #region Attributes
            AttributeGroupModel attributeGroupToCheck = new();
            AttributeTabModel attributeTabToCheck = new();
            AttributeTypeModel attributeTypeToCheck = new();
            GeneralAttributeModel generalAttributeToCheck = new();
            GeneralAttributePredefinedOptionModel generalAttributePredefinedOptionToCheck = new();
            #endregion
            #region Auctions
            AuctionModel auctionToCheck = new();
            AuctionCategoryModel auctionCategoryToCheck = new();
            StatusModel auctionStatusToCheck = new();
            TypeModel auctionTypeToCheck = new();
            BidModel bidToCheck = new();
            StatusModel bidStatusToCheck = new();
            BrandAuctionModel brandAuctionToCheck = new();
            FranchiseAuctionModel franchiseAuctionToCheck = new();
            LotModel lotToCheck = new();
            LotCategoryModel lotCategoryToCheck = new();
            LotGroupModel lotGroupToCheck = new();
            StatusModel lotStatusToCheck = new();
            TypeModel lotTypeToCheck = new();
            StoreAuctionModel storeAuctionToCheck = new();
            #endregion
            #region Badges
            BadgeModel badgeToCheck = new();
            BadgeImageModel badgeImageToCheck = new();
            TypeModel badgeImageTypeToCheck = new();
            TypeModel badgeTypeToCheck = new();
            #endregion
            #region Brands
            BrandModel brandToCheck = new();
            BrandAccountModel brandAccountToCheck = new();
            BrandCategoryModel brandCategoryToCheck = new();
            BrandCurrencyModel brandCurrencyToCheck = new();
            BrandFranchiseModel brandFranchiseToCheck = new();
            BrandImageModel brandImageToCheck = new();
            TypeModel brandImageTypeToCheck = new();
            BrandInventoryLocationModel brandInventoryLocationToCheck = new();
            TypeModel brandInventoryLocationTypeToCheck = new();
            BrandLanguageModel brandLanguageToCheck = new();
            BrandManufacturerModel brandManufacturerToCheck = new();
            BrandProductModel brandProductToCheck = new();
            BrandSiteDomainModel brandSiteDomainToCheck = new();
            BrandStoreModel brandStoreToCheck = new();
            BrandUserModel brandUserToCheck = new();
            BrandVendorModel brandVendorToCheck = new();
            #endregion
            #region CalendarEvents
            CalendarEventModel calendarEventToCheck = new();
            CalendarEventDetailModel calendarEventDetailToCheck = new();
            CalendarEventFileModel calendarEventFileToCheck = new();
            CalendarEventImageModel calendarEventImageToCheck = new();
            TypeModel calendarEventImageTypeToCheck = new();
            CalendarEventProductModel calendarEventProductToCheck = new();
            StatusModel calendarEventStatusToCheck = new();
            TypeModel calendarEventTypeToCheck = new();
            UserEventAttendanceModel userEventAttendanceToCheck = new();
            TypeModel userEventAttendanceTypeToCheck = new();
            #endregion
            #region Categories
            CategoryModel categoryToCheck = new();
            CategoryFileModel categoryFileToCheck = new();
            CategoryImageModel categoryImageToCheck = new();
            TypeModel categoryImageTypeToCheck = new();
            TypeModel categoryTypeToCheck = new();
            #endregion
            #region Contacts
            ContactModel contactToCheck = new();
            ContactImageModel contactImageToCheck = new();
            TypeModel contactImageTypeToCheck = new();
            TypeModel contactTypeToCheck = new();
            PermissionModel permissionToCheck = new();
            ProfanityFilterModel profanityFilterToCheck = new();
            ReferralCodeModel referralCodeToCheck = new();
            StatusModel referralCodeStatusToCheck = new();
            TypeModel referralCodeTypeToCheck = new();
            RoleUserModel roleUserToCheck = new();
            UserModel userToCheck = new();
            UserFileModel userFileToCheck = new();
            UserImageModel userImageToCheck = new();
            TypeModel userImageTypeToCheck = new();
            StatusModel userOnlineStatusToCheck = new();
            UserProductTypeModel userProductTypeToCheck = new();
            StatusModel userStatusToCheck = new();
            TypeModel userTypeToCheck = new();
            #endregion
            #region Counters
            CounterModel counterToCheck = new();
            CounterLogModel counterLogToCheck = new();
            TypeModel counterLogTypeToCheck = new();
            TypeModel counterTypeToCheck = new();
            #endregion
            #region Currencies
            CurrencyModel currencyToCheck = new();
            CurrencyConversionModel currencyConversionToCheck = new();
            CurrencyImageModel currencyImageToCheck = new();
            TypeModel currencyImageTypeToCheck = new();
            HistoricalCurrencyRateModel historicalCurrencyRateToCheck = new();
            #endregion
            #region Discounts
            AppliedCartDiscountModel appliedCartDiscountToCheck = new();
            AppliedCartItemDiscountModel appliedCartItemDiscountToCheck = new();
            DiscountModel discountToCheck = new();
            DiscountAccountModel discountAccountToCheck = new();
            DiscountAccountTypeModel discountAccountTypeToCheck = new();
            DiscountBrandModel discountBrandToCheck = new();
            DiscountCategoryModel discountCategoryToCheck = new();
            DiscountCodeModel discountCodeToCheck = new();
            DiscountCountryModel discountCountryToCheck = new();
            DiscountFranchiseModel discountFranchiseToCheck = new();
            DiscountManufacturerModel discountManufacturerToCheck = new();
            DiscountProductModel discountProductToCheck = new();
            DiscountProductTypeModel discountProductTypeToCheck = new();
            DiscountShipCarrierMethodModel discountShipCarrierMethodToCheck = new();
            DiscountStoreModel discountStoreToCheck = new();
            DiscountUserModel discountUserToCheck = new();
            DiscountUserRoleModel discountUserRoleToCheck = new();
            DiscountVendorModel discountVendorToCheck = new();
            AppliedPurchaseOrderDiscountModel appliedPurchaseOrderDiscountToCheck = new();
            AppliedPurchaseOrderItemDiscountModel appliedPurchaseOrderItemDiscountToCheck = new();
            AppliedSalesInvoiceDiscountModel appliedSalesInvoiceDiscountToCheck = new();
            AppliedSalesInvoiceItemDiscountModel appliedSalesInvoiceItemDiscountToCheck = new();
            AppliedSalesOrderDiscountModel appliedSalesOrderDiscountToCheck = new();
            AppliedSalesOrderItemDiscountModel appliedSalesOrderItemDiscountToCheck = new();
            AppliedSalesQuoteDiscountModel appliedSalesQuoteDiscountToCheck = new();
            AppliedSalesQuoteItemDiscountModel appliedSalesQuoteItemDiscountToCheck = new();
            AppliedSalesReturnDiscountModel appliedSalesReturnDiscountToCheck = new();
            AppliedSalesReturnItemDiscountModel appliedSalesReturnItemDiscountToCheck = new();
            AppliedSampleRequestDiscountModel appliedSampleRequestDiscountToCheck = new();
            AppliedSampleRequestItemDiscountModel appliedSampleRequestItemDiscountToCheck = new();
            #endregion
            #region Favorites
            FavoriteCategoryModel favoriteCategoryToCheck = new();
            FavoriteManufacturerModel favoriteManufacturerToCheck = new();
            FavoriteShipCarrierModel favoriteShipCarrierToCheck = new();
            FavoriteStoreModel favoriteStoreToCheck = new();
            FavoriteVendorModel favoriteVendorToCheck = new();
            #endregion
            #region Franchises
            FranchiseModel franchiseToCheck = new();
            FranchiseAccountModel franchiseAccountToCheck = new();
            FranchiseCategoryModel franchiseCategoryToCheck = new();
            FranchiseCountryModel franchiseCountryToCheck = new();
            FranchiseCurrencyModel franchiseCurrencyToCheck = new();
            FranchiseDistrictModel franchiseDistrictToCheck = new();
            FranchiseImageModel franchiseImageToCheck = new();
            TypeModel franchiseImageTypeToCheck = new();
            FranchiseInventoryLocationModel franchiseInventoryLocationToCheck = new();
            TypeModel franchiseInventoryLocationTypeToCheck = new();
            FranchiseLanguageModel franchiseLanguageToCheck = new();
            FranchiseManufacturerModel franchiseManufacturerToCheck = new();
            FranchiseProductModel franchiseProductToCheck = new();
            FranchiseRegionModel franchiseRegionToCheck = new();
            FranchiseSiteDomainModel franchiseSiteDomainToCheck = new();
            FranchiseStoreModel franchiseStoreToCheck = new();
            TypeModel franchiseTypeToCheck = new();
            FranchiseUserModel franchiseUserToCheck = new();
            FranchiseVendorModel franchiseVendorToCheck = new();
            #endregion
            #region Geography
            AddressModel addressToCheck = new();
            CountryModel countryToCheck = new();
            CountryCurrencyModel countryCurrencyToCheck = new();
            CountryImageModel countryImageToCheck = new();
            TypeModel countryImageTypeToCheck = new();
            CountryLanguageModel countryLanguageToCheck = new();
            DistrictModel districtToCheck = new();
            DistrictCurrencyModel districtCurrencyToCheck = new();
            DistrictImageModel districtImageToCheck = new();
            TypeModel districtImageTypeToCheck = new();
            DistrictLanguageModel districtLanguageToCheck = new();
            HistoricalAddressValidationModel historicalAddressValidationToCheck = new();
            PhonePrefixLookupModel phonePrefixLookupToCheck = new();
            RegionModel regionToCheck = new();
            RegionCurrencyModel regionCurrencyToCheck = new();
            RegionImageModel regionImageToCheck = new();
            TypeModel regionImageTypeToCheck = new();
            RegionLanguageModel regionLanguageToCheck = new();
            ZipCodeModel zipCodeToCheck = new();
            #endregion
            #region Globalization
            LanguageModel languageToCheck = new();
            LanguageImageModel languageImageToCheck = new();
            TypeModel languageImageTypeToCheck = new();
            UiKeyModel uiKeyToCheck = new();
            UiTranslationModel uiTranslationToCheck = new();
            #endregion
            #region Groups
            GroupModel groupToCheck = new();
            StatusModel groupStatusToCheck = new();
            TypeModel groupTypeToCheck = new();
            GroupUserModel groupUserToCheck = new();
            #endregion
            #region Hangfire
            ScheduledJobConfigurationModel scheduledJobConfigurationToCheck = new();
            ScheduledJobConfigurationSettingModel scheduledJobConfigurationSettingToCheck = new();
            StateModel hangfireStateToCheck = new();
            #endregion
            #region Inventory
            InventoryLocationModel inventoryLocationToCheck = new();
            InventoryLocationRegionModel inventoryLocationRegionToCheck = new();
            InventoryLocationSectionModel inventoryLocationSectionToCheck = new();
            InventoryLocationUserModel inventoryLocationUserToCheck = new();
            #endregion
            #region Invoicing
            SalesInvoiceModel salesInvoiceToCheck = new();
            SalesInvoiceContactModel salesInvoiceContactToCheck = new();
            SalesInvoiceEventModel salesInvoiceEventToCheck = new();
            TypeModel salesInvoiceEventTypeToCheck = new();
            SalesInvoiceFileModel salesInvoiceFileToCheck = new();
            SalesItemBaseModel salesInvoiceItemToCheck = new();
            SalesItemTargetBaseModel salesInvoiceItemTargetToCheck = new();
            StateModel salesInvoiceStateToCheck = new();
            StatusModel salesInvoiceStatusToCheck = new();
            TypeModel salesInvoiceTypeToCheck = new();
            SalesOrderSalesInvoiceModel salesOrderSalesInvoiceToCheck = new();
            #endregion
            #region Manufacturers
            ManufacturerModel manufacturerToCheck = new();
            ManufacturerImageModel manufacturerImageToCheck = new();
            TypeModel manufacturerImageTypeToCheck = new();
            ManufacturerProductModel manufacturerProductToCheck = new();
            TypeModel manufacturerTypeToCheck = new();
            #endregion
            #region Media
            StoredFileModel storedFileToCheck = new();
            #endregion
            #region Messaging
            ConversationModel conversationToCheck = new();
            ConversationUserModel conversationUserToCheck = new();
            EmailQueueModel emailQueueToCheck = new();
            EmailQueueAttachmentModel emailQueueAttachmentToCheck = new();
            StatusModel emailStatusToCheck = new();
            EmailTemplateModel emailTemplateToCheck = new();
            TypeModel emailTypeToCheck = new();
            MessageModel messageToCheck = new();
            MessageAttachmentModel messageAttachmentToCheck = new();
            MessageRecipientModel messageRecipientToCheck = new();
            ProductNotificationModel productNotificationToCheck = new();
            #endregion
            #region Ordering
            SalesOrderModel salesOrderToCheck = new();
            SalesOrderContactModel salesOrderContactToCheck = new();
            SalesOrderEventModel salesOrderEventToCheck = new();
            TypeModel salesOrderEventTypeToCheck = new();
            SalesOrderFileModel salesOrderFileToCheck = new();
            SalesItemBaseModel salesOrderItemToCheck = new();
            SalesItemTargetBaseModel salesOrderItemTargetToCheck = new();
            StateModel salesOrderStateToCheck = new();
            StatusModel salesOrderStatusToCheck = new();
            TypeModel salesOrderTypeToCheck = new();
            #endregion
            #region Payments
            MembershipModel membershipToCheck = new();
            MembershipAdZoneAccessModel membershipAdZoneAccessToCheck = new();
            MembershipAdZoneAccessByLevelModel membershipAdZoneAccessByLevelToCheck = new();
            MembershipLevelModel membershipLevelToCheck = new();
            MembershipRepeatTypeModel membershipRepeatTypeToCheck = new();
            PaymentModel paymentToCheck = new();
            PaymentMethodModel paymentMethodToCheck = new();
            StatusModel paymentStatusToCheck = new();
            TypeModel paymentTypeToCheck = new();
            RepeatTypeModel repeatTypeToCheck = new();
            SalesInvoicePaymentModel salesInvoicePaymentToCheck = new();
            SalesOrderPaymentModel salesOrderPaymentToCheck = new();
            SalesReturnPaymentModel salesReturnPaymentToCheck = new();
            SubscriptionModel subscriptionToCheck = new();
            SubscriptionHistoryModel subscriptionHistoryToCheck = new();
            StatusModel subscriptionStatusToCheck = new();
            SubscriptionTypeModel subscriptionTypeToCheck = new();
            SubscriptionTypeRepeatTypeModel subscriptionTypeRepeatTypeToCheck = new();
            WalletModel walletToCheck = new();
            #endregion
            #region Pricing
            PricePointModel pricePointToCheck = new();
            PriceRoundingModel priceRoundingToCheck = new();
            PriceRuleModel priceRuleToCheck = new();
            PriceRuleAccountModel priceRuleAccountToCheck = new();
            PriceRuleAccountTypeModel priceRuleAccountTypeToCheck = new();
            PriceRuleBrandModel priceRuleBrandToCheck = new();
            PriceRuleCategoryModel priceRuleCategoryToCheck = new();
            PriceRuleCountryModel priceRuleCountryToCheck = new();
            PriceRuleFranchiseModel priceRuleFranchiseToCheck = new();
            PriceRuleManufacturerModel priceRuleManufacturerToCheck = new();
            PriceRuleProductModel priceRuleProductToCheck = new();
            PriceRuleProductTypeModel priceRuleProductTypeToCheck = new();
            PriceRuleStoreModel priceRuleStoreToCheck = new();
            PriceRuleUserRoleModel priceRuleUserRoleToCheck = new();
            PriceRuleVendorModel priceRuleVendorToCheck = new();
            #endregion
            #region Products
            FutureImportModel futureImportToCheck = new();
            StatusModel futureImportStatusToCheck = new();
            ProductModel productToCheck = new();
            ProductAssociationModel productAssociationToCheck = new();
            TypeModel productAssociationTypeToCheck = new();
            ProductCategoryModel productCategoryToCheck = new();
            ProductDownloadModel productDownloadToCheck = new();
            TypeModel productDownloadTypeToCheck = new();
            ProductFileModel productFileToCheck = new();
            ProductImageModel productImageToCheck = new();
            TypeModel productImageTypeToCheck = new();
            ProductInventoryLocationSectionModel productInventoryLocationSectionToCheck = new();
            ProductMembershipLevelModel productMembershipLevelToCheck = new();
            ProductPricePointModel productPricePointToCheck = new();
            ProductRestrictionModel productRestrictionToCheck = new();
            ProductShipCarrierMethodModel productShipCarrierMethodToCheck = new();
            StatusModel productStatusToCheck = new();
            ProductSubscriptionTypeModel productSubscriptionTypeToCheck = new();
            TypeModel productTypeToCheck = new();
            #endregion
            #region Purchasing
            PurchaseOrderModel purchaseOrderToCheck = new();
            PurchaseOrderContactModel purchaseOrderContactToCheck = new();
            PurchaseOrderEventModel purchaseOrderEventToCheck = new();
            TypeModel purchaseOrderEventTypeToCheck = new();
            PurchaseOrderFileModel purchaseOrderFileToCheck = new();
            SalesItemBaseModel purchaseOrderItemToCheck = new();
            SalesItemTargetBaseModel purchaseOrderItemTargetToCheck = new();
            StateModel purchaseOrderStateToCheck = new();
            StatusModel purchaseOrderStatusToCheck = new();
            TypeModel purchaseOrderTypeToCheck = new();
            SalesOrderPurchaseOrderModel salesOrderPurchaseOrderToCheck = new();
            #endregion
            #region Questionnaire
            AnswerModel answerToCheck = new();
            QuestionModel questionToCheck = new();
            QuestionOptionModel questionOptionToCheck = new();
            TypeModel questionTypeToCheck = new();
            #endregion
            #region Quoting
            SalesQuoteModel salesQuoteToCheck = new();
            SalesQuoteCategoryModel salesQuoteCategoryToCheck = new();
            SalesQuoteContactModel salesQuoteContactToCheck = new();
            SalesQuoteEventModel salesQuoteEventToCheck = new();
            TypeModel salesQuoteEventTypeToCheck = new();
            SalesQuoteFileModel salesQuoteFileToCheck = new();
            SalesItemBaseModel salesQuoteItemToCheck = new();
            SalesItemTargetBaseModel salesQuoteItemTargetToCheck = new();
            SalesQuoteSalesOrderModel salesQuoteSalesOrderToCheck = new();
            StateModel salesQuoteStateToCheck = new();
            StatusModel salesQuoteStatusToCheck = new();
            TypeModel salesQuoteTypeToCheck = new();
            #endregion
            #region Reporting
            ReportTypeModel reportTypeToCheck = new();
            #endregion
            #region Returning
            SalesReturnModel salesReturnToCheck = new();
            SalesReturnContactModel salesReturnContactToCheck = new();
            SalesReturnEventModel salesReturnEventToCheck = new();
            TypeModel salesReturnEventTypeToCheck = new();
            SalesReturnFileModel salesReturnFileToCheck = new();
            SalesItemBaseModel salesReturnItemToCheck = new();
            SalesItemTargetBaseModel salesReturnItemTargetToCheck = new();
            SalesReturnReasonModel salesReturnReasonToCheck = new();
            SalesReturnSalesOrderModel salesReturnSalesOrderToCheck = new();
            StateModel salesReturnStateToCheck = new();
            StatusModel salesReturnStatusToCheck = new();
            TypeModel salesReturnTypeToCheck = new();
            #endregion
            #region Reviews
            ReviewModel reviewToCheck = new();
            TypeModel reviewTypeToCheck = new();
            #endregion
            #region Sales
            SalesGroupModel salesGroupToCheck = new();
            TypeModel salesItemTargetTypeToCheck = new();
            #endregion
            #region Sampling
            SampleRequestModel sampleRequestToCheck = new();
            SampleRequestContactModel sampleRequestContactToCheck = new();
            SampleRequestEventModel sampleRequestEventToCheck = new();
            TypeModel sampleRequestEventTypeToCheck = new();
            SampleRequestFileModel sampleRequestFileToCheck = new();
            SalesItemBaseModel sampleRequestItemToCheck = new();
            SalesItemTargetBaseModel sampleRequestItemTargetToCheck = new();
            StateModel sampleRequestStateToCheck = new();
            StatusModel sampleRequestStatusToCheck = new();
            TypeModel sampleRequestTypeToCheck = new();
            #endregion
            #region Scheduling
            AppointmentModel appointmentToCheck = new();
            StatusModel appointmentStatusToCheck = new();
            TypeModel appointmentTypeToCheck = new();
            CalendarModel calendarToCheck = new();
            CalendarAppointmentModel calendarAppointmentToCheck = new();
            #endregion
            #region Scouting
            ScoutModel scoutToCheck = new();
            ScoutCategoryModel scoutCategoryToCheck = new();
            TypeModel scoutCategoryTypeToCheck = new();
            #endregion
            #region Shipping
            PackageModel packageToCheck = new();
            TypeModel packageTypeToCheck = new();
            RateQuoteModel rateQuoteToCheck = new();
            ShipCarrierModel shipCarrierToCheck = new();
            ShipCarrierMethodModel shipCarrierMethodToCheck = new();
            ShipmentModel shipmentToCheck = new();
            ShipmentEventModel shipmentEventToCheck = new();
            StatusModel shipmentStatusToCheck = new();
            TypeModel shipmentTypeToCheck = new();
            #endregion
            #region Shopping
            CartModel cartToCheck = new();
            CartContactModel cartContactToCheck = new();
            CartEventModel cartEventToCheck = new();
            TypeModel cartEventTypeToCheck = new();
            CartFileModel cartFileToCheck = new();
            SalesItemBaseModel cartItemToCheck = new();
            SalesItemTargetBaseModel cartItemTargetToCheck = new();
            StateModel cartStateToCheck = new();
            StatusModel cartStatusToCheck = new();
            CartTypeModel cartTypeToCheck = new();
            #endregion
            #region Stores
            SiteDomainModel siteDomainToCheck = new();
            SiteDomainSocialProviderModel siteDomainSocialProviderToCheck = new();
            SocialProviderModel socialProviderToCheck = new();
            StoreModel storeToCheck = new();
            StoreAccountModel storeAccountToCheck = new();
            StoreBadgeModel storeBadgeToCheck = new();
            StoreCategoryModel storeCategoryToCheck = new();
            StoreContactModel storeContactToCheck = new();
            StoreCountryModel storeCountryToCheck = new();
            StoreDistrictModel storeDistrictToCheck = new();
            StoreImageModel storeImageToCheck = new();
            TypeModel storeImageTypeToCheck = new();
            StoreInventoryLocationModel storeInventoryLocationToCheck = new();
            TypeModel storeInventoryLocationTypeToCheck = new();
            StoreManufacturerModel storeManufacturerToCheck = new();
            StoreProductModel storeProductToCheck = new();
            StoreRegionModel storeRegionToCheck = new();
            StoreSubscriptionModel storeSubscriptionToCheck = new();
            TypeModel storeTypeToCheck = new();
            StoreUserModel storeUserToCheck = new();
            StoreVendorModel storeVendorToCheck = new();
            #endregion
            #region System
            ImportExportMappingModel importExportMappingToCheck = new();
            NoteModel noteToCheck = new();
            NoteTypeModel noteTypeToCheck = new();
            RecordVersionModel recordVersionToCheck = new();
            TypeModel recordVersionTypeToCheck = new();
            SettingModel settingToCheck = new();
            SettingGroupModel settingGroupToCheck = new();
            TypeModel settingTypeToCheck = new();
            EventLogModel eventLogToCheck = new();
            #endregion
            #region Tax
            HistoricalTaxRateModel historicalTaxRateToCheck = new();
            TaxCountryModel taxCountryToCheck = new();
            TaxDistrictModel taxDistrictToCheck = new();
            TaxRegionModel taxRegionToCheck = new();
            #endregion
            #region Tracking
            CampaignModel campaignToCheck = new();
            CampaignAdModel campaignAdToCheck = new();
            StatusModel campaignStatusToCheck = new();
            TypeModel campaignTypeToCheck = new();
            EventModel eventToCheck = new();
            StatusModel eventStatusToCheck = new();
            TypeModel eventTypeToCheck = new();
            IPOrganizationModel iPOrganizationToCheck = new();
            StatusModel iPOrganizationStatusToCheck = new();
            PageViewModel pageViewToCheck = new();
            PageViewEventModel pageViewEventToCheck = new();
            StatusModel pageViewStatusToCheck = new();
            TypeModel pageViewTypeToCheck = new();
            VisitModel visitToCheck = new();
            VisitorModel visitorToCheck = new();
            StatusModel visitStatusToCheck = new();
            #endregion
            #region Vendors
            VendorModel vendorToCheck = new();
            VendorAccountModel vendorAccountToCheck = new();
            VendorImageModel vendorImageToCheck = new();
            TypeModel vendorImageTypeToCheck = new();
            VendorManufacturerModel vendorManufacturerToCheck = new();
            VendorProductModel vendorProductToCheck = new();
            TypeModel vendorTypeToCheck = new();
            #endregion
            #endregion
            #endregion
            #region Act/Assert
            #region Accounts
            // Accounts / Account / Images as ICollection<AccountImage>
            Assert.Equal(accountImageCollectionToAssign, accountToCheck.Images = accountImageCollectionToAssign);
            Assert.Equal(accountImageCollectionToAssign, accountToCheck.Images);
            // Accounts / Account / StoredFiles as ICollection<AccountFile>
            Assert.Equal(accountFileCollectionToAssign, accountToCheck.StoredFiles = accountFileCollectionToAssign);
            Assert.Equal(accountFileCollectionToAssign, accountToCheck.StoredFiles);
            // Accounts / Account / Brands as ICollection<BrandAccount>
            Assert.Equal(brandAccountCollectionToAssign, accountToCheck.Brands = brandAccountCollectionToAssign);
            Assert.Equal(brandAccountCollectionToAssign, accountToCheck.Brands);
            // Accounts / Account / Franchises as ICollection<FranchiseAccount>
            Assert.Equal(franchiseAccountCollectionToAssign, accountToCheck.Franchises = franchiseAccountCollectionToAssign);
            Assert.Equal(franchiseAccountCollectionToAssign, accountToCheck.Franchises);
            // Accounts / Account / Stores as ICollection<StoreAccount>
            Assert.Equal(storeAccountCollectionToAssign, accountToCheck.Stores = storeAccountCollectionToAssign);
            Assert.Equal(storeAccountCollectionToAssign, accountToCheck.Stores);
            // Accounts / Account / Products as ICollection<AccountProduct>
            Assert.Equal(accountProductCollectionToAssign, accountToCheck.Products = accountProductCollectionToAssign);
            Assert.Equal(accountProductCollectionToAssign, accountToCheck.Products);
            // Accounts / Account / Vendors as ICollection<VendorAccount>
            Assert.Equal(vendorAccountCollectionToAssign, accountToCheck.Vendors = vendorAccountCollectionToAssign);
            Assert.Equal(vendorAccountCollectionToAssign, accountToCheck.Vendors);
            // Accounts / Account / Users as ICollection<User>
            Assert.Equal(userCollectionToAssign, accountToCheck.Users = userCollectionToAssign);
            Assert.Equal(userCollectionToAssign, accountToCheck.Users);
            // Accounts / Account / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, accountToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, accountToCheck.Notes);
            // Accounts / Account / AccountContacts as ICollection<AccountContact>
            Assert.Equal(accountContactCollectionToAssign, accountToCheck.AccountContacts = accountContactCollectionToAssign);
            Assert.Equal(accountContactCollectionToAssign, accountToCheck.AccountContacts);
            // Accounts / Account / AccountCurrencies as ICollection<AccountCurrency>
            Assert.Equal(accountCurrencyCollectionToAssign, accountToCheck.AccountCurrencies = accountCurrencyCollectionToAssign);
            Assert.Equal(accountCurrencyCollectionToAssign, accountToCheck.AccountCurrencies);
            // Accounts / Account / AccountPricePoints as ICollection<AccountPricePoint>
            Assert.Equal(accountPricePointCollectionToAssign, accountToCheck.AccountPricePoints = accountPricePointCollectionToAssign);
            Assert.Equal(accountPricePointCollectionToAssign, accountToCheck.AccountPricePoints);
            // Accounts / Account / AccountAssociations as ICollection<AccountAssociation>
            Assert.Equal(accountAssociationCollectionToAssign, accountToCheck.AccountAssociations = accountAssociationCollectionToAssign);
            Assert.Equal(accountAssociationCollectionToAssign, accountToCheck.AccountAssociations);
            // Accounts / Account / AccountsAssociatedWith as ICollection<AccountAssociation>
            Assert.Equal(accountAssociationCollectionToAssign, accountToCheck.AccountsAssociatedWith = accountAssociationCollectionToAssign);
            Assert.Equal(accountAssociationCollectionToAssign, accountToCheck.AccountsAssociatedWith);
            // Accounts / AccountContact / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IContactModel>)accountContactToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IContactModel>)accountContactToCheck).AccountID);
            // Accounts / AccountContact / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IContactModel>)accountContactToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IContactModel>)accountContactToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IContactModel>)accountContactToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IContactModel>)accountContactToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IContactModel>)accountContactToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IContactModel>)accountContactToCheck).AccountName);
            // Accounts / AccountContact / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccountModel)accountContactToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccountModel)accountContactToCheck).AccountID);
            // Accounts / AccountContact / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)accountContactToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)accountContactToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)accountContactToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)accountContactToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)accountContactToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)accountContactToCheck).AccountName);
            // Accounts / AccountContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBaseModel)accountContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBaseModel)accountContactToCheck).ContactID);
            // Accounts / AccountContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)accountContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)accountContactToCheck).Contact);
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)accountContactToCheck).ContactKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)accountContactToCheck).ContactKey);
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)accountContactToCheck).ContactPhone = "testPhone1ToAssign");
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)accountContactToCheck).ContactPhone);
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)accountContactToCheck).ContactFax = "testFax1ToAssign");
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)accountContactToCheck).ContactFax);
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)accountContactToCheck).ContactEmail = "testEmail1ToAssign");
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)accountContactToCheck).ContactEmail);
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)accountContactToCheck).ContactFirstName = "testFirstNameToAssign");
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)accountContactToCheck).ContactFirstName);
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)accountContactToCheck).ContactLastName = "testLastNameToAssign");
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)accountContactToCheck).ContactLastName);
            // Accounts / AccountCurrency / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<ICurrencyModel>)accountCurrencyToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<ICurrencyModel>)accountCurrencyToCheck).AccountID);
            // Accounts / AccountCurrency / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<ICurrencyModel>)accountCurrencyToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<ICurrencyModel>)accountCurrencyToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<ICurrencyModel>)accountCurrencyToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<ICurrencyModel>)accountCurrencyToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<ICurrencyModel>)accountCurrencyToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<ICurrencyModel>)accountCurrencyToCheck).AccountName);
            // Accounts / AccountCurrency / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccountModel)accountCurrencyToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccountModel)accountCurrencyToCheck).AccountID);
            // Accounts / AccountCurrency / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)accountCurrencyToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)accountCurrencyToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)accountCurrencyToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)accountCurrencyToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)accountCurrencyToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)accountCurrencyToCheck).AccountName);
            // Accounts / AccountFile / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccountModel)accountFileToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccountModel)accountFileToCheck).AccountID);
            // Accounts / AccountFile / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)accountFileToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)accountFileToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)accountFileToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)accountFileToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)accountFileToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)accountFileToCheck).AccountName);
            // Accounts / AccountFile / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IStoredFileModel>)accountFileToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IStoredFileModel>)accountFileToCheck).AccountID);
            // Accounts / AccountFile / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IStoredFileModel>)accountFileToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IStoredFileModel>)accountFileToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IStoredFileModel>)accountFileToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IStoredFileModel>)accountFileToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IStoredFileModel>)accountFileToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IStoredFileModel>)accountFileToCheck).AccountName);
            // Accounts / AccountImage / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccountModel)accountImageToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccountModel)accountImageToCheck).AccountID);
            // Accounts / AccountImage / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)accountImageToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)accountImageToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)accountImageToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)accountImageToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)accountImageToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)accountImageToCheck).AccountName);
            // Accounts / AccountPricePoint / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccountModel)accountPricePointToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccountModel)accountPricePointToCheck).AccountID);
            // Accounts / AccountPricePoint / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)accountPricePointToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)accountPricePointToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)accountPricePointToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)accountPricePointToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)accountPricePointToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)accountPricePointToCheck).AccountName);
            // Accounts / AccountPricePoint / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IPricePointModel>)accountPricePointToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IPricePointModel>)accountPricePointToCheck).AccountID);
            // Accounts / AccountPricePoint / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IPricePointModel>)accountPricePointToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IPricePointModel>)accountPricePointToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IPricePointModel>)accountPricePointToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IPricePointModel>)accountPricePointToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IPricePointModel>)accountPricePointToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IPricePointModel>)accountPricePointToCheck).AccountName);
            // Accounts / AccountProduct / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccountModel)accountProductToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccountModel)accountProductToCheck).AccountID);
            // Accounts / AccountProduct / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)accountProductToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)accountProductToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)accountProductToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)accountProductToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)accountProductToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)accountProductToCheck).AccountName);
            // Accounts / AccountProduct / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountProductToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountProductToCheck).AccountID);
            // Accounts / AccountProduct / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountProductToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountProductToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountProductToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountProductToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountProductToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountProductToCheck).AccountName);
            // Accounts / AccountProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)accountProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)accountProductToCheck).ProductID);
            // Accounts / AccountProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)accountProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)accountProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)accountProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)accountProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)accountProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)accountProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)accountProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)accountProductToCheck).ProductSeoUrl);
            // Accounts / AccountProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountProductToCheck).ProductID);
            // Accounts / AccountProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountProductToCheck).ProductSeoUrl);
            // Accounts / AccountUsageBalance / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccountModel)accountUsageBalanceToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccountModel)accountUsageBalanceToCheck).AccountID);
            // Accounts / AccountUsageBalance / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)accountUsageBalanceToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)accountUsageBalanceToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)accountUsageBalanceToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)accountUsageBalanceToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)accountUsageBalanceToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)accountUsageBalanceToCheck).AccountName);
            // Accounts / AccountUsageBalance / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountUsageBalanceToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountUsageBalanceToCheck).AccountID);
            // Accounts / AccountUsageBalance / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountUsageBalanceToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountUsageBalanceToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountUsageBalanceToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountUsageBalanceToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountUsageBalanceToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheMasterModel<IProductModel>)accountUsageBalanceToCheck).AccountName);
            // Accounts / AccountUsageBalance / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountUsageBalanceToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountUsageBalanceToCheck).ProductID);
            // Accounts / AccountUsageBalance / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountUsageBalanceToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountUsageBalanceToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountUsageBalanceToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountUsageBalanceToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountUsageBalanceToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountUsageBalanceToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountUsageBalanceToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)accountUsageBalanceToCheck).ProductSeoUrl);
            // Accounts / AccountUsageBalance / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)accountUsageBalanceToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)accountUsageBalanceToCheck).ProductID);
            // Accounts / AccountUsageBalance / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)accountUsageBalanceToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)accountUsageBalanceToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)accountUsageBalanceToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)accountUsageBalanceToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)accountUsageBalanceToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)accountUsageBalanceToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)accountUsageBalanceToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)accountUsageBalanceToCheck).ProductSeoUrl);
            // Accounts / Contractor / ServiceAreas as ICollection<ServiceArea>
            Assert.Equal(serviceAreaCollectionToAssign, contractorToCheck.ServiceAreas = serviceAreaCollectionToAssign);
            Assert.Equal(serviceAreaCollectionToAssign, contractorToCheck.ServiceAreas);
            #endregion
            #region Advertising
            // Advertising / Ad / Images as ICollection<AdImage>
            Assert.Equal(adImageCollectionToAssign, adToCheck.Images = adImageCollectionToAssign);
            Assert.Equal(adImageCollectionToAssign, adToCheck.Images);
            // Advertising / Ad / Brands as ICollection<AdBrand>
            Assert.Equal(adBrandCollectionToAssign, adToCheck.Brands = adBrandCollectionToAssign);
            Assert.Equal(adBrandCollectionToAssign, adToCheck.Brands);
            // Advertising / Ad / Franchises as ICollection<AdFranchise>
            Assert.Equal(adFranchiseCollectionToAssign, adToCheck.Franchises = adFranchiseCollectionToAssign);
            Assert.Equal(adFranchiseCollectionToAssign, adToCheck.Franchises);
            // Advertising / Ad / Stores as ICollection<AdStore>
            Assert.Equal(adStoreCollectionToAssign, adToCheck.Stores = adStoreCollectionToAssign);
            Assert.Equal(adStoreCollectionToAssign, adToCheck.Stores);
            // Advertising / Ad / Accounts as ICollection<AdAccount>
            Assert.Equal(adAccountCollectionToAssign, adToCheck.Accounts = adAccountCollectionToAssign);
            Assert.Equal(adAccountCollectionToAssign, adToCheck.Accounts);
            // Advertising / Ad / AdZones as ICollection<AdZone>
            Assert.Equal(adZoneCollectionToAssign, adToCheck.AdZones = adZoneCollectionToAssign);
            Assert.Equal(adZoneCollectionToAssign, adToCheck.AdZones);
            // Advertising / Ad / CampaignAds as ICollection<CampaignAd>
            Assert.Equal(campaignAdCollectionToAssign, adToCheck.CampaignAds = campaignAdCollectionToAssign);
            Assert.Equal(campaignAdCollectionToAssign, adToCheck.CampaignAds);
            // Advertising / AdAccount / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccountModel)adAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccountModel)adAccountToCheck).AccountID);
            // Advertising / AdAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)adAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)adAccountToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)adAccountToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)adAccountToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)adAccountToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)adAccountToCheck).AccountName);
            // Advertising / AdAccount / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)adAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)adAccountToCheck).AccountID);
            // Advertising / AdAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)adAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)adAccountToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)adAccountToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)adAccountToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)adAccountToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)adAccountToCheck).AccountName);
            // Advertising / AdBrand / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)adBrandToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)adBrandToCheck).BrandID);
            // Advertising / AdBrand / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)adBrandToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)adBrandToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)adBrandToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)adBrandToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)adBrandToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)adBrandToCheck).BrandName);
            // Advertising / AdBrand / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)adBrandToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)adBrandToCheck).BrandID);
            // Advertising / AdBrand / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)adBrandToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)adBrandToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)adBrandToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)adBrandToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)adBrandToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)adBrandToCheck).BrandName);
            // Advertising / AdFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)adFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)adFranchiseToCheck).FranchiseID);
            // Advertising / AdFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)adFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)adFranchiseToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)adFranchiseToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)adFranchiseToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)adFranchiseToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)adFranchiseToCheck).FranchiseName);
            // Advertising / AdFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)adFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)adFranchiseToCheck).FranchiseID);
            // Advertising / AdFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)adFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)adFranchiseToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)adFranchiseToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)adFranchiseToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)adFranchiseToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)adFranchiseToCheck).FranchiseName);
            // Advertising / AdStore / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)adStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)adStoreToCheck).StoreID);
            // Advertising / AdStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)adStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)adStoreToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)adStoreToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)adStoreToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)adStoreToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)adStoreToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)adStoreToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)adStoreToCheck).StoreSeoUrl);
            // Advertising / AdStore / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)adStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)adStoreToCheck).StoreID);
            // Advertising / AdStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)adStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)adStoreToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)adStoreToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)adStoreToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)adStoreToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)adStoreToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)adStoreToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)adStoreToCheck).StoreSeoUrl);
            // Advertising / AdZoneAccess / AdZones as ICollection<AdZone>
            Assert.Equal(adZoneCollectionToAssign, adZoneAccessToCheck.AdZones = adZoneCollectionToAssign);
            Assert.Equal(adZoneCollectionToAssign, adZoneAccessToCheck.AdZones);
            // Advertising / Zone / AdZones as ICollection<AdZone>
            Assert.Equal(adZoneCollectionToAssign, zoneToCheck.AdZones = adZoneCollectionToAssign);
            Assert.Equal(adZoneCollectionToAssign, zoneToCheck.AdZones);
            #endregion
            #region Attributes
            // Attributes / AttributeType / GeneralAttributes as ICollection<GeneralAttribute>
            Assert.Equal(generalAttributeCollectionToAssign, attributeTypeToCheck.GeneralAttributes = generalAttributeCollectionToAssign);
            Assert.Equal(generalAttributeCollectionToAssign, attributeTypeToCheck.GeneralAttributes);
            // Attributes / GeneralAttribute / GeneralAttributePredefinedOptions as ICollection<GeneralAttributePredefinedOption>
            Assert.Equal(generalAttributePredefinedOptionCollectionToAssign, generalAttributeToCheck.GeneralAttributePredefinedOptions = generalAttributePredefinedOptionCollectionToAssign);
            Assert.Equal(generalAttributePredefinedOptionCollectionToAssign, generalAttributeToCheck.GeneralAttributePredefinedOptions);
            #endregion
            #region Auctions
            // Auctions / Auction / Brands as ICollection<BrandAuction>
            Assert.Equal(brandAuctionCollectionToAssign, auctionToCheck.Brands = brandAuctionCollectionToAssign);
            Assert.Equal(brandAuctionCollectionToAssign, auctionToCheck.Brands);
            // Auctions / Auction / Categories as ICollection<AuctionCategory>
            Assert.Equal(auctionCategoryCollectionToAssign, auctionToCheck.Categories = auctionCategoryCollectionToAssign);
            Assert.Equal(auctionCategoryCollectionToAssign, auctionToCheck.Categories);
            // Auctions / Auction / Franchises as ICollection<FranchiseAuction>
            Assert.Equal(franchiseAuctionCollectionToAssign, auctionToCheck.Franchises = franchiseAuctionCollectionToAssign);
            Assert.Equal(franchiseAuctionCollectionToAssign, auctionToCheck.Franchises);
            // Auctions / Auction / Stores as ICollection<StoreAuction>
            Assert.Equal(storeAuctionCollectionToAssign, auctionToCheck.Stores = storeAuctionCollectionToAssign);
            Assert.Equal(storeAuctionCollectionToAssign, auctionToCheck.Stores);
            // Auctions / AuctionCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategoryModel)auctionCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategoryModel)auctionCategoryToCheck).CategoryID);
            // Auctions / AuctionCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)auctionCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)auctionCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)auctionCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)auctionCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)auctionCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)auctionCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)auctionCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)auctionCategoryToCheck).CategorySeoUrl);
            // Auctions / AuctionCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)auctionCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)auctionCategoryToCheck).CategoryID);
            // Auctions / AuctionCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)auctionCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)auctionCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)auctionCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)auctionCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)auctionCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)auctionCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)auctionCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)auctionCategoryToCheck).CategorySeoUrl);
            // Auctions / BrandAuction / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandAuctionToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandAuctionToCheck).BrandID);
            // Auctions / BrandAuction / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandAuctionToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandAuctionToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandAuctionToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandAuctionToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandAuctionToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandAuctionToCheck).BrandName);
            // Auctions / BrandAuction / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAuctionModel>)brandAuctionToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAuctionModel>)brandAuctionToCheck).BrandID);
            // Auctions / BrandAuction / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAuctionModel>)brandAuctionToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAuctionModel>)brandAuctionToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAuctionModel>)brandAuctionToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAuctionModel>)brandAuctionToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAuctionModel>)brandAuctionToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAuctionModel>)brandAuctionToCheck).BrandName);
            // Auctions / FranchiseAuction / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseAuctionToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseAuctionToCheck).FranchiseID);
            // Auctions / FranchiseAuction / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseAuctionToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseAuctionToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseAuctionToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseAuctionToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseAuctionToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseAuctionToCheck).FranchiseName);
            // Auctions / FranchiseAuction / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAuctionModel>)franchiseAuctionToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAuctionModel>)franchiseAuctionToCheck).FranchiseID);
            // Auctions / FranchiseAuction / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAuctionModel>)franchiseAuctionToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAuctionModel>)franchiseAuctionToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAuctionModel>)franchiseAuctionToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAuctionModel>)franchiseAuctionToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAuctionModel>)franchiseAuctionToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAuctionModel>)franchiseAuctionToCheck).FranchiseName);
            // Auctions / Lot / Categories as ICollection<LotCategory>
            Assert.Equal(lotCategoryCollectionToAssign, lotToCheck.Categories = lotCategoryCollectionToAssign);
            Assert.Equal(lotCategoryCollectionToAssign, lotToCheck.Categories);
            // Auctions / LotCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategoryModel)lotCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategoryModel)lotCategoryToCheck).CategoryID);
            // Auctions / LotCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)lotCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)lotCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)lotCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)lotCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)lotCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)lotCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)lotCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)lotCategoryToCheck).CategorySeoUrl);
            // Auctions / LotCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)lotCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)lotCategoryToCheck).CategoryID);
            // Auctions / LotCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)lotCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)lotCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)lotCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)lotCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)lotCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)lotCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)lotCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)lotCategoryToCheck).CategorySeoUrl);
            // Auctions / StoreAuction / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeAuctionToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeAuctionToCheck).StoreID);
            // Auctions / StoreAuction / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeAuctionToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeAuctionToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeAuctionToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeAuctionToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeAuctionToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeAuctionToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeAuctionToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeAuctionToCheck).StoreSeoUrl);
            // Auctions / StoreAuction / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAuctionModel>)storeAuctionToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAuctionModel>)storeAuctionToCheck).StoreID);
            // Auctions / StoreAuction / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAuctionModel>)storeAuctionToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAuctionModel>)storeAuctionToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAuctionModel>)storeAuctionToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAuctionModel>)storeAuctionToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAuctionModel>)storeAuctionToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAuctionModel>)storeAuctionToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAuctionModel>)storeAuctionToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAuctionModel>)storeAuctionToCheck).StoreSeoUrl);
            #endregion
            #region Badges
            // Badges / Badge / Images as ICollection<BadgeImage>
            Assert.Equal(badgeImageCollectionToAssign, badgeToCheck.Images = badgeImageCollectionToAssign);
            Assert.Equal(badgeImageCollectionToAssign, badgeToCheck.Images);
            #endregion
            #region Brands
            // Brands / Brand / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, brandToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, brandToCheck.Notes);
            // Brands / Brand / Images as ICollection<BrandImage>
            Assert.Equal(brandImageCollectionToAssign, brandToCheck.Images = brandImageCollectionToAssign);
            Assert.Equal(brandImageCollectionToAssign, brandToCheck.Images);
            // Brands / Brand / Accounts as ICollection<BrandAccount>
            Assert.Equal(brandAccountCollectionToAssign, brandToCheck.Accounts = brandAccountCollectionToAssign);
            Assert.Equal(brandAccountCollectionToAssign, brandToCheck.Accounts);
            // Brands / Brand / Categories as ICollection<BrandCategory>
            Assert.Equal(brandCategoryCollectionToAssign, brandToCheck.Categories = brandCategoryCollectionToAssign);
            Assert.Equal(brandCategoryCollectionToAssign, brandToCheck.Categories);
            // Brands / Brand / Franchises as ICollection<BrandFranchise>
            Assert.Equal(brandFranchiseCollectionToAssign, brandToCheck.Franchises = brandFranchiseCollectionToAssign);
            Assert.Equal(brandFranchiseCollectionToAssign, brandToCheck.Franchises);
            // Brands / Brand / Products as ICollection<BrandProduct>
            Assert.Equal(brandProductCollectionToAssign, brandToCheck.Products = brandProductCollectionToAssign);
            Assert.Equal(brandProductCollectionToAssign, brandToCheck.Products);
            // Brands / Brand / Stores as ICollection<BrandStore>
            Assert.Equal(brandStoreCollectionToAssign, brandToCheck.Stores = brandStoreCollectionToAssign);
            Assert.Equal(brandStoreCollectionToAssign, brandToCheck.Stores);
            // Brands / Brand / Users as ICollection<BrandUser>
            Assert.Equal(brandUserCollectionToAssign, brandToCheck.Users = brandUserCollectionToAssign);
            Assert.Equal(brandUserCollectionToAssign, brandToCheck.Users);
            // Brands / Brand / BrandCurrencies as ICollection<BrandCurrency>
            Assert.Equal(brandCurrencyCollectionToAssign, brandToCheck.BrandCurrencies = brandCurrencyCollectionToAssign);
            Assert.Equal(brandCurrencyCollectionToAssign, brandToCheck.BrandCurrencies);
            // Brands / Brand / BrandInventoryLocations as ICollection<BrandInventoryLocation>
            //Assert.Equal(brandInventoryLocationCollectionToAssign, brandToCheck.BrandInventoryLocations = brandInventoryLocationCollectionToAssign);
            //Assert.Equal(brandInventoryLocationCollectionToAssign, brandToCheck.BrandInventoryLocations);
            // Brands / Brand / BrandLanguages as ICollection<BrandLanguage>
            Assert.Equal(brandLanguageCollectionToAssign, brandToCheck.BrandLanguages = brandLanguageCollectionToAssign);
            Assert.Equal(brandLanguageCollectionToAssign, brandToCheck.BrandLanguages);
            // Brands / Brand / BrandSiteDomains as ICollection<BrandSiteDomain>
            Assert.Equal(brandSiteDomainCollectionToAssign, brandToCheck.BrandSiteDomains = brandSiteDomainCollectionToAssign);
            Assert.Equal(brandSiteDomainCollectionToAssign, brandToCheck.BrandSiteDomains);
            // Brands / BrandAccount / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandAccountToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandAccountToCheck).BrandID);
            // Brands / BrandAccount / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandAccountToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandAccountToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandAccountToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandAccountToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandAccountToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandAccountToCheck).BrandName);
            // Brands / BrandAccount / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAccountModel>)brandAccountToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAccountModel>)brandAccountToCheck).BrandID);
            // Brands / BrandAccount / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAccountModel>)brandAccountToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAccountModel>)brandAccountToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAccountModel>)brandAccountToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAccountModel>)brandAccountToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAccountModel>)brandAccountToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IAccountModel>)brandAccountToCheck).BrandName);
            // Brands / BrandAccount / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccountModel)brandAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccountModel)brandAccountToCheck).AccountID);
            // Brands / BrandAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)brandAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)brandAccountToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)brandAccountToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)brandAccountToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)brandAccountToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)brandAccountToCheck).AccountName);
            // Brands / BrandAccount / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)brandAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)brandAccountToCheck).AccountID);
            // Brands / BrandAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)brandAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)brandAccountToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)brandAccountToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)brandAccountToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)brandAccountToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)brandAccountToCheck).AccountName);
            // Brands / BrandCategory / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandCategoryToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandCategoryToCheck).BrandID);
            // Brands / BrandCategory / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandCategoryToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandCategoryToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandCategoryToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandCategoryToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandCategoryToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandCategoryToCheck).BrandName);
            // Brands / BrandCategory / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICategoryModel>)brandCategoryToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICategoryModel>)brandCategoryToCheck).BrandID);
            // Brands / BrandCategory / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICategoryModel>)brandCategoryToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICategoryModel>)brandCategoryToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICategoryModel>)brandCategoryToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICategoryModel>)brandCategoryToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICategoryModel>)brandCategoryToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICategoryModel>)brandCategoryToCheck).BrandName);
            // Brands / BrandCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategoryModel)brandCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategoryModel)brandCategoryToCheck).CategoryID);
            // Brands / BrandCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)brandCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)brandCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)brandCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)brandCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)brandCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)brandCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)brandCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)brandCategoryToCheck).CategorySeoUrl);
            // Brands / BrandCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)brandCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)brandCategoryToCheck).CategoryID);
            // Brands / BrandCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)brandCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)brandCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)brandCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)brandCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)brandCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)brandCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)brandCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)brandCategoryToCheck).CategorySeoUrl);
            // Brands / BrandCurrency / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandCurrencyToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandCurrencyToCheck).BrandID);
            // Brands / BrandCurrency / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandCurrencyToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandCurrencyToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandCurrencyToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandCurrencyToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandCurrencyToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandCurrencyToCheck).BrandName);
            // Brands / BrandCurrency / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICurrencyModel>)brandCurrencyToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICurrencyModel>)brandCurrencyToCheck).BrandID);
            // Brands / BrandCurrency / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICurrencyModel>)brandCurrencyToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICurrencyModel>)brandCurrencyToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICurrencyModel>)brandCurrencyToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICurrencyModel>)brandCurrencyToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICurrencyModel>)brandCurrencyToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ICurrencyModel>)brandCurrencyToCheck).BrandName);
            // Brands / BrandFranchise / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandFranchiseToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandFranchiseToCheck).BrandID);
            // Brands / BrandFranchise / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandFranchiseToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandFranchiseToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandFranchiseToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandFranchiseToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandFranchiseToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandFranchiseToCheck).BrandName);
            // Brands / BrandFranchise / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IFranchiseModel>)brandFranchiseToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IFranchiseModel>)brandFranchiseToCheck).BrandID);
            // Brands / BrandFranchise / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IFranchiseModel>)brandFranchiseToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IFranchiseModel>)brandFranchiseToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IFranchiseModel>)brandFranchiseToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IFranchiseModel>)brandFranchiseToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IFranchiseModel>)brandFranchiseToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IFranchiseModel>)brandFranchiseToCheck).BrandName);
            // Brands / BrandFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)brandFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)brandFranchiseToCheck).FranchiseID);
            // Brands / BrandFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)brandFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)brandFranchiseToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)brandFranchiseToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)brandFranchiseToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)brandFranchiseToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)brandFranchiseToCheck).FranchiseName);
            // Brands / BrandFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)brandFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)brandFranchiseToCheck).FranchiseID);
            // Brands / BrandFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)brandFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)brandFranchiseToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)brandFranchiseToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)brandFranchiseToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)brandFranchiseToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)brandFranchiseToCheck).FranchiseName);
            // Brands / BrandImage / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandImageToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandImageToCheck).BrandID);
            // Brands / BrandImage / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandImageToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandImageToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandImageToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandImageToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandImageToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandImageToCheck).BrandName);
            // Brands / BrandInventoryLocation / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandInventoryLocationToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandInventoryLocationToCheck).BrandID);
            // Brands / BrandInventoryLocation / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandInventoryLocationToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandInventoryLocationToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandInventoryLocationToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandInventoryLocationToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandInventoryLocationToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandInventoryLocationToCheck).BrandName);
            // Brands / BrandInventoryLocation / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IInventoryLocationModel>)brandInventoryLocationToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IInventoryLocationModel>)brandInventoryLocationToCheck).BrandID);
            // Brands / BrandInventoryLocation / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IInventoryLocationModel>)brandInventoryLocationToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IInventoryLocationModel>)brandInventoryLocationToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IInventoryLocationModel>)brandInventoryLocationToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IInventoryLocationModel>)brandInventoryLocationToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IInventoryLocationModel>)brandInventoryLocationToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IInventoryLocationModel>)brandInventoryLocationToCheck).BrandName);
            // Brands / BrandLanguage / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandLanguageToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandLanguageToCheck).BrandID);
            // Brands / BrandLanguage / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandLanguageToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandLanguageToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandLanguageToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandLanguageToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandLanguageToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandLanguageToCheck).BrandName);
            // Brands / BrandLanguage / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ILanguageModel>)brandLanguageToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ILanguageModel>)brandLanguageToCheck).BrandID);
            // Brands / BrandLanguage / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ILanguageModel>)brandLanguageToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ILanguageModel>)brandLanguageToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ILanguageModel>)brandLanguageToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ILanguageModel>)brandLanguageToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ILanguageModel>)brandLanguageToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ILanguageModel>)brandLanguageToCheck).BrandName);
            // Brands / BrandManufacturer / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandManufacturerToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandManufacturerToCheck).BrandID);
            // Brands / BrandManufacturer / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandManufacturerToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandManufacturerToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandManufacturerToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandManufacturerToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandManufacturerToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandManufacturerToCheck).BrandName);
            // Brands / BrandManufacturer / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IManufacturerModel>)brandManufacturerToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IManufacturerModel>)brandManufacturerToCheck).BrandID);
            // Brands / BrandManufacturer / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IManufacturerModel>)brandManufacturerToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IManufacturerModel>)brandManufacturerToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IManufacturerModel>)brandManufacturerToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IManufacturerModel>)brandManufacturerToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IManufacturerModel>)brandManufacturerToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IManufacturerModel>)brandManufacturerToCheck).BrandName);
            // Brands / BrandManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)brandManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)brandManufacturerToCheck).ManufacturerID);
            // Brands / BrandManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)brandManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)brandManufacturerToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)brandManufacturerToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)brandManufacturerToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)brandManufacturerToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)brandManufacturerToCheck).ManufacturerName);
            // Brands / BrandManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)brandManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)brandManufacturerToCheck).ManufacturerID);
            // Brands / BrandManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)brandManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)brandManufacturerToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)brandManufacturerToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)brandManufacturerToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)brandManufacturerToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)brandManufacturerToCheck).ManufacturerName);
            // Brands / BrandProduct / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandProductToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandProductToCheck).BrandID);
            // Brands / BrandProduct / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandProductToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandProductToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandProductToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandProductToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandProductToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandProductToCheck).BrandName);
            // Brands / BrandProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)brandProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)brandProductToCheck).ProductID);
            // Brands / BrandProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)brandProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)brandProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)brandProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)brandProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)brandProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)brandProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)brandProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)brandProductToCheck).ProductSeoUrl);
            // Brands / BrandProduct / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IProductModel>)brandProductToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IProductModel>)brandProductToCheck).BrandID);
            // Brands / BrandProduct / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IProductModel>)brandProductToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IProductModel>)brandProductToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IProductModel>)brandProductToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IProductModel>)brandProductToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IProductModel>)brandProductToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IProductModel>)brandProductToCheck).BrandName);
            // Brands / BrandProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)brandProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)brandProductToCheck).ProductID);
            // Brands / BrandProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)brandProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)brandProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)brandProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)brandProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)brandProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)brandProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)brandProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)brandProductToCheck).ProductSeoUrl);
            // Brands / BrandSiteDomain / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandSiteDomainToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandSiteDomainToCheck).BrandID);
            // Brands / BrandSiteDomain / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandSiteDomainToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandSiteDomainToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandSiteDomainToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandSiteDomainToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandSiteDomainToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandSiteDomainToCheck).BrandName);
            // Brands / BrandSiteDomain / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ISiteDomainModel>)brandSiteDomainToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ISiteDomainModel>)brandSiteDomainToCheck).BrandID);
            // Brands / BrandSiteDomain / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ISiteDomainModel>)brandSiteDomainToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ISiteDomainModel>)brandSiteDomainToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ISiteDomainModel>)brandSiteDomainToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ISiteDomainModel>)brandSiteDomainToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ISiteDomainModel>)brandSiteDomainToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<ISiteDomainModel>)brandSiteDomainToCheck).BrandName);
            // Brands / BrandStore / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandStoreToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandStoreToCheck).BrandID);
            // Brands / BrandStore / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandStoreToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandStoreToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandStoreToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandStoreToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandStoreToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandStoreToCheck).BrandName);
            // Brands / BrandStore / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IStoreModel>)brandStoreToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IStoreModel>)brandStoreToCheck).BrandID);
            // Brands / BrandStore / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IStoreModel>)brandStoreToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IStoreModel>)brandStoreToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IStoreModel>)brandStoreToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IStoreModel>)brandStoreToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IStoreModel>)brandStoreToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IStoreModel>)brandStoreToCheck).BrandName);
            // Brands / BrandStore / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)brandStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)brandStoreToCheck).StoreID);
            // Brands / BrandStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)brandStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)brandStoreToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)brandStoreToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)brandStoreToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)brandStoreToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)brandStoreToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)brandStoreToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)brandStoreToCheck).StoreSeoUrl);
            // Brands / BrandStore / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)brandStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)brandStoreToCheck).StoreID);
            // Brands / BrandStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)brandStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)brandStoreToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)brandStoreToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)brandStoreToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)brandStoreToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)brandStoreToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)brandStoreToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)brandStoreToCheck).StoreSeoUrl);
            // Brands / BrandUser / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandUserToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandUserToCheck).BrandID);
            // Brands / BrandUser / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandUserToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandUserToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandUserToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandUserToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandUserToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandUserToCheck).BrandName);
            // Brands / BrandUser / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IUserModel>)brandUserToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IUserModel>)brandUserToCheck).BrandID);
            // Brands / BrandUser / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IUserModel>)brandUserToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IUserModel>)brandUserToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IUserModel>)brandUserToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IUserModel>)brandUserToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IUserModel>)brandUserToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IUserModel>)brandUserToCheck).BrandName);
            // Brands / BrandUser / UserID as int
            Assert.Equal(1, ((IAmFilterableByUserModel)brandUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUserModel)brandUserToCheck).UserID);
            // Brands / BrandUser / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)brandUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)brandUserToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)brandUserToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)brandUserToCheck).UserKey);
            // Brands / BrandUser / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)brandUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)brandUserToCheck).UserID);
            // Brands / BrandUser / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)brandUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)brandUserToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)brandUserToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)brandUserToCheck).UserKey);
            // Brands / BrandVendor / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandVendorToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)brandVendorToCheck).BrandID);
            // Brands / BrandVendor / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandVendorToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)brandVendorToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandVendorToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)brandVendorToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandVendorToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)brandVendorToCheck).BrandName);
            // Brands / BrandVendor / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IVendorModel>)brandVendorToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IVendorModel>)brandVendorToCheck).BrandID);
            // Brands / BrandVendor / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IVendorModel>)brandVendorToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IVendorModel>)brandVendorToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IVendorModel>)brandVendorToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IVendorModel>)brandVendorToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IVendorModel>)brandVendorToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheMasterModel<IVendorModel>)brandVendorToCheck).BrandName);
            // Brands / BrandVendor / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendorModel)brandVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendorModel)brandVendorToCheck).VendorID);
            // Brands / BrandVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)brandVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)brandVendorToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)brandVendorToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)brandVendorToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)brandVendorToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)brandVendorToCheck).VendorName);
            // Brands / BrandVendor / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)brandVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)brandVendorToCheck).VendorID);
            // Brands / BrandVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)brandVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)brandVendorToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)brandVendorToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)brandVendorToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)brandVendorToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)brandVendorToCheck).VendorName);
            #endregion
            #region CalendarEvents
            // CalendarEvents / CalendarEvent / Images as ICollection<CalendarEventImage>
            Assert.Equal(calendarEventImageCollectionToAssign, calendarEventToCheck.Images = calendarEventImageCollectionToAssign);
            Assert.Equal(calendarEventImageCollectionToAssign, calendarEventToCheck.Images);
            // CalendarEvents / CalendarEvent / StoredFiles as ICollection<CalendarEventFile>
            Assert.Equal(calendarEventFileCollectionToAssign, calendarEventToCheck.StoredFiles = calendarEventFileCollectionToAssign);
            Assert.Equal(calendarEventFileCollectionToAssign, calendarEventToCheck.StoredFiles);
            // CalendarEvents / CalendarEvent / Products as ICollection<CalendarEventProduct>
            Assert.Equal(calendarEventProductCollectionToAssign, calendarEventToCheck.Products = calendarEventProductCollectionToAssign);
            Assert.Equal(calendarEventProductCollectionToAssign, calendarEventToCheck.Products);
            // CalendarEvents / CalendarEvent / CalendarEventDetails as ICollection<CalendarEventDetail>
            Assert.Equal(calendarEventDetailCollectionToAssign, calendarEventToCheck.CalendarEventDetails = calendarEventDetailCollectionToAssign);
            Assert.Equal(calendarEventDetailCollectionToAssign, calendarEventToCheck.CalendarEventDetails);
            // CalendarEvents / CalendarEvent / UserEventAttendances as ICollection<UserEventAttendance>
            Assert.Equal(userEventAttendanceCollectionToAssign, calendarEventToCheck.UserEventAttendances = userEventAttendanceCollectionToAssign);
            Assert.Equal(userEventAttendanceCollectionToAssign, calendarEventToCheck.UserEventAttendances);
            // CalendarEvents / CalendarEventProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)calendarEventProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)calendarEventProductToCheck).ProductID);
            // CalendarEvents / CalendarEventProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)calendarEventProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)calendarEventProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)calendarEventProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)calendarEventProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)calendarEventProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)calendarEventProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)calendarEventProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)calendarEventProductToCheck).ProductSeoUrl);
            // CalendarEvents / CalendarEventProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)calendarEventProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)calendarEventProductToCheck).ProductID);
            // CalendarEvents / CalendarEventProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)calendarEventProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)calendarEventProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)calendarEventProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)calendarEventProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)calendarEventProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)calendarEventProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)calendarEventProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)calendarEventProductToCheck).ProductSeoUrl);
            // CalendarEvents / UserEventAttendance / UserID as int
            Assert.Equal(1, ((IAmFilterableByUserModel)userEventAttendanceToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUserModel)userEventAttendanceToCheck).UserID);
            // CalendarEvents / UserEventAttendance / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)userEventAttendanceToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)userEventAttendanceToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)userEventAttendanceToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)userEventAttendanceToCheck).UserKey);
            // CalendarEvents / UserEventAttendance / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)userEventAttendanceToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)userEventAttendanceToCheck).UserID);
            // CalendarEvents / UserEventAttendance / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)userEventAttendanceToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)userEventAttendanceToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)userEventAttendanceToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)userEventAttendanceToCheck).UserKey);
            #endregion
            #region Categories
            // Categories / Category / Children as ICollection<Category>
            Assert.Equal(categoryCollectionToAssign, categoryToCheck.Children = categoryCollectionToAssign);
            Assert.Equal(categoryCollectionToAssign, categoryToCheck.Children);
            // Categories / Category / Brands as ICollection<BrandCategory>
            Assert.Equal(brandCategoryCollectionToAssign, categoryToCheck.Brands = brandCategoryCollectionToAssign);
            Assert.Equal(brandCategoryCollectionToAssign, categoryToCheck.Brands);
            // Categories / Category / Stores as ICollection<StoreCategory>
            Assert.Equal(storeCategoryCollectionToAssign, categoryToCheck.Stores = storeCategoryCollectionToAssign);
            Assert.Equal(storeCategoryCollectionToAssign, categoryToCheck.Stores);
            // Categories / Category / Franchises as ICollection<FranchiseCategory>
            Assert.Equal(franchiseCategoryCollectionToAssign, categoryToCheck.Franchises = franchiseCategoryCollectionToAssign);
            Assert.Equal(franchiseCategoryCollectionToAssign, categoryToCheck.Franchises);
            // Categories / Category / Products as ICollection<ProductCategory>
            Assert.Equal(productCategoryCollectionToAssign, categoryToCheck.Products = productCategoryCollectionToAssign);
            Assert.Equal(productCategoryCollectionToAssign, categoryToCheck.Products);
            // Categories / Category / Reviews as ICollection<Review>
            Assert.Equal(reviewCollectionToAssign, categoryToCheck.Reviews = reviewCollectionToAssign);
            Assert.Equal(reviewCollectionToAssign, categoryToCheck.Reviews);
            // Categories / Category / Images as ICollection<CategoryImage>
            Assert.Equal(categoryImageCollectionToAssign, categoryToCheck.Images = categoryImageCollectionToAssign);
            Assert.Equal(categoryImageCollectionToAssign, categoryToCheck.Images);
            // Categories / Category / StoredFiles as ICollection<CategoryFile>
            Assert.Equal(categoryFileCollectionToAssign, categoryToCheck.StoredFiles = categoryFileCollectionToAssign);
            Assert.Equal(categoryFileCollectionToAssign, categoryToCheck.StoredFiles);
            // Categories / CategoryFile / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategoryModel)categoryFileToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategoryModel)categoryFileToCheck).CategoryID);
            // Categories / CategoryFile / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)categoryFileToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)categoryFileToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)categoryFileToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)categoryFileToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)categoryFileToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)categoryFileToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)categoryFileToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)categoryFileToCheck).CategorySeoUrl);
            // Categories / CategoryFile / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheMasterModel<IStoredFileModel>)categoryFileToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheMasterModel<IStoredFileModel>)categoryFileToCheck).CategoryID);
            // Categories / CategoryFile / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheMasterModel<IStoredFileModel>)categoryFileToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheMasterModel<IStoredFileModel>)categoryFileToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheMasterModel<IStoredFileModel>)categoryFileToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheMasterModel<IStoredFileModel>)categoryFileToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheMasterModel<IStoredFileModel>)categoryFileToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheMasterModel<IStoredFileModel>)categoryFileToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheMasterModel<IStoredFileModel>)categoryFileToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheMasterModel<IStoredFileModel>)categoryFileToCheck).CategorySeoUrl);
            // Categories / CategoryImage / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategoryModel)categoryImageToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategoryModel)categoryImageToCheck).CategoryID);
            // Categories / CategoryImage / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)categoryImageToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)categoryImageToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)categoryImageToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)categoryImageToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)categoryImageToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)categoryImageToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)categoryImageToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)categoryImageToCheck).CategorySeoUrl);
            #endregion
            #region Contacts
            // Contacts / Contact / Images as ICollection<ContactImage>
            Assert.Equal(contactImageCollectionToAssign, contactToCheck.Images = contactImageCollectionToAssign);
            Assert.Equal(contactImageCollectionToAssign, contactToCheck.Images);
            // Contacts / Contact / Stores as ICollection<Store>
            Assert.Equal(storeCollectionToAssign, contactToCheck.Stores = storeCollectionToAssign);
            Assert.Equal(storeCollectionToAssign, contactToCheck.Stores);
            // Contacts / User / Brands as ICollection<BrandUser>
            Assert.Equal(brandUserCollectionToAssign, userToCheck.Brands = brandUserCollectionToAssign);
            Assert.Equal(brandUserCollectionToAssign, userToCheck.Brands);
            // Contacts / User / Franchises as ICollection<FranchiseUser>
            Assert.Equal(franchiseUserCollectionToAssign, userToCheck.Franchises = franchiseUserCollectionToAssign);
            Assert.Equal(franchiseUserCollectionToAssign, userToCheck.Franchises);
            // Contacts / User / Stores as ICollection<StoreUser>
            Assert.Equal(storeUserCollectionToAssign, userToCheck.Stores = storeUserCollectionToAssign);
            Assert.Equal(storeUserCollectionToAssign, userToCheck.Stores);
            // Contacts / User / Images as ICollection<UserImage>
            Assert.Equal(userImageCollectionToAssign, userToCheck.Images = userImageCollectionToAssign);
            Assert.Equal(userImageCollectionToAssign, userToCheck.Images);
            // Contacts / User / StoredFiles as ICollection<UserFile>
            Assert.Equal(userFileCollectionToAssign, userToCheck.StoredFiles = userFileCollectionToAssign);
            Assert.Equal(userFileCollectionToAssign, userToCheck.StoredFiles);
            // Contacts / User / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, userToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, userToCheck.Notes);
            // Contacts / User / Reviews as ICollection<Review>
            Assert.Equal(reviewCollectionToAssign, userToCheck.Reviews = reviewCollectionToAssign);
            Assert.Equal(reviewCollectionToAssign, userToCheck.Reviews);
            // Contacts / UserFile / UserID as int
            Assert.Equal(1, ((IAmFilterableByUserModel)userFileToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUserModel)userFileToCheck).UserID);
            // Contacts / UserFile / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)userFileToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)userFileToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)userFileToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)userFileToCheck).UserKey);
            // Contacts / UserFile / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheMasterModel<IStoredFileModel>)userFileToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheMasterModel<IStoredFileModel>)userFileToCheck).UserID);
            // Contacts / UserFile / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheMasterModel<IStoredFileModel>)userFileToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheMasterModel<IStoredFileModel>)userFileToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheMasterModel<IStoredFileModel>)userFileToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheMasterModel<IStoredFileModel>)userFileToCheck).UserKey);
            // Contacts / UserImage / UserID as int
            Assert.Equal(1, ((IAmFilterableByUserModel)userImageToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUserModel)userImageToCheck).UserID);
            // Contacts / UserImage / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)userImageToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)userImageToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)userImageToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)userImageToCheck).UserKey);
            // Contacts / UserProductType / UserID as int
            Assert.Equal(1, ((IAmFilterableByUserModel)userProductTypeToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUserModel)userProductTypeToCheck).UserID);
            // Contacts / UserProductType / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)userProductTypeToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)userProductTypeToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)userProductTypeToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)userProductTypeToCheck).UserKey);
            // Contacts / UserProductType / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheMasterModel<ITypeModel>)userProductTypeToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheMasterModel<ITypeModel>)userProductTypeToCheck).UserID);
            // Contacts / UserProductType / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheMasterModel<ITypeModel>)userProductTypeToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheMasterModel<ITypeModel>)userProductTypeToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheMasterModel<ITypeModel>)userProductTypeToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheMasterModel<ITypeModel>)userProductTypeToCheck).UserKey);
            #endregion
            #region Counters
            // Counters / Counter / CounterLogs as ICollection<CounterLog>
            Assert.Equal(counterLogCollectionToAssign, counterToCheck.CounterLogs = counterLogCollectionToAssign);
            Assert.Equal(counterLogCollectionToAssign, counterToCheck.CounterLogs);
            #endregion
            #region Currencies
            // Currencies / Currency / Images as ICollection<CurrencyImage>
            Assert.Equal(currencyImageCollectionToAssign, currencyToCheck.Images = currencyImageCollectionToAssign);
            Assert.Equal(currencyImageCollectionToAssign, currencyToCheck.Images);
            #endregion
            #region Discounts
            // Discounts / Discount / Products as ICollection<DiscountProduct>
            Assert.Equal(discountProductCollectionToAssign, discountToCheck.Products = discountProductCollectionToAssign);
            Assert.Equal(discountProductCollectionToAssign, discountToCheck.Products);
            // Discounts / Discount / Brands as ICollection<DiscountBrand>
            Assert.Equal(discountBrandCollectionToAssign, discountToCheck.Brands = discountBrandCollectionToAssign);
            Assert.Equal(discountBrandCollectionToAssign, discountToCheck.Brands);
            // Discounts / Discount / Franchises as ICollection<DiscountFranchise>
            Assert.Equal(discountFranchiseCollectionToAssign, discountToCheck.Franchises = discountFranchiseCollectionToAssign);
            Assert.Equal(discountFranchiseCollectionToAssign, discountToCheck.Franchises);
            // Discounts / Discount / Stores as ICollection<DiscountStore>
            Assert.Equal(discountStoreCollectionToAssign, discountToCheck.Stores = discountStoreCollectionToAssign);
            Assert.Equal(discountStoreCollectionToAssign, discountToCheck.Stores);
            // Discounts / Discount / Accounts as ICollection<DiscountAccount>
            Assert.Equal(discountAccountCollectionToAssign, discountToCheck.Accounts = discountAccountCollectionToAssign);
            Assert.Equal(discountAccountCollectionToAssign, discountToCheck.Accounts);
            // Discounts / Discount / Users as ICollection<DiscountUser>
            Assert.Equal(discountUserCollectionToAssign, discountToCheck.Users = discountUserCollectionToAssign);
            Assert.Equal(discountUserCollectionToAssign, discountToCheck.Users);
            // Discounts / Discount / Vendors as ICollection<DiscountVendor>
            Assert.Equal(discountVendorCollectionToAssign, discountToCheck.Vendors = discountVendorCollectionToAssign);
            Assert.Equal(discountVendorCollectionToAssign, discountToCheck.Vendors);
            // Discounts / Discount / Manufacturers as ICollection<DiscountManufacturer>
            Assert.Equal(discountManufacturerCollectionToAssign, discountToCheck.Manufacturers = discountManufacturerCollectionToAssign);
            Assert.Equal(discountManufacturerCollectionToAssign, discountToCheck.Manufacturers);
            // Discounts / Discount / Codes as ICollection<DiscountCode>
            Assert.Equal(discountCodeCollectionToAssign, discountToCheck.Codes = discountCodeCollectionToAssign);
            Assert.Equal(discountCodeCollectionToAssign, discountToCheck.Codes);
            // Discounts / Discount / Countries as ICollection<DiscountCountry>
            Assert.Equal(discountCountryCollectionToAssign, discountToCheck.Countries = discountCountryCollectionToAssign);
            Assert.Equal(discountCountryCollectionToAssign, discountToCheck.Countries);
            // Discounts / Discount / UserRoles as ICollection<DiscountUserRole>
            Assert.Equal(discountUserRoleCollectionToAssign, discountToCheck.UserRoles = discountUserRoleCollectionToAssign);
            Assert.Equal(discountUserRoleCollectionToAssign, discountToCheck.UserRoles);
            // Discounts / Discount / Categories as ICollection<DiscountCategory>
            Assert.Equal(discountCategoryCollectionToAssign, discountToCheck.Categories = discountCategoryCollectionToAssign);
            Assert.Equal(discountCategoryCollectionToAssign, discountToCheck.Categories);
            // Discounts / Discount / AccountTypes as ICollection<DiscountAccountType>
            Assert.Equal(discountAccountTypeCollectionToAssign, discountToCheck.AccountTypes = discountAccountTypeCollectionToAssign);
            Assert.Equal(discountAccountTypeCollectionToAssign, discountToCheck.AccountTypes);
            // Discounts / Discount / ProductTypes as ICollection<DiscountProductType>
            Assert.Equal(discountProductTypeCollectionToAssign, discountToCheck.ProductTypes = discountProductTypeCollectionToAssign);
            Assert.Equal(discountProductTypeCollectionToAssign, discountToCheck.ProductTypes);
            // Discounts / Discount / ShipCarrierMethods as ICollection<DiscountShipCarrierMethod>
            Assert.Equal(discountShipCarrierMethodCollectionToAssign, discountToCheck.ShipCarrierMethods = discountShipCarrierMethodCollectionToAssign);
            Assert.Equal(discountShipCarrierMethodCollectionToAssign, discountToCheck.ShipCarrierMethods);
            // Discounts / DiscountAccount / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccountModel)discountAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccountModel)discountAccountToCheck).AccountID);
            // Discounts / DiscountAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)discountAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)discountAccountToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)discountAccountToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)discountAccountToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)discountAccountToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)discountAccountToCheck).AccountName);
            // Discounts / DiscountAccount / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)discountAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)discountAccountToCheck).AccountID);
            // Discounts / DiscountAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)discountAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)discountAccountToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)discountAccountToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)discountAccountToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)discountAccountToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)discountAccountToCheck).AccountName);
            // Discounts / DiscountBrand / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)discountBrandToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)discountBrandToCheck).BrandID);
            // Discounts / DiscountBrand / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)discountBrandToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)discountBrandToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)discountBrandToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)discountBrandToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)discountBrandToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)discountBrandToCheck).BrandName);
            // Discounts / DiscountBrand / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)discountBrandToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)discountBrandToCheck).BrandID);
            // Discounts / DiscountBrand / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)discountBrandToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)discountBrandToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)discountBrandToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)discountBrandToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)discountBrandToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)discountBrandToCheck).BrandName);
            // Discounts / DiscountCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategoryModel)discountCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategoryModel)discountCategoryToCheck).CategoryID);
            // Discounts / DiscountCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)discountCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)discountCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)discountCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)discountCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)discountCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)discountCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)discountCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)discountCategoryToCheck).CategorySeoUrl);
            // Discounts / DiscountCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)discountCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)discountCategoryToCheck).CategoryID);
            // Discounts / DiscountCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)discountCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)discountCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)discountCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)discountCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)discountCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)discountCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)discountCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)discountCategoryToCheck).CategorySeoUrl);
            // Discounts / DiscountFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)discountFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)discountFranchiseToCheck).FranchiseID);
            // Discounts / DiscountFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)discountFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)discountFranchiseToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)discountFranchiseToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)discountFranchiseToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)discountFranchiseToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)discountFranchiseToCheck).FranchiseName);
            // Discounts / DiscountFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)discountFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)discountFranchiseToCheck).FranchiseID);
            // Discounts / DiscountFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)discountFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)discountFranchiseToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)discountFranchiseToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)discountFranchiseToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)discountFranchiseToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)discountFranchiseToCheck).FranchiseName);
            // Discounts / DiscountManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)discountManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)discountManufacturerToCheck).ManufacturerID);
            // Discounts / DiscountManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)discountManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)discountManufacturerToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)discountManufacturerToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)discountManufacturerToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)discountManufacturerToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)discountManufacturerToCheck).ManufacturerName);
            // Discounts / DiscountManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)discountManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)discountManufacturerToCheck).ManufacturerID);
            // Discounts / DiscountManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)discountManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)discountManufacturerToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)discountManufacturerToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)discountManufacturerToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)discountManufacturerToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)discountManufacturerToCheck).ManufacturerName);
            // Discounts / DiscountProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)discountProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)discountProductToCheck).ProductID);
            // Discounts / DiscountProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)discountProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)discountProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)discountProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)discountProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)discountProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)discountProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)discountProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)discountProductToCheck).ProductSeoUrl);
            // Discounts / DiscountProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)discountProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)discountProductToCheck).ProductID);
            // Discounts / DiscountProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)discountProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)discountProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)discountProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)discountProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)discountProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)discountProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)discountProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)discountProductToCheck).ProductSeoUrl);
            // Discounts / DiscountStore / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)discountStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)discountStoreToCheck).StoreID);
            // Discounts / DiscountStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)discountStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)discountStoreToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)discountStoreToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)discountStoreToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)discountStoreToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)discountStoreToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)discountStoreToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)discountStoreToCheck).StoreSeoUrl);
            // Discounts / DiscountStore / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)discountStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)discountStoreToCheck).StoreID);
            // Discounts / DiscountStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)discountStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)discountStoreToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)discountStoreToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)discountStoreToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)discountStoreToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)discountStoreToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)discountStoreToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)discountStoreToCheck).StoreSeoUrl);
            // Discounts / DiscountUser / UserID as int
            Assert.Equal(1, ((IAmFilterableByUserModel)discountUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUserModel)discountUserToCheck).UserID);
            // Discounts / DiscountUser / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)discountUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)discountUserToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)discountUserToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)discountUserToCheck).UserKey);
            // Discounts / DiscountUser / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)discountUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)discountUserToCheck).UserID);
            // Discounts / DiscountUser / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)discountUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)discountUserToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)discountUserToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)discountUserToCheck).UserKey);
            // Discounts / DiscountVendor / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendorModel)discountVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendorModel)discountVendorToCheck).VendorID);
            // Discounts / DiscountVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)discountVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)discountVendorToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)discountVendorToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)discountVendorToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)discountVendorToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)discountVendorToCheck).VendorName);
            // Discounts / DiscountVendor / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)discountVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)discountVendorToCheck).VendorID);
            // Discounts / DiscountVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)discountVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)discountVendorToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)discountVendorToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)discountVendorToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)discountVendorToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)discountVendorToCheck).VendorName);
            #endregion
            #region Favorites
            // Favorites / FavoriteManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)favoriteManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)favoriteManufacturerToCheck).ManufacturerID);
            // Favorites / FavoriteManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)favoriteManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)favoriteManufacturerToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)favoriteManufacturerToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)favoriteManufacturerToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)favoriteManufacturerToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)favoriteManufacturerToCheck).ManufacturerName);
            // Favorites / FavoriteManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)favoriteManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)favoriteManufacturerToCheck).ManufacturerID);
            // Favorites / FavoriteManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)favoriteManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)favoriteManufacturerToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)favoriteManufacturerToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)favoriteManufacturerToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)favoriteManufacturerToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)favoriteManufacturerToCheck).ManufacturerName);
            // Favorites / FavoriteStore / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)favoriteStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)favoriteStoreToCheck).StoreID);
            // Favorites / FavoriteStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)favoriteStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)favoriteStoreToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)favoriteStoreToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)favoriteStoreToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)favoriteStoreToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)favoriteStoreToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)favoriteStoreToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)favoriteStoreToCheck).StoreSeoUrl);
            // Favorites / FavoriteStore / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)favoriteStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)favoriteStoreToCheck).StoreID);
            // Favorites / FavoriteStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)favoriteStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)favoriteStoreToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)favoriteStoreToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)favoriteStoreToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)favoriteStoreToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)favoriteStoreToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)favoriteStoreToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)favoriteStoreToCheck).StoreSeoUrl);
            // Favorites / FavoriteVendor / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendorModel)favoriteVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendorModel)favoriteVendorToCheck).VendorID);
            // Favorites / FavoriteVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)favoriteVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)favoriteVendorToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)favoriteVendorToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)favoriteVendorToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)favoriteVendorToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)favoriteVendorToCheck).VendorName);
            // Favorites / FavoriteVendor / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)favoriteVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)favoriteVendorToCheck).VendorID);
            // Favorites / FavoriteVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)favoriteVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)favoriteVendorToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)favoriteVendorToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)favoriteVendorToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)favoriteVendorToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)favoriteVendorToCheck).VendorName);
            #endregion
            #region Franchises
            // Franchises / Franchise / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, franchiseToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, franchiseToCheck.Notes);
            // Franchises / Franchise / Images as ICollection<FranchiseImage>
            Assert.Equal(franchiseImageCollectionToAssign, franchiseToCheck.Images = franchiseImageCollectionToAssign);
            Assert.Equal(franchiseImageCollectionToAssign, franchiseToCheck.Images);
            // Franchises / Franchise / Accounts as ICollection<FranchiseAccount>
            Assert.Equal(franchiseAccountCollectionToAssign, franchiseToCheck.Accounts = franchiseAccountCollectionToAssign);
            Assert.Equal(franchiseAccountCollectionToAssign, franchiseToCheck.Accounts);
            // Franchises / Franchise / Brands as ICollection<BrandFranchise>
            Assert.Equal(brandFranchiseCollectionToAssign, franchiseToCheck.Brands = brandFranchiseCollectionToAssign);
            Assert.Equal(brandFranchiseCollectionToAssign, franchiseToCheck.Brands);
            // Franchises / Franchise / Categories as ICollection<FranchiseCategory>
            Assert.Equal(franchiseCategoryCollectionToAssign, franchiseToCheck.Categories = franchiseCategoryCollectionToAssign);
            Assert.Equal(franchiseCategoryCollectionToAssign, franchiseToCheck.Categories);
            // Franchises / Franchise / Manufacturers as ICollection<FranchiseManufacturer>
            Assert.Equal(franchiseManufacturerCollectionToAssign, franchiseToCheck.Manufacturers = franchiseManufacturerCollectionToAssign);
            Assert.Equal(franchiseManufacturerCollectionToAssign, franchiseToCheck.Manufacturers);
            // Franchises / Franchise / Products as ICollection<FranchiseProduct>
            Assert.Equal(franchiseProductCollectionToAssign, franchiseToCheck.Products = franchiseProductCollectionToAssign);
            Assert.Equal(franchiseProductCollectionToAssign, franchiseToCheck.Products);
            // Franchises / Franchise / Stores as ICollection<FranchiseStore>
            Assert.Equal(franchiseStoreCollectionToAssign, franchiseToCheck.Stores = franchiseStoreCollectionToAssign);
            Assert.Equal(franchiseStoreCollectionToAssign, franchiseToCheck.Stores);
            // Franchises / Franchise / Users as ICollection<FranchiseUser>
            Assert.Equal(franchiseUserCollectionToAssign, franchiseToCheck.Users = franchiseUserCollectionToAssign);
            Assert.Equal(franchiseUserCollectionToAssign, franchiseToCheck.Users);
            // Franchises / Franchise / Vendors as ICollection<FranchiseVendor>
            Assert.Equal(franchiseVendorCollectionToAssign, franchiseToCheck.Vendors = franchiseVendorCollectionToAssign);
            Assert.Equal(franchiseVendorCollectionToAssign, franchiseToCheck.Vendors);
            // Franchises / Franchise / FranchiseCurrencies as ICollection<FranchiseCurrency>
            Assert.Equal(franchiseCurrencyCollectionToAssign, franchiseToCheck.FranchiseCurrencies = franchiseCurrencyCollectionToAssign);
            Assert.Equal(franchiseCurrencyCollectionToAssign, franchiseToCheck.FranchiseCurrencies);
            // Franchises / Franchise / FranchiseInventoryLocations as ICollection<FranchiseInventoryLocation>
            Assert.Equal(franchiseInventoryLocationCollectionToAssign, franchiseToCheck.FranchiseInventoryLocations = franchiseInventoryLocationCollectionToAssign);
            Assert.Equal(franchiseInventoryLocationCollectionToAssign, franchiseToCheck.FranchiseInventoryLocations);
            // Franchises / Franchise / FranchiseLanguages as ICollection<FranchiseLanguage>
            Assert.Equal(franchiseLanguageCollectionToAssign, franchiseToCheck.FranchiseLanguages = franchiseLanguageCollectionToAssign);
            Assert.Equal(franchiseLanguageCollectionToAssign, franchiseToCheck.FranchiseLanguages);
            // Franchises / Franchise / FranchiseSiteDomains as ICollection<FranchiseSiteDomain>
            Assert.Equal(franchiseSiteDomainCollectionToAssign, franchiseToCheck.FranchiseSiteDomains = franchiseSiteDomainCollectionToAssign);
            Assert.Equal(franchiseSiteDomainCollectionToAssign, franchiseToCheck.FranchiseSiteDomains);
            // Franchises / Franchise / FranchiseCountries as ICollection<FranchiseCountry>
            Assert.Equal(franchiseCountryCollectionToAssign, franchiseToCheck.FranchiseCountries = franchiseCountryCollectionToAssign);
            Assert.Equal(franchiseCountryCollectionToAssign, franchiseToCheck.FranchiseCountries);
            // Franchises / Franchise / FranchiseRegions as ICollection<FranchiseRegion>
            Assert.Equal(franchiseRegionCollectionToAssign, franchiseToCheck.FranchiseRegions = franchiseRegionCollectionToAssign);
            Assert.Equal(franchiseRegionCollectionToAssign, franchiseToCheck.FranchiseRegions);
            // Franchises / Franchise / FranchiseDistricts as ICollection<FranchiseDistrict>
            Assert.Equal(franchiseDistrictCollectionToAssign, franchiseToCheck.FranchiseDistricts = franchiseDistrictCollectionToAssign);
            Assert.Equal(franchiseDistrictCollectionToAssign, franchiseToCheck.FranchiseDistricts);
            // Franchises / FranchiseAccount / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseAccountToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseAccountToCheck).FranchiseID);
            // Franchises / FranchiseAccount / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseAccountToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseAccountToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseAccountToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseAccountToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseAccountToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseAccountToCheck).FranchiseName);
            // Franchises / FranchiseAccount / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAccountModel>)franchiseAccountToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAccountModel>)franchiseAccountToCheck).FranchiseID);
            // Franchises / FranchiseAccount / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAccountModel>)franchiseAccountToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAccountModel>)franchiseAccountToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAccountModel>)franchiseAccountToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAccountModel>)franchiseAccountToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAccountModel>)franchiseAccountToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IAccountModel>)franchiseAccountToCheck).FranchiseName);
            // Franchises / FranchiseAccount / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccountModel)franchiseAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccountModel)franchiseAccountToCheck).AccountID);
            // Franchises / FranchiseAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)franchiseAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)franchiseAccountToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)franchiseAccountToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)franchiseAccountToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)franchiseAccountToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)franchiseAccountToCheck).AccountName);
            // Franchises / FranchiseAccount / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)franchiseAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)franchiseAccountToCheck).AccountID);
            // Franchises / FranchiseAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)franchiseAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)franchiseAccountToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)franchiseAccountToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)franchiseAccountToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)franchiseAccountToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)franchiseAccountToCheck).AccountName);
            // Franchises / FranchiseCategory / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseCategoryToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseCategoryToCheck).FranchiseID);
            // Franchises / FranchiseCategory / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseCategoryToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseCategoryToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseCategoryToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseCategoryToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseCategoryToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseCategoryToCheck).FranchiseName);
            // Franchises / FranchiseCategory / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICategoryModel>)franchiseCategoryToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICategoryModel>)franchiseCategoryToCheck).FranchiseID);
            // Franchises / FranchiseCategory / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICategoryModel>)franchiseCategoryToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICategoryModel>)franchiseCategoryToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICategoryModel>)franchiseCategoryToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICategoryModel>)franchiseCategoryToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICategoryModel>)franchiseCategoryToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICategoryModel>)franchiseCategoryToCheck).FranchiseName);
            // Franchises / FranchiseCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategoryModel)franchiseCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategoryModel)franchiseCategoryToCheck).CategoryID);
            // Franchises / FranchiseCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)franchiseCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)franchiseCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)franchiseCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)franchiseCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)franchiseCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)franchiseCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)franchiseCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)franchiseCategoryToCheck).CategorySeoUrl);
            // Franchises / FranchiseCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)franchiseCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)franchiseCategoryToCheck).CategoryID);
            // Franchises / FranchiseCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)franchiseCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)franchiseCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)franchiseCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)franchiseCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)franchiseCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)franchiseCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)franchiseCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)franchiseCategoryToCheck).CategorySeoUrl);
            // Franchises / FranchiseCountry / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseCountryToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseCountryToCheck).FranchiseID);
            // Franchises / FranchiseCountry / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseCountryToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseCountryToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseCountryToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseCountryToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseCountryToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseCountryToCheck).FranchiseName);
            // Franchises / FranchiseCountry / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICountryModel>)franchiseCountryToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICountryModel>)franchiseCountryToCheck).FranchiseID);
            // Franchises / FranchiseCountry / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICountryModel>)franchiseCountryToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICountryModel>)franchiseCountryToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICountryModel>)franchiseCountryToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICountryModel>)franchiseCountryToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICountryModel>)franchiseCountryToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICountryModel>)franchiseCountryToCheck).FranchiseName);
            // Franchises / FranchiseCurrency / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseCurrencyToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseCurrencyToCheck).FranchiseID);
            // Franchises / FranchiseCurrency / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseCurrencyToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseCurrencyToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseCurrencyToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseCurrencyToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseCurrencyToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseCurrencyToCheck).FranchiseName);
            // Franchises / FranchiseCurrency / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICurrencyModel>)franchiseCurrencyToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICurrencyModel>)franchiseCurrencyToCheck).FranchiseID);
            // Franchises / FranchiseCurrency / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICurrencyModel>)franchiseCurrencyToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICurrencyModel>)franchiseCurrencyToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICurrencyModel>)franchiseCurrencyToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICurrencyModel>)franchiseCurrencyToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICurrencyModel>)franchiseCurrencyToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ICurrencyModel>)franchiseCurrencyToCheck).FranchiseName);
            // Franchises / FranchiseDistrict / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseDistrictToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseDistrictToCheck).FranchiseID);
            // Franchises / FranchiseDistrict / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseDistrictToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseDistrictToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseDistrictToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseDistrictToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseDistrictToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseDistrictToCheck).FranchiseName);
            // Franchises / FranchiseDistrict / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IDistrictModel>)franchiseDistrictToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IDistrictModel>)franchiseDistrictToCheck).FranchiseID);
            // Franchises / FranchiseDistrict / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IDistrictModel>)franchiseDistrictToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IDistrictModel>)franchiseDistrictToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IDistrictModel>)franchiseDistrictToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IDistrictModel>)franchiseDistrictToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IDistrictModel>)franchiseDistrictToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IDistrictModel>)franchiseDistrictToCheck).FranchiseName);
            // Franchises / FranchiseImage / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseImageToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseImageToCheck).FranchiseID);
            // Franchises / FranchiseImage / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseImageToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseImageToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseImageToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseImageToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseImageToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseImageToCheck).FranchiseName);
            // Franchises / FranchiseInventoryLocation / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseInventoryLocationToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseInventoryLocationToCheck).FranchiseID);
            // Franchises / FranchiseInventoryLocation / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseInventoryLocationToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseInventoryLocationToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseInventoryLocationToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseInventoryLocationToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseInventoryLocationToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseInventoryLocationToCheck).FranchiseName);
            // Franchises / FranchiseInventoryLocation / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IInventoryLocationModel>)franchiseInventoryLocationToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IInventoryLocationModel>)franchiseInventoryLocationToCheck).FranchiseID);
            // Franchises / FranchiseInventoryLocation / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IInventoryLocationModel>)franchiseInventoryLocationToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IInventoryLocationModel>)franchiseInventoryLocationToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IInventoryLocationModel>)franchiseInventoryLocationToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IInventoryLocationModel>)franchiseInventoryLocationToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IInventoryLocationModel>)franchiseInventoryLocationToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IInventoryLocationModel>)franchiseInventoryLocationToCheck).FranchiseName);
            // Franchises / FranchiseLanguage / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseLanguageToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseLanguageToCheck).FranchiseID);
            // Franchises / FranchiseLanguage / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseLanguageToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseLanguageToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseLanguageToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseLanguageToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseLanguageToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseLanguageToCheck).FranchiseName);
            // Franchises / FranchiseLanguage / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ILanguageModel>)franchiseLanguageToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ILanguageModel>)franchiseLanguageToCheck).FranchiseID);
            // Franchises / FranchiseLanguage / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ILanguageModel>)franchiseLanguageToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ILanguageModel>)franchiseLanguageToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ILanguageModel>)franchiseLanguageToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ILanguageModel>)franchiseLanguageToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ILanguageModel>)franchiseLanguageToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ILanguageModel>)franchiseLanguageToCheck).FranchiseName);
            // Franchises / FranchiseManufacturer / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseManufacturerToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseManufacturerToCheck).FranchiseID);
            // Franchises / FranchiseManufacturer / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseManufacturerToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseManufacturerToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseManufacturerToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseManufacturerToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseManufacturerToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseManufacturerToCheck).FranchiseName);
            // Franchises / FranchiseManufacturer / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IManufacturerModel>)franchiseManufacturerToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IManufacturerModel>)franchiseManufacturerToCheck).FranchiseID);
            // Franchises / FranchiseManufacturer / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IManufacturerModel>)franchiseManufacturerToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IManufacturerModel>)franchiseManufacturerToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IManufacturerModel>)franchiseManufacturerToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IManufacturerModel>)franchiseManufacturerToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IManufacturerModel>)franchiseManufacturerToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IManufacturerModel>)franchiseManufacturerToCheck).FranchiseName);
            // Franchises / FranchiseManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)franchiseManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)franchiseManufacturerToCheck).ManufacturerID);
            // Franchises / FranchiseManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)franchiseManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)franchiseManufacturerToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)franchiseManufacturerToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)franchiseManufacturerToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)franchiseManufacturerToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)franchiseManufacturerToCheck).ManufacturerName);
            // Franchises / FranchiseManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)franchiseManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)franchiseManufacturerToCheck).ManufacturerID);
            // Franchises / FranchiseManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)franchiseManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)franchiseManufacturerToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)franchiseManufacturerToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)franchiseManufacturerToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)franchiseManufacturerToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)franchiseManufacturerToCheck).ManufacturerName);
            // Franchises / FranchiseProduct / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseProductToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseProductToCheck).FranchiseID);
            // Franchises / FranchiseProduct / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseProductToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseProductToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseProductToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseProductToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseProductToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseProductToCheck).FranchiseName);
            // Franchises / FranchiseProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)franchiseProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)franchiseProductToCheck).ProductID);
            // Franchises / FranchiseProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)franchiseProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)franchiseProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)franchiseProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)franchiseProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)franchiseProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)franchiseProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)franchiseProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)franchiseProductToCheck).ProductSeoUrl);
            // Franchises / FranchiseProduct / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IProductModel>)franchiseProductToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IProductModel>)franchiseProductToCheck).FranchiseID);
            // Franchises / FranchiseProduct / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IProductModel>)franchiseProductToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IProductModel>)franchiseProductToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IProductModel>)franchiseProductToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IProductModel>)franchiseProductToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IProductModel>)franchiseProductToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IProductModel>)franchiseProductToCheck).FranchiseName);
            // Franchises / FranchiseProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)franchiseProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)franchiseProductToCheck).ProductID);
            // Franchises / FranchiseProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)franchiseProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)franchiseProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)franchiseProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)franchiseProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)franchiseProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)franchiseProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)franchiseProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)franchiseProductToCheck).ProductSeoUrl);
            // Franchises / FranchiseRegion / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseRegionToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseRegionToCheck).FranchiseID);
            // Franchises / FranchiseRegion / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseRegionToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseRegionToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseRegionToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseRegionToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseRegionToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseRegionToCheck).FranchiseName);
            // Franchises / FranchiseRegion / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IRegionModel>)franchiseRegionToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IRegionModel>)franchiseRegionToCheck).FranchiseID);
            // Franchises / FranchiseRegion / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IRegionModel>)franchiseRegionToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IRegionModel>)franchiseRegionToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IRegionModel>)franchiseRegionToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IRegionModel>)franchiseRegionToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IRegionModel>)franchiseRegionToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IRegionModel>)franchiseRegionToCheck).FranchiseName);
            // Franchises / FranchiseSiteDomain / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseSiteDomainToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseSiteDomainToCheck).FranchiseID);
            // Franchises / FranchiseSiteDomain / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseSiteDomainToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseSiteDomainToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseSiteDomainToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseSiteDomainToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseSiteDomainToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseSiteDomainToCheck).FranchiseName);
            // Franchises / FranchiseSiteDomain / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ISiteDomainModel>)franchiseSiteDomainToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ISiteDomainModel>)franchiseSiteDomainToCheck).FranchiseID);
            // Franchises / FranchiseSiteDomain / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ISiteDomainModel>)franchiseSiteDomainToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ISiteDomainModel>)franchiseSiteDomainToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ISiteDomainModel>)franchiseSiteDomainToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ISiteDomainModel>)franchiseSiteDomainToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ISiteDomainModel>)franchiseSiteDomainToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<ISiteDomainModel>)franchiseSiteDomainToCheck).FranchiseName);
            // Franchises / FranchiseStore / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseStoreToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseStoreToCheck).FranchiseID);
            // Franchises / FranchiseStore / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseStoreToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseStoreToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseStoreToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseStoreToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseStoreToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseStoreToCheck).FranchiseName);
            // Franchises / FranchiseStore / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IStoreModel>)franchiseStoreToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IStoreModel>)franchiseStoreToCheck).FranchiseID);
            // Franchises / FranchiseStore / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IStoreModel>)franchiseStoreToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IStoreModel>)franchiseStoreToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IStoreModel>)franchiseStoreToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IStoreModel>)franchiseStoreToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IStoreModel>)franchiseStoreToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IStoreModel>)franchiseStoreToCheck).FranchiseName);
            // Franchises / FranchiseStore / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)franchiseStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)franchiseStoreToCheck).StoreID);
            // Franchises / FranchiseStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)franchiseStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)franchiseStoreToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)franchiseStoreToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)franchiseStoreToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)franchiseStoreToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)franchiseStoreToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)franchiseStoreToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)franchiseStoreToCheck).StoreSeoUrl);
            // Franchises / FranchiseStore / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)franchiseStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)franchiseStoreToCheck).StoreID);
            // Franchises / FranchiseStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)franchiseStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)franchiseStoreToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)franchiseStoreToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)franchiseStoreToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)franchiseStoreToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)franchiseStoreToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)franchiseStoreToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)franchiseStoreToCheck).StoreSeoUrl);
            // Franchises / FranchiseUser / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseUserToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseUserToCheck).FranchiseID);
            // Franchises / FranchiseUser / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseUserToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseUserToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseUserToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseUserToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseUserToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseUserToCheck).FranchiseName);
            // Franchises / FranchiseUser / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IUserModel>)franchiseUserToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IUserModel>)franchiseUserToCheck).FranchiseID);
            // Franchises / FranchiseUser / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IUserModel>)franchiseUserToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IUserModel>)franchiseUserToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IUserModel>)franchiseUserToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IUserModel>)franchiseUserToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IUserModel>)franchiseUserToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IUserModel>)franchiseUserToCheck).FranchiseName);
            // Franchises / FranchiseUser / UserID as int
            Assert.Equal(1, ((IAmFilterableByUserModel)franchiseUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUserModel)franchiseUserToCheck).UserID);
            // Franchises / FranchiseUser / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)franchiseUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)franchiseUserToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)franchiseUserToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)franchiseUserToCheck).UserKey);
            // Franchises / FranchiseUser / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)franchiseUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)franchiseUserToCheck).UserID);
            // Franchises / FranchiseUser / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)franchiseUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)franchiseUserToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)franchiseUserToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)franchiseUserToCheck).UserKey);
            // Franchises / FranchiseVendor / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseVendorToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)franchiseVendorToCheck).FranchiseID);
            // Franchises / FranchiseVendor / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseVendorToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)franchiseVendorToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseVendorToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)franchiseVendorToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseVendorToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)franchiseVendorToCheck).FranchiseName);
            // Franchises / FranchiseVendor / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IVendorModel>)franchiseVendorToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IVendorModel>)franchiseVendorToCheck).FranchiseID);
            // Franchises / FranchiseVendor / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IVendorModel>)franchiseVendorToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IVendorModel>)franchiseVendorToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IVendorModel>)franchiseVendorToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IVendorModel>)franchiseVendorToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IVendorModel>)franchiseVendorToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheMasterModel<IVendorModel>)franchiseVendorToCheck).FranchiseName);
            // Franchises / FranchiseVendor / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendorModel)franchiseVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendorModel)franchiseVendorToCheck).VendorID);
            // Franchises / FranchiseVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)franchiseVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)franchiseVendorToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)franchiseVendorToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)franchiseVendorToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)franchiseVendorToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)franchiseVendorToCheck).VendorName);
            // Franchises / FranchiseVendor / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)franchiseVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)franchiseVendorToCheck).VendorID);
            // Franchises / FranchiseVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)franchiseVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)franchiseVendorToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)franchiseVendorToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)franchiseVendorToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)franchiseVendorToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)franchiseVendorToCheck).VendorName);
            #endregion
            #region Geography
            // Geography / Country / Images as ICollection<CountryImage>
            Assert.Equal(countryImageCollectionToAssign, countryToCheck.Images = countryImageCollectionToAssign);
            Assert.Equal(countryImageCollectionToAssign, countryToCheck.Images);
            // Geography / Country / Languages as ICollection<CountryLanguage>
            Assert.Equal(countryLanguageCollectionToAssign, countryToCheck.Languages = countryLanguageCollectionToAssign);
            Assert.Equal(countryLanguageCollectionToAssign, countryToCheck.Languages);
            // Geography / Country / Currencies as ICollection<CountryCurrency>
            Assert.Equal(countryCurrencyCollectionToAssign, countryToCheck.Currencies = countryCurrencyCollectionToAssign);
            Assert.Equal(countryCurrencyCollectionToAssign, countryToCheck.Currencies);
            // Geography / Country / Regions as ICollection<Region>
            Assert.Equal(regionCollectionToAssign, countryToCheck.Regions = regionCollectionToAssign);
            Assert.Equal(regionCollectionToAssign, countryToCheck.Regions);
            // Geography / District / Images as ICollection<DistrictImage>
            Assert.Equal(districtImageCollectionToAssign, districtToCheck.Images = districtImageCollectionToAssign);
            Assert.Equal(districtImageCollectionToAssign, districtToCheck.Images);
            // Geography / District / Languages as ICollection<DistrictLanguage>
            Assert.Equal(districtLanguageCollectionToAssign, districtToCheck.Languages = districtLanguageCollectionToAssign);
            Assert.Equal(districtLanguageCollectionToAssign, districtToCheck.Languages);
            // Geography / District / Currencies as ICollection<DistrictCurrency>
            Assert.Equal(districtCurrencyCollectionToAssign, districtToCheck.Currencies = districtCurrencyCollectionToAssign);
            Assert.Equal(districtCurrencyCollectionToAssign, districtToCheck.Currencies);
            // Geography / Region / Images as ICollection<RegionImage>
            Assert.Equal(regionImageCollectionToAssign, regionToCheck.Images = regionImageCollectionToAssign);
            Assert.Equal(regionImageCollectionToAssign, regionToCheck.Images);
            // Geography / Region / Languages as ICollection<RegionLanguage>
            Assert.Equal(regionLanguageCollectionToAssign, regionToCheck.Languages = regionLanguageCollectionToAssign);
            Assert.Equal(regionLanguageCollectionToAssign, regionToCheck.Languages);
            // Geography / Region / Currencies as ICollection<RegionCurrency>
            Assert.Equal(regionCurrencyCollectionToAssign, regionToCheck.Currencies = regionCurrencyCollectionToAssign);
            Assert.Equal(regionCurrencyCollectionToAssign, regionToCheck.Currencies);
            #endregion
            #region Globalization
            // Globalization / Language / Images as ICollection<LanguageImage>
            Assert.Equal(languageImageCollectionToAssign, languageToCheck.Images = languageImageCollectionToAssign);
            Assert.Equal(languageImageCollectionToAssign, languageToCheck.Images);
            // Globalization / UiKey / UiTranslations as ICollection<UiTranslation>
            Assert.Equal(uiTranslationCollectionToAssign, uiKeyToCheck.UiTranslations = uiTranslationCollectionToAssign);
            Assert.Equal(uiTranslationCollectionToAssign, uiKeyToCheck.UiTranslations);
            #endregion
            #region Groups
            // Groups / Group / Children as ICollection<Group>
            Assert.Equal(groupCollectionToAssign, groupToCheck.Children = groupCollectionToAssign);
            Assert.Equal(groupCollectionToAssign, groupToCheck.Children);
            // Groups / Group / Users as ICollection<GroupUser>
            Assert.Equal(groupUserCollectionToAssign, groupToCheck.Users = groupUserCollectionToAssign);
            Assert.Equal(groupUserCollectionToAssign, groupToCheck.Users);
            // Groups / GroupUser / UserID as int
            Assert.Equal(1, ((IAmFilterableByUserModel)groupUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUserModel)groupUserToCheck).UserID);
            // Groups / GroupUser / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)groupUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)groupUserToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)groupUserToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)groupUserToCheck).UserKey);
            // Groups / GroupUser / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)groupUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)groupUserToCheck).UserID);
            // Groups / GroupUser / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)groupUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)groupUserToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)groupUserToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)groupUserToCheck).UserKey);
            #endregion
            #region Hangfire
            // Hangfire / ScheduledJobConfiguration / ScheduledJobConfigurationSettings as ICollection<ScheduledJobConfigurationSetting>
            Assert.Equal(scheduledJobConfigurationSettingCollectionToAssign, scheduledJobConfigurationToCheck.ScheduledJobConfigurationSettings = scheduledJobConfigurationSettingCollectionToAssign);
            Assert.Equal(scheduledJobConfigurationSettingCollectionToAssign, scheduledJobConfigurationToCheck.ScheduledJobConfigurationSettings);
            #endregion
            #region Inventory
            // Inventory / InventoryLocation / Brands as ICollection<BrandInventoryLocation>
            Assert.Equal(brandInventoryLocationCollectionToAssign, inventoryLocationToCheck.Brands = brandInventoryLocationCollectionToAssign);
            Assert.Equal(brandInventoryLocationCollectionToAssign, inventoryLocationToCheck.Brands);
            // Inventory / InventoryLocation / Franchises as ICollection<FranchiseInventoryLocation>
            Assert.Equal(franchiseInventoryLocationCollectionToAssign, inventoryLocationToCheck.Franchises = franchiseInventoryLocationCollectionToAssign);
            Assert.Equal(franchiseInventoryLocationCollectionToAssign, inventoryLocationToCheck.Franchises);
            // Inventory / InventoryLocation / Stores as ICollection<StoreInventoryLocation>
            Assert.Equal(storeInventoryLocationCollectionToAssign, inventoryLocationToCheck.Stores = storeInventoryLocationCollectionToAssign);
            Assert.Equal(storeInventoryLocationCollectionToAssign, inventoryLocationToCheck.Stores);
            // Inventory / InventoryLocation / Sections as ICollection<InventoryLocationSection>
            Assert.Equal(inventoryLocationSectionCollectionToAssign, inventoryLocationToCheck.Sections = inventoryLocationSectionCollectionToAssign);
            Assert.Equal(inventoryLocationSectionCollectionToAssign, inventoryLocationToCheck.Sections);
            // Inventory / InventoryLocation / Regions as ICollection<InventoryLocationRegion>
            Assert.Equal(inventoryLocationRegionCollectionToAssign, inventoryLocationToCheck.Regions = inventoryLocationRegionCollectionToAssign);
            Assert.Equal(inventoryLocationRegionCollectionToAssign, inventoryLocationToCheck.Regions);
            // Inventory / InventoryLocation / Users as ICollection<InventoryLocationUser>
            Assert.Equal(inventoryLocationUserCollectionToAssign, inventoryLocationToCheck.Users = inventoryLocationUserCollectionToAssign);
            Assert.Equal(inventoryLocationUserCollectionToAssign, inventoryLocationToCheck.Users);
            // Inventory / InventoryLocationSection / ProductInventoryLocationSections as ICollection<ProductInventoryLocationSection>
            Assert.Equal(productInventoryLocationSectionCollectionToAssign, inventoryLocationSectionToCheck.ProductInventoryLocationSections = productInventoryLocationSectionCollectionToAssign);
            Assert.Equal(productInventoryLocationSectionCollectionToAssign, inventoryLocationSectionToCheck.ProductInventoryLocationSections);
            // Inventory / InventoryLocationSection / Shipments as ICollection<Shipment>
            Assert.Equal(shipmentCollectionToAssign, inventoryLocationSectionToCheck.Shipments = shipmentCollectionToAssign);
            Assert.Equal(shipmentCollectionToAssign, inventoryLocationSectionToCheck.Shipments);
            #endregion
            #region Invoicing
            // Invoicing / SalesInvoice / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, salesInvoiceToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, salesInvoiceToCheck.Notes);
            // Invoicing / SalesInvoice / AssociatedSalesOrders as ICollection<SalesOrderSalesInvoice>
            Assert.Equal(salesOrderSalesInvoiceCollectionToAssign, salesInvoiceToCheck.AssociatedSalesOrders = salesOrderSalesInvoiceCollectionToAssign);
            Assert.Equal(salesOrderSalesInvoiceCollectionToAssign, salesInvoiceToCheck.AssociatedSalesOrders);
            // Invoicing / SalesInvoice / SalesInvoicePayments as ICollection<SalesInvoicePayment>
            Assert.Equal(salesInvoicePaymentCollectionToAssign, salesInvoiceToCheck.SalesInvoicePayments = salesInvoicePaymentCollectionToAssign);
            Assert.Equal(salesInvoicePaymentCollectionToAssign, salesInvoiceToCheck.SalesInvoicePayments);
            // Invoicing / SalesInvoiceContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBaseModel)salesInvoiceContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBaseModel)salesInvoiceContactToCheck).ContactID);
            // Invoicing / SalesInvoiceContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)salesInvoiceContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)salesInvoiceContactToCheck).Contact);
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)salesInvoiceContactToCheck).ContactKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)salesInvoiceContactToCheck).ContactKey);
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)salesInvoiceContactToCheck).ContactPhone = "testPhone1ToAssign");
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)salesInvoiceContactToCheck).ContactPhone);
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)salesInvoiceContactToCheck).ContactFax = "testFax1ToAssign");
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)salesInvoiceContactToCheck).ContactFax);
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)salesInvoiceContactToCheck).ContactEmail = "testEmail1ToAssign");
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)salesInvoiceContactToCheck).ContactEmail);
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)salesInvoiceContactToCheck).ContactFirstName = "testFirstNameToAssign");
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)salesInvoiceContactToCheck).ContactFirstName);
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)salesInvoiceContactToCheck).ContactLastName = "testLastNameToAssign");
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)salesInvoiceContactToCheck).ContactLastName);
            #endregion
            #region Manufacturers
            // Manufacturers / Manufacturer / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, manufacturerToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, manufacturerToCheck.Notes);
            // Manufacturers / Manufacturer / Images as ICollection<ManufacturerImage>
            Assert.Equal(manufacturerImageCollectionToAssign, manufacturerToCheck.Images = manufacturerImageCollectionToAssign);
            Assert.Equal(manufacturerImageCollectionToAssign, manufacturerToCheck.Images);
            // Manufacturers / Manufacturer / Reviews as ICollection<Review>
            Assert.Equal(reviewCollectionToAssign, manufacturerToCheck.Reviews = reviewCollectionToAssign);
            Assert.Equal(reviewCollectionToAssign, manufacturerToCheck.Reviews);
            // Manufacturers / Manufacturer / Brands as ICollection<BrandManufacturer>
            Assert.Equal(brandManufacturerCollectionToAssign, manufacturerToCheck.Brands = brandManufacturerCollectionToAssign);
            Assert.Equal(brandManufacturerCollectionToAssign, manufacturerToCheck.Brands);
            // Manufacturers / Manufacturer / Franchises as ICollection<FranchiseManufacturer>
            Assert.Equal(franchiseManufacturerCollectionToAssign, manufacturerToCheck.Franchises = franchiseManufacturerCollectionToAssign);
            Assert.Equal(franchiseManufacturerCollectionToAssign, manufacturerToCheck.Franchises);
            // Manufacturers / Manufacturer / Products as ICollection<ManufacturerProduct>
            Assert.Equal(manufacturerProductCollectionToAssign, manufacturerToCheck.Products = manufacturerProductCollectionToAssign);
            Assert.Equal(manufacturerProductCollectionToAssign, manufacturerToCheck.Products);
            // Manufacturers / Manufacturer / Stores as ICollection<StoreManufacturer>
            Assert.Equal(storeManufacturerCollectionToAssign, manufacturerToCheck.Stores = storeManufacturerCollectionToAssign);
            Assert.Equal(storeManufacturerCollectionToAssign, manufacturerToCheck.Stores);
            // Manufacturers / Manufacturer / Vendors as ICollection<VendorManufacturer>
            Assert.Equal(vendorManufacturerCollectionToAssign, manufacturerToCheck.Vendors = vendorManufacturerCollectionToAssign);
            Assert.Equal(vendorManufacturerCollectionToAssign, manufacturerToCheck.Vendors);
            // Manufacturers / ManufacturerProduct / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)manufacturerProductToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)manufacturerProductToCheck).ManufacturerID);
            // Manufacturers / ManufacturerProduct / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)manufacturerProductToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)manufacturerProductToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)manufacturerProductToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)manufacturerProductToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)manufacturerProductToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)manufacturerProductToCheck).ManufacturerName);
            // Manufacturers / ManufacturerProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)manufacturerProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)manufacturerProductToCheck).ProductID);
            // Manufacturers / ManufacturerProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)manufacturerProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)manufacturerProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)manufacturerProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)manufacturerProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)manufacturerProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)manufacturerProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)manufacturerProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)manufacturerProductToCheck).ProductSeoUrl);
            // Manufacturers / ManufacturerProduct / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheMasterModel<IProductModel>)manufacturerProductToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheMasterModel<IProductModel>)manufacturerProductToCheck).ManufacturerID);
            // Manufacturers / ManufacturerProduct / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheMasterModel<IProductModel>)manufacturerProductToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheMasterModel<IProductModel>)manufacturerProductToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheMasterModel<IProductModel>)manufacturerProductToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheMasterModel<IProductModel>)manufacturerProductToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheMasterModel<IProductModel>)manufacturerProductToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheMasterModel<IProductModel>)manufacturerProductToCheck).ManufacturerName);
            // Manufacturers / ManufacturerProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)manufacturerProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)manufacturerProductToCheck).ProductID);
            // Manufacturers / ManufacturerProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)manufacturerProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)manufacturerProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)manufacturerProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)manufacturerProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)manufacturerProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)manufacturerProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)manufacturerProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)manufacturerProductToCheck).ProductSeoUrl);
            #endregion
            #region Media
            ////// Media / StoredFile / AccountFiles as ICollection<AccountFile>
            ////Assert.Equal(accountFileCollectionToAssign, storedFileToCheck.AccountFiles = accountFileCollectionToAssign);
            ////Assert.Equal(accountFileCollectionToAssign, storedFileToCheck.AccountFiles);
            ////// Media / StoredFile / CategoryFiles as ICollection<CategoryFile>
            ////Assert.Equal(categoryFileCollectionToAssign, storedFileToCheck.CategoryFiles = categoryFileCollectionToAssign);
            ////Assert.Equal(categoryFileCollectionToAssign, storedFileToCheck.CategoryFiles);
            #endregion
            #region Messaging
            // Messaging / Conversation / Users as ICollection<ConversationUser>
            Assert.Equal(conversationUserCollectionToAssign, conversationToCheck.Users = conversationUserCollectionToAssign);
            Assert.Equal(conversationUserCollectionToAssign, conversationToCheck.Users);
            // Messaging / Conversation / Messages as ICollection<Message>
            Assert.Equal(messageCollectionToAssign, conversationToCheck.Messages = messageCollectionToAssign);
            Assert.Equal(messageCollectionToAssign, conversationToCheck.Messages);
            // Messaging / ConversationUser / UserID as int
            Assert.Equal(1, ((IAmFilterableByUserModel)conversationUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUserModel)conversationUserToCheck).UserID);
            // Messaging / ConversationUser / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)conversationUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)conversationUserToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)conversationUserToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)conversationUserToCheck).UserKey);
            // Messaging / ConversationUser / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)conversationUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)conversationUserToCheck).UserID);
            // Messaging / ConversationUser / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)conversationUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)conversationUserToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)conversationUserToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)conversationUserToCheck).UserKey);
            // Messaging / EmailQueue / EmailQueueAttachments as ICollection<EmailQueueAttachment>
            Assert.Equal(emailQueueAttachmentCollectionToAssign, emailQueueToCheck.EmailQueueAttachments = emailQueueAttachmentCollectionToAssign);
            Assert.Equal(emailQueueAttachmentCollectionToAssign, emailQueueToCheck.EmailQueueAttachments);
            // Messaging / Message / MessageRecipients as ICollection<MessageRecipient>
            Assert.Equal(messageRecipientCollectionToAssign, messageToCheck.MessageRecipients = messageRecipientCollectionToAssign);
            Assert.Equal(messageRecipientCollectionToAssign, messageToCheck.MessageRecipients);
            // Messaging / Message / MessageAttachments as ICollection<MessageAttachment>
            Assert.Equal(messageAttachmentCollectionToAssign, messageToCheck.MessageAttachments = messageAttachmentCollectionToAssign);
            Assert.Equal(messageAttachmentCollectionToAssign, messageToCheck.MessageAttachments);
            // Messaging / MessageRecipient / UserID as int
            Assert.Equal(1, ((IAmFilterableByUserModel)messageRecipientToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUserModel)messageRecipientToCheck).UserID);
            // Messaging / MessageRecipient / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)messageRecipientToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)messageRecipientToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)messageRecipientToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)messageRecipientToCheck).UserKey);
            // Messaging / MessageRecipient / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)messageRecipientToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)messageRecipientToCheck).UserID);
            // Messaging / MessageRecipient / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)messageRecipientToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)messageRecipientToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)messageRecipientToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)messageRecipientToCheck).UserKey);
            #endregion
            #region Ordering
            // Ordering / SalesOrder / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, salesOrderToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, salesOrderToCheck.Notes);
            // Ordering / SalesOrder / SalesOrderPayments as ICollection<SalesOrderPayment>
            Assert.Equal(salesOrderPaymentCollectionToAssign, salesOrderToCheck.SalesOrderPayments = salesOrderPaymentCollectionToAssign);
            Assert.Equal(salesOrderPaymentCollectionToAssign, salesOrderToCheck.SalesOrderPayments);
            // Ordering / SalesOrder / AssociatedSalesQuotes as ICollection<SalesQuoteSalesOrder>
            Assert.Equal(salesQuoteSalesOrderCollectionToAssign, salesOrderToCheck.AssociatedSalesQuotes = salesQuoteSalesOrderCollectionToAssign);
            Assert.Equal(salesQuoteSalesOrderCollectionToAssign, salesOrderToCheck.AssociatedSalesQuotes);
            // Ordering / SalesOrder / AssociatedSalesReturns as ICollection<SalesReturnSalesOrder>
            Assert.Equal(salesReturnSalesOrderCollectionToAssign, salesOrderToCheck.AssociatedSalesReturns = salesReturnSalesOrderCollectionToAssign);
            Assert.Equal(salesReturnSalesOrderCollectionToAssign, salesOrderToCheck.AssociatedSalesReturns);
            // Ordering / SalesOrder / AssociatedSalesInvoices as ICollection<SalesOrderSalesInvoice>
            Assert.Equal(salesOrderSalesInvoiceCollectionToAssign, salesOrderToCheck.AssociatedSalesInvoices = salesOrderSalesInvoiceCollectionToAssign);
            Assert.Equal(salesOrderSalesInvoiceCollectionToAssign, salesOrderToCheck.AssociatedSalesInvoices);
            // Ordering / SalesOrder / AssociatedPurchaseOrders as ICollection<SalesOrderPurchaseOrder>
            Assert.Equal(salesOrderPurchaseOrderCollectionToAssign, salesOrderToCheck.AssociatedPurchaseOrders = salesOrderPurchaseOrderCollectionToAssign);
            Assert.Equal(salesOrderPurchaseOrderCollectionToAssign, salesOrderToCheck.AssociatedPurchaseOrders);
            // Ordering / SalesOrderContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBaseModel)salesOrderContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBaseModel)salesOrderContactToCheck).ContactID);
            // Ordering / SalesOrderContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)salesOrderContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)salesOrderContactToCheck).Contact);
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)salesOrderContactToCheck).ContactKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)salesOrderContactToCheck).ContactKey);
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)salesOrderContactToCheck).ContactPhone = "testPhone1ToAssign");
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)salesOrderContactToCheck).ContactPhone);
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)salesOrderContactToCheck).ContactFax = "testFax1ToAssign");
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)salesOrderContactToCheck).ContactFax);
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)salesOrderContactToCheck).ContactEmail = "testEmail1ToAssign");
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)salesOrderContactToCheck).ContactEmail);
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)salesOrderContactToCheck).ContactFirstName = "testFirstNameToAssign");
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)salesOrderContactToCheck).ContactFirstName);
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)salesOrderContactToCheck).ContactLastName = "testLastNameToAssign");
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)salesOrderContactToCheck).ContactLastName);
            #endregion
            #region Payments
            // Payments / Membership / MembershipLevels as ICollection<MembershipLevel>
            Assert.Equal(membershipLevelCollectionToAssign, membershipToCheck.MembershipLevels = membershipLevelCollectionToAssign);
            Assert.Equal(membershipLevelCollectionToAssign, membershipToCheck.MembershipLevels);
            // Payments / Membership / MembershipRepeatTypes as ICollection<MembershipRepeatType>
            Assert.Equal(membershipRepeatTypeCollectionToAssign, membershipToCheck.MembershipRepeatTypes = membershipRepeatTypeCollectionToAssign);
            Assert.Equal(membershipRepeatTypeCollectionToAssign, membershipToCheck.MembershipRepeatTypes);
            // Payments / MembershipAdZoneAccess / MembershipAdZoneAccessByLevels as ICollection<MembershipAdZoneAccessByLevel>
            Assert.Equal(membershipAdZoneAccessByLevelCollectionToAssign, membershipAdZoneAccessToCheck.MembershipAdZoneAccessByLevels = membershipAdZoneAccessByLevelCollectionToAssign);
            Assert.Equal(membershipAdZoneAccessByLevelCollectionToAssign, membershipAdZoneAccessToCheck.MembershipAdZoneAccessByLevels);
            // Payments / MembershipLevel / MembershipAdZoneAccessByLevels as ICollection<MembershipAdZoneAccessByLevel>
            Assert.Equal(membershipAdZoneAccessByLevelCollectionToAssign, membershipLevelToCheck.MembershipAdZoneAccessByLevels = membershipAdZoneAccessByLevelCollectionToAssign);
            Assert.Equal(membershipAdZoneAccessByLevelCollectionToAssign, membershipLevelToCheck.MembershipAdZoneAccessByLevels);
            // Payments / RepeatType / SubscriptionTypeRepeatTypes as ICollection<SubscriptionTypeRepeatType>
            Assert.Equal(subscriptionTypeRepeatTypeCollectionToAssign, repeatTypeToCheck.SubscriptionTypeRepeatTypes = subscriptionTypeRepeatTypeCollectionToAssign);
            Assert.Equal(subscriptionTypeRepeatTypeCollectionToAssign, repeatTypeToCheck.SubscriptionTypeRepeatTypes);
            // Payments / Subscription / SubscriptionHistories as ICollection<SubscriptionHistory>
            Assert.Equal(subscriptionHistoryCollectionToAssign, subscriptionToCheck.SubscriptionHistories = subscriptionHistoryCollectionToAssign);
            Assert.Equal(subscriptionHistoryCollectionToAssign, subscriptionToCheck.SubscriptionHistories);
            // Payments / Subscription / StoreSubscriptions as ICollection<StoreSubscription>
            Assert.Equal(storeSubscriptionCollectionToAssign, subscriptionToCheck.StoreSubscriptions = storeSubscriptionCollectionToAssign);
            Assert.Equal(storeSubscriptionCollectionToAssign, subscriptionToCheck.StoreSubscriptions);
            // Payments / SubscriptionType / ProductSubscriptionTypes as ICollection<ProductSubscriptionType>
            Assert.Equal(productSubscriptionTypeCollectionToAssign, subscriptionTypeToCheck.ProductSubscriptionTypes = productSubscriptionTypeCollectionToAssign);
            Assert.Equal(productSubscriptionTypeCollectionToAssign, subscriptionTypeToCheck.ProductSubscriptionTypes);
            // Payments / SubscriptionType / SubscriptionTypeRepeatTypes as ICollection<SubscriptionTypeRepeatType>
            Assert.Equal(subscriptionTypeRepeatTypeCollectionToAssign, subscriptionTypeToCheck.SubscriptionTypeRepeatTypes = subscriptionTypeRepeatTypeCollectionToAssign);
            Assert.Equal(subscriptionTypeRepeatTypeCollectionToAssign, subscriptionTypeToCheck.SubscriptionTypeRepeatTypes);
            #endregion
            #region Pricing
            // Pricing / PriceRule / Products as ICollection<PriceRuleProduct>
            Assert.Equal(priceRuleProductCollectionToAssign, priceRuleToCheck.Products = priceRuleProductCollectionToAssign);
            Assert.Equal(priceRuleProductCollectionToAssign, priceRuleToCheck.Products);
            // Pricing / PriceRule / Brands as ICollection<PriceRuleBrand>
            Assert.Equal(priceRuleBrandCollectionToAssign, priceRuleToCheck.Brands = priceRuleBrandCollectionToAssign);
            Assert.Equal(priceRuleBrandCollectionToAssign, priceRuleToCheck.Brands);
            // Pricing / PriceRule / Franchises as ICollection<PriceRuleFranchise>
            Assert.Equal(priceRuleFranchiseCollectionToAssign, priceRuleToCheck.Franchises = priceRuleFranchiseCollectionToAssign);
            Assert.Equal(priceRuleFranchiseCollectionToAssign, priceRuleToCheck.Franchises);
            // Pricing / PriceRule / Stores as ICollection<PriceRuleStore>
            Assert.Equal(priceRuleStoreCollectionToAssign, priceRuleToCheck.Stores = priceRuleStoreCollectionToAssign);
            Assert.Equal(priceRuleStoreCollectionToAssign, priceRuleToCheck.Stores);
            // Pricing / PriceRule / Accounts as ICollection<PriceRuleAccount>
            Assert.Equal(priceRuleAccountCollectionToAssign, priceRuleToCheck.Accounts = priceRuleAccountCollectionToAssign);
            Assert.Equal(priceRuleAccountCollectionToAssign, priceRuleToCheck.Accounts);
            // Pricing / PriceRule / Vendors as ICollection<PriceRuleVendor>
            Assert.Equal(priceRuleVendorCollectionToAssign, priceRuleToCheck.Vendors = priceRuleVendorCollectionToAssign);
            Assert.Equal(priceRuleVendorCollectionToAssign, priceRuleToCheck.Vendors);
            // Pricing / PriceRule / Manufacturers as ICollection<PriceRuleManufacturer>
            Assert.Equal(priceRuleManufacturerCollectionToAssign, priceRuleToCheck.Manufacturers = priceRuleManufacturerCollectionToAssign);
            Assert.Equal(priceRuleManufacturerCollectionToAssign, priceRuleToCheck.Manufacturers);
            // Pricing / PriceRule / PriceRuleCountries as ICollection<PriceRuleCountry>
            Assert.Equal(priceRuleCountryCollectionToAssign, priceRuleToCheck.PriceRuleCountries = priceRuleCountryCollectionToAssign);
            Assert.Equal(priceRuleCountryCollectionToAssign, priceRuleToCheck.PriceRuleCountries);
            // Pricing / PriceRule / PriceRuleUserRoles as ICollection<PriceRuleUserRole>
            Assert.Equal(priceRuleUserRoleCollectionToAssign, priceRuleToCheck.PriceRuleUserRoles = priceRuleUserRoleCollectionToAssign);
            Assert.Equal(priceRuleUserRoleCollectionToAssign, priceRuleToCheck.PriceRuleUserRoles);
            // Pricing / PriceRule / PriceRuleCategories as ICollection<PriceRuleCategory>
            Assert.Equal(priceRuleCategoryCollectionToAssign, priceRuleToCheck.PriceRuleCategories = priceRuleCategoryCollectionToAssign);
            Assert.Equal(priceRuleCategoryCollectionToAssign, priceRuleToCheck.PriceRuleCategories);
            // Pricing / PriceRule / PriceRuleAccountTypes as ICollection<PriceRuleAccountType>
            Assert.Equal(priceRuleAccountTypeCollectionToAssign, priceRuleToCheck.PriceRuleAccountTypes = priceRuleAccountTypeCollectionToAssign);
            Assert.Equal(priceRuleAccountTypeCollectionToAssign, priceRuleToCheck.PriceRuleAccountTypes);
            // Pricing / PriceRule / PriceRuleProductTypes as ICollection<PriceRuleProductType>
            Assert.Equal(priceRuleProductTypeCollectionToAssign, priceRuleToCheck.PriceRuleProductTypes = priceRuleProductTypeCollectionToAssign);
            Assert.Equal(priceRuleProductTypeCollectionToAssign, priceRuleToCheck.PriceRuleProductTypes);
            // Pricing / PriceRuleAccount / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccountModel)priceRuleAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccountModel)priceRuleAccountToCheck).AccountID);
            // Pricing / PriceRuleAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)priceRuleAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)priceRuleAccountToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)priceRuleAccountToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)priceRuleAccountToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)priceRuleAccountToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)priceRuleAccountToCheck).AccountName);
            // Pricing / PriceRuleAccount / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)priceRuleAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)priceRuleAccountToCheck).AccountID);
            // Pricing / PriceRuleAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)priceRuleAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)priceRuleAccountToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)priceRuleAccountToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)priceRuleAccountToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)priceRuleAccountToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)priceRuleAccountToCheck).AccountName);
            // Pricing / PriceRuleBrand / BrandID as int
            Assert.Equal(1, ((IAmFilterableByBrandModel)priceRuleBrandToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmFilterableByBrandModel)priceRuleBrandToCheck).BrandID);
            // Pricing / PriceRuleBrand / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)priceRuleBrandToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmFilterableByBrandModel)priceRuleBrandToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)priceRuleBrandToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByBrandModel)priceRuleBrandToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)priceRuleBrandToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByBrandModel)priceRuleBrandToCheck).BrandName);
            // Pricing / PriceRuleBrand / BrandID as int
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)priceRuleBrandToCheck).BrandID = 1);
            Assert.Equal(1, ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)priceRuleBrandToCheck).BrandID);
            // Pricing / PriceRuleBrand / Brand as Brand
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)priceRuleBrandToCheck).Brand = brandToAssign);
            Assert.Equal(brandToAssign, ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)priceRuleBrandToCheck).Brand);
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)priceRuleBrandToCheck).BrandKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)priceRuleBrandToCheck).BrandKey);
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)priceRuleBrandToCheck).BrandName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmABrandRelationshipTableWhereBrandIsTheSlaveModel)priceRuleBrandToCheck).BrandName);
            // Pricing / PriceRuleCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategoryModel)priceRuleCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategoryModel)priceRuleCategoryToCheck).CategoryID);
            // Pricing / PriceRuleCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)priceRuleCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)priceRuleCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)priceRuleCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)priceRuleCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)priceRuleCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)priceRuleCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)priceRuleCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)priceRuleCategoryToCheck).CategorySeoUrl);
            // Pricing / PriceRuleCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)priceRuleCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)priceRuleCategoryToCheck).CategoryID);
            // Pricing / PriceRuleCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)priceRuleCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)priceRuleCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)priceRuleCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)priceRuleCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)priceRuleCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)priceRuleCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)priceRuleCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)priceRuleCategoryToCheck).CategorySeoUrl);
            // Pricing / PriceRuleFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)priceRuleFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmFilterableByFranchiseModel)priceRuleFranchiseToCheck).FranchiseID);
            // Pricing / PriceRuleFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)priceRuleFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmFilterableByFranchiseModel)priceRuleFranchiseToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)priceRuleFranchiseToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByFranchiseModel)priceRuleFranchiseToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)priceRuleFranchiseToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByFranchiseModel)priceRuleFranchiseToCheck).FranchiseName);
            // Pricing / PriceRuleFranchise / FranchiseID as int
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)priceRuleFranchiseToCheck).FranchiseID = 1);
            Assert.Equal(1, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)priceRuleFranchiseToCheck).FranchiseID);
            // Pricing / PriceRuleFranchise / Franchise as Franchise
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)priceRuleFranchiseToCheck).Franchise = franchiseToAssign);
            Assert.Equal(franchiseToAssign, ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)priceRuleFranchiseToCheck).Franchise);
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)priceRuleFranchiseToCheck).FranchiseKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)priceRuleFranchiseToCheck).FranchiseKey);
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)priceRuleFranchiseToCheck).FranchiseName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlaveModel)priceRuleFranchiseToCheck).FranchiseName);
            // Pricing / PriceRuleManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)priceRuleManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)priceRuleManufacturerToCheck).ManufacturerID);
            // Pricing / PriceRuleManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)priceRuleManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)priceRuleManufacturerToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)priceRuleManufacturerToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)priceRuleManufacturerToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)priceRuleManufacturerToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)priceRuleManufacturerToCheck).ManufacturerName);
            // Pricing / PriceRuleManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)priceRuleManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)priceRuleManufacturerToCheck).ManufacturerID);
            // Pricing / PriceRuleManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)priceRuleManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)priceRuleManufacturerToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)priceRuleManufacturerToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)priceRuleManufacturerToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)priceRuleManufacturerToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)priceRuleManufacturerToCheck).ManufacturerName);
            // Pricing / PriceRuleProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)priceRuleProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)priceRuleProductToCheck).ProductID);
            // Pricing / PriceRuleProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)priceRuleProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)priceRuleProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)priceRuleProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)priceRuleProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)priceRuleProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)priceRuleProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)priceRuleProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)priceRuleProductToCheck).ProductSeoUrl);
            // Pricing / PriceRuleProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)priceRuleProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)priceRuleProductToCheck).ProductID);
            // Pricing / PriceRuleProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)priceRuleProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)priceRuleProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)priceRuleProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)priceRuleProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)priceRuleProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)priceRuleProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)priceRuleProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)priceRuleProductToCheck).ProductSeoUrl);
            // Pricing / PriceRuleStore / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)priceRuleStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)priceRuleStoreToCheck).StoreID);
            // Pricing / PriceRuleStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)priceRuleStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)priceRuleStoreToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)priceRuleStoreToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)priceRuleStoreToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)priceRuleStoreToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)priceRuleStoreToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)priceRuleStoreToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)priceRuleStoreToCheck).StoreSeoUrl);
            // Pricing / PriceRuleStore / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)priceRuleStoreToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)priceRuleStoreToCheck).StoreID);
            // Pricing / PriceRuleStore / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)priceRuleStoreToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)priceRuleStoreToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)priceRuleStoreToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)priceRuleStoreToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)priceRuleStoreToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)priceRuleStoreToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)priceRuleStoreToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheSlaveModel)priceRuleStoreToCheck).StoreSeoUrl);
            // Pricing / PriceRuleVendor / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendorModel)priceRuleVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendorModel)priceRuleVendorToCheck).VendorID);
            // Pricing / PriceRuleVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)priceRuleVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)priceRuleVendorToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)priceRuleVendorToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)priceRuleVendorToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)priceRuleVendorToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)priceRuleVendorToCheck).VendorName);
            // Pricing / PriceRuleVendor / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)priceRuleVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)priceRuleVendorToCheck).VendorID);
            // Pricing / PriceRuleVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)priceRuleVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)priceRuleVendorToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)priceRuleVendorToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)priceRuleVendorToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)priceRuleVendorToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)priceRuleVendorToCheck).VendorName);
            #endregion
            #region Products
            // Products / Product / Images as ICollection<ProductImage>
            Assert.Equal(productImageCollectionToAssign, productToCheck.Images = productImageCollectionToAssign);
            Assert.Equal(productImageCollectionToAssign, productToCheck.Images);
            // Products / Product / StoredFiles as ICollection<ProductFile>
            Assert.Equal(productFileCollectionToAssign, productToCheck.StoredFiles = productFileCollectionToAssign);
            Assert.Equal(productFileCollectionToAssign, productToCheck.StoredFiles);
            // Products / Product / Accounts as ICollection<AccountProduct>
            Assert.Equal(accountProductCollectionToAssign, productToCheck.Accounts = accountProductCollectionToAssign);
            Assert.Equal(accountProductCollectionToAssign, productToCheck.Accounts);
            // Products / Product / Brands as ICollection<BrandProduct>
            Assert.Equal(brandProductCollectionToAssign, productToCheck.Brands = brandProductCollectionToAssign);
            Assert.Equal(brandProductCollectionToAssign, productToCheck.Brands);
            // Products / Product / Categories as ICollection<ProductCategory>
            Assert.Equal(productCategoryCollectionToAssign, productToCheck.Categories = productCategoryCollectionToAssign);
            Assert.Equal(productCategoryCollectionToAssign, productToCheck.Categories);
            // Products / Product / Franchises as ICollection<FranchiseProduct>
            Assert.Equal(franchiseProductCollectionToAssign, productToCheck.Franchises = franchiseProductCollectionToAssign);
            Assert.Equal(franchiseProductCollectionToAssign, productToCheck.Franchises);
            // Products / Product / Manufacturers as ICollection<ManufacturerProduct>
            Assert.Equal(manufacturerProductCollectionToAssign, productToCheck.Manufacturers = manufacturerProductCollectionToAssign);
            Assert.Equal(manufacturerProductCollectionToAssign, productToCheck.Manufacturers);
            // Products / Product / Stores as ICollection<StoreProduct>
            Assert.Equal(storeProductCollectionToAssign, productToCheck.Stores = storeProductCollectionToAssign);
            Assert.Equal(storeProductCollectionToAssign, productToCheck.Stores);
            // Products / Product / Vendors as ICollection<VendorProduct>
            Assert.Equal(vendorProductCollectionToAssign, productToCheck.Vendors = vendorProductCollectionToAssign);
            Assert.Equal(vendorProductCollectionToAssign, productToCheck.Vendors);
            // Products / Product / ProductAssociations as ICollection<ProductAssociation>
            Assert.Equal(productAssociationCollectionToAssign, productToCheck.ProductAssociations = productAssociationCollectionToAssign);
            Assert.Equal(productAssociationCollectionToAssign, productToCheck.ProductAssociations);
            // Products / Product / ProductsAssociatedWith as ICollection<ProductAssociation>
            Assert.Equal(productAssociationCollectionToAssign, productToCheck.ProductsAssociatedWith = productAssociationCollectionToAssign);
            Assert.Equal(productAssociationCollectionToAssign, productToCheck.ProductsAssociatedWith);
            // Products / Product / ProductMembershipLevels as ICollection<ProductMembershipLevel>
            Assert.Equal(productMembershipLevelCollectionToAssign, productToCheck.ProductMembershipLevels = productMembershipLevelCollectionToAssign);
            Assert.Equal(productMembershipLevelCollectionToAssign, productToCheck.ProductMembershipLevels);
            // Products / Product / ProductDownloads as ICollection<ProductDownload>
            Assert.Equal(productDownloadCollectionToAssign, productToCheck.ProductDownloads = productDownloadCollectionToAssign);
            Assert.Equal(productDownloadCollectionToAssign, productToCheck.ProductDownloads);
            // Products / Product / ProductShipCarrierMethods as ICollection<ProductShipCarrierMethod>
            Assert.Equal(productShipCarrierMethodCollectionToAssign, productToCheck.ProductShipCarrierMethods = productShipCarrierMethodCollectionToAssign);
            Assert.Equal(productShipCarrierMethodCollectionToAssign, productToCheck.ProductShipCarrierMethods);
            // Products / Product / ProductSubscriptionTypes as ICollection<ProductSubscriptionType>
            Assert.Equal(productSubscriptionTypeCollectionToAssign, productToCheck.ProductSubscriptionTypes = productSubscriptionTypeCollectionToAssign);
            Assert.Equal(productSubscriptionTypeCollectionToAssign, productToCheck.ProductSubscriptionTypes);
            // Products / Product / ProductRestrictions as ICollection<ProductRestriction>
            Assert.Equal(productRestrictionCollectionToAssign, productToCheck.ProductRestrictions = productRestrictionCollectionToAssign);
            Assert.Equal(productRestrictionCollectionToAssign, productToCheck.ProductRestrictions);
            // Products / Product / ProductNotifications as ICollection<ProductNotification>
            Assert.Equal(productNotificationCollectionToAssign, productToCheck.ProductNotifications = productNotificationCollectionToAssign);
            Assert.Equal(productNotificationCollectionToAssign, productToCheck.ProductNotifications);
            // Products / Product / Reviews as ICollection<Review>
            Assert.Equal(reviewCollectionToAssign, productToCheck.Reviews = reviewCollectionToAssign);
            Assert.Equal(reviewCollectionToAssign, productToCheck.Reviews);
            // Products / ProductCategory / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)productCategoryToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)productCategoryToCheck).ProductID);
            // Products / ProductCategory / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)productCategoryToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)productCategoryToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)productCategoryToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)productCategoryToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)productCategoryToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)productCategoryToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)productCategoryToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)productCategoryToCheck).ProductSeoUrl);
            // Products / ProductCategory / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ICategoryModel>)productCategoryToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ICategoryModel>)productCategoryToCheck).ProductID);
            // Products / ProductCategory / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ICategoryModel>)productCategoryToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ICategoryModel>)productCategoryToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ICategoryModel>)productCategoryToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ICategoryModel>)productCategoryToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ICategoryModel>)productCategoryToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ICategoryModel>)productCategoryToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ICategoryModel>)productCategoryToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ICategoryModel>)productCategoryToCheck).ProductSeoUrl);
            // Products / ProductCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategoryModel)productCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategoryModel)productCategoryToCheck).CategoryID);
            // Products / ProductCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)productCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)productCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)productCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)productCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)productCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)productCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)productCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)productCategoryToCheck).CategorySeoUrl);
            // Products / ProductCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)productCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)productCategoryToCheck).CategoryID);
            // Products / ProductCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)productCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)productCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)productCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)productCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)productCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)productCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)productCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)productCategoryToCheck).CategorySeoUrl);
            // Products / ProductInventoryLocationSection / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)productInventoryLocationSectionToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)productInventoryLocationSectionToCheck).ProductID);
            // Products / ProductInventoryLocationSection / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)productInventoryLocationSectionToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)productInventoryLocationSectionToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)productInventoryLocationSectionToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)productInventoryLocationSectionToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)productInventoryLocationSectionToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)productInventoryLocationSectionToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)productInventoryLocationSectionToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)productInventoryLocationSectionToCheck).ProductSeoUrl);
            // Products / ProductInventoryLocationSection / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IInventoryLocationSectionModel>)productInventoryLocationSectionToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IInventoryLocationSectionModel>)productInventoryLocationSectionToCheck).ProductID);
            // Products / ProductInventoryLocationSection / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IInventoryLocationSectionModel>)productInventoryLocationSectionToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IInventoryLocationSectionModel>)productInventoryLocationSectionToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IInventoryLocationSectionModel>)productInventoryLocationSectionToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IInventoryLocationSectionModel>)productInventoryLocationSectionToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IInventoryLocationSectionModel>)productInventoryLocationSectionToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IInventoryLocationSectionModel>)productInventoryLocationSectionToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IInventoryLocationSectionModel>)productInventoryLocationSectionToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IInventoryLocationSectionModel>)productInventoryLocationSectionToCheck).ProductSeoUrl);
            // Products / ProductMembershipLevel / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)productMembershipLevelToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)productMembershipLevelToCheck).ProductID);
            // Products / ProductMembershipLevel / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)productMembershipLevelToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)productMembershipLevelToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)productMembershipLevelToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)productMembershipLevelToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)productMembershipLevelToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)productMembershipLevelToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)productMembershipLevelToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)productMembershipLevelToCheck).ProductSeoUrl);
            // Products / ProductMembershipLevel / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IMembershipLevelModel>)productMembershipLevelToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IMembershipLevelModel>)productMembershipLevelToCheck).ProductID);
            // Products / ProductMembershipLevel / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IMembershipLevelModel>)productMembershipLevelToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IMembershipLevelModel>)productMembershipLevelToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IMembershipLevelModel>)productMembershipLevelToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IMembershipLevelModel>)productMembershipLevelToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IMembershipLevelModel>)productMembershipLevelToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IMembershipLevelModel>)productMembershipLevelToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IMembershipLevelModel>)productMembershipLevelToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IMembershipLevelModel>)productMembershipLevelToCheck).ProductSeoUrl);
            // Products / ProductMembershipLevel / Subscriptions as ICollection<Subscription>
            Assert.Equal(subscriptionCollectionToAssign, productMembershipLevelToCheck.Subscriptions = subscriptionCollectionToAssign);
            Assert.Equal(subscriptionCollectionToAssign, productMembershipLevelToCheck.Subscriptions);
            // Products / ProductPricePoint / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)productPricePointToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)productPricePointToCheck).ProductID);
            // Products / ProductPricePoint / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)productPricePointToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)productPricePointToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)productPricePointToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)productPricePointToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)productPricePointToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)productPricePointToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)productPricePointToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)productPricePointToCheck).ProductSeoUrl);
            // Products / ProductPricePoint / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IPricePointModel>)productPricePointToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IPricePointModel>)productPricePointToCheck).ProductID);
            // Products / ProductPricePoint / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IPricePointModel>)productPricePointToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IPricePointModel>)productPricePointToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IPricePointModel>)productPricePointToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IPricePointModel>)productPricePointToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IPricePointModel>)productPricePointToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IPricePointModel>)productPricePointToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IPricePointModel>)productPricePointToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IPricePointModel>)productPricePointToCheck).ProductSeoUrl);
            // Products / ProductShipCarrierMethod / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)productShipCarrierMethodToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)productShipCarrierMethodToCheck).ProductID);
            // Products / ProductShipCarrierMethod / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)productShipCarrierMethodToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)productShipCarrierMethodToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)productShipCarrierMethodToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)productShipCarrierMethodToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)productShipCarrierMethodToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)productShipCarrierMethodToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)productShipCarrierMethodToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)productShipCarrierMethodToCheck).ProductSeoUrl);
            // Products / ProductShipCarrierMethod / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IShipCarrierMethodModel>)productShipCarrierMethodToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IShipCarrierMethodModel>)productShipCarrierMethodToCheck).ProductID);
            // Products / ProductShipCarrierMethod / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IShipCarrierMethodModel>)productShipCarrierMethodToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IShipCarrierMethodModel>)productShipCarrierMethodToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IShipCarrierMethodModel>)productShipCarrierMethodToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IShipCarrierMethodModel>)productShipCarrierMethodToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IShipCarrierMethodModel>)productShipCarrierMethodToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IShipCarrierMethodModel>)productShipCarrierMethodToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IShipCarrierMethodModel>)productShipCarrierMethodToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<IShipCarrierMethodModel>)productShipCarrierMethodToCheck).ProductSeoUrl);
            // Products / ProductSubscriptionType / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)productSubscriptionTypeToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)productSubscriptionTypeToCheck).ProductID);
            // Products / ProductSubscriptionType / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)productSubscriptionTypeToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)productSubscriptionTypeToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)productSubscriptionTypeToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)productSubscriptionTypeToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)productSubscriptionTypeToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)productSubscriptionTypeToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)productSubscriptionTypeToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)productSubscriptionTypeToCheck).ProductSeoUrl);
            // Products / ProductSubscriptionType / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ISubscriptionTypeModel>)productSubscriptionTypeToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ISubscriptionTypeModel>)productSubscriptionTypeToCheck).ProductID);
            // Products / ProductSubscriptionType / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ISubscriptionTypeModel>)productSubscriptionTypeToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ISubscriptionTypeModel>)productSubscriptionTypeToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ISubscriptionTypeModel>)productSubscriptionTypeToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ISubscriptionTypeModel>)productSubscriptionTypeToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ISubscriptionTypeModel>)productSubscriptionTypeToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ISubscriptionTypeModel>)productSubscriptionTypeToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ISubscriptionTypeModel>)productSubscriptionTypeToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheMasterModel<ISubscriptionTypeModel>)productSubscriptionTypeToCheck).ProductSeoUrl);
            #endregion
            #region Purchasing
            // Purchasing / PurchaseOrder / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, purchaseOrderToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, purchaseOrderToCheck.Notes);
            // Purchasing / PurchaseOrder / AssociatedSalesOrders as ICollection<SalesOrderPurchaseOrder>
            Assert.Equal(salesOrderPurchaseOrderCollectionToAssign, purchaseOrderToCheck.AssociatedSalesOrders = salesOrderPurchaseOrderCollectionToAssign);
            Assert.Equal(salesOrderPurchaseOrderCollectionToAssign, purchaseOrderToCheck.AssociatedSalesOrders);
            // Purchasing / PurchaseOrderContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBaseModel)purchaseOrderContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBaseModel)purchaseOrderContactToCheck).ContactID);
            // Purchasing / PurchaseOrderContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)purchaseOrderContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)purchaseOrderContactToCheck).Contact);
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)purchaseOrderContactToCheck).ContactKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)purchaseOrderContactToCheck).ContactKey);
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)purchaseOrderContactToCheck).ContactPhone = "testPhone1ToAssign");
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)purchaseOrderContactToCheck).ContactPhone);
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)purchaseOrderContactToCheck).ContactFax = "testFax1ToAssign");
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)purchaseOrderContactToCheck).ContactFax);
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)purchaseOrderContactToCheck).ContactEmail = "testEmail1ToAssign");
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)purchaseOrderContactToCheck).ContactEmail);
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)purchaseOrderContactToCheck).ContactFirstName = "testFirstNameToAssign");
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)purchaseOrderContactToCheck).ContactFirstName);
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)purchaseOrderContactToCheck).ContactLastName = "testLastNameToAssign");
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)purchaseOrderContactToCheck).ContactLastName);
            #endregion
            #region Questionnaire
            // Questionnaire / Question / Options as ICollection<QuestionOption>
            Assert.Equal(questionOptionCollectionToAssign, questionToCheck.Options = questionOptionCollectionToAssign);
            Assert.Equal(questionOptionCollectionToAssign, questionToCheck.Options);
            #endregion
            #region Quoting
            // Quoting / SalesQuote / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, salesQuoteToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, salesQuoteToCheck.Notes);
            // Quoting / SalesQuote / AssociatedSalesOrders as ICollection<SalesQuoteSalesOrder>
            Assert.Equal(salesQuoteSalesOrderCollectionToAssign, salesQuoteToCheck.AssociatedSalesOrders = salesQuoteSalesOrderCollectionToAssign);
            Assert.Equal(salesQuoteSalesOrderCollectionToAssign, salesQuoteToCheck.AssociatedSalesOrders);
            // Quoting / SalesQuote / SalesQuoteCategories as ICollection<SalesQuoteCategory>
            Assert.Equal(salesQuoteCategoryCollectionToAssign, salesQuoteToCheck.SalesQuoteCategories = salesQuoteCategoryCollectionToAssign);
            Assert.Equal(salesQuoteCategoryCollectionToAssign, salesQuoteToCheck.SalesQuoteCategories);
            // Quoting / SalesQuoteCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategoryModel)salesQuoteCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategoryModel)salesQuoteCategoryToCheck).CategoryID);
            // Quoting / SalesQuoteCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)salesQuoteCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)salesQuoteCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)salesQuoteCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)salesQuoteCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)salesQuoteCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)salesQuoteCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)salesQuoteCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)salesQuoteCategoryToCheck).CategorySeoUrl);
            // Quoting / SalesQuoteCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)salesQuoteCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)salesQuoteCategoryToCheck).CategoryID);
            // Quoting / SalesQuoteCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)salesQuoteCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)salesQuoteCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)salesQuoteCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)salesQuoteCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)salesQuoteCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)salesQuoteCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)salesQuoteCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)salesQuoteCategoryToCheck).CategorySeoUrl);
            // Quoting / SalesQuoteContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBaseModel)salesQuoteContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBaseModel)salesQuoteContactToCheck).ContactID);
            // Quoting / SalesQuoteContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)salesQuoteContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)salesQuoteContactToCheck).Contact);
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)salesQuoteContactToCheck).ContactKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)salesQuoteContactToCheck).ContactKey);
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)salesQuoteContactToCheck).ContactPhone = "testPhone1ToAssign");
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)salesQuoteContactToCheck).ContactPhone);
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)salesQuoteContactToCheck).ContactFax = "testFax1ToAssign");
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)salesQuoteContactToCheck).ContactFax);
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)salesQuoteContactToCheck).ContactEmail = "testEmail1ToAssign");
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)salesQuoteContactToCheck).ContactEmail);
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)salesQuoteContactToCheck).ContactFirstName = "testFirstNameToAssign");
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)salesQuoteContactToCheck).ContactFirstName);
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)salesQuoteContactToCheck).ContactLastName = "testLastNameToAssign");
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)salesQuoteContactToCheck).ContactLastName);
            #endregion
            #region Reporting
            #endregion
            #region Returning
            // Returning / SalesReturn / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, salesReturnToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, salesReturnToCheck.Notes);
            // Returning / SalesReturn / SalesReturnPayments as ICollection<SalesReturnPayment>
            Assert.Equal(salesReturnPaymentCollectionToAssign, salesReturnToCheck.SalesReturnPayments = salesReturnPaymentCollectionToAssign);
            Assert.Equal(salesReturnPaymentCollectionToAssign, salesReturnToCheck.SalesReturnPayments);
            // Returning / SalesReturn / AssociatedSalesOrders as ICollection<SalesReturnSalesOrder>
            Assert.Equal(salesReturnSalesOrderCollectionToAssign, salesReturnToCheck.AssociatedSalesOrders = salesReturnSalesOrderCollectionToAssign);
            Assert.Equal(salesReturnSalesOrderCollectionToAssign, salesReturnToCheck.AssociatedSalesOrders);
            // Returning / SalesReturnContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBaseModel)salesReturnContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBaseModel)salesReturnContactToCheck).ContactID);
            // Returning / SalesReturnContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)salesReturnContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)salesReturnContactToCheck).Contact);
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)salesReturnContactToCheck).ContactKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)salesReturnContactToCheck).ContactKey);
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)salesReturnContactToCheck).ContactPhone = "testPhone1ToAssign");
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)salesReturnContactToCheck).ContactPhone);
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)salesReturnContactToCheck).ContactFax = "testFax1ToAssign");
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)salesReturnContactToCheck).ContactFax);
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)salesReturnContactToCheck).ContactEmail = "testEmail1ToAssign");
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)salesReturnContactToCheck).ContactEmail);
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)salesReturnContactToCheck).ContactFirstName = "testFirstNameToAssign");
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)salesReturnContactToCheck).ContactFirstName);
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)salesReturnContactToCheck).ContactLastName = "testLastNameToAssign");
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)salesReturnContactToCheck).ContactLastName);
            #endregion
            #region Reviews
            #endregion
            #region Sales
            // Sales / SalesGroup / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, salesGroupToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, salesGroupToCheck.Notes);
            // Sales / SalesGroup / SalesQuoteRequestMasters as ICollection<SalesQuote>
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteRequestMasters = salesQuoteCollectionToAssign);
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteRequestMasters);
            // Sales / SalesGroup / SalesQuoteRequestSubs as ICollection<SalesQuote>
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteRequestSubs = salesQuoteCollectionToAssign);
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteRequestSubs);
            // Sales / SalesGroup / SalesQuoteResponseMasters as ICollection<SalesQuote>
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteResponseMasters = salesQuoteCollectionToAssign);
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteResponseMasters);
            // Sales / SalesGroup / SalesQuoteResponseSubs as ICollection<SalesQuote>
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteResponseSubs = salesQuoteCollectionToAssign);
            Assert.Equal(salesQuoteCollectionToAssign, salesGroupToCheck.SalesQuoteResponseSubs);
            // Sales / SalesGroup / SubSalesOrders as ICollection<SalesOrder>
            Assert.Equal(salesOrderCollectionToAssign, salesGroupToCheck.SubSalesOrders = salesOrderCollectionToAssign);
            Assert.Equal(salesOrderCollectionToAssign, salesGroupToCheck.SubSalesOrders);
            // Sales / SalesGroup / SalesOrderMasters as ICollection<SalesOrder>
            Assert.Equal(salesOrderCollectionToAssign, salesGroupToCheck.SalesOrderMasters = salesOrderCollectionToAssign);
            Assert.Equal(salesOrderCollectionToAssign, salesGroupToCheck.SalesOrderMasters);
            // Sales / SalesGroup / PurchaseOrders as ICollection<PurchaseOrder>
            Assert.Equal(purchaseOrderCollectionToAssign, salesGroupToCheck.PurchaseOrders = purchaseOrderCollectionToAssign);
            Assert.Equal(purchaseOrderCollectionToAssign, salesGroupToCheck.PurchaseOrders);
            // Sales / SalesGroup / SalesInvoices as ICollection<SalesInvoice>
            Assert.Equal(salesInvoiceCollectionToAssign, salesGroupToCheck.SalesInvoices = salesInvoiceCollectionToAssign);
            Assert.Equal(salesInvoiceCollectionToAssign, salesGroupToCheck.SalesInvoices);
            // Sales / SalesGroup / SalesReturns as ICollection<SalesReturn>
            Assert.Equal(salesReturnCollectionToAssign, salesGroupToCheck.SalesReturns = salesReturnCollectionToAssign);
            Assert.Equal(salesReturnCollectionToAssign, salesGroupToCheck.SalesReturns);
            // Sales / SalesGroup / SampleRequests as ICollection<SampleRequest>
            Assert.Equal(sampleRequestCollectionToAssign, salesGroupToCheck.SampleRequests = sampleRequestCollectionToAssign);
            Assert.Equal(sampleRequestCollectionToAssign, salesGroupToCheck.SampleRequests);
            #endregion
            #region Sampling
            // Sampling / SampleRequest / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, sampleRequestToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, sampleRequestToCheck.Notes);
            // Sampling / SampleRequestContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBaseModel)sampleRequestContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBaseModel)sampleRequestContactToCheck).ContactID);
            // Sampling / SampleRequestContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)sampleRequestContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)sampleRequestContactToCheck).Contact);
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)sampleRequestContactToCheck).ContactKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)sampleRequestContactToCheck).ContactKey);
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)sampleRequestContactToCheck).ContactPhone = "testPhone1ToAssign");
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)sampleRequestContactToCheck).ContactPhone);
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)sampleRequestContactToCheck).ContactFax = "testFax1ToAssign");
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)sampleRequestContactToCheck).ContactFax);
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)sampleRequestContactToCheck).ContactEmail = "testEmail1ToAssign");
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)sampleRequestContactToCheck).ContactEmail);
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)sampleRequestContactToCheck).ContactFirstName = "testFirstNameToAssign");
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)sampleRequestContactToCheck).ContactFirstName);
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)sampleRequestContactToCheck).ContactLastName = "testLastNameToAssign");
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)sampleRequestContactToCheck).ContactLastName);
            #endregion
            #region Scheduling
            // Scheduling / Appointment / Calendars as ICollection<CalendarAppointment>
            Assert.Equal(calendarAppointmentCollectionToAssign, appointmentToCheck.Calendars = calendarAppointmentCollectionToAssign);
            Assert.Equal(calendarAppointmentCollectionToAssign, appointmentToCheck.Calendars);
            // Scheduling / Calendar / Appointments as ICollection<CalendarAppointment>
            Assert.Equal(calendarAppointmentCollectionToAssign, calendarToCheck.Appointments = calendarAppointmentCollectionToAssign);
            Assert.Equal(calendarAppointmentCollectionToAssign, calendarToCheck.Appointments);
            #endregion
            #region Scouting
            // Scouting / Scout / Categories as ICollection<ScoutCategory>
            Assert.Equal(scoutCategoryCollectionToAssign, scoutToCheck.Categories = scoutCategoryCollectionToAssign);
            Assert.Equal(scoutCategoryCollectionToAssign, scoutToCheck.Categories);
            // Scouting / ScoutCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)scoutCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)scoutCategoryToCheck).CategoryID);
            // Scouting / ScoutCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategoryModel)scoutCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategoryModel)scoutCategoryToCheck).CategoryID);
            // Scouting / ScoutCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)scoutCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)scoutCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)scoutCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)scoutCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)scoutCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)scoutCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)scoutCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)scoutCategoryToCheck).CategorySeoUrl);
            // Scouting / ScoutCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)scoutCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)scoutCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)scoutCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)scoutCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)scoutCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)scoutCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)scoutCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)scoutCategoryToCheck).CategorySeoUrl);
            #endregion
            #region Shipping
            // Shipping / ShipCarrier / PurchaseOrders as ICollection<PurchaseOrder>
            //Assert.Equal(purchaseOrderCollectionToAssign, shipCarrierToCheck.PurchaseOrders = purchaseOrderCollectionToAssign);
            //Assert.Equal(purchaseOrderCollectionToAssign, shipCarrierToCheck.PurchaseOrders);
            // Shipping / ShipCarrier / ShipCarrierMethods as ICollection<ShipCarrierMethod>
            Assert.Equal(shipCarrierMethodCollectionToAssign, shipCarrierToCheck.ShipCarrierMethods = shipCarrierMethodCollectionToAssign);
            Assert.Equal(shipCarrierMethodCollectionToAssign, shipCarrierToCheck.ShipCarrierMethods);
            // Shipping / ShipCarrier / Shipments as ICollection<Shipment>
            Assert.Equal(shipmentCollectionToAssign, shipCarrierToCheck.Shipments = shipmentCollectionToAssign);
            Assert.Equal(shipmentCollectionToAssign, shipCarrierToCheck.Shipments);
            // Shipping / Shipment / ShipmentEvents as ICollection<ShipmentEvent>
            Assert.Equal(shipmentEventCollectionToAssign, shipmentToCheck.ShipmentEvents = shipmentEventCollectionToAssign);
            Assert.Equal(shipmentEventCollectionToAssign, shipmentToCheck.ShipmentEvents);
            #endregion
            #region Shopping
            // Shopping / Cart / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, cartToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, cartToCheck.Notes);
            // Shopping / CartContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBaseModel)cartContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBaseModel)cartContactToCheck).ContactID);
            // Shopping / CartContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)cartContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)cartContactToCheck).Contact);
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)cartContactToCheck).ContactKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)cartContactToCheck).ContactKey);
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)cartContactToCheck).ContactPhone = "testPhone1ToAssign");
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)cartContactToCheck).ContactPhone);
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)cartContactToCheck).ContactFax = "testFax1ToAssign");
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)cartContactToCheck).ContactFax);
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)cartContactToCheck).ContactEmail = "testEmail1ToAssign");
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)cartContactToCheck).ContactEmail);
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)cartContactToCheck).ContactFirstName = "testFirstNameToAssign");
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)cartContactToCheck).ContactFirstName);
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)cartContactToCheck).ContactLastName = "testLastNameToAssign");
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)cartContactToCheck).ContactLastName);
            #endregion
            #region Stores
            // Stores / SiteDomain / Brands as ICollection<BrandSiteDomain>
            Assert.Equal(brandSiteDomainCollectionToAssign, siteDomainToCheck.Brands = brandSiteDomainCollectionToAssign);
            Assert.Equal(brandSiteDomainCollectionToAssign, siteDomainToCheck.Brands);
            // Stores / SiteDomain / Franchises as ICollection<FranchiseSiteDomain>
            //Assert.Equal(franchiseSiteDomainCollectionToAssign, siteDomainToCheck.Franchises = franchiseSiteDomainCollectionToAssign);
            //Assert.Equal(franchiseSiteDomainCollectionToAssign, siteDomainToCheck.Franchises);
            //// Stores / SiteDomain / SiteDomainSocialProviders as ICollection<SiteDomainSocialProvider>
            //Assert.Equal(siteDomainSocialProviderCollectionToAssign, siteDomainToCheck.SiteDomainSocialProviders = siteDomainSocialProviderCollectionToAssign);
            //Assert.Equal(siteDomainSocialProviderCollectionToAssign, siteDomainToCheck.SiteDomainSocialProviders);
            // Stores / SocialProvider / SiteDomainSocialProviders as ICollection<SiteDomainSocialProvider>
            Assert.Equal(siteDomainSocialProviderCollectionToAssign, socialProviderToCheck.SiteDomainSocialProviders = siteDomainSocialProviderCollectionToAssign);
            Assert.Equal(siteDomainSocialProviderCollectionToAssign, socialProviderToCheck.SiteDomainSocialProviders);
            // Stores / Store / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, storeToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, storeToCheck.Notes);
            // Stores / Store / Images as ICollection<StoreImage>
            Assert.Equal(storeImageCollectionToAssign, storeToCheck.Images = storeImageCollectionToAssign);
            Assert.Equal(storeImageCollectionToAssign, storeToCheck.Images);
            // Stores / Store / Reviews as ICollection<Review>
            Assert.Equal(reviewCollectionToAssign, storeToCheck.Reviews = reviewCollectionToAssign);
            Assert.Equal(reviewCollectionToAssign, storeToCheck.Reviews);
            // Stores / Store / Products as ICollection<StoreProduct>
            Assert.Equal(storeProductCollectionToAssign, storeToCheck.Products = storeProductCollectionToAssign);
            Assert.Equal(storeProductCollectionToAssign, storeToCheck.Products);
            // Stores / Store / Accounts as ICollection<StoreAccount>
            Assert.Equal(storeAccountCollectionToAssign, storeToCheck.Accounts = storeAccountCollectionToAssign);
            Assert.Equal(storeAccountCollectionToAssign, storeToCheck.Accounts);
            // Stores / Store / Users as ICollection<StoreUser>
            Assert.Equal(storeUserCollectionToAssign, storeToCheck.Users = storeUserCollectionToAssign);
            Assert.Equal(storeUserCollectionToAssign, storeToCheck.Users);
            // Stores / Store / Vendors as ICollection<StoreVendor>
            Assert.Equal(storeVendorCollectionToAssign, storeToCheck.Vendors = storeVendorCollectionToAssign);
            Assert.Equal(storeVendorCollectionToAssign, storeToCheck.Vendors);
            // Stores / Store / Categories as ICollection<StoreCategory>
            Assert.Equal(storeCategoryCollectionToAssign, storeToCheck.Categories = storeCategoryCollectionToAssign);
            Assert.Equal(storeCategoryCollectionToAssign, storeToCheck.Categories);
            // Stores / Store / Brands as ICollection<BrandStore>
            Assert.Equal(brandStoreCollectionToAssign, storeToCheck.Brands = brandStoreCollectionToAssign);
            Assert.Equal(brandStoreCollectionToAssign, storeToCheck.Brands);
            // Stores / Store / Franchises as ICollection<FranchiseStore>
            Assert.Equal(franchiseStoreCollectionToAssign, storeToCheck.Franchises = franchiseStoreCollectionToAssign);
            Assert.Equal(franchiseStoreCollectionToAssign, storeToCheck.Franchises);
            // Stores / Store / Manufacturers as ICollection<StoreManufacturer>
            Assert.Equal(storeManufacturerCollectionToAssign, storeToCheck.Manufacturers = storeManufacturerCollectionToAssign);
            Assert.Equal(storeManufacturerCollectionToAssign, storeToCheck.Manufacturers);
            // Stores / Store / StoreBadges as ICollection<StoreBadge>
            Assert.Equal(storeBadgeCollectionToAssign, storeToCheck.StoreBadges = storeBadgeCollectionToAssign);
            Assert.Equal(storeBadgeCollectionToAssign, storeToCheck.StoreBadges);
            // Stores / Store / StoreContacts as ICollection<StoreContact>
            Assert.Equal(storeContactCollectionToAssign, storeToCheck.StoreContacts = storeContactCollectionToAssign);
            Assert.Equal(storeContactCollectionToAssign, storeToCheck.StoreContacts);
            // Stores / Store / StoreInventoryLocations as ICollection<StoreInventoryLocation>
            Assert.Equal(storeInventoryLocationCollectionToAssign, storeToCheck.StoreInventoryLocations = storeInventoryLocationCollectionToAssign);
            Assert.Equal(storeInventoryLocationCollectionToAssign, storeToCheck.StoreInventoryLocations);
            // Stores / Store / StoreSubscriptions as ICollection<StoreSubscription>
            Assert.Equal(storeSubscriptionCollectionToAssign, storeToCheck.StoreSubscriptions = storeSubscriptionCollectionToAssign);
            Assert.Equal(storeSubscriptionCollectionToAssign, storeToCheck.StoreSubscriptions);
            // Stores / Store / StoreCountries as ICollection<StoreCountry>
            Assert.Equal(storeCountryCollectionToAssign, storeToCheck.StoreCountries = storeCountryCollectionToAssign);
            Assert.Equal(storeCountryCollectionToAssign, storeToCheck.StoreCountries);
            // Stores / Store / StoreRegions as ICollection<StoreRegion>
            Assert.Equal(storeRegionCollectionToAssign, storeToCheck.StoreRegions = storeRegionCollectionToAssign);
            Assert.Equal(storeRegionCollectionToAssign, storeToCheck.StoreRegions);
            // Stores / Store / StoreDistricts as ICollection<StoreDistrict>
            Assert.Equal(storeDistrictCollectionToAssign, storeToCheck.StoreDistricts = storeDistrictCollectionToAssign);
            Assert.Equal(storeDistrictCollectionToAssign, storeToCheck.StoreDistricts);
            // Stores / StoreAccount / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeAccountToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeAccountToCheck).StoreID);
            // Stores / StoreAccount / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeAccountToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeAccountToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeAccountToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeAccountToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeAccountToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeAccountToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeAccountToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeAccountToCheck).StoreSeoUrl);
            // Stores / StoreAccount / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAccountModel>)storeAccountToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAccountModel>)storeAccountToCheck).StoreID);
            // Stores / StoreAccount / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAccountModel>)storeAccountToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAccountModel>)storeAccountToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAccountModel>)storeAccountToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAccountModel>)storeAccountToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAccountModel>)storeAccountToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAccountModel>)storeAccountToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAccountModel>)storeAccountToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IAccountModel>)storeAccountToCheck).StoreSeoUrl);
            // Stores / StoreAccount / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccountModel)storeAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccountModel)storeAccountToCheck).AccountID);
            // Stores / StoreAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)storeAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)storeAccountToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)storeAccountToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)storeAccountToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)storeAccountToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)storeAccountToCheck).AccountName);
            // Stores / StoreAccount / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)storeAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)storeAccountToCheck).AccountID);
            // Stores / StoreAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)storeAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)storeAccountToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)storeAccountToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)storeAccountToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)storeAccountToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)storeAccountToCheck).AccountName);
            // Stores / StoreBadge / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeBadgeToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeBadgeToCheck).StoreID);
            // Stores / StoreBadge / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeBadgeToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeBadgeToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeBadgeToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeBadgeToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeBadgeToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeBadgeToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeBadgeToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeBadgeToCheck).StoreSeoUrl);
            // Stores / StoreBadge / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IBadgeModel>)storeBadgeToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IBadgeModel>)storeBadgeToCheck).StoreID);
            // Stores / StoreBadge / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IBadgeModel>)storeBadgeToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IBadgeModel>)storeBadgeToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IBadgeModel>)storeBadgeToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IBadgeModel>)storeBadgeToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IBadgeModel>)storeBadgeToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IBadgeModel>)storeBadgeToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IBadgeModel>)storeBadgeToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IBadgeModel>)storeBadgeToCheck).StoreSeoUrl);
            // Stores / StoreCategory / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICategoryModel>)storeCategoryToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICategoryModel>)storeCategoryToCheck).StoreID);
            // Stores / StoreCategory / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICategoryModel>)storeCategoryToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICategoryModel>)storeCategoryToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICategoryModel>)storeCategoryToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICategoryModel>)storeCategoryToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICategoryModel>)storeCategoryToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICategoryModel>)storeCategoryToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICategoryModel>)storeCategoryToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICategoryModel>)storeCategoryToCheck).StoreSeoUrl);
            // Stores / StoreCategory / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeCategoryToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeCategoryToCheck).StoreID);
            // Stores / StoreCategory / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeCategoryToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeCategoryToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeCategoryToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeCategoryToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeCategoryToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeCategoryToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeCategoryToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeCategoryToCheck).StoreSeoUrl);
            // Stores / StoreCategory / CategoryID as int
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)storeCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)storeCategoryToCheck).CategoryID);
            // Stores / StoreCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)storeCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)storeCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)storeCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)storeCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)storeCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)storeCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)storeCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmACategoryRelationshipTableWhereCategoryIsTheSlaveModel)storeCategoryToCheck).CategorySeoUrl);
            // Stores / StoreCategory / CategoryID as int
            Assert.Equal(1, ((IAmFilterableByCategoryModel)storeCategoryToCheck).CategoryID = 1);
            Assert.Equal(1, ((IAmFilterableByCategoryModel)storeCategoryToCheck).CategoryID);
            // Stores / StoreCategory / Category as Category
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)storeCategoryToCheck).Category = categoryToAssign);
            Assert.Equal(categoryToAssign, ((IAmFilterableByCategoryModel)storeCategoryToCheck).Category);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)storeCategoryToCheck).CategoryKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByCategoryModel)storeCategoryToCheck).CategoryKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)storeCategoryToCheck).CategoryName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByCategoryModel)storeCategoryToCheck).CategoryName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)storeCategoryToCheck).CategorySeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByCategoryModel)storeCategoryToCheck).CategorySeoUrl);
            // Stores / StoreContact / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeContactToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeContactToCheck).StoreID);
            // Stores / StoreContact / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeContactToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeContactToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeContactToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeContactToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeContactToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeContactToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeContactToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeContactToCheck).StoreSeoUrl);
            // Stores / StoreContact / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IContactModel>)storeContactToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IContactModel>)storeContactToCheck).StoreID);
            // Stores / StoreContact / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IContactModel>)storeContactToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IContactModel>)storeContactToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IContactModel>)storeContactToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IContactModel>)storeContactToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IContactModel>)storeContactToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IContactModel>)storeContactToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IContactModel>)storeContactToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IContactModel>)storeContactToCheck).StoreSeoUrl);
            // Stores / StoreContact / ContactID as int
            Assert.Equal(1, ((IHaveAContactBaseModel)storeContactToCheck).ContactID = 1);
            Assert.Equal(1, ((IHaveAContactBaseModel)storeContactToCheck).ContactID);
            // Stores / StoreContact / Contact as Contact
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)storeContactToCheck).Contact = contactToAssign);
            Assert.Equal(contactToAssign, ((IHaveAContactBaseModel)storeContactToCheck).Contact);
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)storeContactToCheck).ContactKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IHaveAContactBaseModel)storeContactToCheck).ContactKey);
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)storeContactToCheck).ContactPhone = "testPhone1ToAssign");
            Assert.Equal("testPhone1ToAssign", ((IHaveAContactBaseModel)storeContactToCheck).ContactPhone);
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)storeContactToCheck).ContactFax = "testFax1ToAssign");
            Assert.Equal("testFax1ToAssign", ((IHaveAContactBaseModel)storeContactToCheck).ContactFax);
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)storeContactToCheck).ContactEmail = "testEmail1ToAssign");
            Assert.Equal("testEmail1ToAssign", ((IHaveAContactBaseModel)storeContactToCheck).ContactEmail);
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)storeContactToCheck).ContactFirstName = "testFirstNameToAssign");
            Assert.Equal("testFirstNameToAssign", ((IHaveAContactBaseModel)storeContactToCheck).ContactFirstName);
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)storeContactToCheck).ContactLastName = "testLastNameToAssign");
            Assert.Equal("testLastNameToAssign", ((IHaveAContactBaseModel)storeContactToCheck).ContactLastName);
            // Stores / StoreCountry / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICountryModel>)storeCountryToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICountryModel>)storeCountryToCheck).StoreID);
            // Stores / StoreCountry / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICountryModel>)storeCountryToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICountryModel>)storeCountryToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICountryModel>)storeCountryToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICountryModel>)storeCountryToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICountryModel>)storeCountryToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICountryModel>)storeCountryToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICountryModel>)storeCountryToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ICountryModel>)storeCountryToCheck).StoreSeoUrl);
            // Stores / StoreCountry / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeCountryToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeCountryToCheck).StoreID);
            // Stores / StoreCountry / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeCountryToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeCountryToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeCountryToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeCountryToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeCountryToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeCountryToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeCountryToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeCountryToCheck).StoreSeoUrl);
            // Stores / StoreDistrict / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IDistrictModel>)storeDistrictToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IDistrictModel>)storeDistrictToCheck).StoreID);
            // Stores / StoreDistrict / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IDistrictModel>)storeDistrictToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IDistrictModel>)storeDistrictToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IDistrictModel>)storeDistrictToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IDistrictModel>)storeDistrictToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IDistrictModel>)storeDistrictToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IDistrictModel>)storeDistrictToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IDistrictModel>)storeDistrictToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IDistrictModel>)storeDistrictToCheck).StoreSeoUrl);
            // Stores / StoreDistrict / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeDistrictToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeDistrictToCheck).StoreID);
            // Stores / StoreDistrict / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeDistrictToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeDistrictToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeDistrictToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeDistrictToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeDistrictToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeDistrictToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeDistrictToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeDistrictToCheck).StoreSeoUrl);
            // Stores / StoreInventoryLocation / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeInventoryLocationToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeInventoryLocationToCheck).StoreID);
            // Stores / StoreInventoryLocation / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeInventoryLocationToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeInventoryLocationToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeInventoryLocationToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeInventoryLocationToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeInventoryLocationToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeInventoryLocationToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeInventoryLocationToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeInventoryLocationToCheck).StoreSeoUrl);
            // Stores / StoreInventoryLocation / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IInventoryLocationModel>)storeInventoryLocationToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IInventoryLocationModel>)storeInventoryLocationToCheck).StoreID);
            // Stores / StoreInventoryLocation / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IInventoryLocationModel>)storeInventoryLocationToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IInventoryLocationModel>)storeInventoryLocationToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IInventoryLocationModel>)storeInventoryLocationToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IInventoryLocationModel>)storeInventoryLocationToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IInventoryLocationModel>)storeInventoryLocationToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IInventoryLocationModel>)storeInventoryLocationToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IInventoryLocationModel>)storeInventoryLocationToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IInventoryLocationModel>)storeInventoryLocationToCheck).StoreSeoUrl);
            // Stores / StoreManufacturer / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeManufacturerToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeManufacturerToCheck).StoreID);
            // Stores / StoreManufacturer / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeManufacturerToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeManufacturerToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeManufacturerToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeManufacturerToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeManufacturerToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeManufacturerToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeManufacturerToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeManufacturerToCheck).StoreSeoUrl);
            // Stores / StoreManufacturer / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IManufacturerModel>)storeManufacturerToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IManufacturerModel>)storeManufacturerToCheck).StoreID);
            // Stores / StoreManufacturer / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IManufacturerModel>)storeManufacturerToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IManufacturerModel>)storeManufacturerToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IManufacturerModel>)storeManufacturerToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IManufacturerModel>)storeManufacturerToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IManufacturerModel>)storeManufacturerToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IManufacturerModel>)storeManufacturerToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IManufacturerModel>)storeManufacturerToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IManufacturerModel>)storeManufacturerToCheck).StoreSeoUrl);
            // Stores / StoreManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)storeManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)storeManufacturerToCheck).ManufacturerID);
            // Stores / StoreManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)storeManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)storeManufacturerToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)storeManufacturerToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)storeManufacturerToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)storeManufacturerToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)storeManufacturerToCheck).ManufacturerName);
            // Stores / StoreManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)storeManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)storeManufacturerToCheck).ManufacturerID);
            // Stores / StoreManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)storeManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)storeManufacturerToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)storeManufacturerToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)storeManufacturerToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)storeManufacturerToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)storeManufacturerToCheck).ManufacturerName);
            // Stores / StoreProduct / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeProductToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeProductToCheck).StoreID);
            // Stores / StoreProduct / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeProductToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeProductToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeProductToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeProductToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeProductToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeProductToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeProductToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeProductToCheck).StoreSeoUrl);
            // Stores / StoreProduct / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IProductModel>)storeProductToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IProductModel>)storeProductToCheck).StoreID);
            // Stores / StoreProduct / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IProductModel>)storeProductToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IProductModel>)storeProductToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IProductModel>)storeProductToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IProductModel>)storeProductToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IProductModel>)storeProductToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IProductModel>)storeProductToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IProductModel>)storeProductToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IProductModel>)storeProductToCheck).StoreSeoUrl);
            // Stores / StoreProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)storeProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)storeProductToCheck).ProductID);
            // Stores / StoreProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)storeProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)storeProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)storeProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)storeProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)storeProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)storeProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)storeProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)storeProductToCheck).ProductSeoUrl);
            // Stores / StoreProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)storeProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)storeProductToCheck).ProductID);
            // Stores / StoreProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)storeProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)storeProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)storeProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)storeProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)storeProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)storeProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)storeProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)storeProductToCheck).ProductSeoUrl);
            // Stores / StoreRegion / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IRegionModel>)storeRegionToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IRegionModel>)storeRegionToCheck).StoreID);
            // Stores / StoreRegion / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IRegionModel>)storeRegionToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IRegionModel>)storeRegionToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IRegionModel>)storeRegionToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IRegionModel>)storeRegionToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IRegionModel>)storeRegionToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IRegionModel>)storeRegionToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IRegionModel>)storeRegionToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IRegionModel>)storeRegionToCheck).StoreSeoUrl);
            // Stores / StoreRegion / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeRegionToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeRegionToCheck).StoreID);
            // Stores / StoreRegion / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeRegionToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeRegionToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeRegionToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeRegionToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeRegionToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeRegionToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeRegionToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeRegionToCheck).StoreSeoUrl);
            // Stores / StoreSubscription / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeSubscriptionToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeSubscriptionToCheck).StoreID);
            // Stores / StoreSubscription / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeSubscriptionToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeSubscriptionToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeSubscriptionToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeSubscriptionToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeSubscriptionToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeSubscriptionToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeSubscriptionToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeSubscriptionToCheck).StoreSeoUrl);
            // Stores / StoreSubscription / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ISubscriptionModel>)storeSubscriptionToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ISubscriptionModel>)storeSubscriptionToCheck).StoreID);
            // Stores / StoreSubscription / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ISubscriptionModel>)storeSubscriptionToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ISubscriptionModel>)storeSubscriptionToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ISubscriptionModel>)storeSubscriptionToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ISubscriptionModel>)storeSubscriptionToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ISubscriptionModel>)storeSubscriptionToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ISubscriptionModel>)storeSubscriptionToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ISubscriptionModel>)storeSubscriptionToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<ISubscriptionModel>)storeSubscriptionToCheck).StoreSeoUrl);
            // Stores / StoreUser / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeUserToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeUserToCheck).StoreID);
            // Stores / StoreUser / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeUserToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeUserToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeUserToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeUserToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeUserToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeUserToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeUserToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeUserToCheck).StoreSeoUrl);
            // Stores / StoreUser / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IUserModel>)storeUserToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IUserModel>)storeUserToCheck).StoreID);
            // Stores / StoreUser / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IUserModel>)storeUserToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IUserModel>)storeUserToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IUserModel>)storeUserToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IUserModel>)storeUserToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IUserModel>)storeUserToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IUserModel>)storeUserToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IUserModel>)storeUserToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IUserModel>)storeUserToCheck).StoreSeoUrl);
            // Stores / StoreUser / UserID as int
            Assert.Equal(1, ((IAmFilterableByUserModel)storeUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmFilterableByUserModel)storeUserToCheck).UserID);
            // Stores / StoreUser / User as User
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)storeUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmFilterableByUserModel)storeUserToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)storeUserToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByUserModel)storeUserToCheck).UserKey);
            // Stores / StoreUser / UserID as int
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)storeUserToCheck).UserID = 1);
            Assert.Equal(1, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)storeUserToCheck).UserID);
            // Stores / StoreUser / User as User
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)storeUserToCheck).User = userToAssign);
            Assert.Equal(userToAssign, ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)storeUserToCheck).User);
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)storeUserToCheck).UserKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAUserRelationshipTableWhereUserIsTheSlaveModel)storeUserToCheck).UserKey);
            // Stores / StoreVendor / StoreID as int
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeVendorToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmFilterableByStoreModel)storeVendorToCheck).StoreID);
            // Stores / StoreVendor / Store as Store
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeVendorToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmFilterableByStoreModel)storeVendorToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeVendorToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByStoreModel)storeVendorToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeVendorToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByStoreModel)storeVendorToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeVendorToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByStoreModel)storeVendorToCheck).StoreSeoUrl);
            // Stores / StoreVendor / StoreID as int
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IVendorModel>)storeVendorToCheck).StoreID = 1);
            Assert.Equal(1, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IVendorModel>)storeVendorToCheck).StoreID);
            // Stores / StoreVendor / Store as Store
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IVendorModel>)storeVendorToCheck).Store = storeToAssign);
            Assert.Equal(storeToAssign, ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IVendorModel>)storeVendorToCheck).Store);
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IVendorModel>)storeVendorToCheck).StoreKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IVendorModel>)storeVendorToCheck).StoreKey);
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IVendorModel>)storeVendorToCheck).StoreName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IVendorModel>)storeVendorToCheck).StoreName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IVendorModel>)storeVendorToCheck).StoreSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAStoreRelationshipTableWhereStoreIsTheMasterModel<IVendorModel>)storeVendorToCheck).StoreSeoUrl);
            // Stores / StoreVendor / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendorModel)storeVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendorModel)storeVendorToCheck).VendorID);
            // Stores / StoreVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)storeVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)storeVendorToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)storeVendorToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)storeVendorToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)storeVendorToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)storeVendorToCheck).VendorName);
            // Stores / StoreVendor / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)storeVendorToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)storeVendorToCheck).VendorID);
            // Stores / StoreVendor / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)storeVendorToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)storeVendorToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)storeVendorToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)storeVendorToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)storeVendorToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheSlaveModel)storeVendorToCheck).VendorName);
            #endregion
            #region System
            #endregion
            #region Tax
            #endregion
            #region Tracking
            // Tracking / Campaign / CampaignAds as ICollection<CampaignAd>
            Assert.Equal(campaignAdCollectionToAssign, campaignToCheck.CampaignAds = campaignAdCollectionToAssign);
            Assert.Equal(campaignAdCollectionToAssign, campaignToCheck.CampaignAds);
            // Tracking / Event / PageViewEvents as ICollection<PageViewEvent>
            Assert.Equal(pageViewEventCollectionToAssign, eventToCheck.PageViewEvents = pageViewEventCollectionToAssign);
            Assert.Equal(pageViewEventCollectionToAssign, eventToCheck.PageViewEvents);
            // Tracking / PageView / PageViewEvents as ICollection<PageViewEvent>
            Assert.Equal(pageViewEventCollectionToAssign, pageViewToCheck.PageViewEvents = pageViewEventCollectionToAssign);
            Assert.Equal(pageViewEventCollectionToAssign, pageViewToCheck.PageViewEvents);
            // Tracking / Visit / Events as ICollection<Event>
            Assert.Equal(eventCollectionToAssign, visitToCheck.Events = eventCollectionToAssign);
            Assert.Equal(eventCollectionToAssign, visitToCheck.Events);
            // Tracking / Visitor / Visits as ICollection<Visit>
            Assert.Equal(visitCollectionToAssign, visitorToCheck.Visits = visitCollectionToAssign);
            Assert.Equal(visitCollectionToAssign, visitorToCheck.Visits);
            #endregion
            #region Vendors
            // Vendors / Vendor / Notes as ICollection<Note>
            Assert.Equal(noteCollectionToAssign, vendorToCheck.Notes = noteCollectionToAssign);
            Assert.Equal(noteCollectionToAssign, vendorToCheck.Notes);
            // Vendors / Vendor / Images as ICollection<VendorImage>
            Assert.Equal(vendorImageCollectionToAssign, vendorToCheck.Images = vendorImageCollectionToAssign);
            Assert.Equal(vendorImageCollectionToAssign, vendorToCheck.Images);
            // Vendors / Vendor / Reviews as ICollection<Review>
            Assert.Equal(reviewCollectionToAssign, vendorToCheck.Reviews = reviewCollectionToAssign);
            Assert.Equal(reviewCollectionToAssign, vendorToCheck.Reviews);
            // Vendors / Vendor / Accounts as ICollection<VendorAccount>
            Assert.Equal(vendorAccountCollectionToAssign, vendorToCheck.Accounts = vendorAccountCollectionToAssign);
            Assert.Equal(vendorAccountCollectionToAssign, vendorToCheck.Accounts);
            // Vendors / Vendor / Brands as ICollection<BrandVendor>
            Assert.Equal(brandVendorCollectionToAssign, vendorToCheck.Brands = brandVendorCollectionToAssign);
            Assert.Equal(brandVendorCollectionToAssign, vendorToCheck.Brands);
            // Vendors / Vendor / Franchises as ICollection<FranchiseVendor>
            Assert.Equal(franchiseVendorCollectionToAssign, vendorToCheck.Franchises = franchiseVendorCollectionToAssign);
            Assert.Equal(franchiseVendorCollectionToAssign, vendorToCheck.Franchises);
            // Vendors / Vendor / Manufacturers as ICollection<VendorManufacturer>
            Assert.Equal(vendorManufacturerCollectionToAssign, vendorToCheck.Manufacturers = vendorManufacturerCollectionToAssign);
            Assert.Equal(vendorManufacturerCollectionToAssign, vendorToCheck.Manufacturers);
            // Vendors / Vendor / Products as ICollection<VendorProduct>
            Assert.Equal(vendorProductCollectionToAssign, vendorToCheck.Products = vendorProductCollectionToAssign);
            Assert.Equal(vendorProductCollectionToAssign, vendorToCheck.Products);
            // Vendors / Vendor / Stores as ICollection<StoreVendor>
            Assert.Equal(storeVendorCollectionToAssign, vendorToCheck.Stores = storeVendorCollectionToAssign);
            Assert.Equal(storeVendorCollectionToAssign, vendorToCheck.Stores);
            // Vendors / Vendor / Shipments as ICollection<Shipment>
            Assert.Equal(shipmentCollectionToAssign, vendorToCheck.Shipments = shipmentCollectionToAssign);
            Assert.Equal(shipmentCollectionToAssign, vendorToCheck.Shipments);
            // Vendors / Vendor / PurchaseOrders as ICollection<PurchaseOrder>
            //Assert.Equal(purchaseOrderCollectionToAssign, vendorToCheck.PurchaseOrders = purchaseOrderCollectionToAssign);
            //Assert.Equal(purchaseOrderCollectionToAssign, vendorToCheck.PurchaseOrders);
            // Vendors / VendorAccount / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendorModel)vendorAccountToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendorModel)vendorAccountToCheck).VendorID);
            // Vendors / VendorAccount / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)vendorAccountToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)vendorAccountToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)vendorAccountToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)vendorAccountToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)vendorAccountToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)vendorAccountToCheck).VendorName);
            // Vendors / VendorAccount / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IAccountModel>)vendorAccountToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IAccountModel>)vendorAccountToCheck).VendorID);
            // Vendors / VendorAccount / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IAccountModel>)vendorAccountToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IAccountModel>)vendorAccountToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IAccountModel>)vendorAccountToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IAccountModel>)vendorAccountToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IAccountModel>)vendorAccountToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IAccountModel>)vendorAccountToCheck).VendorName);
            // Vendors / VendorAccount / AccountID as int
            Assert.Equal(1, ((IAmFilterableByAccountModel)vendorAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmFilterableByAccountModel)vendorAccountToCheck).AccountID);
            // Vendors / VendorAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)vendorAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmFilterableByAccountModel)vendorAccountToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)vendorAccountToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByAccountModel)vendorAccountToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)vendorAccountToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByAccountModel)vendorAccountToCheck).AccountName);
            // Vendors / VendorAccount / AccountID as int
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)vendorAccountToCheck).AccountID = 1);
            Assert.Equal(1, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)vendorAccountToCheck).AccountID);
            // Vendors / VendorAccount / Account as Account
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)vendorAccountToCheck).Account = accountToAssign);
            Assert.Equal(accountToAssign, ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)vendorAccountToCheck).Account);
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)vendorAccountToCheck).AccountKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)vendorAccountToCheck).AccountKey);
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)vendorAccountToCheck).AccountName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAnAccountRelationshipTableWhereAccountIsTheSlaveModel)vendorAccountToCheck).AccountName);
            // Vendors / VendorManufacturer / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendorModel)vendorManufacturerToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendorModel)vendorManufacturerToCheck).VendorID);
            // Vendors / VendorManufacturer / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)vendorManufacturerToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)vendorManufacturerToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)vendorManufacturerToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)vendorManufacturerToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)vendorManufacturerToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)vendorManufacturerToCheck).VendorName);
            // Vendors / VendorManufacturer / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IManufacturerModel>)vendorManufacturerToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IManufacturerModel>)vendorManufacturerToCheck).VendorID);
            // Vendors / VendorManufacturer / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IManufacturerModel>)vendorManufacturerToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IManufacturerModel>)vendorManufacturerToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IManufacturerModel>)vendorManufacturerToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IManufacturerModel>)vendorManufacturerToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IManufacturerModel>)vendorManufacturerToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IManufacturerModel>)vendorManufacturerToCheck).VendorName);
            // Vendors / VendorManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)vendorManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmFilterableByManufacturerModel)vendorManufacturerToCheck).ManufacturerID);
            // Vendors / VendorManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)vendorManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmFilterableByManufacturerModel)vendorManufacturerToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)vendorManufacturerToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByManufacturerModel)vendorManufacturerToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)vendorManufacturerToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByManufacturerModel)vendorManufacturerToCheck).ManufacturerName);
            // Vendors / VendorManufacturer / ManufacturerID as int
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)vendorManufacturerToCheck).ManufacturerID = 1);
            Assert.Equal(1, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)vendorManufacturerToCheck).ManufacturerID);
            // Vendors / VendorManufacturer / Manufacturer as Manufacturer
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)vendorManufacturerToCheck).Manufacturer = manufacturerToAssign);
            Assert.Equal(manufacturerToAssign, ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)vendorManufacturerToCheck).Manufacturer);
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)vendorManufacturerToCheck).ManufacturerKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)vendorManufacturerToCheck).ManufacturerKey);
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)vendorManufacturerToCheck).ManufacturerName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlaveModel)vendorManufacturerToCheck).ManufacturerName);
            // Vendors / VendorProduct / VendorID as int
            Assert.Equal(1, ((IAmFilterableByVendorModel)vendorProductToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmFilterableByVendorModel)vendorProductToCheck).VendorID);
            // Vendors / VendorProduct / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)vendorProductToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmFilterableByVendorModel)vendorProductToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)vendorProductToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByVendorModel)vendorProductToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)vendorProductToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByVendorModel)vendorProductToCheck).VendorName);
            // Vendors / VendorProduct / VendorID as int
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IProductModel>)vendorProductToCheck).VendorID = 1);
            Assert.Equal(1, ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IProductModel>)vendorProductToCheck).VendorID);
            // Vendors / VendorProduct / Vendor as Vendor
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IProductModel>)vendorProductToCheck).Vendor = vendorToAssign);
            Assert.Equal(vendorToAssign, ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IProductModel>)vendorProductToCheck).Vendor);
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IProductModel>)vendorProductToCheck).VendorKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IProductModel>)vendorProductToCheck).VendorKey);
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IProductModel>)vendorProductToCheck).VendorName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAVendorRelationshipTableWhereVendorIsTheMasterModel<IProductModel>)vendorProductToCheck).VendorName);
            // Vendors / VendorProduct / ProductID as int
            Assert.Equal(1, ((IAmFilterableByProductModel)vendorProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmFilterableByProductModel)vendorProductToCheck).ProductID);
            // Vendors / VendorProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)vendorProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmFilterableByProductModel)vendorProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)vendorProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmFilterableByProductModel)vendorProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)vendorProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmFilterableByProductModel)vendorProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)vendorProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmFilterableByProductModel)vendorProductToCheck).ProductSeoUrl);
            // Vendors / VendorProduct / ProductID as int
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)vendorProductToCheck).ProductID = 1);
            Assert.Equal(1, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)vendorProductToCheck).ProductID);
            // Vendors / VendorProduct / Product as Product
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)vendorProductToCheck).Product = productToAssign);
            Assert.Equal(productToAssign, ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)vendorProductToCheck).Product);
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)vendorProductToCheck).ProductKey = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)vendorProductToCheck).ProductKey);
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)vendorProductToCheck).ProductName = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)vendorProductToCheck).ProductName);
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)vendorProductToCheck).ProductSeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((IAmAProductRelationshipTableWhereProductIsTheSlaveModel)vendorProductToCheck).ProductSeoUrl);
            #endregion
            #endregion
        }
    }
}
