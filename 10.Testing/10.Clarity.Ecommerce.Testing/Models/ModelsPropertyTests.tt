<#@ template language="C#"
#><#@ assembly name="System"
#><#@ assembly name="System.Core"
#><#@ assembly name="System.ComponentModel.DataAnnotations"
#><#@ assembly name="$(UserProfile)\.nuget\packages\entityframework\6.4.4\lib\net45\EntityFramework.dll"
#><#@ assembly name="$(SolutionDir)01.DataAccessLayer\01.Clarity.Ecommerce.DataModel\bin\Debug\net472\Clarity.Ecommerce.DataModel.dll"
#><#@ assembly name="$(SolutionDir)11.T4\11.T4.CodeGenerator\bin\Debug\net472\CodeGenerator.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel.DataAnnotations"
#><#@ import namespace="System.ComponentModel.DataAnnotations.Schema"
#><#@ import namespace="System.Data.Entity"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Text"
#><#@ import namespace="CodeGenerator"
#><#@ import namespace="Clarity.Ecommerce.DataModel"
#><#
var tableClasses = AppDomain.CurrentDomain.GetAssemblies()
    .Where(x => x.FullName.StartsWith("Clarity.Ecommerce.DataModel"))
    .SelectMany(x => x.GetTypes().Where(t => t.CustomAttributes.Any(at => at.AttributeType == typeof(SqlSchemaAttribute))))
    .OrderBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Both)
    .GroupBy(x => ((SqlSchemaAttribute)Attribute.GetCustomAttribute(x, typeof(SqlSchemaAttribute))).Schema);
var skips = new[]
{
    "AccountUserRole", "RolePermission", "UserClaim", "UserLogin", "UserRole", "HangfireAggregatedCounter",
    "HangfireCounter", "HangfireHash", "HangfireJob", "HangfireJobQueue", "HangfireJobParameter", "HangfireList",
    "HangfireSchema", "HangfireServer", "HangfireSet", "UserSupportRequest", "Report",
};
var propSkips = new[]
{
    "Account.AccountUserRoles", "Auction.Lots", "Lot.Bids", "Contact.Vendors",
    "Contact.Payments", "User.FavoriteCategories", "User.FavoriteVendors", "User.FavoriteManufacturers",
    "User.FavoriteStores", "User.ReferralCodes", "User.ProductTypes", "User.SalesInvoices", "User.SalesQuotes",
    "User.SalesQuotes", "User.SalesOrders", "User.UserProductTypes", "User.Subscriptions", "User.SentMessages",
    "User.ReceivedMessages", "User.ConversationUsers", "User.DiscountCodes", "User.Wallets",
    "User.MessageAttachmentsCreated", "User.MessageAttachmentsUpdated", "User.NotesCreated", "User.NotesUpdated",
    "User.ReviewsSubmitted", "User.ReviewsApproved", "User.UserEventAttendances", "Currency.HistoricalStartingCurrencies",
    "Currency.HistoricalEndingCurrencies", "Currency.ConversionStartingCurrencies", "Currency.ConversionEndingCurrencies",
    "Country.Taxes", "Country.Districts", "District.Taxes", "Region.Taxes", "Region.Districts",
    "SalesOrderSalesInvoice.SalesOrderID", "SalesOrderSalesInvoice.SalesOrder", "SalesOrderSalesInvoice.SalesInvoiceID",
    "SalesOrderSalesInvoice.SalesInvoice", "MessageRecipient.EmailQueues", "PricePoint.StoreAccounts",
    "Product.ProductInventoryLocationSections", "Product.ProductPricePoints", "Product.CartItems", "Product.SalesOrderItems",
    "Product.SalesReturnItems", "Product.DiscountProducts", "SalesOrderPurchaseOrder.SalesOrderID",
    "SalesOrderPurchaseOrder.SalesOrder", "SalesOrderPurchaseOrder.PurchaseOrderID", "SalesOrderPurchaseOrder.PurchaseOrder",
    "Question.FollowUpQuestionOptions", "Question.ParentQuestions", "Question.Answers", "QuestionOption.Answers",
    "SalesQuoteSalesOrder.SalesQuoteID", "SalesQuoteSalesOrder.SalesQuote", "SalesQuoteSalesOrder.SalesOrderID",
    "SalesQuoteSalesOrder.SalesOrder", "SalesReturnSalesOrder.SalesReturnID", "SalesReturnSalesOrder.SalesReturn",
    "SalesReturnSalesOrder.SalesOrderID", "SalesReturnSalesOrder.SalesOrder", "ShipCarrierMethod.ProductShipCarrierMethods",
};
#>// <autogenerated>
// <copyright file="ModelsPropertyTests.cs" company="clarity-ventures.com">
// Copyright (c) 2021-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the Model Property Testing Registry to check property assignments and reads
// and provide additional code coverage of non-auto properties.</summary>
// <remarks>This file was auto-generated by ModelsPropertyTests.tt, changes to this
// file will be overwritten automatically when the T4 template is run again.</remarks>
// </autogenerated>
#nullable enable
#pragma warning disable CS0618, CS0619
// ReSharper disable SuggestVarOrType_Elsewhere, UnusedVariable
namespace Clarity.Ecommerce.Models.Testing
{
    using System;
    using System.Collections.Generic;
    using Interfaces.Models;
    using Xunit;

    [Trait("Category", "Models.ModelCustomProperties")]
    public partial class ModelsPropertyTests
    {
        [Fact, Obsolete]
        public void Verify_AssigningAndReadingAnyCustomEntityProperties_Works()
        {
            #region Arrange
            #region To Assign's
<#  foreach (var @group in tableClasses) { #>
            #region <#= @group.Key #>
<#      foreach (var table in @group) { if (skips.Contains(table.Name)) { continue; } #>
            <#= HelpFunctions.SwapToModelType(table.Name) #>Model <#= HelpFunctions.LowerFirstCharacter(table.Name) #>ToAssign = new();
            List<<#= HelpFunctions.SwapToModelType(table.Name) #>Model> <#= HelpFunctions.LowerFirstCharacter(table.Name) #>CollectionToAssign = new List<<#= HelpFunctions.SwapToModelType(table.Name) #>Model>();
<#      } #>
            #endregion
<#  } #>
            #endregion
            #region To Check's
<#  foreach (var @group in tableClasses) { #>
            #region <#= @group.Key #>
<#      foreach (var table in @group) { if (skips.Contains(table.Name)) { continue; } #>
            <#= HelpFunctions.SwapToModelType(table.Name) #>Model <#= HelpFunctions.LowerFirstCharacter(table.Name) #>ToCheck = new();
<#      } #>
            #endregion
<#  } #>
            #endregion
            #endregion
            #region Act/Assert
<#  foreach (var @group in tableClasses) { #>
            #region <#= @group.Key #>
<#      foreach (var table in @group) {
            if (skips.Contains(table.Name)) { continue; }
            var tableNameLowerFirst = HelpFunctions.LowerFirstCharacter(table.Name);
            foreach (var property in table
                                        .GetProperties(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                                        .Select(prop => new { prop, getAccessor = prop.GetGetMethod(true) })
                                        .Where(t => t.getAccessor.IsFinal && @t.getAccessor.IsPrivate)
                                        .Select(t => t.prop))
            {
                var propertyName = property.Name.Substring(property.Name.LastIndexOf('.') + 1);
                if (propSkips.Contains($"{table.Name}.{propertyName}")
                    || propertyName.StartsWith("MinimumOrderDollarAmountBuffer"))
                {
                    continue;
                }
                var castTypeName = property.Name.Substring(0, property.Name.LastIndexOf('.'))
                    .Replace("Clarity.Ecommerce.Interfaces.DataModel.", string.Empty)
                    .Replace("Clarity.Ecommerce.DataModel.", string.Empty);
                if (castTypeName.EndsWith(">"))
                {
                    if (castTypeName.Contains("IAmAnAccountRelationshipTableWhereAccountIsTheSlave")
                        || castTypeName.Contains("IAmABrandRelationshipTableWhereBrandIsTheSlave")
                        || castTypeName.Contains("IAmACategoryRelationshipTableWhereCategoryIsTheSlave")
                        || castTypeName.Contains("IAmAFranchiseRelationshipTableWhereFranchiseIsTheSlave")
                        || castTypeName.Contains("IAmAManufacturerRelationshipTableWhereManufacturerIsTheSlave")
                        || castTypeName.Contains("IAmAProductRelationshipTableWhereProductIsTheSlave")
                        || castTypeName.Contains("IAmAStoreRelationshipTableWhereStoreIsTheSlave")
                        || castTypeName.Contains("IAmAUserRelationshipTableWhereUserIsTheSlave")
                        || castTypeName.Contains("IAmAVendorRelationshipTableWhereVendorIsTheSlave"))
                    {
                        castTypeName = castTypeName.Substring(0, castTypeName.IndexOf("<")) + "Model";
                    }
                    else
                    {
                        castTypeName = castTypeName.Insert(castTypeName.IndexOf("<"), "Model");
                        castTypeName = castTypeName.Insert(castTypeName.IndexOf("<") + 1, "I");
                        castTypeName = castTypeName.Insert(castTypeName.IndexOf(">"), "Model");
                        castTypeName = castTypeName.Replace("IProductTypeModel", "ITypeModel");
                    }
                }
                else
                {
                    castTypeName += "Model";
                }
                var returnType = property.PropertyType;
                if (returnType.Name == "ICollection`1")
                {
                    returnType = returnType.GetGenericArguments()[0];
                }
                var returnTypeLowerFirst = HelpFunctions.LowerFirstCharacter(returnType.Name);
                var returnTypeToUse = HelpFunctions.SwapToSimpleType(returnType);
                var returnTypeHasCustomKey = returnType.GetProperties().Any(x => x.Name == "CustomKey");
                var returnTypeHasName = returnType.GetProperties().Any(x => x.Name == "Name");
                var returnTypeHasSeoUrl = returnType.GetProperties().Any(x => x.Name == "SeoUrl");
                var returnTypeHasPhone1 = returnType.GetProperties().Any(x => x.Name == "Phone1");
                var returnTypeHasFax1 = returnType.GetProperties().Any(x => x.Name == "Fax1");
                var returnTypeHasEmail1 = returnType.GetProperties().Any(x => x.Name == "Email1");
                var returnTypeHasFirstName = returnType.GetProperties().Any(x => x.Name == "FirstName");
                var returnTypeHasLastName = returnType.GetProperties().Any(x => x.Name == "LastName");
#>
            // <#= @group.Key #> / <#= table.Name #> / <#= propertyName #> as <#= returnTypeToUse #>
<#              if (returnTypeToUse == "int") { #>
            Assert.Equal(1, ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #> = 1);
            Assert.Equal(1, ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>);
<#              } else { #>
            Assert.Equal(<#= returnTypeLowerFirst #>ToAssign, ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #> = <#= returnTypeLowerFirst #>ToAssign);
            Assert.Equal(<#= returnTypeLowerFirst #>ToAssign, ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>);
<#                  if (returnTypeHasCustomKey) { #>
            Assert.Equal("testKeyToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>Key = "testKeyToAssign");
            Assert.Equal("testKeyToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>Key);
<#                  } #>
<#                  if (returnTypeHasName) { #>
            Assert.Equal("testNameToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>Name = "testNameToAssign");
            Assert.Equal("testNameToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>Name);
<#                  } #>
<#                  if (returnTypeHasSeoUrl) { #>
            Assert.Equal("testSeoUrlToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>SeoUrl = "testSeoUrlToAssign");
            Assert.Equal("testSeoUrlToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>SeoUrl);
<#                  } #>
<#                  if (returnTypeHasPhone1) { #>
            Assert.Equal("testPhone1ToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>Phone = "testPhone1ToAssign");
            Assert.Equal("testPhone1ToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>Phone);
<#                  } #>
<#                  if (returnTypeHasFax1) { #>
            Assert.Equal("testFax1ToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>Fax = "testFax1ToAssign");
            Assert.Equal("testFax1ToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>Fax);
<#                  } #>
<#                  if (returnTypeHasEmail1) { #>
            Assert.Equal("testEmail1ToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>Email = "testEmail1ToAssign");
            Assert.Equal("testEmail1ToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>Email);
<#                  } #>
<#                  if (returnTypeHasFirstName) { #>
            Assert.Equal("testFirstNameToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>FirstName = "testFirstNameToAssign");
            Assert.Equal("testFirstNameToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>FirstName);
<#                  } #>
<#                  if (returnTypeHasLastName) { #>
            Assert.Equal("testLastNameToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>LastName = "testLastNameToAssign");
            Assert.Equal("testLastNameToAssign", ((<#= castTypeName #>)<#= tableNameLowerFirst #>ToCheck).<#= propertyName #>LastName);
<#                  } #>
<#              } #>
<#          }
            foreach (var property in table
                .GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
                .Where(prop => prop.PropertyType.Name == "ICollection`1" && prop.Name != "Permissions"))
            {
                var propertyName = property.Name;
                if (propSkips.Contains($"{table.Name}.{propertyName}")
                    || propertyName.Contains("MinimumOrderDollarAmountBuffer")
                    || propertyName.Contains("MinimumOrderQuantityAmountBuffer")
                    || propertyName.Contains("MinimumForFreeShippingDollarAmountBuffer")
                    || propertyName.Contains("MinimumForFreeShippingQuantityAmountBuffer")
                    || propertyName.Contains("BillingContactsSales")
                    || propertyName.Contains("BillingContactsPurchase")
                    || propertyName.Contains("ShippingContactsSales")
                    || propertyName.Contains("ShippingContactsPurchase")
                    || propertyName.Contains("OriginContactsShipments")
                    || propertyName.Contains("DestinationContactsShipments")
                    )
                {
                    continue;
                }
                var returnType = property.PropertyType.GetGenericArguments()[0];
                var returnTypeLowerFirst = HelpFunctions.LowerFirstCharacter(returnType.Name);
                var returnTypeToUse = HelpFunctions.SwapToSimpleType(returnType);
#>
            // <#= @group.Key #> / <#= table.Name #> / <#= propertyName #> as ICollection<<#= returnTypeToUse #>>
            Assert.Equal(<#= returnTypeLowerFirst #>CollectionToAssign, <#= tableNameLowerFirst #>ToCheck.<#= propertyName #> = <#= returnTypeLowerFirst #>CollectionToAssign);
            Assert.Equal(<#= returnTypeLowerFirst #>CollectionToAssign, <#= tableNameLowerFirst #>ToCheck.<#= propertyName #>);
<#          } #>
<#      } #>
            #endregion
<#  } #>
            #endregion
        }
    }
}
