////// Generated by Selenium IDE
////using System;
////using System.Collections.Generic;
////using OpenQA.Selenium;
////using OpenQA.Selenium.Chrome;
////using OpenQA.Selenium.Interactions;
////using OpenQA.Selenium.Support.UI;
////using Xunit;
////public class SuiteTests : IDisposable
////{
////    public IWebDriver driver { get; private set; }
////    public IDictionary<String, Object> vars { get; private set; }
////    public IJavaScriptExecutor js { get; private set; }
////    public SuiteTests()
////    {
////        driver = new ChromeDriver();
////        js = (IJavaScriptExecutor)driver;
////        vars = new Dictionary<String, Object>();
////    }
////    public void Dispose()
////    {
////        driver.Quit();
////    }
////    [Fact]
////    public void FINALGuestHappyPathTargets()
////    {
////        driver.Navigate().GoToUrl("http://r2020-4-8.claritydemos.com/");
////        driver.Manage().Window.Size = new System.Drawing.Size(1920, 1040);
////        Assert.Equal(driver.FindElement(By.Id("btnMicroCart_Cart")).Text, "(0) $0.00");
////        Assert.Equal(driver.FindElement(By.Id("btnMiniMenuLogin")).Text, "Sign In");
////        Assert.Equal(driver.FindElement(By.Id("btnCategoriesMenuLinkMega")).Text, "Products");
////        {
////            var element = driver.FindElement(By.Id("btnCategoriesMenuLinkMega"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        Assert.Equal(driver.FindElement(By.Id("menuItem_1")).Text, "Appliances");
////        {
////            var element = driver.FindElement(By.Id("menuItem_1"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("menuItem_1")).Click();
////        Assert.Equal(driver.FindElement(By.Id("breadCatalogRootLink")).Text, "Catalog");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"btnCategoryBreadcrumb\"]")).Text, "Appliances");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"AppliedFiltersCategoryType\"]")).Text, "Appliances");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"CategoryTitleText\"]")).Text, " Appliances");
////        Assert.Equal(driver.FindElement(By.Id("cardProductName_0")).Text, "Passap BD170 Bottle Cooler");
////        Assert.Equal(driver.FindElement(By.Id("btnGridAddToCartProduct122")).Text, "Add to Cart");
////        {
////            var element = driver.FindElement(By.Id("btnGridAddToCartProduct122"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("btnGridAddToCartProduct122")).Click();
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"AddToCartModalProductText\"]")).Text, "Passap BD170 Bottle Cooler");
////        Assert.Equal(driver.FindElement(By.Id("btnAddToCartModalContinueShopping")).Text, "Continue Shopping");
////        Assert.Equal(driver.FindElement(By.Id("btnAddToCartModalGoToCart")).Text, "View Cart");
////        {
////            var element = driver.FindElement(By.Id("btnAddToCartModalGoToCart"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("btnAddToCartModalGoToCart")).Click();
////        Assert.Equal(driver.FindElement(By.Id("cartProductName0")).Text, "Passap BD170 Bottle Cooler");
////        Assert.Equal(driver.FindElement(By.Id("cartProductSubtotal0")).Text, "$150.00");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"ShoppingCartTotalText\"]")).Text, "Shopping Cart Total");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"CartSubtotalText\"]")).Text, "Subtotal");
////        Assert.Equal(driver.FindElement(By.Id("cartTotalsSubtotal")).Text, "$150.00");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"CartGrandTotalText]")).Text, "Grand Total");
////        Assert.Equal(driver.FindElement(By.Id("cartTotalsTotal")).Text, "$150.00");
////        Assert.Equal(driver.FindElement(By.Id("btnProceedToCheckout")).Text, "Proceed to Checkout");
////        {
////            var element = driver.FindElement(By.Id("btnProceedToCheckout"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("btnProceedToCheckout")).Click();
////        {
////            var wait = new WebDriverWait(driver, System.TimeSpan.FromSeconds(NaN));
////            wait.Until(driver => driver.FindElements(By.CssSelector("[sid^=\'MiniCart\'][sid$=\'SubtotalText\']   ")).Count > 0);
////        }
////        {
////            var wait = new WebDriverWait(driver, System.TimeSpan.FromSeconds(NaN));
////            wait.Until(driver => driver.FindElements(By.CssSelector("[sid^=\'MiniCart\'][sid$=\'TaxesText\']")).Count > 0);
////        }
////        {
////            var wait = new WebDriverWait(driver, System.TimeSpan.FromSeconds(NaN));
////            wait.Until(driver => driver.FindElements(By.CssSelector("[sid^=\'MiniCart\'][sid$=\'TotalText\']")).Count > 0);
////        }
////        Assert.Equal(driver.FindElement(By.Id("cartTotalsWidgetTotal")).Text, "$150.00");
////        Assert.Equal(driver.FindElement(By.Id("miniCartProductName_0")).Text, "Passap BD170 Bottle Cooler");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"txtCheckoutLoginUsername\"]")).Text, "Username");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"pwCheckoutLoginPassword\"]")).Text, "Password");
////        driver.FindElement(By.Id("txtCheckoutLoginUsername")).Click();
////        driver.FindElement(By.Id("txtCheckoutLoginUsername")).SendKeys("Clarity");
////        driver.FindElement(By.Id("pwCheckoutLoginPassword")).Click();
////        driver.FindElement(By.Id("pwCheckoutLoginPassword")).Click();
////        driver.FindElement(By.Id("pwCheckoutLoginPassword")).SendKeys("QAZXSWwsxzaq!@#$4321");
////        Assert.Equal(driver.FindElement(By.Id("btnCheckoutLoginForgotPassword")).Text, "Forgot your password?");
////        Assert.Equal(driver.FindElement(By.Id("btnCheckoutLoginRegister")).Text, "Register for one");
////        Assert.Equal(driver.FindElement(By.Id("btnCheckoutLoginSubmit")).Text, "Sign In");
////        {
////            var element = driver.FindElement(By.Id("btnCheckoutLoginSubmit"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("btnCheckoutLoginSubmit")).Click();
////        {
////            var wait = new WebDriverWait(driver, System.TimeSpan.FromSeconds(NaN));
////            wait.Until(driver => driver.FindElements(By.Id("btnMiniMenuUserName")).Count > 0);
////        }
////        Assert.Equal(driver.FindElement(By.Id("ddlBillingSelection")).Text, "Please select a Billing Address");
////        Assert.Equal(driver.FindElement(By.Id("btnAddBilling")).Text, "Add");
////        {
////            var element = driver.FindElement(By.Id("btnAddBilling"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("btnAddBilling")).Click();
////        driver.FindElement(By.Id("txtKeyPurchasingBilling")).SendKeys("SIDE TEST");
////        driver.FindElement(By.Id("txtFirstNamePurchasingBilling")).Click();
////        driver.FindElement(By.Id("txtFirstNamePurchasingBilling")).SendKeys("SIDE");
////        driver.FindElement(By.Id("txtLastNamePurchasingBilling")).Click();
////        driver.FindElement(By.Id("txtLastNamePurchasingBilling")).SendKeys("TEST");
////        driver.FindElement(By.Id("emEmailPurchasingBilling")).Click();
////        driver.FindElement(By.Id("emEmailPurchasingBilling")).Click();
////        driver.FindElement(By.Id("emEmailPurchasingBilling")).Click();
////        driver.FindElement(By.Id("emEmailPurchasingBilling")).SendKeys("SIDE@EMAIL.COM");
////        driver.FindElement(By.Id("telPhone1PurchasingBilling")).Click();
////        driver.FindElement(By.Id("telPhone1PurchasingBilling")).SendKeys("555-555-5555");
////        Assert.Equal("Select a Country\\\\nUnited States of America", driver.FindElement(By.Id("ddlCountryIDPurchasingBilling")).Text);
////        driver.FindElement(By.Id("txtStreet1PurchasingBilling")).Click();
////        driver.FindElement(By.Id("txtStreet1PurchasingBilling")).SendKeys("1321 Ascot Street");
////        driver.FindElement(By.Id("txtCityPurchasingBilling")).Click();
////        driver.FindElement(By.Id("txtCityPurchasingBilling")).SendKeys("Georgetown");
////        driver.FindElement(By.Id("ddlRegionIDPurchasingBilling")).Click();
////        {
////            var dropdown = driver.FindElement(By.Id("ddlRegionIDPurchasingBilling"));
////            dropdown.FindElement(By.XPath("//option[. = 'Texas']")).Click();
////        }
////        driver.FindElement(By.Id("ddlRegionIDPurchasingBilling")).Click();
////        {
////            var element = driver.FindElement(By.Id("btnShowStreet2PurchasingBilling"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("txtZipPurchasingBilling")).Click();
////        driver.FindElement(By.Id("txtZipPurchasingBilling")).SendKeys("78626");
////        Assert.Equal(driver.FindElement(By.Id("btnAddAddressFooter")).Text, "Add Address");
////        {
////            var element = driver.FindElement(By.Id("btnAddAddressFooter"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("btnAddAddressFooter")).Click();
////        {
////            var wait = new WebDriverWait(driver, System.TimeSpan.FromSeconds(NaN));
////            wait.Until(driver => driver.FindElements(By.Id("ddlBillingSelection")).Count > 0);
////        }
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_0")).Text, "SIDE TEST");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_1")).Text, "1321 Ascot Street");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_2")).Text, "Georgetown, TX 78626");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_3")).Text, "United States of America");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_phoneNumber")).Text, "555-555-5555");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_email")).Text, "SIDE@EMAIL.COM");
////        Assert.Equal(driver.FindElement(By.Id("btnSubmit_purchaseStepBilling")).Text, "Continue to Shipping");
////        {
////            var element = driver.FindElement(By.Id("btnSubmit_purchaseStepBilling"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("btnSubmit_purchaseStepBilling")).Click();
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"WhichShippingAddressText\"]")).Text, "Which shipping address would you like to use?");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"SplitShippingText\"]")).Text, "Your items will be split up to separate orders based on where they are coming from and where they are going to. Please fill out each distribution of your items below as desired. All items must be fully allocated.");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"ShipmentGroupTitle_0\"]")).Text, "Shippable products");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"SplitShippingProductName_0\"]")).Text, "Passap BD170 Bottle Cooler (BD170)");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"TargetsDropDownText_0\"]")).Text, "Select a Destination\\\\nSIDE TEST: 1321 Ascot Street\\\\nAdd a New Address");
////        driver.FindElement(By.CssSelector("div[sid=\"TargetsDropDownText_0\"]")).Click();
////        {
////            var dropdown = driver.FindElement(By.CssSelector("[sid^=\'TargetsDrop\'][sid$=\'DownText_0\']"));
////            dropdown.FindElement(By.XPath("//option[. = 'SIDE TEST: 1321 Ascot Street']")).Click();
////        }
////        Assert.Equal(driver.FindElement(By.CssSelector("[sid^=\'TargetsDrop\'][sid$=\'DownText_0\']")).Text, "Select a Destination\\\\nSIDE TEST: 1321 Ascot Street\\\\nAdd a New Address");
////        Assert.Equal(driver.FindElement(By.Id("btnSubmitAndGetRateQuotesForShipments")).Text, "Submit and get Rate Quotes for Shipments");
////        {
////            var element = driver.FindElement(By.Id("btnSubmitAndGetRateQuotesForShipments"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("btnSubmitAndGetRateQuotesForShipments")).Click();
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"ShipGroupProduct_0\"]")).Text, "1 x Passap BD170 Bottle Cooler (BD170)");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"TargetShippingYourFullAddressText\"]")).Text, "Your Full Address");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_0")).Text, "SIDE TEST");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_1")).Text, "1321 Ascot Street");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_2")).Text, "Georgetown, TX 78626");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_3")).Text, "United States of America");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"PleaseSelectARateText\"]:first-of-type")).Text, "Please select a rate");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid^=\"YourShippingRateQuotesText\"]:first-of-type")).Text, "Your Shipping Rate Quotes");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"RateText\"]:first-of-type")).Text, "Rate");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"TargetShipText\"]:first-of-type")).Text, "Target Ship");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"EstDelText\"]:first-of-type")).Text, "Est. Del.");
////        driver.FindElement(By.Id("rdlb_Target-Grouping-{\"TK\":\"ShipToHome\",\"CSK\":\"NormalShip\",\"HD\":-3941959926721092021}_FEDEX_GROUND")).Click();
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"YourSelectedShippingRateText_\"]:first-of-type")).Text, "Your Selected Shipping Rate");
////        Assert.Equal(driver.FindElement(By.CssSelector("[id^=\"selectedAddressShippingLabel\"]:first-of-type")).Text, "FedEx Ground");
////        Assert.Equal(driver.FindElement(By.CssSelector("[id^=\"selectedAddressShippingTotal\"]:first-of-type")).Text, "$13.58");
////        Assert.Equal(driver.FindElement(By.CssSelector("[sid^=\'NewGrandTotal\'][sid$=\'AmountText\']")).Text, "$163.58");
////        Assert.Equal(driver.FindElement(By.Id("btnSubmit_purchaseStepSplitShipping")).Text, "Continue to Payment");
////        {
////            var element = driver.FindElement(By.Id("btnSubmit_purchaseStepSplitShipping"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("btnSubmit_purchaseStepSplitShipping")).Click();
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"CartTotalShippingText\"]")).Text, "Shipping");
////        Assert.Equal(driver.FindElement(By.Id("cartTotalsWidgetShipping")).Text, "$13.58");
////        Assert.Equal(driver.FindElement(By.Id("cartTotalsWidgetTotal")).Text, "$163.58");
////        Assert.Equal(driver.FindElement(By.Id("cartTotalsWidgetTaxes")).Text, "$0.00");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"CreditCardText\"]")).Text, "Credit Card");
////        Assert.Equal(driver.FindElement(By.XPath("//h5[contains(.,\'Signed In\')]")).Text, "Signed In");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_0")).Text, "SIDE TEST");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_1")).Text, "1321 Ascot Street");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_2")).Text, "Georgetown, TX 78626");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_3")).Text, "United States of America");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"CardNicknameText\"]")).Text, "Card Nickname");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"NicknameMessageText\"]")).Text, "Add a Nickname to save the Card to your wallet with a familiar name.");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"CardholderNameText\"]")).Text, "Cardholder Name");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"CardNumberText\"]")).Text, "Card Number");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"CardMonthText\"]")).Text, "Month");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"CardYearText\"]")).Text, "Year");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"CardCVVText\"]")).Text, "CVV");
////        driver.FindElement(By.Id("txtCardHolderName")).Click();
////        driver.FindElement(By.Id("txtCardHolderName")).SendKeys("Clarity");
////        driver.FindElement(By.Id("txtCardNumber")).Click();
////        driver.FindElement(By.Id("txtCardNumber")).SendKeys("4111 1111 1111 1111");
////        driver.FindElement(By.Id("ddlExpirationMonth")).Click();
////        {
////            var dropdown = driver.FindElement(By.Id("ddlExpirationMonth"));
////            dropdown.FindElement(By.XPath("//option[. = 'August']")).Click();
////        }
////        driver.FindElement(By.Id("ddlExpirationMonth")).Click();
////        driver.FindElement(By.Id("ddlExpirationYear")).Click();
////        {
////            var dropdown = driver.FindElement(By.Id("ddlExpirationYear"));
////            dropdown.FindElement(By.XPath("//option[. = '2025']")).Click();
////        }
////        driver.FindElement(By.Id("ddlExpirationYear")).Click();
////        driver.FindElement(By.Id("txtCVV")).Click();
////        driver.FindElement(By.Id("txtCVV")).SendKeys("411");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"TotalAmountChargedText\"]")).Text, "The total amount of $163.58 will be charged to your card.");
////        Assert.Equal(driver.FindElement(By.Id("btnSubmit_purchaseStepPayment")).Text, "Confirm Order and Purchase");
////        {
////            var element = driver.FindElement(By.Id("btnSubmit_purchaseStepPayment"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("btnSubmit_purchaseStepPayment")).Click();
////        {
////            var element = driver.FindElement(By.Id("btnSubmit_purchaseStepPayment"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        {
////            var wait = new WebDriverWait(driver, System.TimeSpan.FromSeconds(NaN));
////            wait.Until(driver => driver.FindElements(By.Id("lbThankYouForYourPurchase")).Count > 0);
////        }
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"CheckoutMasterOrderText\"]")).Text, "Master Order");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"CheckoutSubOrderText\"]")).Text, "Sub-Order(s)");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"PurchaseSuccessText\"]")).Text, "Your Purchase was successful and is in the process of being packed, shipped, and delivered. You will receive an Order Confirmation in your email.");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"MasterOrderMessageText\"]")).Text, "Your master order shows the consolidated purchase information.");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"SubOrderMessageText\"]")).Text, "Your sub-orders are the splits accordinging to how they will individually be fulfilled. There will always be at least one sub-order.");
////        Assert.Equal(driver.FindElement(By.Id("btnContinueShoppingCompletedOrder")).Text, "Continue Shopping");
////        Assert.Equal(driver.FindElement(By.Id("btnYourOrderHistory")).Text, "Your Order History");
////        Assert.Equal(driver.FindElement(By.CssSelector(".col-12 > .ng-binding:nth-child(1)")).Text, "Clarity");
////        Assert.Equal(driver.FindElement(By.CssSelector(".col-12 > .ng-binding:nth-child(3)")).Text, "•••• •••• •••• 1111");
////        Assert.Equal(driver.FindElement(By.CssSelector(".col-12 > .ng-binding:nth-child(5)")).Text, "08 / 2025");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_0")).Text, "SIDE TEST");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_1")).Text, "1321 Ascot Street");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_2")).Text, "Georgetown, TX 78626");
////        Assert.Equal(driver.FindElement(By.Id("contactAddress_billing_3")).Text, "United States of America");
////        {
////            var element = driver.FindElement(By.Id("btnYourOrderHistory"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("btnYourOrderHistory")).Click();
////        Assert.Equal(driver.FindElement(By.XPath("//td[2]")).Text, "$163.58");
////        Assert.Equal(driver.FindElement(By.CssSelector("[sid^=\'UserDashboardTab\'][sid$=\'HeaderText\']")).Text, "Orders");
////        Assert.Equal(driver.FindElement(By.Id("userDashboardSideMenuOrdersBtn")).Text, "Orders");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"UserDashboardTabBreadcrumb\"]")).Text, "Orders");
////        Assert.Equal(driver.FindElement(By.XPath("//th[2]/a/span")).Text, "ID");
////        Assert.Equal(driver.FindElement(By.XPath("//th[3]/a/span")).Text, "Total");
////        Assert.Equal(driver.FindElement(By.XPath("//th[4]/a/span")).Text, "Date");
////        Assert.Equal(driver.FindElement(By.XPath("//th[5]/a/span")).Text, "Status");
////        Assert.Equal(driver.FindElement(By.XPath("//td[4]")).Text, "Pending");
////        Assert.Equal(driver.FindElement(By.CssSelector("[id^=\"btnCVGridListDetails_\"]:first-of-type")).Text, "View Details");
////        {
////            var element = driver.FindElement(By.CssSelector("[id^=\"btnCVGridListDetails_\"]:first-of-type"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.CssSelector("[id^=\"btnCVGridListDetails_\"]:first-of-type")).Click();
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"UserDashboardSalesOrderText\"]")).Text, "Sales Order");
////        Assert.Equal(driver.FindElement(By.CssSelector("[sid^=\'SalesOrder\'][sid$=\'DetailsText\']")).Text, "Details");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"SalesOrderStatusText\']")).Text, "Status");
////        Assert.Equal(driver.FindElement(By.Id("sales-order-statusName")).Text, "Pending");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"SalesOrderNumberText\"]")).Text, "#");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"SalesOrderDateText\"]")).Text, "Date");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"SalesOrderBalanceDueText\"]")).Text, "Balance Due");
////        Assert.Equal(driver.FindElement(By.Id("sales-order-balanceDue")).Text, "Paid");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"SalesOrderShippingInfoText\"]")).Text, "Shipping Info");
////        Assert.Equal(driver.FindElement(By.Id("\"btnActions\"")).Text, "Actions");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"SalesOrderSummaryText\"]")).Text, "Summary");
////        Assert.Equal(driver.FindElement(By.Id("productSummary_sku_0")).Text, "BD170");
////        Assert.Equal(driver.FindElement(By.Id("productSummary_name_0")).Text, "Passap BD170 Bottle Cooler");
////        Assert.Equal(driver.FindElement(By.CssSelector("[sid^=\'ProductLineItem\'][sid$=\'SalePrice_0\']")).Text, "$150.00");
////        Assert.Equal(driver.FindElement(By.CssSelector(".text-center > .form-control-static")).Text, "1");
////        Assert.Equal(driver.FindElement(By.CssSelector("[sid^=\'ProductLineItem\'][sid$=\'SalePriceSubtotal_0\']")).Text, "$150.00");
////        Assert.Equal(driver.FindElement(By.Id("cartTotalsWidgetTotal")).Text, "$163.58");
////        Assert.Equal(driver.FindElement(By.Id("cartTotalsWidgetShipping")).Text, "$13.58");
////        Assert.Equal(driver.FindElement(By.Id("cartTotalsWidgetSubtotal")).Text, "$150.00");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"MiniCartSubtotalText\"]")).Text, "Subtotal");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"CartTotalShippingText\"]")).Text, "Shipping");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"MiniCartTaxesText\"]")).Text, "Taxes");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"MiniCartTotalText\"]")).Text, "Total");
////        Assert.Equal(driver.FindElement(By.Id("addToCart_reorderAll")).Text, "Reorder All");
////        {
////            var element = driver.FindElement(By.Id("userDashboardSideMenuAccountSettingsBtn"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("userDashboardSideMenuAccountSettingsBtn")).Click();
////        {
////            var element = driver.FindElement(By.Id("userDashboardSideMenuAccountSettingsAddressBookBtn"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("userDashboardSideMenuAccountSettingsAddressBookBtn")).Click();
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"UserDashboardTabHeaderText\"]")).Text, "Address Book");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"AddressEntryKeyText_0\"]")).Text, "SIDE TEST");
////        driver.FindElement(By.Id("input[id^=btnAddressBookDelete]")).Click();
////        {
////            var wait = new WebDriverWait(driver, System.TimeSpan.FromSeconds(NaN));
////            wait.Until(driver => driver.FindElements(By.Id("btnAddressBookRemoveItemModalOk")).Count > 0);
////        }
////        {
////            var element = driver.FindElement(By.Id("btnAddressBookRemoveItemModalOk"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("btnAddressBookRemoveItemModalOk")).Click();
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"DefaultBillingWarningMessage\"]")).Text, "You don\\\'t have a billing address");
////        Assert.Equal(driver.FindElement(By.CssSelector("div[sid=\"DefaultShippingWarningMessage\"]")).Text, "You don\\\'t have a default shipping address");
////        Assert.Equal(driver.FindElement(By.Id("btnMicroCart_Cart")).Text, "(0) $0.00");
////        {
////            var element = driver.FindElement(By.Id("btnMiniMenuUserName"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("btnMiniMenuUserName")).Click();
////        {
////            var element = driver.FindElement(By.Id("btnMiniMenuLogout"));
////            var builder = new Actions(driver);
////            builder.MoveToElement(element).Perform();
////        }
////        driver.FindElement(By.Id("btnMiniMenuLogout")).Click();
////        Assert.Equal(driver.FindElement(By.Id("btnMiniMenuLogin")).Text, "Sign In");
////    }
////}
