// <autogenerated>
// <copyright file="FranchiseAccountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise account service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise accounts.</summary>
    /// <seealso cref="FranchiseAccountSearchModel"/>
    /// <seealso cref="IReturn{FranchiseAccountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseAccounts", "GET", Priority = 1,
            Summary = "Use to get a list of franchise accounts")]
    public partial class GetFranchiseAccounts : FranchiseAccountSearchModel, IReturn<FranchiseAccountPagedResults> { }

    /// <summary>A ServiceStack Route to get franchise accounts for connect.</summary>
    /// <seealso cref="FranchiseAccountSearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseAccountModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseAccount.View"),
        PublicAPI,
        Route("/Franchises/FranchiseAccountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise accounts")]
    public partial class GetFranchiseAccountsForConnect : FranchiseAccountSearchModel, IReturn<List<FranchiseAccountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise accounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseAccount.View"),
        PublicAPI,
        Route("/Franchises/FranchiseAccountsDigest", "GET",
            Summary = "Use to get a hash representing each franchise accounts")]
    public partial class GetFranchiseAccountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseAccountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseAccount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise account")]
    public partial class GetFranchiseAccountByID : ImplementsIDBase, IReturn<FranchiseAccountModel> { }

    /// <summary>A ServiceStack Route to get franchise account.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseAccountModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseAccount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise account by the custom key")]
    public partial class GetFranchiseAccountByKey : ImplementsKeyBase, IReturn<FranchiseAccountModel> { }

    /// <summary>A ServiceStack Route to check franchise account exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseAccount.View"),
        PublicAPI,
        Route("/Franchises/FranchiseAccount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseAccountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise account exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseAccount.View"),
        PublicAPI,
        Route("/Franchises/FranchiseAccount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseAccountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise account.</summary>
    /// <seealso cref="FranchiseAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseAccount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseAccount/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise account.")]
    public partial class CreateFranchiseAccount : FranchiseAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise account.</summary>
    /// <seealso cref="FranchiseAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseAccount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise account (as needed).")]
    public partial class UpsertFranchiseAccount : FranchiseAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise account.</summary>
    /// <seealso cref="FranchiseAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseAccount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseAccount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise account.")]
    public partial class UpdateFranchiseAccount : FranchiseAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseAccount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseAccount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise account from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseAccount.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseAccount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise account from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseAccount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseAccount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise account from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseAccount.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseAccount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise account from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseAccount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseAccount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise account from the system [Hard-Delete]")]
    public partial class DeleteFranchiseAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseAccount.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseAccount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise account from the system [Hard-Delete]")]
    public partial class DeleteFranchiseAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise account cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseAccount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise account calls.")]
    public class ClearFranchiseAccountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseAccountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseAccounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseAccounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseAccountModel, FranchiseAccountModel, IFranchiseAccountSearchModel, FranchiseAccountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseAccounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseAccountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseAccountsForConnect request)
        {
            return await Workflows.FranchiseAccounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseAccountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseAccountsDigest request)
        {
            return await Workflows.FranchiseAccounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseAccountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseAccounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseAccountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseAccounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseAccountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseAccountExistsByID request)
        {
            return await Workflows.FranchiseAccounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseAccountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseAccountExistsByKey request)
        {
            return await Workflows.FranchiseAccounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAccountDataAsync,
                    () => Workflows.FranchiseAccounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAccountDataAsync,
                    () => Workflows.FranchiseAccounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAccountDataAsync,
                    () => Workflows.FranchiseAccounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAccountDataAsync,
                    () => Workflows.FranchiseAccounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAccountDataAsync,
                    () => Workflows.FranchiseAccounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAccountDataAsync,
                    () => Workflows.FranchiseAccounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAccountDataAsync,
                    () => Workflows.FranchiseAccounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAccountDataAsync,
                    () => Workflows.FranchiseAccounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAccountDataAsync,
                    () => Workflows.FranchiseAccounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseAccountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseAccountCache request)
        {
            await ClearCachedFranchiseAccountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseAccountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseAccounts>(string.Empty),
                    UrnId.Create<GetFranchiseAccountByID>(string.Empty),
                    UrnId.Create<GetFranchiseAccountByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseAccountExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseAccountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseAccountService : FranchiseAccountServiceBase { }
}
