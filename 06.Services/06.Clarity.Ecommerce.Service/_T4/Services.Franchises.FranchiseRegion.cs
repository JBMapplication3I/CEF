// <autogenerated>
// <copyright file="FranchiseRegionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise region service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise regions.</summary>
    /// <seealso cref="FranchiseRegionSearchModel"/>
    /// <seealso cref="IReturn{FranchiseRegionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseRegions", "GET", Priority = 1,
            Summary = "Use to get a list of franchise regions")]
    public partial class GetFranchiseRegions : FranchiseRegionSearchModel, IReturn<FranchiseRegionPagedResults> { }

    /// <summary>A ServiceStack Route to get franchise regions for connect.</summary>
    /// <seealso cref="FranchiseRegionSearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseRegionModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseRegion.View"),
        PublicAPI,
        Route("/Franchises/FranchiseRegionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise regions")]
    public partial class GetFranchiseRegionsForConnect : FranchiseRegionSearchModel, IReturn<List<FranchiseRegionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise regions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseRegion.View"),
        PublicAPI,
        Route("/Franchises/FranchiseRegionsDigest", "GET",
            Summary = "Use to get a hash representing each franchise regions")]
    public partial class GetFranchiseRegionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseRegionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseRegion/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise region")]
    public partial class GetFranchiseRegionByID : ImplementsIDBase, IReturn<FranchiseRegionModel> { }

    /// <summary>A ServiceStack Route to get franchise region.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseRegionModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseRegion/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise region by the custom key")]
    public partial class GetFranchiseRegionByKey : ImplementsKeyBase, IReturn<FranchiseRegionModel> { }

    /// <summary>A ServiceStack Route to check franchise region exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseRegion.View"),
        PublicAPI,
        Route("/Franchises/FranchiseRegion/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseRegionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise region exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseRegion.View"),
        PublicAPI,
        Route("/Franchises/FranchiseRegion/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseRegionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise region.</summary>
    /// <seealso cref="FranchiseRegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseRegion.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseRegion/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise region.")]
    public partial class CreateFranchiseRegion : FranchiseRegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise region.</summary>
    /// <seealso cref="FranchiseRegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseRegion/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise region (as needed).")]
    public partial class UpsertFranchiseRegion : FranchiseRegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise region.</summary>
    /// <seealso cref="FranchiseRegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseRegion.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseRegion/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise region.")]
    public partial class UpdateFranchiseRegion : FranchiseRegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseRegion.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseRegion/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise region from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseRegion.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseRegion/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise region from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseRegion.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseRegion/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise region from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseRegion.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseRegion/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise region from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseRegion.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseRegion/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise region from the system [Hard-Delete]")]
    public partial class DeleteFranchiseRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseRegion.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseRegion/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise region from the system [Hard-Delete]")]
    public partial class DeleteFranchiseRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise region cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseRegion/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise region calls.")]
    public class ClearFranchiseRegionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseRegionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseRegions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseRegions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseRegionModel, FranchiseRegionModel, IFranchiseRegionSearchModel, FranchiseRegionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseRegions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseRegionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseRegionsForConnect request)
        {
            return await Workflows.FranchiseRegions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseRegionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseRegionsDigest request)
        {
            return await Workflows.FranchiseRegions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseRegionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseRegions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseRegionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseRegions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseRegionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseRegionExistsByID request)
        {
            return await Workflows.FranchiseRegions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseRegionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseRegionExistsByKey request)
        {
            return await Workflows.FranchiseRegions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseRegionDataAsync,
                    () => Workflows.FranchiseRegions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseRegionDataAsync,
                    () => Workflows.FranchiseRegions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseRegionDataAsync,
                    () => Workflows.FranchiseRegions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseRegionDataAsync,
                    () => Workflows.FranchiseRegions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseRegionDataAsync,
                    () => Workflows.FranchiseRegions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseRegionDataAsync,
                    () => Workflows.FranchiseRegions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseRegionDataAsync,
                    () => Workflows.FranchiseRegions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseRegionDataAsync,
                    () => Workflows.FranchiseRegions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseRegionDataAsync,
                    () => Workflows.FranchiseRegions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseRegionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseRegionCache request)
        {
            await ClearCachedFranchiseRegionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseRegionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseRegions>(string.Empty),
                    UrnId.Create<GetFranchiseRegionByID>(string.Empty),
                    UrnId.Create<GetFranchiseRegionByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseRegionExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseRegionExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseRegionService : FranchiseRegionServiceBase { }
}
