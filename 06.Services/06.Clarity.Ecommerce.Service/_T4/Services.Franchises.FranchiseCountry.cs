// <autogenerated>
// <copyright file="FranchiseCountryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise country service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise countries.</summary>
    /// <seealso cref="FranchiseCountrySearchModel"/>
    /// <seealso cref="IReturn{FranchiseCountryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseCountries", "GET", Priority = 1,
            Summary = "Use to get a list of franchise countries")]
    public partial class GetFranchiseCountries : FranchiseCountrySearchModel, IReturn<FranchiseCountryPagedResults> { }

    /// <summary>A ServiceStack Route to get franchise countries for connect.</summary>
    /// <seealso cref="FranchiseCountrySearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseCountryModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCountry.View"),
        PublicAPI,
        Route("/Franchises/FranchiseCountriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise countries")]
    public partial class GetFranchiseCountriesForConnect : FranchiseCountrySearchModel, IReturn<List<FranchiseCountryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise countries.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCountry.View"),
        PublicAPI,
        Route("/Franchises/FranchiseCountriesDigest", "GET",
            Summary = "Use to get a hash representing each franchise countries")]
    public partial class GetFranchiseCountriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseCountryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseCountry/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise country")]
    public partial class GetFranchiseCountryByID : ImplementsIDBase, IReturn<FranchiseCountryModel> { }

    /// <summary>A ServiceStack Route to get franchise country.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseCountryModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseCountry/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise country by the custom key")]
    public partial class GetFranchiseCountryByKey : ImplementsKeyBase, IReturn<FranchiseCountryModel> { }

    /// <summary>A ServiceStack Route to check franchise country exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCountry.View"),
        PublicAPI,
        Route("/Franchises/FranchiseCountry/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseCountryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise country exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCountry.View"),
        PublicAPI,
        Route("/Franchises/FranchiseCountry/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseCountryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise country.</summary>
    /// <seealso cref="FranchiseCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCountry.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseCountry/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise country.")]
    public partial class CreateFranchiseCountry : FranchiseCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise country.</summary>
    /// <seealso cref="FranchiseCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseCountry/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise country (as needed).")]
    public partial class UpsertFranchiseCountry : FranchiseCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise country.</summary>
    /// <seealso cref="FranchiseCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCountry.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseCountry/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise country.")]
    public partial class UpdateFranchiseCountry : FranchiseCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCountry.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseCountry/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise country from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCountry.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseCountry/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise country from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCountry.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseCountry/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise country from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCountry.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseCountry/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise country from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCountry.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseCountry/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise country from the system [Hard-Delete]")]
    public partial class DeleteFranchiseCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCountry.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseCountry/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise country from the system [Hard-Delete]")]
    public partial class DeleteFranchiseCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise country cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseCountry/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise country calls.")]
    public class ClearFranchiseCountryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseCountryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseCountries"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseCountries request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseCountryModel, FranchiseCountryModel, IFranchiseCountrySearchModel, FranchiseCountryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseCountries)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseCountriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseCountriesForConnect request)
        {
            return await Workflows.FranchiseCountries.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseCountriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseCountriesDigest request)
        {
            return await Workflows.FranchiseCountries.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseCountryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseCountries, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseCountryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseCountries, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseCountryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseCountryExistsByID request)
        {
            return await Workflows.FranchiseCountries.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseCountryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseCountryExistsByKey request)
        {
            return await Workflows.FranchiseCountries.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCountryDataAsync,
                    () => Workflows.FranchiseCountries.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCountryDataAsync,
                    () => Workflows.FranchiseCountries.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCountryDataAsync,
                    () => Workflows.FranchiseCountries.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCountryDataAsync,
                    () => Workflows.FranchiseCountries.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCountryDataAsync,
                    () => Workflows.FranchiseCountries.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCountryDataAsync,
                    () => Workflows.FranchiseCountries.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCountryDataAsync,
                    () => Workflows.FranchiseCountries.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCountryDataAsync,
                    () => Workflows.FranchiseCountries.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCountryDataAsync,
                    () => Workflows.FranchiseCountries.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseCountryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseCountryCache request)
        {
            await ClearCachedFranchiseCountryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseCountryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseCountries>(string.Empty),
                    UrnId.Create<GetFranchiseCountryByID>(string.Empty),
                    UrnId.Create<GetFranchiseCountryByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseCountryExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseCountryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseCountryService : FranchiseCountryServiceBase { }
}
