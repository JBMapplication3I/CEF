// <autogenerated>
// <copyright file="ScoutCategoryTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the scout category type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of scout category types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{ScoutCategoryTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scouting/ScoutCategoryTypes", "GET", Priority = 1,
            Summary = "Use to get a list of scout category types")]
    public partial class GetScoutCategoryTypes : TypeSearchModel, IReturn<ScoutCategoryTypePagedResults> { }

    /// <summary>A ServiceStack Route to get scout category types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategoryType.View"),
        PublicAPI,
        Route("/Scouting/ScoutCategoryTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all scout category types")]
    public partial class GetScoutCategoryTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all scout category types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategoryType.View"),
        PublicAPI,
        Route("/Scouting/ScoutCategoryTypesDigest", "GET",
            Summary = "Use to get a hash representing each scout category types")]
    public partial class GetScoutCategoryTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get scout category type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scouting/ScoutCategoryType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific scout category type")]
    public partial class GetScoutCategoryTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get scout category type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Scouting/ScoutCategoryType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific scout category type by the custom key")]
    public partial class GetScoutCategoryTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get scout category type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Scouting/ScoutCategoryType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific scout category type by the name")]
    public partial class GetScoutCategoryTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get scout category type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Scouting/ScoutCategoryType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific scout category type by the name")]
    public partial class GetScoutCategoryTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check scout category type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategoryType.View"),
        PublicAPI,
        Route("/Scouting/ScoutCategoryType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckScoutCategoryTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check scout category type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategoryType.View"),
        PublicAPI,
        Route("/Scouting/ScoutCategoryType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckScoutCategoryTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check scout category type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategoryType.View"),
        PublicAPI,
        Route("/Scouting/ScoutCategoryType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckScoutCategoryTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check scout category type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategoryType.View"),
        PublicAPI,
        Route("/Scouting/ScoutCategoryType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckScoutCategoryTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create scout category type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategoryType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/ScoutCategoryType/Create", "POST", Priority = 1,
            Summary = "Use to create a new scout category type.")]
    public partial class CreateScoutCategoryType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert scout category type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Scouting/ScoutCategoryType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing scout category type (as needed).")]
    public partial class UpsertScoutCategoryType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update scout category type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategoryType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/ScoutCategoryType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing scout category type.")]
    public partial class UpdateScoutCategoryType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate scout category type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategoryType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/ScoutCategoryType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific scout category type from the system [Soft-Delete]")]
    public partial class DeactivateScoutCategoryTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate scout category type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategoryType.Deactivate"),
        PublicAPI,
        Route("/Scouting/ScoutCategoryType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific scout category type from the system [Soft-Delete]")]
    public partial class DeactivateScoutCategoryTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate scout category type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategoryType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/ScoutCategoryType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific scout category type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateScoutCategoryTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate scout category type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategoryType.Reactivate"),
        PublicAPI,
        Route("/Scouting/ScoutCategoryType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific scout category type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateScoutCategoryTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete scout category type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategoryType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/ScoutCategoryType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific scout category type from the system [Hard-Delete]")]
    public partial class DeleteScoutCategoryTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete scout category type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategoryType.Delete"),
        PublicAPI,
        Route("/Scouting/ScoutCategoryType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific scout category type from the system [Hard-Delete]")]
    public partial class DeleteScoutCategoryTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear scout category type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scouting/ScoutCategoryType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all scout category type calls.")]
    public class ClearScoutCategoryTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ScoutCategoryTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetScoutCategoryTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScoutCategoryTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, ScoutCategoryTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ScoutCategoryTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScoutCategoryTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetScoutCategoryTypesForConnect request)
        {
            return await Workflows.ScoutCategoryTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScoutCategoryTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScoutCategoryTypesDigest request)
        {
            return await Workflows.ScoutCategoryTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetScoutCategoryTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScoutCategoryTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ScoutCategoryTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScoutCategoryTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScoutCategoryTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ScoutCategoryTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScoutCategoryTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScoutCategoryTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ScoutCategoryTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScoutCategoryTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScoutCategoryTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.ScoutCategoryTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckScoutCategoryTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckScoutCategoryTypeExistsByID request)
        {
            return await Workflows.ScoutCategoryTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckScoutCategoryTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckScoutCategoryTypeExistsByKey request)
        {
            return await Workflows.ScoutCategoryTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckScoutCategoryTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckScoutCategoryTypeExistsByName request)
        {
            return await Workflows.ScoutCategoryTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckScoutCategoryTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckScoutCategoryTypeExistsByDisplayName request)
        {
            return await Workflows.ScoutCategoryTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertScoutCategoryType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertScoutCategoryType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryTypeDataAsync,
                    () => Workflows.ScoutCategoryTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateScoutCategoryType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateScoutCategoryType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryTypeDataAsync,
                    () => Workflows.ScoutCategoryTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateScoutCategoryType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateScoutCategoryType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryTypeDataAsync,
                    () => Workflows.ScoutCategoryTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateScoutCategoryTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateScoutCategoryTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryTypeDataAsync,
                    () => Workflows.ScoutCategoryTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateScoutCategoryTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateScoutCategoryTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryTypeDataAsync,
                    () => Workflows.ScoutCategoryTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateScoutCategoryTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateScoutCategoryTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryTypeDataAsync,
                    () => Workflows.ScoutCategoryTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateScoutCategoryTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateScoutCategoryTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryTypeDataAsync,
                    () => Workflows.ScoutCategoryTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteScoutCategoryTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteScoutCategoryTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryTypeDataAsync,
                    () => Workflows.ScoutCategoryTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteScoutCategoryTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteScoutCategoryTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryTypeDataAsync,
                    () => Workflows.ScoutCategoryTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearScoutCategoryTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearScoutCategoryTypeCache request)
        {
            await ClearCachedScoutCategoryTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedScoutCategoryTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetScoutCategoryTypes>(string.Empty),
                    UrnId.Create<GetScoutCategoryTypeByID>(string.Empty),
                    UrnId.Create<GetScoutCategoryTypeByKey>(string.Empty),
                    UrnId.Create<GetScoutCategoryTypeByName>(string.Empty),
                    UrnId.Create<CheckScoutCategoryTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckScoutCategoryTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckScoutCategoryTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckScoutCategoryTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ScoutCategoryTypeService : ScoutCategoryTypeServiceBase { }
}
