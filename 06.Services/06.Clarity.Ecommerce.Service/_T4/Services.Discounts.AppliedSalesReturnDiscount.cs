// <autogenerated>
// <copyright file="AppliedSalesReturnDiscountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the applied sales return discount service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of applied sales return discounts.</summary>
    /// <seealso cref="AppliedSalesReturnDiscountSearchModel"/>
    /// <seealso cref="IReturn{AppliedSalesReturnDiscountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesReturnDiscounts", "GET", Priority = 1,
            Summary = "Use to get a list of applied sales return discounts")]
    public partial class GetAppliedSalesReturnDiscounts : AppliedSalesReturnDiscountSearchModel, IReturn<AppliedSalesReturnDiscountPagedResults> { }

    /// <summary>A ServiceStack Route to get applied sales return discounts for connect.</summary>
    /// <seealso cref="AppliedSalesReturnDiscountSearchModel"/>
    /// <seealso cref="IReturn{List{AppliedSalesReturnDiscountModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesReturnDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesReturnDiscountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all applied sales return discounts")]
    public partial class GetAppliedSalesReturnDiscountsForConnect : AppliedSalesReturnDiscountSearchModel, IReturn<List<AppliedSalesReturnDiscountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all applied sales return discounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesReturnDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesReturnDiscountsDigest", "GET",
            Summary = "Use to get a hash representing each applied sales return discounts")]
    public partial class GetAppliedSalesReturnDiscountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get applied sales return discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AppliedSalesReturnDiscountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesReturnDiscount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sales return discount")]
    public partial class GetAppliedSalesReturnDiscountByID : ImplementsIDBase, IReturn<AppliedSalesReturnDiscountModel> { }

    /// <summary>A ServiceStack Route to get applied sales return discount.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AppliedSalesReturnDiscountModel}"/>
    [PublicAPI,
        Route("/Discounts/AppliedSalesReturnDiscount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sales return discount by the custom key")]
    public partial class GetAppliedSalesReturnDiscountByKey : ImplementsKeyBase, IReturn<AppliedSalesReturnDiscountModel> { }

    /// <summary>A ServiceStack Route to check applied sales return discount exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesReturnDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesReturnDiscount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSalesReturnDiscountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check applied sales return discount exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesReturnDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesReturnDiscount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSalesReturnDiscountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create applied sales return discount.</summary>
    /// <seealso cref="AppliedSalesReturnDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesReturnDiscount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesReturnDiscount/Create", "POST", Priority = 1,
            Summary = "Use to create a new applied sales return discount.")]
    public partial class CreateAppliedSalesReturnDiscount : AppliedSalesReturnDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert applied sales return discount.</summary>
    /// <seealso cref="AppliedSalesReturnDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/AppliedSalesReturnDiscount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing applied sales return discount (as needed).")]
    public partial class UpsertAppliedSalesReturnDiscount : AppliedSalesReturnDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update applied sales return discount.</summary>
    /// <seealso cref="AppliedSalesReturnDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesReturnDiscount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesReturnDiscount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing applied sales return discount.")]
    public partial class UpdateAppliedSalesReturnDiscount : AppliedSalesReturnDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate applied sales return discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesReturnDiscount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesReturnDiscount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sales return discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSalesReturnDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate applied sales return discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesReturnDiscount.Deactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSalesReturnDiscount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sales return discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSalesReturnDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sales return discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesReturnDiscount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesReturnDiscount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sales return discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSalesReturnDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sales return discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesReturnDiscount.Reactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSalesReturnDiscount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sales return discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSalesReturnDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sales return discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesReturnDiscount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesReturnDiscount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific applied sales return discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSalesReturnDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sales return discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesReturnDiscount.Delete"),
        PublicAPI,
        Route("/Discounts/AppliedSalesReturnDiscount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific applied sales return discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSalesReturnDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear applied sales return discount cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesReturnDiscount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all applied sales return discount calls.")]
    public class ClearAppliedSalesReturnDiscountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AppliedSalesReturnDiscountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAppliedSalesReturnDiscounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesReturnDiscounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAppliedSalesReturnDiscountModel, AppliedSalesReturnDiscountModel, IAppliedSalesReturnDiscountSearchModel, AppliedSalesReturnDiscountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AppliedSalesReturnDiscounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesReturnDiscountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAppliedSalesReturnDiscountsForConnect request)
        {
            return await Workflows.AppliedSalesReturnDiscounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesReturnDiscountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesReturnDiscountsDigest request)
        {
            return await Workflows.AppliedSalesReturnDiscounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAppliedSalesReturnDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesReturnDiscountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AppliedSalesReturnDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesReturnDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesReturnDiscountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AppliedSalesReturnDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAppliedSalesReturnDiscountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSalesReturnDiscountExistsByID request)
        {
            return await Workflows.AppliedSalesReturnDiscounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppliedSalesReturnDiscountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSalesReturnDiscountExistsByKey request)
        {
            return await Workflows.AppliedSalesReturnDiscounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAppliedSalesReturnDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAppliedSalesReturnDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesReturnDiscountDataAsync,
                    () => Workflows.AppliedSalesReturnDiscounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAppliedSalesReturnDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAppliedSalesReturnDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesReturnDiscountDataAsync,
                    () => Workflows.AppliedSalesReturnDiscounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAppliedSalesReturnDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAppliedSalesReturnDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesReturnDiscountDataAsync,
                    () => Workflows.AppliedSalesReturnDiscounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSalesReturnDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSalesReturnDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesReturnDiscountDataAsync,
                    () => Workflows.AppliedSalesReturnDiscounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSalesReturnDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSalesReturnDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesReturnDiscountDataAsync,
                    () => Workflows.AppliedSalesReturnDiscounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSalesReturnDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSalesReturnDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesReturnDiscountDataAsync,
                    () => Workflows.AppliedSalesReturnDiscounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSalesReturnDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSalesReturnDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesReturnDiscountDataAsync,
                    () => Workflows.AppliedSalesReturnDiscounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAppliedSalesReturnDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSalesReturnDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesReturnDiscountDataAsync,
                    () => Workflows.AppliedSalesReturnDiscounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAppliedSalesReturnDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSalesReturnDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesReturnDiscountDataAsync,
                    () => Workflows.AppliedSalesReturnDiscounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAppliedSalesReturnDiscountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAppliedSalesReturnDiscountCache request)
        {
            await ClearCachedAppliedSalesReturnDiscountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAppliedSalesReturnDiscountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAppliedSalesReturnDiscounts>(string.Empty),
                    UrnId.Create<GetAppliedSalesReturnDiscountByID>(string.Empty),
                    UrnId.Create<GetAppliedSalesReturnDiscountByKey>(string.Empty),
                    UrnId.Create<CheckAppliedSalesReturnDiscountExistsByID>(string.Empty),
                    UrnId.Create<CheckAppliedSalesReturnDiscountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AppliedSalesReturnDiscountService : AppliedSalesReturnDiscountServiceBase { }
}
