// <autogenerated>
// <copyright file="ProductNotificationService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the product notification service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of product notifications.</summary>
    /// <seealso cref="ProductNotificationSearchModel"/>
    /// <seealso cref="IReturn{ProductNotificationPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/ProductNotifications", "GET", Priority = 1,
            Summary = "Use to get a list of product notifications")]
    public partial class GetProductNotifications : ProductNotificationSearchModel, IReturn<ProductNotificationPagedResults> { }

    /// <summary>A ServiceStack Route to get product notifications for connect.</summary>
    /// <seealso cref="ProductNotificationSearchModel"/>
    /// <seealso cref="IReturn{List{ProductNotificationModel}}"/>
    [Authenticate, RequiredPermission("Messaging.ProductNotification.View"),
        PublicAPI,
        Route("/Messaging/ProductNotificationsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all product notifications")]
    public partial class GetProductNotificationsForConnect : ProductNotificationSearchModel, IReturn<List<ProductNotificationModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all product notifications.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Messaging.ProductNotification.View"),
        PublicAPI,
        Route("/Messaging/ProductNotificationsDigest", "GET",
            Summary = "Use to get a hash representing each product notifications")]
    public partial class GetProductNotificationsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get product notification.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ProductNotificationModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/ProductNotification/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific product notification")]
    public partial class GetProductNotificationByID : ImplementsIDBase, IReturn<ProductNotificationModel> { }

    /// <summary>A ServiceStack Route to get product notification.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ProductNotificationModel}"/>
    [PublicAPI,
        Route("/Messaging/ProductNotification/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific product notification by the custom key")]
    public partial class GetProductNotificationByKey : ImplementsKeyBase, IReturn<ProductNotificationModel> { }

    /// <summary>A ServiceStack Route to get product notification.</summary>
    /// <seealso cref="IReturn{ProductNotificationModel}"/>
    [PublicAPI,
        Route("/Messaging/ProductNotification/Name", "GET", Priority = 1,
            Summary = "Use to get a specific product notification by the name")]
    public partial class GetProductNotificationByName : ImplementsNameBase, IReturn<ProductNotificationModel> { }

    /// <summary>A ServiceStack Route to check product notification exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.ProductNotification.View"),
        PublicAPI,
        Route("/Messaging/ProductNotification/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckProductNotificationExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product notification exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.ProductNotification.View"),
        PublicAPI,
        Route("/Messaging/ProductNotification/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckProductNotificationExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product notification exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.ProductNotification.View"),
        PublicAPI,
        Route("/Messaging/ProductNotification/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckProductNotificationExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create product notification.</summary>
    /// <seealso cref="ProductNotificationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.ProductNotification.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/ProductNotification/Create", "POST", Priority = 1,
            Summary = "Use to create a new product notification.")]
    public partial class CreateProductNotification : ProductNotificationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert product notification.</summary>
    /// <seealso cref="ProductNotificationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Messaging/ProductNotification/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing product notification (as needed).")]
    public partial class UpsertProductNotification : ProductNotificationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update product notification.</summary>
    /// <seealso cref="ProductNotificationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.ProductNotification.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/ProductNotification/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing product notification.")]
    public partial class UpdateProductNotification : ProductNotificationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate product notification.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.ProductNotification.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/ProductNotification/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product notification from the system [Soft-Delete]")]
    public partial class DeactivateProductNotificationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate product notification by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.ProductNotification.Deactivate"),
        PublicAPI,
        Route("/Messaging/ProductNotification/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product notification from the system [Soft-Delete]")]
    public partial class DeactivateProductNotificationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product notification.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.ProductNotification.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/ProductNotification/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product notification from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductNotificationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product notification by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.ProductNotification.Reactivate"),
        PublicAPI,
        Route("/Messaging/ProductNotification/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product notification from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductNotificationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product notification.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.ProductNotification.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/ProductNotification/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific product notification from the system [Hard-Delete]")]
    public partial class DeleteProductNotificationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product notification by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.ProductNotification.Delete"),
        PublicAPI,
        Route("/Messaging/ProductNotification/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific product notification from the system [Hard-Delete]")]
    public partial class DeleteProductNotificationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear product notification cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/ProductNotification/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all product notification calls.")]
    public class ClearProductNotificationCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ProductNotificationServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetProductNotifications"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductNotifications request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IProductNotificationModel, ProductNotificationModel, IProductNotificationSearchModel, ProductNotificationPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ProductNotifications)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductNotificationsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetProductNotificationsForConnect request)
        {
            return await Workflows.ProductNotifications.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductNotificationsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductNotificationsDigest request)
        {
            return await Workflows.ProductNotifications.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetProductNotificationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductNotificationByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ProductNotifications, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductNotificationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductNotificationByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ProductNotifications, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductNotificationByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductNotificationByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ProductNotifications, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckProductNotificationExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductNotificationExistsByID request)
        {
            return await Workflows.ProductNotifications.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductNotificationExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductNotificationExistsByKey request)
        {
            return await Workflows.ProductNotifications.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductNotificationExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductNotificationExistsByName request)
        {
            return await Workflows.ProductNotifications.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertProductNotification"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertProductNotification request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductNotificationDataAsync,
                    () => Workflows.ProductNotifications.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateProductNotification"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateProductNotification request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductNotificationDataAsync,
                    () => Workflows.ProductNotifications.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateProductNotification"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateProductNotification request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductNotificationDataAsync,
                    () => Workflows.ProductNotifications.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateProductNotificationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductNotificationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductNotificationDataAsync,
                    () => Workflows.ProductNotifications.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateProductNotificationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductNotificationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductNotificationDataAsync,
                    () => Workflows.ProductNotifications.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateProductNotificationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductNotificationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductNotificationDataAsync,
                    () => Workflows.ProductNotifications.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateProductNotificationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductNotificationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductNotificationDataAsync,
                    () => Workflows.ProductNotifications.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteProductNotificationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductNotificationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductNotificationDataAsync,
                    () => Workflows.ProductNotifications.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteProductNotificationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductNotificationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductNotificationDataAsync,
                    () => Workflows.ProductNotifications.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearProductNotificationCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearProductNotificationCache request)
        {
            await ClearCachedProductNotificationDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedProductNotificationDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetProductNotifications>(string.Empty),
                    UrnId.Create<GetProductNotificationByID>(string.Empty),
                    UrnId.Create<GetProductNotificationByKey>(string.Empty),
                    UrnId.Create<GetProductNotificationByName>(string.Empty),
                    UrnId.Create<CheckProductNotificationExistsByID>(string.Empty),
                    UrnId.Create<CheckProductNotificationExistsByKey>(string.Empty),
                    UrnId.Create<CheckProductNotificationExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ProductNotificationService : ProductNotificationServiceBase { }
}
