// <autogenerated>
// <copyright file="InventoryLocationRegionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the inventory location region service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of inventory location regions.</summary>
    /// <seealso cref="InventoryLocationRegionSearchModel"/>
    /// <seealso cref="IReturn{InventoryLocationRegionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Inventory/InventoryLocationRegions", "GET", Priority = 1,
            Summary = "Use to get a list of inventory location regions")]
    public partial class GetInventoryLocationRegions : InventoryLocationRegionSearchModel, IReturn<InventoryLocationRegionPagedResults> { }

    /// <summary>A ServiceStack Route to get inventory location regions for connect.</summary>
    /// <seealso cref="InventoryLocationRegionSearchModel"/>
    /// <seealso cref="IReturn{List{InventoryLocationRegionModel}}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationRegion.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationRegionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all inventory location regions")]
    public partial class GetInventoryLocationRegionsForConnect : InventoryLocationRegionSearchModel, IReturn<List<InventoryLocationRegionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all inventory location regions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationRegion.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationRegionsDigest", "GET",
            Summary = "Use to get a hash representing each inventory location regions")]
    public partial class GetInventoryLocationRegionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get inventory location region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{InventoryLocationRegionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Inventory/InventoryLocationRegion/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific inventory location region")]
    public partial class GetInventoryLocationRegionByID : ImplementsIDBase, IReturn<InventoryLocationRegionModel> { }

    /// <summary>A ServiceStack Route to get inventory location region.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{InventoryLocationRegionModel}"/>
    [PublicAPI,
        Route("/Inventory/InventoryLocationRegion/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific inventory location region by the custom key")]
    public partial class GetInventoryLocationRegionByKey : ImplementsKeyBase, IReturn<InventoryLocationRegionModel> { }

    /// <summary>A ServiceStack Route to check inventory location region exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationRegion.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationRegion/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckInventoryLocationRegionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check inventory location region exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationRegion.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationRegion/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckInventoryLocationRegionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create inventory location region.</summary>
    /// <seealso cref="InventoryLocationRegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationRegion.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationRegion/Create", "POST", Priority = 1,
            Summary = "Use to create a new inventory location region.")]
    public partial class CreateInventoryLocationRegion : InventoryLocationRegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert inventory location region.</summary>
    /// <seealso cref="InventoryLocationRegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Inventory/InventoryLocationRegion/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing inventory location region (as needed).")]
    public partial class UpsertInventoryLocationRegion : InventoryLocationRegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update inventory location region.</summary>
    /// <seealso cref="InventoryLocationRegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationRegion.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationRegion/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing inventory location region.")]
    public partial class UpdateInventoryLocationRegion : InventoryLocationRegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate inventory location region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationRegion.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationRegion/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific inventory location region from the system [Soft-Delete]")]
    public partial class DeactivateInventoryLocationRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate inventory location region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationRegion.Deactivate"),
        PublicAPI,
        Route("/Inventory/InventoryLocationRegion/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific inventory location region from the system [Soft-Delete]")]
    public partial class DeactivateInventoryLocationRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate inventory location region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationRegion.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationRegion/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific inventory location region from the system [Restore from Soft-Delete]")]
    public partial class ReactivateInventoryLocationRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate inventory location region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationRegion.Reactivate"),
        PublicAPI,
        Route("/Inventory/InventoryLocationRegion/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific inventory location region from the system [Restore from Soft-Delete]")]
    public partial class ReactivateInventoryLocationRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete inventory location region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationRegion.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocationRegion/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific inventory location region from the system [Hard-Delete]")]
    public partial class DeleteInventoryLocationRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete inventory location region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocationRegion.Delete"),
        PublicAPI,
        Route("/Inventory/InventoryLocationRegion/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific inventory location region from the system [Hard-Delete]")]
    public partial class DeleteInventoryLocationRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear inventory location region cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Inventory/InventoryLocationRegion/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all inventory location region calls.")]
    public class ClearInventoryLocationRegionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class InventoryLocationRegionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetInventoryLocationRegions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationRegions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IInventoryLocationRegionModel, InventoryLocationRegionModel, IInventoryLocationRegionSearchModel, InventoryLocationRegionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.InventoryLocationRegions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetInventoryLocationRegionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetInventoryLocationRegionsForConnect request)
        {
            return await Workflows.InventoryLocationRegions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetInventoryLocationRegionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationRegionsDigest request)
        {
            return await Workflows.InventoryLocationRegions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetInventoryLocationRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationRegionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.InventoryLocationRegions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetInventoryLocationRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationRegionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.InventoryLocationRegions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckInventoryLocationRegionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckInventoryLocationRegionExistsByID request)
        {
            return await Workflows.InventoryLocationRegions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckInventoryLocationRegionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckInventoryLocationRegionExistsByKey request)
        {
            return await Workflows.InventoryLocationRegions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertInventoryLocationRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertInventoryLocationRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationRegionDataAsync,
                    () => Workflows.InventoryLocationRegions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateInventoryLocationRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateInventoryLocationRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationRegionDataAsync,
                    () => Workflows.InventoryLocationRegions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateInventoryLocationRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateInventoryLocationRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationRegionDataAsync,
                    () => Workflows.InventoryLocationRegions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateInventoryLocationRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateInventoryLocationRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationRegionDataAsync,
                    () => Workflows.InventoryLocationRegions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateInventoryLocationRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateInventoryLocationRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationRegionDataAsync,
                    () => Workflows.InventoryLocationRegions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateInventoryLocationRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateInventoryLocationRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationRegionDataAsync,
                    () => Workflows.InventoryLocationRegions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateInventoryLocationRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateInventoryLocationRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationRegionDataAsync,
                    () => Workflows.InventoryLocationRegions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteInventoryLocationRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteInventoryLocationRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationRegionDataAsync,
                    () => Workflows.InventoryLocationRegions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteInventoryLocationRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteInventoryLocationRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationRegionDataAsync,
                    () => Workflows.InventoryLocationRegions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearInventoryLocationRegionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearInventoryLocationRegionCache request)
        {
            await ClearCachedInventoryLocationRegionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedInventoryLocationRegionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetInventoryLocationRegions>(string.Empty),
                    UrnId.Create<GetInventoryLocationRegionByID>(string.Empty),
                    UrnId.Create<GetInventoryLocationRegionByKey>(string.Empty),
                    UrnId.Create<CheckInventoryLocationRegionExistsByID>(string.Empty),
                    UrnId.Create<CheckInventoryLocationRegionExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class InventoryLocationRegionService : InventoryLocationRegionServiceBase { }
}
