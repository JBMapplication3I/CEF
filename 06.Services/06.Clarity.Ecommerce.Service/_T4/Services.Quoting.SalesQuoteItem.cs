// <autogenerated>
// <copyright file="SalesQuoteItemService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales quote item service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales quote items.</summary>
    /// <seealso cref="SalesItemBaseSearchModel"/>
    /// <seealso cref="IReturn{SalesQuoteItemPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteItems", "GET", Priority = 1,
            Summary = "Use to get a list of sales quote items")]
    public partial class GetSalesQuoteItems : SalesItemBaseSearchModel, IReturn<SalesQuoteItemPagedResults> { }

    /// <summary>A ServiceStack Route to get sales quote items for connect.</summary>
    /// <seealso cref="SalesItemBaseSearchModel"/>
    /// <seealso cref="IReturn{List{SalesItemBaseModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItem.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItemsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales quote items")]
    public partial class GetSalesQuoteItemsForConnect : SalesItemBaseSearchModel, IReturn<List<SalesItemBaseModel<IAppliedSalesQuoteItemDiscountModel, AppliedSalesQuoteItemDiscountModel>>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales quote items.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItem.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItemsDigest", "GET",
            Summary = "Use to get a hash representing each sales quote items")]
    public partial class GetSalesQuoteItemsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales quote item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteItem/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote item")]
    public partial class GetSalesQuoteItemByID : ImplementsIDBase, IReturn<SalesItemBaseModel<IAppliedSalesQuoteItemDiscountModel, AppliedSalesQuoteItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get sales quote item.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        Route("/Quoting/SalesQuoteItem/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote item by the custom key")]
    public partial class GetSalesQuoteItemByKey : ImplementsKeyBase, IReturn<SalesItemBaseModel<IAppliedSalesQuoteItemDiscountModel, AppliedSalesQuoteItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get sales quote item.</summary>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        Route("/Quoting/SalesQuoteItem/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote item by the name")]
    public partial class GetSalesQuoteItemByName : ImplementsNameBase, IReturn<SalesItemBaseModel<IAppliedSalesQuoteItemDiscountModel, AppliedSalesQuoteItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to check sales quote item exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItem.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItem/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteItemExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales quote item exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItem.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItem/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteItemExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales quote item exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItem.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItem/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteItemExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales quote item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItem.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteItem/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales quote item.")]
    public partial class CreateSalesQuoteItem : SalesItemBaseModel<IAppliedSalesQuoteItemDiscountModel, AppliedSalesQuoteItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales quote item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Quoting/SalesQuoteItem/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales quote item (as needed).")]
    public partial class UpsertSalesQuoteItem : SalesItemBaseModel<IAppliedSalesQuoteItemDiscountModel, AppliedSalesQuoteItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales quote item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItem.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteItem/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales quote item.")]
    public partial class UpdateSalesQuoteItem : SalesItemBaseModel<IAppliedSalesQuoteItemDiscountModel, AppliedSalesQuoteItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales quote item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItem.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteItem/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote item from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales quote item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItem.Deactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItem/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote item from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItem.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteItem/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote item from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItem.Reactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItem/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote item from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItem.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteItem/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales quote item from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItem.Delete"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItem/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales quote item from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales quote item cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteItem/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales quote item calls.")]
    public class ClearSalesQuoteItemCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesQuoteItemServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesQuoteItems"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteItems request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesItemBaseModel<IAppliedSalesQuoteItemDiscountModel>, SalesItemBaseModel<IAppliedSalesQuoteItemDiscountModel, AppliedSalesQuoteItemDiscountModel>, ISalesItemBaseSearchModel, SalesQuoteItemPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesQuoteItems)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteItemsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesQuoteItemsForConnect request)
        {
            return await Workflows.SalesQuoteItems.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteItemsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteItemsDigest request)
        {
            return await Workflows.SalesQuoteItems.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesQuoteItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteItemByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesQuoteItems, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteItemByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesQuoteItems, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteItemByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteItemByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SalesQuoteItems, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesQuoteItemExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteItemExistsByID request)
        {
            return await Workflows.SalesQuoteItems.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesQuoteItemExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteItemExistsByKey request)
        {
            return await Workflows.SalesQuoteItems.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesQuoteItemExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteItemExistsByName request)
        {
            return await Workflows.SalesQuoteItems.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesQuoteItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesQuoteItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemDataAsync,
                    () => Workflows.SalesQuoteItems.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesQuoteItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesQuoteItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemDataAsync,
                    () => Workflows.SalesQuoteItems.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesQuoteItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesQuoteItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemDataAsync,
                    () => Workflows.SalesQuoteItems.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemDataAsync,
                    () => Workflows.SalesQuoteItems.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemDataAsync,
                    () => Workflows.SalesQuoteItems.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemDataAsync,
                    () => Workflows.SalesQuoteItems.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemDataAsync,
                    () => Workflows.SalesQuoteItems.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemDataAsync,
                    () => Workflows.SalesQuoteItems.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemDataAsync,
                    () => Workflows.SalesQuoteItems.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesQuoteItemCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesQuoteItemCache request)
        {
            await ClearCachedSalesQuoteItemDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesQuoteItemDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesQuoteItems>(string.Empty),
                    UrnId.Create<GetSalesQuoteItemByID>(string.Empty),
                    UrnId.Create<GetSalesQuoteItemByKey>(string.Empty),
                    UrnId.Create<GetSalesQuoteItemByName>(string.Empty),
                    UrnId.Create<CheckSalesQuoteItemExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesQuoteItemExistsByKey>(string.Empty),
                    UrnId.Create<CheckSalesQuoteItemExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesQuoteItemService : SalesQuoteItemServiceBase { }
}
