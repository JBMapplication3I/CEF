// <autogenerated>
// <copyright file="ScheduledJobConfigurationSettingService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the scheduled job configuration setting service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of scheduled job configuration settings.</summary>
    /// <seealso cref="ScheduledJobConfigurationSettingSearchModel"/>
    /// <seealso cref="IReturn{ScheduledJobConfigurationSettingPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Hangfire/ScheduledJobConfigurationSettings", "GET", Priority = 1,
            Summary = "Use to get a list of scheduled job configuration settings")]
    public partial class GetScheduledJobConfigurationSettings : ScheduledJobConfigurationSettingSearchModel, IReturn<ScheduledJobConfigurationSettingPagedResults> { }

    /// <summary>A ServiceStack Route to get scheduled job configuration settings for connect.</summary>
    /// <seealso cref="ScheduledJobConfigurationSettingSearchModel"/>
    /// <seealso cref="IReturn{List{ScheduledJobConfigurationSettingModel}}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfigurationSetting.View"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationSettingsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all scheduled job configuration settings")]
    public partial class GetScheduledJobConfigurationSettingsForConnect : ScheduledJobConfigurationSettingSearchModel, IReturn<List<ScheduledJobConfigurationSettingModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all scheduled job configuration settings.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfigurationSetting.View"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationSettingsDigest", "GET",
            Summary = "Use to get a hash representing each scheduled job configuration settings")]
    public partial class GetScheduledJobConfigurationSettingsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get scheduled job configuration setting.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ScheduledJobConfigurationSettingModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Hangfire/ScheduledJobConfigurationSetting/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific scheduled job configuration setting")]
    public partial class GetScheduledJobConfigurationSettingByID : ImplementsIDBase, IReturn<ScheduledJobConfigurationSettingModel> { }

    /// <summary>A ServiceStack Route to get scheduled job configuration setting.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ScheduledJobConfigurationSettingModel}"/>
    [PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationSetting/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific scheduled job configuration setting by the custom key")]
    public partial class GetScheduledJobConfigurationSettingByKey : ImplementsKeyBase, IReturn<ScheduledJobConfigurationSettingModel> { }

    /// <summary>A ServiceStack Route to check scheduled job configuration setting exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfigurationSetting.View"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationSetting/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckScheduledJobConfigurationSettingExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check scheduled job configuration setting exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfigurationSetting.View"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationSetting/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckScheduledJobConfigurationSettingExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create scheduled job configuration setting.</summary>
    /// <seealso cref="ScheduledJobConfigurationSettingModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfigurationSetting.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationSetting/Create", "POST", Priority = 1,
            Summary = "Use to create a new scheduled job configuration setting.")]
    public partial class CreateScheduledJobConfigurationSetting : ScheduledJobConfigurationSettingModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert scheduled job configuration setting.</summary>
    /// <seealso cref="ScheduledJobConfigurationSettingModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationSetting/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing scheduled job configuration setting (as needed).")]
    public partial class UpsertScheduledJobConfigurationSetting : ScheduledJobConfigurationSettingModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update scheduled job configuration setting.</summary>
    /// <seealso cref="ScheduledJobConfigurationSettingModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfigurationSetting.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationSetting/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing scheduled job configuration setting.")]
    public partial class UpdateScheduledJobConfigurationSetting : ScheduledJobConfigurationSettingModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate scheduled job configuration setting.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfigurationSetting.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationSetting/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific scheduled job configuration setting from the system [Soft-Delete]")]
    public partial class DeactivateScheduledJobConfigurationSettingByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate scheduled job configuration setting by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfigurationSetting.Deactivate"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationSetting/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific scheduled job configuration setting from the system [Soft-Delete]")]
    public partial class DeactivateScheduledJobConfigurationSettingByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate scheduled job configuration setting.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfigurationSetting.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationSetting/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific scheduled job configuration setting from the system [Restore from Soft-Delete]")]
    public partial class ReactivateScheduledJobConfigurationSettingByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate scheduled job configuration setting by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfigurationSetting.Reactivate"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationSetting/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific scheduled job configuration setting from the system [Restore from Soft-Delete]")]
    public partial class ReactivateScheduledJobConfigurationSettingByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete scheduled job configuration setting.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfigurationSetting.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationSetting/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific scheduled job configuration setting from the system [Hard-Delete]")]
    public partial class DeleteScheduledJobConfigurationSettingByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete scheduled job configuration setting by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Hangfire.ScheduledJobConfigurationSetting.Delete"),
        PublicAPI,
        Route("/Hangfire/ScheduledJobConfigurationSetting/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific scheduled job configuration setting from the system [Hard-Delete]")]
    public partial class DeleteScheduledJobConfigurationSettingByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear scheduled job configuration setting cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Hangfire/ScheduledJobConfigurationSetting/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all scheduled job configuration setting calls.")]
    public class ClearScheduledJobConfigurationSettingCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ScheduledJobConfigurationSettingServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetScheduledJobConfigurationSettings"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScheduledJobConfigurationSettings request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IScheduledJobConfigurationSettingModel, ScheduledJobConfigurationSettingModel, IScheduledJobConfigurationSettingSearchModel, ScheduledJobConfigurationSettingPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ScheduledJobConfigurationSettings)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScheduledJobConfigurationSettingsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetScheduledJobConfigurationSettingsForConnect request)
        {
            return await Workflows.ScheduledJobConfigurationSettings.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScheduledJobConfigurationSettingsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScheduledJobConfigurationSettingsDigest request)
        {
            return await Workflows.ScheduledJobConfigurationSettings.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetScheduledJobConfigurationSettingByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScheduledJobConfigurationSettingByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ScheduledJobConfigurationSettings, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScheduledJobConfigurationSettingByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScheduledJobConfigurationSettingByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ScheduledJobConfigurationSettings, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckScheduledJobConfigurationSettingExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckScheduledJobConfigurationSettingExistsByID request)
        {
            return await Workflows.ScheduledJobConfigurationSettings.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckScheduledJobConfigurationSettingExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckScheduledJobConfigurationSettingExistsByKey request)
        {
            return await Workflows.ScheduledJobConfigurationSettings.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertScheduledJobConfigurationSetting"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertScheduledJobConfigurationSetting request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationSettingDataAsync,
                    () => Workflows.ScheduledJobConfigurationSettings.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateScheduledJobConfigurationSetting"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateScheduledJobConfigurationSetting request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationSettingDataAsync,
                    () => Workflows.ScheduledJobConfigurationSettings.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateScheduledJobConfigurationSetting"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateScheduledJobConfigurationSetting request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationSettingDataAsync,
                    () => Workflows.ScheduledJobConfigurationSettings.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateScheduledJobConfigurationSettingByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateScheduledJobConfigurationSettingByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationSettingDataAsync,
                    () => Workflows.ScheduledJobConfigurationSettings.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateScheduledJobConfigurationSettingByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateScheduledJobConfigurationSettingByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationSettingDataAsync,
                    () => Workflows.ScheduledJobConfigurationSettings.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateScheduledJobConfigurationSettingByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateScheduledJobConfigurationSettingByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationSettingDataAsync,
                    () => Workflows.ScheduledJobConfigurationSettings.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateScheduledJobConfigurationSettingByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateScheduledJobConfigurationSettingByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationSettingDataAsync,
                    () => Workflows.ScheduledJobConfigurationSettings.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteScheduledJobConfigurationSettingByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteScheduledJobConfigurationSettingByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationSettingDataAsync,
                    () => Workflows.ScheduledJobConfigurationSettings.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteScheduledJobConfigurationSettingByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteScheduledJobConfigurationSettingByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScheduledJobConfigurationSettingDataAsync,
                    () => Workflows.ScheduledJobConfigurationSettings.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearScheduledJobConfigurationSettingCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearScheduledJobConfigurationSettingCache request)
        {
            await ClearCachedScheduledJobConfigurationSettingDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedScheduledJobConfigurationSettingDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetScheduledJobConfigurationSettings>(string.Empty),
                    UrnId.Create<GetScheduledJobConfigurationSettingByID>(string.Empty),
                    UrnId.Create<GetScheduledJobConfigurationSettingByKey>(string.Empty),
                    UrnId.Create<CheckScheduledJobConfigurationSettingExistsByID>(string.Empty),
                    UrnId.Create<CheckScheduledJobConfigurationSettingExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ScheduledJobConfigurationSettingService : ScheduledJobConfigurationSettingServiceBase { }
}
