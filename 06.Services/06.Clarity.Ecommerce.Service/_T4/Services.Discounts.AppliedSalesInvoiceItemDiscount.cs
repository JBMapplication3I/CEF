// <autogenerated>
// <copyright file="AppliedSalesInvoiceItemDiscountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the applied sales invoice item discount service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of applied sales invoice item discounts.</summary>
    /// <seealso cref="AppliedSalesInvoiceItemDiscountSearchModel"/>
    /// <seealso cref="IReturn{AppliedSalesInvoiceItemDiscountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesInvoiceItemDiscounts", "GET", Priority = 1,
            Summary = "Use to get a list of applied sales invoice item discounts")]
    public partial class GetAppliedSalesInvoiceItemDiscounts : AppliedSalesInvoiceItemDiscountSearchModel, IReturn<AppliedSalesInvoiceItemDiscountPagedResults> { }

    /// <summary>A ServiceStack Route to get applied sales invoice item discounts for connect.</summary>
    /// <seealso cref="AppliedSalesInvoiceItemDiscountSearchModel"/>
    /// <seealso cref="IReturn{List{AppliedSalesInvoiceItemDiscountModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceItemDiscountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all applied sales invoice item discounts")]
    public partial class GetAppliedSalesInvoiceItemDiscountsForConnect : AppliedSalesInvoiceItemDiscountSearchModel, IReturn<List<AppliedSalesInvoiceItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all applied sales invoice item discounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceItemDiscountsDigest", "GET",
            Summary = "Use to get a hash representing each applied sales invoice item discounts")]
    public partial class GetAppliedSalesInvoiceItemDiscountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get applied sales invoice item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AppliedSalesInvoiceItemDiscountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesInvoiceItemDiscount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sales invoice item discount")]
    public partial class GetAppliedSalesInvoiceItemDiscountByID : ImplementsIDBase, IReturn<AppliedSalesInvoiceItemDiscountModel> { }

    /// <summary>A ServiceStack Route to get applied sales invoice item discount.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AppliedSalesInvoiceItemDiscountModel}"/>
    [PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceItemDiscount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sales invoice item discount by the custom key")]
    public partial class GetAppliedSalesInvoiceItemDiscountByKey : ImplementsKeyBase, IReturn<AppliedSalesInvoiceItemDiscountModel> { }

    /// <summary>A ServiceStack Route to check applied sales invoice item discount exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceItemDiscount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSalesInvoiceItemDiscountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check applied sales invoice item discount exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceItemDiscount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSalesInvoiceItemDiscountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create applied sales invoice item discount.</summary>
    /// <seealso cref="AppliedSalesInvoiceItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceItemDiscount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceItemDiscount/Create", "POST", Priority = 1,
            Summary = "Use to create a new applied sales invoice item discount.")]
    public partial class CreateAppliedSalesInvoiceItemDiscount : AppliedSalesInvoiceItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert applied sales invoice item discount.</summary>
    /// <seealso cref="AppliedSalesInvoiceItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceItemDiscount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing applied sales invoice item discount (as needed).")]
    public partial class UpsertAppliedSalesInvoiceItemDiscount : AppliedSalesInvoiceItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update applied sales invoice item discount.</summary>
    /// <seealso cref="AppliedSalesInvoiceItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceItemDiscount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceItemDiscount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing applied sales invoice item discount.")]
    public partial class UpdateAppliedSalesInvoiceItemDiscount : AppliedSalesInvoiceItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate applied sales invoice item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceItemDiscount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceItemDiscount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sales invoice item discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSalesInvoiceItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate applied sales invoice item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceItemDiscount.Deactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceItemDiscount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sales invoice item discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSalesInvoiceItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sales invoice item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceItemDiscount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceItemDiscount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sales invoice item discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSalesInvoiceItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sales invoice item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceItemDiscount.Reactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceItemDiscount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sales invoice item discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSalesInvoiceItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sales invoice item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceItemDiscount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceItemDiscount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific applied sales invoice item discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSalesInvoiceItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sales invoice item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceItemDiscount.Delete"),
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceItemDiscount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific applied sales invoice item discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSalesInvoiceItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear applied sales invoice item discount cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesInvoiceItemDiscount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all applied sales invoice item discount calls.")]
    public class ClearAppliedSalesInvoiceItemDiscountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AppliedSalesInvoiceItemDiscountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAppliedSalesInvoiceItemDiscounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesInvoiceItemDiscounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAppliedSalesInvoiceItemDiscountModel, AppliedSalesInvoiceItemDiscountModel, IAppliedSalesInvoiceItemDiscountSearchModel, AppliedSalesInvoiceItemDiscountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AppliedSalesInvoiceItemDiscounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesInvoiceItemDiscountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAppliedSalesInvoiceItemDiscountsForConnect request)
        {
            return await Workflows.AppliedSalesInvoiceItemDiscounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesInvoiceItemDiscountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesInvoiceItemDiscountsDigest request)
        {
            return await Workflows.AppliedSalesInvoiceItemDiscounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAppliedSalesInvoiceItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesInvoiceItemDiscountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AppliedSalesInvoiceItemDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesInvoiceItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesInvoiceItemDiscountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AppliedSalesInvoiceItemDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAppliedSalesInvoiceItemDiscountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSalesInvoiceItemDiscountExistsByID request)
        {
            return await Workflows.AppliedSalesInvoiceItemDiscounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppliedSalesInvoiceItemDiscountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSalesInvoiceItemDiscountExistsByKey request)
        {
            return await Workflows.AppliedSalesInvoiceItemDiscounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAppliedSalesInvoiceItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAppliedSalesInvoiceItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceItemDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceItemDiscounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAppliedSalesInvoiceItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAppliedSalesInvoiceItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceItemDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceItemDiscounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAppliedSalesInvoiceItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAppliedSalesInvoiceItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceItemDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceItemDiscounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSalesInvoiceItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSalesInvoiceItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceItemDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceItemDiscounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSalesInvoiceItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSalesInvoiceItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceItemDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceItemDiscounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSalesInvoiceItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSalesInvoiceItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceItemDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceItemDiscounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSalesInvoiceItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSalesInvoiceItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceItemDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceItemDiscounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAppliedSalesInvoiceItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSalesInvoiceItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceItemDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceItemDiscounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAppliedSalesInvoiceItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSalesInvoiceItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceItemDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceItemDiscounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAppliedSalesInvoiceItemDiscountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAppliedSalesInvoiceItemDiscountCache request)
        {
            await ClearCachedAppliedSalesInvoiceItemDiscountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAppliedSalesInvoiceItemDiscountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAppliedSalesInvoiceItemDiscounts>(string.Empty),
                    UrnId.Create<GetAppliedSalesInvoiceItemDiscountByID>(string.Empty),
                    UrnId.Create<GetAppliedSalesInvoiceItemDiscountByKey>(string.Empty),
                    UrnId.Create<CheckAppliedSalesInvoiceItemDiscountExistsByID>(string.Empty),
                    UrnId.Create<CheckAppliedSalesInvoiceItemDiscountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AppliedSalesInvoiceItemDiscountService : AppliedSalesInvoiceItemDiscountServiceBase { }
}
