// <autogenerated>
// <copyright file="HistoricalCurrencyRateService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the historical currency rate service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of historical currency rates.</summary>
    /// <seealso cref="HistoricalCurrencyRateSearchModel"/>
    /// <seealso cref="IReturn{HistoricalCurrencyRatePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Currencies/HistoricalCurrencyRates", "GET", Priority = 1,
            Summary = "Use to get a list of historical currency rates")]
    public partial class GetHistoricalCurrencyRates : HistoricalCurrencyRateSearchModel, IReturn<HistoricalCurrencyRatePagedResults> { }

    /// <summary>A ServiceStack Route to get historical currency rates for connect.</summary>
    /// <seealso cref="HistoricalCurrencyRateSearchModel"/>
    /// <seealso cref="IReturn{List{HistoricalCurrencyRateModel}}"/>
    [Authenticate, RequiredPermission("Currencies.HistoricalCurrencyRate.View"),
        PublicAPI,
        Route("/Currencies/HistoricalCurrencyRatesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all historical currency rates")]
    public partial class GetHistoricalCurrencyRatesForConnect : HistoricalCurrencyRateSearchModel, IReturn<List<HistoricalCurrencyRateModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all historical currency rates.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Currencies.HistoricalCurrencyRate.View"),
        PublicAPI,
        Route("/Currencies/HistoricalCurrencyRatesDigest", "GET",
            Summary = "Use to get a hash representing each historical currency rates")]
    public partial class GetHistoricalCurrencyRatesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get historical currency rate.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{HistoricalCurrencyRateModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Currencies/HistoricalCurrencyRate/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific historical currency rate")]
    public partial class GetHistoricalCurrencyRateByID : ImplementsIDBase, IReturn<HistoricalCurrencyRateModel> { }

    /// <summary>A ServiceStack Route to get historical currency rate.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{HistoricalCurrencyRateModel}"/>
    [PublicAPI,
        Route("/Currencies/HistoricalCurrencyRate/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific historical currency rate by the custom key")]
    public partial class GetHistoricalCurrencyRateByKey : ImplementsKeyBase, IReturn<HistoricalCurrencyRateModel> { }

    /// <summary>A ServiceStack Route to check historical currency rate exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Currencies.HistoricalCurrencyRate.View"),
        PublicAPI,
        Route("/Currencies/HistoricalCurrencyRate/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckHistoricalCurrencyRateExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check historical currency rate exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Currencies.HistoricalCurrencyRate.View"),
        PublicAPI,
        Route("/Currencies/HistoricalCurrencyRate/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckHistoricalCurrencyRateExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create historical currency rate.</summary>
    /// <seealso cref="HistoricalCurrencyRateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Currencies.HistoricalCurrencyRate.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/HistoricalCurrencyRate/Create", "POST", Priority = 1,
            Summary = "Use to create a new historical currency rate.")]
    public partial class CreateHistoricalCurrencyRate : HistoricalCurrencyRateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert historical currency rate.</summary>
    /// <seealso cref="HistoricalCurrencyRateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Currencies/HistoricalCurrencyRate/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing historical currency rate (as needed).")]
    public partial class UpsertHistoricalCurrencyRate : HistoricalCurrencyRateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update historical currency rate.</summary>
    /// <seealso cref="HistoricalCurrencyRateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Currencies.HistoricalCurrencyRate.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/HistoricalCurrencyRate/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing historical currency rate.")]
    public partial class UpdateHistoricalCurrencyRate : HistoricalCurrencyRateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate historical currency rate.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.HistoricalCurrencyRate.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/HistoricalCurrencyRate/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific historical currency rate from the system [Soft-Delete]")]
    public partial class DeactivateHistoricalCurrencyRateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate historical currency rate by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.HistoricalCurrencyRate.Deactivate"),
        PublicAPI,
        Route("/Currencies/HistoricalCurrencyRate/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific historical currency rate from the system [Soft-Delete]")]
    public partial class DeactivateHistoricalCurrencyRateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate historical currency rate.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.HistoricalCurrencyRate.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/HistoricalCurrencyRate/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific historical currency rate from the system [Restore from Soft-Delete]")]
    public partial class ReactivateHistoricalCurrencyRateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate historical currency rate by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.HistoricalCurrencyRate.Reactivate"),
        PublicAPI,
        Route("/Currencies/HistoricalCurrencyRate/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific historical currency rate from the system [Restore from Soft-Delete]")]
    public partial class ReactivateHistoricalCurrencyRateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete historical currency rate.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.HistoricalCurrencyRate.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/HistoricalCurrencyRate/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific historical currency rate from the system [Hard-Delete]")]
    public partial class DeleteHistoricalCurrencyRateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete historical currency rate by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.HistoricalCurrencyRate.Delete"),
        PublicAPI,
        Route("/Currencies/HistoricalCurrencyRate/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific historical currency rate from the system [Hard-Delete]")]
    public partial class DeleteHistoricalCurrencyRateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear historical currency rate cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Currencies/HistoricalCurrencyRate/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all historical currency rate calls.")]
    public class ClearHistoricalCurrencyRateCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class HistoricalCurrencyRateServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetHistoricalCurrencyRates"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetHistoricalCurrencyRates request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IHistoricalCurrencyRateModel, HistoricalCurrencyRateModel, IHistoricalCurrencyRateSearchModel, HistoricalCurrencyRatePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.HistoricalCurrencyRates)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetHistoricalCurrencyRatesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetHistoricalCurrencyRatesForConnect request)
        {
            return await Workflows.HistoricalCurrencyRates.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetHistoricalCurrencyRatesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetHistoricalCurrencyRatesDigest request)
        {
            return await Workflows.HistoricalCurrencyRates.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetHistoricalCurrencyRateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetHistoricalCurrencyRateByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.HistoricalCurrencyRates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetHistoricalCurrencyRateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetHistoricalCurrencyRateByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.HistoricalCurrencyRates, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckHistoricalCurrencyRateExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckHistoricalCurrencyRateExistsByID request)
        {
            return await Workflows.HistoricalCurrencyRates.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckHistoricalCurrencyRateExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckHistoricalCurrencyRateExistsByKey request)
        {
            return await Workflows.HistoricalCurrencyRates.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertHistoricalCurrencyRate"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertHistoricalCurrencyRate request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalCurrencyRateDataAsync,
                    () => Workflows.HistoricalCurrencyRates.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateHistoricalCurrencyRate"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateHistoricalCurrencyRate request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalCurrencyRateDataAsync,
                    () => Workflows.HistoricalCurrencyRates.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateHistoricalCurrencyRate"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateHistoricalCurrencyRate request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalCurrencyRateDataAsync,
                    () => Workflows.HistoricalCurrencyRates.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateHistoricalCurrencyRateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateHistoricalCurrencyRateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalCurrencyRateDataAsync,
                    () => Workflows.HistoricalCurrencyRates.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateHistoricalCurrencyRateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateHistoricalCurrencyRateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalCurrencyRateDataAsync,
                    () => Workflows.HistoricalCurrencyRates.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateHistoricalCurrencyRateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateHistoricalCurrencyRateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalCurrencyRateDataAsync,
                    () => Workflows.HistoricalCurrencyRates.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateHistoricalCurrencyRateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateHistoricalCurrencyRateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalCurrencyRateDataAsync,
                    () => Workflows.HistoricalCurrencyRates.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteHistoricalCurrencyRateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteHistoricalCurrencyRateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalCurrencyRateDataAsync,
                    () => Workflows.HistoricalCurrencyRates.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteHistoricalCurrencyRateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteHistoricalCurrencyRateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalCurrencyRateDataAsync,
                    () => Workflows.HistoricalCurrencyRates.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearHistoricalCurrencyRateCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearHistoricalCurrencyRateCache request)
        {
            await ClearCachedHistoricalCurrencyRateDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedHistoricalCurrencyRateDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetHistoricalCurrencyRates>(string.Empty),
                    UrnId.Create<GetHistoricalCurrencyRateByID>(string.Empty),
                    UrnId.Create<GetHistoricalCurrencyRateByKey>(string.Empty),
                    UrnId.Create<CheckHistoricalCurrencyRateExistsByID>(string.Empty),
                    UrnId.Create<CheckHistoricalCurrencyRateExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class HistoricalCurrencyRateService : HistoricalCurrencyRateServiceBase { }
}
