// <autogenerated>
// <copyright file="StoreManufacturerService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store manufacturer service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store manufacturers.</summary>
    /// <seealso cref="StoreManufacturerSearchModel"/>
    /// <seealso cref="IReturn{StoreManufacturerPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreManufacturers", "GET", Priority = 1,
            Summary = "Use to get a list of store manufacturers")]
    public partial class GetStoreManufacturers : StoreManufacturerSearchModel, IReturn<StoreManufacturerPagedResults> { }

    /// <summary>A ServiceStack Route to get store manufacturers for connect.</summary>
    /// <seealso cref="StoreManufacturerSearchModel"/>
    /// <seealso cref="IReturn{List{StoreManufacturerModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreManufacturer.View"),
        PublicAPI,
        Route("/Stores/StoreManufacturersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store manufacturers")]
    public partial class GetStoreManufacturersForConnect : StoreManufacturerSearchModel, IReturn<List<StoreManufacturerModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store manufacturers.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreManufacturer.View"),
        PublicAPI,
        Route("/Stores/StoreManufacturersDigest", "GET",
            Summary = "Use to get a hash representing each store manufacturers")]
    public partial class GetStoreManufacturersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreManufacturerModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreManufacturer/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store manufacturer")]
    public partial class GetStoreManufacturerByID : ImplementsIDBase, IReturn<StoreManufacturerModel> { }

    /// <summary>A ServiceStack Route to get store manufacturer.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreManufacturerModel}"/>
    [PublicAPI,
        Route("/Stores/StoreManufacturer/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store manufacturer by the custom key")]
    public partial class GetStoreManufacturerByKey : ImplementsKeyBase, IReturn<StoreManufacturerModel> { }

    /// <summary>A ServiceStack Route to check store manufacturer exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreManufacturer.View"),
        PublicAPI,
        Route("/Stores/StoreManufacturer/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreManufacturerExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store manufacturer exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreManufacturer.View"),
        PublicAPI,
        Route("/Stores/StoreManufacturer/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreManufacturerExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store manufacturer.</summary>
    /// <seealso cref="StoreManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreManufacturer.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreManufacturer/Create", "POST", Priority = 1,
            Summary = "Use to create a new store manufacturer.")]
    public partial class CreateStoreManufacturer : StoreManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store manufacturer.</summary>
    /// <seealso cref="StoreManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreManufacturer/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store manufacturer (as needed).")]
    public partial class UpsertStoreManufacturer : StoreManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store manufacturer.</summary>
    /// <seealso cref="StoreManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreManufacturer.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreManufacturer/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store manufacturer.")]
    public partial class UpdateStoreManufacturer : StoreManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreManufacturer.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreManufacturer/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store manufacturer from the system [Soft-Delete]")]
    public partial class DeactivateStoreManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreManufacturer.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreManufacturer/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store manufacturer from the system [Soft-Delete]")]
    public partial class DeactivateStoreManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreManufacturer.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreManufacturer/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store manufacturer from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreManufacturer.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreManufacturer/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store manufacturer from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreManufacturer.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreManufacturer/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store manufacturer from the system [Hard-Delete]")]
    public partial class DeleteStoreManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreManufacturer.Delete"),
        PublicAPI,
        Route("/Stores/StoreManufacturer/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store manufacturer from the system [Hard-Delete]")]
    public partial class DeleteStoreManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store manufacturer cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreManufacturer/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store manufacturer calls.")]
    public class ClearStoreManufacturerCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreManufacturerServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreManufacturers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreManufacturers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreManufacturerModel, StoreManufacturerModel, IStoreManufacturerSearchModel, StoreManufacturerPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreManufacturers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreManufacturersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreManufacturersForConnect request)
        {
            return await Workflows.StoreManufacturers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreManufacturersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreManufacturersDigest request)
        {
            return await Workflows.StoreManufacturers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreManufacturerByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreManufacturers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreManufacturerByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreManufacturers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreManufacturerExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreManufacturerExistsByID request)
        {
            return await Workflows.StoreManufacturers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreManufacturerExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreManufacturerExistsByKey request)
        {
            return await Workflows.StoreManufacturers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreManufacturerDataAsync,
                    () => Workflows.StoreManufacturers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreManufacturerDataAsync,
                    () => Workflows.StoreManufacturers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreManufacturerDataAsync,
                    () => Workflows.StoreManufacturers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreManufacturerDataAsync,
                    () => Workflows.StoreManufacturers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreManufacturerDataAsync,
                    () => Workflows.StoreManufacturers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreManufacturerDataAsync,
                    () => Workflows.StoreManufacturers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreManufacturerDataAsync,
                    () => Workflows.StoreManufacturers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreManufacturerDataAsync,
                    () => Workflows.StoreManufacturers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreManufacturerDataAsync,
                    () => Workflows.StoreManufacturers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreManufacturerCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreManufacturerCache request)
        {
            await ClearCachedStoreManufacturerDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreManufacturerDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreManufacturers>(string.Empty),
                    UrnId.Create<GetStoreManufacturerByID>(string.Empty),
                    UrnId.Create<GetStoreManufacturerByKey>(string.Empty),
                    UrnId.Create<CheckStoreManufacturerExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreManufacturerExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreManufacturerService : StoreManufacturerServiceBase { }
}
