// <autogenerated>
// <copyright file="FranchiseVendorService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise vendor service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise vendors.</summary>
    /// <seealso cref="FranchiseVendorSearchModel"/>
    /// <seealso cref="IReturn{FranchiseVendorPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseVendors", "GET", Priority = 1,
            Summary = "Use to get a list of franchise vendors")]
    public partial class GetFranchiseVendors : FranchiseVendorSearchModel, IReturn<FranchiseVendorPagedResults> { }

    /// <summary>A ServiceStack Route to get franchise vendors for connect.</summary>
    /// <seealso cref="FranchiseVendorSearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseVendorModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseVendor.View"),
        PublicAPI,
        Route("/Franchises/FranchiseVendorsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise vendors")]
    public partial class GetFranchiseVendorsForConnect : FranchiseVendorSearchModel, IReturn<List<FranchiseVendorModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise vendors.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseVendor.View"),
        PublicAPI,
        Route("/Franchises/FranchiseVendorsDigest", "GET",
            Summary = "Use to get a hash representing each franchise vendors")]
    public partial class GetFranchiseVendorsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseVendorModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseVendor/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise vendor")]
    public partial class GetFranchiseVendorByID : ImplementsIDBase, IReturn<FranchiseVendorModel> { }

    /// <summary>A ServiceStack Route to get franchise vendor.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseVendorModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseVendor/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise vendor by the custom key")]
    public partial class GetFranchiseVendorByKey : ImplementsKeyBase, IReturn<FranchiseVendorModel> { }

    /// <summary>A ServiceStack Route to check franchise vendor exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseVendor.View"),
        PublicAPI,
        Route("/Franchises/FranchiseVendor/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseVendorExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise vendor exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseVendor.View"),
        PublicAPI,
        Route("/Franchises/FranchiseVendor/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseVendorExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise vendor.</summary>
    /// <seealso cref="FranchiseVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseVendor.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseVendor/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise vendor.")]
    public partial class CreateFranchiseVendor : FranchiseVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise vendor.</summary>
    /// <seealso cref="FranchiseVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseVendor/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise vendor (as needed).")]
    public partial class UpsertFranchiseVendor : FranchiseVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise vendor.</summary>
    /// <seealso cref="FranchiseVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseVendor.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseVendor/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise vendor.")]
    public partial class UpdateFranchiseVendor : FranchiseVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseVendor.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseVendor/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise vendor from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseVendor.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseVendor/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise vendor from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseVendor.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseVendor/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise vendor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseVendor.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseVendor/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise vendor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseVendor.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseVendor/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise vendor from the system [Hard-Delete]")]
    public partial class DeleteFranchiseVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseVendor.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseVendor/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise vendor from the system [Hard-Delete]")]
    public partial class DeleteFranchiseVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise vendor cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseVendor/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise vendor calls.")]
    public class ClearFranchiseVendorCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseVendorServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseVendors"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseVendors request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseVendorModel, FranchiseVendorModel, IFranchiseVendorSearchModel, FranchiseVendorPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseVendors)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseVendorsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseVendorsForConnect request)
        {
            return await Workflows.FranchiseVendors.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseVendorsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseVendorsDigest request)
        {
            return await Workflows.FranchiseVendors.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseVendorByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseVendors, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseVendorByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseVendors, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseVendorExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseVendorExistsByID request)
        {
            return await Workflows.FranchiseVendors.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseVendorExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseVendorExistsByKey request)
        {
            return await Workflows.FranchiseVendors.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseVendorDataAsync,
                    () => Workflows.FranchiseVendors.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseVendorDataAsync,
                    () => Workflows.FranchiseVendors.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseVendorDataAsync,
                    () => Workflows.FranchiseVendors.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseVendorDataAsync,
                    () => Workflows.FranchiseVendors.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseVendorDataAsync,
                    () => Workflows.FranchiseVendors.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseVendorDataAsync,
                    () => Workflows.FranchiseVendors.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseVendorDataAsync,
                    () => Workflows.FranchiseVendors.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseVendorDataAsync,
                    () => Workflows.FranchiseVendors.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseVendorDataAsync,
                    () => Workflows.FranchiseVendors.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseVendorCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseVendorCache request)
        {
            await ClearCachedFranchiseVendorDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseVendorDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseVendors>(string.Empty),
                    UrnId.Create<GetFranchiseVendorByID>(string.Empty),
                    UrnId.Create<GetFranchiseVendorByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseVendorExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseVendorExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseVendorService : FranchiseVendorServiceBase { }
}
