// <autogenerated>
// <copyright file="PaymentService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the payment service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of payments.</summary>
    /// <seealso cref="PaymentSearchModel"/>
    /// <seealso cref="IReturn{PaymentPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/Payments", "GET", Priority = 1,
            Summary = "Use to get a list of payments")]
    public partial class GetPayments : PaymentSearchModel, IReturn<PaymentPagedResults> { }

    /// <summary>A ServiceStack Route to get payments for connect.</summary>
    /// <seealso cref="PaymentSearchModel"/>
    /// <seealso cref="IReturn{List{PaymentModel}}"/>
    [Authenticate, RequiredPermission("Payments.Payment.View"),
        PublicAPI,
        Route("/Payments/PaymentsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all payments")]
    public partial class GetPaymentsForConnect : PaymentSearchModel, IReturn<List<PaymentModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all payments.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.Payment.View"),
        PublicAPI,
        Route("/Payments/PaymentsDigest", "GET",
            Summary = "Use to get a hash representing each payments")]
    public partial class GetPaymentsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PaymentModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/Payment/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific payment")]
    public partial class GetPaymentByID : ImplementsIDBase, IReturn<PaymentModel> { }

    /// <summary>A ServiceStack Route to get payment.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PaymentModel}"/>
    [PublicAPI,
        Route("/Payments/Payment/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific payment by the custom key")]
    public partial class GetPaymentByKey : ImplementsKeyBase, IReturn<PaymentModel> { }

    /// <summary>A ServiceStack Route to check payment exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.Payment.View"),
        PublicAPI,
        Route("/Payments/Payment/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPaymentExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check payment exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.Payment.View"),
        PublicAPI,
        Route("/Payments/Payment/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPaymentExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create payment.</summary>
    /// <seealso cref="PaymentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.Payment.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Payment/Create", "POST", Priority = 1,
            Summary = "Use to create a new payment.")]
    public partial class CreatePayment : PaymentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert payment.</summary>
    /// <seealso cref="PaymentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/Payment/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing payment (as needed).")]
    public partial class UpsertPayment : PaymentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update payment.</summary>
    /// <seealso cref="PaymentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.Payment.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Payment/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing payment.")]
    public partial class UpdatePayment : PaymentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Payment.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Payment/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific payment from the system [Soft-Delete]")]
    public partial class DeactivatePaymentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate payment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Payment.Deactivate"),
        PublicAPI,
        Route("/Payments/Payment/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific payment from the system [Soft-Delete]")]
    public partial class DeactivatePaymentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Payment.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Payment/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific payment from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePaymentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate payment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Payment.Reactivate"),
        PublicAPI,
        Route("/Payments/Payment/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific payment from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePaymentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Payment.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Payment/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific payment from the system [Hard-Delete]")]
    public partial class DeletePaymentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete payment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Payment.Delete"),
        PublicAPI,
        Route("/Payments/Payment/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific payment from the system [Hard-Delete]")]
    public partial class DeletePaymentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear payment cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/Payment/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all payment calls.")]
    public class ClearPaymentCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PaymentServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPayments"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPayments request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPaymentModel, PaymentModel, IPaymentSearchModel, PaymentPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Payments)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPaymentsForConnect request)
        {
            return await Workflows.Payments.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentsDigest request)
        {
            return await Workflows.Payments.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Payments, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Payments, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPaymentExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPaymentExistsByID request)
        {
            return await Workflows.Payments.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPaymentExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPaymentExistsByKey request)
        {
            return await Workflows.Payments.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPayment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPayment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentDataAsync,
                    () => Workflows.Payments.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePayment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePayment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentDataAsync,
                    () => Workflows.Payments.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePayment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePayment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentDataAsync,
                    () => Workflows.Payments.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePaymentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentDataAsync,
                    () => Workflows.Payments.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePaymentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentDataAsync,
                    () => Workflows.Payments.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePaymentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentDataAsync,
                    () => Workflows.Payments.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePaymentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentDataAsync,
                    () => Workflows.Payments.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePaymentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentDataAsync,
                    () => Workflows.Payments.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePaymentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentDataAsync,
                    () => Workflows.Payments.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPaymentCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPaymentCache request)
        {
            await ClearCachedPaymentDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPaymentDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPayments>(string.Empty),
                    UrnId.Create<GetPaymentByID>(string.Empty),
                    UrnId.Create<GetPaymentByKey>(string.Empty),
                    UrnId.Create<CheckPaymentExistsByID>(string.Empty),
                    UrnId.Create<CheckPaymentExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PaymentService : PaymentServiceBase { }
}
