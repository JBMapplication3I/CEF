// <autogenerated>
// <copyright file="SalesQuoteItemTargetService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales quote item target service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales quote item targets.</summary>
    /// <seealso cref="SalesItemTargetBaseSearchModel"/>
    /// <seealso cref="IReturn{SalesQuoteItemTargetPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteItemTargets", "GET", Priority = 1,
            Summary = "Use to get a list of sales quote item targets")]
    public partial class GetSalesQuoteItemTargets : SalesItemTargetBaseSearchModel, IReturn<SalesQuoteItemTargetPagedResults> { }

    /// <summary>A ServiceStack Route to get sales quote item targets for connect.</summary>
    /// <seealso cref="SalesItemTargetBaseSearchModel"/>
    /// <seealso cref="IReturn{List{SalesItemTargetBaseModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItemTarget.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItemTargetsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales quote item targets")]
    public partial class GetSalesQuoteItemTargetsForConnect : SalesItemTargetBaseSearchModel, IReturn<List<SalesItemTargetBaseModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales quote item targets.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItemTarget.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItemTargetsDigest", "GET",
            Summary = "Use to get a hash representing each sales quote item targets")]
    public partial class GetSalesQuoteItemTargetsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales quote item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesItemTargetBaseModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteItemTarget/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote item target")]
    public partial class GetSalesQuoteItemTargetByID : ImplementsIDBase, IReturn<SalesItemTargetBaseModel> { }

    /// <summary>A ServiceStack Route to get sales quote item target.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesItemTargetBaseModel}"/>
    [PublicAPI,
        Route("/Quoting/SalesQuoteItemTarget/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote item target by the custom key")]
    public partial class GetSalesQuoteItemTargetByKey : ImplementsKeyBase, IReturn<SalesItemTargetBaseModel> { }

    /// <summary>A ServiceStack Route to check sales quote item target exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItemTarget.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItemTarget/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteItemTargetExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales quote item target exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItemTarget.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItemTarget/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteItemTargetExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales quote item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItemTarget.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteItemTarget/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales quote item target.")]
    public partial class CreateSalesQuoteItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales quote item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Quoting/SalesQuoteItemTarget/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales quote item target (as needed).")]
    public partial class UpsertSalesQuoteItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales quote item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItemTarget.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteItemTarget/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales quote item target.")]
    public partial class UpdateSalesQuoteItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales quote item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItemTarget.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteItemTarget/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote item target from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales quote item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItemTarget.Deactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItemTarget/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote item target from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItemTarget.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteItemTarget/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote item target from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItemTarget.Reactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItemTarget/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote item target from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItemTarget.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteItemTarget/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales quote item target from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteItemTarget.Delete"),
        PublicAPI,
        Route("/Quoting/SalesQuoteItemTarget/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales quote item target from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales quote item target cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteItemTarget/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales quote item target calls.")]
    public class ClearSalesQuoteItemTargetCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesQuoteItemTargetServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesQuoteItemTargets"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteItemTargets request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesItemTargetBaseModel, SalesItemTargetBaseModel, ISalesItemTargetBaseSearchModel, SalesQuoteItemTargetPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesQuoteItemTargets)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteItemTargetsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesQuoteItemTargetsForConnect request)
        {
            return await Workflows.SalesQuoteItemTargets.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteItemTargetsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteItemTargetsDigest request)
        {
            return await Workflows.SalesQuoteItemTargets.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesQuoteItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteItemTargetByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesQuoteItemTargets, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteItemTargetByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesQuoteItemTargets, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesQuoteItemTargetExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteItemTargetExistsByID request)
        {
            return await Workflows.SalesQuoteItemTargets.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesQuoteItemTargetExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteItemTargetExistsByKey request)
        {
            return await Workflows.SalesQuoteItemTargets.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesQuoteItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesQuoteItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemTargetDataAsync,
                    () => Workflows.SalesQuoteItemTargets.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesQuoteItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesQuoteItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemTargetDataAsync,
                    () => Workflows.SalesQuoteItemTargets.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesQuoteItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesQuoteItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemTargetDataAsync,
                    () => Workflows.SalesQuoteItemTargets.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemTargetDataAsync,
                    () => Workflows.SalesQuoteItemTargets.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemTargetDataAsync,
                    () => Workflows.SalesQuoteItemTargets.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemTargetDataAsync,
                    () => Workflows.SalesQuoteItemTargets.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemTargetDataAsync,
                    () => Workflows.SalesQuoteItemTargets.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemTargetDataAsync,
                    () => Workflows.SalesQuoteItemTargets.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteItemTargetDataAsync,
                    () => Workflows.SalesQuoteItemTargets.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesQuoteItemTargetCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesQuoteItemTargetCache request)
        {
            await ClearCachedSalesQuoteItemTargetDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesQuoteItemTargetDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesQuoteItemTargets>(string.Empty),
                    UrnId.Create<GetSalesQuoteItemTargetByID>(string.Empty),
                    UrnId.Create<GetSalesQuoteItemTargetByKey>(string.Empty),
                    UrnId.Create<CheckSalesQuoteItemTargetExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesQuoteItemTargetExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesQuoteItemTargetService : SalesQuoteItemTargetServiceBase { }
}
