// <autogenerated>
// <copyright file="CountryCurrencyService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the country currency service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of country currencies.</summary>
    /// <seealso cref="CountryCurrencySearchModel"/>
    /// <seealso cref="IReturn{CountryCurrencyPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/CountryCurrencies", "GET", Priority = 1,
            Summary = "Use to get a list of country currencies")]
    public partial class GetCountryCurrencies : CountryCurrencySearchModel, IReturn<CountryCurrencyPagedResults> { }

    /// <summary>A ServiceStack Route to get country currencies for connect.</summary>
    /// <seealso cref="CountryCurrencySearchModel"/>
    /// <seealso cref="IReturn{List{CountryCurrencyModel}}"/>
    [Authenticate, RequiredPermission("Geography.CountryCurrency.View"),
        PublicAPI,
        Route("/Geography/CountryCurrenciesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all country currencies")]
    public partial class GetCountryCurrenciesForConnect : CountryCurrencySearchModel, IReturn<List<CountryCurrencyModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all country currencies.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.CountryCurrency.View"),
        PublicAPI,
        Route("/Geography/CountryCurrenciesDigest", "GET",
            Summary = "Use to get a hash representing each country currencies")]
    public partial class GetCountryCurrenciesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get country currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CountryCurrencyModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/CountryCurrency/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific country currency")]
    public partial class GetCountryCurrencyByID : ImplementsIDBase, IReturn<CountryCurrencyModel> { }

    /// <summary>A ServiceStack Route to get country currency.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CountryCurrencyModel}"/>
    [PublicAPI,
        Route("/Geography/CountryCurrency/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific country currency by the custom key")]
    public partial class GetCountryCurrencyByKey : ImplementsKeyBase, IReturn<CountryCurrencyModel> { }

    /// <summary>A ServiceStack Route to check country currency exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.CountryCurrency.View"),
        PublicAPI,
        Route("/Geography/CountryCurrency/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCountryCurrencyExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check country currency exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.CountryCurrency.View"),
        PublicAPI,
        Route("/Geography/CountryCurrency/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCountryCurrencyExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create country currency.</summary>
    /// <seealso cref="CountryCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.CountryCurrency.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryCurrency/Create", "POST", Priority = 1,
            Summary = "Use to create a new country currency.")]
    public partial class CreateCountryCurrency : CountryCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert country currency.</summary>
    /// <seealso cref="CountryCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/CountryCurrency/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing country currency (as needed).")]
    public partial class UpsertCountryCurrency : CountryCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update country currency.</summary>
    /// <seealso cref="CountryCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.CountryCurrency.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryCurrency/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing country currency.")]
    public partial class UpdateCountryCurrency : CountryCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate country currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryCurrency.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryCurrency/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific country currency from the system [Soft-Delete]")]
    public partial class DeactivateCountryCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate country currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryCurrency.Deactivate"),
        PublicAPI,
        Route("/Geography/CountryCurrency/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific country currency from the system [Soft-Delete]")]
    public partial class DeactivateCountryCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate country currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryCurrency.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryCurrency/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific country currency from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCountryCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate country currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryCurrency.Reactivate"),
        PublicAPI,
        Route("/Geography/CountryCurrency/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific country currency from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCountryCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete country currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryCurrency.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryCurrency/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific country currency from the system [Hard-Delete]")]
    public partial class DeleteCountryCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete country currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryCurrency.Delete"),
        PublicAPI,
        Route("/Geography/CountryCurrency/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific country currency from the system [Hard-Delete]")]
    public partial class DeleteCountryCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear country currency cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/CountryCurrency/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all country currency calls.")]
    public class ClearCountryCurrencyCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CountryCurrencyServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCountryCurrencies"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryCurrencies request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICountryCurrencyModel, CountryCurrencyModel, ICountryCurrencySearchModel, CountryCurrencyPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CountryCurrencies)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryCurrenciesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCountryCurrenciesForConnect request)
        {
            return await Workflows.CountryCurrencies.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryCurrenciesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryCurrenciesDigest request)
        {
            return await Workflows.CountryCurrencies.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCountryCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryCurrencyByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CountryCurrencies, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryCurrencyByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CountryCurrencies, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCountryCurrencyExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCountryCurrencyExistsByID request)
        {
            return await Workflows.CountryCurrencies.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCountryCurrencyExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCountryCurrencyExistsByKey request)
        {
            return await Workflows.CountryCurrencies.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCountryCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCountryCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryCurrencyDataAsync,
                    () => Workflows.CountryCurrencies.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCountryCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCountryCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryCurrencyDataAsync,
                    () => Workflows.CountryCurrencies.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCountryCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCountryCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryCurrencyDataAsync,
                    () => Workflows.CountryCurrencies.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCountryCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCountryCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryCurrencyDataAsync,
                    () => Workflows.CountryCurrencies.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCountryCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCountryCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryCurrencyDataAsync,
                    () => Workflows.CountryCurrencies.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCountryCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCountryCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryCurrencyDataAsync,
                    () => Workflows.CountryCurrencies.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCountryCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCountryCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryCurrencyDataAsync,
                    () => Workflows.CountryCurrencies.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCountryCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCountryCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryCurrencyDataAsync,
                    () => Workflows.CountryCurrencies.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCountryCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCountryCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryCurrencyDataAsync,
                    () => Workflows.CountryCurrencies.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCountryCurrencyCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCountryCurrencyCache request)
        {
            await ClearCachedCountryCurrencyDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCountryCurrencyDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCountryCurrencies>(string.Empty),
                    UrnId.Create<GetCountryCurrencyByID>(string.Empty),
                    UrnId.Create<GetCountryCurrencyByKey>(string.Empty),
                    UrnId.Create<CheckCountryCurrencyExistsByID>(string.Empty),
                    UrnId.Create<CheckCountryCurrencyExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CountryCurrencyService : CountryCurrencyServiceBase { }
}
