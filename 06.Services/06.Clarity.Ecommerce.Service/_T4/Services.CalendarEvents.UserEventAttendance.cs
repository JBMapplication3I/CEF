// <autogenerated>
// <copyright file="UserEventAttendanceService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the user event attendance service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of user event attendances.</summary>
    /// <seealso cref="UserEventAttendanceSearchModel"/>
    /// <seealso cref="IReturn{UserEventAttendancePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/UserEventAttendances", "GET", Priority = 1,
            Summary = "Use to get a list of user event attendances")]
    public partial class GetUserEventAttendances : UserEventAttendanceSearchModel, IReturn<UserEventAttendancePagedResults> { }

    /// <summary>A ServiceStack Route to get user event attendances for connect.</summary>
    /// <seealso cref="UserEventAttendanceSearchModel"/>
    /// <seealso cref="IReturn{List{UserEventAttendanceModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendance.View"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendancesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all user event attendances")]
    public partial class GetUserEventAttendancesForConnect : UserEventAttendanceSearchModel, IReturn<List<UserEventAttendanceModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all user event attendances.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendance.View"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendancesDigest", "GET",
            Summary = "Use to get a hash representing each user event attendances")]
    public partial class GetUserEventAttendancesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get user event attendance.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{UserEventAttendanceModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/UserEventAttendance/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific user event attendance")]
    public partial class GetUserEventAttendanceByID : ImplementsIDBase, IReturn<UserEventAttendanceModel> { }

    /// <summary>A ServiceStack Route to get user event attendance.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{UserEventAttendanceModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/UserEventAttendance/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific user event attendance by the custom key")]
    public partial class GetUserEventAttendanceByKey : ImplementsKeyBase, IReturn<UserEventAttendanceModel> { }

    /// <summary>A ServiceStack Route to check user event attendance exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendance.View"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendance/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckUserEventAttendanceExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user event attendance exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendance.View"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendance/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckUserEventAttendanceExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create user event attendance.</summary>
    /// <seealso cref="UserEventAttendanceModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendance.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendance/Create", "POST", Priority = 1,
            Summary = "Use to create a new user event attendance.")]
    public partial class CreateUserEventAttendance : UserEventAttendanceModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert user event attendance.</summary>
    /// <seealso cref="UserEventAttendanceModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendance/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing user event attendance (as needed).")]
    public partial class UpsertUserEventAttendance : UserEventAttendanceModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update user event attendance.</summary>
    /// <seealso cref="UserEventAttendanceModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendance.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendance/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing user event attendance.")]
    public partial class UpdateUserEventAttendance : UserEventAttendanceModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate user event attendance.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendance.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendance/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user event attendance from the system [Soft-Delete]")]
    public partial class DeactivateUserEventAttendanceByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate user event attendance by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendance.Deactivate"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendance/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user event attendance from the system [Soft-Delete]")]
    public partial class DeactivateUserEventAttendanceByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user event attendance.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendance.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendance/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user event attendance from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserEventAttendanceByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user event attendance by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendance.Reactivate"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendance/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user event attendance from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserEventAttendanceByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user event attendance.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendance.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendance/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific user event attendance from the system [Hard-Delete]")]
    public partial class DeleteUserEventAttendanceByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user event attendance by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.UserEventAttendance.Delete"),
        PublicAPI,
        Route("/CalendarEvents/UserEventAttendance/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific user event attendance from the system [Hard-Delete]")]
    public partial class DeleteUserEventAttendanceByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear user event attendance cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/UserEventAttendance/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all user event attendance calls.")]
    public class ClearUserEventAttendanceCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class UserEventAttendanceServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetUserEventAttendances"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserEventAttendances request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IUserEventAttendanceModel, UserEventAttendanceModel, IUserEventAttendanceSearchModel, UserEventAttendancePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.UserEventAttendances)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserEventAttendancesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetUserEventAttendancesForConnect request)
        {
            return await Workflows.UserEventAttendances.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserEventAttendancesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserEventAttendancesDigest request)
        {
            return await Workflows.UserEventAttendances.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetUserEventAttendanceByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserEventAttendanceByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.UserEventAttendances, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserEventAttendanceByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserEventAttendanceByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.UserEventAttendances, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckUserEventAttendanceExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserEventAttendanceExistsByID request)
        {
            return await Workflows.UserEventAttendances.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserEventAttendanceExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserEventAttendanceExistsByKey request)
        {
            return await Workflows.UserEventAttendances.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertUserEventAttendance"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertUserEventAttendance request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceDataAsync,
                    () => Workflows.UserEventAttendances.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateUserEventAttendance"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateUserEventAttendance request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceDataAsync,
                    () => Workflows.UserEventAttendances.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateUserEventAttendance"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateUserEventAttendance request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceDataAsync,
                    () => Workflows.UserEventAttendances.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateUserEventAttendanceByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserEventAttendanceByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceDataAsync,
                    () => Workflows.UserEventAttendances.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateUserEventAttendanceByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserEventAttendanceByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceDataAsync,
                    () => Workflows.UserEventAttendances.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateUserEventAttendanceByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserEventAttendanceByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceDataAsync,
                    () => Workflows.UserEventAttendances.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateUserEventAttendanceByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserEventAttendanceByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceDataAsync,
                    () => Workflows.UserEventAttendances.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteUserEventAttendanceByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserEventAttendanceByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceDataAsync,
                    () => Workflows.UserEventAttendances.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteUserEventAttendanceByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserEventAttendanceByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserEventAttendanceDataAsync,
                    () => Workflows.UserEventAttendances.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearUserEventAttendanceCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearUserEventAttendanceCache request)
        {
            await ClearCachedUserEventAttendanceDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedUserEventAttendanceDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetUserEventAttendances>(string.Empty),
                    UrnId.Create<GetUserEventAttendanceByID>(string.Empty),
                    UrnId.Create<GetUserEventAttendanceByKey>(string.Empty),
                    UrnId.Create<CheckUserEventAttendanceExistsByID>(string.Empty),
                    UrnId.Create<CheckUserEventAttendanceExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class UserEventAttendanceService : UserEventAttendanceServiceBase { }
}
