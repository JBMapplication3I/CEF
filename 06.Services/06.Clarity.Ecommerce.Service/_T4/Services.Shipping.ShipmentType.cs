// <autogenerated>
// <copyright file="ShipmentTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the shipment type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of shipment types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{ShipmentTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipmentTypes", "GET", Priority = 1,
            Summary = "Use to get a list of shipment types")]
    public partial class GetShipmentTypes : TypeSearchModel, IReturn<ShipmentTypePagedResults> { }

    /// <summary>A ServiceStack Route to get shipment types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentType.View"),
        PublicAPI,
        Route("/Shipping/ShipmentTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all shipment types")]
    public partial class GetShipmentTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all shipment types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentType.View"),
        PublicAPI,
        Route("/Shipping/ShipmentTypesDigest", "GET",
            Summary = "Use to get a hash representing each shipment types")]
    public partial class GetShipmentTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get shipment type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipmentType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific shipment type")]
    public partial class GetShipmentTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get shipment type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Shipping/ShipmentType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific shipment type by the custom key")]
    public partial class GetShipmentTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get shipment type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Shipping/ShipmentType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific shipment type by the name")]
    public partial class GetShipmentTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get shipment type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Shipping/ShipmentType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific shipment type by the name")]
    public partial class GetShipmentTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check shipment type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentType.View"),
        PublicAPI,
        Route("/Shipping/ShipmentType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckShipmentTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check shipment type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentType.View"),
        PublicAPI,
        Route("/Shipping/ShipmentType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckShipmentTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check shipment type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentType.View"),
        PublicAPI,
        Route("/Shipping/ShipmentType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckShipmentTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check shipment type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentType.View"),
        PublicAPI,
        Route("/Shipping/ShipmentType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckShipmentTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create shipment type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentType/Create", "POST", Priority = 1,
            Summary = "Use to create a new shipment type.")]
    public partial class CreateShipmentType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert shipment type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shipping/ShipmentType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing shipment type (as needed).")]
    public partial class UpsertShipmentType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update shipment type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing shipment type.")]
    public partial class UpdateShipmentType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate shipment type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific shipment type from the system [Soft-Delete]")]
    public partial class DeactivateShipmentTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate shipment type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentType.Deactivate"),
        PublicAPI,
        Route("/Shipping/ShipmentType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific shipment type from the system [Soft-Delete]")]
    public partial class DeactivateShipmentTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate shipment type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific shipment type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateShipmentTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate shipment type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentType.Reactivate"),
        PublicAPI,
        Route("/Shipping/ShipmentType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific shipment type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateShipmentTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete shipment type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific shipment type from the system [Hard-Delete]")]
    public partial class DeleteShipmentTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete shipment type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentType.Delete"),
        PublicAPI,
        Route("/Shipping/ShipmentType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific shipment type from the system [Hard-Delete]")]
    public partial class DeleteShipmentTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear shipment type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipmentType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all shipment type calls.")]
    public class ClearShipmentTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ShipmentTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetShipmentTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, ShipmentTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ShipmentTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetShipmentTypesForConnect request)
        {
            return await Workflows.ShipmentTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentTypesDigest request)
        {
            return await Workflows.ShipmentTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetShipmentTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ShipmentTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ShipmentTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ShipmentTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.ShipmentTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckShipmentTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipmentTypeExistsByID request)
        {
            return await Workflows.ShipmentTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckShipmentTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipmentTypeExistsByKey request)
        {
            return await Workflows.ShipmentTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckShipmentTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipmentTypeExistsByName request)
        {
            return await Workflows.ShipmentTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckShipmentTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipmentTypeExistsByDisplayName request)
        {
            return await Workflows.ShipmentTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertShipmentType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertShipmentType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentTypeDataAsync,
                    () => Workflows.ShipmentTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateShipmentType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateShipmentType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentTypeDataAsync,
                    () => Workflows.ShipmentTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateShipmentType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateShipmentType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentTypeDataAsync,
                    () => Workflows.ShipmentTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateShipmentTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateShipmentTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentTypeDataAsync,
                    () => Workflows.ShipmentTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateShipmentTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateShipmentTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentTypeDataAsync,
                    () => Workflows.ShipmentTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateShipmentTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateShipmentTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentTypeDataAsync,
                    () => Workflows.ShipmentTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateShipmentTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateShipmentTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentTypeDataAsync,
                    () => Workflows.ShipmentTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteShipmentTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteShipmentTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentTypeDataAsync,
                    () => Workflows.ShipmentTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteShipmentTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteShipmentTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentTypeDataAsync,
                    () => Workflows.ShipmentTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearShipmentTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearShipmentTypeCache request)
        {
            await ClearCachedShipmentTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedShipmentTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetShipmentTypes>(string.Empty),
                    UrnId.Create<GetShipmentTypeByID>(string.Empty),
                    UrnId.Create<GetShipmentTypeByKey>(string.Empty),
                    UrnId.Create<GetShipmentTypeByName>(string.Empty),
                    UrnId.Create<CheckShipmentTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckShipmentTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckShipmentTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckShipmentTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ShipmentTypeService : ShipmentTypeServiceBase { }
}
