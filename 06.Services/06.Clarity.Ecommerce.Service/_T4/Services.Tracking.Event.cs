// <autogenerated>
// <copyright file="EventService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the event service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of events.</summary>
    /// <seealso cref="EventSearchModel"/>
    /// <seealso cref="IReturn{EventPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/Events", "GET", Priority = 1,
            Summary = "Use to get a list of events")]
    public partial class GetEvents : EventSearchModel, IReturn<EventPagedResults> { }

    /// <summary>A ServiceStack Route to get events for connect.</summary>
    /// <seealso cref="EventSearchModel"/>
    /// <seealso cref="IReturn{List{EventModel}}"/>
    [Authenticate, RequiredPermission("Tracking.Event.View"),
        PublicAPI,
        Route("/Tracking/EventsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all events")]
    public partial class GetEventsForConnect : EventSearchModel, IReturn<List<EventModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all events.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tracking.Event.View"),
        PublicAPI,
        Route("/Tracking/EventsDigest", "GET",
            Summary = "Use to get a hash representing each events")]
    public partial class GetEventsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{EventModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/Event/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific event")]
    public partial class GetEventByID : ImplementsIDBase, IReturn<EventModel> { }

    /// <summary>A ServiceStack Route to get event.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{EventModel}"/>
    [PublicAPI,
        Route("/Tracking/Event/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific event by the custom key")]
    public partial class GetEventByKey : ImplementsKeyBase, IReturn<EventModel> { }

    /// <summary>A ServiceStack Route to get event.</summary>
    /// <seealso cref="IReturn{EventModel}"/>
    [PublicAPI,
        Route("/Tracking/Event/Name", "GET", Priority = 1,
            Summary = "Use to get a specific event by the name")]
    public partial class GetEventByName : ImplementsNameBase, IReturn<EventModel> { }

    /// <summary>A ServiceStack Route to check event exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.Event.View"),
        PublicAPI,
        Route("/Tracking/Event/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckEventExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check event exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.Event.View"),
        PublicAPI,
        Route("/Tracking/Event/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckEventExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check event exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.Event.View"),
        PublicAPI,
        Route("/Tracking/Event/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckEventExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create event.</summary>
    /// <seealso cref="EventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.Event.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Event/Create", "POST", Priority = 1,
            Summary = "Use to create a new event.")]
    public partial class CreateEvent : EventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert event.</summary>
    /// <seealso cref="EventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tracking/Event/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing event (as needed).")]
    public partial class UpsertEvent : EventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update event.</summary>
    /// <seealso cref="EventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.Event.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Event/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing event.")]
    public partial class UpdateEvent : EventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Event.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Event/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific event from the system [Soft-Delete]")]
    public partial class DeactivateEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Event.Deactivate"),
        PublicAPI,
        Route("/Tracking/Event/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific event from the system [Soft-Delete]")]
    public partial class DeactivateEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Event.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Event/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific event from the system [Restore from Soft-Delete]")]
    public partial class ReactivateEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Event.Reactivate"),
        PublicAPI,
        Route("/Tracking/Event/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific event from the system [Restore from Soft-Delete]")]
    public partial class ReactivateEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Event.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Event/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific event from the system [Hard-Delete]")]
    public partial class DeleteEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Event.Delete"),
        PublicAPI,
        Route("/Tracking/Event/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific event from the system [Hard-Delete]")]
    public partial class DeleteEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear event cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/Event/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all event calls.")]
    public class ClearEventCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class EventServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetEvents"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEvents request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IEventModel, EventModel, IEventSearchModel, EventPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Events)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEventsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetEventsForConnect request)
        {
            return await Workflows.Events.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEventsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEventsDigest request)
        {
            return await Workflows.Events.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEventByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Events, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEventByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Events, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEventByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEventByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Events, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckEventExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEventExistsByID request)
        {
            return await Workflows.Events.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEventExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEventExistsByKey request)
        {
            return await Workflows.Events.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEventExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEventExistsByName request)
        {
            return await Workflows.Events.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventDataAsync,
                    () => Workflows.Events.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventDataAsync,
                    () => Workflows.Events.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventDataAsync,
                    () => Workflows.Events.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventDataAsync,
                    () => Workflows.Events.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventDataAsync,
                    () => Workflows.Events.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventDataAsync,
                    () => Workflows.Events.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventDataAsync,
                    () => Workflows.Events.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventDataAsync,
                    () => Workflows.Events.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEventDataAsync,
                    () => Workflows.Events.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearEventCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearEventCache request)
        {
            await ClearCachedEventDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedEventDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetEvents>(string.Empty),
                    UrnId.Create<GetEventByID>(string.Empty),
                    UrnId.Create<GetEventByKey>(string.Empty),
                    UrnId.Create<GetEventByName>(string.Empty),
                    UrnId.Create<CheckEventExistsByID>(string.Empty),
                    UrnId.Create<CheckEventExistsByKey>(string.Empty),
                    UrnId.Create<CheckEventExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class EventService : EventServiceBase { }
}
