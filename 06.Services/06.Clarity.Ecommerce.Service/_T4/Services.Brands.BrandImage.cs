// <autogenerated>
// <copyright file="BrandImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the brand image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of brand images.</summary>
    /// <seealso cref="BrandImageSearchModel"/>
    /// <seealso cref="IReturn{BrandImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandImages", "GET", Priority = 1,
            Summary = "Use to get a list of brand images")]
    public partial class GetBrandImages : BrandImageSearchModel, IReturn<BrandImagePagedResults> { }

    /// <summary>A ServiceStack Route to get brand images for connect.</summary>
    /// <seealso cref="BrandImageSearchModel"/>
    /// <seealso cref="IReturn{List{BrandImageModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandImage.View"),
        PublicAPI,
        Route("/Brands/BrandImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all brand images")]
    public partial class GetBrandImagesForConnect : BrandImageSearchModel, IReturn<List<BrandImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all brand images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandImage.View"),
        PublicAPI,
        Route("/Brands/BrandImagesDigest", "GET",
            Summary = "Use to get a hash representing each brand images")]
    public partial class GetBrandImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get brand image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{BrandImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific brand image")]
    public partial class GetBrandImageByID : ImplementsIDBase, IReturn<BrandImageModel> { }

    /// <summary>A ServiceStack Route to get brand image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{BrandImageModel}"/>
    [PublicAPI,
        Route("/Brands/BrandImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific brand image by the custom key")]
    public partial class GetBrandImageByKey : ImplementsKeyBase, IReturn<BrandImageModel> { }

    /// <summary>A ServiceStack Route to get brand image.</summary>
    /// <seealso cref="IReturn{BrandImageModel}"/>
    [PublicAPI,
        Route("/Brands/BrandImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific brand image by the name")]
    public partial class GetBrandImageByName : ImplementsNameBase, IReturn<BrandImageModel> { }

    /// <summary>A ServiceStack Route to check brand image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandImage.View"),
        PublicAPI,
        Route("/Brands/BrandImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandImage.View"),
        PublicAPI,
        Route("/Brands/BrandImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandImage.View"),
        PublicAPI,
        Route("/Brands/BrandImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create brand image.</summary>
    /// <seealso cref="BrandImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new brand image.")]
    public partial class CreateBrandImage : BrandImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert brand image.</summary>
    /// <seealso cref="BrandImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Brands/BrandImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing brand image (as needed).")]
    public partial class UpsertBrandImage : BrandImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update brand image.</summary>
    /// <seealso cref="BrandImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing brand image.")]
    public partial class UpdateBrandImage : BrandImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate brand image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand image from the system [Soft-Delete]")]
    public partial class DeactivateBrandImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate brand image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandImage.Deactivate"),
        PublicAPI,
        Route("/Brands/BrandImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand image from the system [Soft-Delete]")]
    public partial class DeactivateBrandImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandImage.Reactivate"),
        PublicAPI,
        Route("/Brands/BrandImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific brand image from the system [Hard-Delete]")]
    public partial class DeleteBrandImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandImage.Delete"),
        PublicAPI,
        Route("/Brands/BrandImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific brand image from the system [Hard-Delete]")]
    public partial class DeleteBrandImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear brand image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all brand image calls.")]
    public class ClearBrandImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BrandImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBrandImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IBrandImageModel, BrandImageModel, IBrandImageSearchModel, BrandImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BrandImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBrandImagesForConnect request)
        {
            return await Workflows.BrandImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandImagesDigest request)
        {
            return await Workflows.BrandImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBrandImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BrandImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BrandImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.BrandImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBrandImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandImageExistsByID request)
        {
            return await Workflows.BrandImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandImageExistsByKey request)
        {
            return await Workflows.BrandImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandImageExistsByName request)
        {
            return await Workflows.BrandImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBrandImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBrandImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandImageDataAsync,
                    () => Workflows.BrandImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBrandImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBrandImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandImageDataAsync,
                    () => Workflows.BrandImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBrandImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBrandImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandImageDataAsync,
                    () => Workflows.BrandImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBrandImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandImageDataAsync,
                    () => Workflows.BrandImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBrandImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandImageDataAsync,
                    () => Workflows.BrandImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBrandImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandImageDataAsync,
                    () => Workflows.BrandImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBrandImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandImageDataAsync,
                    () => Workflows.BrandImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBrandImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandImageDataAsync,
                    () => Workflows.BrandImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBrandImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandImageDataAsync,
                    () => Workflows.BrandImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBrandImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBrandImageCache request)
        {
            await ClearCachedBrandImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBrandImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBrandImages>(string.Empty),
                    UrnId.Create<GetBrandImageByID>(string.Empty),
                    UrnId.Create<GetBrandImageByKey>(string.Empty),
                    UrnId.Create<GetBrandImageByName>(string.Empty),
                    UrnId.Create<CheckBrandImageExistsByID>(string.Empty),
                    UrnId.Create<CheckBrandImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckBrandImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BrandImageService : BrandImageServiceBase { }
}
