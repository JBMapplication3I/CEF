// <autogenerated>
// <copyright file="EmailQueueAttachmentService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the email queue attachment service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of email queue attachments.</summary>
    /// <seealso cref="EmailQueueAttachmentSearchModel"/>
    /// <seealso cref="IReturn{EmailQueueAttachmentPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailQueueAttachments", "GET", Priority = 1,
            Summary = "Use to get a list of email queue attachments")]
    public partial class GetEmailQueueAttachments : EmailQueueAttachmentSearchModel, IReturn<EmailQueueAttachmentPagedResults> { }

    /// <summary>A ServiceStack Route to get email queue attachments for connect.</summary>
    /// <seealso cref="EmailQueueAttachmentSearchModel"/>
    /// <seealso cref="IReturn{List{EmailQueueAttachmentModel}}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueueAttachment.View"),
        PublicAPI,
        Route("/Messaging/EmailQueueAttachmentsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all email queue attachments")]
    public partial class GetEmailQueueAttachmentsForConnect : EmailQueueAttachmentSearchModel, IReturn<List<EmailQueueAttachmentModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all email queue attachments.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueueAttachment.View"),
        PublicAPI,
        Route("/Messaging/EmailQueueAttachmentsDigest", "GET",
            Summary = "Use to get a hash representing each email queue attachments")]
    public partial class GetEmailQueueAttachmentsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get email queue attachment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{EmailQueueAttachmentModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailQueueAttachment/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific email queue attachment")]
    public partial class GetEmailQueueAttachmentByID : ImplementsIDBase, IReturn<EmailQueueAttachmentModel> { }

    /// <summary>A ServiceStack Route to get email queue attachment.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{EmailQueueAttachmentModel}"/>
    [PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific email queue attachment by the custom key")]
    public partial class GetEmailQueueAttachmentByKey : ImplementsKeyBase, IReturn<EmailQueueAttachmentModel> { }

    /// <summary>A ServiceStack Route to get email queue attachment.</summary>
    /// <seealso cref="IReturn{EmailQueueAttachmentModel}"/>
    [PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Name", "GET", Priority = 1,
            Summary = "Use to get a specific email queue attachment by the name")]
    public partial class GetEmailQueueAttachmentByName : ImplementsNameBase, IReturn<EmailQueueAttachmentModel> { }

    /// <summary>A ServiceStack Route to get email queue attachment.</summary>
    /// <seealso cref="IReturn{EmailQueueAttachmentModel}"/>
    [PublicAPI,
        Route("/Messaging/EmailQueueAttachment/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific email queue attachment by the SEO URL")]
    public partial class GetEmailQueueAttachmentBySeoUrl : ImplementsSeoUrlBase, IReturn<EmailQueueAttachmentModel> { }

    /// <summary>A ServiceStack Route to check email queue attachment exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueueAttachment.View"),
        PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailQueueAttachmentExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check email queue attachment exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueueAttachment.View"),
        PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailQueueAttachmentExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check email queue attachment exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueueAttachment.View"),
        PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailQueueAttachmentExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check email queue attachment exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueueAttachment.View"),
        PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailQueueAttachmentExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create email queue attachment.</summary>
    /// <seealso cref="EmailQueueAttachmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueueAttachment.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Create", "POST", Priority = 1,
            Summary = "Use to create a new email queue attachment.")]
    public partial class CreateEmailQueueAttachment : EmailQueueAttachmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert email queue attachment.</summary>
    /// <seealso cref="EmailQueueAttachmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing email queue attachment (as needed).")]
    public partial class UpsertEmailQueueAttachment : EmailQueueAttachmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update email queue attachment.</summary>
    /// <seealso cref="EmailQueueAttachmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueueAttachment.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing email queue attachment.")]
    public partial class UpdateEmailQueueAttachment : EmailQueueAttachmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate email queue attachment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueueAttachment.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific email queue attachment from the system [Soft-Delete]")]
    public partial class DeactivateEmailQueueAttachmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate email queue attachment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueueAttachment.Deactivate"),
        PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific email queue attachment from the system [Soft-Delete]")]
    public partial class DeactivateEmailQueueAttachmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate email queue attachment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueueAttachment.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific email queue attachment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateEmailQueueAttachmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate email queue attachment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueueAttachment.Reactivate"),
        PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific email queue attachment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateEmailQueueAttachmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete email queue attachment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueueAttachment.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific email queue attachment from the system [Hard-Delete]")]
    public partial class DeleteEmailQueueAttachmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete email queue attachment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueueAttachment.Delete"),
        PublicAPI,
        Route("/Messaging/EmailQueueAttachment/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific email queue attachment from the system [Hard-Delete]")]
    public partial class DeleteEmailQueueAttachmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear email queue attachment cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailQueueAttachment/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all email queue attachment calls.")]
    public class ClearEmailQueueAttachmentCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class EmailQueueAttachmentServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetEmailQueueAttachments"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailQueueAttachments request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IEmailQueueAttachmentModel, EmailQueueAttachmentModel, IEmailQueueAttachmentSearchModel, EmailQueueAttachmentPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.EmailQueueAttachments)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailQueueAttachmentsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetEmailQueueAttachmentsForConnect request)
        {
            return await Workflows.EmailQueueAttachments.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailQueueAttachmentsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailQueueAttachmentsDigest request)
        {
            return await Workflows.EmailQueueAttachments.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetEmailQueueAttachmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailQueueAttachmentByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.EmailQueueAttachments, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailQueueAttachmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailQueueAttachmentByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.EmailQueueAttachments, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailQueueAttachmentByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailQueueAttachmentByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.EmailQueueAttachments, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailQueueAttachmentBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailQueueAttachmentBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.EmailQueueAttachments, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckEmailQueueAttachmentExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailQueueAttachmentExistsByID request)
        {
            return await Workflows.EmailQueueAttachments.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEmailQueueAttachmentExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailQueueAttachmentExistsByKey request)
        {
            return await Workflows.EmailQueueAttachments.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEmailQueueAttachmentExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailQueueAttachmentExistsByName request)
        {
            return await Workflows.EmailQueueAttachments.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEmailQueueAttachmentExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailQueueAttachmentExistsBySeoUrl request)
        {
            return await Workflows.EmailQueueAttachments.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertEmailQueueAttachment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertEmailQueueAttachment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueAttachmentDataAsync,
                    () => Workflows.EmailQueueAttachments.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateEmailQueueAttachment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateEmailQueueAttachment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueAttachmentDataAsync,
                    () => Workflows.EmailQueueAttachments.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateEmailQueueAttachment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateEmailQueueAttachment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueAttachmentDataAsync,
                    () => Workflows.EmailQueueAttachments.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateEmailQueueAttachmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateEmailQueueAttachmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueAttachmentDataAsync,
                    () => Workflows.EmailQueueAttachments.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateEmailQueueAttachmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateEmailQueueAttachmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueAttachmentDataAsync,
                    () => Workflows.EmailQueueAttachments.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateEmailQueueAttachmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateEmailQueueAttachmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueAttachmentDataAsync,
                    () => Workflows.EmailQueueAttachments.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateEmailQueueAttachmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateEmailQueueAttachmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueAttachmentDataAsync,
                    () => Workflows.EmailQueueAttachments.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteEmailQueueAttachmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteEmailQueueAttachmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueAttachmentDataAsync,
                    () => Workflows.EmailQueueAttachments.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteEmailQueueAttachmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteEmailQueueAttachmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueAttachmentDataAsync,
                    () => Workflows.EmailQueueAttachments.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearEmailQueueAttachmentCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearEmailQueueAttachmentCache request)
        {
            await ClearCachedEmailQueueAttachmentDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedEmailQueueAttachmentDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetEmailQueueAttachments>(string.Empty),
                    UrnId.Create<GetEmailQueueAttachmentByID>(string.Empty),
                    UrnId.Create<GetEmailQueueAttachmentByKey>(string.Empty),
                    UrnId.Create<GetEmailQueueAttachmentByName>(string.Empty),
                    UrnId.Create<GetEmailQueueAttachmentBySeoUrl>(string.Empty),
                    UrnId.Create<CheckEmailQueueAttachmentExistsByID>(string.Empty),
                    UrnId.Create<CheckEmailQueueAttachmentExistsByKey>(string.Empty),
                    UrnId.Create<CheckEmailQueueAttachmentExistsByName>(string.Empty),
                    UrnId.Create<CheckEmailQueueAttachmentExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class EmailQueueAttachmentService : EmailQueueAttachmentServiceBase { }
}
