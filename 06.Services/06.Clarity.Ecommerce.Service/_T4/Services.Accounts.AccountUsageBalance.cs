// <autogenerated>
// <copyright file="AccountUsageBalanceService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the account usage balance service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of account usage balances.</summary>
    /// <seealso cref="AccountUsageBalanceSearchModel"/>
    /// <seealso cref="IReturn{AccountUsageBalancePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountUsageBalances", "GET", Priority = 1,
            Summary = "Use to get a list of account usage balances")]
    public partial class GetAccountUsageBalances : AccountUsageBalanceSearchModel, IReturn<AccountUsageBalancePagedResults> { }

    /// <summary>A ServiceStack Route to get account usage balances for connect.</summary>
    /// <seealso cref="AccountUsageBalanceSearchModel"/>
    /// <seealso cref="IReturn{List{AccountUsageBalanceModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountUsageBalance.View"),
        PublicAPI,
        Route("/Accounts/AccountUsageBalancesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all account usage balances")]
    public partial class GetAccountUsageBalancesForConnect : AccountUsageBalanceSearchModel, IReturn<List<AccountUsageBalanceModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all account usage balances.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountUsageBalance.View"),
        PublicAPI,
        Route("/Accounts/AccountUsageBalancesDigest", "GET",
            Summary = "Use to get a hash representing each account usage balances")]
    public partial class GetAccountUsageBalancesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get account usage balance.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AccountUsageBalanceModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountUsageBalance/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific account usage balance")]
    public partial class GetAccountUsageBalanceByID : ImplementsIDBase, IReturn<AccountUsageBalanceModel> { }

    /// <summary>A ServiceStack Route to get account usage balance.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AccountUsageBalanceModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountUsageBalance/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific account usage balance by the custom key")]
    public partial class GetAccountUsageBalanceByKey : ImplementsKeyBase, IReturn<AccountUsageBalanceModel> { }

    /// <summary>A ServiceStack Route to check account usage balance exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountUsageBalance.View"),
        PublicAPI,
        Route("/Accounts/AccountUsageBalance/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountUsageBalanceExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account usage balance exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountUsageBalance.View"),
        PublicAPI,
        Route("/Accounts/AccountUsageBalance/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountUsageBalanceExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create account usage balance.</summary>
    /// <seealso cref="AccountUsageBalanceModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountUsageBalance.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountUsageBalance/Create", "POST", Priority = 1,
            Summary = "Use to create a new account usage balance.")]
    public partial class CreateAccountUsageBalance : AccountUsageBalanceModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert account usage balance.</summary>
    /// <seealso cref="AccountUsageBalanceModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Accounts/AccountUsageBalance/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing account usage balance (as needed).")]
    public partial class UpsertAccountUsageBalance : AccountUsageBalanceModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update account usage balance.</summary>
    /// <seealso cref="AccountUsageBalanceModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountUsageBalance.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountUsageBalance/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing account usage balance.")]
    public partial class UpdateAccountUsageBalance : AccountUsageBalanceModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate account usage balance.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountUsageBalance.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountUsageBalance/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account usage balance from the system [Soft-Delete]")]
    public partial class DeactivateAccountUsageBalanceByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate account usage balance by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountUsageBalance.Deactivate"),
        PublicAPI,
        Route("/Accounts/AccountUsageBalance/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account usage balance from the system [Soft-Delete]")]
    public partial class DeactivateAccountUsageBalanceByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account usage balance.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountUsageBalance.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountUsageBalance/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account usage balance from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountUsageBalanceByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account usage balance by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountUsageBalance.Reactivate"),
        PublicAPI,
        Route("/Accounts/AccountUsageBalance/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account usage balance from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountUsageBalanceByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account usage balance.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountUsageBalance.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountUsageBalance/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific account usage balance from the system [Hard-Delete]")]
    public partial class DeleteAccountUsageBalanceByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account usage balance by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountUsageBalance.Delete"),
        PublicAPI,
        Route("/Accounts/AccountUsageBalance/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific account usage balance from the system [Hard-Delete]")]
    public partial class DeleteAccountUsageBalanceByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear account usage balance cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountUsageBalance/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all account usage balance calls.")]
    public class ClearAccountUsageBalanceCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AccountUsageBalanceServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAccountUsageBalances"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountUsageBalances request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAccountUsageBalanceModel, AccountUsageBalanceModel, IAccountUsageBalanceSearchModel, AccountUsageBalancePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AccountUsageBalances)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountUsageBalancesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAccountUsageBalancesForConnect request)
        {
            return await Workflows.AccountUsageBalances.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountUsageBalancesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountUsageBalancesDigest request)
        {
            return await Workflows.AccountUsageBalances.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAccountUsageBalanceByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountUsageBalanceByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AccountUsageBalances, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountUsageBalanceByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountUsageBalanceByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AccountUsageBalances, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAccountUsageBalanceExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountUsageBalanceExistsByID request)
        {
            return await Workflows.AccountUsageBalances.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountUsageBalanceExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountUsageBalanceExistsByKey request)
        {
            return await Workflows.AccountUsageBalances.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAccountUsageBalance"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAccountUsageBalance request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountUsageBalanceDataAsync,
                    () => Workflows.AccountUsageBalances.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAccountUsageBalance"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAccountUsageBalance request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountUsageBalanceDataAsync,
                    () => Workflows.AccountUsageBalances.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAccountUsageBalance"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAccountUsageBalance request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountUsageBalanceDataAsync,
                    () => Workflows.AccountUsageBalances.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAccountUsageBalanceByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountUsageBalanceByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountUsageBalanceDataAsync,
                    () => Workflows.AccountUsageBalances.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAccountUsageBalanceByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountUsageBalanceByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountUsageBalanceDataAsync,
                    () => Workflows.AccountUsageBalances.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAccountUsageBalanceByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountUsageBalanceByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountUsageBalanceDataAsync,
                    () => Workflows.AccountUsageBalances.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAccountUsageBalanceByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountUsageBalanceByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountUsageBalanceDataAsync,
                    () => Workflows.AccountUsageBalances.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAccountUsageBalanceByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountUsageBalanceByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountUsageBalanceDataAsync,
                    () => Workflows.AccountUsageBalances.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAccountUsageBalanceByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountUsageBalanceByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountUsageBalanceDataAsync,
                    () => Workflows.AccountUsageBalances.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAccountUsageBalanceCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAccountUsageBalanceCache request)
        {
            await ClearCachedAccountUsageBalanceDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAccountUsageBalanceDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAccountUsageBalances>(string.Empty),
                    UrnId.Create<GetAccountUsageBalanceByID>(string.Empty),
                    UrnId.Create<GetAccountUsageBalanceByKey>(string.Empty),
                    UrnId.Create<CheckAccountUsageBalanceExistsByID>(string.Empty),
                    UrnId.Create<CheckAccountUsageBalanceExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AccountUsageBalanceService : AccountUsageBalanceServiceBase { }
}
