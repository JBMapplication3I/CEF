// <autogenerated>
// <copyright file="ProductRestrictionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the product restriction service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of product restrictions.</summary>
    /// <seealso cref="ProductRestrictionSearchModel"/>
    /// <seealso cref="IReturn{ProductRestrictionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductRestrictions", "GET", Priority = 1,
            Summary = "Use to get a list of product restrictions")]
    public partial class GetProductRestrictions : ProductRestrictionSearchModel, IReturn<ProductRestrictionPagedResults> { }

    /// <summary>A ServiceStack Route to get product restrictions for connect.</summary>
    /// <seealso cref="ProductRestrictionSearchModel"/>
    /// <seealso cref="IReturn{List{ProductRestrictionModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductRestriction.View"),
        PublicAPI,
        Route("/Products/ProductRestrictionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all product restrictions")]
    public partial class GetProductRestrictionsForConnect : ProductRestrictionSearchModel, IReturn<List<ProductRestrictionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all product restrictions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductRestriction.View"),
        PublicAPI,
        Route("/Products/ProductRestrictionsDigest", "GET",
            Summary = "Use to get a hash representing each product restrictions")]
    public partial class GetProductRestrictionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get product restriction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ProductRestrictionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductRestriction/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific product restriction")]
    public partial class GetProductRestrictionByID : ImplementsIDBase, IReturn<ProductRestrictionModel> { }

    /// <summary>A ServiceStack Route to get product restriction.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ProductRestrictionModel}"/>
    [PublicAPI,
        Route("/Products/ProductRestriction/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific product restriction by the custom key")]
    public partial class GetProductRestrictionByKey : ImplementsKeyBase, IReturn<ProductRestrictionModel> { }

    /// <summary>A ServiceStack Route to check product restriction exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductRestriction.View"),
        PublicAPI,
        Route("/Products/ProductRestriction/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckProductRestrictionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product restriction exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductRestriction.View"),
        PublicAPI,
        Route("/Products/ProductRestriction/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckProductRestrictionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create product restriction.</summary>
    /// <seealso cref="ProductRestrictionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductRestriction.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductRestriction/Create", "POST", Priority = 1,
            Summary = "Use to create a new product restriction.")]
    public partial class CreateProductRestriction : ProductRestrictionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert product restriction.</summary>
    /// <seealso cref="ProductRestrictionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Products/ProductRestriction/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing product restriction (as needed).")]
    public partial class UpsertProductRestriction : ProductRestrictionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update product restriction.</summary>
    /// <seealso cref="ProductRestrictionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductRestriction.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductRestriction/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing product restriction.")]
    public partial class UpdateProductRestriction : ProductRestrictionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate product restriction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductRestriction.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductRestriction/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product restriction from the system [Soft-Delete]")]
    public partial class DeactivateProductRestrictionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate product restriction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductRestriction.Deactivate"),
        PublicAPI,
        Route("/Products/ProductRestriction/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product restriction from the system [Soft-Delete]")]
    public partial class DeactivateProductRestrictionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product restriction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductRestriction.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductRestriction/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product restriction from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductRestrictionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product restriction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductRestriction.Reactivate"),
        PublicAPI,
        Route("/Products/ProductRestriction/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product restriction from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductRestrictionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product restriction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductRestriction.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductRestriction/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific product restriction from the system [Hard-Delete]")]
    public partial class DeleteProductRestrictionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product restriction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductRestriction.Delete"),
        PublicAPI,
        Route("/Products/ProductRestriction/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific product restriction from the system [Hard-Delete]")]
    public partial class DeleteProductRestrictionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear product restriction cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductRestriction/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all product restriction calls.")]
    public class ClearProductRestrictionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ProductRestrictionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetProductRestrictions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductRestrictions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IProductRestrictionModel, ProductRestrictionModel, IProductRestrictionSearchModel, ProductRestrictionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ProductRestrictions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductRestrictionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetProductRestrictionsForConnect request)
        {
            return await Workflows.ProductRestrictions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductRestrictionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductRestrictionsDigest request)
        {
            return await Workflows.ProductRestrictions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetProductRestrictionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductRestrictionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ProductRestrictions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductRestrictionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductRestrictionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ProductRestrictions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckProductRestrictionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductRestrictionExistsByID request)
        {
            return await Workflows.ProductRestrictions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductRestrictionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductRestrictionExistsByKey request)
        {
            return await Workflows.ProductRestrictions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertProductRestriction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertProductRestriction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductRestrictionDataAsync,
                    () => Workflows.ProductRestrictions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateProductRestriction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateProductRestriction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductRestrictionDataAsync,
                    () => Workflows.ProductRestrictions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateProductRestriction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateProductRestriction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductRestrictionDataAsync,
                    () => Workflows.ProductRestrictions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateProductRestrictionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductRestrictionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductRestrictionDataAsync,
                    () => Workflows.ProductRestrictions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateProductRestrictionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductRestrictionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductRestrictionDataAsync,
                    () => Workflows.ProductRestrictions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateProductRestrictionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductRestrictionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductRestrictionDataAsync,
                    () => Workflows.ProductRestrictions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateProductRestrictionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductRestrictionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductRestrictionDataAsync,
                    () => Workflows.ProductRestrictions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteProductRestrictionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductRestrictionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductRestrictionDataAsync,
                    () => Workflows.ProductRestrictions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteProductRestrictionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductRestrictionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductRestrictionDataAsync,
                    () => Workflows.ProductRestrictions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearProductRestrictionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearProductRestrictionCache request)
        {
            await ClearCachedProductRestrictionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedProductRestrictionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetProductRestrictions>(string.Empty),
                    UrnId.Create<GetProductRestrictionByID>(string.Empty),
                    UrnId.Create<GetProductRestrictionByKey>(string.Empty),
                    UrnId.Create<CheckProductRestrictionExistsByID>(string.Empty),
                    UrnId.Create<CheckProductRestrictionExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ProductRestrictionService : ProductRestrictionServiceBase { }
}
