// <autogenerated>
// <copyright file="ServiceAreaService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the service area service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of service areas.</summary>
    /// <seealso cref="ServiceAreaSearchModel"/>
    /// <seealso cref="IReturn{ServiceAreaPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/ServiceAreas", "GET", Priority = 1,
            Summary = "Use to get a list of service areas")]
    public partial class GetServiceAreas : ServiceAreaSearchModel, IReturn<ServiceAreaPagedResults> { }

    /// <summary>A ServiceStack Route to get service areas for connect.</summary>
    /// <seealso cref="ServiceAreaSearchModel"/>
    /// <seealso cref="IReturn{List{ServiceAreaModel}}"/>
    [Authenticate, RequiredPermission("Accounts.ServiceArea.View"),
        PublicAPI,
        Route("/Accounts/ServiceAreasForConnect", "POST,GET", Priority = 1,
            Summary = "Get all service areas")]
    public partial class GetServiceAreasForConnect : ServiceAreaSearchModel, IReturn<List<ServiceAreaModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all service areas.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Accounts.ServiceArea.View"),
        PublicAPI,
        Route("/Accounts/ServiceAreasDigest", "GET",
            Summary = "Use to get a hash representing each service areas")]
    public partial class GetServiceAreasDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get service area.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ServiceAreaModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/ServiceArea/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific service area")]
    public partial class GetServiceAreaByID : ImplementsIDBase, IReturn<ServiceAreaModel> { }

    /// <summary>A ServiceStack Route to get service area.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ServiceAreaModel}"/>
    [PublicAPI,
        Route("/Accounts/ServiceArea/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific service area by the custom key")]
    public partial class GetServiceAreaByKey : ImplementsKeyBase, IReturn<ServiceAreaModel> { }

    /// <summary>A ServiceStack Route to check service area exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.ServiceArea.View"),
        PublicAPI,
        Route("/Accounts/ServiceArea/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckServiceAreaExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check service area exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.ServiceArea.View"),
        PublicAPI,
        Route("/Accounts/ServiceArea/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckServiceAreaExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create service area.</summary>
    /// <seealso cref="ServiceAreaModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.ServiceArea.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/ServiceArea/Create", "POST", Priority = 1,
            Summary = "Use to create a new service area.")]
    public partial class CreateServiceArea : ServiceAreaModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert service area.</summary>
    /// <seealso cref="ServiceAreaModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Accounts/ServiceArea/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing service area (as needed).")]
    public partial class UpsertServiceArea : ServiceAreaModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update service area.</summary>
    /// <seealso cref="ServiceAreaModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.ServiceArea.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/ServiceArea/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing service area.")]
    public partial class UpdateServiceArea : ServiceAreaModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate service area.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.ServiceArea.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/ServiceArea/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific service area from the system [Soft-Delete]")]
    public partial class DeactivateServiceAreaByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate service area by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.ServiceArea.Deactivate"),
        PublicAPI,
        Route("/Accounts/ServiceArea/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific service area from the system [Soft-Delete]")]
    public partial class DeactivateServiceAreaByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate service area.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.ServiceArea.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/ServiceArea/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific service area from the system [Restore from Soft-Delete]")]
    public partial class ReactivateServiceAreaByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate service area by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.ServiceArea.Reactivate"),
        PublicAPI,
        Route("/Accounts/ServiceArea/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific service area from the system [Restore from Soft-Delete]")]
    public partial class ReactivateServiceAreaByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete service area.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.ServiceArea.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/ServiceArea/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific service area from the system [Hard-Delete]")]
    public partial class DeleteServiceAreaByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete service area by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.ServiceArea.Delete"),
        PublicAPI,
        Route("/Accounts/ServiceArea/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific service area from the system [Hard-Delete]")]
    public partial class DeleteServiceAreaByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear service area cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/ServiceArea/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all service area calls.")]
    public class ClearServiceAreaCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ServiceAreaServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetServiceAreas"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetServiceAreas request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IServiceAreaModel, ServiceAreaModel, IServiceAreaSearchModel, ServiceAreaPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ServiceAreas)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetServiceAreasForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetServiceAreasForConnect request)
        {
            return await Workflows.ServiceAreas.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetServiceAreasDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetServiceAreasDigest request)
        {
            return await Workflows.ServiceAreas.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetServiceAreaByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetServiceAreaByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ServiceAreas, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetServiceAreaByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetServiceAreaByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ServiceAreas, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckServiceAreaExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckServiceAreaExistsByID request)
        {
            return await Workflows.ServiceAreas.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckServiceAreaExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckServiceAreaExistsByKey request)
        {
            return await Workflows.ServiceAreas.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertServiceArea"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertServiceArea request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedServiceAreaDataAsync,
                    () => Workflows.ServiceAreas.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateServiceArea"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateServiceArea request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedServiceAreaDataAsync,
                    () => Workflows.ServiceAreas.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateServiceArea"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateServiceArea request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedServiceAreaDataAsync,
                    () => Workflows.ServiceAreas.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateServiceAreaByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateServiceAreaByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedServiceAreaDataAsync,
                    () => Workflows.ServiceAreas.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateServiceAreaByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateServiceAreaByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedServiceAreaDataAsync,
                    () => Workflows.ServiceAreas.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateServiceAreaByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateServiceAreaByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedServiceAreaDataAsync,
                    () => Workflows.ServiceAreas.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateServiceAreaByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateServiceAreaByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedServiceAreaDataAsync,
                    () => Workflows.ServiceAreas.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteServiceAreaByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteServiceAreaByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedServiceAreaDataAsync,
                    () => Workflows.ServiceAreas.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteServiceAreaByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteServiceAreaByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedServiceAreaDataAsync,
                    () => Workflows.ServiceAreas.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearServiceAreaCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearServiceAreaCache request)
        {
            await ClearCachedServiceAreaDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedServiceAreaDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetServiceAreas>(string.Empty),
                    UrnId.Create<GetServiceAreaByID>(string.Empty),
                    UrnId.Create<GetServiceAreaByKey>(string.Empty),
                    UrnId.Create<CheckServiceAreaExistsByID>(string.Empty),
                    UrnId.Create<CheckServiceAreaExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ServiceAreaService : ServiceAreaServiceBase { }
}
