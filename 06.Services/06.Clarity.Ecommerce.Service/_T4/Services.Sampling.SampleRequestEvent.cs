// <autogenerated>
// <copyright file="SampleRequestEventService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sample request event service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sample request events.</summary>
    /// <seealso cref="SampleRequestEventSearchModel"/>
    /// <seealso cref="IReturn{SampleRequestEventPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestEvents", "GET", Priority = 1,
            Summary = "Use to get a list of sample request events")]
    public partial class GetSampleRequestEvents : SampleRequestEventSearchModel, IReturn<SampleRequestEventPagedResults> { }

    /// <summary>A ServiceStack Route to get sample request events for connect.</summary>
    /// <seealso cref="SampleRequestEventSearchModel"/>
    /// <seealso cref="IReturn{List{SampleRequestEventModel}}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEvent.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestEventsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sample request events")]
    public partial class GetSampleRequestEventsForConnect : SampleRequestEventSearchModel, IReturn<List<SampleRequestEventModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sample request events.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEvent.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestEventsDigest", "GET",
            Summary = "Use to get a hash representing each sample request events")]
    public partial class GetSampleRequestEventsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sample request event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SampleRequestEventModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestEvent/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sample request event")]
    public partial class GetSampleRequestEventByID : ImplementsIDBase, IReturn<SampleRequestEventModel> { }

    /// <summary>A ServiceStack Route to get sample request event.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SampleRequestEventModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequestEvent/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sample request event by the custom key")]
    public partial class GetSampleRequestEventByKey : ImplementsKeyBase, IReturn<SampleRequestEventModel> { }

    /// <summary>A ServiceStack Route to get sample request event.</summary>
    /// <seealso cref="IReturn{SampleRequestEventModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequestEvent/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sample request event by the name")]
    public partial class GetSampleRequestEventByName : ImplementsNameBase, IReturn<SampleRequestEventModel> { }

    /// <summary>A ServiceStack Route to check sample request event exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEvent.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestEvent/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestEventExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request event exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEvent.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestEvent/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestEventExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request event exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEvent.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestEvent/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestEventExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sample request event.</summary>
    /// <seealso cref="SampleRequestEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEvent.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestEvent/Create", "POST", Priority = 1,
            Summary = "Use to create a new sample request event.")]
    public partial class CreateSampleRequestEvent : SampleRequestEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sample request event.</summary>
    /// <seealso cref="SampleRequestEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Sampling/SampleRequestEvent/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sample request event (as needed).")]
    public partial class UpsertSampleRequestEvent : SampleRequestEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sample request event.</summary>
    /// <seealso cref="SampleRequestEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEvent.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestEvent/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sample request event.")]
    public partial class UpdateSampleRequestEvent : SampleRequestEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sample request event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEvent.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestEvent/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sample request event from the system [Soft-Delete]")]
    public partial class DeactivateSampleRequestEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sample request event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEvent.Deactivate"),
        PublicAPI,
        Route("/Sampling/SampleRequestEvent/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sample request event from the system [Soft-Delete]")]
    public partial class DeactivateSampleRequestEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sample request event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEvent.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestEvent/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sample request event from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSampleRequestEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sample request event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEvent.Reactivate"),
        PublicAPI,
        Route("/Sampling/SampleRequestEvent/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sample request event from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSampleRequestEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sample request event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEvent.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestEvent/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sample request event from the system [Hard-Delete]")]
    public partial class DeleteSampleRequestEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sample request event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEvent.Delete"),
        PublicAPI,
        Route("/Sampling/SampleRequestEvent/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sample request event from the system [Hard-Delete]")]
    public partial class DeleteSampleRequestEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sample request event cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestEvent/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sample request event calls.")]
    public class ClearSampleRequestEventCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SampleRequestEventServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSampleRequestEvents"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestEvents request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISampleRequestEventModel, SampleRequestEventModel, ISampleRequestEventSearchModel, SampleRequestEventPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SampleRequestEvents)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestEventsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSampleRequestEventsForConnect request)
        {
            return await Workflows.SampleRequestEvents.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestEventsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestEventsDigest request)
        {
            return await Workflows.SampleRequestEvents.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSampleRequestEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestEventByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SampleRequestEvents, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestEventByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SampleRequestEvents, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestEventByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestEventByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SampleRequestEvents, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSampleRequestEventExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestEventExistsByID request)
        {
            return await Workflows.SampleRequestEvents.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestEventExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestEventExistsByKey request)
        {
            return await Workflows.SampleRequestEvents.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestEventExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestEventExistsByName request)
        {
            return await Workflows.SampleRequestEvents.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSampleRequestEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSampleRequestEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventDataAsync,
                    () => Workflows.SampleRequestEvents.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSampleRequestEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSampleRequestEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventDataAsync,
                    () => Workflows.SampleRequestEvents.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSampleRequestEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSampleRequestEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventDataAsync,
                    () => Workflows.SampleRequestEvents.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSampleRequestEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSampleRequestEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventDataAsync,
                    () => Workflows.SampleRequestEvents.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSampleRequestEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSampleRequestEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventDataAsync,
                    () => Workflows.SampleRequestEvents.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSampleRequestEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSampleRequestEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventDataAsync,
                    () => Workflows.SampleRequestEvents.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSampleRequestEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSampleRequestEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventDataAsync,
                    () => Workflows.SampleRequestEvents.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSampleRequestEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSampleRequestEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventDataAsync,
                    () => Workflows.SampleRequestEvents.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSampleRequestEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSampleRequestEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventDataAsync,
                    () => Workflows.SampleRequestEvents.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSampleRequestEventCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSampleRequestEventCache request)
        {
            await ClearCachedSampleRequestEventDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSampleRequestEventDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSampleRequestEvents>(string.Empty),
                    UrnId.Create<GetSampleRequestEventByID>(string.Empty),
                    UrnId.Create<GetSampleRequestEventByKey>(string.Empty),
                    UrnId.Create<GetSampleRequestEventByName>(string.Empty),
                    UrnId.Create<CheckSampleRequestEventExistsByID>(string.Empty),
                    UrnId.Create<CheckSampleRequestEventExistsByKey>(string.Empty),
                    UrnId.Create<CheckSampleRequestEventExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SampleRequestEventService : SampleRequestEventServiceBase { }
}
