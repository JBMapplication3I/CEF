// <autogenerated>
// <copyright file="SubscriptionTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the subscription type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of subscription types.</summary>
    /// <seealso cref="SubscriptionTypeSearchModel"/>
    /// <seealso cref="IReturn{SubscriptionTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SubscriptionTypes", "GET", Priority = 1,
            Summary = "Use to get a list of subscription types")]
    public partial class GetSubscriptionTypes : SubscriptionTypeSearchModel, IReturn<SubscriptionTypePagedResults> { }

    /// <summary>A ServiceStack Route to get subscription types for connect.</summary>
    /// <seealso cref="SubscriptionTypeSearchModel"/>
    /// <seealso cref="IReturn{List{SubscriptionTypeModel}}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionType.View"),
        PublicAPI,
        Route("/Payments/SubscriptionTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all subscription types")]
    public partial class GetSubscriptionTypesForConnect : SubscriptionTypeSearchModel, IReturn<List<SubscriptionTypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all subscription types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionType.View"),
        PublicAPI,
        Route("/Payments/SubscriptionTypesDigest", "GET",
            Summary = "Use to get a hash representing each subscription types")]
    public partial class GetSubscriptionTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get subscription type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SubscriptionTypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SubscriptionType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific subscription type")]
    public partial class GetSubscriptionTypeByID : ImplementsIDBase, IReturn<SubscriptionTypeModel> { }

    /// <summary>A ServiceStack Route to get subscription type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SubscriptionTypeModel}"/>
    [PublicAPI,
        Route("/Payments/SubscriptionType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific subscription type by the custom key")]
    public partial class GetSubscriptionTypeByKey : ImplementsKeyBase, IReturn<SubscriptionTypeModel> { }

    /// <summary>A ServiceStack Route to get subscription type.</summary>
    /// <seealso cref="IReturn{SubscriptionTypeModel}"/>
    [PublicAPI,
        Route("/Payments/SubscriptionType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific subscription type by the name")]
    public partial class GetSubscriptionTypeByName : ImplementsNameBase, IReturn<SubscriptionTypeModel> { }

    /// <summary>A ServiceStack Route to get subscription type.</summary>
    /// <seealso cref="IReturn{SubscriptionTypeModel}"/>
    [PublicAPI,
        Route("/Payments/SubscriptionType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific subscription type by the name")]
    public partial class GetSubscriptionTypeByDisplayName : ImplementsDisplayNameBase, IReturn<SubscriptionTypeModel> { }

    /// <summary>A ServiceStack Route to check subscription type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionType.View"),
        PublicAPI,
        Route("/Payments/SubscriptionType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSubscriptionTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check subscription type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionType.View"),
        PublicAPI,
        Route("/Payments/SubscriptionType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSubscriptionTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check subscription type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionType.View"),
        PublicAPI,
        Route("/Payments/SubscriptionType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSubscriptionTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check subscription type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionType.View"),
        PublicAPI,
        Route("/Payments/SubscriptionType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSubscriptionTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create subscription type.</summary>
    /// <seealso cref="SubscriptionTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionType/Create", "POST", Priority = 1,
            Summary = "Use to create a new subscription type.")]
    public partial class CreateSubscriptionType : SubscriptionTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert subscription type.</summary>
    /// <seealso cref="SubscriptionTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/SubscriptionType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing subscription type (as needed).")]
    public partial class UpsertSubscriptionType : SubscriptionTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update subscription type.</summary>
    /// <seealso cref="SubscriptionTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing subscription type.")]
    public partial class UpdateSubscriptionType : SubscriptionTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate subscription type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific subscription type from the system [Soft-Delete]")]
    public partial class DeactivateSubscriptionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate subscription type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionType.Deactivate"),
        PublicAPI,
        Route("/Payments/SubscriptionType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific subscription type from the system [Soft-Delete]")]
    public partial class DeactivateSubscriptionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate subscription type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific subscription type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSubscriptionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate subscription type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionType.Reactivate"),
        PublicAPI,
        Route("/Payments/SubscriptionType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific subscription type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSubscriptionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete subscription type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SubscriptionType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific subscription type from the system [Hard-Delete]")]
    public partial class DeleteSubscriptionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete subscription type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SubscriptionType.Delete"),
        PublicAPI,
        Route("/Payments/SubscriptionType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific subscription type from the system [Hard-Delete]")]
    public partial class DeleteSubscriptionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear subscription type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SubscriptionType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all subscription type calls.")]
    public class ClearSubscriptionTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SubscriptionTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSubscriptionTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISubscriptionTypeModel, SubscriptionTypeModel, ISubscriptionTypeSearchModel, SubscriptionTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SubscriptionTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSubscriptionTypesForConnect request)
        {
            return await Workflows.SubscriptionTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionTypesDigest request)
        {
            return await Workflows.SubscriptionTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSubscriptionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SubscriptionTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SubscriptionTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SubscriptionTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.SubscriptionTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSubscriptionTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSubscriptionTypeExistsByID request)
        {
            return await Workflows.SubscriptionTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSubscriptionTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSubscriptionTypeExistsByKey request)
        {
            return await Workflows.SubscriptionTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSubscriptionTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSubscriptionTypeExistsByName request)
        {
            return await Workflows.SubscriptionTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSubscriptionTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSubscriptionTypeExistsByDisplayName request)
        {
            return await Workflows.SubscriptionTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSubscriptionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSubscriptionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeDataAsync,
                    () => Workflows.SubscriptionTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSubscriptionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSubscriptionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeDataAsync,
                    () => Workflows.SubscriptionTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSubscriptionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSubscriptionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeDataAsync,
                    () => Workflows.SubscriptionTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSubscriptionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSubscriptionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeDataAsync,
                    () => Workflows.SubscriptionTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSubscriptionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSubscriptionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeDataAsync,
                    () => Workflows.SubscriptionTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSubscriptionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSubscriptionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeDataAsync,
                    () => Workflows.SubscriptionTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSubscriptionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSubscriptionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeDataAsync,
                    () => Workflows.SubscriptionTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSubscriptionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSubscriptionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeDataAsync,
                    () => Workflows.SubscriptionTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSubscriptionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSubscriptionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionTypeDataAsync,
                    () => Workflows.SubscriptionTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSubscriptionTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSubscriptionTypeCache request)
        {
            await ClearCachedSubscriptionTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSubscriptionTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSubscriptionTypes>(string.Empty),
                    UrnId.Create<GetSubscriptionTypeByID>(string.Empty),
                    UrnId.Create<GetSubscriptionTypeByKey>(string.Empty),
                    UrnId.Create<GetSubscriptionTypeByName>(string.Empty),
                    UrnId.Create<CheckSubscriptionTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckSubscriptionTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckSubscriptionTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckSubscriptionTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SubscriptionTypeService : SubscriptionTypeServiceBase { }
}
