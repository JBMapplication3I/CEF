// <autogenerated>
// <copyright file="GeneralAttributePredefinedOptionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the general attribute predefined option service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of general attribute predefined options.</summary>
    /// <seealso cref="GeneralAttributePredefinedOptionSearchModel"/>
    /// <seealso cref="IReturn{GeneralAttributePredefinedOptionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Attributes/GeneralAttributePredefinedOptions", "GET", Priority = 1,
            Summary = "Use to get a list of general attribute predefined options")]
    public partial class GetGeneralAttributePredefinedOptions : GeneralAttributePredefinedOptionSearchModel, IReturn<GeneralAttributePredefinedOptionPagedResults> { }

    /// <summary>A ServiceStack Route to get general attribute predefined options for connect.</summary>
    /// <seealso cref="GeneralAttributePredefinedOptionSearchModel"/>
    /// <seealso cref="IReturn{List{GeneralAttributePredefinedOptionModel}}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttributePredefinedOption.View"),
        PublicAPI,
        Route("/Attributes/GeneralAttributePredefinedOptionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all general attribute predefined options")]
    public partial class GetGeneralAttributePredefinedOptionsForConnect : GeneralAttributePredefinedOptionSearchModel, IReturn<List<GeneralAttributePredefinedOptionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all general attribute predefined options.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttributePredefinedOption.View"),
        PublicAPI,
        Route("/Attributes/GeneralAttributePredefinedOptionsDigest", "GET",
            Summary = "Use to get a hash representing each general attribute predefined options")]
    public partial class GetGeneralAttributePredefinedOptionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get general attribute predefined option.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{GeneralAttributePredefinedOptionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Attributes/GeneralAttributePredefinedOption/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific general attribute predefined option")]
    public partial class GetGeneralAttributePredefinedOptionByID : ImplementsIDBase, IReturn<GeneralAttributePredefinedOptionModel> { }

    /// <summary>A ServiceStack Route to get general attribute predefined option.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{GeneralAttributePredefinedOptionModel}"/>
    [PublicAPI,
        Route("/Attributes/GeneralAttributePredefinedOption/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific general attribute predefined option by the custom key")]
    public partial class GetGeneralAttributePredefinedOptionByKey : ImplementsKeyBase, IReturn<GeneralAttributePredefinedOptionModel> { }

    /// <summary>A ServiceStack Route to check general attribute predefined option exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttributePredefinedOption.View"),
        PublicAPI,
        Route("/Attributes/GeneralAttributePredefinedOption/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckGeneralAttributePredefinedOptionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check general attribute predefined option exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttributePredefinedOption.View"),
        PublicAPI,
        Route("/Attributes/GeneralAttributePredefinedOption/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckGeneralAttributePredefinedOptionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create general attribute predefined option.</summary>
    /// <seealso cref="GeneralAttributePredefinedOptionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttributePredefinedOption.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/GeneralAttributePredefinedOption/Create", "POST", Priority = 1,
            Summary = "Use to create a new general attribute predefined option.")]
    public partial class CreateGeneralAttributePredefinedOption : GeneralAttributePredefinedOptionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert general attribute predefined option.</summary>
    /// <seealso cref="GeneralAttributePredefinedOptionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Attributes/GeneralAttributePredefinedOption/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing general attribute predefined option (as needed).")]
    public partial class UpsertGeneralAttributePredefinedOption : GeneralAttributePredefinedOptionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update general attribute predefined option.</summary>
    /// <seealso cref="GeneralAttributePredefinedOptionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttributePredefinedOption.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/GeneralAttributePredefinedOption/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing general attribute predefined option.")]
    public partial class UpdateGeneralAttributePredefinedOption : GeneralAttributePredefinedOptionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate general attribute predefined option.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttributePredefinedOption.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/GeneralAttributePredefinedOption/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific general attribute predefined option from the system [Soft-Delete]")]
    public partial class DeactivateGeneralAttributePredefinedOptionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate general attribute predefined option by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttributePredefinedOption.Deactivate"),
        PublicAPI,
        Route("/Attributes/GeneralAttributePredefinedOption/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific general attribute predefined option from the system [Soft-Delete]")]
    public partial class DeactivateGeneralAttributePredefinedOptionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate general attribute predefined option.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttributePredefinedOption.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/GeneralAttributePredefinedOption/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific general attribute predefined option from the system [Restore from Soft-Delete]")]
    public partial class ReactivateGeneralAttributePredefinedOptionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate general attribute predefined option by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttributePredefinedOption.Reactivate"),
        PublicAPI,
        Route("/Attributes/GeneralAttributePredefinedOption/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific general attribute predefined option from the system [Restore from Soft-Delete]")]
    public partial class ReactivateGeneralAttributePredefinedOptionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete general attribute predefined option.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttributePredefinedOption.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/GeneralAttributePredefinedOption/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific general attribute predefined option from the system [Hard-Delete]")]
    public partial class DeleteGeneralAttributePredefinedOptionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete general attribute predefined option by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttributePredefinedOption.Delete"),
        PublicAPI,
        Route("/Attributes/GeneralAttributePredefinedOption/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific general attribute predefined option from the system [Hard-Delete]")]
    public partial class DeleteGeneralAttributePredefinedOptionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear general attribute predefined option cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Attributes/GeneralAttributePredefinedOption/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all general attribute predefined option calls.")]
    public class ClearGeneralAttributePredefinedOptionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class GeneralAttributePredefinedOptionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetGeneralAttributePredefinedOptions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGeneralAttributePredefinedOptions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IGeneralAttributePredefinedOptionModel, GeneralAttributePredefinedOptionModel, IGeneralAttributePredefinedOptionSearchModel, GeneralAttributePredefinedOptionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.GeneralAttributePredefinedOptions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGeneralAttributePredefinedOptionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetGeneralAttributePredefinedOptionsForConnect request)
        {
            return await Workflows.GeneralAttributePredefinedOptions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGeneralAttributePredefinedOptionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGeneralAttributePredefinedOptionsDigest request)
        {
            return await Workflows.GeneralAttributePredefinedOptions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetGeneralAttributePredefinedOptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGeneralAttributePredefinedOptionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.GeneralAttributePredefinedOptions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGeneralAttributePredefinedOptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGeneralAttributePredefinedOptionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.GeneralAttributePredefinedOptions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckGeneralAttributePredefinedOptionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGeneralAttributePredefinedOptionExistsByID request)
        {
            return await Workflows.GeneralAttributePredefinedOptions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckGeneralAttributePredefinedOptionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGeneralAttributePredefinedOptionExistsByKey request)
        {
            return await Workflows.GeneralAttributePredefinedOptions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertGeneralAttributePredefinedOption"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertGeneralAttributePredefinedOption request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributePredefinedOptionDataAsync,
                    () => Workflows.GeneralAttributePredefinedOptions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateGeneralAttributePredefinedOption"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateGeneralAttributePredefinedOption request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributePredefinedOptionDataAsync,
                    () => Workflows.GeneralAttributePredefinedOptions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateGeneralAttributePredefinedOption"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateGeneralAttributePredefinedOption request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributePredefinedOptionDataAsync,
                    () => Workflows.GeneralAttributePredefinedOptions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateGeneralAttributePredefinedOptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateGeneralAttributePredefinedOptionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributePredefinedOptionDataAsync,
                    () => Workflows.GeneralAttributePredefinedOptions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateGeneralAttributePredefinedOptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateGeneralAttributePredefinedOptionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributePredefinedOptionDataAsync,
                    () => Workflows.GeneralAttributePredefinedOptions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateGeneralAttributePredefinedOptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateGeneralAttributePredefinedOptionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributePredefinedOptionDataAsync,
                    () => Workflows.GeneralAttributePredefinedOptions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateGeneralAttributePredefinedOptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateGeneralAttributePredefinedOptionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributePredefinedOptionDataAsync,
                    () => Workflows.GeneralAttributePredefinedOptions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteGeneralAttributePredefinedOptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteGeneralAttributePredefinedOptionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributePredefinedOptionDataAsync,
                    () => Workflows.GeneralAttributePredefinedOptions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteGeneralAttributePredefinedOptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteGeneralAttributePredefinedOptionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributePredefinedOptionDataAsync,
                    () => Workflows.GeneralAttributePredefinedOptions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearGeneralAttributePredefinedOptionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearGeneralAttributePredefinedOptionCache request)
        {
            await ClearCachedGeneralAttributePredefinedOptionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedGeneralAttributePredefinedOptionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetGeneralAttributePredefinedOptions>(string.Empty),
                    UrnId.Create<GetGeneralAttributePredefinedOptionByID>(string.Empty),
                    UrnId.Create<GetGeneralAttributePredefinedOptionByKey>(string.Empty),
                    UrnId.Create<CheckGeneralAttributePredefinedOptionExistsByID>(string.Empty),
                    UrnId.Create<CheckGeneralAttributePredefinedOptionExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class GeneralAttributePredefinedOptionService : GeneralAttributePredefinedOptionServiceBase { }
}
