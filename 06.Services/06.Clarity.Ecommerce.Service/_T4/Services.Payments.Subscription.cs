// <autogenerated>
// <copyright file="SubscriptionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the subscription service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of subscriptions.</summary>
    /// <seealso cref="SubscriptionSearchModel"/>
    /// <seealso cref="IReturn{SubscriptionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/Subscriptions", "GET", Priority = 1,
            Summary = "Use to get a list of subscriptions")]
    public partial class GetSubscriptions : SubscriptionSearchModel, IReturn<SubscriptionPagedResults> { }

    /// <summary>A ServiceStack Route to get subscriptions for connect.</summary>
    /// <seealso cref="SubscriptionSearchModel"/>
    /// <seealso cref="IReturn{List{SubscriptionModel}}"/>
    [Authenticate, RequiredPermission("Payments.Subscription.View"),
        PublicAPI,
        Route("/Payments/SubscriptionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all subscriptions")]
    public partial class GetSubscriptionsForConnect : SubscriptionSearchModel, IReturn<List<SubscriptionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all subscriptions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.Subscription.View"),
        PublicAPI,
        Route("/Payments/SubscriptionsDigest", "GET",
            Summary = "Use to get a hash representing each subscriptions")]
    public partial class GetSubscriptionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get subscription.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SubscriptionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/Subscription/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific subscription")]
    public partial class GetSubscriptionByID : ImplementsIDBase, IReturn<SubscriptionModel> { }

    /// <summary>A ServiceStack Route to get subscription.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SubscriptionModel}"/>
    [PublicAPI,
        Route("/Payments/Subscription/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific subscription by the custom key")]
    public partial class GetSubscriptionByKey : ImplementsKeyBase, IReturn<SubscriptionModel> { }

    /// <summary>A ServiceStack Route to get subscription.</summary>
    /// <seealso cref="IReturn{SubscriptionModel}"/>
    [PublicAPI,
        Route("/Payments/Subscription/Name", "GET", Priority = 1,
            Summary = "Use to get a specific subscription by the name")]
    public partial class GetSubscriptionByName : ImplementsNameBase, IReturn<SubscriptionModel> { }

    /// <summary>A ServiceStack Route to check subscription exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.Subscription.View"),
        PublicAPI,
        Route("/Payments/Subscription/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSubscriptionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check subscription exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.Subscription.View"),
        PublicAPI,
        Route("/Payments/Subscription/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSubscriptionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check subscription exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.Subscription.View"),
        PublicAPI,
        Route("/Payments/Subscription/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSubscriptionExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create subscription.</summary>
    /// <seealso cref="SubscriptionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.Subscription.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Subscription/Create", "POST", Priority = 1,
            Summary = "Use to create a new subscription.")]
    public partial class CreateSubscription : SubscriptionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert subscription.</summary>
    /// <seealso cref="SubscriptionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/Subscription/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing subscription (as needed).")]
    public partial class UpsertSubscription : SubscriptionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update subscription.</summary>
    /// <seealso cref="SubscriptionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.Subscription.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Subscription/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing subscription.")]
    public partial class UpdateSubscription : SubscriptionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate subscription.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Subscription.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Subscription/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific subscription from the system [Soft-Delete]")]
    public partial class DeactivateSubscriptionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate subscription by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Subscription.Deactivate"),
        PublicAPI,
        Route("/Payments/Subscription/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific subscription from the system [Soft-Delete]")]
    public partial class DeactivateSubscriptionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate subscription.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Subscription.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Subscription/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific subscription from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSubscriptionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate subscription by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Subscription.Reactivate"),
        PublicAPI,
        Route("/Payments/Subscription/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific subscription from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSubscriptionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete subscription.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Subscription.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Subscription/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific subscription from the system [Hard-Delete]")]
    public partial class DeleteSubscriptionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete subscription by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Subscription.Delete"),
        PublicAPI,
        Route("/Payments/Subscription/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific subscription from the system [Hard-Delete]")]
    public partial class DeleteSubscriptionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear subscription cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/Subscription/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all subscription calls.")]
    public class ClearSubscriptionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SubscriptionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSubscriptions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISubscriptionModel, SubscriptionModel, ISubscriptionSearchModel, SubscriptionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Subscriptions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSubscriptionsForConnect request)
        {
            return await Workflows.Subscriptions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionsDigest request)
        {
            return await Workflows.Subscriptions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSubscriptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Subscriptions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Subscriptions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSubscriptionByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSubscriptionByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Subscriptions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSubscriptionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSubscriptionExistsByID request)
        {
            return await Workflows.Subscriptions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSubscriptionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSubscriptionExistsByKey request)
        {
            return await Workflows.Subscriptions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSubscriptionExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSubscriptionExistsByName request)
        {
            return await Workflows.Subscriptions.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSubscription"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSubscription request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionDataAsync,
                    () => Workflows.Subscriptions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSubscription"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSubscription request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionDataAsync,
                    () => Workflows.Subscriptions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSubscription"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSubscription request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionDataAsync,
                    () => Workflows.Subscriptions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSubscriptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSubscriptionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionDataAsync,
                    () => Workflows.Subscriptions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSubscriptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSubscriptionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionDataAsync,
                    () => Workflows.Subscriptions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSubscriptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSubscriptionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionDataAsync,
                    () => Workflows.Subscriptions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSubscriptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSubscriptionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionDataAsync,
                    () => Workflows.Subscriptions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSubscriptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSubscriptionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionDataAsync,
                    () => Workflows.Subscriptions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSubscriptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSubscriptionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSubscriptionDataAsync,
                    () => Workflows.Subscriptions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSubscriptionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSubscriptionCache request)
        {
            await ClearCachedSubscriptionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSubscriptionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSubscriptions>(string.Empty),
                    UrnId.Create<GetSubscriptionByID>(string.Empty),
                    UrnId.Create<GetSubscriptionByKey>(string.Empty),
                    UrnId.Create<GetSubscriptionByName>(string.Empty),
                    UrnId.Create<CheckSubscriptionExistsByID>(string.Empty),
                    UrnId.Create<CheckSubscriptionExistsByKey>(string.Empty),
                    UrnId.Create<CheckSubscriptionExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SubscriptionService : SubscriptionServiceBase { }
}
