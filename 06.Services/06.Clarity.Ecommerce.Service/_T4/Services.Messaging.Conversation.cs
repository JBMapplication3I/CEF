// <autogenerated>
// <copyright file="ConversationService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the conversation service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of conversations.</summary>
    /// <seealso cref="ConversationSearchModel"/>
    /// <seealso cref="IReturn{ConversationPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/Conversations", "GET", Priority = 1,
            Summary = "Use to get a list of conversations")]
    public partial class GetConversations : ConversationSearchModel, IReturn<ConversationPagedResults> { }

    /// <summary>A ServiceStack Route to get conversations for connect.</summary>
    /// <seealso cref="ConversationSearchModel"/>
    /// <seealso cref="IReturn{List{ConversationModel}}"/>
    [Authenticate, RequiredPermission("Messaging.Conversation.View"),
        PublicAPI,
        Route("/Messaging/ConversationsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all conversations")]
    public partial class GetConversationsForConnect : ConversationSearchModel, IReturn<List<ConversationModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all conversations.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Messaging.Conversation.View"),
        PublicAPI,
        Route("/Messaging/ConversationsDigest", "GET",
            Summary = "Use to get a hash representing each conversations")]
    public partial class GetConversationsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get conversation.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ConversationModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/Conversation/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific conversation")]
    public partial class GetConversationByID : ImplementsIDBase, IReturn<ConversationModel> { }

    /// <summary>A ServiceStack Route to get conversation.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ConversationModel}"/>
    [PublicAPI,
        Route("/Messaging/Conversation/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific conversation by the custom key")]
    public partial class GetConversationByKey : ImplementsKeyBase, IReturn<ConversationModel> { }

    /// <summary>A ServiceStack Route to check conversation exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.Conversation.View"),
        PublicAPI,
        Route("/Messaging/Conversation/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckConversationExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check conversation exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.Conversation.View"),
        PublicAPI,
        Route("/Messaging/Conversation/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckConversationExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create conversation.</summary>
    /// <seealso cref="ConversationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.Conversation.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/Conversation/Create", "POST", Priority = 1,
            Summary = "Use to create a new conversation.")]
    public partial class CreateConversation : ConversationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert conversation.</summary>
    /// <seealso cref="ConversationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Messaging/Conversation/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing conversation (as needed).")]
    public partial class UpsertConversation : ConversationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update conversation.</summary>
    /// <seealso cref="ConversationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.Conversation.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/Conversation/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing conversation.")]
    public partial class UpdateConversation : ConversationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate conversation.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.Conversation.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/Conversation/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific conversation from the system [Soft-Delete]")]
    public partial class DeactivateConversationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate conversation by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.Conversation.Deactivate"),
        PublicAPI,
        Route("/Messaging/Conversation/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific conversation from the system [Soft-Delete]")]
    public partial class DeactivateConversationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate conversation.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.Conversation.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/Conversation/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific conversation from the system [Restore from Soft-Delete]")]
    public partial class ReactivateConversationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate conversation by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.Conversation.Reactivate"),
        PublicAPI,
        Route("/Messaging/Conversation/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific conversation from the system [Restore from Soft-Delete]")]
    public partial class ReactivateConversationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete conversation.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.Conversation.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/Conversation/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific conversation from the system [Hard-Delete]")]
    public partial class DeleteConversationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete conversation by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.Conversation.Delete"),
        PublicAPI,
        Route("/Messaging/Conversation/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific conversation from the system [Hard-Delete]")]
    public partial class DeleteConversationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear conversation cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/Conversation/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all conversation calls.")]
    public class ClearConversationCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ConversationServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetConversations"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetConversations request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IConversationModel, ConversationModel, IConversationSearchModel, ConversationPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Conversations)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetConversationsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetConversationsForConnect request)
        {
            return await Workflows.Conversations.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetConversationsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetConversationsDigest request)
        {
            return await Workflows.Conversations.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetConversationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetConversationByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Conversations, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetConversationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetConversationByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Conversations, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckConversationExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckConversationExistsByID request)
        {
            return await Workflows.Conversations.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckConversationExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckConversationExistsByKey request)
        {
            return await Workflows.Conversations.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertConversation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertConversation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedConversationDataAsync,
                    () => Workflows.Conversations.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateConversation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateConversation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedConversationDataAsync,
                    () => Workflows.Conversations.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateConversation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateConversation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedConversationDataAsync,
                    () => Workflows.Conversations.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateConversationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateConversationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedConversationDataAsync,
                    () => Workflows.Conversations.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateConversationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateConversationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedConversationDataAsync,
                    () => Workflows.Conversations.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateConversationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateConversationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedConversationDataAsync,
                    () => Workflows.Conversations.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateConversationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateConversationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedConversationDataAsync,
                    () => Workflows.Conversations.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteConversationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteConversationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedConversationDataAsync,
                    () => Workflows.Conversations.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteConversationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteConversationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedConversationDataAsync,
                    () => Workflows.Conversations.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearConversationCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearConversationCache request)
        {
            await ClearCachedConversationDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedConversationDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetConversations>(string.Empty),
                    UrnId.Create<GetConversationByID>(string.Empty),
                    UrnId.Create<GetConversationByKey>(string.Empty),
                    UrnId.Create<CheckConversationExistsByID>(string.Empty),
                    UrnId.Create<CheckConversationExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ConversationService : ConversationServiceBase { }
}
