// <autogenerated>
// <copyright file="DiscountAccountTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount account type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discount account types.</summary>
    /// <seealso cref="DiscountAccountTypeSearchModel"/>
    /// <seealso cref="IReturn{DiscountAccountTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountAccountTypes", "GET", Priority = 1,
            Summary = "Use to get a list of discount account types")]
    public partial class GetDiscountAccountTypes : DiscountAccountTypeSearchModel, IReturn<DiscountAccountTypePagedResults> { }

    /// <summary>A ServiceStack Route to get discount account types for connect.</summary>
    /// <seealso cref="DiscountAccountTypeSearchModel"/>
    /// <seealso cref="IReturn{List{DiscountAccountTypeModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccountType.View"),
        PublicAPI,
        Route("/Discounts/DiscountAccountTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discount account types")]
    public partial class GetDiscountAccountTypesForConnect : DiscountAccountTypeSearchModel, IReturn<List<DiscountAccountTypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discount account types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccountType.View"),
        PublicAPI,
        Route("/Discounts/DiscountAccountTypesDigest", "GET",
            Summary = "Use to get a hash representing each discount account types")]
    public partial class GetDiscountAccountTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount account type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountAccountTypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountAccountType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount account type")]
    public partial class GetDiscountAccountTypeByID : ImplementsIDBase, IReturn<DiscountAccountTypeModel> { }

    /// <summary>A ServiceStack Route to get discount account type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountAccountTypeModel}"/>
    [PublicAPI,
        Route("/Discounts/DiscountAccountType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount account type by the custom key")]
    public partial class GetDiscountAccountTypeByKey : ImplementsKeyBase, IReturn<DiscountAccountTypeModel> { }

    /// <summary>A ServiceStack Route to check discount account type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccountType.View"),
        PublicAPI,
        Route("/Discounts/DiscountAccountType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountAccountTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount account type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccountType.View"),
        PublicAPI,
        Route("/Discounts/DiscountAccountType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountAccountTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount account type.</summary>
    /// <seealso cref="DiscountAccountTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccountType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountAccountType/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount account type.")]
    public partial class CreateDiscountAccountType : DiscountAccountTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount account type.</summary>
    /// <seealso cref="DiscountAccountTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/DiscountAccountType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount account type (as needed).")]
    public partial class UpsertDiscountAccountType : DiscountAccountTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount account type.</summary>
    /// <seealso cref="DiscountAccountTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccountType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountAccountType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount account type.")]
    public partial class UpdateDiscountAccountType : DiscountAccountTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount account type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccountType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountAccountType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount account type from the system [Soft-Delete]")]
    public partial class DeactivateDiscountAccountTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount account type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccountType.Deactivate"),
        PublicAPI,
        Route("/Discounts/DiscountAccountType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount account type from the system [Soft-Delete]")]
    public partial class DeactivateDiscountAccountTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount account type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccountType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountAccountType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount account type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountAccountTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount account type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccountType.Reactivate"),
        PublicAPI,
        Route("/Discounts/DiscountAccountType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount account type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountAccountTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount account type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccountType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountAccountType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount account type from the system [Hard-Delete]")]
    public partial class DeleteDiscountAccountTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount account type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccountType.Delete"),
        PublicAPI,
        Route("/Discounts/DiscountAccountType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount account type from the system [Hard-Delete]")]
    public partial class DeleteDiscountAccountTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount account type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountAccountType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount account type calls.")]
    public class ClearDiscountAccountTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountAccountTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscountAccountTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountAccountTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountAccountTypeModel, DiscountAccountTypeModel, IDiscountAccountTypeSearchModel, DiscountAccountTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DiscountAccountTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountAccountTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountAccountTypesForConnect request)
        {
            return await Workflows.DiscountAccountTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountAccountTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountAccountTypesDigest request)
        {
            return await Workflows.DiscountAccountTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountAccountTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountAccountTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DiscountAccountTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountAccountTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountAccountTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DiscountAccountTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountAccountTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountAccountTypeExistsByID request)
        {
            return await Workflows.DiscountAccountTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountAccountTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountAccountTypeExistsByKey request)
        {
            return await Workflows.DiscountAccountTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscountAccountType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscountAccountType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountTypeDataAsync,
                    () => Workflows.DiscountAccountTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscountAccountType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscountAccountType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountTypeDataAsync,
                    () => Workflows.DiscountAccountTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscountAccountType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscountAccountType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountTypeDataAsync,
                    () => Workflows.DiscountAccountTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountAccountTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountAccountTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountTypeDataAsync,
                    () => Workflows.DiscountAccountTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountAccountTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountAccountTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountTypeDataAsync,
                    () => Workflows.DiscountAccountTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountAccountTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountAccountTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountTypeDataAsync,
                    () => Workflows.DiscountAccountTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountAccountTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountAccountTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountTypeDataAsync,
                    () => Workflows.DiscountAccountTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountAccountTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountAccountTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountTypeDataAsync,
                    () => Workflows.DiscountAccountTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountAccountTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountAccountTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountTypeDataAsync,
                    () => Workflows.DiscountAccountTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountAccountTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountAccountTypeCache request)
        {
            await ClearCachedDiscountAccountTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountAccountTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscountAccountTypes>(string.Empty),
                    UrnId.Create<GetDiscountAccountTypeByID>(string.Empty),
                    UrnId.Create<GetDiscountAccountTypeByKey>(string.Empty),
                    UrnId.Create<CheckDiscountAccountTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountAccountTypeExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountAccountTypeService : DiscountAccountTypeServiceBase { }
}
