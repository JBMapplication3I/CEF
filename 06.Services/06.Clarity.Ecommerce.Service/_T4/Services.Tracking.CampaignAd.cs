// <autogenerated>
// <copyright file="CampaignAdService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the campaign ad service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of campaign ads.</summary>
    /// <seealso cref="CampaignAdSearchModel"/>
    /// <seealso cref="IReturn{CampaignAdPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/CampaignAds", "GET", Priority = 1,
            Summary = "Use to get a list of campaign ads")]
    public partial class GetCampaignAds : CampaignAdSearchModel, IReturn<CampaignAdPagedResults> { }

    /// <summary>A ServiceStack Route to get campaign ads for connect.</summary>
    /// <seealso cref="CampaignAdSearchModel"/>
    /// <seealso cref="IReturn{List{CampaignAdModel}}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignAd.View"),
        PublicAPI,
        Route("/Tracking/CampaignAdsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all campaign ads")]
    public partial class GetCampaignAdsForConnect : CampaignAdSearchModel, IReturn<List<CampaignAdModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all campaign ads.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignAd.View"),
        PublicAPI,
        Route("/Tracking/CampaignAdsDigest", "GET",
            Summary = "Use to get a hash representing each campaign ads")]
    public partial class GetCampaignAdsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get campaign ad.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CampaignAdModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/CampaignAd/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific campaign ad")]
    public partial class GetCampaignAdByID : ImplementsIDBase, IReturn<CampaignAdModel> { }

    /// <summary>A ServiceStack Route to get campaign ad.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CampaignAdModel}"/>
    [PublicAPI,
        Route("/Tracking/CampaignAd/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific campaign ad by the custom key")]
    public partial class GetCampaignAdByKey : ImplementsKeyBase, IReturn<CampaignAdModel> { }

    /// <summary>A ServiceStack Route to check campaign ad exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignAd.View"),
        PublicAPI,
        Route("/Tracking/CampaignAd/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCampaignAdExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check campaign ad exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignAd.View"),
        PublicAPI,
        Route("/Tracking/CampaignAd/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCampaignAdExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create campaign ad.</summary>
    /// <seealso cref="CampaignAdModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignAd.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignAd/Create", "POST", Priority = 1,
            Summary = "Use to create a new campaign ad.")]
    public partial class CreateCampaignAd : CampaignAdModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert campaign ad.</summary>
    /// <seealso cref="CampaignAdModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tracking/CampaignAd/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing campaign ad (as needed).")]
    public partial class UpsertCampaignAd : CampaignAdModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update campaign ad.</summary>
    /// <seealso cref="CampaignAdModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignAd.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignAd/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing campaign ad.")]
    public partial class UpdateCampaignAd : CampaignAdModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate campaign ad.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignAd.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignAd/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific campaign ad from the system [Soft-Delete]")]
    public partial class DeactivateCampaignAdByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate campaign ad by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignAd.Deactivate"),
        PublicAPI,
        Route("/Tracking/CampaignAd/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific campaign ad from the system [Soft-Delete]")]
    public partial class DeactivateCampaignAdByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate campaign ad.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignAd.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignAd/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific campaign ad from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCampaignAdByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate campaign ad by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignAd.Reactivate"),
        PublicAPI,
        Route("/Tracking/CampaignAd/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific campaign ad from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCampaignAdByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete campaign ad.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignAd.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignAd/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific campaign ad from the system [Hard-Delete]")]
    public partial class DeleteCampaignAdByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete campaign ad by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignAd.Delete"),
        PublicAPI,
        Route("/Tracking/CampaignAd/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific campaign ad from the system [Hard-Delete]")]
    public partial class DeleteCampaignAdByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear campaign ad cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/CampaignAd/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all campaign ad calls.")]
    public class ClearCampaignAdCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CampaignAdServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCampaignAds"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignAds request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICampaignAdModel, CampaignAdModel, ICampaignAdSearchModel, CampaignAdPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CampaignAds)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignAdsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCampaignAdsForConnect request)
        {
            return await Workflows.CampaignAds.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignAdsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignAdsDigest request)
        {
            return await Workflows.CampaignAds.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCampaignAdByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignAdByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CampaignAds, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignAdByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignAdByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CampaignAds, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCampaignAdExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCampaignAdExistsByID request)
        {
            return await Workflows.CampaignAds.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCampaignAdExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCampaignAdExistsByKey request)
        {
            return await Workflows.CampaignAds.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCampaignAd"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCampaignAd request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignAdDataAsync,
                    () => Workflows.CampaignAds.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCampaignAd"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCampaignAd request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignAdDataAsync,
                    () => Workflows.CampaignAds.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCampaignAd"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCampaignAd request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignAdDataAsync,
                    () => Workflows.CampaignAds.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCampaignAdByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCampaignAdByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignAdDataAsync,
                    () => Workflows.CampaignAds.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCampaignAdByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCampaignAdByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignAdDataAsync,
                    () => Workflows.CampaignAds.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCampaignAdByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCampaignAdByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignAdDataAsync,
                    () => Workflows.CampaignAds.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCampaignAdByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCampaignAdByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignAdDataAsync,
                    () => Workflows.CampaignAds.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCampaignAdByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCampaignAdByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignAdDataAsync,
                    () => Workflows.CampaignAds.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCampaignAdByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCampaignAdByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignAdDataAsync,
                    () => Workflows.CampaignAds.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCampaignAdCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCampaignAdCache request)
        {
            await ClearCachedCampaignAdDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCampaignAdDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCampaignAds>(string.Empty),
                    UrnId.Create<GetCampaignAdByID>(string.Empty),
                    UrnId.Create<GetCampaignAdByKey>(string.Empty),
                    UrnId.Create<CheckCampaignAdExistsByID>(string.Empty),
                    UrnId.Create<CheckCampaignAdExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CampaignAdService : CampaignAdServiceBase { }
}
