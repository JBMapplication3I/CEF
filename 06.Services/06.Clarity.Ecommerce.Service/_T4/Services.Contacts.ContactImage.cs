// <autogenerated>
// <copyright file="ContactImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the contact image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of contact images.</summary>
    /// <seealso cref="ContactImageSearchModel"/>
    /// <seealso cref="IReturn{ContactImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ContactImages", "GET", Priority = 1,
            Summary = "Use to get a list of contact images")]
    public partial class GetContactImages : ContactImageSearchModel, IReturn<ContactImagePagedResults> { }

    /// <summary>A ServiceStack Route to get contact images for connect.</summary>
    /// <seealso cref="ContactImageSearchModel"/>
    /// <seealso cref="IReturn{List{ContactImageModel}}"/>
    [Authenticate, RequiredPermission("Contacts.ContactImage.View"),
        PublicAPI,
        Route("/Contacts/ContactImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all contact images")]
    public partial class GetContactImagesForConnect : ContactImageSearchModel, IReturn<List<ContactImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all contact images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Contacts.ContactImage.View"),
        PublicAPI,
        Route("/Contacts/ContactImagesDigest", "GET",
            Summary = "Use to get a hash representing each contact images")]
    public partial class GetContactImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get contact image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ContactImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ContactImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific contact image")]
    public partial class GetContactImageByID : ImplementsIDBase, IReturn<ContactImageModel> { }

    /// <summary>A ServiceStack Route to get contact image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ContactImageModel}"/>
    [PublicAPI,
        Route("/Contacts/ContactImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific contact image by the custom key")]
    public partial class GetContactImageByKey : ImplementsKeyBase, IReturn<ContactImageModel> { }

    /// <summary>A ServiceStack Route to get contact image.</summary>
    /// <seealso cref="IReturn{ContactImageModel}"/>
    [PublicAPI,
        Route("/Contacts/ContactImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific contact image by the name")]
    public partial class GetContactImageByName : ImplementsNameBase, IReturn<ContactImageModel> { }

    /// <summary>A ServiceStack Route to check contact image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ContactImage.View"),
        PublicAPI,
        Route("/Contacts/ContactImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckContactImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check contact image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ContactImage.View"),
        PublicAPI,
        Route("/Contacts/ContactImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckContactImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check contact image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ContactImage.View"),
        PublicAPI,
        Route("/Contacts/ContactImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckContactImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create contact image.</summary>
    /// <seealso cref="ContactImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.ContactImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ContactImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new contact image.")]
    public partial class CreateContactImage : ContactImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert contact image.</summary>
    /// <seealso cref="ContactImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Contacts/ContactImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing contact image (as needed).")]
    public partial class UpsertContactImage : ContactImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update contact image.</summary>
    /// <seealso cref="ContactImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.ContactImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ContactImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing contact image.")]
    public partial class UpdateContactImage : ContactImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate contact image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ContactImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ContactImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific contact image from the system [Soft-Delete]")]
    public partial class DeactivateContactImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate contact image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ContactImage.Deactivate"),
        PublicAPI,
        Route("/Contacts/ContactImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific contact image from the system [Soft-Delete]")]
    public partial class DeactivateContactImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate contact image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ContactImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ContactImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific contact image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateContactImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate contact image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ContactImage.Reactivate"),
        PublicAPI,
        Route("/Contacts/ContactImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific contact image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateContactImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete contact image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ContactImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ContactImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific contact image from the system [Hard-Delete]")]
    public partial class DeleteContactImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete contact image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ContactImage.Delete"),
        PublicAPI,
        Route("/Contacts/ContactImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific contact image from the system [Hard-Delete]")]
    public partial class DeleteContactImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear contact image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ContactImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all contact image calls.")]
    public class ClearContactImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ContactImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetContactImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContactImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IContactImageModel, ContactImageModel, IContactImageSearchModel, ContactImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ContactImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetContactImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetContactImagesForConnect request)
        {
            return await Workflows.ContactImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetContactImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContactImagesDigest request)
        {
            return await Workflows.ContactImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetContactImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContactImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ContactImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetContactImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContactImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ContactImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetContactImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContactImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ContactImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckContactImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckContactImageExistsByID request)
        {
            return await Workflows.ContactImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckContactImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckContactImageExistsByKey request)
        {
            return await Workflows.ContactImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckContactImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckContactImageExistsByName request)
        {
            return await Workflows.ContactImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertContactImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertContactImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactImageDataAsync,
                    () => Workflows.ContactImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateContactImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateContactImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactImageDataAsync,
                    () => Workflows.ContactImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateContactImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateContactImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactImageDataAsync,
                    () => Workflows.ContactImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateContactImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateContactImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactImageDataAsync,
                    () => Workflows.ContactImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateContactImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateContactImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactImageDataAsync,
                    () => Workflows.ContactImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateContactImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateContactImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactImageDataAsync,
                    () => Workflows.ContactImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateContactImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateContactImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactImageDataAsync,
                    () => Workflows.ContactImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteContactImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteContactImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactImageDataAsync,
                    () => Workflows.ContactImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteContactImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteContactImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactImageDataAsync,
                    () => Workflows.ContactImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearContactImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearContactImageCache request)
        {
            await ClearCachedContactImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedContactImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetContactImages>(string.Empty),
                    UrnId.Create<GetContactImageByID>(string.Empty),
                    UrnId.Create<GetContactImageByKey>(string.Empty),
                    UrnId.Create<GetContactImageByName>(string.Empty),
                    UrnId.Create<CheckContactImageExistsByID>(string.Empty),
                    UrnId.Create<CheckContactImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckContactImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ContactImageService : ContactImageServiceBase { }
}
