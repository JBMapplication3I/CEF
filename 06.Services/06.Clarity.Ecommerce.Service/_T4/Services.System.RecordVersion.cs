// <autogenerated>
// <copyright file="RecordVersionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the record version service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of record versions.</summary>
    /// <seealso cref="RecordVersionSearchModel"/>
    /// <seealso cref="IReturn{RecordVersionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/RecordVersions", "GET", Priority = 1,
            Summary = "Use to get a list of record versions")]
    public partial class GetRecordVersions : RecordVersionSearchModel, IReturn<RecordVersionPagedResults> { }

    /// <summary>A ServiceStack Route to get record versions for connect.</summary>
    /// <seealso cref="RecordVersionSearchModel"/>
    /// <seealso cref="IReturn{List{RecordVersionModel}}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersion.View"),
        PublicAPI,
        Route("/Structure/RecordVersionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all record versions")]
    public partial class GetRecordVersionsForConnect : RecordVersionSearchModel, IReturn<List<RecordVersionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all record versions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersion.View"),
        PublicAPI,
        Route("/Structure/RecordVersionsDigest", "GET",
            Summary = "Use to get a hash representing each record versions")]
    public partial class GetRecordVersionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get record version.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{RecordVersionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/RecordVersion/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific record version")]
    public partial class GetRecordVersionByID : ImplementsIDBase, IReturn<RecordVersionModel> { }

    /// <summary>A ServiceStack Route to get record version.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{RecordVersionModel}"/>
    [PublicAPI,
        Route("/Structure/RecordVersion/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific record version by the custom key")]
    public partial class GetRecordVersionByKey : ImplementsKeyBase, IReturn<RecordVersionModel> { }

    /// <summary>A ServiceStack Route to get record version.</summary>
    /// <seealso cref="IReturn{RecordVersionModel}"/>
    [PublicAPI,
        Route("/Structure/RecordVersion/Name", "GET", Priority = 1,
            Summary = "Use to get a specific record version by the name")]
    public partial class GetRecordVersionByName : ImplementsNameBase, IReturn<RecordVersionModel> { }

    /// <summary>A ServiceStack Route to check record version exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersion.View"),
        PublicAPI,
        Route("/Structure/RecordVersion/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckRecordVersionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check record version exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersion.View"),
        PublicAPI,
        Route("/Structure/RecordVersion/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckRecordVersionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check record version exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersion.View"),
        PublicAPI,
        Route("/Structure/RecordVersion/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckRecordVersionExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create record version.</summary>
    /// <seealso cref="RecordVersionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersion.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/RecordVersion/Create", "POST", Priority = 1,
            Summary = "Use to create a new record version.")]
    public partial class CreateRecordVersion : RecordVersionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert record version.</summary>
    /// <seealso cref="RecordVersionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Structure/RecordVersion/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing record version (as needed).")]
    public partial class UpsertRecordVersion : RecordVersionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update record version.</summary>
    /// <seealso cref="RecordVersionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersion.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/RecordVersion/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing record version.")]
    public partial class UpdateRecordVersion : RecordVersionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate record version.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersion.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/RecordVersion/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific record version from the system [Soft-Delete]")]
    public partial class DeactivateRecordVersionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate record version by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersion.Deactivate"),
        PublicAPI,
        Route("/Structure/RecordVersion/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific record version from the system [Soft-Delete]")]
    public partial class DeactivateRecordVersionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate record version.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersion.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/RecordVersion/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific record version from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRecordVersionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate record version by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersion.Reactivate"),
        PublicAPI,
        Route("/Structure/RecordVersion/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific record version from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRecordVersionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete record version.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersion.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/RecordVersion/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific record version from the system [Hard-Delete]")]
    public partial class DeleteRecordVersionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete record version by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersion.Delete"),
        PublicAPI,
        Route("/Structure/RecordVersion/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific record version from the system [Hard-Delete]")]
    public partial class DeleteRecordVersionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear record version cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/RecordVersion/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all record version calls.")]
    public class ClearRecordVersionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class RecordVersionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetRecordVersions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRecordVersions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IRecordVersionModel, RecordVersionModel, IRecordVersionSearchModel, RecordVersionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.RecordVersions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRecordVersionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetRecordVersionsForConnect request)
        {
            return await Workflows.RecordVersions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRecordVersionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRecordVersionsDigest request)
        {
            return await Workflows.RecordVersions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetRecordVersionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRecordVersionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.RecordVersions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRecordVersionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRecordVersionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.RecordVersions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRecordVersionByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRecordVersionByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.RecordVersions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckRecordVersionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRecordVersionExistsByID request)
        {
            return await Workflows.RecordVersions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRecordVersionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRecordVersionExistsByKey request)
        {
            return await Workflows.RecordVersions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRecordVersionExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRecordVersionExistsByName request)
        {
            return await Workflows.RecordVersions.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertRecordVersion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertRecordVersion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionDataAsync,
                    () => Workflows.RecordVersions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateRecordVersion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateRecordVersion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionDataAsync,
                    () => Workflows.RecordVersions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateRecordVersion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateRecordVersion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionDataAsync,
                    () => Workflows.RecordVersions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateRecordVersionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRecordVersionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionDataAsync,
                    () => Workflows.RecordVersions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateRecordVersionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRecordVersionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionDataAsync,
                    () => Workflows.RecordVersions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateRecordVersionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRecordVersionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionDataAsync,
                    () => Workflows.RecordVersions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateRecordVersionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRecordVersionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionDataAsync,
                    () => Workflows.RecordVersions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteRecordVersionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRecordVersionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionDataAsync,
                    () => Workflows.RecordVersions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteRecordVersionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRecordVersionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionDataAsync,
                    () => Workflows.RecordVersions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearRecordVersionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearRecordVersionCache request)
        {
            await ClearCachedRecordVersionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedRecordVersionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetRecordVersions>(string.Empty),
                    UrnId.Create<GetRecordVersionByID>(string.Empty),
                    UrnId.Create<GetRecordVersionByKey>(string.Empty),
                    UrnId.Create<GetRecordVersionByName>(string.Empty),
                    UrnId.Create<CheckRecordVersionExistsByID>(string.Empty),
                    UrnId.Create<CheckRecordVersionExistsByKey>(string.Empty),
                    UrnId.Create<CheckRecordVersionExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class RecordVersionService : RecordVersionServiceBase { }
}
