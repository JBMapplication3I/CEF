// <autogenerated>
// <copyright file="StoreRegionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store region service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store regions.</summary>
    /// <seealso cref="StoreRegionSearchModel"/>
    /// <seealso cref="IReturn{StoreRegionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreRegions", "GET", Priority = 1,
            Summary = "Use to get a list of store regions")]
    public partial class GetStoreRegions : StoreRegionSearchModel, IReturn<StoreRegionPagedResults> { }

    /// <summary>A ServiceStack Route to get store regions for connect.</summary>
    /// <seealso cref="StoreRegionSearchModel"/>
    /// <seealso cref="IReturn{List{StoreRegionModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreRegion.View"),
        PublicAPI,
        Route("/Stores/StoreRegionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store regions")]
    public partial class GetStoreRegionsForConnect : StoreRegionSearchModel, IReturn<List<StoreRegionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store regions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreRegion.View"),
        PublicAPI,
        Route("/Stores/StoreRegionsDigest", "GET",
            Summary = "Use to get a hash representing each store regions")]
    public partial class GetStoreRegionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreRegionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreRegion/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store region")]
    public partial class GetStoreRegionByID : ImplementsIDBase, IReturn<StoreRegionModel> { }

    /// <summary>A ServiceStack Route to get store region.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreRegionModel}"/>
    [PublicAPI,
        Route("/Stores/StoreRegion/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store region by the custom key")]
    public partial class GetStoreRegionByKey : ImplementsKeyBase, IReturn<StoreRegionModel> { }

    /// <summary>A ServiceStack Route to check store region exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreRegion.View"),
        PublicAPI,
        Route("/Stores/StoreRegion/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreRegionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store region exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreRegion.View"),
        PublicAPI,
        Route("/Stores/StoreRegion/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreRegionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store region.</summary>
    /// <seealso cref="StoreRegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreRegion.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreRegion/Create", "POST", Priority = 1,
            Summary = "Use to create a new store region.")]
    public partial class CreateStoreRegion : StoreRegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store region.</summary>
    /// <seealso cref="StoreRegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreRegion/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store region (as needed).")]
    public partial class UpsertStoreRegion : StoreRegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store region.</summary>
    /// <seealso cref="StoreRegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreRegion.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreRegion/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store region.")]
    public partial class UpdateStoreRegion : StoreRegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreRegion.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreRegion/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store region from the system [Soft-Delete]")]
    public partial class DeactivateStoreRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreRegion.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreRegion/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store region from the system [Soft-Delete]")]
    public partial class DeactivateStoreRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreRegion.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreRegion/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store region from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreRegion.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreRegion/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store region from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreRegion.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreRegion/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store region from the system [Hard-Delete]")]
    public partial class DeleteStoreRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreRegion.Delete"),
        PublicAPI,
        Route("/Stores/StoreRegion/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store region from the system [Hard-Delete]")]
    public partial class DeleteStoreRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store region cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreRegion/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store region calls.")]
    public class ClearStoreRegionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreRegionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreRegions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreRegions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreRegionModel, StoreRegionModel, IStoreRegionSearchModel, StoreRegionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreRegions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreRegionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreRegionsForConnect request)
        {
            return await Workflows.StoreRegions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreRegionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreRegionsDigest request)
        {
            return await Workflows.StoreRegions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreRegionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreRegions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreRegionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreRegions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreRegionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreRegionExistsByID request)
        {
            return await Workflows.StoreRegions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreRegionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreRegionExistsByKey request)
        {
            return await Workflows.StoreRegions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreRegionDataAsync,
                    () => Workflows.StoreRegions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreRegionDataAsync,
                    () => Workflows.StoreRegions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreRegionDataAsync,
                    () => Workflows.StoreRegions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreRegionDataAsync,
                    () => Workflows.StoreRegions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreRegionDataAsync,
                    () => Workflows.StoreRegions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreRegionDataAsync,
                    () => Workflows.StoreRegions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreRegionDataAsync,
                    () => Workflows.StoreRegions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreRegionDataAsync,
                    () => Workflows.StoreRegions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreRegionDataAsync,
                    () => Workflows.StoreRegions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreRegionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreRegionCache request)
        {
            await ClearCachedStoreRegionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreRegionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreRegions>(string.Empty),
                    UrnId.Create<GetStoreRegionByID>(string.Empty),
                    UrnId.Create<GetStoreRegionByKey>(string.Empty),
                    UrnId.Create<CheckStoreRegionExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreRegionExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreRegionService : StoreRegionServiceBase { }
}
