// <autogenerated>
// <copyright file="AdBrandService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the ad brand service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of ad brands.</summary>
    /// <seealso cref="AdBrandSearchModel"/>
    /// <seealso cref="IReturn{AdBrandPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdBrands", "GET", Priority = 1,
            Summary = "Use to get a list of ad brands")]
    public partial class GetAdBrands : AdBrandSearchModel, IReturn<AdBrandPagedResults> { }

    /// <summary>A ServiceStack Route to get ad brands for connect.</summary>
    /// <seealso cref="AdBrandSearchModel"/>
    /// <seealso cref="IReturn{List{AdBrandModel}}"/>
    [Authenticate, RequiredPermission("Advertising.AdBrand.View"),
        PublicAPI,
        Route("/Advertising/AdBrandsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all ad brands")]
    public partial class GetAdBrandsForConnect : AdBrandSearchModel, IReturn<List<AdBrandModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all ad brands.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Advertising.AdBrand.View"),
        PublicAPI,
        Route("/Advertising/AdBrandsDigest", "GET",
            Summary = "Use to get a hash representing each ad brands")]
    public partial class GetAdBrandsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get ad brand.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AdBrandModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdBrand/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific ad brand")]
    public partial class GetAdBrandByID : ImplementsIDBase, IReturn<AdBrandModel> { }

    /// <summary>A ServiceStack Route to get ad brand.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AdBrandModel}"/>
    [PublicAPI,
        Route("/Advertising/AdBrand/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific ad brand by the custom key")]
    public partial class GetAdBrandByKey : ImplementsKeyBase, IReturn<AdBrandModel> { }

    /// <summary>A ServiceStack Route to check ad brand exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdBrand.View"),
        PublicAPI,
        Route("/Advertising/AdBrand/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAdBrandExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ad brand exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdBrand.View"),
        PublicAPI,
        Route("/Advertising/AdBrand/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAdBrandExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create ad brand.</summary>
    /// <seealso cref="AdBrandModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.AdBrand.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdBrand/Create", "POST", Priority = 1,
            Summary = "Use to create a new ad brand.")]
    public partial class CreateAdBrand : AdBrandModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert ad brand.</summary>
    /// <seealso cref="AdBrandModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Advertising/AdBrand/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing ad brand (as needed).")]
    public partial class UpsertAdBrand : AdBrandModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update ad brand.</summary>
    /// <seealso cref="AdBrandModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.AdBrand.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdBrand/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing ad brand.")]
    public partial class UpdateAdBrand : AdBrandModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate ad brand.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdBrand.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdBrand/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ad brand from the system [Soft-Delete]")]
    public partial class DeactivateAdBrandByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate ad brand by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdBrand.Deactivate"),
        PublicAPI,
        Route("/Advertising/AdBrand/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ad brand from the system [Soft-Delete]")]
    public partial class DeactivateAdBrandByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ad brand.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdBrand.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdBrand/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ad brand from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAdBrandByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ad brand by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdBrand.Reactivate"),
        PublicAPI,
        Route("/Advertising/AdBrand/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ad brand from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAdBrandByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ad brand.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdBrand.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdBrand/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific ad brand from the system [Hard-Delete]")]
    public partial class DeleteAdBrandByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ad brand by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdBrand.Delete"),
        PublicAPI,
        Route("/Advertising/AdBrand/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific ad brand from the system [Hard-Delete]")]
    public partial class DeleteAdBrandByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear ad brand cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdBrand/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all ad brand calls.")]
    public class ClearAdBrandCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AdBrandServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAdBrands"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdBrands request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAdBrandModel, AdBrandModel, IAdBrandSearchModel, AdBrandPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AdBrands)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdBrandsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAdBrandsForConnect request)
        {
            return await Workflows.AdBrands.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdBrandsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdBrandsDigest request)
        {
            return await Workflows.AdBrands.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAdBrandByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdBrandByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AdBrands, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdBrandByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdBrandByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AdBrands, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAdBrandExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdBrandExistsByID request)
        {
            return await Workflows.AdBrands.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAdBrandExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdBrandExistsByKey request)
        {
            return await Workflows.AdBrands.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAdBrand"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAdBrand request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdBrandDataAsync,
                    () => Workflows.AdBrands.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAdBrand"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAdBrand request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdBrandDataAsync,
                    () => Workflows.AdBrands.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAdBrand"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAdBrand request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdBrandDataAsync,
                    () => Workflows.AdBrands.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAdBrandByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAdBrandByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdBrandDataAsync,
                    () => Workflows.AdBrands.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAdBrandByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAdBrandByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdBrandDataAsync,
                    () => Workflows.AdBrands.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAdBrandByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAdBrandByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdBrandDataAsync,
                    () => Workflows.AdBrands.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAdBrandByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAdBrandByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdBrandDataAsync,
                    () => Workflows.AdBrands.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAdBrandByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAdBrandByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdBrandDataAsync,
                    () => Workflows.AdBrands.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAdBrandByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAdBrandByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdBrandDataAsync,
                    () => Workflows.AdBrands.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAdBrandCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAdBrandCache request)
        {
            await ClearCachedAdBrandDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAdBrandDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAdBrands>(string.Empty),
                    UrnId.Create<GetAdBrandByID>(string.Empty),
                    UrnId.Create<GetAdBrandByKey>(string.Empty),
                    UrnId.Create<CheckAdBrandExistsByID>(string.Empty),
                    UrnId.Create<CheckAdBrandExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AdBrandService : AdBrandServiceBase { }
}
