// <autogenerated>
// <copyright file="AdZoneAccessService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the ad zone access service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of ad zone accesses.</summary>
    /// <seealso cref="AdZoneAccessSearchModel"/>
    /// <seealso cref="IReturn{AdZoneAccessPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdZoneAccesses", "GET", Priority = 1,
            Summary = "Use to get a list of ad zone accesses")]
    public partial class GetAdZoneAccesses : AdZoneAccessSearchModel, IReturn<AdZoneAccessPagedResults> { }

    /// <summary>A ServiceStack Route to get ad zone accesses for connect.</summary>
    /// <seealso cref="AdZoneAccessSearchModel"/>
    /// <seealso cref="IReturn{List{AdZoneAccessModel}}"/>
    [Authenticate, RequiredPermission("Advertising.AdZoneAccess.View"),
        PublicAPI,
        Route("/Advertising/AdZoneAccessesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all ad zone accesses")]
    public partial class GetAdZoneAccessesForConnect : AdZoneAccessSearchModel, IReturn<List<AdZoneAccessModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all ad zone accesses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Advertising.AdZoneAccess.View"),
        PublicAPI,
        Route("/Advertising/AdZoneAccessesDigest", "GET",
            Summary = "Use to get a hash representing each ad zone accesses")]
    public partial class GetAdZoneAccessesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get ad zone access.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AdZoneAccessModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdZoneAccess/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific ad zone access")]
    public partial class GetAdZoneAccessByID : ImplementsIDBase, IReturn<AdZoneAccessModel> { }

    /// <summary>A ServiceStack Route to get ad zone access.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AdZoneAccessModel}"/>
    [PublicAPI,
        Route("/Advertising/AdZoneAccess/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific ad zone access by the custom key")]
    public partial class GetAdZoneAccessByKey : ImplementsKeyBase, IReturn<AdZoneAccessModel> { }

    /// <summary>A ServiceStack Route to get ad zone access.</summary>
    /// <seealso cref="IReturn{AdZoneAccessModel}"/>
    [PublicAPI,
        Route("/Advertising/AdZoneAccess/Name", "GET", Priority = 1,
            Summary = "Use to get a specific ad zone access by the name")]
    public partial class GetAdZoneAccessByName : ImplementsNameBase, IReturn<AdZoneAccessModel> { }

    /// <summary>A ServiceStack Route to check ad zone access exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdZoneAccess.View"),
        PublicAPI,
        Route("/Advertising/AdZoneAccess/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAdZoneAccessExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ad zone access exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdZoneAccess.View"),
        PublicAPI,
        Route("/Advertising/AdZoneAccess/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAdZoneAccessExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ad zone access exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdZoneAccess.View"),
        PublicAPI,
        Route("/Advertising/AdZoneAccess/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAdZoneAccessExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create ad zone access.</summary>
    /// <seealso cref="AdZoneAccessModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.AdZoneAccess.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdZoneAccess/Create", "POST", Priority = 1,
            Summary = "Use to create a new ad zone access.")]
    public partial class CreateAdZoneAccess : AdZoneAccessModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert ad zone access.</summary>
    /// <seealso cref="AdZoneAccessModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Advertising/AdZoneAccess/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing ad zone access (as needed).")]
    public partial class UpsertAdZoneAccess : AdZoneAccessModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update ad zone access.</summary>
    /// <seealso cref="AdZoneAccessModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.AdZoneAccess.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdZoneAccess/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing ad zone access.")]
    public partial class UpdateAdZoneAccess : AdZoneAccessModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate ad zone access.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdZoneAccess.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdZoneAccess/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ad zone access from the system [Soft-Delete]")]
    public partial class DeactivateAdZoneAccessByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate ad zone access by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdZoneAccess.Deactivate"),
        PublicAPI,
        Route("/Advertising/AdZoneAccess/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ad zone access from the system [Soft-Delete]")]
    public partial class DeactivateAdZoneAccessByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ad zone access.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdZoneAccess.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdZoneAccess/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ad zone access from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAdZoneAccessByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ad zone access by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdZoneAccess.Reactivate"),
        PublicAPI,
        Route("/Advertising/AdZoneAccess/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ad zone access from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAdZoneAccessByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ad zone access.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdZoneAccess.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdZoneAccess/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific ad zone access from the system [Hard-Delete]")]
    public partial class DeleteAdZoneAccessByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ad zone access by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdZoneAccess.Delete"),
        PublicAPI,
        Route("/Advertising/AdZoneAccess/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific ad zone access from the system [Hard-Delete]")]
    public partial class DeleteAdZoneAccessByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear ad zone access cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdZoneAccess/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all ad zone access calls.")]
    public class ClearAdZoneAccessCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AdZoneAccessServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAdZoneAccesses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdZoneAccesses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAdZoneAccessModel, AdZoneAccessModel, IAdZoneAccessSearchModel, AdZoneAccessPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AdZoneAccesses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdZoneAccessesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAdZoneAccessesForConnect request)
        {
            return await Workflows.AdZoneAccesses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdZoneAccessesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdZoneAccessesDigest request)
        {
            return await Workflows.AdZoneAccesses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAdZoneAccessByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdZoneAccessByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AdZoneAccesses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdZoneAccessByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdZoneAccessByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AdZoneAccesses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdZoneAccessByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdZoneAccessByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.AdZoneAccesses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAdZoneAccessExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdZoneAccessExistsByID request)
        {
            return await Workflows.AdZoneAccesses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAdZoneAccessExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdZoneAccessExistsByKey request)
        {
            return await Workflows.AdZoneAccesses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAdZoneAccessExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdZoneAccessExistsByName request)
        {
            return await Workflows.AdZoneAccesses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAdZoneAccess"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAdZoneAccess request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneAccessDataAsync,
                    () => Workflows.AdZoneAccesses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAdZoneAccess"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAdZoneAccess request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneAccessDataAsync,
                    () => Workflows.AdZoneAccesses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAdZoneAccess"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAdZoneAccess request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneAccessDataAsync,
                    () => Workflows.AdZoneAccesses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAdZoneAccessByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAdZoneAccessByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneAccessDataAsync,
                    () => Workflows.AdZoneAccesses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAdZoneAccessByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAdZoneAccessByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneAccessDataAsync,
                    () => Workflows.AdZoneAccesses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAdZoneAccessByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAdZoneAccessByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneAccessDataAsync,
                    () => Workflows.AdZoneAccesses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAdZoneAccessByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAdZoneAccessByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneAccessDataAsync,
                    () => Workflows.AdZoneAccesses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAdZoneAccessByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAdZoneAccessByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneAccessDataAsync,
                    () => Workflows.AdZoneAccesses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAdZoneAccessByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAdZoneAccessByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneAccessDataAsync,
                    () => Workflows.AdZoneAccesses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAdZoneAccessCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAdZoneAccessCache request)
        {
            await ClearCachedAdZoneAccessDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAdZoneAccessDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAdZoneAccesses>(string.Empty),
                    UrnId.Create<GetAdZoneAccessByID>(string.Empty),
                    UrnId.Create<GetAdZoneAccessByKey>(string.Empty),
                    UrnId.Create<GetAdZoneAccessByName>(string.Empty),
                    UrnId.Create<CheckAdZoneAccessExistsByID>(string.Empty),
                    UrnId.Create<CheckAdZoneAccessExistsByKey>(string.Empty),
                    UrnId.Create<CheckAdZoneAccessExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AdZoneAccessService : AdZoneAccessServiceBase { }
}
