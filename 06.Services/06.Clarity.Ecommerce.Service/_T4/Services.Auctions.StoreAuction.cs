// <autogenerated>
// <copyright file="StoreAuctionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store auction service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store auctions.</summary>
    /// <seealso cref="StoreAuctionSearchModel"/>
    /// <seealso cref="IReturn{StoreAuctionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/StoreAuctions", "GET", Priority = 1,
            Summary = "Use to get a list of store auctions")]
    public partial class GetStoreAuctions : StoreAuctionSearchModel, IReturn<StoreAuctionPagedResults> { }

    /// <summary>A ServiceStack Route to get store auctions for connect.</summary>
    /// <seealso cref="StoreAuctionSearchModel"/>
    /// <seealso cref="IReturn{List{StoreAuctionModel}}"/>
    [Authenticate, RequiredPermission("Auctions.StoreAuction.View"),
        PublicAPI,
        Route("/Auctions/StoreAuctionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store auctions")]
    public partial class GetStoreAuctionsForConnect : StoreAuctionSearchModel, IReturn<List<StoreAuctionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store auctions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Auctions.StoreAuction.View"),
        PublicAPI,
        Route("/Auctions/StoreAuctionsDigest", "GET",
            Summary = "Use to get a hash representing each store auctions")]
    public partial class GetStoreAuctionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreAuctionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/StoreAuction/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store auction")]
    public partial class GetStoreAuctionByID : ImplementsIDBase, IReturn<StoreAuctionModel> { }

    /// <summary>A ServiceStack Route to get store auction.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreAuctionModel}"/>
    [PublicAPI,
        Route("/Auctions/StoreAuction/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store auction by the custom key")]
    public partial class GetStoreAuctionByKey : ImplementsKeyBase, IReturn<StoreAuctionModel> { }

    /// <summary>A ServiceStack Route to check store auction exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.StoreAuction.View"),
        PublicAPI,
        Route("/Auctions/StoreAuction/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreAuctionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store auction exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.StoreAuction.View"),
        PublicAPI,
        Route("/Auctions/StoreAuction/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreAuctionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store auction.</summary>
    /// <seealso cref="StoreAuctionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.StoreAuction.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/StoreAuction/Create", "POST", Priority = 1,
            Summary = "Use to create a new store auction.")]
    public partial class CreateStoreAuction : StoreAuctionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store auction.</summary>
    /// <seealso cref="StoreAuctionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Auctions/StoreAuction/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store auction (as needed).")]
    public partial class UpsertStoreAuction : StoreAuctionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store auction.</summary>
    /// <seealso cref="StoreAuctionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.StoreAuction.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/StoreAuction/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store auction.")]
    public partial class UpdateStoreAuction : StoreAuctionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.StoreAuction.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/StoreAuction/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store auction from the system [Soft-Delete]")]
    public partial class DeactivateStoreAuctionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store auction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.StoreAuction.Deactivate"),
        PublicAPI,
        Route("/Auctions/StoreAuction/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store auction from the system [Soft-Delete]")]
    public partial class DeactivateStoreAuctionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.StoreAuction.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/StoreAuction/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store auction from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreAuctionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store auction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.StoreAuction.Reactivate"),
        PublicAPI,
        Route("/Auctions/StoreAuction/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store auction from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreAuctionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.StoreAuction.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/StoreAuction/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store auction from the system [Hard-Delete]")]
    public partial class DeleteStoreAuctionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store auction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.StoreAuction.Delete"),
        PublicAPI,
        Route("/Auctions/StoreAuction/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store auction from the system [Hard-Delete]")]
    public partial class DeleteStoreAuctionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store auction cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/StoreAuction/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store auction calls.")]
    public class ClearStoreAuctionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreAuctionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreAuctions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreAuctions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreAuctionModel, StoreAuctionModel, IStoreAuctionSearchModel, StoreAuctionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreAuctions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreAuctionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreAuctionsForConnect request)
        {
            return await Workflows.StoreAuctions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreAuctionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreAuctionsDigest request)
        {
            return await Workflows.StoreAuctions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreAuctionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreAuctions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreAuctionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreAuctions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreAuctionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreAuctionExistsByID request)
        {
            return await Workflows.StoreAuctions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreAuctionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreAuctionExistsByKey request)
        {
            return await Workflows.StoreAuctions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreAuction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreAuction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreAuctionDataAsync,
                    () => Workflows.StoreAuctions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreAuction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreAuction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreAuctionDataAsync,
                    () => Workflows.StoreAuctions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreAuction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreAuction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreAuctionDataAsync,
                    () => Workflows.StoreAuctions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreAuctionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreAuctionDataAsync,
                    () => Workflows.StoreAuctions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreAuctionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreAuctionDataAsync,
                    () => Workflows.StoreAuctions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreAuctionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreAuctionDataAsync,
                    () => Workflows.StoreAuctions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreAuctionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreAuctionDataAsync,
                    () => Workflows.StoreAuctions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreAuctionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreAuctionDataAsync,
                    () => Workflows.StoreAuctions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreAuctionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreAuctionDataAsync,
                    () => Workflows.StoreAuctions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreAuctionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreAuctionCache request)
        {
            await ClearCachedStoreAuctionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreAuctionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreAuctions>(string.Empty),
                    UrnId.Create<GetStoreAuctionByID>(string.Empty),
                    UrnId.Create<GetStoreAuctionByKey>(string.Empty),
                    UrnId.Create<CheckStoreAuctionExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreAuctionExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreAuctionService : StoreAuctionServiceBase { }
}
