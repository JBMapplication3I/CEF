// <autogenerated>
// <copyright file="ManufacturerImageTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the manufacturer image type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of manufacturer image types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{ManufacturerImageTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Manufacturers/ManufacturerImageTypes", "GET", Priority = 1,
            Summary = "Use to get a list of manufacturer image types")]
    public partial class GetManufacturerImageTypes : TypeSearchModel, IReturn<ManufacturerImageTypePagedResults> { }

    /// <summary>A ServiceStack Route to get manufacturer image types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImageType.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all manufacturer image types")]
    public partial class GetManufacturerImageTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all manufacturer image types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImageType.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageTypesDigest", "GET",
            Summary = "Use to get a hash representing each manufacturer image types")]
    public partial class GetManufacturerImageTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get manufacturer image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Manufacturers/ManufacturerImageType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific manufacturer image type")]
    public partial class GetManufacturerImageTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get manufacturer image type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific manufacturer image type by the custom key")]
    public partial class GetManufacturerImageTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get manufacturer image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific manufacturer image type by the name")]
    public partial class GetManufacturerImageTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get manufacturer image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific manufacturer image type by the name")]
    public partial class GetManufacturerImageTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check manufacturer image type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImageType.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckManufacturerImageTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check manufacturer image type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImageType.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckManufacturerImageTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check manufacturer image type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImageType.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckManufacturerImageTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check manufacturer image type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImageType.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckManufacturerImageTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create manufacturer image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImageType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Create", "POST", Priority = 1,
            Summary = "Use to create a new manufacturer image type.")]
    public partial class CreateManufacturerImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert manufacturer image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing manufacturer image type (as needed).")]
    public partial class UpsertManufacturerImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update manufacturer image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImageType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing manufacturer image type.")]
    public partial class UpdateManufacturerImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate manufacturer image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImageType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific manufacturer image type from the system [Soft-Delete]")]
    public partial class DeactivateManufacturerImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate manufacturer image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImageType.Deactivate"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific manufacturer image type from the system [Soft-Delete]")]
    public partial class DeactivateManufacturerImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate manufacturer image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImageType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific manufacturer image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateManufacturerImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate manufacturer image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImageType.Reactivate"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific manufacturer image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateManufacturerImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete manufacturer image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImageType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific manufacturer image type from the system [Hard-Delete]")]
    public partial class DeleteManufacturerImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete manufacturer image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImageType.Delete"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImageType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific manufacturer image type from the system [Hard-Delete]")]
    public partial class DeleteManufacturerImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear manufacturer image type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Manufacturers/ManufacturerImageType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all manufacturer image type calls.")]
    public class ClearManufacturerImageTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ManufacturerImageTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetManufacturerImageTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerImageTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, ManufacturerImageTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ManufacturerImageTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerImageTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetManufacturerImageTypesForConnect request)
        {
            return await Workflows.ManufacturerImageTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerImageTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerImageTypesDigest request)
        {
            return await Workflows.ManufacturerImageTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetManufacturerImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerImageTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ManufacturerImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerImageTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ManufacturerImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerImageTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerImageTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ManufacturerImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerImageTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerImageTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.ManufacturerImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckManufacturerImageTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckManufacturerImageTypeExistsByID request)
        {
            return await Workflows.ManufacturerImageTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckManufacturerImageTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckManufacturerImageTypeExistsByKey request)
        {
            return await Workflows.ManufacturerImageTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckManufacturerImageTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckManufacturerImageTypeExistsByName request)
        {
            return await Workflows.ManufacturerImageTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckManufacturerImageTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckManufacturerImageTypeExistsByDisplayName request)
        {
            return await Workflows.ManufacturerImageTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertManufacturerImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertManufacturerImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageTypeDataAsync,
                    () => Workflows.ManufacturerImageTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateManufacturerImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateManufacturerImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageTypeDataAsync,
                    () => Workflows.ManufacturerImageTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateManufacturerImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateManufacturerImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageTypeDataAsync,
                    () => Workflows.ManufacturerImageTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateManufacturerImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateManufacturerImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageTypeDataAsync,
                    () => Workflows.ManufacturerImageTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateManufacturerImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateManufacturerImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageTypeDataAsync,
                    () => Workflows.ManufacturerImageTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateManufacturerImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateManufacturerImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageTypeDataAsync,
                    () => Workflows.ManufacturerImageTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateManufacturerImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateManufacturerImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageTypeDataAsync,
                    () => Workflows.ManufacturerImageTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteManufacturerImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteManufacturerImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageTypeDataAsync,
                    () => Workflows.ManufacturerImageTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteManufacturerImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteManufacturerImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageTypeDataAsync,
                    () => Workflows.ManufacturerImageTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearManufacturerImageTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearManufacturerImageTypeCache request)
        {
            await ClearCachedManufacturerImageTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedManufacturerImageTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetManufacturerImageTypes>(string.Empty),
                    UrnId.Create<GetManufacturerImageTypeByID>(string.Empty),
                    UrnId.Create<GetManufacturerImageTypeByKey>(string.Empty),
                    UrnId.Create<GetManufacturerImageTypeByName>(string.Empty),
                    UrnId.Create<CheckManufacturerImageTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckManufacturerImageTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckManufacturerImageTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckManufacturerImageTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ManufacturerImageTypeService : ManufacturerImageTypeServiceBase { }
}
