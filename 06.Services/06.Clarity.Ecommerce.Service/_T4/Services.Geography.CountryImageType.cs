// <autogenerated>
// <copyright file="CountryImageTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the country image type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of country image types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{CountryImageTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/CountryImageTypes", "GET", Priority = 1,
            Summary = "Use to get a list of country image types")]
    public partial class GetCountryImageTypes : TypeSearchModel, IReturn<CountryImageTypePagedResults> { }

    /// <summary>A ServiceStack Route to get country image types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Geography.CountryImageType.View"),
        PublicAPI,
        Route("/Geography/CountryImageTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all country image types")]
    public partial class GetCountryImageTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all country image types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.CountryImageType.View"),
        PublicAPI,
        Route("/Geography/CountryImageTypesDigest", "GET",
            Summary = "Use to get a hash representing each country image types")]
    public partial class GetCountryImageTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get country image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/CountryImageType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific country image type")]
    public partial class GetCountryImageTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get country image type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Geography/CountryImageType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific country image type by the custom key")]
    public partial class GetCountryImageTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get country image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Geography/CountryImageType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific country image type by the name")]
    public partial class GetCountryImageTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get country image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Geography/CountryImageType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific country image type by the name")]
    public partial class GetCountryImageTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check country image type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.CountryImageType.View"),
        PublicAPI,
        Route("/Geography/CountryImageType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCountryImageTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check country image type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.CountryImageType.View"),
        PublicAPI,
        Route("/Geography/CountryImageType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCountryImageTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check country image type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.CountryImageType.View"),
        PublicAPI,
        Route("/Geography/CountryImageType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCountryImageTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check country image type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.CountryImageType.View"),
        PublicAPI,
        Route("/Geography/CountryImageType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCountryImageTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create country image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.CountryImageType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryImageType/Create", "POST", Priority = 1,
            Summary = "Use to create a new country image type.")]
    public partial class CreateCountryImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert country image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/CountryImageType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing country image type (as needed).")]
    public partial class UpsertCountryImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update country image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.CountryImageType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryImageType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing country image type.")]
    public partial class UpdateCountryImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate country image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryImageType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryImageType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific country image type from the system [Soft-Delete]")]
    public partial class DeactivateCountryImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate country image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryImageType.Deactivate"),
        PublicAPI,
        Route("/Geography/CountryImageType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific country image type from the system [Soft-Delete]")]
    public partial class DeactivateCountryImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate country image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryImageType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryImageType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific country image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCountryImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate country image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryImageType.Reactivate"),
        PublicAPI,
        Route("/Geography/CountryImageType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific country image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCountryImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete country image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryImageType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryImageType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific country image type from the system [Hard-Delete]")]
    public partial class DeleteCountryImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete country image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryImageType.Delete"),
        PublicAPI,
        Route("/Geography/CountryImageType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific country image type from the system [Hard-Delete]")]
    public partial class DeleteCountryImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear country image type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/CountryImageType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all country image type calls.")]
    public class ClearCountryImageTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CountryImageTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCountryImageTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryImageTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, CountryImageTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CountryImageTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryImageTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCountryImageTypesForConnect request)
        {
            return await Workflows.CountryImageTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryImageTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryImageTypesDigest request)
        {
            return await Workflows.CountryImageTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCountryImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryImageTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CountryImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryImageTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CountryImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryImageTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryImageTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CountryImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryImageTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryImageTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.CountryImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCountryImageTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCountryImageTypeExistsByID request)
        {
            return await Workflows.CountryImageTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCountryImageTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCountryImageTypeExistsByKey request)
        {
            return await Workflows.CountryImageTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCountryImageTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCountryImageTypeExistsByName request)
        {
            return await Workflows.CountryImageTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCountryImageTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCountryImageTypeExistsByDisplayName request)
        {
            return await Workflows.CountryImageTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCountryImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCountryImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageTypeDataAsync,
                    () => Workflows.CountryImageTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCountryImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCountryImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageTypeDataAsync,
                    () => Workflows.CountryImageTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCountryImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCountryImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageTypeDataAsync,
                    () => Workflows.CountryImageTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCountryImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCountryImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageTypeDataAsync,
                    () => Workflows.CountryImageTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCountryImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCountryImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageTypeDataAsync,
                    () => Workflows.CountryImageTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCountryImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCountryImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageTypeDataAsync,
                    () => Workflows.CountryImageTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCountryImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCountryImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageTypeDataAsync,
                    () => Workflows.CountryImageTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCountryImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCountryImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageTypeDataAsync,
                    () => Workflows.CountryImageTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCountryImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCountryImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageTypeDataAsync,
                    () => Workflows.CountryImageTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCountryImageTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCountryImageTypeCache request)
        {
            await ClearCachedCountryImageTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCountryImageTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCountryImageTypes>(string.Empty),
                    UrnId.Create<GetCountryImageTypeByID>(string.Empty),
                    UrnId.Create<GetCountryImageTypeByKey>(string.Empty),
                    UrnId.Create<GetCountryImageTypeByName>(string.Empty),
                    UrnId.Create<CheckCountryImageTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckCountryImageTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckCountryImageTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckCountryImageTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CountryImageTypeService : CountryImageTypeServiceBase { }
}
