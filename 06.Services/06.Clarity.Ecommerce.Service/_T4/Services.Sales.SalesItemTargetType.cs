// <autogenerated>
// <copyright file="SalesItemTargetTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales item target type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales item target types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{SalesItemTargetTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sales/SalesItemTargetTypes", "GET", Priority = 1,
            Summary = "Use to get a list of sales item target types")]
    public partial class GetSalesItemTargetTypes : TypeSearchModel, IReturn<SalesItemTargetTypePagedResults> { }

    /// <summary>A ServiceStack Route to get sales item target types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Sales.SalesItemTargetType.View"),
        PublicAPI,
        Route("/Sales/SalesItemTargetTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales item target types")]
    public partial class GetSalesItemTargetTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales item target types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Sales.SalesItemTargetType.View"),
        PublicAPI,
        Route("/Sales/SalesItemTargetTypesDigest", "GET",
            Summary = "Use to get a hash representing each sales item target types")]
    public partial class GetSalesItemTargetTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales item target type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sales/SalesItemTargetType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales item target type")]
    public partial class GetSalesItemTargetTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get sales item target type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Sales/SalesItemTargetType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales item target type by the custom key")]
    public partial class GetSalesItemTargetTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get sales item target type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Sales/SalesItemTargetType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sales item target type by the name")]
    public partial class GetSalesItemTargetTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get sales item target type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Sales/SalesItemTargetType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific sales item target type by the name")]
    public partial class GetSalesItemTargetTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check sales item target type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sales.SalesItemTargetType.View"),
        PublicAPI,
        Route("/Sales/SalesItemTargetType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesItemTargetTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales item target type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sales.SalesItemTargetType.View"),
        PublicAPI,
        Route("/Sales/SalesItemTargetType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesItemTargetTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales item target type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sales.SalesItemTargetType.View"),
        PublicAPI,
        Route("/Sales/SalesItemTargetType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesItemTargetTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales item target type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sales.SalesItemTargetType.View"),
        PublicAPI,
        Route("/Sales/SalesItemTargetType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesItemTargetTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales item target type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sales.SalesItemTargetType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sales/SalesItemTargetType/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales item target type.")]
    public partial class CreateSalesItemTargetType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales item target type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Sales/SalesItemTargetType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales item target type (as needed).")]
    public partial class UpsertSalesItemTargetType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales item target type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sales.SalesItemTargetType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sales/SalesItemTargetType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales item target type.")]
    public partial class UpdateSalesItemTargetType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales item target type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sales.SalesItemTargetType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sales/SalesItemTargetType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales item target type from the system [Soft-Delete]")]
    public partial class DeactivateSalesItemTargetTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales item target type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sales.SalesItemTargetType.Deactivate"),
        PublicAPI,
        Route("/Sales/SalesItemTargetType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales item target type from the system [Soft-Delete]")]
    public partial class DeactivateSalesItemTargetTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales item target type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sales.SalesItemTargetType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sales/SalesItemTargetType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales item target type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesItemTargetTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales item target type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sales.SalesItemTargetType.Reactivate"),
        PublicAPI,
        Route("/Sales/SalesItemTargetType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales item target type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesItemTargetTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales item target type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sales.SalesItemTargetType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sales/SalesItemTargetType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales item target type from the system [Hard-Delete]")]
    public partial class DeleteSalesItemTargetTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales item target type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sales.SalesItemTargetType.Delete"),
        PublicAPI,
        Route("/Sales/SalesItemTargetType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales item target type from the system [Hard-Delete]")]
    public partial class DeleteSalesItemTargetTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales item target type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sales/SalesItemTargetType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales item target type calls.")]
    public class ClearSalesItemTargetTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesItemTargetTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesItemTargetTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesItemTargetTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, SalesItemTargetTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesItemTargetTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesItemTargetTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesItemTargetTypesForConnect request)
        {
            return await Workflows.SalesItemTargetTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesItemTargetTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesItemTargetTypesDigest request)
        {
            return await Workflows.SalesItemTargetTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesItemTargetTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesItemTargetTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesItemTargetTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesItemTargetTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesItemTargetTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesItemTargetTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesItemTargetTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesItemTargetTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SalesItemTargetTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesItemTargetTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesItemTargetTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.SalesItemTargetTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesItemTargetTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesItemTargetTypeExistsByID request)
        {
            return await Workflows.SalesItemTargetTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesItemTargetTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesItemTargetTypeExistsByKey request)
        {
            return await Workflows.SalesItemTargetTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesItemTargetTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesItemTargetTypeExistsByName request)
        {
            return await Workflows.SalesItemTargetTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesItemTargetTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesItemTargetTypeExistsByDisplayName request)
        {
            return await Workflows.SalesItemTargetTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesItemTargetType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesItemTargetType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesItemTargetTypeDataAsync,
                    () => Workflows.SalesItemTargetTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesItemTargetType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesItemTargetType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesItemTargetTypeDataAsync,
                    () => Workflows.SalesItemTargetTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesItemTargetType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesItemTargetType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesItemTargetTypeDataAsync,
                    () => Workflows.SalesItemTargetTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesItemTargetTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesItemTargetTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesItemTargetTypeDataAsync,
                    () => Workflows.SalesItemTargetTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesItemTargetTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesItemTargetTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesItemTargetTypeDataAsync,
                    () => Workflows.SalesItemTargetTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesItemTargetTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesItemTargetTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesItemTargetTypeDataAsync,
                    () => Workflows.SalesItemTargetTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesItemTargetTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesItemTargetTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesItemTargetTypeDataAsync,
                    () => Workflows.SalesItemTargetTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesItemTargetTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesItemTargetTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesItemTargetTypeDataAsync,
                    () => Workflows.SalesItemTargetTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesItemTargetTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesItemTargetTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesItemTargetTypeDataAsync,
                    () => Workflows.SalesItemTargetTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesItemTargetTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesItemTargetTypeCache request)
        {
            await ClearCachedSalesItemTargetTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesItemTargetTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesItemTargetTypes>(string.Empty),
                    UrnId.Create<GetSalesItemTargetTypeByID>(string.Empty),
                    UrnId.Create<GetSalesItemTargetTypeByKey>(string.Empty),
                    UrnId.Create<GetSalesItemTargetTypeByName>(string.Empty),
                    UrnId.Create<CheckSalesItemTargetTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesItemTargetTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckSalesItemTargetTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckSalesItemTargetTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesItemTargetTypeService : SalesItemTargetTypeServiceBase { }
}
