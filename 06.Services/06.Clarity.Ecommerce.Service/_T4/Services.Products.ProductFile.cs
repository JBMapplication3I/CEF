// <autogenerated>
// <copyright file="ProductFileService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the product file service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of product files.</summary>
    /// <seealso cref="ProductFileSearchModel"/>
    /// <seealso cref="IReturn{ProductFilePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductFiles", "GET", Priority = 1,
            Summary = "Use to get a list of product files")]
    public partial class GetProductFiles : ProductFileSearchModel, IReturn<ProductFilePagedResults> { }

    /// <summary>A ServiceStack Route to get product files for connect.</summary>
    /// <seealso cref="ProductFileSearchModel"/>
    /// <seealso cref="IReturn{List{ProductFileModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductFile.View"),
        PublicAPI,
        Route("/Products/ProductFilesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all product files")]
    public partial class GetProductFilesForConnect : ProductFileSearchModel, IReturn<List<ProductFileModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all product files.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductFile.View"),
        PublicAPI,
        Route("/Products/ProductFilesDigest", "GET",
            Summary = "Use to get a hash representing each product files")]
    public partial class GetProductFilesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get product file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ProductFileModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductFile/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific product file")]
    public partial class GetProductFileByID : ImplementsIDBase, IReturn<ProductFileModel> { }

    /// <summary>A ServiceStack Route to get product file.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ProductFileModel}"/>
    [PublicAPI,
        Route("/Products/ProductFile/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific product file by the custom key")]
    public partial class GetProductFileByKey : ImplementsKeyBase, IReturn<ProductFileModel> { }

    /// <summary>A ServiceStack Route to get product file.</summary>
    /// <seealso cref="IReturn{ProductFileModel}"/>
    [PublicAPI,
        Route("/Products/ProductFile/Name", "GET", Priority = 1,
            Summary = "Use to get a specific product file by the name")]
    public partial class GetProductFileByName : ImplementsNameBase, IReturn<ProductFileModel> { }

    /// <summary>A ServiceStack Route to get product file.</summary>
    /// <seealso cref="IReturn{ProductFileModel}"/>
    [PublicAPI,
        Route("/Products/ProductFile/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific product file by the SEO URL")]
    public partial class GetProductFileBySeoUrl : ImplementsSeoUrlBase, IReturn<ProductFileModel> { }

    /// <summary>A ServiceStack Route to check product file exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductFile.View"),
        PublicAPI,
        Route("/Products/ProductFile/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckProductFileExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product file exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductFile.View"),
        PublicAPI,
        Route("/Products/ProductFile/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckProductFileExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product file exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductFile.View"),
        PublicAPI,
        Route("/Products/ProductFile/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckProductFileExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product file exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductFile.View"),
        PublicAPI,
        Route("/Products/ProductFile/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckProductFileExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create product file.</summary>
    /// <seealso cref="ProductFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductFile.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductFile/Create", "POST", Priority = 1,
            Summary = "Use to create a new product file.")]
    public partial class CreateProductFile : ProductFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert product file.</summary>
    /// <seealso cref="ProductFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Products/ProductFile/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing product file (as needed).")]
    public partial class UpsertProductFile : ProductFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update product file.</summary>
    /// <seealso cref="ProductFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductFile.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductFile/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing product file.")]
    public partial class UpdateProductFile : ProductFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate product file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductFile.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductFile/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product file from the system [Soft-Delete]")]
    public partial class DeactivateProductFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate product file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductFile.Deactivate"),
        PublicAPI,
        Route("/Products/ProductFile/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product file from the system [Soft-Delete]")]
    public partial class DeactivateProductFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductFile.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductFile/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductFile.Reactivate"),
        PublicAPI,
        Route("/Products/ProductFile/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductFile.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductFile/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific product file from the system [Hard-Delete]")]
    public partial class DeleteProductFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductFile.Delete"),
        PublicAPI,
        Route("/Products/ProductFile/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific product file from the system [Hard-Delete]")]
    public partial class DeleteProductFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear product file cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductFile/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all product file calls.")]
    public class ClearProductFileCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ProductFileServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetProductFiles"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductFiles request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IProductFileModel, ProductFileModel, IProductFileSearchModel, ProductFilePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ProductFiles)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductFilesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetProductFilesForConnect request)
        {
            return await Workflows.ProductFiles.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductFilesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductFilesDigest request)
        {
            return await Workflows.ProductFiles.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetProductFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductFileByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ProductFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductFileByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ProductFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductFileByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductFileByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ProductFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductFileBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductFileBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.ProductFiles, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckProductFileExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductFileExistsByID request)
        {
            return await Workflows.ProductFiles.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductFileExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductFileExistsByKey request)
        {
            return await Workflows.ProductFiles.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductFileExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductFileExistsByName request)
        {
            return await Workflows.ProductFiles.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductFileExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductFileExistsBySeoUrl request)
        {
            return await Workflows.ProductFiles.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertProductFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertProductFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductFileDataAsync,
                    () => Workflows.ProductFiles.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateProductFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateProductFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductFileDataAsync,
                    () => Workflows.ProductFiles.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateProductFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateProductFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductFileDataAsync,
                    () => Workflows.ProductFiles.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateProductFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductFileDataAsync,
                    () => Workflows.ProductFiles.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateProductFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductFileDataAsync,
                    () => Workflows.ProductFiles.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateProductFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductFileDataAsync,
                    () => Workflows.ProductFiles.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateProductFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductFileDataAsync,
                    () => Workflows.ProductFiles.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteProductFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductFileDataAsync,
                    () => Workflows.ProductFiles.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteProductFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductFileDataAsync,
                    () => Workflows.ProductFiles.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearProductFileCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearProductFileCache request)
        {
            await ClearCachedProductFileDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedProductFileDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetProductFiles>(string.Empty),
                    UrnId.Create<GetProductFileByID>(string.Empty),
                    UrnId.Create<GetProductFileByKey>(string.Empty),
                    UrnId.Create<GetProductFileByName>(string.Empty),
                    UrnId.Create<GetProductFileBySeoUrl>(string.Empty),
                    UrnId.Create<CheckProductFileExistsByID>(string.Empty),
                    UrnId.Create<CheckProductFileExistsByKey>(string.Empty),
                    UrnId.Create<CheckProductFileExistsByName>(string.Empty),
                    UrnId.Create<CheckProductFileExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ProductFileService : ProductFileServiceBase { }
}
