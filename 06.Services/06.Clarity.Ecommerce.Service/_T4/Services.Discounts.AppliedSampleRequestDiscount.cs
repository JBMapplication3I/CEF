// <autogenerated>
// <copyright file="AppliedSampleRequestDiscountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the applied sample request discount service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of applied sample request discounts.</summary>
    /// <seealso cref="AppliedSampleRequestDiscountSearchModel"/>
    /// <seealso cref="IReturn{AppliedSampleRequestDiscountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSampleRequestDiscounts", "GET", Priority = 1,
            Summary = "Use to get a list of applied sample request discounts")]
    public partial class GetAppliedSampleRequestDiscounts : AppliedSampleRequestDiscountSearchModel, IReturn<AppliedSampleRequestDiscountPagedResults> { }

    /// <summary>A ServiceStack Route to get applied sample request discounts for connect.</summary>
    /// <seealso cref="AppliedSampleRequestDiscountSearchModel"/>
    /// <seealso cref="IReturn{List{AppliedSampleRequestDiscountModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestDiscountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all applied sample request discounts")]
    public partial class GetAppliedSampleRequestDiscountsForConnect : AppliedSampleRequestDiscountSearchModel, IReturn<List<AppliedSampleRequestDiscountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all applied sample request discounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestDiscountsDigest", "GET",
            Summary = "Use to get a hash representing each applied sample request discounts")]
    public partial class GetAppliedSampleRequestDiscountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get applied sample request discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AppliedSampleRequestDiscountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSampleRequestDiscount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sample request discount")]
    public partial class GetAppliedSampleRequestDiscountByID : ImplementsIDBase, IReturn<AppliedSampleRequestDiscountModel> { }

    /// <summary>A ServiceStack Route to get applied sample request discount.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AppliedSampleRequestDiscountModel}"/>
    [PublicAPI,
        Route("/Discounts/AppliedSampleRequestDiscount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sample request discount by the custom key")]
    public partial class GetAppliedSampleRequestDiscountByKey : ImplementsKeyBase, IReturn<AppliedSampleRequestDiscountModel> { }

    /// <summary>A ServiceStack Route to check applied sample request discount exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestDiscount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSampleRequestDiscountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check applied sample request discount exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestDiscount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSampleRequestDiscountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create applied sample request discount.</summary>
    /// <seealso cref="AppliedSampleRequestDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestDiscount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestDiscount/Create", "POST", Priority = 1,
            Summary = "Use to create a new applied sample request discount.")]
    public partial class CreateAppliedSampleRequestDiscount : AppliedSampleRequestDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert applied sample request discount.</summary>
    /// <seealso cref="AppliedSampleRequestDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestDiscount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing applied sample request discount (as needed).")]
    public partial class UpsertAppliedSampleRequestDiscount : AppliedSampleRequestDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update applied sample request discount.</summary>
    /// <seealso cref="AppliedSampleRequestDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestDiscount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestDiscount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing applied sample request discount.")]
    public partial class UpdateAppliedSampleRequestDiscount : AppliedSampleRequestDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate applied sample request discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestDiscount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestDiscount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sample request discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSampleRequestDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate applied sample request discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestDiscount.Deactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestDiscount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sample request discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSampleRequestDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sample request discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestDiscount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestDiscount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sample request discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSampleRequestDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sample request discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestDiscount.Reactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestDiscount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sample request discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSampleRequestDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sample request discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestDiscount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestDiscount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific applied sample request discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSampleRequestDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sample request discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSampleRequestDiscount.Delete"),
        PublicAPI,
        Route("/Discounts/AppliedSampleRequestDiscount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific applied sample request discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSampleRequestDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear applied sample request discount cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSampleRequestDiscount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all applied sample request discount calls.")]
    public class ClearAppliedSampleRequestDiscountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AppliedSampleRequestDiscountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAppliedSampleRequestDiscounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSampleRequestDiscounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAppliedSampleRequestDiscountModel, AppliedSampleRequestDiscountModel, IAppliedSampleRequestDiscountSearchModel, AppliedSampleRequestDiscountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AppliedSampleRequestDiscounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSampleRequestDiscountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAppliedSampleRequestDiscountsForConnect request)
        {
            return await Workflows.AppliedSampleRequestDiscounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSampleRequestDiscountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSampleRequestDiscountsDigest request)
        {
            return await Workflows.AppliedSampleRequestDiscounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAppliedSampleRequestDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSampleRequestDiscountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AppliedSampleRequestDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSampleRequestDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSampleRequestDiscountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AppliedSampleRequestDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAppliedSampleRequestDiscountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSampleRequestDiscountExistsByID request)
        {
            return await Workflows.AppliedSampleRequestDiscounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppliedSampleRequestDiscountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSampleRequestDiscountExistsByKey request)
        {
            return await Workflows.AppliedSampleRequestDiscounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAppliedSampleRequestDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAppliedSampleRequestDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestDiscounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAppliedSampleRequestDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAppliedSampleRequestDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestDiscounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAppliedSampleRequestDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAppliedSampleRequestDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestDiscounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSampleRequestDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSampleRequestDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestDiscounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSampleRequestDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSampleRequestDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestDiscounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSampleRequestDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSampleRequestDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestDiscounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSampleRequestDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSampleRequestDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestDiscounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAppliedSampleRequestDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSampleRequestDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestDiscounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAppliedSampleRequestDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSampleRequestDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSampleRequestDiscountDataAsync,
                    () => Workflows.AppliedSampleRequestDiscounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAppliedSampleRequestDiscountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAppliedSampleRequestDiscountCache request)
        {
            await ClearCachedAppliedSampleRequestDiscountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAppliedSampleRequestDiscountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAppliedSampleRequestDiscounts>(string.Empty),
                    UrnId.Create<GetAppliedSampleRequestDiscountByID>(string.Empty),
                    UrnId.Create<GetAppliedSampleRequestDiscountByKey>(string.Empty),
                    UrnId.Create<CheckAppliedSampleRequestDiscountExistsByID>(string.Empty),
                    UrnId.Create<CheckAppliedSampleRequestDiscountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AppliedSampleRequestDiscountService : AppliedSampleRequestDiscountServiceBase { }
}
