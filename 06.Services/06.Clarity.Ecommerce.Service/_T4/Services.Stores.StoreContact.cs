// <autogenerated>
// <copyright file="StoreContactService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store contact service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store contacts.</summary>
    /// <seealso cref="StoreContactSearchModel"/>
    /// <seealso cref="IReturn{StoreContactPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreContacts", "GET", Priority = 1,
            Summary = "Use to get a list of store contacts")]
    public partial class GetStoreContacts : StoreContactSearchModel, IReturn<StoreContactPagedResults> { }

    /// <summary>A ServiceStack Route to get store contacts for connect.</summary>
    /// <seealso cref="StoreContactSearchModel"/>
    /// <seealso cref="IReturn{List{StoreContactModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreContact.View"),
        PublicAPI,
        Route("/Stores/StoreContactsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store contacts")]
    public partial class GetStoreContactsForConnect : StoreContactSearchModel, IReturn<List<StoreContactModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store contacts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreContact.View"),
        PublicAPI,
        Route("/Stores/StoreContactsDigest", "GET",
            Summary = "Use to get a hash representing each store contacts")]
    public partial class GetStoreContactsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreContactModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreContact/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store contact")]
    public partial class GetStoreContactByID : ImplementsIDBase, IReturn<StoreContactModel> { }

    /// <summary>A ServiceStack Route to get store contact.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreContactModel}"/>
    [PublicAPI,
        Route("/Stores/StoreContact/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store contact by the custom key")]
    public partial class GetStoreContactByKey : ImplementsKeyBase, IReturn<StoreContactModel> { }

    /// <summary>A ServiceStack Route to get store contact.</summary>
    /// <seealso cref="IReturn{StoreContactModel}"/>
    [PublicAPI,
        Route("/Stores/StoreContact/Name", "GET", Priority = 1,
            Summary = "Use to get a specific store contact by the name")]
    public partial class GetStoreContactByName : ImplementsNameBase, IReturn<StoreContactModel> { }

    /// <summary>A ServiceStack Route to check store contact exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreContact.View"),
        PublicAPI,
        Route("/Stores/StoreContact/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreContactExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store contact exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreContact.View"),
        PublicAPI,
        Route("/Stores/StoreContact/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreContactExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store contact exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreContact.View"),
        PublicAPI,
        Route("/Stores/StoreContact/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreContactExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store contact.</summary>
    /// <seealso cref="StoreContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreContact.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreContact/Create", "POST", Priority = 1,
            Summary = "Use to create a new store contact.")]
    public partial class CreateStoreContact : StoreContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store contact.</summary>
    /// <seealso cref="StoreContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreContact/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store contact (as needed).")]
    public partial class UpsertStoreContact : StoreContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store contact.</summary>
    /// <seealso cref="StoreContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreContact.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreContact/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store contact.")]
    public partial class UpdateStoreContact : StoreContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreContact.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreContact/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store contact from the system [Soft-Delete]")]
    public partial class DeactivateStoreContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreContact.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreContact/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store contact from the system [Soft-Delete]")]
    public partial class DeactivateStoreContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreContact.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreContact/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreContact.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreContact/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreContact.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreContact/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store contact from the system [Hard-Delete]")]
    public partial class DeleteStoreContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreContact.Delete"),
        PublicAPI,
        Route("/Stores/StoreContact/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store contact from the system [Hard-Delete]")]
    public partial class DeleteStoreContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store contact cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreContact/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store contact calls.")]
    public class ClearStoreContactCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreContactServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreContacts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreContacts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreContactModel, StoreContactModel, IStoreContactSearchModel, StoreContactPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreContacts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreContactsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreContactsForConnect request)
        {
            return await Workflows.StoreContacts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreContactsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreContactsDigest request)
        {
            return await Workflows.StoreContacts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreContactByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreContacts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreContactByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreContacts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreContactByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreContactByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.StoreContacts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreContactExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreContactExistsByID request)
        {
            return await Workflows.StoreContacts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreContactExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreContactExistsByKey request)
        {
            return await Workflows.StoreContacts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreContactExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreContactExistsByName request)
        {
            return await Workflows.StoreContacts.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreContactDataAsync,
                    () => Workflows.StoreContacts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreContactDataAsync,
                    () => Workflows.StoreContacts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreContactDataAsync,
                    () => Workflows.StoreContacts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreContactDataAsync,
                    () => Workflows.StoreContacts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreContactDataAsync,
                    () => Workflows.StoreContacts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreContactDataAsync,
                    () => Workflows.StoreContacts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreContactDataAsync,
                    () => Workflows.StoreContacts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreContactDataAsync,
                    () => Workflows.StoreContacts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreContactDataAsync,
                    () => Workflows.StoreContacts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreContactCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreContactCache request)
        {
            await ClearCachedStoreContactDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreContactDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreContacts>(string.Empty),
                    UrnId.Create<GetStoreContactByID>(string.Empty),
                    UrnId.Create<GetStoreContactByKey>(string.Empty),
                    UrnId.Create<GetStoreContactByName>(string.Empty),
                    UrnId.Create<CheckStoreContactExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreContactExistsByKey>(string.Empty),
                    UrnId.Create<CheckStoreContactExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreContactService : StoreContactServiceBase { }
}
