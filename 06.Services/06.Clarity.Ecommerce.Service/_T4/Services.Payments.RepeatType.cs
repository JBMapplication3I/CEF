// <autogenerated>
// <copyright file="RepeatTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the repeat type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of repeat types.</summary>
    /// <seealso cref="RepeatTypeSearchModel"/>
    /// <seealso cref="IReturn{RepeatTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/RepeatTypes", "GET", Priority = 1,
            Summary = "Use to get a list of repeat types")]
    public partial class GetRepeatTypes : RepeatTypeSearchModel, IReturn<RepeatTypePagedResults> { }

    /// <summary>A ServiceStack Route to get repeat types for connect.</summary>
    /// <seealso cref="RepeatTypeSearchModel"/>
    /// <seealso cref="IReturn{List{RepeatTypeModel}}"/>
    [Authenticate, RequiredPermission("Payments.RepeatType.View"),
        PublicAPI,
        Route("/Payments/RepeatTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all repeat types")]
    public partial class GetRepeatTypesForConnect : RepeatTypeSearchModel, IReturn<List<RepeatTypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all repeat types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.RepeatType.View"),
        PublicAPI,
        Route("/Payments/RepeatTypesDigest", "GET",
            Summary = "Use to get a hash representing each repeat types")]
    public partial class GetRepeatTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get repeat type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{RepeatTypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/RepeatType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific repeat type")]
    public partial class GetRepeatTypeByID : ImplementsIDBase, IReturn<RepeatTypeModel> { }

    /// <summary>A ServiceStack Route to get repeat type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{RepeatTypeModel}"/>
    [PublicAPI,
        Route("/Payments/RepeatType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific repeat type by the custom key")]
    public partial class GetRepeatTypeByKey : ImplementsKeyBase, IReturn<RepeatTypeModel> { }

    /// <summary>A ServiceStack Route to get repeat type.</summary>
    /// <seealso cref="IReturn{RepeatTypeModel}"/>
    [PublicAPI,
        Route("/Payments/RepeatType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific repeat type by the name")]
    public partial class GetRepeatTypeByName : ImplementsNameBase, IReturn<RepeatTypeModel> { }

    /// <summary>A ServiceStack Route to get repeat type.</summary>
    /// <seealso cref="IReturn{RepeatTypeModel}"/>
    [PublicAPI,
        Route("/Payments/RepeatType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific repeat type by the name")]
    public partial class GetRepeatTypeByDisplayName : ImplementsDisplayNameBase, IReturn<RepeatTypeModel> { }

    /// <summary>A ServiceStack Route to check repeat type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.RepeatType.View"),
        PublicAPI,
        Route("/Payments/RepeatType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckRepeatTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check repeat type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.RepeatType.View"),
        PublicAPI,
        Route("/Payments/RepeatType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckRepeatTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check repeat type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.RepeatType.View"),
        PublicAPI,
        Route("/Payments/RepeatType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckRepeatTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check repeat type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.RepeatType.View"),
        PublicAPI,
        Route("/Payments/RepeatType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckRepeatTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create repeat type.</summary>
    /// <seealso cref="RepeatTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.RepeatType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/RepeatType/Create", "POST", Priority = 1,
            Summary = "Use to create a new repeat type.")]
    public partial class CreateRepeatType : RepeatTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert repeat type.</summary>
    /// <seealso cref="RepeatTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/RepeatType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing repeat type (as needed).")]
    public partial class UpsertRepeatType : RepeatTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update repeat type.</summary>
    /// <seealso cref="RepeatTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.RepeatType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/RepeatType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing repeat type.")]
    public partial class UpdateRepeatType : RepeatTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate repeat type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.RepeatType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/RepeatType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific repeat type from the system [Soft-Delete]")]
    public partial class DeactivateRepeatTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate repeat type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.RepeatType.Deactivate"),
        PublicAPI,
        Route("/Payments/RepeatType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific repeat type from the system [Soft-Delete]")]
    public partial class DeactivateRepeatTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate repeat type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.RepeatType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/RepeatType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific repeat type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRepeatTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate repeat type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.RepeatType.Reactivate"),
        PublicAPI,
        Route("/Payments/RepeatType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific repeat type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRepeatTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete repeat type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.RepeatType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/RepeatType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific repeat type from the system [Hard-Delete]")]
    public partial class DeleteRepeatTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete repeat type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.RepeatType.Delete"),
        PublicAPI,
        Route("/Payments/RepeatType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific repeat type from the system [Hard-Delete]")]
    public partial class DeleteRepeatTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear repeat type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/RepeatType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all repeat type calls.")]
    public class ClearRepeatTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class RepeatTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetRepeatTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRepeatTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IRepeatTypeModel, RepeatTypeModel, IRepeatTypeSearchModel, RepeatTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.RepeatTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRepeatTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetRepeatTypesForConnect request)
        {
            return await Workflows.RepeatTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRepeatTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRepeatTypesDigest request)
        {
            return await Workflows.RepeatTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetRepeatTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRepeatTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.RepeatTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRepeatTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRepeatTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.RepeatTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRepeatTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRepeatTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.RepeatTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRepeatTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRepeatTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.RepeatTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckRepeatTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRepeatTypeExistsByID request)
        {
            return await Workflows.RepeatTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRepeatTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRepeatTypeExistsByKey request)
        {
            return await Workflows.RepeatTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRepeatTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRepeatTypeExistsByName request)
        {
            return await Workflows.RepeatTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRepeatTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRepeatTypeExistsByDisplayName request)
        {
            return await Workflows.RepeatTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertRepeatType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertRepeatType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRepeatTypeDataAsync,
                    () => Workflows.RepeatTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateRepeatType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateRepeatType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRepeatTypeDataAsync,
                    () => Workflows.RepeatTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateRepeatType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateRepeatType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRepeatTypeDataAsync,
                    () => Workflows.RepeatTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateRepeatTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRepeatTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRepeatTypeDataAsync,
                    () => Workflows.RepeatTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateRepeatTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRepeatTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRepeatTypeDataAsync,
                    () => Workflows.RepeatTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateRepeatTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRepeatTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRepeatTypeDataAsync,
                    () => Workflows.RepeatTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateRepeatTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRepeatTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRepeatTypeDataAsync,
                    () => Workflows.RepeatTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteRepeatTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRepeatTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRepeatTypeDataAsync,
                    () => Workflows.RepeatTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteRepeatTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRepeatTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRepeatTypeDataAsync,
                    () => Workflows.RepeatTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearRepeatTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearRepeatTypeCache request)
        {
            await ClearCachedRepeatTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedRepeatTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetRepeatTypes>(string.Empty),
                    UrnId.Create<GetRepeatTypeByID>(string.Empty),
                    UrnId.Create<GetRepeatTypeByKey>(string.Empty),
                    UrnId.Create<GetRepeatTypeByName>(string.Empty),
                    UrnId.Create<CheckRepeatTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckRepeatTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckRepeatTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckRepeatTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class RepeatTypeService : RepeatTypeServiceBase { }
}
