// <autogenerated>
// <copyright file="SalesOrderPurchaseOrderService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales order purchase order service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales order purchase orders.</summary>
    /// <seealso cref="SalesOrderPurchaseOrderSearchModel"/>
    /// <seealso cref="IReturn{SalesOrderPurchaseOrderPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/SalesOrderPurchaseOrders", "GET", Priority = 1,
            Summary = "Use to get a list of sales order purchase orders")]
    public partial class GetSalesOrderPurchaseOrders : SalesOrderPurchaseOrderSearchModel, IReturn<SalesOrderPurchaseOrderPagedResults> { }

    /// <summary>A ServiceStack Route to get sales order purchase orders for connect.</summary>
    /// <seealso cref="SalesOrderPurchaseOrderSearchModel"/>
    /// <seealso cref="IReturn{List{SalesOrderPurchaseOrderModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.SalesOrderPurchaseOrder.View"),
        PublicAPI,
        Route("/Purchasing/SalesOrderPurchaseOrdersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales order purchase orders")]
    public partial class GetSalesOrderPurchaseOrdersForConnect : SalesOrderPurchaseOrderSearchModel, IReturn<List<SalesOrderPurchaseOrderModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales order purchase orders.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.SalesOrderPurchaseOrder.View"),
        PublicAPI,
        Route("/Purchasing/SalesOrderPurchaseOrdersDigest", "GET",
            Summary = "Use to get a hash representing each sales order purchase orders")]
    public partial class GetSalesOrderPurchaseOrdersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales order purchase order.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesOrderPurchaseOrderModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/SalesOrderPurchaseOrder/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order purchase order")]
    public partial class GetSalesOrderPurchaseOrderByID : ImplementsIDBase, IReturn<SalesOrderPurchaseOrderModel> { }

    /// <summary>A ServiceStack Route to get sales order purchase order.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesOrderPurchaseOrderModel}"/>
    [PublicAPI,
        Route("/Purchasing/SalesOrderPurchaseOrder/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order purchase order by the custom key")]
    public partial class GetSalesOrderPurchaseOrderByKey : ImplementsKeyBase, IReturn<SalesOrderPurchaseOrderModel> { }

    /// <summary>A ServiceStack Route to check sales order purchase order exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.SalesOrderPurchaseOrder.View"),
        PublicAPI,
        Route("/Purchasing/SalesOrderPurchaseOrder/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderPurchaseOrderExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales order purchase order exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.SalesOrderPurchaseOrder.View"),
        PublicAPI,
        Route("/Purchasing/SalesOrderPurchaseOrder/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderPurchaseOrderExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales order purchase order.</summary>
    /// <seealso cref="SalesOrderPurchaseOrderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.SalesOrderPurchaseOrder.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/SalesOrderPurchaseOrder/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales order purchase order.")]
    public partial class CreateSalesOrderPurchaseOrder : SalesOrderPurchaseOrderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales order purchase order.</summary>
    /// <seealso cref="SalesOrderPurchaseOrderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Purchasing/SalesOrderPurchaseOrder/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales order purchase order (as needed).")]
    public partial class UpsertSalesOrderPurchaseOrder : SalesOrderPurchaseOrderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales order purchase order.</summary>
    /// <seealso cref="SalesOrderPurchaseOrderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.SalesOrderPurchaseOrder.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/SalesOrderPurchaseOrder/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales order purchase order.")]
    public partial class UpdateSalesOrderPurchaseOrder : SalesOrderPurchaseOrderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales order purchase order.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.SalesOrderPurchaseOrder.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/SalesOrderPurchaseOrder/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order purchase order from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderPurchaseOrderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales order purchase order by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.SalesOrderPurchaseOrder.Deactivate"),
        PublicAPI,
        Route("/Purchasing/SalesOrderPurchaseOrder/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order purchase order from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderPurchaseOrderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order purchase order.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.SalesOrderPurchaseOrder.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/SalesOrderPurchaseOrder/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order purchase order from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderPurchaseOrderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order purchase order by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.SalesOrderPurchaseOrder.Reactivate"),
        PublicAPI,
        Route("/Purchasing/SalesOrderPurchaseOrder/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order purchase order from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderPurchaseOrderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order purchase order.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.SalesOrderPurchaseOrder.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/SalesOrderPurchaseOrder/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales order purchase order from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderPurchaseOrderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order purchase order by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.SalesOrderPurchaseOrder.Delete"),
        PublicAPI,
        Route("/Purchasing/SalesOrderPurchaseOrder/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales order purchase order from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderPurchaseOrderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales order purchase order cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/SalesOrderPurchaseOrder/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales order purchase order calls.")]
    public class ClearSalesOrderPurchaseOrderCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesOrderPurchaseOrderServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesOrderPurchaseOrders"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderPurchaseOrders request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesOrderPurchaseOrderModel, SalesOrderPurchaseOrderModel, ISalesOrderPurchaseOrderSearchModel, SalesOrderPurchaseOrderPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesOrderPurchaseOrders)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderPurchaseOrdersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesOrderPurchaseOrdersForConnect request)
        {
            return await Workflows.SalesOrderPurchaseOrders.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderPurchaseOrdersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderPurchaseOrdersDigest request)
        {
            return await Workflows.SalesOrderPurchaseOrders.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesOrderPurchaseOrderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderPurchaseOrderByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesOrderPurchaseOrders, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderPurchaseOrderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderPurchaseOrderByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesOrderPurchaseOrders, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesOrderPurchaseOrderExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderPurchaseOrderExistsByID request)
        {
            return await Workflows.SalesOrderPurchaseOrders.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesOrderPurchaseOrderExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderPurchaseOrderExistsByKey request)
        {
            return await Workflows.SalesOrderPurchaseOrders.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesOrderPurchaseOrder"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesOrderPurchaseOrder request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPurchaseOrderDataAsync,
                    () => Workflows.SalesOrderPurchaseOrders.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesOrderPurchaseOrder"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesOrderPurchaseOrder request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPurchaseOrderDataAsync,
                    () => Workflows.SalesOrderPurchaseOrders.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesOrderPurchaseOrder"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesOrderPurchaseOrder request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPurchaseOrderDataAsync,
                    () => Workflows.SalesOrderPurchaseOrders.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderPurchaseOrderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderPurchaseOrderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPurchaseOrderDataAsync,
                    () => Workflows.SalesOrderPurchaseOrders.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderPurchaseOrderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderPurchaseOrderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPurchaseOrderDataAsync,
                    () => Workflows.SalesOrderPurchaseOrders.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderPurchaseOrderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderPurchaseOrderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPurchaseOrderDataAsync,
                    () => Workflows.SalesOrderPurchaseOrders.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderPurchaseOrderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderPurchaseOrderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPurchaseOrderDataAsync,
                    () => Workflows.SalesOrderPurchaseOrders.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderPurchaseOrderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderPurchaseOrderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPurchaseOrderDataAsync,
                    () => Workflows.SalesOrderPurchaseOrders.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderPurchaseOrderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderPurchaseOrderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPurchaseOrderDataAsync,
                    () => Workflows.SalesOrderPurchaseOrders.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesOrderPurchaseOrderCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesOrderPurchaseOrderCache request)
        {
            await ClearCachedSalesOrderPurchaseOrderDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesOrderPurchaseOrderDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesOrderPurchaseOrders>(string.Empty),
                    UrnId.Create<GetSalesOrderPurchaseOrderByID>(string.Empty),
                    UrnId.Create<GetSalesOrderPurchaseOrderByKey>(string.Empty),
                    UrnId.Create<CheckSalesOrderPurchaseOrderExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesOrderPurchaseOrderExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesOrderPurchaseOrderService : SalesOrderPurchaseOrderServiceBase { }
}
