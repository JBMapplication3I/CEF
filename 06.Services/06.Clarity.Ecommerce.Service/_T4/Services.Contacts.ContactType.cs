// <autogenerated>
// <copyright file="ContactTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the contact type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of contact types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{ContactTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ContactTypes", "GET", Priority = 1,
            Summary = "Use to get a list of contact types")]
    public partial class GetContactTypes : TypeSearchModel, IReturn<ContactTypePagedResults> { }

    /// <summary>A ServiceStack Route to get contact types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Contacts.ContactType.View"),
        PublicAPI,
        Route("/Contacts/ContactTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all contact types")]
    public partial class GetContactTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all contact types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Contacts.ContactType.View"),
        PublicAPI,
        Route("/Contacts/ContactTypesDigest", "GET",
            Summary = "Use to get a hash representing each contact types")]
    public partial class GetContactTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get contact type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ContactType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific contact type")]
    public partial class GetContactTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get contact type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Contacts/ContactType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific contact type by the custom key")]
    public partial class GetContactTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get contact type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Contacts/ContactType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific contact type by the name")]
    public partial class GetContactTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get contact type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Contacts/ContactType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific contact type by the name")]
    public partial class GetContactTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check contact type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ContactType.View"),
        PublicAPI,
        Route("/Contacts/ContactType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckContactTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check contact type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ContactType.View"),
        PublicAPI,
        Route("/Contacts/ContactType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckContactTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check contact type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ContactType.View"),
        PublicAPI,
        Route("/Contacts/ContactType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckContactTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check contact type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ContactType.View"),
        PublicAPI,
        Route("/Contacts/ContactType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckContactTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create contact type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.ContactType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ContactType/Create", "POST", Priority = 1,
            Summary = "Use to create a new contact type.")]
    public partial class CreateContactType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert contact type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Contacts/ContactType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing contact type (as needed).")]
    public partial class UpsertContactType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update contact type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.ContactType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ContactType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing contact type.")]
    public partial class UpdateContactType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate contact type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ContactType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ContactType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific contact type from the system [Soft-Delete]")]
    public partial class DeactivateContactTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate contact type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ContactType.Deactivate"),
        PublicAPI,
        Route("/Contacts/ContactType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific contact type from the system [Soft-Delete]")]
    public partial class DeactivateContactTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate contact type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ContactType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ContactType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific contact type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateContactTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate contact type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ContactType.Reactivate"),
        PublicAPI,
        Route("/Contacts/ContactType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific contact type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateContactTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete contact type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ContactType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ContactType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific contact type from the system [Hard-Delete]")]
    public partial class DeleteContactTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete contact type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ContactType.Delete"),
        PublicAPI,
        Route("/Contacts/ContactType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific contact type from the system [Hard-Delete]")]
    public partial class DeleteContactTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear contact type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ContactType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all contact type calls.")]
    public class ClearContactTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ContactTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetContactTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContactTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, ContactTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ContactTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetContactTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetContactTypesForConnect request)
        {
            return await Workflows.ContactTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetContactTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContactTypesDigest request)
        {
            return await Workflows.ContactTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetContactTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContactTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ContactTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetContactTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContactTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ContactTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetContactTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContactTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ContactTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetContactTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContactTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.ContactTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckContactTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckContactTypeExistsByID request)
        {
            return await Workflows.ContactTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckContactTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckContactTypeExistsByKey request)
        {
            return await Workflows.ContactTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckContactTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckContactTypeExistsByName request)
        {
            return await Workflows.ContactTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckContactTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckContactTypeExistsByDisplayName request)
        {
            return await Workflows.ContactTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertContactType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertContactType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactTypeDataAsync,
                    () => Workflows.ContactTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateContactType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateContactType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactTypeDataAsync,
                    () => Workflows.ContactTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateContactType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateContactType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactTypeDataAsync,
                    () => Workflows.ContactTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateContactTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateContactTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactTypeDataAsync,
                    () => Workflows.ContactTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateContactTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateContactTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactTypeDataAsync,
                    () => Workflows.ContactTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateContactTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateContactTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactTypeDataAsync,
                    () => Workflows.ContactTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateContactTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateContactTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactTypeDataAsync,
                    () => Workflows.ContactTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteContactTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteContactTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactTypeDataAsync,
                    () => Workflows.ContactTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteContactTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteContactTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContactTypeDataAsync,
                    () => Workflows.ContactTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearContactTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearContactTypeCache request)
        {
            await ClearCachedContactTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedContactTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetContactTypes>(string.Empty),
                    UrnId.Create<GetContactTypeByID>(string.Empty),
                    UrnId.Create<GetContactTypeByKey>(string.Empty),
                    UrnId.Create<GetContactTypeByName>(string.Empty),
                    UrnId.Create<CheckContactTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckContactTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckContactTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckContactTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ContactTypeService : ContactTypeServiceBase { }
}
