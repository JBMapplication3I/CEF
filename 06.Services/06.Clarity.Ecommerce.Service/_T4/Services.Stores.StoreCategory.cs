// <autogenerated>
// <copyright file="StoreCategoryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store category service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store categories.</summary>
    /// <seealso cref="StoreCategorySearchModel"/>
    /// <seealso cref="IReturn{StoreCategoryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreCategories", "GET", Priority = 1,
            Summary = "Use to get a list of store categories")]
    public partial class GetStoreCategories : StoreCategorySearchModel, IReturn<StoreCategoryPagedResults> { }

    /// <summary>A ServiceStack Route to get store categories for connect.</summary>
    /// <seealso cref="StoreCategorySearchModel"/>
    /// <seealso cref="IReturn{List{StoreCategoryModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreCategory.View"),
        PublicAPI,
        Route("/Stores/StoreCategoriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store categories")]
    public partial class GetStoreCategoriesForConnect : StoreCategorySearchModel, IReturn<List<StoreCategoryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store categories.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreCategory.View"),
        PublicAPI,
        Route("/Stores/StoreCategoriesDigest", "GET",
            Summary = "Use to get a hash representing each store categories")]
    public partial class GetStoreCategoriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreCategoryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreCategory/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store category")]
    public partial class GetStoreCategoryByID : ImplementsIDBase, IReturn<StoreCategoryModel> { }

    /// <summary>A ServiceStack Route to get store category.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreCategoryModel}"/>
    [PublicAPI,
        Route("/Stores/StoreCategory/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store category by the custom key")]
    public partial class GetStoreCategoryByKey : ImplementsKeyBase, IReturn<StoreCategoryModel> { }

    /// <summary>A ServiceStack Route to check store category exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreCategory.View"),
        PublicAPI,
        Route("/Stores/StoreCategory/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreCategoryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store category exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreCategory.View"),
        PublicAPI,
        Route("/Stores/StoreCategory/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreCategoryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store category.</summary>
    /// <seealso cref="StoreCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreCategory.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreCategory/Create", "POST", Priority = 1,
            Summary = "Use to create a new store category.")]
    public partial class CreateStoreCategory : StoreCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store category.</summary>
    /// <seealso cref="StoreCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreCategory/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store category (as needed).")]
    public partial class UpsertStoreCategory : StoreCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store category.</summary>
    /// <seealso cref="StoreCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreCategory.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreCategory/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store category.")]
    public partial class UpdateStoreCategory : StoreCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreCategory.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreCategory/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store category from the system [Soft-Delete]")]
    public partial class DeactivateStoreCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreCategory.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreCategory/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store category from the system [Soft-Delete]")]
    public partial class DeactivateStoreCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreCategory.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreCategory/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreCategory.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreCategory/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreCategory.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreCategory/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store category from the system [Hard-Delete]")]
    public partial class DeleteStoreCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreCategory.Delete"),
        PublicAPI,
        Route("/Stores/StoreCategory/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store category from the system [Hard-Delete]")]
    public partial class DeleteStoreCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store category cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreCategory/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store category calls.")]
    public class ClearStoreCategoryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreCategoryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreCategories"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreCategories request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreCategoryModel, StoreCategoryModel, IStoreCategorySearchModel, StoreCategoryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreCategories)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreCategoriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreCategoriesForConnect request)
        {
            return await Workflows.StoreCategories.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreCategoriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreCategoriesDigest request)
        {
            return await Workflows.StoreCategories.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreCategoryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreCategories, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreCategoryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreCategories, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreCategoryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreCategoryExistsByID request)
        {
            return await Workflows.StoreCategories.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreCategoryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreCategoryExistsByKey request)
        {
            return await Workflows.StoreCategories.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCategoryDataAsync,
                    () => Workflows.StoreCategories.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCategoryDataAsync,
                    () => Workflows.StoreCategories.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCategoryDataAsync,
                    () => Workflows.StoreCategories.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCategoryDataAsync,
                    () => Workflows.StoreCategories.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCategoryDataAsync,
                    () => Workflows.StoreCategories.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCategoryDataAsync,
                    () => Workflows.StoreCategories.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCategoryDataAsync,
                    () => Workflows.StoreCategories.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCategoryDataAsync,
                    () => Workflows.StoreCategories.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCategoryDataAsync,
                    () => Workflows.StoreCategories.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreCategoryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreCategoryCache request)
        {
            await ClearCachedStoreCategoryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreCategoryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreCategories>(string.Empty),
                    UrnId.Create<GetStoreCategoryByID>(string.Empty),
                    UrnId.Create<GetStoreCategoryByKey>(string.Empty),
                    UrnId.Create<CheckStoreCategoryExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreCategoryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreCategoryService : StoreCategoryServiceBase { }
}
