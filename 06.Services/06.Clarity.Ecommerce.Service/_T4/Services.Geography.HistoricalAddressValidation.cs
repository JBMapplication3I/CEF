// <autogenerated>
// <copyright file="HistoricalAddressValidationService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the historical address validation service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of historical address validations.</summary>
    /// <seealso cref="HistoricalAddressValidationSearchModel"/>
    /// <seealso cref="IReturn{HistoricalAddressValidationPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/HistoricalAddressValidations", "GET", Priority = 1,
            Summary = "Use to get a list of historical address validations")]
    public partial class GetHistoricalAddressValidations : HistoricalAddressValidationSearchModel, IReturn<HistoricalAddressValidationPagedResults> { }

    /// <summary>A ServiceStack Route to get historical address validations for connect.</summary>
    /// <seealso cref="HistoricalAddressValidationSearchModel"/>
    /// <seealso cref="IReturn{List{HistoricalAddressValidationModel}}"/>
    [Authenticate, RequiredPermission("Geography.HistoricalAddressValidation.View"),
        PublicAPI,
        Route("/Geography/HistoricalAddressValidationsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all historical address validations")]
    public partial class GetHistoricalAddressValidationsForConnect : HistoricalAddressValidationSearchModel, IReturn<List<HistoricalAddressValidationModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all historical address validations.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.HistoricalAddressValidation.View"),
        PublicAPI,
        Route("/Geography/HistoricalAddressValidationsDigest", "GET",
            Summary = "Use to get a hash representing each historical address validations")]
    public partial class GetHistoricalAddressValidationsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get historical address validation.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{HistoricalAddressValidationModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/HistoricalAddressValidation/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific historical address validation")]
    public partial class GetHistoricalAddressValidationByID : ImplementsIDBase, IReturn<HistoricalAddressValidationModel> { }

    /// <summary>A ServiceStack Route to get historical address validation.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{HistoricalAddressValidationModel}"/>
    [PublicAPI,
        Route("/Geography/HistoricalAddressValidation/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific historical address validation by the custom key")]
    public partial class GetHistoricalAddressValidationByKey : ImplementsKeyBase, IReturn<HistoricalAddressValidationModel> { }

    /// <summary>A ServiceStack Route to check historical address validation exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.HistoricalAddressValidation.View"),
        PublicAPI,
        Route("/Geography/HistoricalAddressValidation/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckHistoricalAddressValidationExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check historical address validation exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.HistoricalAddressValidation.View"),
        PublicAPI,
        Route("/Geography/HistoricalAddressValidation/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckHistoricalAddressValidationExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create historical address validation.</summary>
    /// <seealso cref="HistoricalAddressValidationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.HistoricalAddressValidation.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/HistoricalAddressValidation/Create", "POST", Priority = 1,
            Summary = "Use to create a new historical address validation.")]
    public partial class CreateHistoricalAddressValidation : HistoricalAddressValidationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert historical address validation.</summary>
    /// <seealso cref="HistoricalAddressValidationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/HistoricalAddressValidation/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing historical address validation (as needed).")]
    public partial class UpsertHistoricalAddressValidation : HistoricalAddressValidationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update historical address validation.</summary>
    /// <seealso cref="HistoricalAddressValidationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.HistoricalAddressValidation.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/HistoricalAddressValidation/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing historical address validation.")]
    public partial class UpdateHistoricalAddressValidation : HistoricalAddressValidationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate historical address validation.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.HistoricalAddressValidation.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/HistoricalAddressValidation/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific historical address validation from the system [Soft-Delete]")]
    public partial class DeactivateHistoricalAddressValidationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate historical address validation by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.HistoricalAddressValidation.Deactivate"),
        PublicAPI,
        Route("/Geography/HistoricalAddressValidation/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific historical address validation from the system [Soft-Delete]")]
    public partial class DeactivateHistoricalAddressValidationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate historical address validation.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.HistoricalAddressValidation.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/HistoricalAddressValidation/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific historical address validation from the system [Restore from Soft-Delete]")]
    public partial class ReactivateHistoricalAddressValidationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate historical address validation by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.HistoricalAddressValidation.Reactivate"),
        PublicAPI,
        Route("/Geography/HistoricalAddressValidation/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific historical address validation from the system [Restore from Soft-Delete]")]
    public partial class ReactivateHistoricalAddressValidationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete historical address validation.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.HistoricalAddressValidation.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/HistoricalAddressValidation/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific historical address validation from the system [Hard-Delete]")]
    public partial class DeleteHistoricalAddressValidationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete historical address validation by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.HistoricalAddressValidation.Delete"),
        PublicAPI,
        Route("/Geography/HistoricalAddressValidation/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific historical address validation from the system [Hard-Delete]")]
    public partial class DeleteHistoricalAddressValidationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear historical address validation cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/HistoricalAddressValidation/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all historical address validation calls.")]
    public class ClearHistoricalAddressValidationCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class HistoricalAddressValidationServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetHistoricalAddressValidations"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetHistoricalAddressValidations request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IHistoricalAddressValidationModel, HistoricalAddressValidationModel, IHistoricalAddressValidationSearchModel, HistoricalAddressValidationPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.HistoricalAddressValidations)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetHistoricalAddressValidationsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetHistoricalAddressValidationsForConnect request)
        {
            return await Workflows.HistoricalAddressValidations.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetHistoricalAddressValidationsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetHistoricalAddressValidationsDigest request)
        {
            return await Workflows.HistoricalAddressValidations.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetHistoricalAddressValidationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetHistoricalAddressValidationByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.HistoricalAddressValidations, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetHistoricalAddressValidationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetHistoricalAddressValidationByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.HistoricalAddressValidations, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckHistoricalAddressValidationExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckHistoricalAddressValidationExistsByID request)
        {
            return await Workflows.HistoricalAddressValidations.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckHistoricalAddressValidationExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckHistoricalAddressValidationExistsByKey request)
        {
            return await Workflows.HistoricalAddressValidations.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertHistoricalAddressValidation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertHistoricalAddressValidation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalAddressValidationDataAsync,
                    () => Workflows.HistoricalAddressValidations.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateHistoricalAddressValidation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateHistoricalAddressValidation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalAddressValidationDataAsync,
                    () => Workflows.HistoricalAddressValidations.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateHistoricalAddressValidation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateHistoricalAddressValidation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalAddressValidationDataAsync,
                    () => Workflows.HistoricalAddressValidations.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateHistoricalAddressValidationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateHistoricalAddressValidationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalAddressValidationDataAsync,
                    () => Workflows.HistoricalAddressValidations.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateHistoricalAddressValidationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateHistoricalAddressValidationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalAddressValidationDataAsync,
                    () => Workflows.HistoricalAddressValidations.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateHistoricalAddressValidationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateHistoricalAddressValidationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalAddressValidationDataAsync,
                    () => Workflows.HistoricalAddressValidations.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateHistoricalAddressValidationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateHistoricalAddressValidationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalAddressValidationDataAsync,
                    () => Workflows.HistoricalAddressValidations.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteHistoricalAddressValidationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteHistoricalAddressValidationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalAddressValidationDataAsync,
                    () => Workflows.HistoricalAddressValidations.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteHistoricalAddressValidationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteHistoricalAddressValidationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedHistoricalAddressValidationDataAsync,
                    () => Workflows.HistoricalAddressValidations.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearHistoricalAddressValidationCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearHistoricalAddressValidationCache request)
        {
            await ClearCachedHistoricalAddressValidationDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedHistoricalAddressValidationDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetHistoricalAddressValidations>(string.Empty),
                    UrnId.Create<GetHistoricalAddressValidationByID>(string.Empty),
                    UrnId.Create<GetHistoricalAddressValidationByKey>(string.Empty),
                    UrnId.Create<CheckHistoricalAddressValidationExistsByID>(string.Empty),
                    UrnId.Create<CheckHistoricalAddressValidationExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class HistoricalAddressValidationService : HistoricalAddressValidationServiceBase { }
}
