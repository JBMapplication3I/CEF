// <autogenerated>
// <copyright file="LanguageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the language service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of languages.</summary>
    /// <seealso cref="LanguageSearchModel"/>
    /// <seealso cref="IReturn{LanguagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/Languages", "GET", Priority = 1,
            Summary = "Use to get a list of languages")]
    public partial class GetLanguages : LanguageSearchModel, IReturn<LanguagePagedResults> { }

    /// <summary>A ServiceStack Route to get languages for connect.</summary>
    /// <seealso cref="LanguageSearchModel"/>
    /// <seealso cref="IReturn{List{LanguageModel}}"/>
    [Authenticate, RequiredPermission("Globalization.Language.View"),
        PublicAPI,
        Route("/Globalization/LanguagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all languages")]
    public partial class GetLanguagesForConnect : LanguageSearchModel, IReturn<List<LanguageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all languages.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Globalization.Language.View"),
        PublicAPI,
        Route("/Globalization/LanguagesDigest", "GET",
            Summary = "Use to get a hash representing each languages")]
    public partial class GetLanguagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{LanguageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/Language/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific language")]
    public partial class GetLanguageByID : ImplementsIDBase, IReturn<LanguageModel> { }

    /// <summary>A ServiceStack Route to get language.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{LanguageModel}"/>
    [PublicAPI,
        Route("/Globalization/Language/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific language by the custom key")]
    public partial class GetLanguageByKey : ImplementsKeyBase, IReturn<LanguageModel> { }

    /// <summary>A ServiceStack Route to check language exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Globalization.Language.View"),
        PublicAPI,
        Route("/Globalization/Language/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckLanguageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check language exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Globalization.Language.View"),
        PublicAPI,
        Route("/Globalization/Language/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckLanguageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create language.</summary>
    /// <seealso cref="LanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Globalization.Language.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/Language/Create", "POST", Priority = 1,
            Summary = "Use to create a new language.")]
    public partial class CreateLanguage : LanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert language.</summary>
    /// <seealso cref="LanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Globalization/Language/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing language (as needed).")]
    public partial class UpsertLanguage : LanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update language.</summary>
    /// <seealso cref="LanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Globalization.Language.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/Language/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing language.")]
    public partial class UpdateLanguage : LanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.Language.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/Language/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific language from the system [Soft-Delete]")]
    public partial class DeactivateLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.Language.Deactivate"),
        PublicAPI,
        Route("/Globalization/Language/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific language from the system [Soft-Delete]")]
    public partial class DeactivateLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.Language.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/Language/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific language from the system [Restore from Soft-Delete]")]
    public partial class ReactivateLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.Language.Reactivate"),
        PublicAPI,
        Route("/Globalization/Language/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific language from the system [Restore from Soft-Delete]")]
    public partial class ReactivateLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.Language.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/Language/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific language from the system [Hard-Delete]")]
    public partial class DeleteLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.Language.Delete"),
        PublicAPI,
        Route("/Globalization/Language/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific language from the system [Hard-Delete]")]
    public partial class DeleteLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear language cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/Language/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all language calls.")]
    public class ClearLanguageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class LanguageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetLanguages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ILanguageModel, LanguageModel, ILanguageSearchModel, LanguagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Languages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLanguagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetLanguagesForConnect request)
        {
            return await Workflows.Languages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLanguagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguagesDigest request)
        {
            return await Workflows.Languages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Languages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Languages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckLanguageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLanguageExistsByID request)
        {
            return await Workflows.Languages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckLanguageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLanguageExistsByKey request)
        {
            return await Workflows.Languages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageDataAsync,
                    () => Workflows.Languages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageDataAsync,
                    () => Workflows.Languages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageDataAsync,
                    () => Workflows.Languages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageDataAsync,
                    () => Workflows.Languages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageDataAsync,
                    () => Workflows.Languages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageDataAsync,
                    () => Workflows.Languages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageDataAsync,
                    () => Workflows.Languages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageDataAsync,
                    () => Workflows.Languages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageDataAsync,
                    () => Workflows.Languages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearLanguageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearLanguageCache request)
        {
            await ClearCachedLanguageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedLanguageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetLanguages>(string.Empty),
                    UrnId.Create<GetLanguageByID>(string.Empty),
                    UrnId.Create<GetLanguageByKey>(string.Empty),
                    UrnId.Create<CheckLanguageExistsByID>(string.Empty),
                    UrnId.Create<CheckLanguageExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class LanguageService : LanguageServiceBase { }
}
