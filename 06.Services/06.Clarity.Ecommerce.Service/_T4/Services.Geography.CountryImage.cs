// <autogenerated>
// <copyright file="CountryImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the country image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of country images.</summary>
    /// <seealso cref="CountryImageSearchModel"/>
    /// <seealso cref="IReturn{CountryImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/CountryImages", "GET", Priority = 1,
            Summary = "Use to get a list of country images")]
    public partial class GetCountryImages : CountryImageSearchModel, IReturn<CountryImagePagedResults> { }

    /// <summary>A ServiceStack Route to get country images for connect.</summary>
    /// <seealso cref="CountryImageSearchModel"/>
    /// <seealso cref="IReturn{List{CountryImageModel}}"/>
    [Authenticate, RequiredPermission("Geography.CountryImage.View"),
        PublicAPI,
        Route("/Geography/CountryImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all country images")]
    public partial class GetCountryImagesForConnect : CountryImageSearchModel, IReturn<List<CountryImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all country images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.CountryImage.View"),
        PublicAPI,
        Route("/Geography/CountryImagesDigest", "GET",
            Summary = "Use to get a hash representing each country images")]
    public partial class GetCountryImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get country image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CountryImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/CountryImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific country image")]
    public partial class GetCountryImageByID : ImplementsIDBase, IReturn<CountryImageModel> { }

    /// <summary>A ServiceStack Route to get country image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CountryImageModel}"/>
    [PublicAPI,
        Route("/Geography/CountryImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific country image by the custom key")]
    public partial class GetCountryImageByKey : ImplementsKeyBase, IReturn<CountryImageModel> { }

    /// <summary>A ServiceStack Route to get country image.</summary>
    /// <seealso cref="IReturn{CountryImageModel}"/>
    [PublicAPI,
        Route("/Geography/CountryImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific country image by the name")]
    public partial class GetCountryImageByName : ImplementsNameBase, IReturn<CountryImageModel> { }

    /// <summary>A ServiceStack Route to check country image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.CountryImage.View"),
        PublicAPI,
        Route("/Geography/CountryImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCountryImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check country image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.CountryImage.View"),
        PublicAPI,
        Route("/Geography/CountryImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCountryImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check country image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.CountryImage.View"),
        PublicAPI,
        Route("/Geography/CountryImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCountryImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create country image.</summary>
    /// <seealso cref="CountryImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.CountryImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new country image.")]
    public partial class CreateCountryImage : CountryImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert country image.</summary>
    /// <seealso cref="CountryImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/CountryImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing country image (as needed).")]
    public partial class UpsertCountryImage : CountryImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update country image.</summary>
    /// <seealso cref="CountryImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.CountryImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing country image.")]
    public partial class UpdateCountryImage : CountryImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate country image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific country image from the system [Soft-Delete]")]
    public partial class DeactivateCountryImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate country image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryImage.Deactivate"),
        PublicAPI,
        Route("/Geography/CountryImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific country image from the system [Soft-Delete]")]
    public partial class DeactivateCountryImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate country image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific country image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCountryImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate country image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryImage.Reactivate"),
        PublicAPI,
        Route("/Geography/CountryImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific country image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCountryImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete country image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/CountryImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific country image from the system [Hard-Delete]")]
    public partial class DeleteCountryImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete country image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.CountryImage.Delete"),
        PublicAPI,
        Route("/Geography/CountryImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific country image from the system [Hard-Delete]")]
    public partial class DeleteCountryImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear country image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/CountryImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all country image calls.")]
    public class ClearCountryImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CountryImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCountryImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICountryImageModel, CountryImageModel, ICountryImageSearchModel, CountryImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CountryImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCountryImagesForConnect request)
        {
            return await Workflows.CountryImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryImagesDigest request)
        {
            return await Workflows.CountryImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCountryImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CountryImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CountryImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCountryImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCountryImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CountryImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCountryImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCountryImageExistsByID request)
        {
            return await Workflows.CountryImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCountryImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCountryImageExistsByKey request)
        {
            return await Workflows.CountryImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCountryImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCountryImageExistsByName request)
        {
            return await Workflows.CountryImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCountryImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCountryImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageDataAsync,
                    () => Workflows.CountryImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCountryImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCountryImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageDataAsync,
                    () => Workflows.CountryImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCountryImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCountryImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageDataAsync,
                    () => Workflows.CountryImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCountryImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCountryImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageDataAsync,
                    () => Workflows.CountryImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCountryImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCountryImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageDataAsync,
                    () => Workflows.CountryImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCountryImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCountryImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageDataAsync,
                    () => Workflows.CountryImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCountryImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCountryImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageDataAsync,
                    () => Workflows.CountryImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCountryImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCountryImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageDataAsync,
                    () => Workflows.CountryImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCountryImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCountryImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCountryImageDataAsync,
                    () => Workflows.CountryImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCountryImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCountryImageCache request)
        {
            await ClearCachedCountryImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCountryImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCountryImages>(string.Empty),
                    UrnId.Create<GetCountryImageByID>(string.Empty),
                    UrnId.Create<GetCountryImageByKey>(string.Empty),
                    UrnId.Create<GetCountryImageByName>(string.Empty),
                    UrnId.Create<CheckCountryImageExistsByID>(string.Empty),
                    UrnId.Create<CheckCountryImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckCountryImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CountryImageService : CountryImageServiceBase { }
}
