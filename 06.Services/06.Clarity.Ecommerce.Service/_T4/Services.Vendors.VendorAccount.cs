// <autogenerated>
// <copyright file="VendorAccountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the vendor account service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of vendor accounts.</summary>
    /// <seealso cref="VendorAccountSearchModel"/>
    /// <seealso cref="IReturn{VendorAccountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorAccounts", "GET", Priority = 1,
            Summary = "Use to get a list of vendor accounts")]
    public partial class GetVendorAccounts : VendorAccountSearchModel, IReturn<VendorAccountPagedResults> { }

    /// <summary>A ServiceStack Route to get vendor accounts for connect.</summary>
    /// <seealso cref="VendorAccountSearchModel"/>
    /// <seealso cref="IReturn{List{VendorAccountModel}}"/>
    [Authenticate, RequiredPermission("Vendors.VendorAccount.View"),
        PublicAPI,
        Route("/Vendors/VendorAccountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all vendor accounts")]
    public partial class GetVendorAccountsForConnect : VendorAccountSearchModel, IReturn<List<VendorAccountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all vendor accounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Vendors.VendorAccount.View"),
        PublicAPI,
        Route("/Vendors/VendorAccountsDigest", "GET",
            Summary = "Use to get a hash representing each vendor accounts")]
    public partial class GetVendorAccountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get vendor account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{VendorAccountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorAccount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific vendor account")]
    public partial class GetVendorAccountByID : ImplementsIDBase, IReturn<VendorAccountModel> { }

    /// <summary>A ServiceStack Route to get vendor account.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{VendorAccountModel}"/>
    [PublicAPI,
        Route("/Vendors/VendorAccount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific vendor account by the custom key")]
    public partial class GetVendorAccountByKey : ImplementsKeyBase, IReturn<VendorAccountModel> { }

    /// <summary>A ServiceStack Route to check vendor account exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.VendorAccount.View"),
        PublicAPI,
        Route("/Vendors/VendorAccount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorAccountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check vendor account exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.VendorAccount.View"),
        PublicAPI,
        Route("/Vendors/VendorAccount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorAccountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create vendor account.</summary>
    /// <seealso cref="VendorAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Vendors.VendorAccount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorAccount/Create", "POST", Priority = 1,
            Summary = "Use to create a new vendor account.")]
    public partial class CreateVendorAccount : VendorAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert vendor account.</summary>
    /// <seealso cref="VendorAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Vendors/VendorAccount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing vendor account (as needed).")]
    public partial class UpsertVendorAccount : VendorAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update vendor account.</summary>
    /// <seealso cref="VendorAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Vendors.VendorAccount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorAccount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing vendor account.")]
    public partial class UpdateVendorAccount : VendorAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate vendor account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorAccount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorAccount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific vendor account from the system [Soft-Delete]")]
    public partial class DeactivateVendorAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate vendor account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorAccount.Deactivate"),
        PublicAPI,
        Route("/Vendors/VendorAccount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific vendor account from the system [Soft-Delete]")]
    public partial class DeactivateVendorAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate vendor account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorAccount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorAccount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific vendor account from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVendorAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate vendor account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorAccount.Reactivate"),
        PublicAPI,
        Route("/Vendors/VendorAccount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific vendor account from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVendorAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete vendor account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorAccount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorAccount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific vendor account from the system [Hard-Delete]")]
    public partial class DeleteVendorAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete vendor account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorAccount.Delete"),
        PublicAPI,
        Route("/Vendors/VendorAccount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific vendor account from the system [Hard-Delete]")]
    public partial class DeleteVendorAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear vendor account cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorAccount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all vendor account calls.")]
    public class ClearVendorAccountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class VendorAccountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetVendorAccounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorAccounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IVendorAccountModel, VendorAccountModel, IVendorAccountSearchModel, VendorAccountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.VendorAccounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorAccountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetVendorAccountsForConnect request)
        {
            return await Workflows.VendorAccounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorAccountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorAccountsDigest request)
        {
            return await Workflows.VendorAccounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetVendorAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorAccountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.VendorAccounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorAccountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.VendorAccounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckVendorAccountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorAccountExistsByID request)
        {
            return await Workflows.VendorAccounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckVendorAccountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorAccountExistsByKey request)
        {
            return await Workflows.VendorAccounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertVendorAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertVendorAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorAccountDataAsync,
                    () => Workflows.VendorAccounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateVendorAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateVendorAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorAccountDataAsync,
                    () => Workflows.VendorAccounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateVendorAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateVendorAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorAccountDataAsync,
                    () => Workflows.VendorAccounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateVendorAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVendorAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorAccountDataAsync,
                    () => Workflows.VendorAccounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateVendorAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVendorAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorAccountDataAsync,
                    () => Workflows.VendorAccounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateVendorAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVendorAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorAccountDataAsync,
                    () => Workflows.VendorAccounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateVendorAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVendorAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorAccountDataAsync,
                    () => Workflows.VendorAccounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteVendorAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVendorAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorAccountDataAsync,
                    () => Workflows.VendorAccounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteVendorAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVendorAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorAccountDataAsync,
                    () => Workflows.VendorAccounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearVendorAccountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearVendorAccountCache request)
        {
            await ClearCachedVendorAccountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedVendorAccountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetVendorAccounts>(string.Empty),
                    UrnId.Create<GetVendorAccountByID>(string.Empty),
                    UrnId.Create<GetVendorAccountByKey>(string.Empty),
                    UrnId.Create<CheckVendorAccountExistsByID>(string.Empty),
                    UrnId.Create<CheckVendorAccountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class VendorAccountService : VendorAccountServiceBase { }
}
