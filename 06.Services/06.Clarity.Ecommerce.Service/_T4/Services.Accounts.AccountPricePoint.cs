// <autogenerated>
// <copyright file="AccountPricePointService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the account price point service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of account price points.</summary>
    /// <seealso cref="AccountPricePointSearchModel"/>
    /// <seealso cref="IReturn{AccountPricePointPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountPricePoints", "GET", Priority = 1,
            Summary = "Use to get a list of account price points")]
    public partial class GetAccountPricePoints : AccountPricePointSearchModel, IReturn<AccountPricePointPagedResults> { }

    /// <summary>A ServiceStack Route to get account price points for connect.</summary>
    /// <seealso cref="AccountPricePointSearchModel"/>
    /// <seealso cref="IReturn{List{AccountPricePointModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountPricePoint.View"),
        PublicAPI,
        Route("/Accounts/AccountPricePointsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all account price points")]
    public partial class GetAccountPricePointsForConnect : AccountPricePointSearchModel, IReturn<List<AccountPricePointModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all account price points.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountPricePoint.View"),
        PublicAPI,
        Route("/Accounts/AccountPricePointsDigest", "GET",
            Summary = "Use to get a hash representing each account price points")]
    public partial class GetAccountPricePointsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get account price point.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AccountPricePointModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountPricePoint/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific account price point")]
    public partial class GetAccountPricePointByID : ImplementsIDBase, IReturn<AccountPricePointModel> { }

    /// <summary>A ServiceStack Route to get account price point.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AccountPricePointModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountPricePoint/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific account price point by the custom key")]
    public partial class GetAccountPricePointByKey : ImplementsKeyBase, IReturn<AccountPricePointModel> { }

    /// <summary>A ServiceStack Route to check account price point exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountPricePoint.View"),
        PublicAPI,
        Route("/Accounts/AccountPricePoint/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountPricePointExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account price point exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountPricePoint.View"),
        PublicAPI,
        Route("/Accounts/AccountPricePoint/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountPricePointExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create account price point.</summary>
    /// <seealso cref="AccountPricePointModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountPricePoint.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountPricePoint/Create", "POST", Priority = 1,
            Summary = "Use to create a new account price point.")]
    public partial class CreateAccountPricePoint : AccountPricePointModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert account price point.</summary>
    /// <seealso cref="AccountPricePointModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Accounts/AccountPricePoint/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing account price point (as needed).")]
    public partial class UpsertAccountPricePoint : AccountPricePointModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update account price point.</summary>
    /// <seealso cref="AccountPricePointModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountPricePoint.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountPricePoint/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing account price point.")]
    public partial class UpdateAccountPricePoint : AccountPricePointModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate account price point.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountPricePoint.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountPricePoint/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account price point from the system [Soft-Delete]")]
    public partial class DeactivateAccountPricePointByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate account price point by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountPricePoint.Deactivate"),
        PublicAPI,
        Route("/Accounts/AccountPricePoint/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account price point from the system [Soft-Delete]")]
    public partial class DeactivateAccountPricePointByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account price point.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountPricePoint.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountPricePoint/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account price point from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountPricePointByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account price point by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountPricePoint.Reactivate"),
        PublicAPI,
        Route("/Accounts/AccountPricePoint/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account price point from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountPricePointByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account price point.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountPricePoint.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountPricePoint/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific account price point from the system [Hard-Delete]")]
    public partial class DeleteAccountPricePointByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account price point by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountPricePoint.Delete"),
        PublicAPI,
        Route("/Accounts/AccountPricePoint/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific account price point from the system [Hard-Delete]")]
    public partial class DeleteAccountPricePointByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear account price point cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountPricePoint/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all account price point calls.")]
    public class ClearAccountPricePointCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AccountPricePointServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAccountPricePoints"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountPricePoints request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAccountPricePointModel, AccountPricePointModel, IAccountPricePointSearchModel, AccountPricePointPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AccountPricePoints)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountPricePointsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAccountPricePointsForConnect request)
        {
            return await Workflows.AccountPricePoints.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountPricePointsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountPricePointsDigest request)
        {
            return await Workflows.AccountPricePoints.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAccountPricePointByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountPricePointByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AccountPricePoints, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountPricePointByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountPricePointByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AccountPricePoints, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAccountPricePointExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountPricePointExistsByID request)
        {
            return await Workflows.AccountPricePoints.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountPricePointExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountPricePointExistsByKey request)
        {
            return await Workflows.AccountPricePoints.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAccountPricePoint"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAccountPricePoint request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountPricePointDataAsync,
                    () => Workflows.AccountPricePoints.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAccountPricePoint"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAccountPricePoint request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountPricePointDataAsync,
                    () => Workflows.AccountPricePoints.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAccountPricePoint"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAccountPricePoint request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountPricePointDataAsync,
                    () => Workflows.AccountPricePoints.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAccountPricePointByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountPricePointByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountPricePointDataAsync,
                    () => Workflows.AccountPricePoints.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAccountPricePointByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountPricePointByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountPricePointDataAsync,
                    () => Workflows.AccountPricePoints.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAccountPricePointByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountPricePointByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountPricePointDataAsync,
                    () => Workflows.AccountPricePoints.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAccountPricePointByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountPricePointByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountPricePointDataAsync,
                    () => Workflows.AccountPricePoints.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAccountPricePointByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountPricePointByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountPricePointDataAsync,
                    () => Workflows.AccountPricePoints.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAccountPricePointByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountPricePointByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountPricePointDataAsync,
                    () => Workflows.AccountPricePoints.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAccountPricePointCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAccountPricePointCache request)
        {
            await ClearCachedAccountPricePointDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAccountPricePointDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAccountPricePoints>(string.Empty),
                    UrnId.Create<GetAccountPricePointByID>(string.Empty),
                    UrnId.Create<GetAccountPricePointByKey>(string.Empty),
                    UrnId.Create<CheckAccountPricePointExistsByID>(string.Empty),
                    UrnId.Create<CheckAccountPricePointExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AccountPricePointService : AccountPricePointServiceBase { }
}
