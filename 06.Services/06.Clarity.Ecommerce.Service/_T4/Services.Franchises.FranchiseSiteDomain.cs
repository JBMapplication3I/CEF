// <autogenerated>
// <copyright file="FranchiseSiteDomainService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise site domain service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise site domains.</summary>
    /// <seealso cref="FranchiseSiteDomainSearchModel"/>
    /// <seealso cref="IReturn{FranchiseSiteDomainPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseSiteDomains", "GET", Priority = 1,
            Summary = "Use to get a list of franchise site domains")]
    public partial class GetFranchiseSiteDomains : FranchiseSiteDomainSearchModel, IReturn<FranchiseSiteDomainPagedResults> { }

    /// <summary>A ServiceStack Route to get franchise site domains for connect.</summary>
    /// <seealso cref="FranchiseSiteDomainSearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseSiteDomainModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseSiteDomain.View"),
        PublicAPI,
        Route("/Franchises/FranchiseSiteDomainsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise site domains")]
    public partial class GetFranchiseSiteDomainsForConnect : FranchiseSiteDomainSearchModel, IReturn<List<FranchiseSiteDomainModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise site domains.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseSiteDomain.View"),
        PublicAPI,
        Route("/Franchises/FranchiseSiteDomainsDigest", "GET",
            Summary = "Use to get a hash representing each franchise site domains")]
    public partial class GetFranchiseSiteDomainsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise site domain.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseSiteDomainModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseSiteDomain/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise site domain")]
    public partial class GetFranchiseSiteDomainByID : ImplementsIDBase, IReturn<FranchiseSiteDomainModel> { }

    /// <summary>A ServiceStack Route to get franchise site domain.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseSiteDomainModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseSiteDomain/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise site domain by the custom key")]
    public partial class GetFranchiseSiteDomainByKey : ImplementsKeyBase, IReturn<FranchiseSiteDomainModel> { }

    /// <summary>A ServiceStack Route to check franchise site domain exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseSiteDomain.View"),
        PublicAPI,
        Route("/Franchises/FranchiseSiteDomain/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseSiteDomainExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise site domain exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseSiteDomain.View"),
        PublicAPI,
        Route("/Franchises/FranchiseSiteDomain/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseSiteDomainExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise site domain.</summary>
    /// <seealso cref="FranchiseSiteDomainModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseSiteDomain.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseSiteDomain/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise site domain.")]
    public partial class CreateFranchiseSiteDomain : FranchiseSiteDomainModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise site domain.</summary>
    /// <seealso cref="FranchiseSiteDomainModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseSiteDomain/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise site domain (as needed).")]
    public partial class UpsertFranchiseSiteDomain : FranchiseSiteDomainModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise site domain.</summary>
    /// <seealso cref="FranchiseSiteDomainModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseSiteDomain.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseSiteDomain/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise site domain.")]
    public partial class UpdateFranchiseSiteDomain : FranchiseSiteDomainModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise site domain.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseSiteDomain.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseSiteDomain/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise site domain from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseSiteDomainByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise site domain by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseSiteDomain.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseSiteDomain/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise site domain from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseSiteDomainByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise site domain.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseSiteDomain.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseSiteDomain/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise site domain from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseSiteDomainByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise site domain by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseSiteDomain.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseSiteDomain/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise site domain from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseSiteDomainByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise site domain.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseSiteDomain.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseSiteDomain/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise site domain from the system [Hard-Delete]")]
    public partial class DeleteFranchiseSiteDomainByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise site domain by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseSiteDomain.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseSiteDomain/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise site domain from the system [Hard-Delete]")]
    public partial class DeleteFranchiseSiteDomainByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise site domain cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseSiteDomain/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise site domain calls.")]
    public class ClearFranchiseSiteDomainCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseSiteDomainServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseSiteDomains"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseSiteDomains request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseSiteDomainModel, FranchiseSiteDomainModel, IFranchiseSiteDomainSearchModel, FranchiseSiteDomainPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseSiteDomains)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseSiteDomainsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseSiteDomainsForConnect request)
        {
            return await Workflows.FranchiseSiteDomains.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseSiteDomainsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseSiteDomainsDigest request)
        {
            return await Workflows.FranchiseSiteDomains.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseSiteDomainByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseSiteDomainByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseSiteDomains, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseSiteDomainByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseSiteDomainByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseSiteDomains, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseSiteDomainExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseSiteDomainExistsByID request)
        {
            return await Workflows.FranchiseSiteDomains.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseSiteDomainExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseSiteDomainExistsByKey request)
        {
            return await Workflows.FranchiseSiteDomains.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseSiteDomain"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseSiteDomain request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseSiteDomainDataAsync,
                    () => Workflows.FranchiseSiteDomains.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseSiteDomain"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseSiteDomain request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseSiteDomainDataAsync,
                    () => Workflows.FranchiseSiteDomains.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseSiteDomain"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseSiteDomain request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseSiteDomainDataAsync,
                    () => Workflows.FranchiseSiteDomains.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseSiteDomainByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseSiteDomainByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseSiteDomainDataAsync,
                    () => Workflows.FranchiseSiteDomains.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseSiteDomainByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseSiteDomainByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseSiteDomainDataAsync,
                    () => Workflows.FranchiseSiteDomains.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseSiteDomainByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseSiteDomainByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseSiteDomainDataAsync,
                    () => Workflows.FranchiseSiteDomains.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseSiteDomainByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseSiteDomainByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseSiteDomainDataAsync,
                    () => Workflows.FranchiseSiteDomains.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseSiteDomainByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseSiteDomainByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseSiteDomainDataAsync,
                    () => Workflows.FranchiseSiteDomains.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseSiteDomainByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseSiteDomainByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseSiteDomainDataAsync,
                    () => Workflows.FranchiseSiteDomains.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseSiteDomainCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseSiteDomainCache request)
        {
            await ClearCachedFranchiseSiteDomainDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseSiteDomainDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseSiteDomains>(string.Empty),
                    UrnId.Create<GetFranchiseSiteDomainByID>(string.Empty),
                    UrnId.Create<GetFranchiseSiteDomainByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseSiteDomainExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseSiteDomainExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseSiteDomainService : FranchiseSiteDomainServiceBase { }
}
