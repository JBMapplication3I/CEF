// <autogenerated>
// <copyright file="StoreSubscriptionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store subscription service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store subscriptions.</summary>
    /// <seealso cref="StoreSubscriptionSearchModel"/>
    /// <seealso cref="IReturn{StoreSubscriptionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreSubscriptions", "GET", Priority = 1,
            Summary = "Use to get a list of store subscriptions")]
    public partial class GetStoreSubscriptions : StoreSubscriptionSearchModel, IReturn<StoreSubscriptionPagedResults> { }

    /// <summary>A ServiceStack Route to get store subscriptions for connect.</summary>
    /// <seealso cref="StoreSubscriptionSearchModel"/>
    /// <seealso cref="IReturn{List{StoreSubscriptionModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreSubscription.View"),
        PublicAPI,
        Route("/Stores/StoreSubscriptionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store subscriptions")]
    public partial class GetStoreSubscriptionsForConnect : StoreSubscriptionSearchModel, IReturn<List<StoreSubscriptionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store subscriptions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreSubscription.View"),
        PublicAPI,
        Route("/Stores/StoreSubscriptionsDigest", "GET",
            Summary = "Use to get a hash representing each store subscriptions")]
    public partial class GetStoreSubscriptionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store subscription.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreSubscriptionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreSubscription/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store subscription")]
    public partial class GetStoreSubscriptionByID : ImplementsIDBase, IReturn<StoreSubscriptionModel> { }

    /// <summary>A ServiceStack Route to get store subscription.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreSubscriptionModel}"/>
    [PublicAPI,
        Route("/Stores/StoreSubscription/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store subscription by the custom key")]
    public partial class GetStoreSubscriptionByKey : ImplementsKeyBase, IReturn<StoreSubscriptionModel> { }

    /// <summary>A ServiceStack Route to check store subscription exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreSubscription.View"),
        PublicAPI,
        Route("/Stores/StoreSubscription/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreSubscriptionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store subscription exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreSubscription.View"),
        PublicAPI,
        Route("/Stores/StoreSubscription/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreSubscriptionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store subscription.</summary>
    /// <seealso cref="StoreSubscriptionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreSubscription.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreSubscription/Create", "POST", Priority = 1,
            Summary = "Use to create a new store subscription.")]
    public partial class CreateStoreSubscription : StoreSubscriptionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store subscription.</summary>
    /// <seealso cref="StoreSubscriptionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreSubscription/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store subscription (as needed).")]
    public partial class UpsertStoreSubscription : StoreSubscriptionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store subscription.</summary>
    /// <seealso cref="StoreSubscriptionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreSubscription.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreSubscription/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store subscription.")]
    public partial class UpdateStoreSubscription : StoreSubscriptionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store subscription.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreSubscription.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreSubscription/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store subscription from the system [Soft-Delete]")]
    public partial class DeactivateStoreSubscriptionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store subscription by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreSubscription.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreSubscription/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store subscription from the system [Soft-Delete]")]
    public partial class DeactivateStoreSubscriptionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store subscription.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreSubscription.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreSubscription/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store subscription from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreSubscriptionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store subscription by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreSubscription.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreSubscription/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store subscription from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreSubscriptionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store subscription.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreSubscription.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreSubscription/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store subscription from the system [Hard-Delete]")]
    public partial class DeleteStoreSubscriptionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store subscription by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreSubscription.Delete"),
        PublicAPI,
        Route("/Stores/StoreSubscription/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store subscription from the system [Hard-Delete]")]
    public partial class DeleteStoreSubscriptionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store subscription cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreSubscription/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store subscription calls.")]
    public class ClearStoreSubscriptionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreSubscriptionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreSubscriptions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreSubscriptions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreSubscriptionModel, StoreSubscriptionModel, IStoreSubscriptionSearchModel, StoreSubscriptionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreSubscriptions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreSubscriptionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreSubscriptionsForConnect request)
        {
            return await Workflows.StoreSubscriptions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreSubscriptionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreSubscriptionsDigest request)
        {
            return await Workflows.StoreSubscriptions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreSubscriptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreSubscriptionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreSubscriptions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreSubscriptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreSubscriptionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreSubscriptions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreSubscriptionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreSubscriptionExistsByID request)
        {
            return await Workflows.StoreSubscriptions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreSubscriptionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreSubscriptionExistsByKey request)
        {
            return await Workflows.StoreSubscriptions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreSubscription"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreSubscription request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreSubscriptionDataAsync,
                    () => Workflows.StoreSubscriptions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreSubscription"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreSubscription request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreSubscriptionDataAsync,
                    () => Workflows.StoreSubscriptions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreSubscription"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreSubscription request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreSubscriptionDataAsync,
                    () => Workflows.StoreSubscriptions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreSubscriptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreSubscriptionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreSubscriptionDataAsync,
                    () => Workflows.StoreSubscriptions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreSubscriptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreSubscriptionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreSubscriptionDataAsync,
                    () => Workflows.StoreSubscriptions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreSubscriptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreSubscriptionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreSubscriptionDataAsync,
                    () => Workflows.StoreSubscriptions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreSubscriptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreSubscriptionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreSubscriptionDataAsync,
                    () => Workflows.StoreSubscriptions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreSubscriptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreSubscriptionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreSubscriptionDataAsync,
                    () => Workflows.StoreSubscriptions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreSubscriptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreSubscriptionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreSubscriptionDataAsync,
                    () => Workflows.StoreSubscriptions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreSubscriptionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreSubscriptionCache request)
        {
            await ClearCachedStoreSubscriptionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreSubscriptionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreSubscriptions>(string.Empty),
                    UrnId.Create<GetStoreSubscriptionByID>(string.Empty),
                    UrnId.Create<GetStoreSubscriptionByKey>(string.Empty),
                    UrnId.Create<CheckStoreSubscriptionExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreSubscriptionExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreSubscriptionService : StoreSubscriptionServiceBase { }
}
