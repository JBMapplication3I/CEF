// <autogenerated>
// <copyright file="MembershipAdZoneAccessByLevelService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the membership ad zone access by level service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of membership ad zone access by levels.</summary>
    /// <seealso cref="MembershipAdZoneAccessByLevelSearchModel"/>
    /// <seealso cref="IReturn{MembershipAdZoneAccessByLevelPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/MembershipAdZoneAccessByLevels", "GET", Priority = 1,
            Summary = "Use to get a list of membership ad zone access by levels")]
    public partial class GetMembershipAdZoneAccessByLevels : MembershipAdZoneAccessByLevelSearchModel, IReturn<MembershipAdZoneAccessByLevelPagedResults> { }

    /// <summary>A ServiceStack Route to get membership ad zone access by levels for connect.</summary>
    /// <seealso cref="MembershipAdZoneAccessByLevelSearchModel"/>
    /// <seealso cref="IReturn{List{MembershipAdZoneAccessByLevelModel}}"/>
    [Authenticate, RequiredPermission("Payments.MembershipAdZoneAccessByLevel.View"),
        PublicAPI,
        Route("/Payments/MembershipAdZoneAccessByLevelsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all membership ad zone access by levels")]
    public partial class GetMembershipAdZoneAccessByLevelsForConnect : MembershipAdZoneAccessByLevelSearchModel, IReturn<List<MembershipAdZoneAccessByLevelModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all membership ad zone access by levels.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.MembershipAdZoneAccessByLevel.View"),
        PublicAPI,
        Route("/Payments/MembershipAdZoneAccessByLevelsDigest", "GET",
            Summary = "Use to get a hash representing each membership ad zone access by levels")]
    public partial class GetMembershipAdZoneAccessByLevelsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get membership ad zone access by level.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{MembershipAdZoneAccessByLevelModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/MembershipAdZoneAccessByLevel/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific membership ad zone access by level")]
    public partial class GetMembershipAdZoneAccessByLevelByID : ImplementsIDBase, IReturn<MembershipAdZoneAccessByLevelModel> { }

    /// <summary>A ServiceStack Route to get membership ad zone access by level.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{MembershipAdZoneAccessByLevelModel}"/>
    [PublicAPI,
        Route("/Payments/MembershipAdZoneAccessByLevel/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific membership ad zone access by level by the custom key")]
    public partial class GetMembershipAdZoneAccessByLevelByKey : ImplementsKeyBase, IReturn<MembershipAdZoneAccessByLevelModel> { }

    /// <summary>A ServiceStack Route to check membership ad zone access by level exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.MembershipAdZoneAccessByLevel.View"),
        PublicAPI,
        Route("/Payments/MembershipAdZoneAccessByLevel/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckMembershipAdZoneAccessByLevelExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check membership ad zone access by level exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.MembershipAdZoneAccessByLevel.View"),
        PublicAPI,
        Route("/Payments/MembershipAdZoneAccessByLevel/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckMembershipAdZoneAccessByLevelExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create membership ad zone access by level.</summary>
    /// <seealso cref="MembershipAdZoneAccessByLevelModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.MembershipAdZoneAccessByLevel.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/MembershipAdZoneAccessByLevel/Create", "POST", Priority = 1,
            Summary = "Use to create a new membership ad zone access by level.")]
    public partial class CreateMembershipAdZoneAccessByLevel : MembershipAdZoneAccessByLevelModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert membership ad zone access by level.</summary>
    /// <seealso cref="MembershipAdZoneAccessByLevelModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/MembershipAdZoneAccessByLevel/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing membership ad zone access by level (as needed).")]
    public partial class UpsertMembershipAdZoneAccessByLevel : MembershipAdZoneAccessByLevelModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update membership ad zone access by level.</summary>
    /// <seealso cref="MembershipAdZoneAccessByLevelModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.MembershipAdZoneAccessByLevel.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/MembershipAdZoneAccessByLevel/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing membership ad zone access by level.")]
    public partial class UpdateMembershipAdZoneAccessByLevel : MembershipAdZoneAccessByLevelModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate membership ad zone access by level.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.MembershipAdZoneAccessByLevel.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/MembershipAdZoneAccessByLevel/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific membership ad zone access by level from the system [Soft-Delete]")]
    public partial class DeactivateMembershipAdZoneAccessByLevelByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate membership ad zone access by level by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.MembershipAdZoneAccessByLevel.Deactivate"),
        PublicAPI,
        Route("/Payments/MembershipAdZoneAccessByLevel/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific membership ad zone access by level from the system [Soft-Delete]")]
    public partial class DeactivateMembershipAdZoneAccessByLevelByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate membership ad zone access by level.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.MembershipAdZoneAccessByLevel.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/MembershipAdZoneAccessByLevel/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific membership ad zone access by level from the system [Restore from Soft-Delete]")]
    public partial class ReactivateMembershipAdZoneAccessByLevelByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate membership ad zone access by level by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.MembershipAdZoneAccessByLevel.Reactivate"),
        PublicAPI,
        Route("/Payments/MembershipAdZoneAccessByLevel/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific membership ad zone access by level from the system [Restore from Soft-Delete]")]
    public partial class ReactivateMembershipAdZoneAccessByLevelByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete membership ad zone access by level.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.MembershipAdZoneAccessByLevel.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/MembershipAdZoneAccessByLevel/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific membership ad zone access by level from the system [Hard-Delete]")]
    public partial class DeleteMembershipAdZoneAccessByLevelByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete membership ad zone access by level by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.MembershipAdZoneAccessByLevel.Delete"),
        PublicAPI,
        Route("/Payments/MembershipAdZoneAccessByLevel/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific membership ad zone access by level from the system [Hard-Delete]")]
    public partial class DeleteMembershipAdZoneAccessByLevelByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear membership ad zone access by level cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/MembershipAdZoneAccessByLevel/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all membership ad zone access by level calls.")]
    public class ClearMembershipAdZoneAccessByLevelCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class MembershipAdZoneAccessByLevelServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetMembershipAdZoneAccessByLevels"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMembershipAdZoneAccessByLevels request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IMembershipAdZoneAccessByLevelModel, MembershipAdZoneAccessByLevelModel, IMembershipAdZoneAccessByLevelSearchModel, MembershipAdZoneAccessByLevelPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.MembershipAdZoneAccessByLevels)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMembershipAdZoneAccessByLevelsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetMembershipAdZoneAccessByLevelsForConnect request)
        {
            return await Workflows.MembershipAdZoneAccessByLevels.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMembershipAdZoneAccessByLevelsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMembershipAdZoneAccessByLevelsDigest request)
        {
            return await Workflows.MembershipAdZoneAccessByLevels.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetMembershipAdZoneAccessByLevelByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMembershipAdZoneAccessByLevelByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.MembershipAdZoneAccessByLevels, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMembershipAdZoneAccessByLevelByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMembershipAdZoneAccessByLevelByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.MembershipAdZoneAccessByLevels, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckMembershipAdZoneAccessByLevelExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMembershipAdZoneAccessByLevelExistsByID request)
        {
            return await Workflows.MembershipAdZoneAccessByLevels.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckMembershipAdZoneAccessByLevelExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMembershipAdZoneAccessByLevelExistsByKey request)
        {
            return await Workflows.MembershipAdZoneAccessByLevels.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertMembershipAdZoneAccessByLevel"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertMembershipAdZoneAccessByLevel request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipAdZoneAccessByLevelDataAsync,
                    () => Workflows.MembershipAdZoneAccessByLevels.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateMembershipAdZoneAccessByLevel"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateMembershipAdZoneAccessByLevel request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipAdZoneAccessByLevelDataAsync,
                    () => Workflows.MembershipAdZoneAccessByLevels.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateMembershipAdZoneAccessByLevel"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateMembershipAdZoneAccessByLevel request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipAdZoneAccessByLevelDataAsync,
                    () => Workflows.MembershipAdZoneAccessByLevels.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateMembershipAdZoneAccessByLevelByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateMembershipAdZoneAccessByLevelByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipAdZoneAccessByLevelDataAsync,
                    () => Workflows.MembershipAdZoneAccessByLevels.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateMembershipAdZoneAccessByLevelByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateMembershipAdZoneAccessByLevelByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipAdZoneAccessByLevelDataAsync,
                    () => Workflows.MembershipAdZoneAccessByLevels.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateMembershipAdZoneAccessByLevelByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateMembershipAdZoneAccessByLevelByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipAdZoneAccessByLevelDataAsync,
                    () => Workflows.MembershipAdZoneAccessByLevels.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateMembershipAdZoneAccessByLevelByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateMembershipAdZoneAccessByLevelByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipAdZoneAccessByLevelDataAsync,
                    () => Workflows.MembershipAdZoneAccessByLevels.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteMembershipAdZoneAccessByLevelByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteMembershipAdZoneAccessByLevelByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipAdZoneAccessByLevelDataAsync,
                    () => Workflows.MembershipAdZoneAccessByLevels.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteMembershipAdZoneAccessByLevelByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteMembershipAdZoneAccessByLevelByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipAdZoneAccessByLevelDataAsync,
                    () => Workflows.MembershipAdZoneAccessByLevels.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearMembershipAdZoneAccessByLevelCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearMembershipAdZoneAccessByLevelCache request)
        {
            await ClearCachedMembershipAdZoneAccessByLevelDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedMembershipAdZoneAccessByLevelDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetMembershipAdZoneAccessByLevels>(string.Empty),
                    UrnId.Create<GetMembershipAdZoneAccessByLevelByID>(string.Empty),
                    UrnId.Create<GetMembershipAdZoneAccessByLevelByKey>(string.Empty),
                    UrnId.Create<CheckMembershipAdZoneAccessByLevelExistsByID>(string.Empty),
                    UrnId.Create<CheckMembershipAdZoneAccessByLevelExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class MembershipAdZoneAccessByLevelService : MembershipAdZoneAccessByLevelServiceBase { }
}
