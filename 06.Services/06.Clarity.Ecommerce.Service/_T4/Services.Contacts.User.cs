// <autogenerated>
// <copyright file="UserService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the user service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of users.</summary>
    /// <seealso cref="UserSearchModel"/>
    /// <seealso cref="IReturn{UserPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/Users", "GET", Priority = 1,
            Summary = "Use to get a list of users")]
    public partial class GetUsers : UserSearchModel, IReturn<UserPagedResults> { }

    /// <summary>A ServiceStack Route to get users for connect.</summary>
    /// <seealso cref="UserSearchModel"/>
    /// <seealso cref="IReturn{List{UserModel}}"/>
    [Authenticate, RequiredPermission("Contacts.User.View"),
        PublicAPI,
        Route("/Contacts/UsersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all users")]
    public partial class GetUsersForConnect : UserSearchModel, IReturn<List<UserModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all users.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Contacts.User.View"),
        PublicAPI,
        Route("/Contacts/UsersDigest", "GET",
            Summary = "Use to get a hash representing each users")]
    public partial class GetUsersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{UserModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/User/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific user")]
    public partial class GetUserByID : ImplementsIDBase, IReturn<UserModel> { }

    /// <summary>A ServiceStack Route to get user.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{UserModel}"/>
    [PublicAPI,
        Route("/Contacts/User/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific user by the custom key")]
    public partial class GetUserByKey : ImplementsKeyBase, IReturn<UserModel> { }

    /// <summary>A ServiceStack Route to check user exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.User.View"),
        PublicAPI,
        Route("/Contacts/User/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckUserExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.User.View"),
        PublicAPI,
        Route("/Contacts/User/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckUserExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create user.</summary>
    /// <seealso cref="UserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.User.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/User/Create", "POST", Priority = 1,
            Summary = "Use to create a new user.")]
    public partial class CreateUser : UserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert user.</summary>
    /// <seealso cref="UserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Contacts/User/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing user (as needed).")]
    public partial class UpsertUser : UserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update user.</summary>
    /// <seealso cref="UserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.User.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/User/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing user.")]
    public partial class UpdateUser : UserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.User.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/User/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user from the system [Soft-Delete]")]
    public partial class DeactivateUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.User.Deactivate"),
        PublicAPI,
        Route("/Contacts/User/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user from the system [Soft-Delete]")]
    public partial class DeactivateUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.User.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/User/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.User.Reactivate"),
        PublicAPI,
        Route("/Contacts/User/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.User.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/User/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific user from the system [Hard-Delete]")]
    public partial class DeleteUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.User.Delete"),
        PublicAPI,
        Route("/Contacts/User/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific user from the system [Hard-Delete]")]
    public partial class DeleteUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear user cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/User/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all user calls.")]
    public class ClearUserCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class UserServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetUsers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUsers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IUserModel, UserModel, IUserSearchModel, UserPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Users)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUsersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetUsersForConnect request)
        {
            return await Workflows.Users.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUsersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUsersDigest request)
        {
            return await Workflows.Users.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Users, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Users, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckUserExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserExistsByID request)
        {
            return await Workflows.Users.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserExistsByKey request)
        {
            return await Workflows.Users.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserDataAsync,
                    () => Workflows.Users.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserDataAsync,
                    () => Workflows.Users.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserDataAsync,
                    () => Workflows.Users.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserDataAsync,
                    () => Workflows.Users.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserDataAsync,
                    () => Workflows.Users.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserDataAsync,
                    () => Workflows.Users.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserDataAsync,
                    () => Workflows.Users.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserDataAsync,
                    () => Workflows.Users.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserDataAsync,
                    () => Workflows.Users.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearUserCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearUserCache request)
        {
            await ClearCachedUserDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedUserDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetUsers>(string.Empty),
                    UrnId.Create<GetUserByID>(string.Empty),
                    UrnId.Create<GetUserByKey>(string.Empty),
                    UrnId.Create<CheckUserExistsByID>(string.Empty),
                    UrnId.Create<CheckUserExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class UserService : UserServiceBase { }
}
