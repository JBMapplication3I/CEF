// <autogenerated>
// <copyright file="StoreInventoryLocationTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store inventory location type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store inventory location types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{StoreInventoryLocationTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreInventoryLocationTypes", "GET", Priority = 1,
            Summary = "Use to get a list of store inventory location types")]
    public partial class GetStoreInventoryLocationTypes : TypeSearchModel, IReturn<StoreInventoryLocationTypePagedResults> { }

    /// <summary>A ServiceStack Route to get store inventory location types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocationType.View"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocationTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store inventory location types")]
    public partial class GetStoreInventoryLocationTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store inventory location types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocationType.View"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocationTypesDigest", "GET",
            Summary = "Use to get a hash representing each store inventory location types")]
    public partial class GetStoreInventoryLocationTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store inventory location type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreInventoryLocationType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store inventory location type")]
    public partial class GetStoreInventoryLocationTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get store inventory location type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store inventory location type by the custom key")]
    public partial class GetStoreInventoryLocationTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get store inventory location type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific store inventory location type by the name")]
    public partial class GetStoreInventoryLocationTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get store inventory location type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Stores/StoreInventoryLocationType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific store inventory location type by the name")]
    public partial class GetStoreInventoryLocationTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check store inventory location type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocationType.View"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreInventoryLocationTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store inventory location type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocationType.View"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreInventoryLocationTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store inventory location type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocationType.View"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreInventoryLocationTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store inventory location type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocationType.View"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreInventoryLocationTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store inventory location type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocationType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Create", "POST", Priority = 1,
            Summary = "Use to create a new store inventory location type.")]
    public partial class CreateStoreInventoryLocationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store inventory location type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store inventory location type (as needed).")]
    public partial class UpsertStoreInventoryLocationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store inventory location type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocationType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store inventory location type.")]
    public partial class UpdateStoreInventoryLocationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store inventory location type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocationType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store inventory location type from the system [Soft-Delete]")]
    public partial class DeactivateStoreInventoryLocationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store inventory location type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocationType.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store inventory location type from the system [Soft-Delete]")]
    public partial class DeactivateStoreInventoryLocationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store inventory location type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocationType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store inventory location type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreInventoryLocationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store inventory location type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocationType.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store inventory location type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreInventoryLocationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store inventory location type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocationType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store inventory location type from the system [Hard-Delete]")]
    public partial class DeleteStoreInventoryLocationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store inventory location type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreInventoryLocationType.Delete"),
        PublicAPI,
        Route("/Stores/StoreInventoryLocationType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store inventory location type from the system [Hard-Delete]")]
    public partial class DeleteStoreInventoryLocationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store inventory location type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreInventoryLocationType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store inventory location type calls.")]
    public class ClearStoreInventoryLocationTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreInventoryLocationTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreInventoryLocationTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreInventoryLocationTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, StoreInventoryLocationTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreInventoryLocationTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreInventoryLocationTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreInventoryLocationTypesForConnect request)
        {
            return await Workflows.StoreInventoryLocationTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreInventoryLocationTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreInventoryLocationTypesDigest request)
        {
            return await Workflows.StoreInventoryLocationTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreInventoryLocationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreInventoryLocationTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreInventoryLocationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreInventoryLocationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreInventoryLocationTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreInventoryLocationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreInventoryLocationTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreInventoryLocationTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.StoreInventoryLocationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreInventoryLocationTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreInventoryLocationTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.StoreInventoryLocationTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreInventoryLocationTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreInventoryLocationTypeExistsByID request)
        {
            return await Workflows.StoreInventoryLocationTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreInventoryLocationTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreInventoryLocationTypeExistsByKey request)
        {
            return await Workflows.StoreInventoryLocationTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreInventoryLocationTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreInventoryLocationTypeExistsByName request)
        {
            return await Workflows.StoreInventoryLocationTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreInventoryLocationTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreInventoryLocationTypeExistsByDisplayName request)
        {
            return await Workflows.StoreInventoryLocationTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreInventoryLocationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreInventoryLocationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationTypeDataAsync,
                    () => Workflows.StoreInventoryLocationTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreInventoryLocationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreInventoryLocationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationTypeDataAsync,
                    () => Workflows.StoreInventoryLocationTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreInventoryLocationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreInventoryLocationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationTypeDataAsync,
                    () => Workflows.StoreInventoryLocationTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreInventoryLocationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreInventoryLocationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationTypeDataAsync,
                    () => Workflows.StoreInventoryLocationTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreInventoryLocationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreInventoryLocationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationTypeDataAsync,
                    () => Workflows.StoreInventoryLocationTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreInventoryLocationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreInventoryLocationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationTypeDataAsync,
                    () => Workflows.StoreInventoryLocationTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreInventoryLocationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreInventoryLocationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationTypeDataAsync,
                    () => Workflows.StoreInventoryLocationTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreInventoryLocationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreInventoryLocationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationTypeDataAsync,
                    () => Workflows.StoreInventoryLocationTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreInventoryLocationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreInventoryLocationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreInventoryLocationTypeDataAsync,
                    () => Workflows.StoreInventoryLocationTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreInventoryLocationTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreInventoryLocationTypeCache request)
        {
            await ClearCachedStoreInventoryLocationTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreInventoryLocationTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreInventoryLocationTypes>(string.Empty),
                    UrnId.Create<GetStoreInventoryLocationTypeByID>(string.Empty),
                    UrnId.Create<GetStoreInventoryLocationTypeByKey>(string.Empty),
                    UrnId.Create<GetStoreInventoryLocationTypeByName>(string.Empty),
                    UrnId.Create<CheckStoreInventoryLocationTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreInventoryLocationTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckStoreInventoryLocationTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckStoreInventoryLocationTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreInventoryLocationTypeService : StoreInventoryLocationTypeServiceBase { }
}
