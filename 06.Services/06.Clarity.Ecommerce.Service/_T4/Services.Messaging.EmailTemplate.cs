// <autogenerated>
// <copyright file="EmailTemplateService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the email template service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of email templates.</summary>
    /// <seealso cref="EmailTemplateSearchModel"/>
    /// <seealso cref="IReturn{EmailTemplatePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailTemplates", "GET", Priority = 1,
            Summary = "Use to get a list of email templates")]
    public partial class GetEmailTemplates : EmailTemplateSearchModel, IReturn<EmailTemplatePagedResults> { }

    /// <summary>A ServiceStack Route to get email templates for connect.</summary>
    /// <seealso cref="EmailTemplateSearchModel"/>
    /// <seealso cref="IReturn{List{EmailTemplateModel}}"/>
    [Authenticate, RequiredPermission("Messaging.EmailTemplate.View"),
        PublicAPI,
        Route("/Messaging/EmailTemplatesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all email templates")]
    public partial class GetEmailTemplatesForConnect : EmailTemplateSearchModel, IReturn<List<EmailTemplateModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all email templates.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Messaging.EmailTemplate.View"),
        PublicAPI,
        Route("/Messaging/EmailTemplatesDigest", "GET",
            Summary = "Use to get a hash representing each email templates")]
    public partial class GetEmailTemplatesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get email template.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{EmailTemplateModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailTemplate/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific email template")]
    public partial class GetEmailTemplateByID : ImplementsIDBase, IReturn<EmailTemplateModel> { }

    /// <summary>A ServiceStack Route to get email template.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{EmailTemplateModel}"/>
    [PublicAPI,
        Route("/Messaging/EmailTemplate/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific email template by the custom key")]
    public partial class GetEmailTemplateByKey : ImplementsKeyBase, IReturn<EmailTemplateModel> { }

    /// <summary>A ServiceStack Route to get email template.</summary>
    /// <seealso cref="IReturn{EmailTemplateModel}"/>
    [PublicAPI,
        Route("/Messaging/EmailTemplate/Name", "GET", Priority = 1,
            Summary = "Use to get a specific email template by the name")]
    public partial class GetEmailTemplateByName : ImplementsNameBase, IReturn<EmailTemplateModel> { }

    /// <summary>A ServiceStack Route to check email template exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailTemplate.View"),
        PublicAPI,
        Route("/Messaging/EmailTemplate/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailTemplateExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check email template exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailTemplate.View"),
        PublicAPI,
        Route("/Messaging/EmailTemplate/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailTemplateExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check email template exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailTemplate.View"),
        PublicAPI,
        Route("/Messaging/EmailTemplate/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailTemplateExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create email template.</summary>
    /// <seealso cref="EmailTemplateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.EmailTemplate.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailTemplate/Create", "POST", Priority = 1,
            Summary = "Use to create a new email template.")]
    public partial class CreateEmailTemplate : EmailTemplateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert email template.</summary>
    /// <seealso cref="EmailTemplateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Messaging/EmailTemplate/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing email template (as needed).")]
    public partial class UpsertEmailTemplate : EmailTemplateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update email template.</summary>
    /// <seealso cref="EmailTemplateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.EmailTemplate.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailTemplate/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing email template.")]
    public partial class UpdateEmailTemplate : EmailTemplateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate email template.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailTemplate.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailTemplate/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific email template from the system [Soft-Delete]")]
    public partial class DeactivateEmailTemplateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate email template by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailTemplate.Deactivate"),
        PublicAPI,
        Route("/Messaging/EmailTemplate/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific email template from the system [Soft-Delete]")]
    public partial class DeactivateEmailTemplateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate email template.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailTemplate.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailTemplate/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific email template from the system [Restore from Soft-Delete]")]
    public partial class ReactivateEmailTemplateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate email template by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailTemplate.Reactivate"),
        PublicAPI,
        Route("/Messaging/EmailTemplate/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific email template from the system [Restore from Soft-Delete]")]
    public partial class ReactivateEmailTemplateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete email template.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailTemplate.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailTemplate/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific email template from the system [Hard-Delete]")]
    public partial class DeleteEmailTemplateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete email template by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailTemplate.Delete"),
        PublicAPI,
        Route("/Messaging/EmailTemplate/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific email template from the system [Hard-Delete]")]
    public partial class DeleteEmailTemplateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear email template cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailTemplate/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all email template calls.")]
    public class ClearEmailTemplateCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class EmailTemplateServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetEmailTemplates"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailTemplates request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IEmailTemplateModel, EmailTemplateModel, IEmailTemplateSearchModel, EmailTemplatePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.EmailTemplates)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailTemplatesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetEmailTemplatesForConnect request)
        {
            return await Workflows.EmailTemplates.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailTemplatesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailTemplatesDigest request)
        {
            return await Workflows.EmailTemplates.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetEmailTemplateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailTemplateByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.EmailTemplates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailTemplateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailTemplateByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.EmailTemplates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailTemplateByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailTemplateByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.EmailTemplates, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckEmailTemplateExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailTemplateExistsByID request)
        {
            return await Workflows.EmailTemplates.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEmailTemplateExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailTemplateExistsByKey request)
        {
            return await Workflows.EmailTemplates.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEmailTemplateExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailTemplateExistsByName request)
        {
            return await Workflows.EmailTemplates.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertEmailTemplate"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertEmailTemplate request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTemplateDataAsync,
                    () => Workflows.EmailTemplates.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateEmailTemplate"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateEmailTemplate request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTemplateDataAsync,
                    () => Workflows.EmailTemplates.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateEmailTemplate"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateEmailTemplate request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTemplateDataAsync,
                    () => Workflows.EmailTemplates.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateEmailTemplateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateEmailTemplateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTemplateDataAsync,
                    () => Workflows.EmailTemplates.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateEmailTemplateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateEmailTemplateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTemplateDataAsync,
                    () => Workflows.EmailTemplates.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateEmailTemplateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateEmailTemplateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTemplateDataAsync,
                    () => Workflows.EmailTemplates.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateEmailTemplateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateEmailTemplateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTemplateDataAsync,
                    () => Workflows.EmailTemplates.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteEmailTemplateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteEmailTemplateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTemplateDataAsync,
                    () => Workflows.EmailTemplates.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteEmailTemplateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteEmailTemplateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailTemplateDataAsync,
                    () => Workflows.EmailTemplates.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearEmailTemplateCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearEmailTemplateCache request)
        {
            await ClearCachedEmailTemplateDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedEmailTemplateDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetEmailTemplates>(string.Empty),
                    UrnId.Create<GetEmailTemplateByID>(string.Empty),
                    UrnId.Create<GetEmailTemplateByKey>(string.Empty),
                    UrnId.Create<GetEmailTemplateByName>(string.Empty),
                    UrnId.Create<CheckEmailTemplateExistsByID>(string.Empty),
                    UrnId.Create<CheckEmailTemplateExistsByKey>(string.Empty),
                    UrnId.Create<CheckEmailTemplateExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class EmailTemplateService : EmailTemplateServiceBase { }
}
