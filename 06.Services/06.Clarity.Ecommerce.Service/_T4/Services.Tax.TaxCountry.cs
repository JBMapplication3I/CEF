// <autogenerated>
// <copyright file="TaxCountryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the tax country service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of tax countries.</summary>
    /// <seealso cref="TaxCountrySearchModel"/>
    /// <seealso cref="IReturn{TaxCountryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tax/TaxCountries", "GET", Priority = 1,
            Summary = "Use to get a list of tax countries")]
    public partial class GetTaxCountries : TaxCountrySearchModel, IReturn<TaxCountryPagedResults> { }

    /// <summary>A ServiceStack Route to get tax countries for connect.</summary>
    /// <seealso cref="TaxCountrySearchModel"/>
    /// <seealso cref="IReturn{List{TaxCountryModel}}"/>
    [Authenticate, RequiredPermission("Tax.TaxCountry.View"),
        PublicAPI,
        Route("/Tax/TaxCountriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all tax countries")]
    public partial class GetTaxCountriesForConnect : TaxCountrySearchModel, IReturn<List<TaxCountryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all tax countries.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tax.TaxCountry.View"),
        PublicAPI,
        Route("/Tax/TaxCountriesDigest", "GET",
            Summary = "Use to get a hash representing each tax countries")]
    public partial class GetTaxCountriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get tax country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TaxCountryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tax/TaxCountry/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific tax country")]
    public partial class GetTaxCountryByID : ImplementsIDBase, IReturn<TaxCountryModel> { }

    /// <summary>A ServiceStack Route to get tax country.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TaxCountryModel}"/>
    [PublicAPI,
        Route("/Tax/TaxCountry/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific tax country by the custom key")]
    public partial class GetTaxCountryByKey : ImplementsKeyBase, IReturn<TaxCountryModel> { }

    /// <summary>A ServiceStack Route to get tax country.</summary>
    /// <seealso cref="IReturn{TaxCountryModel}"/>
    [PublicAPI,
        Route("/Tax/TaxCountry/Name", "GET", Priority = 1,
            Summary = "Use to get a specific tax country by the name")]
    public partial class GetTaxCountryByName : ImplementsNameBase, IReturn<TaxCountryModel> { }

    /// <summary>A ServiceStack Route to check tax country exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tax.TaxCountry.View"),
        PublicAPI,
        Route("/Tax/TaxCountry/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckTaxCountryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check tax country exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tax.TaxCountry.View"),
        PublicAPI,
        Route("/Tax/TaxCountry/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckTaxCountryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check tax country exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tax.TaxCountry.View"),
        PublicAPI,
        Route("/Tax/TaxCountry/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckTaxCountryExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create tax country.</summary>
    /// <seealso cref="TaxCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tax.TaxCountry.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxCountry/Create", "POST", Priority = 1,
            Summary = "Use to create a new tax country.")]
    public partial class CreateTaxCountry : TaxCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert tax country.</summary>
    /// <seealso cref="TaxCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tax/TaxCountry/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing tax country (as needed).")]
    public partial class UpsertTaxCountry : TaxCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update tax country.</summary>
    /// <seealso cref="TaxCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tax.TaxCountry.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxCountry/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing tax country.")]
    public partial class UpdateTaxCountry : TaxCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate tax country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxCountry.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxCountry/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific tax country from the system [Soft-Delete]")]
    public partial class DeactivateTaxCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate tax country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxCountry.Deactivate"),
        PublicAPI,
        Route("/Tax/TaxCountry/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific tax country from the system [Soft-Delete]")]
    public partial class DeactivateTaxCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate tax country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxCountry.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxCountry/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific tax country from the system [Restore from Soft-Delete]")]
    public partial class ReactivateTaxCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate tax country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxCountry.Reactivate"),
        PublicAPI,
        Route("/Tax/TaxCountry/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific tax country from the system [Restore from Soft-Delete]")]
    public partial class ReactivateTaxCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete tax country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxCountry.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxCountry/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific tax country from the system [Hard-Delete]")]
    public partial class DeleteTaxCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete tax country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxCountry.Delete"),
        PublicAPI,
        Route("/Tax/TaxCountry/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific tax country from the system [Hard-Delete]")]
    public partial class DeleteTaxCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear tax country cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tax/TaxCountry/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all tax country calls.")]
    public class ClearTaxCountryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class TaxCountryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetTaxCountries"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxCountries request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITaxCountryModel, TaxCountryModel, ITaxCountrySearchModel, TaxCountryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.TaxCountries)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetTaxCountriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetTaxCountriesForConnect request)
        {
            return await Workflows.TaxCountries.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetTaxCountriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxCountriesDigest request)
        {
            return await Workflows.TaxCountries.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetTaxCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxCountryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.TaxCountries, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetTaxCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxCountryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.TaxCountries, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetTaxCountryByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxCountryByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.TaxCountries, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckTaxCountryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckTaxCountryExistsByID request)
        {
            return await Workflows.TaxCountries.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckTaxCountryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckTaxCountryExistsByKey request)
        {
            return await Workflows.TaxCountries.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckTaxCountryExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckTaxCountryExistsByName request)
        {
            return await Workflows.TaxCountries.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertTaxCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertTaxCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxCountryDataAsync,
                    () => Workflows.TaxCountries.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateTaxCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateTaxCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxCountryDataAsync,
                    () => Workflows.TaxCountries.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateTaxCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateTaxCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxCountryDataAsync,
                    () => Workflows.TaxCountries.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateTaxCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateTaxCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxCountryDataAsync,
                    () => Workflows.TaxCountries.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateTaxCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateTaxCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxCountryDataAsync,
                    () => Workflows.TaxCountries.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateTaxCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateTaxCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxCountryDataAsync,
                    () => Workflows.TaxCountries.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateTaxCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateTaxCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxCountryDataAsync,
                    () => Workflows.TaxCountries.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteTaxCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteTaxCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxCountryDataAsync,
                    () => Workflows.TaxCountries.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteTaxCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteTaxCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxCountryDataAsync,
                    () => Workflows.TaxCountries.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearTaxCountryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearTaxCountryCache request)
        {
            await ClearCachedTaxCountryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedTaxCountryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetTaxCountries>(string.Empty),
                    UrnId.Create<GetTaxCountryByID>(string.Empty),
                    UrnId.Create<GetTaxCountryByKey>(string.Empty),
                    UrnId.Create<GetTaxCountryByName>(string.Empty),
                    UrnId.Create<CheckTaxCountryExistsByID>(string.Empty),
                    UrnId.Create<CheckTaxCountryExistsByKey>(string.Empty),
                    UrnId.Create<CheckTaxCountryExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class TaxCountryService : TaxCountryServiceBase { }
}
