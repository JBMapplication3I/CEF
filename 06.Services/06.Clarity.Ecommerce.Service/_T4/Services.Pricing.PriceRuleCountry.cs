// <autogenerated>
// <copyright file="PriceRuleCountryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the price rule country service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of price rule countries.</summary>
    /// <seealso cref="PriceRuleCountrySearchModel"/>
    /// <seealso cref="IReturn{PriceRuleCountryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleCountries", "GET", Priority = 1,
            Summary = "Use to get a list of price rule countries")]
    public partial class GetPriceRuleCountries : PriceRuleCountrySearchModel, IReturn<PriceRuleCountryPagedResults> { }

    /// <summary>A ServiceStack Route to get price rule countries for connect.</summary>
    /// <seealso cref="PriceRuleCountrySearchModel"/>
    /// <seealso cref="IReturn{List{PriceRuleCountryModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCountry.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleCountriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all price rule countries")]
    public partial class GetPriceRuleCountriesForConnect : PriceRuleCountrySearchModel, IReturn<List<PriceRuleCountryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all price rule countries.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCountry.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleCountriesDigest", "GET",
            Summary = "Use to get a hash representing each price rule countries")]
    public partial class GetPriceRuleCountriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get price rule country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PriceRuleCountryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleCountry/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule country")]
    public partial class GetPriceRuleCountryByID : ImplementsIDBase, IReturn<PriceRuleCountryModel> { }

    /// <summary>A ServiceStack Route to get price rule country.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PriceRuleCountryModel}"/>
    [PublicAPI,
        Route("/Pricing/PriceRuleCountry/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule country by the custom key")]
    public partial class GetPriceRuleCountryByKey : ImplementsKeyBase, IReturn<PriceRuleCountryModel> { }

    /// <summary>A ServiceStack Route to check price rule country exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCountry.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleCountry/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleCountryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price rule country exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCountry.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleCountry/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleCountryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create price rule country.</summary>
    /// <seealso cref="PriceRuleCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCountry.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleCountry/Create", "POST", Priority = 1,
            Summary = "Use to create a new price rule country.")]
    public partial class CreatePriceRuleCountry : PriceRuleCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert price rule country.</summary>
    /// <seealso cref="PriceRuleCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Pricing/PriceRuleCountry/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing price rule country (as needed).")]
    public partial class UpsertPriceRuleCountry : PriceRuleCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update price rule country.</summary>
    /// <seealso cref="PriceRuleCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCountry.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleCountry/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing price rule country.")]
    public partial class UpdatePriceRuleCountry : PriceRuleCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate price rule country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCountry.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleCountry/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule country from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate price rule country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCountry.Deactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleCountry/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule country from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCountry.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleCountry/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule country from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCountry.Reactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleCountry/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule country from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCountry.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleCountry/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific price rule country from the system [Hard-Delete]")]
    public partial class DeletePriceRuleCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCountry.Delete"),
        PublicAPI,
        Route("/Pricing/PriceRuleCountry/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific price rule country from the system [Hard-Delete]")]
    public partial class DeletePriceRuleCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear price rule country cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleCountry/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all price rule country calls.")]
    public class ClearPriceRuleCountryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PriceRuleCountryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPriceRuleCountries"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleCountries request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPriceRuleCountryModel, PriceRuleCountryModel, IPriceRuleCountrySearchModel, PriceRuleCountryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PriceRuleCountries)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleCountriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPriceRuleCountriesForConnect request)
        {
            return await Workflows.PriceRuleCountries.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleCountriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleCountriesDigest request)
        {
            return await Workflows.PriceRuleCountries.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPriceRuleCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleCountryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PriceRuleCountries, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleCountryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PriceRuleCountries, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPriceRuleCountryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleCountryExistsByID request)
        {
            return await Workflows.PriceRuleCountries.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPriceRuleCountryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleCountryExistsByKey request)
        {
            return await Workflows.PriceRuleCountries.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPriceRuleCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPriceRuleCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCountryDataAsync,
                    () => Workflows.PriceRuleCountries.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePriceRuleCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePriceRuleCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCountryDataAsync,
                    () => Workflows.PriceRuleCountries.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePriceRuleCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePriceRuleCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCountryDataAsync,
                    () => Workflows.PriceRuleCountries.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCountryDataAsync,
                    () => Workflows.PriceRuleCountries.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCountryDataAsync,
                    () => Workflows.PriceRuleCountries.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCountryDataAsync,
                    () => Workflows.PriceRuleCountries.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCountryDataAsync,
                    () => Workflows.PriceRuleCountries.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePriceRuleCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCountryDataAsync,
                    () => Workflows.PriceRuleCountries.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePriceRuleCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCountryDataAsync,
                    () => Workflows.PriceRuleCountries.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPriceRuleCountryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPriceRuleCountryCache request)
        {
            await ClearCachedPriceRuleCountryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPriceRuleCountryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPriceRuleCountries>(string.Empty),
                    UrnId.Create<GetPriceRuleCountryByID>(string.Empty),
                    UrnId.Create<GetPriceRuleCountryByKey>(string.Empty),
                    UrnId.Create<CheckPriceRuleCountryExistsByID>(string.Empty),
                    UrnId.Create<CheckPriceRuleCountryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PriceRuleCountryService : PriceRuleCountryServiceBase { }
}
