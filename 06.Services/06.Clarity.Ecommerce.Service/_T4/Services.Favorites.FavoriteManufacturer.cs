// <autogenerated>
// <copyright file="FavoriteManufacturerService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the favorite manufacturer service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of favorite manufacturers.</summary>
    /// <seealso cref="FavoriteManufacturerSearchModel"/>
    /// <seealso cref="IReturn{FavoriteManufacturerPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteManufacturers", "GET", Priority = 1,
            Summary = "Use to get a list of favorite manufacturers")]
    public partial class GetFavoriteManufacturers : FavoriteManufacturerSearchModel, IReturn<FavoriteManufacturerPagedResults> { }

    /// <summary>A ServiceStack Route to get favorite manufacturers for connect.</summary>
    /// <seealso cref="FavoriteManufacturerSearchModel"/>
    /// <seealso cref="IReturn{List{FavoriteManufacturerModel}}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteManufacturer.View"),
        PublicAPI,
        Route("/Favorites/FavoriteManufacturersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all favorite manufacturers")]
    public partial class GetFavoriteManufacturersForConnect : FavoriteManufacturerSearchModel, IReturn<List<FavoriteManufacturerModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all favorite manufacturers.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteManufacturer.View"),
        PublicAPI,
        Route("/Favorites/FavoriteManufacturersDigest", "GET",
            Summary = "Use to get a hash representing each favorite manufacturers")]
    public partial class GetFavoriteManufacturersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get favorite manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FavoriteManufacturerModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteManufacturer/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific favorite manufacturer")]
    public partial class GetFavoriteManufacturerByID : ImplementsIDBase, IReturn<FavoriteManufacturerModel> { }

    /// <summary>A ServiceStack Route to get favorite manufacturer.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FavoriteManufacturerModel}"/>
    [PublicAPI,
        Route("/Favorites/FavoriteManufacturer/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific favorite manufacturer by the custom key")]
    public partial class GetFavoriteManufacturerByKey : ImplementsKeyBase, IReturn<FavoriteManufacturerModel> { }

    /// <summary>A ServiceStack Route to check favorite manufacturer exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteManufacturer.View"),
        PublicAPI,
        Route("/Favorites/FavoriteManufacturer/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFavoriteManufacturerExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check favorite manufacturer exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteManufacturer.View"),
        PublicAPI,
        Route("/Favorites/FavoriteManufacturer/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFavoriteManufacturerExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create favorite manufacturer.</summary>
    /// <seealso cref="FavoriteManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteManufacturer.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteManufacturer/Create", "POST", Priority = 1,
            Summary = "Use to create a new favorite manufacturer.")]
    public partial class CreateFavoriteManufacturer : FavoriteManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert favorite manufacturer.</summary>
    /// <seealso cref="FavoriteManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Favorites/FavoriteManufacturer/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing favorite manufacturer (as needed).")]
    public partial class UpsertFavoriteManufacturer : FavoriteManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update favorite manufacturer.</summary>
    /// <seealso cref="FavoriteManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteManufacturer.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteManufacturer/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing favorite manufacturer.")]
    public partial class UpdateFavoriteManufacturer : FavoriteManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate favorite manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteManufacturer.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteManufacturer/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific favorite manufacturer from the system [Soft-Delete]")]
    public partial class DeactivateFavoriteManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate favorite manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteManufacturer.Deactivate"),
        PublicAPI,
        Route("/Favorites/FavoriteManufacturer/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific favorite manufacturer from the system [Soft-Delete]")]
    public partial class DeactivateFavoriteManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate favorite manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteManufacturer.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteManufacturer/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific favorite manufacturer from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFavoriteManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate favorite manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteManufacturer.Reactivate"),
        PublicAPI,
        Route("/Favorites/FavoriteManufacturer/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific favorite manufacturer from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFavoriteManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete favorite manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteManufacturer.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteManufacturer/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific favorite manufacturer from the system [Hard-Delete]")]
    public partial class DeleteFavoriteManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete favorite manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteManufacturer.Delete"),
        PublicAPI,
        Route("/Favorites/FavoriteManufacturer/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific favorite manufacturer from the system [Hard-Delete]")]
    public partial class DeleteFavoriteManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear favorite manufacturer cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteManufacturer/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all favorite manufacturer calls.")]
    public class ClearFavoriteManufacturerCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FavoriteManufacturerServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFavoriteManufacturers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteManufacturers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFavoriteManufacturerModel, FavoriteManufacturerModel, IFavoriteManufacturerSearchModel, FavoriteManufacturerPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FavoriteManufacturers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteManufacturersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFavoriteManufacturersForConnect request)
        {
            return await Workflows.FavoriteManufacturers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteManufacturersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteManufacturersDigest request)
        {
            return await Workflows.FavoriteManufacturers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFavoriteManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteManufacturerByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FavoriteManufacturers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteManufacturerByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FavoriteManufacturers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFavoriteManufacturerExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFavoriteManufacturerExistsByID request)
        {
            return await Workflows.FavoriteManufacturers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFavoriteManufacturerExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFavoriteManufacturerExistsByKey request)
        {
            return await Workflows.FavoriteManufacturers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFavoriteManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFavoriteManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteManufacturerDataAsync,
                    () => Workflows.FavoriteManufacturers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFavoriteManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFavoriteManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteManufacturerDataAsync,
                    () => Workflows.FavoriteManufacturers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFavoriteManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFavoriteManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteManufacturerDataAsync,
                    () => Workflows.FavoriteManufacturers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFavoriteManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFavoriteManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteManufacturerDataAsync,
                    () => Workflows.FavoriteManufacturers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFavoriteManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFavoriteManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteManufacturerDataAsync,
                    () => Workflows.FavoriteManufacturers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFavoriteManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFavoriteManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteManufacturerDataAsync,
                    () => Workflows.FavoriteManufacturers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFavoriteManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFavoriteManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteManufacturerDataAsync,
                    () => Workflows.FavoriteManufacturers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFavoriteManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFavoriteManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteManufacturerDataAsync,
                    () => Workflows.FavoriteManufacturers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFavoriteManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFavoriteManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteManufacturerDataAsync,
                    () => Workflows.FavoriteManufacturers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFavoriteManufacturerCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFavoriteManufacturerCache request)
        {
            await ClearCachedFavoriteManufacturerDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFavoriteManufacturerDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFavoriteManufacturers>(string.Empty),
                    UrnId.Create<GetFavoriteManufacturerByID>(string.Empty),
                    UrnId.Create<GetFavoriteManufacturerByKey>(string.Empty),
                    UrnId.Create<CheckFavoriteManufacturerExistsByID>(string.Empty),
                    UrnId.Create<CheckFavoriteManufacturerExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FavoriteManufacturerService : FavoriteManufacturerServiceBase { }
}
