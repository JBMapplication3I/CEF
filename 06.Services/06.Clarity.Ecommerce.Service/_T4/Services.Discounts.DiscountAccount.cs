// <autogenerated>
// <copyright file="DiscountAccountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount account service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discount accounts.</summary>
    /// <seealso cref="DiscountAccountSearchModel"/>
    /// <seealso cref="IReturn{DiscountAccountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountAccounts", "GET", Priority = 1,
            Summary = "Use to get a list of discount accounts")]
    public partial class GetDiscountAccounts : DiscountAccountSearchModel, IReturn<DiscountAccountPagedResults> { }

    /// <summary>A ServiceStack Route to get discount accounts for connect.</summary>
    /// <seealso cref="DiscountAccountSearchModel"/>
    /// <seealso cref="IReturn{List{DiscountAccountModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccount.View"),
        PublicAPI,
        Route("/Discounts/DiscountAccountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discount accounts")]
    public partial class GetDiscountAccountsForConnect : DiscountAccountSearchModel, IReturn<List<DiscountAccountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discount accounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccount.View"),
        PublicAPI,
        Route("/Discounts/DiscountAccountsDigest", "GET",
            Summary = "Use to get a hash representing each discount accounts")]
    public partial class GetDiscountAccountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountAccountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountAccount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount account")]
    public partial class GetDiscountAccountByID : ImplementsIDBase, IReturn<DiscountAccountModel> { }

    /// <summary>A ServiceStack Route to get discount account.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountAccountModel}"/>
    [PublicAPI,
        Route("/Discounts/DiscountAccount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount account by the custom key")]
    public partial class GetDiscountAccountByKey : ImplementsKeyBase, IReturn<DiscountAccountModel> { }

    /// <summary>A ServiceStack Route to check discount account exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccount.View"),
        PublicAPI,
        Route("/Discounts/DiscountAccount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountAccountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount account exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccount.View"),
        PublicAPI,
        Route("/Discounts/DiscountAccount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountAccountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount account.</summary>
    /// <seealso cref="DiscountAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountAccount/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount account.")]
    public partial class CreateDiscountAccount : DiscountAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount account.</summary>
    /// <seealso cref="DiscountAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/DiscountAccount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount account (as needed).")]
    public partial class UpsertDiscountAccount : DiscountAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount account.</summary>
    /// <seealso cref="DiscountAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountAccount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount account.")]
    public partial class UpdateDiscountAccount : DiscountAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountAccount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount account from the system [Soft-Delete]")]
    public partial class DeactivateDiscountAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccount.Deactivate"),
        PublicAPI,
        Route("/Discounts/DiscountAccount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount account from the system [Soft-Delete]")]
    public partial class DeactivateDiscountAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountAccount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount account from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccount.Reactivate"),
        PublicAPI,
        Route("/Discounts/DiscountAccount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount account from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountAccount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount account from the system [Hard-Delete]")]
    public partial class DeleteDiscountAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountAccount.Delete"),
        PublicAPI,
        Route("/Discounts/DiscountAccount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount account from the system [Hard-Delete]")]
    public partial class DeleteDiscountAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount account cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountAccount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount account calls.")]
    public class ClearDiscountAccountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountAccountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscountAccounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountAccounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountAccountModel, DiscountAccountModel, IDiscountAccountSearchModel, DiscountAccountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DiscountAccounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountAccountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountAccountsForConnect request)
        {
            return await Workflows.DiscountAccounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountAccountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountAccountsDigest request)
        {
            return await Workflows.DiscountAccounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountAccountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DiscountAccounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountAccountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DiscountAccounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountAccountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountAccountExistsByID request)
        {
            return await Workflows.DiscountAccounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountAccountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountAccountExistsByKey request)
        {
            return await Workflows.DiscountAccounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscountAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscountAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountDataAsync,
                    () => Workflows.DiscountAccounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscountAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscountAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountDataAsync,
                    () => Workflows.DiscountAccounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscountAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscountAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountDataAsync,
                    () => Workflows.DiscountAccounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountDataAsync,
                    () => Workflows.DiscountAccounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountDataAsync,
                    () => Workflows.DiscountAccounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountDataAsync,
                    () => Workflows.DiscountAccounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountDataAsync,
                    () => Workflows.DiscountAccounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountDataAsync,
                    () => Workflows.DiscountAccounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountAccountDataAsync,
                    () => Workflows.DiscountAccounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountAccountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountAccountCache request)
        {
            await ClearCachedDiscountAccountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountAccountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscountAccounts>(string.Empty),
                    UrnId.Create<GetDiscountAccountByID>(string.Empty),
                    UrnId.Create<GetDiscountAccountByKey>(string.Empty),
                    UrnId.Create<CheckDiscountAccountExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountAccountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountAccountService : DiscountAccountServiceBase { }
}
