// <autogenerated>
// <copyright file="RegionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the region service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of regions.</summary>
    /// <seealso cref="RegionSearchModel"/>
    /// <seealso cref="IReturn{RegionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/Regions", "GET", Priority = 1,
            Summary = "Use to get a list of regions")]
    public partial class GetRegions : RegionSearchModel, IReturn<RegionPagedResults> { }

    /// <summary>A ServiceStack Route to get regions for connect.</summary>
    /// <seealso cref="RegionSearchModel"/>
    /// <seealso cref="IReturn{List{RegionModel}}"/>
    [Authenticate, RequiredPermission("Geography.Region.View"),
        PublicAPI,
        Route("/Geography/RegionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all regions")]
    public partial class GetRegionsForConnect : RegionSearchModel, IReturn<List<RegionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all regions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.Region.View"),
        PublicAPI,
        Route("/Geography/RegionsDigest", "GET",
            Summary = "Use to get a hash representing each regions")]
    public partial class GetRegionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{RegionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/Region/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific region")]
    public partial class GetRegionByID : ImplementsIDBase, IReturn<RegionModel> { }

    /// <summary>A ServiceStack Route to get region.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{RegionModel}"/>
    [PublicAPI,
        Route("/Geography/Region/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific region by the custom key")]
    public partial class GetRegionByKey : ImplementsKeyBase, IReturn<RegionModel> { }

    /// <summary>A ServiceStack Route to get region.</summary>
    /// <seealso cref="IReturn{RegionModel}"/>
    [PublicAPI,
        Route("/Geography/Region/Name", "GET", Priority = 1,
            Summary = "Use to get a specific region by the name")]
    public partial class GetRegionByName : ImplementsNameBase, IReturn<RegionModel> { }

    /// <summary>A ServiceStack Route to check region exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.Region.View"),
        PublicAPI,
        Route("/Geography/Region/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckRegionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check region exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.Region.View"),
        PublicAPI,
        Route("/Geography/Region/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckRegionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check region exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.Region.View"),
        PublicAPI,
        Route("/Geography/Region/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckRegionExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create region.</summary>
    /// <seealso cref="RegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.Region.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/Region/Create", "POST", Priority = 1,
            Summary = "Use to create a new region.")]
    public partial class CreateRegion : RegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert region.</summary>
    /// <seealso cref="RegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/Region/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing region (as needed).")]
    public partial class UpsertRegion : RegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update region.</summary>
    /// <seealso cref="RegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.Region.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/Region/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing region.")]
    public partial class UpdateRegion : RegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.Region.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/Region/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific region from the system [Soft-Delete]")]
    public partial class DeactivateRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.Region.Deactivate"),
        PublicAPI,
        Route("/Geography/Region/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific region from the system [Soft-Delete]")]
    public partial class DeactivateRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.Region.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/Region/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific region from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.Region.Reactivate"),
        PublicAPI,
        Route("/Geography/Region/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific region from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.Region.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/Region/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific region from the system [Hard-Delete]")]
    public partial class DeleteRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.Region.Delete"),
        PublicAPI,
        Route("/Geography/Region/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific region from the system [Hard-Delete]")]
    public partial class DeleteRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear region cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/Region/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all region calls.")]
    public class ClearRegionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class RegionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetRegions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IRegionModel, RegionModel, IRegionSearchModel, RegionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Regions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRegionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetRegionsForConnect request)
        {
            return await Workflows.Regions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRegionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionsDigest request)
        {
            return await Workflows.Regions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Regions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Regions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRegionByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Regions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckRegionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRegionExistsByID request)
        {
            return await Workflows.Regions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRegionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRegionExistsByKey request)
        {
            return await Workflows.Regions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRegionExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRegionExistsByName request)
        {
            return await Workflows.Regions.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionDataAsync,
                    () => Workflows.Regions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionDataAsync,
                    () => Workflows.Regions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionDataAsync,
                    () => Workflows.Regions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionDataAsync,
                    () => Workflows.Regions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionDataAsync,
                    () => Workflows.Regions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionDataAsync,
                    () => Workflows.Regions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionDataAsync,
                    () => Workflows.Regions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionDataAsync,
                    () => Workflows.Regions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionDataAsync,
                    () => Workflows.Regions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearRegionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearRegionCache request)
        {
            await ClearCachedRegionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedRegionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetRegions>(string.Empty),
                    UrnId.Create<GetRegionByID>(string.Empty),
                    UrnId.Create<GetRegionByKey>(string.Empty),
                    UrnId.Create<GetRegionByName>(string.Empty),
                    UrnId.Create<CheckRegionExistsByID>(string.Empty),
                    UrnId.Create<CheckRegionExistsByKey>(string.Empty),
                    UrnId.Create<CheckRegionExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class RegionService : RegionServiceBase { }
}
