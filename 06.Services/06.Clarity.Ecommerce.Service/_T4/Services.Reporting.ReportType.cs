// <autogenerated>
// <copyright file="ReportTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the report type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of report types.</summary>
    /// <seealso cref="ReportTypeSearchModel"/>
    /// <seealso cref="IReturn{ReportTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Reporting/ReportTypes", "GET", Priority = 1,
            Summary = "Use to get a list of report types")]
    public partial class GetReportTypes : ReportTypeSearchModel, IReturn<ReportTypePagedResults> { }

    /// <summary>A ServiceStack Route to get report types for connect.</summary>
    /// <seealso cref="ReportTypeSearchModel"/>
    /// <seealso cref="IReturn{List{ReportTypeModel}}"/>
    [Authenticate, RequiredPermission("Reporting.ReportType.View"),
        PublicAPI,
        Route("/Reporting/ReportTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all report types")]
    public partial class GetReportTypesForConnect : ReportTypeSearchModel, IReturn<List<ReportTypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all report types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Reporting.ReportType.View"),
        PublicAPI,
        Route("/Reporting/ReportTypesDigest", "GET",
            Summary = "Use to get a hash representing each report types")]
    public partial class GetReportTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get report type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ReportTypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Reporting/ReportType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific report type")]
    public partial class GetReportTypeByID : ImplementsIDBase, IReturn<ReportTypeModel> { }

    /// <summary>A ServiceStack Route to get report type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ReportTypeModel}"/>
    [PublicAPI,
        Route("/Reporting/ReportType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific report type by the custom key")]
    public partial class GetReportTypeByKey : ImplementsKeyBase, IReturn<ReportTypeModel> { }

    /// <summary>A ServiceStack Route to get report type.</summary>
    /// <seealso cref="IReturn{ReportTypeModel}"/>
    [PublicAPI,
        Route("/Reporting/ReportType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific report type by the name")]
    public partial class GetReportTypeByName : ImplementsNameBase, IReturn<ReportTypeModel> { }

    /// <summary>A ServiceStack Route to get report type.</summary>
    /// <seealso cref="IReturn{ReportTypeModel}"/>
    [PublicAPI,
        Route("/Reporting/ReportType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific report type by the name")]
    public partial class GetReportTypeByDisplayName : ImplementsDisplayNameBase, IReturn<ReportTypeModel> { }

    /// <summary>A ServiceStack Route to check report type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Reporting.ReportType.View"),
        PublicAPI,
        Route("/Reporting/ReportType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckReportTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check report type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Reporting.ReportType.View"),
        PublicAPI,
        Route("/Reporting/ReportType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckReportTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check report type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Reporting.ReportType.View"),
        PublicAPI,
        Route("/Reporting/ReportType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckReportTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check report type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Reporting.ReportType.View"),
        PublicAPI,
        Route("/Reporting/ReportType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckReportTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create report type.</summary>
    /// <seealso cref="ReportTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Reporting.ReportType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reporting/ReportType/Create", "POST", Priority = 1,
            Summary = "Use to create a new report type.")]
    public partial class CreateReportType : ReportTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert report type.</summary>
    /// <seealso cref="ReportTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Reporting/ReportType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing report type (as needed).")]
    public partial class UpsertReportType : ReportTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update report type.</summary>
    /// <seealso cref="ReportTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Reporting.ReportType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reporting/ReportType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing report type.")]
    public partial class UpdateReportType : ReportTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate report type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reporting.ReportType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reporting/ReportType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific report type from the system [Soft-Delete]")]
    public partial class DeactivateReportTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate report type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reporting.ReportType.Deactivate"),
        PublicAPI,
        Route("/Reporting/ReportType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific report type from the system [Soft-Delete]")]
    public partial class DeactivateReportTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate report type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reporting.ReportType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reporting/ReportType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific report type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateReportTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate report type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reporting.ReportType.Reactivate"),
        PublicAPI,
        Route("/Reporting/ReportType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific report type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateReportTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete report type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reporting.ReportType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reporting/ReportType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific report type from the system [Hard-Delete]")]
    public partial class DeleteReportTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete report type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reporting.ReportType.Delete"),
        PublicAPI,
        Route("/Reporting/ReportType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific report type from the system [Hard-Delete]")]
    public partial class DeleteReportTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear report type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Reporting/ReportType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all report type calls.")]
    public class ClearReportTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ReportTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetReportTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReportTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IReportTypeModel, ReportTypeModel, IReportTypeSearchModel, ReportTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ReportTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReportTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetReportTypesForConnect request)
        {
            return await Workflows.ReportTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReportTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReportTypesDigest request)
        {
            return await Workflows.ReportTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetReportTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReportTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ReportTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReportTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReportTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ReportTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReportTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReportTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ReportTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReportTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReportTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.ReportTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckReportTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReportTypeExistsByID request)
        {
            return await Workflows.ReportTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReportTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReportTypeExistsByKey request)
        {
            return await Workflows.ReportTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReportTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReportTypeExistsByName request)
        {
            return await Workflows.ReportTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReportTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReportTypeExistsByDisplayName request)
        {
            return await Workflows.ReportTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertReportType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertReportType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReportTypeDataAsync,
                    () => Workflows.ReportTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateReportType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateReportType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReportTypeDataAsync,
                    () => Workflows.ReportTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateReportType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateReportType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReportTypeDataAsync,
                    () => Workflows.ReportTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateReportTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateReportTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReportTypeDataAsync,
                    () => Workflows.ReportTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateReportTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateReportTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReportTypeDataAsync,
                    () => Workflows.ReportTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateReportTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateReportTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReportTypeDataAsync,
                    () => Workflows.ReportTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateReportTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateReportTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReportTypeDataAsync,
                    () => Workflows.ReportTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteReportTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteReportTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReportTypeDataAsync,
                    () => Workflows.ReportTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteReportTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteReportTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReportTypeDataAsync,
                    () => Workflows.ReportTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearReportTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearReportTypeCache request)
        {
            await ClearCachedReportTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedReportTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetReportTypes>(string.Empty),
                    UrnId.Create<GetReportTypeByID>(string.Empty),
                    UrnId.Create<GetReportTypeByKey>(string.Empty),
                    UrnId.Create<GetReportTypeByName>(string.Empty),
                    UrnId.Create<CheckReportTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckReportTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckReportTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckReportTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ReportTypeService : ReportTypeServiceBase { }
}
