// <autogenerated>
// <copyright file="MessageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the message service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of messages.</summary>
    /// <seealso cref="MessageSearchModel"/>
    /// <seealso cref="IReturn{MessagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/Messages", "GET", Priority = 1,
            Summary = "Use to get a list of messages")]
    public partial class GetMessages : MessageSearchModel, IReturn<MessagePagedResults> { }

    /// <summary>A ServiceStack Route to get messages for connect.</summary>
    /// <seealso cref="MessageSearchModel"/>
    /// <seealso cref="IReturn{List{MessageModel}}"/>
    [Authenticate, RequiredPermission("Messaging.Message.View"),
        PublicAPI,
        Route("/Messaging/MessagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all messages")]
    public partial class GetMessagesForConnect : MessageSearchModel, IReturn<List<MessageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all messages.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Messaging.Message.View"),
        PublicAPI,
        Route("/Messaging/MessagesDigest", "GET",
            Summary = "Use to get a hash representing each messages")]
    public partial class GetMessagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get message.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{MessageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/Message/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific message")]
    public partial class GetMessageByID : ImplementsIDBase, IReturn<MessageModel> { }

    /// <summary>A ServiceStack Route to get message.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{MessageModel}"/>
    [PublicAPI,
        Route("/Messaging/Message/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific message by the custom key")]
    public partial class GetMessageByKey : ImplementsKeyBase, IReturn<MessageModel> { }

    /// <summary>A ServiceStack Route to check message exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.Message.View"),
        PublicAPI,
        Route("/Messaging/Message/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckMessageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check message exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.Message.View"),
        PublicAPI,
        Route("/Messaging/Message/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckMessageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create message.</summary>
    /// <seealso cref="MessageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.Message.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/Message/Create", "POST", Priority = 1,
            Summary = "Use to create a new message.")]
    public partial class CreateMessage : MessageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert message.</summary>
    /// <seealso cref="MessageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Messaging/Message/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing message (as needed).")]
    public partial class UpsertMessage : MessageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update message.</summary>
    /// <seealso cref="MessageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.Message.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/Message/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing message.")]
    public partial class UpdateMessage : MessageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate message.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.Message.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/Message/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific message from the system [Soft-Delete]")]
    public partial class DeactivateMessageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate message by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.Message.Deactivate"),
        PublicAPI,
        Route("/Messaging/Message/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific message from the system [Soft-Delete]")]
    public partial class DeactivateMessageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate message.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.Message.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/Message/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific message from the system [Restore from Soft-Delete]")]
    public partial class ReactivateMessageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate message by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.Message.Reactivate"),
        PublicAPI,
        Route("/Messaging/Message/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific message from the system [Restore from Soft-Delete]")]
    public partial class ReactivateMessageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete message.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.Message.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/Message/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific message from the system [Hard-Delete]")]
    public partial class DeleteMessageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete message by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.Message.Delete"),
        PublicAPI,
        Route("/Messaging/Message/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific message from the system [Hard-Delete]")]
    public partial class DeleteMessageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear message cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/Message/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all message calls.")]
    public class ClearMessageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class MessageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetMessages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMessages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IMessageModel, MessageModel, IMessageSearchModel, MessagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Messages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMessagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetMessagesForConnect request)
        {
            return await Workflows.Messages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMessagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMessagesDigest request)
        {
            return await Workflows.Messages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetMessageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMessageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Messages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMessageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMessageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Messages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckMessageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMessageExistsByID request)
        {
            return await Workflows.Messages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckMessageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMessageExistsByKey request)
        {
            return await Workflows.Messages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertMessage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertMessage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageDataAsync,
                    () => Workflows.Messages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateMessage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateMessage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageDataAsync,
                    () => Workflows.Messages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateMessage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateMessage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageDataAsync,
                    () => Workflows.Messages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateMessageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateMessageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageDataAsync,
                    () => Workflows.Messages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateMessageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateMessageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageDataAsync,
                    () => Workflows.Messages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateMessageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateMessageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageDataAsync,
                    () => Workflows.Messages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateMessageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateMessageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageDataAsync,
                    () => Workflows.Messages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteMessageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteMessageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageDataAsync,
                    () => Workflows.Messages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteMessageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteMessageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageDataAsync,
                    () => Workflows.Messages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearMessageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearMessageCache request)
        {
            await ClearCachedMessageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedMessageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetMessages>(string.Empty),
                    UrnId.Create<GetMessageByID>(string.Empty),
                    UrnId.Create<GetMessageByKey>(string.Empty),
                    UrnId.Create<CheckMessageExistsByID>(string.Empty),
                    UrnId.Create<CheckMessageExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class MessageService : MessageServiceBase { }
}
