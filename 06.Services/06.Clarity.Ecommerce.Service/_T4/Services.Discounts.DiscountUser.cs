// <autogenerated>
// <copyright file="DiscountUserService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount user service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discount users.</summary>
    /// <seealso cref="DiscountUserSearchModel"/>
    /// <seealso cref="IReturn{DiscountUserPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountUsers", "GET", Priority = 1,
            Summary = "Use to get a list of discount users")]
    public partial class GetDiscountUsers : DiscountUserSearchModel, IReturn<DiscountUserPagedResults> { }

    /// <summary>A ServiceStack Route to get discount users for connect.</summary>
    /// <seealso cref="DiscountUserSearchModel"/>
    /// <seealso cref="IReturn{List{DiscountUserModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUser.View"),
        PublicAPI,
        Route("/Discounts/DiscountUsersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discount users")]
    public partial class GetDiscountUsersForConnect : DiscountUserSearchModel, IReturn<List<DiscountUserModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discount users.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUser.View"),
        PublicAPI,
        Route("/Discounts/DiscountUsersDigest", "GET",
            Summary = "Use to get a hash representing each discount users")]
    public partial class GetDiscountUsersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountUserModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountUser/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount user")]
    public partial class GetDiscountUserByID : ImplementsIDBase, IReturn<DiscountUserModel> { }

    /// <summary>A ServiceStack Route to get discount user.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountUserModel}"/>
    [PublicAPI,
        Route("/Discounts/DiscountUser/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount user by the custom key")]
    public partial class GetDiscountUserByKey : ImplementsKeyBase, IReturn<DiscountUserModel> { }

    /// <summary>A ServiceStack Route to check discount user exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUser.View"),
        PublicAPI,
        Route("/Discounts/DiscountUser/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountUserExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount user exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUser.View"),
        PublicAPI,
        Route("/Discounts/DiscountUser/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountUserExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount user.</summary>
    /// <seealso cref="DiscountUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUser.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountUser/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount user.")]
    public partial class CreateDiscountUser : DiscountUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount user.</summary>
    /// <seealso cref="DiscountUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/DiscountUser/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount user (as needed).")]
    public partial class UpsertDiscountUser : DiscountUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount user.</summary>
    /// <seealso cref="DiscountUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUser.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountUser/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount user.")]
    public partial class UpdateDiscountUser : DiscountUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUser.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountUser/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount user from the system [Soft-Delete]")]
    public partial class DeactivateDiscountUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUser.Deactivate"),
        PublicAPI,
        Route("/Discounts/DiscountUser/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount user from the system [Soft-Delete]")]
    public partial class DeactivateDiscountUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUser.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountUser/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount user from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUser.Reactivate"),
        PublicAPI,
        Route("/Discounts/DiscountUser/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount user from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUser.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountUser/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount user from the system [Hard-Delete]")]
    public partial class DeleteDiscountUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountUser.Delete"),
        PublicAPI,
        Route("/Discounts/DiscountUser/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount user from the system [Hard-Delete]")]
    public partial class DeleteDiscountUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount user cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountUser/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount user calls.")]
    public class ClearDiscountUserCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountUserServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscountUsers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountUsers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountUserModel, DiscountUserModel, IDiscountUserSearchModel, DiscountUserPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DiscountUsers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountUsersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountUsersForConnect request)
        {
            return await Workflows.DiscountUsers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountUsersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountUsersDigest request)
        {
            return await Workflows.DiscountUsers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountUserByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DiscountUsers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountUserByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DiscountUsers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountUserExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountUserExistsByID request)
        {
            return await Workflows.DiscountUsers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountUserExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountUserExistsByKey request)
        {
            return await Workflows.DiscountUsers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscountUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscountUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserDataAsync,
                    () => Workflows.DiscountUsers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscountUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscountUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserDataAsync,
                    () => Workflows.DiscountUsers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscountUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscountUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserDataAsync,
                    () => Workflows.DiscountUsers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserDataAsync,
                    () => Workflows.DiscountUsers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserDataAsync,
                    () => Workflows.DiscountUsers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserDataAsync,
                    () => Workflows.DiscountUsers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserDataAsync,
                    () => Workflows.DiscountUsers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserDataAsync,
                    () => Workflows.DiscountUsers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountUserDataAsync,
                    () => Workflows.DiscountUsers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountUserCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountUserCache request)
        {
            await ClearCachedDiscountUserDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountUserDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscountUsers>(string.Empty),
                    UrnId.Create<GetDiscountUserByID>(string.Empty),
                    UrnId.Create<GetDiscountUserByKey>(string.Empty),
                    UrnId.Create<CheckDiscountUserExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountUserExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountUserService : DiscountUserServiceBase { }
}
