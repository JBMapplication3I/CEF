// <autogenerated>
// <copyright file="FranchiseAuctionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise auction service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise auctions.</summary>
    /// <seealso cref="FranchiseAuctionSearchModel"/>
    /// <seealso cref="IReturn{FranchiseAuctionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/FranchiseAuctions", "GET", Priority = 1,
            Summary = "Use to get a list of franchise auctions")]
    public partial class GetFranchiseAuctions : FranchiseAuctionSearchModel, IReturn<FranchiseAuctionPagedResults> { }

    /// <summary>A ServiceStack Route to get franchise auctions for connect.</summary>
    /// <seealso cref="FranchiseAuctionSearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseAuctionModel}}"/>
    [Authenticate, RequiredPermission("Auctions.FranchiseAuction.View"),
        PublicAPI,
        Route("/Auctions/FranchiseAuctionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise auctions")]
    public partial class GetFranchiseAuctionsForConnect : FranchiseAuctionSearchModel, IReturn<List<FranchiseAuctionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise auctions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Auctions.FranchiseAuction.View"),
        PublicAPI,
        Route("/Auctions/FranchiseAuctionsDigest", "GET",
            Summary = "Use to get a hash representing each franchise auctions")]
    public partial class GetFranchiseAuctionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseAuctionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/FranchiseAuction/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise auction")]
    public partial class GetFranchiseAuctionByID : ImplementsIDBase, IReturn<FranchiseAuctionModel> { }

    /// <summary>A ServiceStack Route to get franchise auction.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseAuctionModel}"/>
    [PublicAPI,
        Route("/Auctions/FranchiseAuction/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise auction by the custom key")]
    public partial class GetFranchiseAuctionByKey : ImplementsKeyBase, IReturn<FranchiseAuctionModel> { }

    /// <summary>A ServiceStack Route to check franchise auction exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.FranchiseAuction.View"),
        PublicAPI,
        Route("/Auctions/FranchiseAuction/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseAuctionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise auction exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.FranchiseAuction.View"),
        PublicAPI,
        Route("/Auctions/FranchiseAuction/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseAuctionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise auction.</summary>
    /// <seealso cref="FranchiseAuctionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.FranchiseAuction.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/FranchiseAuction/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise auction.")]
    public partial class CreateFranchiseAuction : FranchiseAuctionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise auction.</summary>
    /// <seealso cref="FranchiseAuctionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Auctions/FranchiseAuction/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise auction (as needed).")]
    public partial class UpsertFranchiseAuction : FranchiseAuctionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise auction.</summary>
    /// <seealso cref="FranchiseAuctionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.FranchiseAuction.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/FranchiseAuction/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise auction.")]
    public partial class UpdateFranchiseAuction : FranchiseAuctionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.FranchiseAuction.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/FranchiseAuction/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise auction from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseAuctionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise auction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.FranchiseAuction.Deactivate"),
        PublicAPI,
        Route("/Auctions/FranchiseAuction/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise auction from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseAuctionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.FranchiseAuction.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/FranchiseAuction/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise auction from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseAuctionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise auction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.FranchiseAuction.Reactivate"),
        PublicAPI,
        Route("/Auctions/FranchiseAuction/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise auction from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseAuctionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.FranchiseAuction.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/FranchiseAuction/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise auction from the system [Hard-Delete]")]
    public partial class DeleteFranchiseAuctionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise auction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.FranchiseAuction.Delete"),
        PublicAPI,
        Route("/Auctions/FranchiseAuction/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise auction from the system [Hard-Delete]")]
    public partial class DeleteFranchiseAuctionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise auction cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/FranchiseAuction/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise auction calls.")]
    public class ClearFranchiseAuctionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseAuctionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseAuctions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseAuctions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseAuctionModel, FranchiseAuctionModel, IFranchiseAuctionSearchModel, FranchiseAuctionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseAuctions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseAuctionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseAuctionsForConnect request)
        {
            return await Workflows.FranchiseAuctions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseAuctionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseAuctionsDigest request)
        {
            return await Workflows.FranchiseAuctions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseAuctionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseAuctions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseAuctionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseAuctions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseAuctionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseAuctionExistsByID request)
        {
            return await Workflows.FranchiseAuctions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseAuctionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseAuctionExistsByKey request)
        {
            return await Workflows.FranchiseAuctions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseAuction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseAuction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAuctionDataAsync,
                    () => Workflows.FranchiseAuctions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseAuction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseAuction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAuctionDataAsync,
                    () => Workflows.FranchiseAuctions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseAuction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseAuction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAuctionDataAsync,
                    () => Workflows.FranchiseAuctions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseAuctionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAuctionDataAsync,
                    () => Workflows.FranchiseAuctions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseAuctionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAuctionDataAsync,
                    () => Workflows.FranchiseAuctions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseAuctionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAuctionDataAsync,
                    () => Workflows.FranchiseAuctions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseAuctionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAuctionDataAsync,
                    () => Workflows.FranchiseAuctions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseAuctionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAuctionDataAsync,
                    () => Workflows.FranchiseAuctions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseAuctionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseAuctionDataAsync,
                    () => Workflows.FranchiseAuctions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseAuctionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseAuctionCache request)
        {
            await ClearCachedFranchiseAuctionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseAuctionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseAuctions>(string.Empty),
                    UrnId.Create<GetFranchiseAuctionByID>(string.Empty),
                    UrnId.Create<GetFranchiseAuctionByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseAuctionExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseAuctionExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseAuctionService : FranchiseAuctionServiceBase { }
}
