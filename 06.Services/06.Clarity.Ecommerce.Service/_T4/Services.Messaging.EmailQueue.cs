// <autogenerated>
// <copyright file="EmailQueueService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the email queue service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of email queues.</summary>
    /// <seealso cref="EmailQueueSearchModel"/>
    /// <seealso cref="IReturn{EmailQueuePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailQueues", "GET", Priority = 1,
            Summary = "Use to get a list of email queues")]
    public partial class GetEmailQueues : EmailQueueSearchModel, IReturn<EmailQueuePagedResults> { }

    /// <summary>A ServiceStack Route to get email queues for connect.</summary>
    /// <seealso cref="EmailQueueSearchModel"/>
    /// <seealso cref="IReturn{List{EmailQueueModel}}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueue.View"),
        PublicAPI,
        Route("/Messaging/EmailQueuesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all email queues")]
    public partial class GetEmailQueuesForConnect : EmailQueueSearchModel, IReturn<List<EmailQueueModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all email queues.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueue.View"),
        PublicAPI,
        Route("/Messaging/EmailQueuesDigest", "GET",
            Summary = "Use to get a hash representing each email queues")]
    public partial class GetEmailQueuesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get email queue.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{EmailQueueModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailQueue/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific email queue")]
    public partial class GetEmailQueueByID : ImplementsIDBase, IReturn<EmailQueueModel> { }

    /// <summary>A ServiceStack Route to get email queue.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{EmailQueueModel}"/>
    [PublicAPI,
        Route("/Messaging/EmailQueue/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific email queue by the custom key")]
    public partial class GetEmailQueueByKey : ImplementsKeyBase, IReturn<EmailQueueModel> { }

    /// <summary>A ServiceStack Route to check email queue exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueue.View"),
        PublicAPI,
        Route("/Messaging/EmailQueue/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailQueueExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check email queue exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueue.View"),
        PublicAPI,
        Route("/Messaging/EmailQueue/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckEmailQueueExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create email queue.</summary>
    /// <seealso cref="EmailQueueModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueue.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailQueue/Create", "POST", Priority = 1,
            Summary = "Use to create a new email queue.")]
    public partial class CreateEmailQueue : EmailQueueModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert email queue.</summary>
    /// <seealso cref="EmailQueueModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Messaging/EmailQueue/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing email queue (as needed).")]
    public partial class UpsertEmailQueue : EmailQueueModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update email queue.</summary>
    /// <seealso cref="EmailQueueModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueue.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailQueue/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing email queue.")]
    public partial class UpdateEmailQueue : EmailQueueModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate email queue.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueue.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailQueue/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific email queue from the system [Soft-Delete]")]
    public partial class DeactivateEmailQueueByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate email queue by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueue.Deactivate"),
        PublicAPI,
        Route("/Messaging/EmailQueue/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific email queue from the system [Soft-Delete]")]
    public partial class DeactivateEmailQueueByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate email queue.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueue.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailQueue/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific email queue from the system [Restore from Soft-Delete]")]
    public partial class ReactivateEmailQueueByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate email queue by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueue.Reactivate"),
        PublicAPI,
        Route("/Messaging/EmailQueue/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific email queue from the system [Restore from Soft-Delete]")]
    public partial class ReactivateEmailQueueByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete email queue.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueue.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/EmailQueue/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific email queue from the system [Hard-Delete]")]
    public partial class DeleteEmailQueueByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete email queue by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.EmailQueue.Delete"),
        PublicAPI,
        Route("/Messaging/EmailQueue/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific email queue from the system [Hard-Delete]")]
    public partial class DeleteEmailQueueByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear email queue cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/EmailQueue/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all email queue calls.")]
    public class ClearEmailQueueCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class EmailQueueServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetEmailQueues"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailQueues request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IEmailQueueModel, EmailQueueModel, IEmailQueueSearchModel, EmailQueuePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.EmailQueues)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailQueuesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetEmailQueuesForConnect request)
        {
            return await Workflows.EmailQueues.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailQueuesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailQueuesDigest request)
        {
            return await Workflows.EmailQueues.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetEmailQueueByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailQueueByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.EmailQueues, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetEmailQueueByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetEmailQueueByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.EmailQueues, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckEmailQueueExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailQueueExistsByID request)
        {
            return await Workflows.EmailQueues.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckEmailQueueExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckEmailQueueExistsByKey request)
        {
            return await Workflows.EmailQueues.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertEmailQueue"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertEmailQueue request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueDataAsync,
                    () => Workflows.EmailQueues.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateEmailQueue"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateEmailQueue request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueDataAsync,
                    () => Workflows.EmailQueues.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateEmailQueue"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateEmailQueue request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueDataAsync,
                    () => Workflows.EmailQueues.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateEmailQueueByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateEmailQueueByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueDataAsync,
                    () => Workflows.EmailQueues.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateEmailQueueByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateEmailQueueByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueDataAsync,
                    () => Workflows.EmailQueues.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateEmailQueueByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateEmailQueueByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueDataAsync,
                    () => Workflows.EmailQueues.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateEmailQueueByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateEmailQueueByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueDataAsync,
                    () => Workflows.EmailQueues.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteEmailQueueByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteEmailQueueByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueDataAsync,
                    () => Workflows.EmailQueues.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteEmailQueueByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteEmailQueueByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedEmailQueueDataAsync,
                    () => Workflows.EmailQueues.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearEmailQueueCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearEmailQueueCache request)
        {
            await ClearCachedEmailQueueDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedEmailQueueDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetEmailQueues>(string.Empty),
                    UrnId.Create<GetEmailQueueByID>(string.Empty),
                    UrnId.Create<GetEmailQueueByKey>(string.Empty),
                    UrnId.Create<CheckEmailQueueExistsByID>(string.Empty),
                    UrnId.Create<CheckEmailQueueExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class EmailQueueService : EmailQueueServiceBase { }
}
