// <autogenerated>
// <copyright file="ProductDownloadService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the product download service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of product downloads.</summary>
    /// <seealso cref="ProductDownloadSearchModel"/>
    /// <seealso cref="IReturn{ProductDownloadPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductDownloads", "GET", Priority = 1,
            Summary = "Use to get a list of product downloads")]
    public partial class GetProductDownloads : ProductDownloadSearchModel, IReturn<ProductDownloadPagedResults> { }

    /// <summary>A ServiceStack Route to get product downloads for connect.</summary>
    /// <seealso cref="ProductDownloadSearchModel"/>
    /// <seealso cref="IReturn{List{ProductDownloadModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductDownload.View"),
        PublicAPI,
        Route("/Products/ProductDownloadsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all product downloads")]
    public partial class GetProductDownloadsForConnect : ProductDownloadSearchModel, IReturn<List<ProductDownloadModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all product downloads.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductDownload.View"),
        PublicAPI,
        Route("/Products/ProductDownloadsDigest", "GET",
            Summary = "Use to get a hash representing each product downloads")]
    public partial class GetProductDownloadsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get product download.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ProductDownloadModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductDownload/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific product download")]
    public partial class GetProductDownloadByID : ImplementsIDBase, IReturn<ProductDownloadModel> { }

    /// <summary>A ServiceStack Route to get product download.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ProductDownloadModel}"/>
    [PublicAPI,
        Route("/Products/ProductDownload/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific product download by the custom key")]
    public partial class GetProductDownloadByKey : ImplementsKeyBase, IReturn<ProductDownloadModel> { }

    /// <summary>A ServiceStack Route to get product download.</summary>
    /// <seealso cref="IReturn{ProductDownloadModel}"/>
    [PublicAPI,
        Route("/Products/ProductDownload/Name", "GET", Priority = 1,
            Summary = "Use to get a specific product download by the name")]
    public partial class GetProductDownloadByName : ImplementsNameBase, IReturn<ProductDownloadModel> { }

    /// <summary>A ServiceStack Route to check product download exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductDownload.View"),
        PublicAPI,
        Route("/Products/ProductDownload/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckProductDownloadExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product download exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductDownload.View"),
        PublicAPI,
        Route("/Products/ProductDownload/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckProductDownloadExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product download exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductDownload.View"),
        PublicAPI,
        Route("/Products/ProductDownload/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckProductDownloadExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create product download.</summary>
    /// <seealso cref="ProductDownloadModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductDownload.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductDownload/Create", "POST", Priority = 1,
            Summary = "Use to create a new product download.")]
    public partial class CreateProductDownload : ProductDownloadModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert product download.</summary>
    /// <seealso cref="ProductDownloadModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Products/ProductDownload/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing product download (as needed).")]
    public partial class UpsertProductDownload : ProductDownloadModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update product download.</summary>
    /// <seealso cref="ProductDownloadModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductDownload.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductDownload/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing product download.")]
    public partial class UpdateProductDownload : ProductDownloadModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate product download.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductDownload.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductDownload/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product download from the system [Soft-Delete]")]
    public partial class DeactivateProductDownloadByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate product download by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductDownload.Deactivate"),
        PublicAPI,
        Route("/Products/ProductDownload/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product download from the system [Soft-Delete]")]
    public partial class DeactivateProductDownloadByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product download.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductDownload.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductDownload/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product download from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductDownloadByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product download by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductDownload.Reactivate"),
        PublicAPI,
        Route("/Products/ProductDownload/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product download from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductDownloadByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product download.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductDownload.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductDownload/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific product download from the system [Hard-Delete]")]
    public partial class DeleteProductDownloadByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product download by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductDownload.Delete"),
        PublicAPI,
        Route("/Products/ProductDownload/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific product download from the system [Hard-Delete]")]
    public partial class DeleteProductDownloadByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear product download cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductDownload/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all product download calls.")]
    public class ClearProductDownloadCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ProductDownloadServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetProductDownloads"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductDownloads request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IProductDownloadModel, ProductDownloadModel, IProductDownloadSearchModel, ProductDownloadPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ProductDownloads)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductDownloadsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetProductDownloadsForConnect request)
        {
            return await Workflows.ProductDownloads.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductDownloadsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductDownloadsDigest request)
        {
            return await Workflows.ProductDownloads.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetProductDownloadByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductDownloadByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ProductDownloads, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductDownloadByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductDownloadByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ProductDownloads, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductDownloadByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductDownloadByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ProductDownloads, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckProductDownloadExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductDownloadExistsByID request)
        {
            return await Workflows.ProductDownloads.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductDownloadExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductDownloadExistsByKey request)
        {
            return await Workflows.ProductDownloads.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductDownloadExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductDownloadExistsByName request)
        {
            return await Workflows.ProductDownloads.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertProductDownload"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertProductDownload request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadDataAsync,
                    () => Workflows.ProductDownloads.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateProductDownload"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateProductDownload request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadDataAsync,
                    () => Workflows.ProductDownloads.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateProductDownload"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateProductDownload request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadDataAsync,
                    () => Workflows.ProductDownloads.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateProductDownloadByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductDownloadByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadDataAsync,
                    () => Workflows.ProductDownloads.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateProductDownloadByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductDownloadByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadDataAsync,
                    () => Workflows.ProductDownloads.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateProductDownloadByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductDownloadByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadDataAsync,
                    () => Workflows.ProductDownloads.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateProductDownloadByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductDownloadByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadDataAsync,
                    () => Workflows.ProductDownloads.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteProductDownloadByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductDownloadByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadDataAsync,
                    () => Workflows.ProductDownloads.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteProductDownloadByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductDownloadByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDownloadDataAsync,
                    () => Workflows.ProductDownloads.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearProductDownloadCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearProductDownloadCache request)
        {
            await ClearCachedProductDownloadDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedProductDownloadDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetProductDownloads>(string.Empty),
                    UrnId.Create<GetProductDownloadByID>(string.Empty),
                    UrnId.Create<GetProductDownloadByKey>(string.Empty),
                    UrnId.Create<GetProductDownloadByName>(string.Empty),
                    UrnId.Create<CheckProductDownloadExistsByID>(string.Empty),
                    UrnId.Create<CheckProductDownloadExistsByKey>(string.Empty),
                    UrnId.Create<CheckProductDownloadExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ProductDownloadService : ProductDownloadServiceBase { }
}
