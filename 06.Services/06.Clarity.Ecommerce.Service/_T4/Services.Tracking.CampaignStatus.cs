// <autogenerated>
// <copyright file="CampaignStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the campaign status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of campaign statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{CampaignStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/CampaignStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of campaign statuses")]
    public partial class GetCampaignStatuses : StatusSearchModel, IReturn<CampaignStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get campaign statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignStatus.View"),
        PublicAPI,
        Route("/Tracking/CampaignStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all campaign statuses")]
    public partial class GetCampaignStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all campaign statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignStatus.View"),
        PublicAPI,
        Route("/Tracking/CampaignStatusesDigest", "GET",
            Summary = "Use to get a hash representing each campaign statuses")]
    public partial class GetCampaignStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get campaign status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/CampaignStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific campaign status")]
    public partial class GetCampaignStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get campaign status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Tracking/CampaignStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific campaign status by the custom key")]
    public partial class GetCampaignStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get campaign status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Tracking/CampaignStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific campaign status by the name")]
    public partial class GetCampaignStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get campaign status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Tracking/CampaignStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific campaign status by the name")]
    public partial class GetCampaignStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check campaign status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignStatus.View"),
        PublicAPI,
        Route("/Tracking/CampaignStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCampaignStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check campaign status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignStatus.View"),
        PublicAPI,
        Route("/Tracking/CampaignStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCampaignStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check campaign status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignStatus.View"),
        PublicAPI,
        Route("/Tracking/CampaignStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCampaignStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check campaign status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignStatus.View"),
        PublicAPI,
        Route("/Tracking/CampaignStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCampaignStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create campaign status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new campaign status.")]
    public partial class CreateCampaignStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert campaign status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tracking/CampaignStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing campaign status (as needed).")]
    public partial class UpsertCampaignStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update campaign status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing campaign status.")]
    public partial class UpdateCampaignStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate campaign status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific campaign status from the system [Soft-Delete]")]
    public partial class DeactivateCampaignStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate campaign status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignStatus.Deactivate"),
        PublicAPI,
        Route("/Tracking/CampaignStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific campaign status from the system [Soft-Delete]")]
    public partial class DeactivateCampaignStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate campaign status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific campaign status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCampaignStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate campaign status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignStatus.Reactivate"),
        PublicAPI,
        Route("/Tracking/CampaignStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific campaign status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCampaignStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete campaign status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific campaign status from the system [Hard-Delete]")]
    public partial class DeleteCampaignStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete campaign status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignStatus.Delete"),
        PublicAPI,
        Route("/Tracking/CampaignStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific campaign status from the system [Hard-Delete]")]
    public partial class DeleteCampaignStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear campaign status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/CampaignStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all campaign status calls.")]
    public class ClearCampaignStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CampaignStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCampaignStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, CampaignStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CampaignStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCampaignStatusesForConnect request)
        {
            return await Workflows.CampaignStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignStatusesDigest request)
        {
            return await Workflows.CampaignStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCampaignStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CampaignStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CampaignStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CampaignStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.CampaignStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCampaignStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCampaignStatusExistsByID request)
        {
            return await Workflows.CampaignStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCampaignStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCampaignStatusExistsByKey request)
        {
            return await Workflows.CampaignStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCampaignStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCampaignStatusExistsByName request)
        {
            return await Workflows.CampaignStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCampaignStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCampaignStatusExistsByDisplayName request)
        {
            return await Workflows.CampaignStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCampaignStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCampaignStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignStatusDataAsync,
                    () => Workflows.CampaignStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCampaignStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCampaignStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignStatusDataAsync,
                    () => Workflows.CampaignStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCampaignStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCampaignStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignStatusDataAsync,
                    () => Workflows.CampaignStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCampaignStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCampaignStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignStatusDataAsync,
                    () => Workflows.CampaignStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCampaignStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCampaignStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignStatusDataAsync,
                    () => Workflows.CampaignStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCampaignStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCampaignStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignStatusDataAsync,
                    () => Workflows.CampaignStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCampaignStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCampaignStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignStatusDataAsync,
                    () => Workflows.CampaignStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCampaignStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCampaignStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignStatusDataAsync,
                    () => Workflows.CampaignStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCampaignStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCampaignStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignStatusDataAsync,
                    () => Workflows.CampaignStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCampaignStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCampaignStatusCache request)
        {
            await ClearCachedCampaignStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCampaignStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCampaignStatuses>(string.Empty),
                    UrnId.Create<GetCampaignStatusByID>(string.Empty),
                    UrnId.Create<GetCampaignStatusByKey>(string.Empty),
                    UrnId.Create<GetCampaignStatusByName>(string.Empty),
                    UrnId.Create<CheckCampaignStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckCampaignStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckCampaignStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckCampaignStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CampaignStatusService : CampaignStatusServiceBase { }
}
