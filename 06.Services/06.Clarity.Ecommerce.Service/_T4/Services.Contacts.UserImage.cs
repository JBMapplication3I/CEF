// <autogenerated>
// <copyright file="UserImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the user image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of user images.</summary>
    /// <seealso cref="UserImageSearchModel"/>
    /// <seealso cref="IReturn{UserImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserImages", "GET", Priority = 1,
            Summary = "Use to get a list of user images")]
    public partial class GetUserImages : UserImageSearchModel, IReturn<UserImagePagedResults> { }

    /// <summary>A ServiceStack Route to get user images for connect.</summary>
    /// <seealso cref="UserImageSearchModel"/>
    /// <seealso cref="IReturn{List{UserImageModel}}"/>
    [Authenticate, RequiredPermission("Contacts.UserImage.View"),
        PublicAPI,
        Route("/Contacts/UserImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all user images")]
    public partial class GetUserImagesForConnect : UserImageSearchModel, IReturn<List<UserImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all user images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Contacts.UserImage.View"),
        PublicAPI,
        Route("/Contacts/UserImagesDigest", "GET",
            Summary = "Use to get a hash representing each user images")]
    public partial class GetUserImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get user image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{UserImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific user image")]
    public partial class GetUserImageByID : ImplementsIDBase, IReturn<UserImageModel> { }

    /// <summary>A ServiceStack Route to get user image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{UserImageModel}"/>
    [PublicAPI,
        Route("/Contacts/UserImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific user image by the custom key")]
    public partial class GetUserImageByKey : ImplementsKeyBase, IReturn<UserImageModel> { }

    /// <summary>A ServiceStack Route to get user image.</summary>
    /// <seealso cref="IReturn{UserImageModel}"/>
    [PublicAPI,
        Route("/Contacts/UserImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific user image by the name")]
    public partial class GetUserImageByName : ImplementsNameBase, IReturn<UserImageModel> { }

    /// <summary>A ServiceStack Route to check user image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserImage.View"),
        PublicAPI,
        Route("/Contacts/UserImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckUserImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserImage.View"),
        PublicAPI,
        Route("/Contacts/UserImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckUserImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserImage.View"),
        PublicAPI,
        Route("/Contacts/UserImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckUserImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create user image.</summary>
    /// <seealso cref="UserImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.UserImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new user image.")]
    public partial class CreateUserImage : UserImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert user image.</summary>
    /// <seealso cref="UserImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Contacts/UserImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing user image (as needed).")]
    public partial class UpsertUserImage : UserImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update user image.</summary>
    /// <seealso cref="UserImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.UserImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing user image.")]
    public partial class UpdateUserImage : UserImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate user image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user image from the system [Soft-Delete]")]
    public partial class DeactivateUserImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate user image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserImage.Deactivate"),
        PublicAPI,
        Route("/Contacts/UserImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user image from the system [Soft-Delete]")]
    public partial class DeactivateUserImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserImage.Reactivate"),
        PublicAPI,
        Route("/Contacts/UserImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific user image from the system [Hard-Delete]")]
    public partial class DeleteUserImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserImage.Delete"),
        PublicAPI,
        Route("/Contacts/UserImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific user image from the system [Hard-Delete]")]
    public partial class DeleteUserImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear user image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all user image calls.")]
    public class ClearUserImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class UserImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetUserImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IUserImageModel, UserImageModel, IUserImageSearchModel, UserImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.UserImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetUserImagesForConnect request)
        {
            return await Workflows.UserImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserImagesDigest request)
        {
            return await Workflows.UserImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetUserImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.UserImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.UserImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.UserImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckUserImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserImageExistsByID request)
        {
            return await Workflows.UserImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserImageExistsByKey request)
        {
            return await Workflows.UserImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserImageExistsByName request)
        {
            return await Workflows.UserImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertUserImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertUserImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserImageDataAsync,
                    () => Workflows.UserImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateUserImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateUserImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserImageDataAsync,
                    () => Workflows.UserImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateUserImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateUserImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserImageDataAsync,
                    () => Workflows.UserImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateUserImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserImageDataAsync,
                    () => Workflows.UserImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateUserImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserImageDataAsync,
                    () => Workflows.UserImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateUserImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserImageDataAsync,
                    () => Workflows.UserImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateUserImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserImageDataAsync,
                    () => Workflows.UserImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteUserImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserImageDataAsync,
                    () => Workflows.UserImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteUserImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserImageDataAsync,
                    () => Workflows.UserImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearUserImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearUserImageCache request)
        {
            await ClearCachedUserImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedUserImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetUserImages>(string.Empty),
                    UrnId.Create<GetUserImageByID>(string.Empty),
                    UrnId.Create<GetUserImageByKey>(string.Empty),
                    UrnId.Create<GetUserImageByName>(string.Empty),
                    UrnId.Create<CheckUserImageExistsByID>(string.Empty),
                    UrnId.Create<CheckUserImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckUserImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class UserImageService : UserImageServiceBase { }
}
