// <autogenerated>
// <copyright file="SalesQuoteFileService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales quote file service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales quote files.</summary>
    /// <seealso cref="SalesQuoteFileSearchModel"/>
    /// <seealso cref="IReturn{SalesQuoteFilePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteFiles", "GET", Priority = 1,
            Summary = "Use to get a list of sales quote files")]
    public partial class GetSalesQuoteFiles : SalesQuoteFileSearchModel, IReturn<SalesQuoteFilePagedResults> { }

    /// <summary>A ServiceStack Route to get sales quote files for connect.</summary>
    /// <seealso cref="SalesQuoteFileSearchModel"/>
    /// <seealso cref="IReturn{List{SalesQuoteFileModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteFile.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteFilesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales quote files")]
    public partial class GetSalesQuoteFilesForConnect : SalesQuoteFileSearchModel, IReturn<List<SalesQuoteFileModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales quote files.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteFile.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteFilesDigest", "GET",
            Summary = "Use to get a hash representing each sales quote files")]
    public partial class GetSalesQuoteFilesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales quote file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesQuoteFileModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteFile/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote file")]
    public partial class GetSalesQuoteFileByID : ImplementsIDBase, IReturn<SalesQuoteFileModel> { }

    /// <summary>A ServiceStack Route to get sales quote file.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesQuoteFileModel}"/>
    [PublicAPI,
        Route("/Quoting/SalesQuoteFile/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote file by the custom key")]
    public partial class GetSalesQuoteFileByKey : ImplementsKeyBase, IReturn<SalesQuoteFileModel> { }

    /// <summary>A ServiceStack Route to get sales quote file.</summary>
    /// <seealso cref="IReturn{SalesQuoteFileModel}"/>
    [PublicAPI,
        Route("/Quoting/SalesQuoteFile/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote file by the name")]
    public partial class GetSalesQuoteFileByName : ImplementsNameBase, IReturn<SalesQuoteFileModel> { }

    /// <summary>A ServiceStack Route to get sales quote file.</summary>
    /// <seealso cref="IReturn{SalesQuoteFileModel}"/>
    [PublicAPI,
        Route("/Quoting/SalesQuoteFile/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote file by the SEO URL")]
    public partial class GetSalesQuoteFileBySeoUrl : ImplementsSeoUrlBase, IReturn<SalesQuoteFileModel> { }

    /// <summary>A ServiceStack Route to check sales quote file exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteFile.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteFile/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteFileExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales quote file exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteFile.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteFile/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteFileExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales quote file exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteFile.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteFile/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteFileExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales quote file exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteFile.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteFile/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteFileExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales quote file.</summary>
    /// <seealso cref="SalesQuoteFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteFile.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteFile/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales quote file.")]
    public partial class CreateSalesQuoteFile : SalesQuoteFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales quote file.</summary>
    /// <seealso cref="SalesQuoteFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Quoting/SalesQuoteFile/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales quote file (as needed).")]
    public partial class UpsertSalesQuoteFile : SalesQuoteFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales quote file.</summary>
    /// <seealso cref="SalesQuoteFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteFile.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteFile/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales quote file.")]
    public partial class UpdateSalesQuoteFile : SalesQuoteFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales quote file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteFile.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteFile/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote file from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales quote file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteFile.Deactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuoteFile/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote file from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteFile.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteFile/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteFile.Reactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuoteFile/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteFile.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteFile/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales quote file from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteFile.Delete"),
        PublicAPI,
        Route("/Quoting/SalesQuoteFile/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales quote file from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales quote file cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteFile/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales quote file calls.")]
    public class ClearSalesQuoteFileCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesQuoteFileServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesQuoteFiles"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteFiles request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesQuoteFileModel, SalesQuoteFileModel, ISalesQuoteFileSearchModel, SalesQuoteFilePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesQuoteFiles)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteFilesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesQuoteFilesForConnect request)
        {
            return await Workflows.SalesQuoteFiles.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteFilesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteFilesDigest request)
        {
            return await Workflows.SalesQuoteFiles.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesQuoteFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteFileByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesQuoteFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteFileByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesQuoteFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteFileByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteFileByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SalesQuoteFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteFileBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteFileBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.SalesQuoteFiles, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesQuoteFileExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteFileExistsByID request)
        {
            return await Workflows.SalesQuoteFiles.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesQuoteFileExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteFileExistsByKey request)
        {
            return await Workflows.SalesQuoteFiles.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesQuoteFileExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteFileExistsByName request)
        {
            return await Workflows.SalesQuoteFiles.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesQuoteFileExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteFileExistsBySeoUrl request)
        {
            return await Workflows.SalesQuoteFiles.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesQuoteFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesQuoteFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteFileDataAsync,
                    () => Workflows.SalesQuoteFiles.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesQuoteFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesQuoteFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteFileDataAsync,
                    () => Workflows.SalesQuoteFiles.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesQuoteFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesQuoteFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteFileDataAsync,
                    () => Workflows.SalesQuoteFiles.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteFileDataAsync,
                    () => Workflows.SalesQuoteFiles.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteFileDataAsync,
                    () => Workflows.SalesQuoteFiles.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteFileDataAsync,
                    () => Workflows.SalesQuoteFiles.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteFileDataAsync,
                    () => Workflows.SalesQuoteFiles.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteFileDataAsync,
                    () => Workflows.SalesQuoteFiles.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteFileDataAsync,
                    () => Workflows.SalesQuoteFiles.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesQuoteFileCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesQuoteFileCache request)
        {
            await ClearCachedSalesQuoteFileDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesQuoteFileDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesQuoteFiles>(string.Empty),
                    UrnId.Create<GetSalesQuoteFileByID>(string.Empty),
                    UrnId.Create<GetSalesQuoteFileByKey>(string.Empty),
                    UrnId.Create<GetSalesQuoteFileByName>(string.Empty),
                    UrnId.Create<GetSalesQuoteFileBySeoUrl>(string.Empty),
                    UrnId.Create<CheckSalesQuoteFileExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesQuoteFileExistsByKey>(string.Empty),
                    UrnId.Create<CheckSalesQuoteFileExistsByName>(string.Empty),
                    UrnId.Create<CheckSalesQuoteFileExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesQuoteFileService : SalesQuoteFileServiceBase { }
}
