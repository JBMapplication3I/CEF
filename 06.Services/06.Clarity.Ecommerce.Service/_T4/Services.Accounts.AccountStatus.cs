// <autogenerated>
// <copyright file="AccountStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the account status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of account statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{AccountStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of account statuses")]
    public partial class GetAccountStatuses : StatusSearchModel, IReturn<AccountStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get account statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountStatus.View"),
        PublicAPI,
        Route("/Accounts/AccountStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all account statuses")]
    public partial class GetAccountStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all account statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountStatus.View"),
        PublicAPI,
        Route("/Accounts/AccountStatusesDigest", "GET",
            Summary = "Use to get a hash representing each account statuses")]
    public partial class GetAccountStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get account status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific account status")]
    public partial class GetAccountStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get account status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific account status by the custom key")]
    public partial class GetAccountStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get account status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific account status by the name")]
    public partial class GetAccountStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get account status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific account status by the name")]
    public partial class GetAccountStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check account status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountStatus.View"),
        PublicAPI,
        Route("/Accounts/AccountStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountStatus.View"),
        PublicAPI,
        Route("/Accounts/AccountStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountStatus.View"),
        PublicAPI,
        Route("/Accounts/AccountStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountStatus.View"),
        PublicAPI,
        Route("/Accounts/AccountStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create account status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new account status.")]
    public partial class CreateAccountStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert account status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Accounts/AccountStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing account status (as needed).")]
    public partial class UpsertAccountStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update account status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing account status.")]
    public partial class UpdateAccountStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate account status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account status from the system [Soft-Delete]")]
    public partial class DeactivateAccountStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate account status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountStatus.Deactivate"),
        PublicAPI,
        Route("/Accounts/AccountStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account status from the system [Soft-Delete]")]
    public partial class DeactivateAccountStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountStatus.Reactivate"),
        PublicAPI,
        Route("/Accounts/AccountStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific account status from the system [Hard-Delete]")]
    public partial class DeleteAccountStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountStatus.Delete"),
        PublicAPI,
        Route("/Accounts/AccountStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific account status from the system [Hard-Delete]")]
    public partial class DeleteAccountStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear account status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all account status calls.")]
    public class ClearAccountStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AccountStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAccountStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, AccountStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AccountStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAccountStatusesForConnect request)
        {
            return await Workflows.AccountStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountStatusesDigest request)
        {
            return await Workflows.AccountStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAccountStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AccountStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AccountStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.AccountStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.AccountStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAccountStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountStatusExistsByID request)
        {
            return await Workflows.AccountStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountStatusExistsByKey request)
        {
            return await Workflows.AccountStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountStatusExistsByName request)
        {
            return await Workflows.AccountStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountStatusExistsByDisplayName request)
        {
            return await Workflows.AccountStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAccountStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAccountStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountStatusDataAsync,
                    () => Workflows.AccountStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAccountStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAccountStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountStatusDataAsync,
                    () => Workflows.AccountStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAccountStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAccountStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountStatusDataAsync,
                    () => Workflows.AccountStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAccountStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountStatusDataAsync,
                    () => Workflows.AccountStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAccountStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountStatusDataAsync,
                    () => Workflows.AccountStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAccountStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountStatusDataAsync,
                    () => Workflows.AccountStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAccountStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountStatusDataAsync,
                    () => Workflows.AccountStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAccountStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountStatusDataAsync,
                    () => Workflows.AccountStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAccountStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountStatusDataAsync,
                    () => Workflows.AccountStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAccountStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAccountStatusCache request)
        {
            await ClearCachedAccountStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAccountStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAccountStatuses>(string.Empty),
                    UrnId.Create<GetAccountStatusByID>(string.Empty),
                    UrnId.Create<GetAccountStatusByKey>(string.Empty),
                    UrnId.Create<GetAccountStatusByName>(string.Empty),
                    UrnId.Create<CheckAccountStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckAccountStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckAccountStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckAccountStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AccountStatusService : AccountStatusServiceBase { }
}
