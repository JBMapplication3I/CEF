// <autogenerated>
// <copyright file="BrandAccountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the brand account service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of brand accounts.</summary>
    /// <seealso cref="BrandAccountSearchModel"/>
    /// <seealso cref="IReturn{BrandAccountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandAccounts", "GET", Priority = 1,
            Summary = "Use to get a list of brand accounts")]
    public partial class GetBrandAccounts : BrandAccountSearchModel, IReturn<BrandAccountPagedResults> { }

    /// <summary>A ServiceStack Route to get brand accounts for connect.</summary>
    /// <seealso cref="BrandAccountSearchModel"/>
    /// <seealso cref="IReturn{List{BrandAccountModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandAccount.View"),
        PublicAPI,
        Route("/Brands/BrandAccountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all brand accounts")]
    public partial class GetBrandAccountsForConnect : BrandAccountSearchModel, IReturn<List<BrandAccountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all brand accounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandAccount.View"),
        PublicAPI,
        Route("/Brands/BrandAccountsDigest", "GET",
            Summary = "Use to get a hash representing each brand accounts")]
    public partial class GetBrandAccountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get brand account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{BrandAccountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandAccount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific brand account")]
    public partial class GetBrandAccountByID : ImplementsIDBase, IReturn<BrandAccountModel> { }

    /// <summary>A ServiceStack Route to get brand account.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{BrandAccountModel}"/>
    [PublicAPI,
        Route("/Brands/BrandAccount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific brand account by the custom key")]
    public partial class GetBrandAccountByKey : ImplementsKeyBase, IReturn<BrandAccountModel> { }

    /// <summary>A ServiceStack Route to check brand account exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandAccount.View"),
        PublicAPI,
        Route("/Brands/BrandAccount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandAccountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand account exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandAccount.View"),
        PublicAPI,
        Route("/Brands/BrandAccount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandAccountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create brand account.</summary>
    /// <seealso cref="BrandAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandAccount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandAccount/Create", "POST", Priority = 1,
            Summary = "Use to create a new brand account.")]
    public partial class CreateBrandAccount : BrandAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert brand account.</summary>
    /// <seealso cref="BrandAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Brands/BrandAccount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing brand account (as needed).")]
    public partial class UpsertBrandAccount : BrandAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update brand account.</summary>
    /// <seealso cref="BrandAccountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandAccount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandAccount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing brand account.")]
    public partial class UpdateBrandAccount : BrandAccountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate brand account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandAccount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandAccount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand account from the system [Soft-Delete]")]
    public partial class DeactivateBrandAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate brand account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandAccount.Deactivate"),
        PublicAPI,
        Route("/Brands/BrandAccount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand account from the system [Soft-Delete]")]
    public partial class DeactivateBrandAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandAccount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandAccount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand account from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandAccount.Reactivate"),
        PublicAPI,
        Route("/Brands/BrandAccount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand account from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand account.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandAccount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandAccount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific brand account from the system [Hard-Delete]")]
    public partial class DeleteBrandAccountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand account by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandAccount.Delete"),
        PublicAPI,
        Route("/Brands/BrandAccount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific brand account from the system [Hard-Delete]")]
    public partial class DeleteBrandAccountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear brand account cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandAccount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all brand account calls.")]
    public class ClearBrandAccountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BrandAccountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBrandAccounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandAccounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IBrandAccountModel, BrandAccountModel, IBrandAccountSearchModel, BrandAccountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BrandAccounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandAccountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBrandAccountsForConnect request)
        {
            return await Workflows.BrandAccounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandAccountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandAccountsDigest request)
        {
            return await Workflows.BrandAccounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBrandAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandAccountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BrandAccounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandAccountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BrandAccounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBrandAccountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandAccountExistsByID request)
        {
            return await Workflows.BrandAccounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandAccountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandAccountExistsByKey request)
        {
            return await Workflows.BrandAccounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBrandAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBrandAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAccountDataAsync,
                    () => Workflows.BrandAccounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBrandAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBrandAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAccountDataAsync,
                    () => Workflows.BrandAccounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBrandAccount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBrandAccount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAccountDataAsync,
                    () => Workflows.BrandAccounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBrandAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAccountDataAsync,
                    () => Workflows.BrandAccounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBrandAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAccountDataAsync,
                    () => Workflows.BrandAccounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBrandAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAccountDataAsync,
                    () => Workflows.BrandAccounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBrandAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAccountDataAsync,
                    () => Workflows.BrandAccounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBrandAccountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandAccountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAccountDataAsync,
                    () => Workflows.BrandAccounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBrandAccountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandAccountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAccountDataAsync,
                    () => Workflows.BrandAccounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBrandAccountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBrandAccountCache request)
        {
            await ClearCachedBrandAccountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBrandAccountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBrandAccounts>(string.Empty),
                    UrnId.Create<GetBrandAccountByID>(string.Empty),
                    UrnId.Create<GetBrandAccountByKey>(string.Empty),
                    UrnId.Create<CheckBrandAccountExistsByID>(string.Empty),
                    UrnId.Create<CheckBrandAccountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BrandAccountService : BrandAccountServiceBase { }
}
