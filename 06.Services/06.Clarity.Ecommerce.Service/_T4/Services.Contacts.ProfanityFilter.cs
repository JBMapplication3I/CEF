// <autogenerated>
// <copyright file="ProfanityFilterService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the profanity filter service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of profanity filters.</summary>
    /// <seealso cref="ProfanityFilterSearchModel"/>
    /// <seealso cref="IReturn{ProfanityFilterPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ProfanityFilters", "GET", Priority = 1,
            Summary = "Use to get a list of profanity filters")]
    public partial class GetProfanityFilters : ProfanityFilterSearchModel, IReturn<ProfanityFilterPagedResults> { }

    /// <summary>A ServiceStack Route to get profanity filters for connect.</summary>
    /// <seealso cref="ProfanityFilterSearchModel"/>
    /// <seealso cref="IReturn{List{ProfanityFilterModel}}"/>
    [Authenticate, RequiredPermission("Contacts.ProfanityFilter.View"),
        PublicAPI,
        Route("/Contacts/ProfanityFiltersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all profanity filters")]
    public partial class GetProfanityFiltersForConnect : ProfanityFilterSearchModel, IReturn<List<ProfanityFilterModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all profanity filters.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Contacts.ProfanityFilter.View"),
        PublicAPI,
        Route("/Contacts/ProfanityFiltersDigest", "GET",
            Summary = "Use to get a hash representing each profanity filters")]
    public partial class GetProfanityFiltersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get profanity filter.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ProfanityFilterModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ProfanityFilter/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific profanity filter")]
    public partial class GetProfanityFilterByID : ImplementsIDBase, IReturn<ProfanityFilterModel> { }

    /// <summary>A ServiceStack Route to get profanity filter.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ProfanityFilterModel}"/>
    [PublicAPI,
        Route("/Contacts/ProfanityFilter/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific profanity filter by the custom key")]
    public partial class GetProfanityFilterByKey : ImplementsKeyBase, IReturn<ProfanityFilterModel> { }

    /// <summary>A ServiceStack Route to check profanity filter exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ProfanityFilter.View"),
        PublicAPI,
        Route("/Contacts/ProfanityFilter/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckProfanityFilterExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check profanity filter exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ProfanityFilter.View"),
        PublicAPI,
        Route("/Contacts/ProfanityFilter/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckProfanityFilterExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create profanity filter.</summary>
    /// <seealso cref="ProfanityFilterModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.ProfanityFilter.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ProfanityFilter/Create", "POST", Priority = 1,
            Summary = "Use to create a new profanity filter.")]
    public partial class CreateProfanityFilter : ProfanityFilterModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert profanity filter.</summary>
    /// <seealso cref="ProfanityFilterModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Contacts/ProfanityFilter/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing profanity filter (as needed).")]
    public partial class UpsertProfanityFilter : ProfanityFilterModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update profanity filter.</summary>
    /// <seealso cref="ProfanityFilterModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.ProfanityFilter.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ProfanityFilter/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing profanity filter.")]
    public partial class UpdateProfanityFilter : ProfanityFilterModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate profanity filter.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ProfanityFilter.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ProfanityFilter/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific profanity filter from the system [Soft-Delete]")]
    public partial class DeactivateProfanityFilterByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate profanity filter by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ProfanityFilter.Deactivate"),
        PublicAPI,
        Route("/Contacts/ProfanityFilter/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific profanity filter from the system [Soft-Delete]")]
    public partial class DeactivateProfanityFilterByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate profanity filter.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ProfanityFilter.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ProfanityFilter/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific profanity filter from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProfanityFilterByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate profanity filter by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ProfanityFilter.Reactivate"),
        PublicAPI,
        Route("/Contacts/ProfanityFilter/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific profanity filter from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProfanityFilterByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete profanity filter.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ProfanityFilter.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ProfanityFilter/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific profanity filter from the system [Hard-Delete]")]
    public partial class DeleteProfanityFilterByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete profanity filter by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ProfanityFilter.Delete"),
        PublicAPI,
        Route("/Contacts/ProfanityFilter/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific profanity filter from the system [Hard-Delete]")]
    public partial class DeleteProfanityFilterByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear profanity filter cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ProfanityFilter/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all profanity filter calls.")]
    public class ClearProfanityFilterCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ProfanityFilterServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetProfanityFilters"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProfanityFilters request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IProfanityFilterModel, ProfanityFilterModel, IProfanityFilterSearchModel, ProfanityFilterPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ProfanityFilters)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProfanityFiltersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetProfanityFiltersForConnect request)
        {
            return await Workflows.ProfanityFilters.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProfanityFiltersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProfanityFiltersDigest request)
        {
            return await Workflows.ProfanityFilters.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetProfanityFilterByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProfanityFilterByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ProfanityFilters, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProfanityFilterByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProfanityFilterByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ProfanityFilters, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckProfanityFilterExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProfanityFilterExistsByID request)
        {
            return await Workflows.ProfanityFilters.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProfanityFilterExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProfanityFilterExistsByKey request)
        {
            return await Workflows.ProfanityFilters.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertProfanityFilter"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertProfanityFilter request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProfanityFilterDataAsync,
                    () => Workflows.ProfanityFilters.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateProfanityFilter"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateProfanityFilter request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProfanityFilterDataAsync,
                    () => Workflows.ProfanityFilters.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateProfanityFilter"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateProfanityFilter request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProfanityFilterDataAsync,
                    () => Workflows.ProfanityFilters.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateProfanityFilterByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProfanityFilterByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProfanityFilterDataAsync,
                    () => Workflows.ProfanityFilters.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateProfanityFilterByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProfanityFilterByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProfanityFilterDataAsync,
                    () => Workflows.ProfanityFilters.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateProfanityFilterByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProfanityFilterByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProfanityFilterDataAsync,
                    () => Workflows.ProfanityFilters.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateProfanityFilterByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProfanityFilterByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProfanityFilterDataAsync,
                    () => Workflows.ProfanityFilters.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteProfanityFilterByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProfanityFilterByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProfanityFilterDataAsync,
                    () => Workflows.ProfanityFilters.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteProfanityFilterByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProfanityFilterByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProfanityFilterDataAsync,
                    () => Workflows.ProfanityFilters.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearProfanityFilterCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearProfanityFilterCache request)
        {
            await ClearCachedProfanityFilterDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedProfanityFilterDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetProfanityFilters>(string.Empty),
                    UrnId.Create<GetProfanityFilterByID>(string.Empty),
                    UrnId.Create<GetProfanityFilterByKey>(string.Empty),
                    UrnId.Create<CheckProfanityFilterExistsByID>(string.Empty),
                    UrnId.Create<CheckProfanityFilterExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ProfanityFilterService : ProfanityFilterServiceBase { }
}
