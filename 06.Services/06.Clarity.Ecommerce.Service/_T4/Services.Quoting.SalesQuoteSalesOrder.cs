// <autogenerated>
// <copyright file="SalesQuoteSalesOrderService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales quote sales order service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales quote sales orders.</summary>
    /// <seealso cref="SalesQuoteSalesOrderSearchModel"/>
    /// <seealso cref="IReturn{SalesQuoteSalesOrderPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteSalesOrders", "GET", Priority = 1,
            Summary = "Use to get a list of sales quote sales orders")]
    public partial class GetSalesQuoteSalesOrders : SalesQuoteSalesOrderSearchModel, IReturn<SalesQuoteSalesOrderPagedResults> { }

    /// <summary>A ServiceStack Route to get sales quote sales orders for connect.</summary>
    /// <seealso cref="SalesQuoteSalesOrderSearchModel"/>
    /// <seealso cref="IReturn{List{SalesQuoteSalesOrderModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteSalesOrder.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteSalesOrdersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales quote sales orders")]
    public partial class GetSalesQuoteSalesOrdersForConnect : SalesQuoteSalesOrderSearchModel, IReturn<List<SalesQuoteSalesOrderModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales quote sales orders.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteSalesOrder.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteSalesOrdersDigest", "GET",
            Summary = "Use to get a hash representing each sales quote sales orders")]
    public partial class GetSalesQuoteSalesOrdersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales quote sales order.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesQuoteSalesOrderModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteSalesOrder/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote sales order")]
    public partial class GetSalesQuoteSalesOrderByID : ImplementsIDBase, IReturn<SalesQuoteSalesOrderModel> { }

    /// <summary>A ServiceStack Route to get sales quote sales order.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesQuoteSalesOrderModel}"/>
    [PublicAPI,
        Route("/Quoting/SalesQuoteSalesOrder/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote sales order by the custom key")]
    public partial class GetSalesQuoteSalesOrderByKey : ImplementsKeyBase, IReturn<SalesQuoteSalesOrderModel> { }

    /// <summary>A ServiceStack Route to check sales quote sales order exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteSalesOrder.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteSalesOrder/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteSalesOrderExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales quote sales order exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteSalesOrder.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteSalesOrder/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteSalesOrderExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales quote sales order.</summary>
    /// <seealso cref="SalesQuoteSalesOrderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteSalesOrder.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteSalesOrder/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales quote sales order.")]
    public partial class CreateSalesQuoteSalesOrder : SalesQuoteSalesOrderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales quote sales order.</summary>
    /// <seealso cref="SalesQuoteSalesOrderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Quoting/SalesQuoteSalesOrder/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales quote sales order (as needed).")]
    public partial class UpsertSalesQuoteSalesOrder : SalesQuoteSalesOrderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales quote sales order.</summary>
    /// <seealso cref="SalesQuoteSalesOrderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteSalesOrder.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteSalesOrder/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales quote sales order.")]
    public partial class UpdateSalesQuoteSalesOrder : SalesQuoteSalesOrderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales quote sales order.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteSalesOrder.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteSalesOrder/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote sales order from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteSalesOrderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales quote sales order by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteSalesOrder.Deactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuoteSalesOrder/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote sales order from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteSalesOrderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote sales order.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteSalesOrder.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteSalesOrder/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote sales order from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteSalesOrderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote sales order by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteSalesOrder.Reactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuoteSalesOrder/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote sales order from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteSalesOrderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote sales order.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteSalesOrder.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteSalesOrder/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales quote sales order from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteSalesOrderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote sales order by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteSalesOrder.Delete"),
        PublicAPI,
        Route("/Quoting/SalesQuoteSalesOrder/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales quote sales order from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteSalesOrderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales quote sales order cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteSalesOrder/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales quote sales order calls.")]
    public class ClearSalesQuoteSalesOrderCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesQuoteSalesOrderServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesQuoteSalesOrders"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteSalesOrders request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesQuoteSalesOrderModel, SalesQuoteSalesOrderModel, ISalesQuoteSalesOrderSearchModel, SalesQuoteSalesOrderPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesQuoteSalesOrders)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteSalesOrdersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesQuoteSalesOrdersForConnect request)
        {
            return await Workflows.SalesQuoteSalesOrders.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteSalesOrdersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteSalesOrdersDigest request)
        {
            return await Workflows.SalesQuoteSalesOrders.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesQuoteSalesOrderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteSalesOrderByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesQuoteSalesOrders, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteSalesOrderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteSalesOrderByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesQuoteSalesOrders, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesQuoteSalesOrderExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteSalesOrderExistsByID request)
        {
            return await Workflows.SalesQuoteSalesOrders.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesQuoteSalesOrderExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteSalesOrderExistsByKey request)
        {
            return await Workflows.SalesQuoteSalesOrders.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesQuoteSalesOrder"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesQuoteSalesOrder request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteSalesOrderDataAsync,
                    () => Workflows.SalesQuoteSalesOrders.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesQuoteSalesOrder"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesQuoteSalesOrder request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteSalesOrderDataAsync,
                    () => Workflows.SalesQuoteSalesOrders.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesQuoteSalesOrder"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesQuoteSalesOrder request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteSalesOrderDataAsync,
                    () => Workflows.SalesQuoteSalesOrders.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteSalesOrderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteSalesOrderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteSalesOrderDataAsync,
                    () => Workflows.SalesQuoteSalesOrders.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteSalesOrderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteSalesOrderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteSalesOrderDataAsync,
                    () => Workflows.SalesQuoteSalesOrders.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteSalesOrderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteSalesOrderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteSalesOrderDataAsync,
                    () => Workflows.SalesQuoteSalesOrders.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteSalesOrderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteSalesOrderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteSalesOrderDataAsync,
                    () => Workflows.SalesQuoteSalesOrders.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteSalesOrderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteSalesOrderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteSalesOrderDataAsync,
                    () => Workflows.SalesQuoteSalesOrders.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteSalesOrderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteSalesOrderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteSalesOrderDataAsync,
                    () => Workflows.SalesQuoteSalesOrders.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesQuoteSalesOrderCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesQuoteSalesOrderCache request)
        {
            await ClearCachedSalesQuoteSalesOrderDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesQuoteSalesOrderDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesQuoteSalesOrders>(string.Empty),
                    UrnId.Create<GetSalesQuoteSalesOrderByID>(string.Empty),
                    UrnId.Create<GetSalesQuoteSalesOrderByKey>(string.Empty),
                    UrnId.Create<CheckSalesQuoteSalesOrderExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesQuoteSalesOrderExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesQuoteSalesOrderService : SalesQuoteSalesOrderServiceBase { }
}
