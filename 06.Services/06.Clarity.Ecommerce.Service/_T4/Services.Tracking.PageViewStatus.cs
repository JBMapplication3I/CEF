// <autogenerated>
// <copyright file="PageViewStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the page view status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of page view statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{PageViewStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/PageViewStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of page view statuses")]
    public partial class GetPageViewStatuses : StatusSearchModel, IReturn<PageViewStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get page view statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewStatus.View"),
        PublicAPI,
        Route("/Tracking/PageViewStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all page view statuses")]
    public partial class GetPageViewStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all page view statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewStatus.View"),
        PublicAPI,
        Route("/Tracking/PageViewStatusesDigest", "GET",
            Summary = "Use to get a hash representing each page view statuses")]
    public partial class GetPageViewStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get page view status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/PageViewStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific page view status")]
    public partial class GetPageViewStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get page view status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Tracking/PageViewStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific page view status by the custom key")]
    public partial class GetPageViewStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get page view status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Tracking/PageViewStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific page view status by the name")]
    public partial class GetPageViewStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get page view status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Tracking/PageViewStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific page view status by the name")]
    public partial class GetPageViewStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check page view status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewStatus.View"),
        PublicAPI,
        Route("/Tracking/PageViewStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPageViewStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check page view status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewStatus.View"),
        PublicAPI,
        Route("/Tracking/PageViewStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPageViewStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check page view status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewStatus.View"),
        PublicAPI,
        Route("/Tracking/PageViewStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPageViewStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check page view status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewStatus.View"),
        PublicAPI,
        Route("/Tracking/PageViewStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPageViewStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create page view status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new page view status.")]
    public partial class CreatePageViewStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert page view status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tracking/PageViewStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing page view status (as needed).")]
    public partial class UpsertPageViewStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update page view status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing page view status.")]
    public partial class UpdatePageViewStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate page view status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific page view status from the system [Soft-Delete]")]
    public partial class DeactivatePageViewStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate page view status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewStatus.Deactivate"),
        PublicAPI,
        Route("/Tracking/PageViewStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific page view status from the system [Soft-Delete]")]
    public partial class DeactivatePageViewStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate page view status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific page view status from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePageViewStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate page view status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewStatus.Reactivate"),
        PublicAPI,
        Route("/Tracking/PageViewStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific page view status from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePageViewStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete page view status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific page view status from the system [Hard-Delete]")]
    public partial class DeletePageViewStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete page view status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewStatus.Delete"),
        PublicAPI,
        Route("/Tracking/PageViewStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific page view status from the system [Hard-Delete]")]
    public partial class DeletePageViewStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear page view status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/PageViewStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all page view status calls.")]
    public class ClearPageViewStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PageViewStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPageViewStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, PageViewStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PageViewStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPageViewStatusesForConnect request)
        {
            return await Workflows.PageViewStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewStatusesDigest request)
        {
            return await Workflows.PageViewStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPageViewStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PageViewStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PageViewStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.PageViewStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.PageViewStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPageViewStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPageViewStatusExistsByID request)
        {
            return await Workflows.PageViewStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPageViewStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPageViewStatusExistsByKey request)
        {
            return await Workflows.PageViewStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPageViewStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPageViewStatusExistsByName request)
        {
            return await Workflows.PageViewStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPageViewStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPageViewStatusExistsByDisplayName request)
        {
            return await Workflows.PageViewStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPageViewStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPageViewStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewStatusDataAsync,
                    () => Workflows.PageViewStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePageViewStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePageViewStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewStatusDataAsync,
                    () => Workflows.PageViewStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePageViewStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePageViewStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewStatusDataAsync,
                    () => Workflows.PageViewStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePageViewStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePageViewStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewStatusDataAsync,
                    () => Workflows.PageViewStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePageViewStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePageViewStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewStatusDataAsync,
                    () => Workflows.PageViewStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePageViewStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePageViewStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewStatusDataAsync,
                    () => Workflows.PageViewStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePageViewStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePageViewStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewStatusDataAsync,
                    () => Workflows.PageViewStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePageViewStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePageViewStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewStatusDataAsync,
                    () => Workflows.PageViewStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePageViewStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePageViewStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewStatusDataAsync,
                    () => Workflows.PageViewStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPageViewStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPageViewStatusCache request)
        {
            await ClearCachedPageViewStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPageViewStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPageViewStatuses>(string.Empty),
                    UrnId.Create<GetPageViewStatusByID>(string.Empty),
                    UrnId.Create<GetPageViewStatusByKey>(string.Empty),
                    UrnId.Create<GetPageViewStatusByName>(string.Empty),
                    UrnId.Create<CheckPageViewStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckPageViewStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckPageViewStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckPageViewStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PageViewStatusService : PageViewStatusServiceBase { }
}
