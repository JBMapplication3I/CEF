// <autogenerated>
// <copyright file="StoreImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store images.</summary>
    /// <seealso cref="StoreImageSearchModel"/>
    /// <seealso cref="IReturn{StoreImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreImages", "GET", Priority = 1,
            Summary = "Use to get a list of store images")]
    public partial class GetStoreImages : StoreImageSearchModel, IReturn<StoreImagePagedResults> { }

    /// <summary>A ServiceStack Route to get store images for connect.</summary>
    /// <seealso cref="StoreImageSearchModel"/>
    /// <seealso cref="IReturn{List{StoreImageModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreImage.View"),
        PublicAPI,
        Route("/Stores/StoreImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store images")]
    public partial class GetStoreImagesForConnect : StoreImageSearchModel, IReturn<List<StoreImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreImage.View"),
        PublicAPI,
        Route("/Stores/StoreImagesDigest", "GET",
            Summary = "Use to get a hash representing each store images")]
    public partial class GetStoreImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store image")]
    public partial class GetStoreImageByID : ImplementsIDBase, IReturn<StoreImageModel> { }

    /// <summary>A ServiceStack Route to get store image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreImageModel}"/>
    [PublicAPI,
        Route("/Stores/StoreImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store image by the custom key")]
    public partial class GetStoreImageByKey : ImplementsKeyBase, IReturn<StoreImageModel> { }

    /// <summary>A ServiceStack Route to get store image.</summary>
    /// <seealso cref="IReturn{StoreImageModel}"/>
    [PublicAPI,
        Route("/Stores/StoreImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific store image by the name")]
    public partial class GetStoreImageByName : ImplementsNameBase, IReturn<StoreImageModel> { }

    /// <summary>A ServiceStack Route to check store image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreImage.View"),
        PublicAPI,
        Route("/Stores/StoreImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreImage.View"),
        PublicAPI,
        Route("/Stores/StoreImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreImage.View"),
        PublicAPI,
        Route("/Stores/StoreImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store image.</summary>
    /// <seealso cref="StoreImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new store image.")]
    public partial class CreateStoreImage : StoreImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store image.</summary>
    /// <seealso cref="StoreImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store image (as needed).")]
    public partial class UpsertStoreImage : StoreImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store image.</summary>
    /// <seealso cref="StoreImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store image.")]
    public partial class UpdateStoreImage : StoreImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store image from the system [Soft-Delete]")]
    public partial class DeactivateStoreImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreImage.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store image from the system [Soft-Delete]")]
    public partial class DeactivateStoreImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreImage.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store image from the system [Hard-Delete]")]
    public partial class DeleteStoreImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreImage.Delete"),
        PublicAPI,
        Route("/Stores/StoreImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store image from the system [Hard-Delete]")]
    public partial class DeleteStoreImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store image calls.")]
    public class ClearStoreImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreImageModel, StoreImageModel, IStoreImageSearchModel, StoreImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreImagesForConnect request)
        {
            return await Workflows.StoreImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreImagesDigest request)
        {
            return await Workflows.StoreImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.StoreImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreImageExistsByID request)
        {
            return await Workflows.StoreImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreImageExistsByKey request)
        {
            return await Workflows.StoreImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreImageExistsByName request)
        {
            return await Workflows.StoreImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreImageDataAsync,
                    () => Workflows.StoreImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreImageDataAsync,
                    () => Workflows.StoreImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreImageDataAsync,
                    () => Workflows.StoreImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreImageDataAsync,
                    () => Workflows.StoreImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreImageDataAsync,
                    () => Workflows.StoreImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreImageDataAsync,
                    () => Workflows.StoreImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreImageDataAsync,
                    () => Workflows.StoreImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreImageDataAsync,
                    () => Workflows.StoreImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreImageDataAsync,
                    () => Workflows.StoreImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreImageCache request)
        {
            await ClearCachedStoreImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreImages>(string.Empty),
                    UrnId.Create<GetStoreImageByID>(string.Empty),
                    UrnId.Create<GetStoreImageByKey>(string.Empty),
                    UrnId.Create<GetStoreImageByName>(string.Empty),
                    UrnId.Create<CheckStoreImageExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckStoreImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreImageService : StoreImageServiceBase { }
}
