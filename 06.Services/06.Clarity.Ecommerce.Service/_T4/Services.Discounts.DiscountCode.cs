// <autogenerated>
// <copyright file="DiscountCodeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount code service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discount codes.</summary>
    /// <seealso cref="DiscountCodeSearchModel"/>
    /// <seealso cref="IReturn{DiscountCodePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountCodes", "GET", Priority = 1,
            Summary = "Use to get a list of discount codes")]
    public partial class GetDiscountCodes : DiscountCodeSearchModel, IReturn<DiscountCodePagedResults> { }

    /// <summary>A ServiceStack Route to get discount codes for connect.</summary>
    /// <seealso cref="DiscountCodeSearchModel"/>
    /// <seealso cref="IReturn{List{DiscountCodeModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCode.View"),
        PublicAPI,
        Route("/Discounts/DiscountCodesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discount codes")]
    public partial class GetDiscountCodesForConnect : DiscountCodeSearchModel, IReturn<List<DiscountCodeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discount codes.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCode.View"),
        PublicAPI,
        Route("/Discounts/DiscountCodesDigest", "GET",
            Summary = "Use to get a hash representing each discount codes")]
    public partial class GetDiscountCodesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount code.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountCodeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountCode/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount code")]
    public partial class GetDiscountCodeByID : ImplementsIDBase, IReturn<DiscountCodeModel> { }

    /// <summary>A ServiceStack Route to get discount code.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountCodeModel}"/>
    [PublicAPI,
        Route("/Discounts/DiscountCode/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount code by the custom key")]
    public partial class GetDiscountCodeByKey : ImplementsKeyBase, IReturn<DiscountCodeModel> { }

    /// <summary>A ServiceStack Route to check discount code exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCode.View"),
        PublicAPI,
        Route("/Discounts/DiscountCode/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountCodeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount code exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCode.View"),
        PublicAPI,
        Route("/Discounts/DiscountCode/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountCodeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount code.</summary>
    /// <seealso cref="DiscountCodeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCode.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCode/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount code.")]
    public partial class CreateDiscountCode : DiscountCodeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount code.</summary>
    /// <seealso cref="DiscountCodeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/DiscountCode/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount code (as needed).")]
    public partial class UpsertDiscountCode : DiscountCodeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount code.</summary>
    /// <seealso cref="DiscountCodeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCode.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCode/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount code.")]
    public partial class UpdateDiscountCode : DiscountCodeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount code.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCode.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCode/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount code from the system [Soft-Delete]")]
    public partial class DeactivateDiscountCodeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount code by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCode.Deactivate"),
        PublicAPI,
        Route("/Discounts/DiscountCode/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount code from the system [Soft-Delete]")]
    public partial class DeactivateDiscountCodeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount code.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCode.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCode/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount code from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountCodeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount code by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCode.Reactivate"),
        PublicAPI,
        Route("/Discounts/DiscountCode/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount code from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountCodeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount code.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCode.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountCode/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount code from the system [Hard-Delete]")]
    public partial class DeleteDiscountCodeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount code by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountCode.Delete"),
        PublicAPI,
        Route("/Discounts/DiscountCode/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount code from the system [Hard-Delete]")]
    public partial class DeleteDiscountCodeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount code cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountCode/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount code calls.")]
    public class ClearDiscountCodeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountCodeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscountCodes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountCodes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountCodeModel, DiscountCodeModel, IDiscountCodeSearchModel, DiscountCodePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DiscountCodes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountCodesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountCodesForConnect request)
        {
            return await Workflows.DiscountCodes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountCodesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountCodesDigest request)
        {
            return await Workflows.DiscountCodes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountCodeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountCodeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DiscountCodes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountCodeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountCodeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DiscountCodes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountCodeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountCodeExistsByID request)
        {
            return await Workflows.DiscountCodes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountCodeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountCodeExistsByKey request)
        {
            return await Workflows.DiscountCodes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscountCode"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscountCode request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCodeDataAsync,
                    () => Workflows.DiscountCodes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscountCode"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscountCode request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCodeDataAsync,
                    () => Workflows.DiscountCodes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscountCode"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscountCode request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCodeDataAsync,
                    () => Workflows.DiscountCodes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountCodeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountCodeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCodeDataAsync,
                    () => Workflows.DiscountCodes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountCodeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountCodeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCodeDataAsync,
                    () => Workflows.DiscountCodes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountCodeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountCodeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCodeDataAsync,
                    () => Workflows.DiscountCodes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountCodeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountCodeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCodeDataAsync,
                    () => Workflows.DiscountCodes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountCodeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountCodeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCodeDataAsync,
                    () => Workflows.DiscountCodes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountCodeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountCodeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountCodeDataAsync,
                    () => Workflows.DiscountCodes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountCodeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountCodeCache request)
        {
            await ClearCachedDiscountCodeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountCodeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscountCodes>(string.Empty),
                    UrnId.Create<GetDiscountCodeByID>(string.Empty),
                    UrnId.Create<GetDiscountCodeByKey>(string.Empty),
                    UrnId.Create<CheckDiscountCodeExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountCodeExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountCodeService : DiscountCodeServiceBase { }
}
