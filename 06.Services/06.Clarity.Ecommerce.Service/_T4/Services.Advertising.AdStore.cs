// <autogenerated>
// <copyright file="AdStoreService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the ad store service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of ad stores.</summary>
    /// <seealso cref="AdStoreSearchModel"/>
    /// <seealso cref="IReturn{AdStorePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdStores", "GET", Priority = 1,
            Summary = "Use to get a list of ad stores")]
    public partial class GetAdStores : AdStoreSearchModel, IReturn<AdStorePagedResults> { }

    /// <summary>A ServiceStack Route to get ad stores for connect.</summary>
    /// <seealso cref="AdStoreSearchModel"/>
    /// <seealso cref="IReturn{List{AdStoreModel}}"/>
    [Authenticate, RequiredPermission("Advertising.AdStore.View"),
        PublicAPI,
        Route("/Advertising/AdStoresForConnect", "POST,GET", Priority = 1,
            Summary = "Get all ad stores")]
    public partial class GetAdStoresForConnect : AdStoreSearchModel, IReturn<List<AdStoreModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all ad stores.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Advertising.AdStore.View"),
        PublicAPI,
        Route("/Advertising/AdStoresDigest", "GET",
            Summary = "Use to get a hash representing each ad stores")]
    public partial class GetAdStoresDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get ad store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AdStoreModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdStore/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific ad store")]
    public partial class GetAdStoreByID : ImplementsIDBase, IReturn<AdStoreModel> { }

    /// <summary>A ServiceStack Route to get ad store.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AdStoreModel}"/>
    [PublicAPI,
        Route("/Advertising/AdStore/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific ad store by the custom key")]
    public partial class GetAdStoreByKey : ImplementsKeyBase, IReturn<AdStoreModel> { }

    /// <summary>A ServiceStack Route to check ad store exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdStore.View"),
        PublicAPI,
        Route("/Advertising/AdStore/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAdStoreExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ad store exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdStore.View"),
        PublicAPI,
        Route("/Advertising/AdStore/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAdStoreExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create ad store.</summary>
    /// <seealso cref="AdStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.AdStore.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdStore/Create", "POST", Priority = 1,
            Summary = "Use to create a new ad store.")]
    public partial class CreateAdStore : AdStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert ad store.</summary>
    /// <seealso cref="AdStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Advertising/AdStore/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing ad store (as needed).")]
    public partial class UpsertAdStore : AdStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update ad store.</summary>
    /// <seealso cref="AdStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.AdStore.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdStore/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing ad store.")]
    public partial class UpdateAdStore : AdStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate ad store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdStore.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdStore/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ad store from the system [Soft-Delete]")]
    public partial class DeactivateAdStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate ad store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdStore.Deactivate"),
        PublicAPI,
        Route("/Advertising/AdStore/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ad store from the system [Soft-Delete]")]
    public partial class DeactivateAdStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ad store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdStore.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdStore/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ad store from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAdStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ad store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdStore.Reactivate"),
        PublicAPI,
        Route("/Advertising/AdStore/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ad store from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAdStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ad store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdStore.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdStore/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific ad store from the system [Hard-Delete]")]
    public partial class DeleteAdStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ad store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdStore.Delete"),
        PublicAPI,
        Route("/Advertising/AdStore/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific ad store from the system [Hard-Delete]")]
    public partial class DeleteAdStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear ad store cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdStore/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all ad store calls.")]
    public class ClearAdStoreCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AdStoreServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAdStores"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdStores request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAdStoreModel, AdStoreModel, IAdStoreSearchModel, AdStorePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AdStores)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdStoresForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAdStoresForConnect request)
        {
            return await Workflows.AdStores.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdStoresDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdStoresDigest request)
        {
            return await Workflows.AdStores.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAdStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdStoreByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AdStores, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdStoreByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AdStores, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAdStoreExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdStoreExistsByID request)
        {
            return await Workflows.AdStores.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAdStoreExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdStoreExistsByKey request)
        {
            return await Workflows.AdStores.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAdStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAdStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdStoreDataAsync,
                    () => Workflows.AdStores.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAdStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAdStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdStoreDataAsync,
                    () => Workflows.AdStores.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAdStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAdStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdStoreDataAsync,
                    () => Workflows.AdStores.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAdStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAdStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdStoreDataAsync,
                    () => Workflows.AdStores.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAdStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAdStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdStoreDataAsync,
                    () => Workflows.AdStores.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAdStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAdStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdStoreDataAsync,
                    () => Workflows.AdStores.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAdStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAdStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdStoreDataAsync,
                    () => Workflows.AdStores.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAdStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAdStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdStoreDataAsync,
                    () => Workflows.AdStores.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAdStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAdStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdStoreDataAsync,
                    () => Workflows.AdStores.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAdStoreCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAdStoreCache request)
        {
            await ClearCachedAdStoreDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAdStoreDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAdStores>(string.Empty),
                    UrnId.Create<GetAdStoreByID>(string.Empty),
                    UrnId.Create<GetAdStoreByKey>(string.Empty),
                    UrnId.Create<CheckAdStoreExistsByID>(string.Empty),
                    UrnId.Create<CheckAdStoreExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AdStoreService : AdStoreServiceBase { }
}
