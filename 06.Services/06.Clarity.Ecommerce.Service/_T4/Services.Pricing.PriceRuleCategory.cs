// <autogenerated>
// <copyright file="PriceRuleCategoryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the price rule category service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of price rule categories.</summary>
    /// <seealso cref="PriceRuleCategorySearchModel"/>
    /// <seealso cref="IReturn{PriceRuleCategoryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleCategories", "GET", Priority = 1,
            Summary = "Use to get a list of price rule categories")]
    public partial class GetPriceRuleCategories : PriceRuleCategorySearchModel, IReturn<PriceRuleCategoryPagedResults> { }

    /// <summary>A ServiceStack Route to get price rule categories for connect.</summary>
    /// <seealso cref="PriceRuleCategorySearchModel"/>
    /// <seealso cref="IReturn{List{PriceRuleCategoryModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCategory.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleCategoriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all price rule categories")]
    public partial class GetPriceRuleCategoriesForConnect : PriceRuleCategorySearchModel, IReturn<List<PriceRuleCategoryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all price rule categories.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCategory.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleCategoriesDigest", "GET",
            Summary = "Use to get a hash representing each price rule categories")]
    public partial class GetPriceRuleCategoriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get price rule category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PriceRuleCategoryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleCategory/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule category")]
    public partial class GetPriceRuleCategoryByID : ImplementsIDBase, IReturn<PriceRuleCategoryModel> { }

    /// <summary>A ServiceStack Route to get price rule category.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PriceRuleCategoryModel}"/>
    [PublicAPI,
        Route("/Pricing/PriceRuleCategory/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule category by the custom key")]
    public partial class GetPriceRuleCategoryByKey : ImplementsKeyBase, IReturn<PriceRuleCategoryModel> { }

    /// <summary>A ServiceStack Route to check price rule category exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCategory.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleCategory/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleCategoryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price rule category exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCategory.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleCategory/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleCategoryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create price rule category.</summary>
    /// <seealso cref="PriceRuleCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCategory.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleCategory/Create", "POST", Priority = 1,
            Summary = "Use to create a new price rule category.")]
    public partial class CreatePriceRuleCategory : PriceRuleCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert price rule category.</summary>
    /// <seealso cref="PriceRuleCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Pricing/PriceRuleCategory/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing price rule category (as needed).")]
    public partial class UpsertPriceRuleCategory : PriceRuleCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update price rule category.</summary>
    /// <seealso cref="PriceRuleCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCategory.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleCategory/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing price rule category.")]
    public partial class UpdatePriceRuleCategory : PriceRuleCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate price rule category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCategory.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleCategory/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule category from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate price rule category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCategory.Deactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleCategory/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule category from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCategory.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleCategory/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule category from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCategory.Reactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleCategory/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule category from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCategory.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleCategory/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific price rule category from the system [Hard-Delete]")]
    public partial class DeletePriceRuleCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleCategory.Delete"),
        PublicAPI,
        Route("/Pricing/PriceRuleCategory/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific price rule category from the system [Hard-Delete]")]
    public partial class DeletePriceRuleCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear price rule category cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleCategory/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all price rule category calls.")]
    public class ClearPriceRuleCategoryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PriceRuleCategoryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPriceRuleCategories"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleCategories request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPriceRuleCategoryModel, PriceRuleCategoryModel, IPriceRuleCategorySearchModel, PriceRuleCategoryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PriceRuleCategories)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleCategoriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPriceRuleCategoriesForConnect request)
        {
            return await Workflows.PriceRuleCategories.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleCategoriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleCategoriesDigest request)
        {
            return await Workflows.PriceRuleCategories.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPriceRuleCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleCategoryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PriceRuleCategories, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleCategoryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PriceRuleCategories, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPriceRuleCategoryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleCategoryExistsByID request)
        {
            return await Workflows.PriceRuleCategories.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPriceRuleCategoryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleCategoryExistsByKey request)
        {
            return await Workflows.PriceRuleCategories.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPriceRuleCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPriceRuleCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCategoryDataAsync,
                    () => Workflows.PriceRuleCategories.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePriceRuleCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePriceRuleCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCategoryDataAsync,
                    () => Workflows.PriceRuleCategories.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePriceRuleCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePriceRuleCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCategoryDataAsync,
                    () => Workflows.PriceRuleCategories.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCategoryDataAsync,
                    () => Workflows.PriceRuleCategories.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCategoryDataAsync,
                    () => Workflows.PriceRuleCategories.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCategoryDataAsync,
                    () => Workflows.PriceRuleCategories.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCategoryDataAsync,
                    () => Workflows.PriceRuleCategories.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePriceRuleCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCategoryDataAsync,
                    () => Workflows.PriceRuleCategories.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePriceRuleCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleCategoryDataAsync,
                    () => Workflows.PriceRuleCategories.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPriceRuleCategoryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPriceRuleCategoryCache request)
        {
            await ClearCachedPriceRuleCategoryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPriceRuleCategoryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPriceRuleCategories>(string.Empty),
                    UrnId.Create<GetPriceRuleCategoryByID>(string.Empty),
                    UrnId.Create<GetPriceRuleCategoryByKey>(string.Empty),
                    UrnId.Create<CheckPriceRuleCategoryExistsByID>(string.Empty),
                    UrnId.Create<CheckPriceRuleCategoryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PriceRuleCategoryService : PriceRuleCategoryServiceBase { }
}
