// <autogenerated>
// <copyright file="SalesInvoiceEventTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales invoice event type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales invoice event types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{SalesInvoiceEventTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Invoicing/SalesInvoiceEventTypes", "GET", Priority = 1,
            Summary = "Use to get a list of sales invoice event types")]
    public partial class GetSalesInvoiceEventTypes : TypeSearchModel, IReturn<SalesInvoiceEventTypePagedResults> { }

    /// <summary>A ServiceStack Route to get sales invoice event types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceEventType.View"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales invoice event types")]
    public partial class GetSalesInvoiceEventTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales invoice event types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceEventType.View"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventTypesDigest", "GET",
            Summary = "Use to get a hash representing each sales invoice event types")]
    public partial class GetSalesInvoiceEventTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales invoice event type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Invoicing/SalesInvoiceEventType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales invoice event type")]
    public partial class GetSalesInvoiceEventTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get sales invoice event type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales invoice event type by the custom key")]
    public partial class GetSalesInvoiceEventTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get sales invoice event type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sales invoice event type by the name")]
    public partial class GetSalesInvoiceEventTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get sales invoice event type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific sales invoice event type by the name")]
    public partial class GetSalesInvoiceEventTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check sales invoice event type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceEventType.View"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesInvoiceEventTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales invoice event type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceEventType.View"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesInvoiceEventTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales invoice event type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceEventType.View"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesInvoiceEventTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales invoice event type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceEventType.View"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesInvoiceEventTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales invoice event type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceEventType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales invoice event type.")]
    public partial class CreateSalesInvoiceEventType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales invoice event type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales invoice event type (as needed).")]
    public partial class UpsertSalesInvoiceEventType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales invoice event type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceEventType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales invoice event type.")]
    public partial class UpdateSalesInvoiceEventType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales invoice event type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceEventType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales invoice event type from the system [Soft-Delete]")]
    public partial class DeactivateSalesInvoiceEventTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales invoice event type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceEventType.Deactivate"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales invoice event type from the system [Soft-Delete]")]
    public partial class DeactivateSalesInvoiceEventTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales invoice event type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceEventType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales invoice event type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesInvoiceEventTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales invoice event type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceEventType.Reactivate"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales invoice event type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesInvoiceEventTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales invoice event type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceEventType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales invoice event type from the system [Hard-Delete]")]
    public partial class DeleteSalesInvoiceEventTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales invoice event type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceEventType.Delete"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceEventType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales invoice event type from the system [Hard-Delete]")]
    public partial class DeleteSalesInvoiceEventTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales invoice event type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Invoicing/SalesInvoiceEventType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales invoice event type calls.")]
    public class ClearSalesInvoiceEventTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesInvoiceEventTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesInvoiceEventTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoiceEventTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, SalesInvoiceEventTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesInvoiceEventTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesInvoiceEventTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesInvoiceEventTypesForConnect request)
        {
            return await Workflows.SalesInvoiceEventTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesInvoiceEventTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoiceEventTypesDigest request)
        {
            return await Workflows.SalesInvoiceEventTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesInvoiceEventTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoiceEventTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesInvoiceEventTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesInvoiceEventTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoiceEventTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesInvoiceEventTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesInvoiceEventTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoiceEventTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SalesInvoiceEventTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesInvoiceEventTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoiceEventTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.SalesInvoiceEventTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesInvoiceEventTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesInvoiceEventTypeExistsByID request)
        {
            return await Workflows.SalesInvoiceEventTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesInvoiceEventTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesInvoiceEventTypeExistsByKey request)
        {
            return await Workflows.SalesInvoiceEventTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesInvoiceEventTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesInvoiceEventTypeExistsByName request)
        {
            return await Workflows.SalesInvoiceEventTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesInvoiceEventTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesInvoiceEventTypeExistsByDisplayName request)
        {
            return await Workflows.SalesInvoiceEventTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesInvoiceEventType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesInvoiceEventType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceEventTypeDataAsync,
                    () => Workflows.SalesInvoiceEventTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesInvoiceEventType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesInvoiceEventType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceEventTypeDataAsync,
                    () => Workflows.SalesInvoiceEventTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesInvoiceEventType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesInvoiceEventType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceEventTypeDataAsync,
                    () => Workflows.SalesInvoiceEventTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesInvoiceEventTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesInvoiceEventTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceEventTypeDataAsync,
                    () => Workflows.SalesInvoiceEventTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesInvoiceEventTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesInvoiceEventTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceEventTypeDataAsync,
                    () => Workflows.SalesInvoiceEventTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesInvoiceEventTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesInvoiceEventTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceEventTypeDataAsync,
                    () => Workflows.SalesInvoiceEventTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesInvoiceEventTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesInvoiceEventTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceEventTypeDataAsync,
                    () => Workflows.SalesInvoiceEventTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesInvoiceEventTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesInvoiceEventTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceEventTypeDataAsync,
                    () => Workflows.SalesInvoiceEventTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesInvoiceEventTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesInvoiceEventTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceEventTypeDataAsync,
                    () => Workflows.SalesInvoiceEventTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesInvoiceEventTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesInvoiceEventTypeCache request)
        {
            await ClearCachedSalesInvoiceEventTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesInvoiceEventTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesInvoiceEventTypes>(string.Empty),
                    UrnId.Create<GetSalesInvoiceEventTypeByID>(string.Empty),
                    UrnId.Create<GetSalesInvoiceEventTypeByKey>(string.Empty),
                    UrnId.Create<GetSalesInvoiceEventTypeByName>(string.Empty),
                    UrnId.Create<CheckSalesInvoiceEventTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesInvoiceEventTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckSalesInvoiceEventTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckSalesInvoiceEventTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesInvoiceEventTypeService : SalesInvoiceEventTypeServiceBase { }
}
