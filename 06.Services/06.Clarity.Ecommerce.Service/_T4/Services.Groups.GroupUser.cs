// <autogenerated>
// <copyright file="GroupUserService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the group user service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of group users.</summary>
    /// <seealso cref="GroupUserSearchModel"/>
    /// <seealso cref="IReturn{GroupUserPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Groups/GroupUsers", "GET", Priority = 1,
            Summary = "Use to get a list of group users")]
    public partial class GetGroupUsers : GroupUserSearchModel, IReturn<GroupUserPagedResults> { }

    /// <summary>A ServiceStack Route to get group users for connect.</summary>
    /// <seealso cref="GroupUserSearchModel"/>
    /// <seealso cref="IReturn{List{GroupUserModel}}"/>
    [Authenticate, RequiredPermission("Groups.GroupUser.View"),
        PublicAPI,
        Route("/Groups/GroupUsersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all group users")]
    public partial class GetGroupUsersForConnect : GroupUserSearchModel, IReturn<List<GroupUserModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all group users.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Groups.GroupUser.View"),
        PublicAPI,
        Route("/Groups/GroupUsersDigest", "GET",
            Summary = "Use to get a hash representing each group users")]
    public partial class GetGroupUsersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get group user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{GroupUserModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Groups/GroupUser/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific group user")]
    public partial class GetGroupUserByID : ImplementsIDBase, IReturn<GroupUserModel> { }

    /// <summary>A ServiceStack Route to get group user.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{GroupUserModel}"/>
    [PublicAPI,
        Route("/Groups/GroupUser/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific group user by the custom key")]
    public partial class GetGroupUserByKey : ImplementsKeyBase, IReturn<GroupUserModel> { }

    /// <summary>A ServiceStack Route to check group user exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Groups.GroupUser.View"),
        PublicAPI,
        Route("/Groups/GroupUser/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckGroupUserExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check group user exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Groups.GroupUser.View"),
        PublicAPI,
        Route("/Groups/GroupUser/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckGroupUserExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create group user.</summary>
    /// <seealso cref="GroupUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Groups.GroupUser.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupUser/Create", "POST", Priority = 1,
            Summary = "Use to create a new group user.")]
    public partial class CreateGroupUser : GroupUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert group user.</summary>
    /// <seealso cref="GroupUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Groups/GroupUser/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing group user (as needed).")]
    public partial class UpsertGroupUser : GroupUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update group user.</summary>
    /// <seealso cref="GroupUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Groups.GroupUser.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupUser/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing group user.")]
    public partial class UpdateGroupUser : GroupUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate group user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupUser.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupUser/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific group user from the system [Soft-Delete]")]
    public partial class DeactivateGroupUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate group user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupUser.Deactivate"),
        PublicAPI,
        Route("/Groups/GroupUser/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific group user from the system [Soft-Delete]")]
    public partial class DeactivateGroupUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate group user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupUser.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupUser/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific group user from the system [Restore from Soft-Delete]")]
    public partial class ReactivateGroupUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate group user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupUser.Reactivate"),
        PublicAPI,
        Route("/Groups/GroupUser/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific group user from the system [Restore from Soft-Delete]")]
    public partial class ReactivateGroupUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete group user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupUser.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/GroupUser/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific group user from the system [Hard-Delete]")]
    public partial class DeleteGroupUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete group user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.GroupUser.Delete"),
        PublicAPI,
        Route("/Groups/GroupUser/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific group user from the system [Hard-Delete]")]
    public partial class DeleteGroupUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear group user cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Groups/GroupUser/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all group user calls.")]
    public class ClearGroupUserCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class GroupUserServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetGroupUsers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupUsers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IGroupUserModel, GroupUserModel, IGroupUserSearchModel, GroupUserPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.GroupUsers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupUsersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetGroupUsersForConnect request)
        {
            return await Workflows.GroupUsers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupUsersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupUsersDigest request)
        {
            return await Workflows.GroupUsers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetGroupUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupUserByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.GroupUsers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupUserByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.GroupUsers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckGroupUserExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGroupUserExistsByID request)
        {
            return await Workflows.GroupUsers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckGroupUserExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGroupUserExistsByKey request)
        {
            return await Workflows.GroupUsers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertGroupUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertGroupUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupUserDataAsync,
                    () => Workflows.GroupUsers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateGroupUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateGroupUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupUserDataAsync,
                    () => Workflows.GroupUsers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateGroupUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateGroupUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupUserDataAsync,
                    () => Workflows.GroupUsers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateGroupUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateGroupUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupUserDataAsync,
                    () => Workflows.GroupUsers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateGroupUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateGroupUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupUserDataAsync,
                    () => Workflows.GroupUsers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateGroupUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateGroupUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupUserDataAsync,
                    () => Workflows.GroupUsers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateGroupUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateGroupUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupUserDataAsync,
                    () => Workflows.GroupUsers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteGroupUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteGroupUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupUserDataAsync,
                    () => Workflows.GroupUsers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteGroupUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteGroupUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupUserDataAsync,
                    () => Workflows.GroupUsers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearGroupUserCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearGroupUserCache request)
        {
            await ClearCachedGroupUserDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedGroupUserDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetGroupUsers>(string.Empty),
                    UrnId.Create<GetGroupUserByID>(string.Empty),
                    UrnId.Create<GetGroupUserByKey>(string.Empty),
                    UrnId.Create<CheckGroupUserExistsByID>(string.Empty),
                    UrnId.Create<CheckGroupUserExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class GroupUserService : GroupUserServiceBase { }
}
