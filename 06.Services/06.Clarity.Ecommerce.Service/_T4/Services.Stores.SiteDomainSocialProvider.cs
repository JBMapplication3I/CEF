// <autogenerated>
// <copyright file="SiteDomainSocialProviderService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the site domain social provider service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of site domain social providers.</summary>
    /// <seealso cref="SiteDomainSocialProviderSearchModel"/>
    /// <seealso cref="IReturn{SiteDomainSocialProviderPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/SiteDomainSocialProviders", "GET", Priority = 1,
            Summary = "Use to get a list of site domain social providers")]
    public partial class GetSiteDomainSocialProviders : SiteDomainSocialProviderSearchModel, IReturn<SiteDomainSocialProviderPagedResults> { }

    /// <summary>A ServiceStack Route to get site domain social providers for connect.</summary>
    /// <seealso cref="SiteDomainSocialProviderSearchModel"/>
    /// <seealso cref="IReturn{List{SiteDomainSocialProviderModel}}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomainSocialProvider.View"),
        PublicAPI,
        Route("/Stores/SiteDomainSocialProvidersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all site domain social providers")]
    public partial class GetSiteDomainSocialProvidersForConnect : SiteDomainSocialProviderSearchModel, IReturn<List<SiteDomainSocialProviderModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all site domain social providers.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomainSocialProvider.View"),
        PublicAPI,
        Route("/Stores/SiteDomainSocialProvidersDigest", "GET",
            Summary = "Use to get a hash representing each site domain social providers")]
    public partial class GetSiteDomainSocialProvidersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get site domain social provider.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SiteDomainSocialProviderModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/SiteDomainSocialProvider/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific site domain social provider")]
    public partial class GetSiteDomainSocialProviderByID : ImplementsIDBase, IReturn<SiteDomainSocialProviderModel> { }

    /// <summary>A ServiceStack Route to get site domain social provider.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SiteDomainSocialProviderModel}"/>
    [PublicAPI,
        Route("/Stores/SiteDomainSocialProvider/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific site domain social provider by the custom key")]
    public partial class GetSiteDomainSocialProviderByKey : ImplementsKeyBase, IReturn<SiteDomainSocialProviderModel> { }

    /// <summary>A ServiceStack Route to check site domain social provider exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomainSocialProvider.View"),
        PublicAPI,
        Route("/Stores/SiteDomainSocialProvider/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSiteDomainSocialProviderExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check site domain social provider exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomainSocialProvider.View"),
        PublicAPI,
        Route("/Stores/SiteDomainSocialProvider/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSiteDomainSocialProviderExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create site domain social provider.</summary>
    /// <seealso cref="SiteDomainSocialProviderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomainSocialProvider.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SiteDomainSocialProvider/Create", "POST", Priority = 1,
            Summary = "Use to create a new site domain social provider.")]
    public partial class CreateSiteDomainSocialProvider : SiteDomainSocialProviderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert site domain social provider.</summary>
    /// <seealso cref="SiteDomainSocialProviderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/SiteDomainSocialProvider/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing site domain social provider (as needed).")]
    public partial class UpsertSiteDomainSocialProvider : SiteDomainSocialProviderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update site domain social provider.</summary>
    /// <seealso cref="SiteDomainSocialProviderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomainSocialProvider.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SiteDomainSocialProvider/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing site domain social provider.")]
    public partial class UpdateSiteDomainSocialProvider : SiteDomainSocialProviderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate site domain social provider.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomainSocialProvider.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SiteDomainSocialProvider/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific site domain social provider from the system [Soft-Delete]")]
    public partial class DeactivateSiteDomainSocialProviderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate site domain social provider by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomainSocialProvider.Deactivate"),
        PublicAPI,
        Route("/Stores/SiteDomainSocialProvider/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific site domain social provider from the system [Soft-Delete]")]
    public partial class DeactivateSiteDomainSocialProviderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate site domain social provider.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomainSocialProvider.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SiteDomainSocialProvider/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific site domain social provider from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSiteDomainSocialProviderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate site domain social provider by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomainSocialProvider.Reactivate"),
        PublicAPI,
        Route("/Stores/SiteDomainSocialProvider/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific site domain social provider from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSiteDomainSocialProviderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete site domain social provider.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomainSocialProvider.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SiteDomainSocialProvider/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific site domain social provider from the system [Hard-Delete]")]
    public partial class DeleteSiteDomainSocialProviderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete site domain social provider by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomainSocialProvider.Delete"),
        PublicAPI,
        Route("/Stores/SiteDomainSocialProvider/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific site domain social provider from the system [Hard-Delete]")]
    public partial class DeleteSiteDomainSocialProviderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear site domain social provider cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/SiteDomainSocialProvider/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all site domain social provider calls.")]
    public class ClearSiteDomainSocialProviderCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SiteDomainSocialProviderServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSiteDomainSocialProviders"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSiteDomainSocialProviders request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISiteDomainSocialProviderModel, SiteDomainSocialProviderModel, ISiteDomainSocialProviderSearchModel, SiteDomainSocialProviderPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SiteDomainSocialProviders)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSiteDomainSocialProvidersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSiteDomainSocialProvidersForConnect request)
        {
            return await Workflows.SiteDomainSocialProviders.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSiteDomainSocialProvidersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSiteDomainSocialProvidersDigest request)
        {
            return await Workflows.SiteDomainSocialProviders.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSiteDomainSocialProviderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSiteDomainSocialProviderByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SiteDomainSocialProviders, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSiteDomainSocialProviderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSiteDomainSocialProviderByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SiteDomainSocialProviders, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSiteDomainSocialProviderExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSiteDomainSocialProviderExistsByID request)
        {
            return await Workflows.SiteDomainSocialProviders.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSiteDomainSocialProviderExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSiteDomainSocialProviderExistsByKey request)
        {
            return await Workflows.SiteDomainSocialProviders.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSiteDomainSocialProvider"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSiteDomainSocialProvider request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainSocialProviderDataAsync,
                    () => Workflows.SiteDomainSocialProviders.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSiteDomainSocialProvider"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSiteDomainSocialProvider request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainSocialProviderDataAsync,
                    () => Workflows.SiteDomainSocialProviders.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSiteDomainSocialProvider"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSiteDomainSocialProvider request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainSocialProviderDataAsync,
                    () => Workflows.SiteDomainSocialProviders.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSiteDomainSocialProviderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSiteDomainSocialProviderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainSocialProviderDataAsync,
                    () => Workflows.SiteDomainSocialProviders.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSiteDomainSocialProviderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSiteDomainSocialProviderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainSocialProviderDataAsync,
                    () => Workflows.SiteDomainSocialProviders.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSiteDomainSocialProviderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSiteDomainSocialProviderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainSocialProviderDataAsync,
                    () => Workflows.SiteDomainSocialProviders.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSiteDomainSocialProviderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSiteDomainSocialProviderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainSocialProviderDataAsync,
                    () => Workflows.SiteDomainSocialProviders.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSiteDomainSocialProviderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSiteDomainSocialProviderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainSocialProviderDataAsync,
                    () => Workflows.SiteDomainSocialProviders.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSiteDomainSocialProviderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSiteDomainSocialProviderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainSocialProviderDataAsync,
                    () => Workflows.SiteDomainSocialProviders.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSiteDomainSocialProviderCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSiteDomainSocialProviderCache request)
        {
            await ClearCachedSiteDomainSocialProviderDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSiteDomainSocialProviderDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSiteDomainSocialProviders>(string.Empty),
                    UrnId.Create<GetSiteDomainSocialProviderByID>(string.Empty),
                    UrnId.Create<GetSiteDomainSocialProviderByKey>(string.Empty),
                    UrnId.Create<CheckSiteDomainSocialProviderExistsByID>(string.Empty),
                    UrnId.Create<CheckSiteDomainSocialProviderExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SiteDomainSocialProviderService : SiteDomainSocialProviderServiceBase { }
}
