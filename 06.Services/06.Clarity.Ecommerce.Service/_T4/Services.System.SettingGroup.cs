// <autogenerated>
// <copyright file="SettingGroupService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the setting group service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of setting groups.</summary>
    /// <seealso cref="SettingGroupSearchModel"/>
    /// <seealso cref="IReturn{SettingGroupPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/SettingGroups", "GET", Priority = 1,
            Summary = "Use to get a list of setting groups")]
    public partial class GetSettingGroups : SettingGroupSearchModel, IReturn<SettingGroupPagedResults> { }

    /// <summary>A ServiceStack Route to get setting groups for connect.</summary>
    /// <seealso cref="SettingGroupSearchModel"/>
    /// <seealso cref="IReturn{List{SettingGroupModel}}"/>
    [Authenticate, RequiredPermission("Structure.SettingGroup.View"),
        PublicAPI,
        Route("/Structure/SettingGroupsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all setting groups")]
    public partial class GetSettingGroupsForConnect : SettingGroupSearchModel, IReturn<List<SettingGroupModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all setting groups.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Structure.SettingGroup.View"),
        PublicAPI,
        Route("/Structure/SettingGroupsDigest", "GET",
            Summary = "Use to get a hash representing each setting groups")]
    public partial class GetSettingGroupsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get setting group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SettingGroupModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/SettingGroup/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific setting group")]
    public partial class GetSettingGroupByID : ImplementsIDBase, IReturn<SettingGroupModel> { }

    /// <summary>A ServiceStack Route to get setting group.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SettingGroupModel}"/>
    [PublicAPI,
        Route("/Structure/SettingGroup/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific setting group by the custom key")]
    public partial class GetSettingGroupByKey : ImplementsKeyBase, IReturn<SettingGroupModel> { }

    /// <summary>A ServiceStack Route to get setting group.</summary>
    /// <seealso cref="IReturn{SettingGroupModel}"/>
    [PublicAPI,
        Route("/Structure/SettingGroup/Name", "GET", Priority = 1,
            Summary = "Use to get a specific setting group by the name")]
    public partial class GetSettingGroupByName : ImplementsNameBase, IReturn<SettingGroupModel> { }

    /// <summary>A ServiceStack Route to get setting group.</summary>
    /// <seealso cref="IReturn{SettingGroupModel}"/>
    [PublicAPI,
        Route("/Structure/SettingGroup/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific setting group by the name")]
    public partial class GetSettingGroupByDisplayName : ImplementsDisplayNameBase, IReturn<SettingGroupModel> { }

    /// <summary>A ServiceStack Route to check setting group exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.SettingGroup.View"),
        PublicAPI,
        Route("/Structure/SettingGroup/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSettingGroupExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check setting group exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.SettingGroup.View"),
        PublicAPI,
        Route("/Structure/SettingGroup/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSettingGroupExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check setting group exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.SettingGroup.View"),
        PublicAPI,
        Route("/Structure/SettingGroup/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSettingGroupExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check setting group exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.SettingGroup.View"),
        PublicAPI,
        Route("/Structure/SettingGroup/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSettingGroupExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create setting group.</summary>
    /// <seealso cref="SettingGroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.SettingGroup.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/SettingGroup/Create", "POST", Priority = 1,
            Summary = "Use to create a new setting group.")]
    public partial class CreateSettingGroup : SettingGroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert setting group.</summary>
    /// <seealso cref="SettingGroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Structure/SettingGroup/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing setting group (as needed).")]
    public partial class UpsertSettingGroup : SettingGroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update setting group.</summary>
    /// <seealso cref="SettingGroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.SettingGroup.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/SettingGroup/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing setting group.")]
    public partial class UpdateSettingGroup : SettingGroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate setting group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.SettingGroup.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/SettingGroup/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific setting group from the system [Soft-Delete]")]
    public partial class DeactivateSettingGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate setting group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.SettingGroup.Deactivate"),
        PublicAPI,
        Route("/Structure/SettingGroup/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific setting group from the system [Soft-Delete]")]
    public partial class DeactivateSettingGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate setting group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.SettingGroup.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/SettingGroup/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific setting group from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSettingGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate setting group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.SettingGroup.Reactivate"),
        PublicAPI,
        Route("/Structure/SettingGroup/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific setting group from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSettingGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete setting group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.SettingGroup.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/SettingGroup/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific setting group from the system [Hard-Delete]")]
    public partial class DeleteSettingGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete setting group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.SettingGroup.Delete"),
        PublicAPI,
        Route("/Structure/SettingGroup/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific setting group from the system [Hard-Delete]")]
    public partial class DeleteSettingGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear setting group cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/SettingGroup/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all setting group calls.")]
    public class ClearSettingGroupCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SettingGroupServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSettingGroups"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSettingGroups request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISettingGroupModel, SettingGroupModel, ISettingGroupSearchModel, SettingGroupPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SettingGroups)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSettingGroupsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSettingGroupsForConnect request)
        {
            return await Workflows.SettingGroups.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSettingGroupsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSettingGroupsDigest request)
        {
            return await Workflows.SettingGroups.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSettingGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSettingGroupByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SettingGroups, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSettingGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSettingGroupByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SettingGroups, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSettingGroupByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSettingGroupByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SettingGroups, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSettingGroupByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSettingGroupByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.SettingGroups, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSettingGroupExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSettingGroupExistsByID request)
        {
            return await Workflows.SettingGroups.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSettingGroupExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSettingGroupExistsByKey request)
        {
            return await Workflows.SettingGroups.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSettingGroupExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSettingGroupExistsByName request)
        {
            return await Workflows.SettingGroups.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSettingGroupExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSettingGroupExistsByDisplayName request)
        {
            return await Workflows.SettingGroups.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSettingGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSettingGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingGroupDataAsync,
                    () => Workflows.SettingGroups.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSettingGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSettingGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingGroupDataAsync,
                    () => Workflows.SettingGroups.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSettingGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSettingGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingGroupDataAsync,
                    () => Workflows.SettingGroups.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSettingGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSettingGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingGroupDataAsync,
                    () => Workflows.SettingGroups.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSettingGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSettingGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingGroupDataAsync,
                    () => Workflows.SettingGroups.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSettingGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSettingGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingGroupDataAsync,
                    () => Workflows.SettingGroups.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSettingGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSettingGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingGroupDataAsync,
                    () => Workflows.SettingGroups.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSettingGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSettingGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingGroupDataAsync,
                    () => Workflows.SettingGroups.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSettingGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSettingGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingGroupDataAsync,
                    () => Workflows.SettingGroups.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSettingGroupCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSettingGroupCache request)
        {
            await ClearCachedSettingGroupDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSettingGroupDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSettingGroups>(string.Empty),
                    UrnId.Create<GetSettingGroupByID>(string.Empty),
                    UrnId.Create<GetSettingGroupByKey>(string.Empty),
                    UrnId.Create<GetSettingGroupByName>(string.Empty),
                    UrnId.Create<CheckSettingGroupExistsByID>(string.Empty),
                    UrnId.Create<CheckSettingGroupExistsByKey>(string.Empty),
                    UrnId.Create<CheckSettingGroupExistsByName>(string.Empty),
                    UrnId.Create<CheckSettingGroupExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SettingGroupService : SettingGroupServiceBase { }
}
