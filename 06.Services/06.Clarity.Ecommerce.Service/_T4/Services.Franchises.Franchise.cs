// <autogenerated>
// <copyright file="FranchiseService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchises.</summary>
    /// <seealso cref="FranchiseSearchModel"/>
    /// <seealso cref="IReturn{FranchisePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/Franchises", "GET", Priority = 1,
            Summary = "Use to get a list of franchises")]
    public partial class GetFranchises : FranchiseSearchModel, IReturn<FranchisePagedResults> { }

    /// <summary>A ServiceStack Route to get franchises for connect.</summary>
    /// <seealso cref="FranchiseSearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseModel}}"/>
    [Authenticate, RequiredPermission("Franchises.Franchise.View"),
        PublicAPI,
        Route("/Franchises/FranchisesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchises")]
    public partial class GetFranchisesForConnect : FranchiseSearchModel, IReturn<List<FranchiseModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchises.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.Franchise.View"),
        PublicAPI,
        Route("/Franchises/FranchisesDigest", "GET",
            Summary = "Use to get a hash representing each franchises")]
    public partial class GetFranchisesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/Franchise/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise")]
    public partial class GetFranchiseByID : ImplementsIDBase, IReturn<FranchiseModel> { }

    /// <summary>A ServiceStack Route to get franchise.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseModel}"/>
    [PublicAPI,
        Route("/Franchises/Franchise/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise by the custom key")]
    public partial class GetFranchiseByKey : ImplementsKeyBase, IReturn<FranchiseModel> { }

    /// <summary>A ServiceStack Route to get franchise.</summary>
    /// <seealso cref="IReturn{FranchiseModel}"/>
    [PublicAPI,
        Route("/Franchises/Franchise/Name", "GET", Priority = 1,
            Summary = "Use to get a specific franchise by the name")]
    public partial class GetFranchiseByName : ImplementsNameBase, IReturn<FranchiseModel> { }

    /// <summary>A ServiceStack Route to check franchise exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.Franchise.View"),
        PublicAPI,
        Route("/Franchises/Franchise/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.Franchise.View"),
        PublicAPI,
        Route("/Franchises/Franchise/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.Franchise.View"),
        PublicAPI,
        Route("/Franchises/Franchise/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise.</summary>
    /// <seealso cref="FranchiseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.Franchise.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/Franchise/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise.")]
    public partial class CreateFranchise : FranchiseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise.</summary>
    /// <seealso cref="FranchiseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/Franchise/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise (as needed).")]
    public partial class UpsertFranchise : FranchiseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise.</summary>
    /// <seealso cref="FranchiseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.Franchise.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/Franchise/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise.")]
    public partial class UpdateFranchise : FranchiseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.Franchise.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/Franchise/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.Franchise.Deactivate"),
        PublicAPI,
        Route("/Franchises/Franchise/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.Franchise.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/Franchise/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.Franchise.Reactivate"),
        PublicAPI,
        Route("/Franchises/Franchise/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.Franchise.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/Franchise/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise from the system [Hard-Delete]")]
    public partial class DeleteFranchiseByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.Franchise.Delete"),
        PublicAPI,
        Route("/Franchises/Franchise/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise from the system [Hard-Delete]")]
    public partial class DeleteFranchiseByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/Franchise/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise calls.")]
    public class ClearFranchiseCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchises"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchises request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseModel, FranchiseModel, IFranchiseSearchModel, FranchisePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Franchises)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchisesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchisesForConnect request)
        {
            return await Workflows.Franchises.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchisesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchisesDigest request)
        {
            return await Workflows.Franchises.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Franchises, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Franchises, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Franchises, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseExistsByID request)
        {
            return await Workflows.Franchises.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseExistsByKey request)
        {
            return await Workflows.Franchises.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseExistsByName request)
        {
            return await Workflows.Franchises.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchise"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchise request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDataAsync,
                    () => Workflows.Franchises.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchise"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchise request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDataAsync,
                    () => Workflows.Franchises.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchise"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchise request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDataAsync,
                    () => Workflows.Franchises.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDataAsync,
                    () => Workflows.Franchises.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDataAsync,
                    () => Workflows.Franchises.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDataAsync,
                    () => Workflows.Franchises.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDataAsync,
                    () => Workflows.Franchises.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDataAsync,
                    () => Workflows.Franchises.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseDataAsync,
                    () => Workflows.Franchises.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseCache request)
        {
            await ClearCachedFranchiseDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchises>(string.Empty),
                    UrnId.Create<GetFranchiseByID>(string.Empty),
                    UrnId.Create<GetFranchiseByKey>(string.Empty),
                    UrnId.Create<GetFranchiseByName>(string.Empty),
                    UrnId.Create<CheckFranchiseExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseExistsByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseService : FranchiseServiceBase { }
}
