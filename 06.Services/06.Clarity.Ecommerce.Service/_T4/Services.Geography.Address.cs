// <autogenerated>
// <copyright file="AddressService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the address service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of addresses.</summary>
    /// <seealso cref="AddressSearchModel"/>
    /// <seealso cref="IReturn{AddressPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/Addresses", "GET", Priority = 1,
            Summary = "Use to get a list of addresses")]
    public partial class GetAddresses : AddressSearchModel, IReturn<AddressPagedResults> { }

    /// <summary>A ServiceStack Route to get addresses for connect.</summary>
    /// <seealso cref="AddressSearchModel"/>
    /// <seealso cref="IReturn{List{AddressModel}}"/>
    [Authenticate, RequiredPermission("Geography.Address.View"),
        PublicAPI,
        Route("/Geography/AddressesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all addresses")]
    public partial class GetAddressesForConnect : AddressSearchModel, IReturn<List<AddressModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all addresses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.Address.View"),
        PublicAPI,
        Route("/Geography/AddressesDigest", "GET",
            Summary = "Use to get a hash representing each addresses")]
    public partial class GetAddressesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get address.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AddressModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/Address/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific address")]
    public partial class GetAddressByID : ImplementsIDBase, IReturn<AddressModel> { }

    /// <summary>A ServiceStack Route to get address.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AddressModel}"/>
    [PublicAPI,
        Route("/Geography/Address/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific address by the custom key")]
    public partial class GetAddressByKey : ImplementsKeyBase, IReturn<AddressModel> { }

    /// <summary>A ServiceStack Route to check address exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.Address.View"),
        PublicAPI,
        Route("/Geography/Address/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAddressExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check address exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.Address.View"),
        PublicAPI,
        Route("/Geography/Address/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAddressExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create address.</summary>
    /// <seealso cref="AddressModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.Address.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/Address/Create", "POST", Priority = 1,
            Summary = "Use to create a new address.")]
    public partial class CreateAddress : AddressModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert address.</summary>
    /// <seealso cref="AddressModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/Address/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing address (as needed).")]
    public partial class UpsertAddress : AddressModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update address.</summary>
    /// <seealso cref="AddressModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.Address.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/Address/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing address.")]
    public partial class UpdateAddress : AddressModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate address.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.Address.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/Address/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific address from the system [Soft-Delete]")]
    public partial class DeactivateAddressByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate address by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.Address.Deactivate"),
        PublicAPI,
        Route("/Geography/Address/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific address from the system [Soft-Delete]")]
    public partial class DeactivateAddressByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate address.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.Address.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/Address/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific address from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAddressByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate address by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.Address.Reactivate"),
        PublicAPI,
        Route("/Geography/Address/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific address from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAddressByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete address.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.Address.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/Address/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific address from the system [Hard-Delete]")]
    public partial class DeleteAddressByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete address by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.Address.Delete"),
        PublicAPI,
        Route("/Geography/Address/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific address from the system [Hard-Delete]")]
    public partial class DeleteAddressByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear address cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/Address/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all address calls.")]
    public class ClearAddressCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AddressServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAddresses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAddresses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAddressModel, AddressModel, IAddressSearchModel, AddressPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Addresses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAddressesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAddressesForConnect request)
        {
            return await Workflows.Addresses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAddressesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAddressesDigest request)
        {
            return await Workflows.Addresses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAddressByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAddressByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Addresses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAddressByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAddressByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Addresses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAddressExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAddressExistsByID request)
        {
            return await Workflows.Addresses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAddressExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAddressExistsByKey request)
        {
            return await Workflows.Addresses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAddress"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAddress request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAddressDataAsync,
                    () => Workflows.Addresses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAddress"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAddress request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAddressDataAsync,
                    () => Workflows.Addresses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAddress"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAddress request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAddressDataAsync,
                    () => Workflows.Addresses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAddressByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAddressByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAddressDataAsync,
                    () => Workflows.Addresses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAddressByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAddressByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAddressDataAsync,
                    () => Workflows.Addresses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAddressByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAddressByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAddressDataAsync,
                    () => Workflows.Addresses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAddressByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAddressByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAddressDataAsync,
                    () => Workflows.Addresses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAddressByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAddressByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAddressDataAsync,
                    () => Workflows.Addresses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAddressByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAddressByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAddressDataAsync,
                    () => Workflows.Addresses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAddressCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAddressCache request)
        {
            await ClearCachedAddressDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAddressDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAddresses>(string.Empty),
                    UrnId.Create<GetAddressByID>(string.Empty),
                    UrnId.Create<GetAddressByKey>(string.Empty),
                    UrnId.Create<CheckAddressExistsByID>(string.Empty),
                    UrnId.Create<CheckAddressExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AddressService : AddressServiceBase { }
}
