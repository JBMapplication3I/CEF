// <autogenerated>
// <copyright file="AuctionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the auction service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of auctions.</summary>
    /// <seealso cref="AuctionSearchModel"/>
    /// <seealso cref="IReturn{AuctionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/Auctions", "GET", Priority = 1,
            Summary = "Use to get a list of auctions")]
    public partial class GetAuctions : AuctionSearchModel, IReturn<AuctionPagedResults> { }

    /// <summary>A ServiceStack Route to get auctions for connect.</summary>
    /// <seealso cref="AuctionSearchModel"/>
    /// <seealso cref="IReturn{List{AuctionModel}}"/>
    [Authenticate, RequiredPermission("Auctions.Auction.View"),
        PublicAPI,
        Route("/Auctions/AuctionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all auctions")]
    public partial class GetAuctionsForConnect : AuctionSearchModel, IReturn<List<AuctionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all auctions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Auctions.Auction.View"),
        PublicAPI,
        Route("/Auctions/AuctionsDigest", "GET",
            Summary = "Use to get a hash representing each auctions")]
    public partial class GetAuctionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AuctionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/Auction/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific auction")]
    public partial class GetAuctionByID : ImplementsIDBase, IReturn<AuctionModel> { }

    /// <summary>A ServiceStack Route to get auction.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AuctionModel}"/>
    [PublicAPI,
        Route("/Auctions/Auction/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific auction by the custom key")]
    public partial class GetAuctionByKey : ImplementsKeyBase, IReturn<AuctionModel> { }

    /// <summary>A ServiceStack Route to get auction.</summary>
    /// <seealso cref="IReturn{AuctionModel}"/>
    [PublicAPI,
        Route("/Auctions/Auction/Name", "GET", Priority = 1,
            Summary = "Use to get a specific auction by the name")]
    public partial class GetAuctionByName : ImplementsNameBase, IReturn<AuctionModel> { }

    /// <summary>A ServiceStack Route to check auction exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.Auction.View"),
        PublicAPI,
        Route("/Auctions/Auction/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAuctionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check auction exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.Auction.View"),
        PublicAPI,
        Route("/Auctions/Auction/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAuctionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check auction exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.Auction.View"),
        PublicAPI,
        Route("/Auctions/Auction/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAuctionExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create auction.</summary>
    /// <seealso cref="AuctionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.Auction.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Auction/Create", "POST", Priority = 1,
            Summary = "Use to create a new auction.")]
    public partial class CreateAuction : AuctionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert auction.</summary>
    /// <seealso cref="AuctionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Auctions/Auction/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing auction (as needed).")]
    public partial class UpsertAuction : AuctionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update auction.</summary>
    /// <seealso cref="AuctionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.Auction.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Auction/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing auction.")]
    public partial class UpdateAuction : AuctionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Auction.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Auction/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific auction from the system [Soft-Delete]")]
    public partial class DeactivateAuctionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate auction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Auction.Deactivate"),
        PublicAPI,
        Route("/Auctions/Auction/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific auction from the system [Soft-Delete]")]
    public partial class DeactivateAuctionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Auction.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Auction/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific auction from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAuctionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate auction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Auction.Reactivate"),
        PublicAPI,
        Route("/Auctions/Auction/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific auction from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAuctionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Auction.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Auction/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific auction from the system [Hard-Delete]")]
    public partial class DeleteAuctionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete auction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Auction.Delete"),
        PublicAPI,
        Route("/Auctions/Auction/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific auction from the system [Hard-Delete]")]
    public partial class DeleteAuctionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear auction cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/Auction/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all auction calls.")]
    public class ClearAuctionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AuctionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAuctions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAuctionModel, AuctionModel, IAuctionSearchModel, AuctionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Auctions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAuctionsForConnect request)
        {
            return await Workflows.Auctions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionsDigest request)
        {
            return await Workflows.Auctions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Auctions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Auctions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAuctionByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAuctionByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Auctions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAuctionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAuctionExistsByID request)
        {
            return await Workflows.Auctions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAuctionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAuctionExistsByKey request)
        {
            return await Workflows.Auctions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAuctionExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAuctionExistsByName request)
        {
            return await Workflows.Auctions.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAuction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAuction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionDataAsync,
                    () => Workflows.Auctions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAuction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAuction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionDataAsync,
                    () => Workflows.Auctions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAuction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAuction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionDataAsync,
                    () => Workflows.Auctions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAuctionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionDataAsync,
                    () => Workflows.Auctions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAuctionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionDataAsync,
                    () => Workflows.Auctions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAuctionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionDataAsync,
                    () => Workflows.Auctions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAuctionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionDataAsync,
                    () => Workflows.Auctions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAuctionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionDataAsync,
                    () => Workflows.Auctions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAuctionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAuctionDataAsync,
                    () => Workflows.Auctions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAuctionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAuctionCache request)
        {
            await ClearCachedAuctionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAuctionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAuctions>(string.Empty),
                    UrnId.Create<GetAuctionByID>(string.Empty),
                    UrnId.Create<GetAuctionByKey>(string.Empty),
                    UrnId.Create<GetAuctionByName>(string.Empty),
                    UrnId.Create<CheckAuctionExistsByID>(string.Empty),
                    UrnId.Create<CheckAuctionExistsByKey>(string.Empty),
                    UrnId.Create<CheckAuctionExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AuctionService : AuctionServiceBase { }
}
