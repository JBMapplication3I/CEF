// <autogenerated>
// <copyright file="LotGroupService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the lot group service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of lot groups.</summary>
    /// <seealso cref="LotGroupSearchModel"/>
    /// <seealso cref="IReturn{LotGroupPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/LotGroups", "GET", Priority = 1,
            Summary = "Use to get a list of lot groups")]
    public partial class GetLotGroups : LotGroupSearchModel, IReturn<LotGroupPagedResults> { }

    /// <summary>A ServiceStack Route to get lot groups for connect.</summary>
    /// <seealso cref="LotGroupSearchModel"/>
    /// <seealso cref="IReturn{List{LotGroupModel}}"/>
    [Authenticate, RequiredPermission("Auctions.LotGroup.View"),
        PublicAPI,
        Route("/Auctions/LotGroupsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all lot groups")]
    public partial class GetLotGroupsForConnect : LotGroupSearchModel, IReturn<List<LotGroupModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all lot groups.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Auctions.LotGroup.View"),
        PublicAPI,
        Route("/Auctions/LotGroupsDigest", "GET",
            Summary = "Use to get a hash representing each lot groups")]
    public partial class GetLotGroupsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get lot group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{LotGroupModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/LotGroup/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific lot group")]
    public partial class GetLotGroupByID : ImplementsIDBase, IReturn<LotGroupModel> { }

    /// <summary>A ServiceStack Route to get lot group.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{LotGroupModel}"/>
    [PublicAPI,
        Route("/Auctions/LotGroup/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific lot group by the custom key")]
    public partial class GetLotGroupByKey : ImplementsKeyBase, IReturn<LotGroupModel> { }

    /// <summary>A ServiceStack Route to get lot group.</summary>
    /// <seealso cref="IReturn{LotGroupModel}"/>
    [PublicAPI,
        Route("/Auctions/LotGroup/Name", "GET", Priority = 1,
            Summary = "Use to get a specific lot group by the name")]
    public partial class GetLotGroupByName : ImplementsNameBase, IReturn<LotGroupModel> { }

    /// <summary>A ServiceStack Route to get lot group.</summary>
    /// <seealso cref="IReturn{LotGroupModel}"/>
    [PublicAPI,
        Route("/Auctions/LotGroup/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific lot group by the name")]
    public partial class GetLotGroupByDisplayName : ImplementsDisplayNameBase, IReturn<LotGroupModel> { }

    /// <summary>A ServiceStack Route to check lot group exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.LotGroup.View"),
        PublicAPI,
        Route("/Auctions/LotGroup/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckLotGroupExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check lot group exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.LotGroup.View"),
        PublicAPI,
        Route("/Auctions/LotGroup/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckLotGroupExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check lot group exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.LotGroup.View"),
        PublicAPI,
        Route("/Auctions/LotGroup/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckLotGroupExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check lot group exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.LotGroup.View"),
        PublicAPI,
        Route("/Auctions/LotGroup/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckLotGroupExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create lot group.</summary>
    /// <seealso cref="LotGroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.LotGroup.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/LotGroup/Create", "POST", Priority = 1,
            Summary = "Use to create a new lot group.")]
    public partial class CreateLotGroup : LotGroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert lot group.</summary>
    /// <seealso cref="LotGroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Auctions/LotGroup/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing lot group (as needed).")]
    public partial class UpsertLotGroup : LotGroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update lot group.</summary>
    /// <seealso cref="LotGroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.LotGroup.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/LotGroup/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing lot group.")]
    public partial class UpdateLotGroup : LotGroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate lot group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.LotGroup.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/LotGroup/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific lot group from the system [Soft-Delete]")]
    public partial class DeactivateLotGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate lot group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.LotGroup.Deactivate"),
        PublicAPI,
        Route("/Auctions/LotGroup/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific lot group from the system [Soft-Delete]")]
    public partial class DeactivateLotGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate lot group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.LotGroup.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/LotGroup/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific lot group from the system [Restore from Soft-Delete]")]
    public partial class ReactivateLotGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate lot group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.LotGroup.Reactivate"),
        PublicAPI,
        Route("/Auctions/LotGroup/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific lot group from the system [Restore from Soft-Delete]")]
    public partial class ReactivateLotGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete lot group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.LotGroup.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/LotGroup/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific lot group from the system [Hard-Delete]")]
    public partial class DeleteLotGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete lot group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.LotGroup.Delete"),
        PublicAPI,
        Route("/Auctions/LotGroup/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific lot group from the system [Hard-Delete]")]
    public partial class DeleteLotGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear lot group cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/LotGroup/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all lot group calls.")]
    public class ClearLotGroupCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class LotGroupServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetLotGroups"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLotGroups request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ILotGroupModel, LotGroupModel, ILotGroupSearchModel, LotGroupPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.LotGroups)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLotGroupsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetLotGroupsForConnect request)
        {
            return await Workflows.LotGroups.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLotGroupsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLotGroupsDigest request)
        {
            return await Workflows.LotGroups.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetLotGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLotGroupByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.LotGroups, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLotGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLotGroupByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.LotGroups, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLotGroupByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLotGroupByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.LotGroups, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLotGroupByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLotGroupByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.LotGroups, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckLotGroupExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLotGroupExistsByID request)
        {
            return await Workflows.LotGroups.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckLotGroupExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLotGroupExistsByKey request)
        {
            return await Workflows.LotGroups.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckLotGroupExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLotGroupExistsByName request)
        {
            return await Workflows.LotGroups.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckLotGroupExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLotGroupExistsByDisplayName request)
        {
            return await Workflows.LotGroups.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertLotGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertLotGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotGroupDataAsync,
                    () => Workflows.LotGroups.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateLotGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateLotGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotGroupDataAsync,
                    () => Workflows.LotGroups.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateLotGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateLotGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotGroupDataAsync,
                    () => Workflows.LotGroups.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateLotGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateLotGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotGroupDataAsync,
                    () => Workflows.LotGroups.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateLotGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateLotGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotGroupDataAsync,
                    () => Workflows.LotGroups.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateLotGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateLotGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotGroupDataAsync,
                    () => Workflows.LotGroups.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateLotGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateLotGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotGroupDataAsync,
                    () => Workflows.LotGroups.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteLotGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteLotGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotGroupDataAsync,
                    () => Workflows.LotGroups.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteLotGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteLotGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotGroupDataAsync,
                    () => Workflows.LotGroups.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearLotGroupCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearLotGroupCache request)
        {
            await ClearCachedLotGroupDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedLotGroupDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetLotGroups>(string.Empty),
                    UrnId.Create<GetLotGroupByID>(string.Empty),
                    UrnId.Create<GetLotGroupByKey>(string.Empty),
                    UrnId.Create<GetLotGroupByName>(string.Empty),
                    UrnId.Create<CheckLotGroupExistsByID>(string.Empty),
                    UrnId.Create<CheckLotGroupExistsByKey>(string.Empty),
                    UrnId.Create<CheckLotGroupExistsByName>(string.Empty),
                    UrnId.Create<CheckLotGroupExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class LotGroupService : LotGroupServiceBase { }
}
