// <autogenerated>
// <copyright file="ContractorService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the contractor service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of contractors.</summary>
    /// <seealso cref="ContractorSearchModel"/>
    /// <seealso cref="IReturn{ContractorPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/Contractors", "GET", Priority = 1,
            Summary = "Use to get a list of contractors")]
    public partial class GetContractors : ContractorSearchModel, IReturn<ContractorPagedResults> { }

    /// <summary>A ServiceStack Route to get contractors for connect.</summary>
    /// <seealso cref="ContractorSearchModel"/>
    /// <seealso cref="IReturn{List{ContractorModel}}"/>
    [Authenticate, RequiredPermission("Accounts.Contractor.View"),
        PublicAPI,
        Route("/Accounts/ContractorsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all contractors")]
    public partial class GetContractorsForConnect : ContractorSearchModel, IReturn<List<ContractorModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all contractors.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Accounts.Contractor.View"),
        PublicAPI,
        Route("/Accounts/ContractorsDigest", "GET",
            Summary = "Use to get a hash representing each contractors")]
    public partial class GetContractorsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get contractor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ContractorModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/Contractor/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific contractor")]
    public partial class GetContractorByID : ImplementsIDBase, IReturn<ContractorModel> { }

    /// <summary>A ServiceStack Route to get contractor.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ContractorModel}"/>
    [PublicAPI,
        Route("/Accounts/Contractor/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific contractor by the custom key")]
    public partial class GetContractorByKey : ImplementsKeyBase, IReturn<ContractorModel> { }

    /// <summary>A ServiceStack Route to check contractor exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.Contractor.View"),
        PublicAPI,
        Route("/Accounts/Contractor/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckContractorExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check contractor exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.Contractor.View"),
        PublicAPI,
        Route("/Accounts/Contractor/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckContractorExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create contractor.</summary>
    /// <seealso cref="ContractorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.Contractor.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/Contractor/Create", "POST", Priority = 1,
            Summary = "Use to create a new contractor.")]
    public partial class CreateContractor : ContractorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert contractor.</summary>
    /// <seealso cref="ContractorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Accounts/Contractor/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing contractor (as needed).")]
    public partial class UpsertContractor : ContractorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update contractor.</summary>
    /// <seealso cref="ContractorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.Contractor.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/Contractor/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing contractor.")]
    public partial class UpdateContractor : ContractorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate contractor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.Contractor.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/Contractor/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific contractor from the system [Soft-Delete]")]
    public partial class DeactivateContractorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate contractor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.Contractor.Deactivate"),
        PublicAPI,
        Route("/Accounts/Contractor/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific contractor from the system [Soft-Delete]")]
    public partial class DeactivateContractorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate contractor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.Contractor.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/Contractor/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific contractor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateContractorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate contractor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.Contractor.Reactivate"),
        PublicAPI,
        Route("/Accounts/Contractor/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific contractor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateContractorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete contractor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.Contractor.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/Contractor/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific contractor from the system [Hard-Delete]")]
    public partial class DeleteContractorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete contractor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.Contractor.Delete"),
        PublicAPI,
        Route("/Accounts/Contractor/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific contractor from the system [Hard-Delete]")]
    public partial class DeleteContractorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear contractor cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/Contractor/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all contractor calls.")]
    public class ClearContractorCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ContractorServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetContractors"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContractors request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IContractorModel, ContractorModel, IContractorSearchModel, ContractorPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Contractors)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetContractorsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetContractorsForConnect request)
        {
            return await Workflows.Contractors.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetContractorsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContractorsDigest request)
        {
            return await Workflows.Contractors.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetContractorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContractorByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Contractors, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetContractorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetContractorByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Contractors, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckContractorExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckContractorExistsByID request)
        {
            return await Workflows.Contractors.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckContractorExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckContractorExistsByKey request)
        {
            return await Workflows.Contractors.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertContractor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertContractor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContractorDataAsync,
                    () => Workflows.Contractors.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateContractor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateContractor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContractorDataAsync,
                    () => Workflows.Contractors.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateContractor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateContractor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContractorDataAsync,
                    () => Workflows.Contractors.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateContractorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateContractorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContractorDataAsync,
                    () => Workflows.Contractors.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateContractorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateContractorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContractorDataAsync,
                    () => Workflows.Contractors.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateContractorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateContractorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContractorDataAsync,
                    () => Workflows.Contractors.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateContractorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateContractorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContractorDataAsync,
                    () => Workflows.Contractors.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteContractorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteContractorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContractorDataAsync,
                    () => Workflows.Contractors.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteContractorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteContractorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedContractorDataAsync,
                    () => Workflows.Contractors.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearContractorCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearContractorCache request)
        {
            await ClearCachedContractorDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedContractorDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetContractors>(string.Empty),
                    UrnId.Create<GetContractorByID>(string.Empty),
                    UrnId.Create<GetContractorByKey>(string.Empty),
                    UrnId.Create<CheckContractorExistsByID>(string.Empty),
                    UrnId.Create<CheckContractorExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ContractorService : ContractorServiceBase { }
}
