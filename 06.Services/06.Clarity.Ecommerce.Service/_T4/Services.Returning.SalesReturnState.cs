// <autogenerated>
// <copyright file="SalesReturnStateService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales return state service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales return states.</summary>
    /// <seealso cref="StateSearchModel"/>
    /// <seealso cref="IReturn{SalesReturnStatePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturnStates", "GET", Priority = 1,
            Summary = "Use to get a list of sales return states")]
    public partial class GetSalesReturnStates : StateSearchModel, IReturn<SalesReturnStatePagedResults> { }

    /// <summary>A ServiceStack Route to get sales return states for connect.</summary>
    /// <seealso cref="StateSearchModel"/>
    /// <seealso cref="IReturn{List{StateModel}}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnState.View"),
        PublicAPI,
        Route("/Returning/SalesReturnStatesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales return states")]
    public partial class GetSalesReturnStatesForConnect : StateSearchModel, IReturn<List<StateModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales return states.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnState.View"),
        PublicAPI,
        Route("/Returning/SalesReturnStatesDigest", "GET",
            Summary = "Use to get a hash representing each sales return states")]
    public partial class GetSalesReturnStatesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales return state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturnState/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales return state")]
    public partial class GetSalesReturnStateByID : ImplementsIDBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get sales return state.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Returning/SalesReturnState/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales return state by the custom key")]
    public partial class GetSalesReturnStateByKey : ImplementsKeyBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get sales return state.</summary>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Returning/SalesReturnState/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sales return state by the name")]
    public partial class GetSalesReturnStateByName : ImplementsNameBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get sales return state.</summary>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Returning/SalesReturnState/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific sales return state by the name")]
    public partial class GetSalesReturnStateByDisplayName : ImplementsDisplayNameBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to check sales return state exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnState.View"),
        PublicAPI,
        Route("/Returning/SalesReturnState/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnStateExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales return state exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnState.View"),
        PublicAPI,
        Route("/Returning/SalesReturnState/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnStateExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales return state exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnState.View"),
        PublicAPI,
        Route("/Returning/SalesReturnState/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnStateExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales return state exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnState.View"),
        PublicAPI,
        Route("/Returning/SalesReturnState/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnStateExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales return state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnState.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnState/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales return state.")]
    public partial class CreateSalesReturnState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales return state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Returning/SalesReturnState/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales return state (as needed).")]
    public partial class UpsertSalesReturnState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales return state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnState.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnState/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales return state.")]
    public partial class UpdateSalesReturnState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales return state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnState.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnState/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales return state from the system [Soft-Delete]")]
    public partial class DeactivateSalesReturnStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales return state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnState.Deactivate"),
        PublicAPI,
        Route("/Returning/SalesReturnState/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales return state from the system [Soft-Delete]")]
    public partial class DeactivateSalesReturnStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales return state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnState.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnState/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales return state from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesReturnStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales return state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnState.Reactivate"),
        PublicAPI,
        Route("/Returning/SalesReturnState/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales return state from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesReturnStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales return state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnState.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnState/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales return state from the system [Hard-Delete]")]
    public partial class DeleteSalesReturnStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales return state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnState.Delete"),
        PublicAPI,
        Route("/Returning/SalesReturnState/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales return state from the system [Hard-Delete]")]
    public partial class DeleteSalesReturnStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales return state cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturnState/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales return state calls.")]
    public class ClearSalesReturnStateCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesReturnStateServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesReturnStates"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnStates request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStateModel, StateModel, IStateSearchModel, SalesReturnStatePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesReturnStates)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnStatesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesReturnStatesForConnect request)
        {
            return await Workflows.SalesReturnStates.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnStatesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnStatesDigest request)
        {
            return await Workflows.SalesReturnStates.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesReturnStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnStateByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesReturnStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnStateByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesReturnStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnStateByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnStateByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SalesReturnStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnStateByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnStateByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.SalesReturnStates, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesReturnStateExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnStateExistsByID request)
        {
            return await Workflows.SalesReturnStates.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesReturnStateExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnStateExistsByKey request)
        {
            return await Workflows.SalesReturnStates.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesReturnStateExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnStateExistsByName request)
        {
            return await Workflows.SalesReturnStates.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesReturnStateExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnStateExistsByDisplayName request)
        {
            return await Workflows.SalesReturnStates.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesReturnState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesReturnState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnStateDataAsync,
                    () => Workflows.SalesReturnStates.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesReturnState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesReturnState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnStateDataAsync,
                    () => Workflows.SalesReturnStates.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesReturnState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesReturnState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnStateDataAsync,
                    () => Workflows.SalesReturnStates.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesReturnStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesReturnStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnStateDataAsync,
                    () => Workflows.SalesReturnStates.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesReturnStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesReturnStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnStateDataAsync,
                    () => Workflows.SalesReturnStates.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesReturnStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesReturnStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnStateDataAsync,
                    () => Workflows.SalesReturnStates.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesReturnStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesReturnStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnStateDataAsync,
                    () => Workflows.SalesReturnStates.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesReturnStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesReturnStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnStateDataAsync,
                    () => Workflows.SalesReturnStates.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesReturnStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesReturnStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnStateDataAsync,
                    () => Workflows.SalesReturnStates.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesReturnStateCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesReturnStateCache request)
        {
            await ClearCachedSalesReturnStateDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesReturnStateDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesReturnStates>(string.Empty),
                    UrnId.Create<GetSalesReturnStateByID>(string.Empty),
                    UrnId.Create<GetSalesReturnStateByKey>(string.Empty),
                    UrnId.Create<GetSalesReturnStateByName>(string.Empty),
                    UrnId.Create<CheckSalesReturnStateExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesReturnStateExistsByKey>(string.Empty),
                    UrnId.Create<CheckSalesReturnStateExistsByName>(string.Empty),
                    UrnId.Create<CheckSalesReturnStateExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesReturnStateService : SalesReturnStateServiceBase { }
}
