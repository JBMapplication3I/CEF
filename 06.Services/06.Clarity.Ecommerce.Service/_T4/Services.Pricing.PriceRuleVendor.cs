// <autogenerated>
// <copyright file="PriceRuleVendorService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the price rule vendor service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of price rule vendors.</summary>
    /// <seealso cref="PriceRuleVendorSearchModel"/>
    /// <seealso cref="IReturn{PriceRuleVendorPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleVendors", "GET", Priority = 1,
            Summary = "Use to get a list of price rule vendors")]
    public partial class GetPriceRuleVendors : PriceRuleVendorSearchModel, IReturn<PriceRuleVendorPagedResults> { }

    /// <summary>A ServiceStack Route to get price rule vendors for connect.</summary>
    /// <seealso cref="PriceRuleVendorSearchModel"/>
    /// <seealso cref="IReturn{List{PriceRuleVendorModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleVendor.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleVendorsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all price rule vendors")]
    public partial class GetPriceRuleVendorsForConnect : PriceRuleVendorSearchModel, IReturn<List<PriceRuleVendorModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all price rule vendors.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleVendor.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleVendorsDigest", "GET",
            Summary = "Use to get a hash representing each price rule vendors")]
    public partial class GetPriceRuleVendorsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get price rule vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PriceRuleVendorModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleVendor/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule vendor")]
    public partial class GetPriceRuleVendorByID : ImplementsIDBase, IReturn<PriceRuleVendorModel> { }

    /// <summary>A ServiceStack Route to get price rule vendor.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PriceRuleVendorModel}"/>
    [PublicAPI,
        Route("/Pricing/PriceRuleVendor/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule vendor by the custom key")]
    public partial class GetPriceRuleVendorByKey : ImplementsKeyBase, IReturn<PriceRuleVendorModel> { }

    /// <summary>A ServiceStack Route to check price rule vendor exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleVendor.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleVendor/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleVendorExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price rule vendor exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleVendor.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleVendor/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleVendorExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create price rule vendor.</summary>
    /// <seealso cref="PriceRuleVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleVendor.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleVendor/Create", "POST", Priority = 1,
            Summary = "Use to create a new price rule vendor.")]
    public partial class CreatePriceRuleVendor : PriceRuleVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert price rule vendor.</summary>
    /// <seealso cref="PriceRuleVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Pricing/PriceRuleVendor/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing price rule vendor (as needed).")]
    public partial class UpsertPriceRuleVendor : PriceRuleVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update price rule vendor.</summary>
    /// <seealso cref="PriceRuleVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleVendor.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleVendor/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing price rule vendor.")]
    public partial class UpdatePriceRuleVendor : PriceRuleVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate price rule vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleVendor.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleVendor/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule vendor from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate price rule vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleVendor.Deactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleVendor/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule vendor from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleVendor.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleVendor/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule vendor from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleVendor.Reactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleVendor/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule vendor from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleVendor.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleVendor/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific price rule vendor from the system [Hard-Delete]")]
    public partial class DeletePriceRuleVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleVendor.Delete"),
        PublicAPI,
        Route("/Pricing/PriceRuleVendor/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific price rule vendor from the system [Hard-Delete]")]
    public partial class DeletePriceRuleVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear price rule vendor cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleVendor/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all price rule vendor calls.")]
    public class ClearPriceRuleVendorCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PriceRuleVendorServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPriceRuleVendors"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleVendors request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPriceRuleVendorModel, PriceRuleVendorModel, IPriceRuleVendorSearchModel, PriceRuleVendorPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PriceRuleVendors)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleVendorsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPriceRuleVendorsForConnect request)
        {
            return await Workflows.PriceRuleVendors.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleVendorsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleVendorsDigest request)
        {
            return await Workflows.PriceRuleVendors.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPriceRuleVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleVendorByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PriceRuleVendors, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleVendorByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PriceRuleVendors, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPriceRuleVendorExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleVendorExistsByID request)
        {
            return await Workflows.PriceRuleVendors.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPriceRuleVendorExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleVendorExistsByKey request)
        {
            return await Workflows.PriceRuleVendors.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPriceRuleVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPriceRuleVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleVendorDataAsync,
                    () => Workflows.PriceRuleVendors.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePriceRuleVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePriceRuleVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleVendorDataAsync,
                    () => Workflows.PriceRuleVendors.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePriceRuleVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePriceRuleVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleVendorDataAsync,
                    () => Workflows.PriceRuleVendors.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleVendorDataAsync,
                    () => Workflows.PriceRuleVendors.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleVendorDataAsync,
                    () => Workflows.PriceRuleVendors.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleVendorDataAsync,
                    () => Workflows.PriceRuleVendors.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleVendorDataAsync,
                    () => Workflows.PriceRuleVendors.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePriceRuleVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleVendorDataAsync,
                    () => Workflows.PriceRuleVendors.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePriceRuleVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleVendorDataAsync,
                    () => Workflows.PriceRuleVendors.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPriceRuleVendorCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPriceRuleVendorCache request)
        {
            await ClearCachedPriceRuleVendorDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPriceRuleVendorDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPriceRuleVendors>(string.Empty),
                    UrnId.Create<GetPriceRuleVendorByID>(string.Empty),
                    UrnId.Create<GetPriceRuleVendorByKey>(string.Empty),
                    UrnId.Create<CheckPriceRuleVendorExistsByID>(string.Empty),
                    UrnId.Create<CheckPriceRuleVendorExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PriceRuleVendorService : PriceRuleVendorServiceBase { }
}
