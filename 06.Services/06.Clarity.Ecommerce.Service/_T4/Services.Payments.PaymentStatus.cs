// <autogenerated>
// <copyright file="PaymentStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the payment status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of payment statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{PaymentStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/PaymentStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of payment statuses")]
    public partial class GetPaymentStatuses : StatusSearchModel, IReturn<PaymentStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get payment statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Payments.PaymentStatus.View"),
        PublicAPI,
        Route("/Payments/PaymentStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all payment statuses")]
    public partial class GetPaymentStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all payment statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.PaymentStatus.View"),
        PublicAPI,
        Route("/Payments/PaymentStatusesDigest", "GET",
            Summary = "Use to get a hash representing each payment statuses")]
    public partial class GetPaymentStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get payment status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/PaymentStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific payment status")]
    public partial class GetPaymentStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get payment status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Payments/PaymentStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific payment status by the custom key")]
    public partial class GetPaymentStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get payment status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Payments/PaymentStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific payment status by the name")]
    public partial class GetPaymentStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get payment status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Payments/PaymentStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific payment status by the name")]
    public partial class GetPaymentStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check payment status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.PaymentStatus.View"),
        PublicAPI,
        Route("/Payments/PaymentStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPaymentStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check payment status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.PaymentStatus.View"),
        PublicAPI,
        Route("/Payments/PaymentStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPaymentStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check payment status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.PaymentStatus.View"),
        PublicAPI,
        Route("/Payments/PaymentStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPaymentStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check payment status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.PaymentStatus.View"),
        PublicAPI,
        Route("/Payments/PaymentStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPaymentStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create payment status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.PaymentStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new payment status.")]
    public partial class CreatePaymentStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert payment status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/PaymentStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing payment status (as needed).")]
    public partial class UpsertPaymentStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update payment status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.PaymentStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing payment status.")]
    public partial class UpdatePaymentStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate payment status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific payment status from the system [Soft-Delete]")]
    public partial class DeactivatePaymentStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate payment status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentStatus.Deactivate"),
        PublicAPI,
        Route("/Payments/PaymentStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific payment status from the system [Soft-Delete]")]
    public partial class DeactivatePaymentStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate payment status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific payment status from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePaymentStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate payment status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentStatus.Reactivate"),
        PublicAPI,
        Route("/Payments/PaymentStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific payment status from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePaymentStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete payment status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific payment status from the system [Hard-Delete]")]
    public partial class DeletePaymentStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete payment status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentStatus.Delete"),
        PublicAPI,
        Route("/Payments/PaymentStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific payment status from the system [Hard-Delete]")]
    public partial class DeletePaymentStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear payment status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/PaymentStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all payment status calls.")]
    public class ClearPaymentStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PaymentStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPaymentStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, PaymentStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PaymentStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPaymentStatusesForConnect request)
        {
            return await Workflows.PaymentStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentStatusesDigest request)
        {
            return await Workflows.PaymentStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPaymentStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PaymentStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PaymentStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.PaymentStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.PaymentStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPaymentStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPaymentStatusExistsByID request)
        {
            return await Workflows.PaymentStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPaymentStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPaymentStatusExistsByKey request)
        {
            return await Workflows.PaymentStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPaymentStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPaymentStatusExistsByName request)
        {
            return await Workflows.PaymentStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPaymentStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPaymentStatusExistsByDisplayName request)
        {
            return await Workflows.PaymentStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPaymentStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPaymentStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentStatusDataAsync,
                    () => Workflows.PaymentStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePaymentStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePaymentStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentStatusDataAsync,
                    () => Workflows.PaymentStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePaymentStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePaymentStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentStatusDataAsync,
                    () => Workflows.PaymentStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePaymentStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePaymentStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentStatusDataAsync,
                    () => Workflows.PaymentStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePaymentStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePaymentStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentStatusDataAsync,
                    () => Workflows.PaymentStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePaymentStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePaymentStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentStatusDataAsync,
                    () => Workflows.PaymentStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePaymentStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePaymentStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentStatusDataAsync,
                    () => Workflows.PaymentStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePaymentStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePaymentStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentStatusDataAsync,
                    () => Workflows.PaymentStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePaymentStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePaymentStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentStatusDataAsync,
                    () => Workflows.PaymentStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPaymentStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPaymentStatusCache request)
        {
            await ClearCachedPaymentStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPaymentStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPaymentStatuses>(string.Empty),
                    UrnId.Create<GetPaymentStatusByID>(string.Empty),
                    UrnId.Create<GetPaymentStatusByKey>(string.Empty),
                    UrnId.Create<GetPaymentStatusByName>(string.Empty),
                    UrnId.Create<CheckPaymentStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckPaymentStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckPaymentStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckPaymentStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PaymentStatusService : PaymentStatusServiceBase { }
}
