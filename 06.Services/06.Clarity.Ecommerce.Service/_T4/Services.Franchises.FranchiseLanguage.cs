// <autogenerated>
// <copyright file="FranchiseLanguageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise language service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise languages.</summary>
    /// <seealso cref="FranchiseLanguageSearchModel"/>
    /// <seealso cref="IReturn{FranchiseLanguagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseLanguages", "GET", Priority = 1,
            Summary = "Use to get a list of franchise languages")]
    public partial class GetFranchiseLanguages : FranchiseLanguageSearchModel, IReturn<FranchiseLanguagePagedResults> { }

    /// <summary>A ServiceStack Route to get franchise languages for connect.</summary>
    /// <seealso cref="FranchiseLanguageSearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseLanguageModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseLanguage.View"),
        PublicAPI,
        Route("/Franchises/FranchiseLanguagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise languages")]
    public partial class GetFranchiseLanguagesForConnect : FranchiseLanguageSearchModel, IReturn<List<FranchiseLanguageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise languages.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseLanguage.View"),
        PublicAPI,
        Route("/Franchises/FranchiseLanguagesDigest", "GET",
            Summary = "Use to get a hash representing each franchise languages")]
    public partial class GetFranchiseLanguagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseLanguageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseLanguage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise language")]
    public partial class GetFranchiseLanguageByID : ImplementsIDBase, IReturn<FranchiseLanguageModel> { }

    /// <summary>A ServiceStack Route to get franchise language.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseLanguageModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseLanguage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise language by the custom key")]
    public partial class GetFranchiseLanguageByKey : ImplementsKeyBase, IReturn<FranchiseLanguageModel> { }

    /// <summary>A ServiceStack Route to check franchise language exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseLanguage.View"),
        PublicAPI,
        Route("/Franchises/FranchiseLanguage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseLanguageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise language exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseLanguage.View"),
        PublicAPI,
        Route("/Franchises/FranchiseLanguage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseLanguageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise language.</summary>
    /// <seealso cref="FranchiseLanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseLanguage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseLanguage/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise language.")]
    public partial class CreateFranchiseLanguage : FranchiseLanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise language.</summary>
    /// <seealso cref="FranchiseLanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseLanguage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise language (as needed).")]
    public partial class UpsertFranchiseLanguage : FranchiseLanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise language.</summary>
    /// <seealso cref="FranchiseLanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseLanguage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseLanguage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise language.")]
    public partial class UpdateFranchiseLanguage : FranchiseLanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseLanguage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseLanguage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise language from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseLanguage.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseLanguage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise language from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseLanguage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseLanguage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise language from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseLanguage.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseLanguage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise language from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseLanguage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseLanguage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise language from the system [Hard-Delete]")]
    public partial class DeleteFranchiseLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseLanguage.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseLanguage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise language from the system [Hard-Delete]")]
    public partial class DeleteFranchiseLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise language cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseLanguage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise language calls.")]
    public class ClearFranchiseLanguageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseLanguageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseLanguages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseLanguages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseLanguageModel, FranchiseLanguageModel, IFranchiseLanguageSearchModel, FranchiseLanguagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseLanguages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseLanguagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseLanguagesForConnect request)
        {
            return await Workflows.FranchiseLanguages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseLanguagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseLanguagesDigest request)
        {
            return await Workflows.FranchiseLanguages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseLanguageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseLanguages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseLanguageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseLanguages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseLanguageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseLanguageExistsByID request)
        {
            return await Workflows.FranchiseLanguages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseLanguageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseLanguageExistsByKey request)
        {
            return await Workflows.FranchiseLanguages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseLanguageDataAsync,
                    () => Workflows.FranchiseLanguages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseLanguageDataAsync,
                    () => Workflows.FranchiseLanguages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseLanguageDataAsync,
                    () => Workflows.FranchiseLanguages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseLanguageDataAsync,
                    () => Workflows.FranchiseLanguages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseLanguageDataAsync,
                    () => Workflows.FranchiseLanguages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseLanguageDataAsync,
                    () => Workflows.FranchiseLanguages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseLanguageDataAsync,
                    () => Workflows.FranchiseLanguages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseLanguageDataAsync,
                    () => Workflows.FranchiseLanguages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseLanguageDataAsync,
                    () => Workflows.FranchiseLanguages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseLanguageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseLanguageCache request)
        {
            await ClearCachedFranchiseLanguageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseLanguageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseLanguages>(string.Empty),
                    UrnId.Create<GetFranchiseLanguageByID>(string.Empty),
                    UrnId.Create<GetFranchiseLanguageByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseLanguageExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseLanguageExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseLanguageService : FranchiseLanguageServiceBase { }
}
