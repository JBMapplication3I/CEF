// <autogenerated>
// <copyright file="CounterTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the counter type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of counter types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{CounterTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Counters/CounterTypes", "GET", Priority = 1,
            Summary = "Use to get a list of counter types")]
    public partial class GetCounterTypes : TypeSearchModel, IReturn<CounterTypePagedResults> { }

    /// <summary>A ServiceStack Route to get counter types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Counters.CounterType.View"),
        PublicAPI,
        Route("/Counters/CounterTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all counter types")]
    public partial class GetCounterTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all counter types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Counters.CounterType.View"),
        PublicAPI,
        Route("/Counters/CounterTypesDigest", "GET",
            Summary = "Use to get a hash representing each counter types")]
    public partial class GetCounterTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get counter type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Counters/CounterType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific counter type")]
    public partial class GetCounterTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get counter type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Counters/CounterType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific counter type by the custom key")]
    public partial class GetCounterTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get counter type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Counters/CounterType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific counter type by the name")]
    public partial class GetCounterTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get counter type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Counters/CounterType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific counter type by the name")]
    public partial class GetCounterTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check counter type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Counters.CounterType.View"),
        PublicAPI,
        Route("/Counters/CounterType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCounterTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check counter type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Counters.CounterType.View"),
        PublicAPI,
        Route("/Counters/CounterType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCounterTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check counter type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Counters.CounterType.View"),
        PublicAPI,
        Route("/Counters/CounterType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCounterTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check counter type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Counters.CounterType.View"),
        PublicAPI,
        Route("/Counters/CounterType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCounterTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create counter type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Counters.CounterType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterType/Create", "POST", Priority = 1,
            Summary = "Use to create a new counter type.")]
    public partial class CreateCounterType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert counter type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Counters/CounterType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing counter type (as needed).")]
    public partial class UpsertCounterType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update counter type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Counters.CounterType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing counter type.")]
    public partial class UpdateCounterType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate counter type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific counter type from the system [Soft-Delete]")]
    public partial class DeactivateCounterTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate counter type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterType.Deactivate"),
        PublicAPI,
        Route("/Counters/CounterType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific counter type from the system [Soft-Delete]")]
    public partial class DeactivateCounterTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate counter type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific counter type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCounterTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate counter type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterType.Reactivate"),
        PublicAPI,
        Route("/Counters/CounterType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific counter type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCounterTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete counter type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Counters/CounterType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific counter type from the system [Hard-Delete]")]
    public partial class DeleteCounterTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete counter type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Counters.CounterType.Delete"),
        PublicAPI,
        Route("/Counters/CounterType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific counter type from the system [Hard-Delete]")]
    public partial class DeleteCounterTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear counter type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Counters/CounterType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all counter type calls.")]
    public class ClearCounterTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CounterTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCounterTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, CounterTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CounterTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCounterTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCounterTypesForConnect request)
        {
            return await Workflows.CounterTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCounterTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterTypesDigest request)
        {
            return await Workflows.CounterTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCounterTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CounterTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCounterTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CounterTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCounterTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CounterTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCounterTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCounterTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.CounterTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCounterTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCounterTypeExistsByID request)
        {
            return await Workflows.CounterTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCounterTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCounterTypeExistsByKey request)
        {
            return await Workflows.CounterTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCounterTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCounterTypeExistsByName request)
        {
            return await Workflows.CounterTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCounterTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCounterTypeExistsByDisplayName request)
        {
            return await Workflows.CounterTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCounterType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCounterType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterTypeDataAsync,
                    () => Workflows.CounterTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCounterType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCounterType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterTypeDataAsync,
                    () => Workflows.CounterTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCounterType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCounterType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterTypeDataAsync,
                    () => Workflows.CounterTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCounterTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCounterTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterTypeDataAsync,
                    () => Workflows.CounterTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCounterTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCounterTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterTypeDataAsync,
                    () => Workflows.CounterTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCounterTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCounterTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterTypeDataAsync,
                    () => Workflows.CounterTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCounterTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCounterTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterTypeDataAsync,
                    () => Workflows.CounterTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCounterTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCounterTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterTypeDataAsync,
                    () => Workflows.CounterTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCounterTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCounterTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCounterTypeDataAsync,
                    () => Workflows.CounterTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCounterTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCounterTypeCache request)
        {
            await ClearCachedCounterTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCounterTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCounterTypes>(string.Empty),
                    UrnId.Create<GetCounterTypeByID>(string.Empty),
                    UrnId.Create<GetCounterTypeByKey>(string.Empty),
                    UrnId.Create<GetCounterTypeByName>(string.Empty),
                    UrnId.Create<CheckCounterTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckCounterTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckCounterTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckCounterTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CounterTypeService : CounterTypeServiceBase { }
}
