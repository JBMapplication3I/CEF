<#@ assembly name="System.Core"
#><#@ assembly name="System.Web.dll"
#><#@ import namespace="System"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Runtime.InteropServices"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="ServiceStack"
#><#@ import namespace="ServiceStack.CodeGenerator.TypeScript"
#><#+
void GenerateServicesFile(Type theType, string schema)
{
    schema = schema.Replace("System", "Structure");
    string typeName = theType.Name;
    string modelTypeName = HelpFunctions.SwapToModelType(typeName);
    string pluralizedTypeName = HelpFunctions.PluralizeName(typeName);
    string pluralizedTypeNameSplitCamelCaseLower = HelpFunctions.SplitCamelCase(pluralizedTypeName).ToLower();
    string typeNameSplitCamelCaseLower = HelpFunctions.SplitCamelCase(typeName).ToLower();
    TypeDeterminer td = new TypeDeterminer(theType);
    bool includeDepTags = td.IsDeprecated;
    string depTagValue = includeDepTags ? td.DeprecatedMessage : string.Empty;
    string extraTypeText = modelTypeName == "SalesItemBase" ? "<IApplied" + typeName + "DiscountModel>" : "";
    string extraTypeText2 = modelTypeName == "SalesItemBase" ? "<IApplied" + typeName + "DiscountModel, Applied" + typeName + "DiscountModel>" : "";
#>// <autogenerated>
// <copyright file="<#= typeName #>Service.cs" company="clarity-ventures.com">
// Copyright (c) 2016-<#= DateTime.Today.Year #> clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the <#= typeNameSplitCamelCaseLower #> service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of <#= pluralizedTypeNameSplitCamelCaseLower #>.</summary>
    /// <seealso cref="<#= modelTypeName #>SearchModel"/>
    /// <seealso cref="IReturn{<#= typeName #>PagedResults}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        UsedInAdmin,
        Route("/<#= schema #>/<#= pluralizedTypeName #>", "GET", Priority = 1,
            Summary = "Use to get a list of <#= pluralizedTypeNameSplitCamelCaseLower #>")]
    public partial class Get<#= pluralizedTypeName #> : <#= modelTypeName #>SearchModel, IReturn<<#= typeName #>PagedResults> { }

    /// <summary>A ServiceStack Route to get <#= pluralizedTypeNameSplitCamelCaseLower #> for connect.</summary>
    /// <seealso cref="<#= modelTypeName #>SearchModel"/>
    /// <seealso cref="IReturn{List{<#= modelTypeName #>Model}}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.View"),
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= pluralizedTypeName #>ForConnect", "POST,GET", Priority = 1,
            Summary = "Get all <#= pluralizedTypeNameSplitCamelCaseLower #>")]
    public partial class Get<#= HelpFunctions.PluralizeName(typeName) #>ForConnect : <#= modelTypeName #>SearchModel, IReturn<List<<#= modelTypeName #>Model<#= extraTypeText2 #>>> { }

    /// <summary>A ServiceStack Route to get a digest of all <#= pluralizedTypeNameSplitCamelCaseLower #>.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.View"),
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= pluralizedTypeName #>Digest", "GET",
            Summary = "Use to get a hash representing each <#= pluralizedTypeNameSplitCamelCaseLower #>")]
    public partial class Get<#= pluralizedTypeName #>Digest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get <#= typeNameSplitCamelCaseLower #>.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{<#= modelTypeName #>Model}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        UsedInAdmin,
        Route("/<#= schema #>/<#= typeName #>/ID<#= typeName == "Category" ? "" : "/{ID}" #>", "GET", Priority = 1,
            Summary = "Use to get a specific <#= typeNameSplitCamelCaseLower #>")]
    public partial class Get<#= typeName #>ByID : ImplementsID<#= typeName == "Category" ? "OnQuery" : "" #>Base, IReturn<<#= modelTypeName #>Model<#= extraTypeText2 #>> { }

    /// <summary>A ServiceStack Route to get <#= typeNameSplitCamelCaseLower #>.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{<#= modelTypeName #>Model}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= typeName #>/Key<#= typeName == "Category" ? "" : "/{Key*}" #>", "GET", Priority = 1,
            Summary = "Use to get a specific <#= typeNameSplitCamelCaseLower #> by the custom key")]
    public partial class Get<#= typeName #>ByKey : ImplementsKey<#= typeName == "Category" ? "OnQuery" : "" #>Base, IReturn<<#= modelTypeName #>Model<#= extraTypeText2 #>> { }

<#+ if (td.IsINameableBase) { #>
    /// <summary>A ServiceStack Route to get <#= typeNameSplitCamelCaseLower #>.</summary>
    /// <seealso cref="IReturn{<#= modelTypeName #>Model}"/>
<#+     if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+     } #>
    [PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= typeName #>/Name", "GET", Priority = 1,
            Summary = "Use to get a specific <#= typeNameSplitCamelCaseLower #> by the name")]
    public partial class Get<#= typeName #>ByName : ImplementsNameBase, IReturn<<#= modelTypeName #>Model<#= extraTypeText2 #>> { }

<#+ } #>
<#+ if (td.IsITypableBase || td.IsIStatusableBase || td.IsIStateableBase) { #>
    /// <summary>A ServiceStack Route to get <#= typeNameSplitCamelCaseLower #>.</summary>
    /// <seealso cref="IReturn{<#= modelTypeName #>Model}"/>
<#+     if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+     } #>
    [PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= typeName #>/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific <#= typeNameSplitCamelCaseLower #> by the name")]
    public partial class Get<#= typeName #>ByDisplayName : ImplementsDisplayNameBase, IReturn<<#= modelTypeName #>Model<#= extraTypeText2 #>> { }

<#+ } #>
<#+ if (td.IsIHaveSeoBase) { #>
    /// <summary>A ServiceStack Route to get <#= typeNameSplitCamelCaseLower #>.</summary>
    /// <seealso cref="IReturn{<#= modelTypeName #>Model}"/>
<#+     if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+     } #>
    [PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= typeName #>/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific <#= typeNameSplitCamelCaseLower #> by the SEO URL")]
    public partial class Get<#= typeName #>BySeoUrl : ImplementsSeoUrlBase, IReturn<<#= modelTypeName #>Model<#= extraTypeText2 #>> { }

<#+ } #>
    /// <summary>A ServiceStack Route to check <#= typeNameSplitCamelCaseLower #> exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
<#+     if (typeName == "Product" || typeName == "Category") { #>
    [PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
<#+     } else { #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.View"),
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
<#+     } #>
        Route("/<#= schema #>/<#= typeName #>/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class Check<#= typeName #>ExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check <#= typeNameSplitCamelCaseLower #> exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
<#+     if (typeName == "Product" || typeName == "Category") { #>
    [PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
<#+     } else { #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.View"),
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
<#+     } #>
        Route("/<#= schema #>/<#= typeName #>/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class Check<#= typeName #>ExistsByKey : ImplementsKeyBase, IReturn<int?> { }

<#+ if (td.IsINameableBase) { #>
    /// <summary>A ServiceStack Route to check <#= typeNameSplitCamelCaseLower #> exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
<#+     if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+     } #>
<#+     if (typeName == "Product" || typeName == "Category") { #>
    [PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
<#+     } else { #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.View"),
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
<#+     } #>
        Route("/<#= schema #>/<#= typeName #>/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class Check<#= typeName #>ExistsByName : ImplementsNameBase, IReturn<int?> { }

<#+ } #>
<#+ if (td.IsITypableBase || td.IsIStatusableBase || td.IsIStateableBase) { #>
    /// <summary>A ServiceStack Route to check <#= typeNameSplitCamelCaseLower #> exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
<#+     if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+     } #>
<#+     if (typeName == "Product" || typeName == "Category") { #>
    [PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
<#+     } else { #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.View"),
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
<#+     } #>
        Route("/<#= schema #>/<#= typeName #>/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class Check<#= typeName #>ExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

<#+ } #>
<#+ if (td.IsIHaveSeoBase) { #>
    /// <summary>A ServiceStack Route to check <#= typeNameSplitCamelCaseLower #> exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
<#+     if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+     } #>
<#+     if (typeName == "Product" || typeName == "Category") { #>
    [PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
<#+     } else { #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.View"),
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
<#+     } #>
        Route("/<#= schema #>/<#= typeName #>/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class Check<#= typeName #>ExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

<#+ } #>
    /// <summary>A ServiceStack Route to create <#= typeNameSplitCamelCaseLower #>.</summary>
    /// <seealso cref="<#= modelTypeName #>Model"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.Create"),
        UsedInAdmin,
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= typeName #>/Create", "POST", Priority = 1,
            Summary = "Use to create a new <#= typeNameSplitCamelCaseLower #>.")]
    public partial class Create<#= typeName #> : <#= modelTypeName #>Model<#= extraTypeText2 #>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert <#= typeNameSplitCamelCaseLower #>.</summary>
    /// <seealso cref="<#= modelTypeName #>Model"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [Authenticate,
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= typeName #>/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing <#= typeNameSplitCamelCaseLower #> (as needed).")]
    public partial class Upsert<#= typeName #> : <#= modelTypeName #>Model<#= extraTypeText2 #>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update <#= typeNameSplitCamelCaseLower #>.</summary>
    /// <seealso cref="<#= modelTypeName #>Model"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.Update"),
        UsedInAdmin,
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= typeName #>/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing <#= typeNameSplitCamelCaseLower #>.")]
    public partial class Update<#= typeName #> : <#= modelTypeName #>Model<#= extraTypeText2 #>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate <#= typeNameSplitCamelCaseLower #>.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.Deactivate"),
        UsedInAdmin,
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= typeName #>/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific <#= typeNameSplitCamelCaseLower #> from the system [Soft-Delete]")]
    public partial class Deactivate<#= typeName #>ByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate <#= typeNameSplitCamelCaseLower #> by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.Deactivate"),
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= typeName #>/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific <#= typeNameSplitCamelCaseLower #> from the system [Soft-Delete]")]
    public partial class Deactivate<#= typeName #>ByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate <#= typeNameSplitCamelCaseLower #>.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.Reactivate"),
        UsedInAdmin,
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= typeName #>/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific <#= typeNameSplitCamelCaseLower #> from the system [Restore from Soft-Delete]")]
    public partial class Reactivate<#= typeName #>ByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate <#= typeNameSplitCamelCaseLower #> by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.Reactivate"),
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= typeName #>/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific <#= typeNameSplitCamelCaseLower #> from the system [Restore from Soft-Delete]")]
    public partial class Reactivate<#= typeName #>ByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete <#= typeNameSplitCamelCaseLower #>.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.Delete"),
        UsedInAdmin,
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= typeName #>/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific <#= typeNameSplitCamelCaseLower #> from the system [Hard-Delete]")]
    public partial class Delete<#= typeName #>ByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete <#= typeNameSplitCamelCaseLower #> by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [Authenticate, RequiredPermission("<#= schema #>.<#= typeName #>.Delete"),
        PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        Route("/<#= schema #>/<#= typeName #>/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific <#= typeNameSplitCamelCaseLower #> from the system [Hard-Delete]")]
    public partial class Delete<#= typeName #>ByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear <#= typeNameSplitCamelCaseLower #> cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>,
        UsedInAdmin,
        Route("/<#= schema #>/<#= typeName #>/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all <#= typeNameSplitCamelCaseLower #> calls.")]
    public class Clear<#= typeName #>Cache : IReturn<bool> { }

<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
<#+ } #>
    [PublicAPI<#= includeDepTags ? ", Obsolete(\"" + depTagValue + "\", false)" : string.Empty #>]
    public abstract partial class <#= typeName #>ServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="Get<#= pluralizedTypeName #>"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Get(Get<#= pluralizedTypeName #> request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<I<#= modelTypeName #>Model<#= extraTypeText #>, <#= modelTypeName #>Model<#= extraTypeText2 #>, I<#= modelTypeName #>SearchModel, <#= typeName #>PagedResults>(
                    request,
                    request.AsListing,
                    Workflows.<#= pluralizedTypeName #>)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="Get<#= pluralizedTypeName #>ForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Any(Get<#= pluralizedTypeName #>ForConnect request)
        {
            return await Workflows.<#= pluralizedTypeName #>.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="Get<#= pluralizedTypeName #>Digest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Get(Get<#= pluralizedTypeName #>Digest request)
        {
            return await Workflows.<#= pluralizedTypeName #>.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="Get<#= typeName #>ByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Get(Get<#= typeName #>ByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.<#= pluralizedTypeName #>, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="Get<#= typeName #>ByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Get(Get<#= typeName #>ByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.<#= pluralizedTypeName #>, noCache: request.noCache).ConfigureAwait(false);
        }
<#+ if (td.IsINameableBase) { #>

        /// <summary>GET handler for the <see cref="Get<#= typeName #>ByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+     if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+     } #>
        public virtual async Task<object?> Get(Get<#= typeName #>ByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.<#= pluralizedTypeName #>, noCache: request.noCache).ConfigureAwait(false);
        }
<#+ } #>
<#+ if (td.IsIDisplayableBase) { #>

        /// <summary>GET handler for the <see cref="Get<#= typeName #>ByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+     if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+     } #>
        public virtual async Task<object?> Get(Get<#= typeName #>ByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.<#= pluralizedTypeName #>, noCache: request.noCache).ConfigureAwait(false);
        }
<#+ } #>
<#+ if (td.IsIHaveSeoBase) { #>

        /// <summary>GET handler for the <see cref="Get<#= typeName #>BySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+     if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+     } #>
        public virtual async Task<object?> Get(Get<#= typeName #>BySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.<#= pluralizedTypeName #>, noCache: request.noCache).ConfigureAwait(false);
        }
<#+ } #>
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="Check<#= typeName #>ExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Get(Check<#= typeName #>ExistsByID request)
        {
            return await Workflows.<#= pluralizedTypeName #>.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="Check<#= typeName #>ExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Get(Check<#= typeName #>ExistsByKey request)
        {
            return await Workflows.<#= pluralizedTypeName #>.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
<#+ if (td.IsINameableBase) { #>

        /// <summary>GET handler for the <see cref="Check<#= typeName #>ExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+     if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+     } #>
        public virtual async Task<object?> Get(Check<#= typeName #>ExistsByName request)
        {
            return await Workflows.<#= pluralizedTypeName #>.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
<#+ } #>
<#+ if (td.IsITypableBase || td.IsIStatusableBase || td.IsIStateableBase) { #>

        /// <summary>GET handler for the <see cref="Check<#= typeName #>ExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+     if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+     } #>
        public virtual async Task<object?> Get(Check<#= typeName #>ExistsByDisplayName request)
        {
            return await Workflows.<#= pluralizedTypeName #>.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
<#+ } #>
<#+ if (td.IsIHaveSeoBase) { #>

        /// <summary>GET handler for the <see cref="Check<#= typeName #>ExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+     if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+     } #>
        public virtual async Task<object?> Get(Check<#= typeName #>ExistsBySeoUrl request)
        {
            return await Workflows.<#= pluralizedTypeName #>.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
<#+ } #>
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="Upsert<#= typeName #>"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Post(Upsert<#= typeName #> request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCached<#= typeName #>DataAsync,
                    () => Workflows.<#= pluralizedTypeName #>.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="Create<#= typeName #>"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Post(Create<#= typeName #> request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCached<#= typeName #>DataAsync,
                    () => Workflows.<#= pluralizedTypeName #>.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="Update<#= typeName #>"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Put(Update<#= typeName #> request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCached<#= typeName #>DataAsync,
                    () => Workflows.<#= pluralizedTypeName #>.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="Deactivate<#= typeName #>ByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Patch(Deactivate<#= typeName #>ByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCached<#= typeName #>DataAsync,
                    () => Workflows.<#= pluralizedTypeName #>.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="Deactivate<#= typeName #>ByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Patch(Deactivate<#= typeName #>ByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCached<#= typeName #>DataAsync,
                    () => Workflows.<#= pluralizedTypeName #>.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="Reactivate<#= typeName #>ByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Patch(Reactivate<#= typeName #>ByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCached<#= typeName #>DataAsync,
                    () => Workflows.<#= pluralizedTypeName #>.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="Reactivate<#= typeName #>ByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Patch(Reactivate<#= typeName #>ByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCached<#= typeName #>DataAsync,
                    () => Workflows.<#= pluralizedTypeName #>.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="Delete<#= typeName #>ByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Delete(Delete<#= typeName #>ByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCached<#= typeName #>DataAsync,
                    () => Workflows.<#= pluralizedTypeName #>.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="Delete<#= typeName #>ByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Delete(Delete<#= typeName #>ByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCached<#= typeName #>DataAsync,
                    () => Workflows.<#= pluralizedTypeName #>.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="Clear<#= typeName #>Cache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
<#+ if (includeDepTags) { #>
        /// <obsolete><#= depTagValue #></obsolete>
        [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
        public virtual async Task<object?> Delete(Clear<#= typeName #>Cache request)
        {
            await ClearCached<#= typeName #>DataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCached<#= typeName #>DataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<Get<#= pluralizedTypeName #>>(string.Empty),
                    UrnId.Create<Get<#= typeName #>ByID>(string.Empty),
                    UrnId.Create<Get<#= typeName #>ByKey>(string.Empty),
<#+ if (td.IsINameableBase) { #>
                    UrnId.Create<Get<#= typeName #>ByName>(string.Empty),
<#+ } #>
<#+ if (td.IsIHaveSeoBase) { #>
                    UrnId.Create<Get<#= typeName #>BySeoUrl>(string.Empty),
<#+ } #>
                    UrnId.Create<Check<#= typeName #>ExistsByID>(string.Empty),
                    UrnId.Create<Check<#= typeName #>ExistsByKey>(string.Empty),
<#+ if (td.IsINameableBase) { #>
                    UrnId.Create<Check<#= typeName #>ExistsByName>(string.Empty),
<#+ } #>
<#+ if (td.IsITypableBase || td.IsIStatusableBase || td.IsIStateableBase) { #>
                    UrnId.Create<Check<#= typeName #>ExistsByDisplayName>(string.Empty),
<#+ } #>
<#+ if (td.IsIHaveSeoBase) { #>
                    UrnId.Create<Check<#= typeName #>ExistsBySeoUrl>(string.Empty),
<#+ } #>
                };
            }
        }
        #endregion
    }

<#+ if (includeDepTags) { #>
    /// <obsolete><#= depTagValue #></obsolete>
    [Obsolete("<#= depTagValue #>", false)]
<#+ } #>
    public partial class <#= typeName #>Service : <#= typeName #>ServiceBase { }
}
<#+
} // End T4 Function GenerateServicesFile #>