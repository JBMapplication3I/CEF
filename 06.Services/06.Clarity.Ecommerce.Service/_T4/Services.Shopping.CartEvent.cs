// <autogenerated>
// <copyright file="CartEventService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the cart event service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of cart events.</summary>
    /// <seealso cref="CartEventSearchModel"/>
    /// <seealso cref="IReturn{CartEventPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartEvents", "GET", Priority = 1,
            Summary = "Use to get a list of cart events")]
    public partial class GetCartEvents : CartEventSearchModel, IReturn<CartEventPagedResults> { }

    /// <summary>A ServiceStack Route to get cart events for connect.</summary>
    /// <seealso cref="CartEventSearchModel"/>
    /// <seealso cref="IReturn{List{CartEventModel}}"/>
    [Authenticate, RequiredPermission("Shopping.CartEvent.View"),
        PublicAPI,
        Route("/Shopping/CartEventsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all cart events")]
    public partial class GetCartEventsForConnect : CartEventSearchModel, IReturn<List<CartEventModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all cart events.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shopping.CartEvent.View"),
        PublicAPI,
        Route("/Shopping/CartEventsDigest", "GET",
            Summary = "Use to get a hash representing each cart events")]
    public partial class GetCartEventsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get cart event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CartEventModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartEvent/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific cart event")]
    public partial class GetCartEventByID : ImplementsIDBase, IReturn<CartEventModel> { }

    /// <summary>A ServiceStack Route to get cart event.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CartEventModel}"/>
    [PublicAPI,
        Route("/Shopping/CartEvent/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific cart event by the custom key")]
    public partial class GetCartEventByKey : ImplementsKeyBase, IReturn<CartEventModel> { }

    /// <summary>A ServiceStack Route to get cart event.</summary>
    /// <seealso cref="IReturn{CartEventModel}"/>
    [PublicAPI,
        Route("/Shopping/CartEvent/Name", "GET", Priority = 1,
            Summary = "Use to get a specific cart event by the name")]
    public partial class GetCartEventByName : ImplementsNameBase, IReturn<CartEventModel> { }

    /// <summary>A ServiceStack Route to check cart event exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartEvent.View"),
        PublicAPI,
        Route("/Shopping/CartEvent/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCartEventExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart event exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartEvent.View"),
        PublicAPI,
        Route("/Shopping/CartEvent/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCartEventExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart event exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartEvent.View"),
        PublicAPI,
        Route("/Shopping/CartEvent/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCartEventExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create cart event.</summary>
    /// <seealso cref="CartEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.CartEvent.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartEvent/Create", "POST", Priority = 1,
            Summary = "Use to create a new cart event.")]
    public partial class CreateCartEvent : CartEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert cart event.</summary>
    /// <seealso cref="CartEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shopping/CartEvent/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing cart event (as needed).")]
    public partial class UpsertCartEvent : CartEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update cart event.</summary>
    /// <seealso cref="CartEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.CartEvent.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartEvent/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing cart event.")]
    public partial class UpdateCartEvent : CartEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate cart event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartEvent.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartEvent/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart event from the system [Soft-Delete]")]
    public partial class DeactivateCartEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate cart event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartEvent.Deactivate"),
        PublicAPI,
        Route("/Shopping/CartEvent/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart event from the system [Soft-Delete]")]
    public partial class DeactivateCartEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartEvent.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartEvent/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart event from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartEvent.Reactivate"),
        PublicAPI,
        Route("/Shopping/CartEvent/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart event from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartEvent.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartEvent/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific cart event from the system [Hard-Delete]")]
    public partial class DeleteCartEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartEvent.Delete"),
        PublicAPI,
        Route("/Shopping/CartEvent/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific cart event from the system [Hard-Delete]")]
    public partial class DeleteCartEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear cart event cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartEvent/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all cart event calls.")]
    public class ClearCartEventCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CartEventServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCartEvents"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartEvents request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICartEventModel, CartEventModel, ICartEventSearchModel, CartEventPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CartEvents)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartEventsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCartEventsForConnect request)
        {
            return await Workflows.CartEvents.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartEventsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartEventsDigest request)
        {
            return await Workflows.CartEvents.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCartEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartEventByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CartEvents, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartEventByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CartEvents, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartEventByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartEventByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CartEvents, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCartEventExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartEventExistsByID request)
        {
            return await Workflows.CartEvents.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartEventExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartEventExistsByKey request)
        {
            return await Workflows.CartEvents.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartEventExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartEventExistsByName request)
        {
            return await Workflows.CartEvents.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCartEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCartEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartEventDataAsync,
                    () => Workflows.CartEvents.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCartEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCartEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartEventDataAsync,
                    () => Workflows.CartEvents.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCartEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCartEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartEventDataAsync,
                    () => Workflows.CartEvents.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCartEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartEventDataAsync,
                    () => Workflows.CartEvents.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCartEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartEventDataAsync,
                    () => Workflows.CartEvents.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCartEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartEventDataAsync,
                    () => Workflows.CartEvents.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCartEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartEventDataAsync,
                    () => Workflows.CartEvents.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCartEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartEventDataAsync,
                    () => Workflows.CartEvents.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCartEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartEventDataAsync,
                    () => Workflows.CartEvents.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCartEventCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCartEventCache request)
        {
            await ClearCachedCartEventDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCartEventDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCartEvents>(string.Empty),
                    UrnId.Create<GetCartEventByID>(string.Empty),
                    UrnId.Create<GetCartEventByKey>(string.Empty),
                    UrnId.Create<GetCartEventByName>(string.Empty),
                    UrnId.Create<CheckCartEventExistsByID>(string.Empty),
                    UrnId.Create<CheckCartEventExistsByKey>(string.Empty),
                    UrnId.Create<CheckCartEventExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CartEventService : CartEventServiceBase { }
}
