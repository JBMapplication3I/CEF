// <autogenerated>
// <copyright file="AppliedSalesOrderItemDiscountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the applied sales order item discount service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of applied sales order item discounts.</summary>
    /// <seealso cref="AppliedSalesOrderItemDiscountSearchModel"/>
    /// <seealso cref="IReturn{AppliedSalesOrderItemDiscountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesOrderItemDiscounts", "GET", Priority = 1,
            Summary = "Use to get a list of applied sales order item discounts")]
    public partial class GetAppliedSalesOrderItemDiscounts : AppliedSalesOrderItemDiscountSearchModel, IReturn<AppliedSalesOrderItemDiscountPagedResults> { }

    /// <summary>A ServiceStack Route to get applied sales order item discounts for connect.</summary>
    /// <seealso cref="AppliedSalesOrderItemDiscountSearchModel"/>
    /// <seealso cref="IReturn{List{AppliedSalesOrderItemDiscountModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesOrderItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesOrderItemDiscountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all applied sales order item discounts")]
    public partial class GetAppliedSalesOrderItemDiscountsForConnect : AppliedSalesOrderItemDiscountSearchModel, IReturn<List<AppliedSalesOrderItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all applied sales order item discounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesOrderItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesOrderItemDiscountsDigest", "GET",
            Summary = "Use to get a hash representing each applied sales order item discounts")]
    public partial class GetAppliedSalesOrderItemDiscountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get applied sales order item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AppliedSalesOrderItemDiscountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesOrderItemDiscount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sales order item discount")]
    public partial class GetAppliedSalesOrderItemDiscountByID : ImplementsIDBase, IReturn<AppliedSalesOrderItemDiscountModel> { }

    /// <summary>A ServiceStack Route to get applied sales order item discount.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AppliedSalesOrderItemDiscountModel}"/>
    [PublicAPI,
        Route("/Discounts/AppliedSalesOrderItemDiscount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sales order item discount by the custom key")]
    public partial class GetAppliedSalesOrderItemDiscountByKey : ImplementsKeyBase, IReturn<AppliedSalesOrderItemDiscountModel> { }

    /// <summary>A ServiceStack Route to check applied sales order item discount exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesOrderItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesOrderItemDiscount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSalesOrderItemDiscountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check applied sales order item discount exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesOrderItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesOrderItemDiscount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSalesOrderItemDiscountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create applied sales order item discount.</summary>
    /// <seealso cref="AppliedSalesOrderItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesOrderItemDiscount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesOrderItemDiscount/Create", "POST", Priority = 1,
            Summary = "Use to create a new applied sales order item discount.")]
    public partial class CreateAppliedSalesOrderItemDiscount : AppliedSalesOrderItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert applied sales order item discount.</summary>
    /// <seealso cref="AppliedSalesOrderItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/AppliedSalesOrderItemDiscount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing applied sales order item discount (as needed).")]
    public partial class UpsertAppliedSalesOrderItemDiscount : AppliedSalesOrderItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update applied sales order item discount.</summary>
    /// <seealso cref="AppliedSalesOrderItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesOrderItemDiscount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesOrderItemDiscount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing applied sales order item discount.")]
    public partial class UpdateAppliedSalesOrderItemDiscount : AppliedSalesOrderItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate applied sales order item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesOrderItemDiscount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesOrderItemDiscount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sales order item discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSalesOrderItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate applied sales order item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesOrderItemDiscount.Deactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSalesOrderItemDiscount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sales order item discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSalesOrderItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sales order item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesOrderItemDiscount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesOrderItemDiscount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sales order item discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSalesOrderItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sales order item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesOrderItemDiscount.Reactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSalesOrderItemDiscount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sales order item discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSalesOrderItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sales order item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesOrderItemDiscount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesOrderItemDiscount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific applied sales order item discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSalesOrderItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sales order item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesOrderItemDiscount.Delete"),
        PublicAPI,
        Route("/Discounts/AppliedSalesOrderItemDiscount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific applied sales order item discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSalesOrderItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear applied sales order item discount cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesOrderItemDiscount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all applied sales order item discount calls.")]
    public class ClearAppliedSalesOrderItemDiscountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AppliedSalesOrderItemDiscountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAppliedSalesOrderItemDiscounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesOrderItemDiscounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAppliedSalesOrderItemDiscountModel, AppliedSalesOrderItemDiscountModel, IAppliedSalesOrderItemDiscountSearchModel, AppliedSalesOrderItemDiscountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AppliedSalesOrderItemDiscounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesOrderItemDiscountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAppliedSalesOrderItemDiscountsForConnect request)
        {
            return await Workflows.AppliedSalesOrderItemDiscounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesOrderItemDiscountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesOrderItemDiscountsDigest request)
        {
            return await Workflows.AppliedSalesOrderItemDiscounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAppliedSalesOrderItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesOrderItemDiscountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AppliedSalesOrderItemDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesOrderItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesOrderItemDiscountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AppliedSalesOrderItemDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAppliedSalesOrderItemDiscountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSalesOrderItemDiscountExistsByID request)
        {
            return await Workflows.AppliedSalesOrderItemDiscounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppliedSalesOrderItemDiscountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSalesOrderItemDiscountExistsByKey request)
        {
            return await Workflows.AppliedSalesOrderItemDiscounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAppliedSalesOrderItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAppliedSalesOrderItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesOrderItemDiscountDataAsync,
                    () => Workflows.AppliedSalesOrderItemDiscounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAppliedSalesOrderItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAppliedSalesOrderItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesOrderItemDiscountDataAsync,
                    () => Workflows.AppliedSalesOrderItemDiscounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAppliedSalesOrderItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAppliedSalesOrderItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesOrderItemDiscountDataAsync,
                    () => Workflows.AppliedSalesOrderItemDiscounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSalesOrderItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSalesOrderItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesOrderItemDiscountDataAsync,
                    () => Workflows.AppliedSalesOrderItemDiscounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSalesOrderItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSalesOrderItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesOrderItemDiscountDataAsync,
                    () => Workflows.AppliedSalesOrderItemDiscounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSalesOrderItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSalesOrderItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesOrderItemDiscountDataAsync,
                    () => Workflows.AppliedSalesOrderItemDiscounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSalesOrderItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSalesOrderItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesOrderItemDiscountDataAsync,
                    () => Workflows.AppliedSalesOrderItemDiscounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAppliedSalesOrderItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSalesOrderItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesOrderItemDiscountDataAsync,
                    () => Workflows.AppliedSalesOrderItemDiscounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAppliedSalesOrderItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSalesOrderItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesOrderItemDiscountDataAsync,
                    () => Workflows.AppliedSalesOrderItemDiscounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAppliedSalesOrderItemDiscountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAppliedSalesOrderItemDiscountCache request)
        {
            await ClearCachedAppliedSalesOrderItemDiscountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAppliedSalesOrderItemDiscountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAppliedSalesOrderItemDiscounts>(string.Empty),
                    UrnId.Create<GetAppliedSalesOrderItemDiscountByID>(string.Empty),
                    UrnId.Create<GetAppliedSalesOrderItemDiscountByKey>(string.Empty),
                    UrnId.Create<CheckAppliedSalesOrderItemDiscountExistsByID>(string.Empty),
                    UrnId.Create<CheckAppliedSalesOrderItemDiscountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AppliedSalesOrderItemDiscountService : AppliedSalesOrderItemDiscountServiceBase { }
}
