// <autogenerated>
// <copyright file="ReferralCodeStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the referral code status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of referral code statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{ReferralCodeStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ReferralCodeStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of referral code statuses")]
    public partial class GetReferralCodeStatuses : StatusSearchModel, IReturn<ReferralCodeStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get referral code statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeStatus.View"),
        PublicAPI,
        Route("/Contacts/ReferralCodeStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all referral code statuses")]
    public partial class GetReferralCodeStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all referral code statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeStatus.View"),
        PublicAPI,
        Route("/Contacts/ReferralCodeStatusesDigest", "GET",
            Summary = "Use to get a hash representing each referral code statuses")]
    public partial class GetReferralCodeStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get referral code status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ReferralCodeStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific referral code status")]
    public partial class GetReferralCodeStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get referral code status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific referral code status by the custom key")]
    public partial class GetReferralCodeStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get referral code status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific referral code status by the name")]
    public partial class GetReferralCodeStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get referral code status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Contacts/ReferralCodeStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific referral code status by the name")]
    public partial class GetReferralCodeStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check referral code status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeStatus.View"),
        PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckReferralCodeStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check referral code status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeStatus.View"),
        PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckReferralCodeStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check referral code status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeStatus.View"),
        PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckReferralCodeStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check referral code status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeStatus.View"),
        PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckReferralCodeStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create referral code status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new referral code status.")]
    public partial class CreateReferralCodeStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert referral code status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing referral code status (as needed).")]
    public partial class UpsertReferralCodeStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update referral code status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing referral code status.")]
    public partial class UpdateReferralCodeStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate referral code status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific referral code status from the system [Soft-Delete]")]
    public partial class DeactivateReferralCodeStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate referral code status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeStatus.Deactivate"),
        PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific referral code status from the system [Soft-Delete]")]
    public partial class DeactivateReferralCodeStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate referral code status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific referral code status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateReferralCodeStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate referral code status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeStatus.Reactivate"),
        PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific referral code status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateReferralCodeStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete referral code status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific referral code status from the system [Hard-Delete]")]
    public partial class DeleteReferralCodeStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete referral code status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCodeStatus.Delete"),
        PublicAPI,
        Route("/Contacts/ReferralCodeStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific referral code status from the system [Hard-Delete]")]
    public partial class DeleteReferralCodeStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear referral code status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ReferralCodeStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all referral code status calls.")]
    public class ClearReferralCodeStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ReferralCodeStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetReferralCodeStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, ReferralCodeStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ReferralCodeStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReferralCodeStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetReferralCodeStatusesForConnect request)
        {
            return await Workflows.ReferralCodeStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReferralCodeStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeStatusesDigest request)
        {
            return await Workflows.ReferralCodeStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetReferralCodeStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ReferralCodeStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReferralCodeStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ReferralCodeStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReferralCodeStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ReferralCodeStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReferralCodeStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.ReferralCodeStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckReferralCodeStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReferralCodeStatusExistsByID request)
        {
            return await Workflows.ReferralCodeStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReferralCodeStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReferralCodeStatusExistsByKey request)
        {
            return await Workflows.ReferralCodeStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReferralCodeStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReferralCodeStatusExistsByName request)
        {
            return await Workflows.ReferralCodeStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReferralCodeStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReferralCodeStatusExistsByDisplayName request)
        {
            return await Workflows.ReferralCodeStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertReferralCodeStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertReferralCodeStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeStatusDataAsync,
                    () => Workflows.ReferralCodeStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateReferralCodeStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateReferralCodeStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeStatusDataAsync,
                    () => Workflows.ReferralCodeStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateReferralCodeStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateReferralCodeStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeStatusDataAsync,
                    () => Workflows.ReferralCodeStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateReferralCodeStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateReferralCodeStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeStatusDataAsync,
                    () => Workflows.ReferralCodeStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateReferralCodeStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateReferralCodeStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeStatusDataAsync,
                    () => Workflows.ReferralCodeStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateReferralCodeStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateReferralCodeStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeStatusDataAsync,
                    () => Workflows.ReferralCodeStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateReferralCodeStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateReferralCodeStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeStatusDataAsync,
                    () => Workflows.ReferralCodeStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteReferralCodeStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteReferralCodeStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeStatusDataAsync,
                    () => Workflows.ReferralCodeStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteReferralCodeStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteReferralCodeStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeStatusDataAsync,
                    () => Workflows.ReferralCodeStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearReferralCodeStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearReferralCodeStatusCache request)
        {
            await ClearCachedReferralCodeStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedReferralCodeStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetReferralCodeStatuses>(string.Empty),
                    UrnId.Create<GetReferralCodeStatusByID>(string.Empty),
                    UrnId.Create<GetReferralCodeStatusByKey>(string.Empty),
                    UrnId.Create<GetReferralCodeStatusByName>(string.Empty),
                    UrnId.Create<CheckReferralCodeStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckReferralCodeStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckReferralCodeStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckReferralCodeStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ReferralCodeStatusService : ReferralCodeStatusServiceBase { }
}
