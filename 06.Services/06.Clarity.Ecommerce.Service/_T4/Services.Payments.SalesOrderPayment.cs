// <autogenerated>
// <copyright file="SalesOrderPaymentService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales order payment service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales order payments.</summary>
    /// <seealso cref="SalesOrderPaymentSearchModel"/>
    /// <seealso cref="IReturn{SalesOrderPaymentPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SalesOrderPayments", "GET", Priority = 1,
            Summary = "Use to get a list of sales order payments")]
    public partial class GetSalesOrderPayments : SalesOrderPaymentSearchModel, IReturn<SalesOrderPaymentPagedResults> { }

    /// <summary>A ServiceStack Route to get sales order payments for connect.</summary>
    /// <seealso cref="SalesOrderPaymentSearchModel"/>
    /// <seealso cref="IReturn{List{SalesOrderPaymentModel}}"/>
    [Authenticate, RequiredPermission("Payments.SalesOrderPayment.View"),
        PublicAPI,
        Route("/Payments/SalesOrderPaymentsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales order payments")]
    public partial class GetSalesOrderPaymentsForConnect : SalesOrderPaymentSearchModel, IReturn<List<SalesOrderPaymentModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales order payments.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.SalesOrderPayment.View"),
        PublicAPI,
        Route("/Payments/SalesOrderPaymentsDigest", "GET",
            Summary = "Use to get a hash representing each sales order payments")]
    public partial class GetSalesOrderPaymentsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales order payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesOrderPaymentModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SalesOrderPayment/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order payment")]
    public partial class GetSalesOrderPaymentByID : ImplementsIDBase, IReturn<SalesOrderPaymentModel> { }

    /// <summary>A ServiceStack Route to get sales order payment.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesOrderPaymentModel}"/>
    [PublicAPI,
        Route("/Payments/SalesOrderPayment/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order payment by the custom key")]
    public partial class GetSalesOrderPaymentByKey : ImplementsKeyBase, IReturn<SalesOrderPaymentModel> { }

    /// <summary>A ServiceStack Route to check sales order payment exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.SalesOrderPayment.View"),
        PublicAPI,
        Route("/Payments/SalesOrderPayment/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderPaymentExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales order payment exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.SalesOrderPayment.View"),
        PublicAPI,
        Route("/Payments/SalesOrderPayment/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderPaymentExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales order payment.</summary>
    /// <seealso cref="SalesOrderPaymentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.SalesOrderPayment.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesOrderPayment/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales order payment.")]
    public partial class CreateSalesOrderPayment : SalesOrderPaymentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales order payment.</summary>
    /// <seealso cref="SalesOrderPaymentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/SalesOrderPayment/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales order payment (as needed).")]
    public partial class UpsertSalesOrderPayment : SalesOrderPaymentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales order payment.</summary>
    /// <seealso cref="SalesOrderPaymentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.SalesOrderPayment.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesOrderPayment/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales order payment.")]
    public partial class UpdateSalesOrderPayment : SalesOrderPaymentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales order payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesOrderPayment.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesOrderPayment/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order payment from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderPaymentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales order payment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesOrderPayment.Deactivate"),
        PublicAPI,
        Route("/Payments/SalesOrderPayment/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order payment from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderPaymentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesOrderPayment.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesOrderPayment/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order payment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderPaymentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order payment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesOrderPayment.Reactivate"),
        PublicAPI,
        Route("/Payments/SalesOrderPayment/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order payment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderPaymentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesOrderPayment.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesOrderPayment/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales order payment from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderPaymentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order payment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesOrderPayment.Delete"),
        PublicAPI,
        Route("/Payments/SalesOrderPayment/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales order payment from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderPaymentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales order payment cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SalesOrderPayment/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales order payment calls.")]
    public class ClearSalesOrderPaymentCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesOrderPaymentServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesOrderPayments"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderPayments request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesOrderPaymentModel, SalesOrderPaymentModel, ISalesOrderPaymentSearchModel, SalesOrderPaymentPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesOrderPayments)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderPaymentsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesOrderPaymentsForConnect request)
        {
            return await Workflows.SalesOrderPayments.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderPaymentsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderPaymentsDigest request)
        {
            return await Workflows.SalesOrderPayments.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesOrderPaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderPaymentByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesOrderPayments, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderPaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderPaymentByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesOrderPayments, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesOrderPaymentExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderPaymentExistsByID request)
        {
            return await Workflows.SalesOrderPayments.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesOrderPaymentExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderPaymentExistsByKey request)
        {
            return await Workflows.SalesOrderPayments.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesOrderPayment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesOrderPayment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPaymentDataAsync,
                    () => Workflows.SalesOrderPayments.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesOrderPayment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesOrderPayment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPaymentDataAsync,
                    () => Workflows.SalesOrderPayments.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesOrderPayment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesOrderPayment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPaymentDataAsync,
                    () => Workflows.SalesOrderPayments.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderPaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderPaymentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPaymentDataAsync,
                    () => Workflows.SalesOrderPayments.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderPaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderPaymentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPaymentDataAsync,
                    () => Workflows.SalesOrderPayments.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderPaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderPaymentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPaymentDataAsync,
                    () => Workflows.SalesOrderPayments.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderPaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderPaymentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPaymentDataAsync,
                    () => Workflows.SalesOrderPayments.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderPaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderPaymentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPaymentDataAsync,
                    () => Workflows.SalesOrderPayments.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderPaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderPaymentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderPaymentDataAsync,
                    () => Workflows.SalesOrderPayments.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesOrderPaymentCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesOrderPaymentCache request)
        {
            await ClearCachedSalesOrderPaymentDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesOrderPaymentDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesOrderPayments>(string.Empty),
                    UrnId.Create<GetSalesOrderPaymentByID>(string.Empty),
                    UrnId.Create<GetSalesOrderPaymentByKey>(string.Empty),
                    UrnId.Create<CheckSalesOrderPaymentExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesOrderPaymentExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesOrderPaymentService : SalesOrderPaymentServiceBase { }
}
