// <autogenerated>
// <copyright file="CalendarEventImageTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the calendar event image type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of calendar event image types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{CalendarEventImageTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventImageTypes", "GET", Priority = 1,
            Summary = "Use to get a list of calendar event image types")]
    public partial class GetCalendarEventImageTypes : TypeSearchModel, IReturn<CalendarEventImageTypePagedResults> { }

    /// <summary>A ServiceStack Route to get calendar event image types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImageType.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all calendar event image types")]
    public partial class GetCalendarEventImageTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all calendar event image types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImageType.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageTypesDigest", "GET",
            Summary = "Use to get a hash representing each calendar event image types")]
    public partial class GetCalendarEventImageTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get calendar event image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventImageType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event image type")]
    public partial class GetCalendarEventImageTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get calendar event image type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event image type by the custom key")]
    public partial class GetCalendarEventImageTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get calendar event image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event image type by the name")]
    public partial class GetCalendarEventImageTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get calendar event image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event image type by the name")]
    public partial class GetCalendarEventImageTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check calendar event image type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImageType.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventImageTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event image type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImageType.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventImageTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event image type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImageType.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventImageTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event image type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImageType.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventImageTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create calendar event image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImageType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Create", "POST", Priority = 1,
            Summary = "Use to create a new calendar event image type.")]
    public partial class CreateCalendarEventImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert calendar event image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing calendar event image type (as needed).")]
    public partial class UpsertCalendarEventImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update calendar event image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImageType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing calendar event image type.")]
    public partial class UpdateCalendarEventImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate calendar event image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImageType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar event image type from the system [Soft-Delete]")]
    public partial class DeactivateCalendarEventImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate calendar event image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImageType.Deactivate"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar event image type from the system [Soft-Delete]")]
    public partial class DeactivateCalendarEventImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar event image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImageType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar event image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarEventImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar event image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImageType.Reactivate"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar event image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarEventImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar event image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImageType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific calendar event image type from the system [Hard-Delete]")]
    public partial class DeleteCalendarEventImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar event image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImageType.Delete"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImageType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific calendar event image type from the system [Hard-Delete]")]
    public partial class DeleteCalendarEventImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear calendar event image type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventImageType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all calendar event image type calls.")]
    public class ClearCalendarEventImageTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CalendarEventImageTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCalendarEventImageTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventImageTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, CalendarEventImageTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CalendarEventImageTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventImageTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCalendarEventImageTypesForConnect request)
        {
            return await Workflows.CalendarEventImageTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventImageTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventImageTypesDigest request)
        {
            return await Workflows.CalendarEventImageTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCalendarEventImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventImageTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CalendarEventImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventImageTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CalendarEventImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventImageTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventImageTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CalendarEventImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventImageTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventImageTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.CalendarEventImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCalendarEventImageTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventImageTypeExistsByID request)
        {
            return await Workflows.CalendarEventImageTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventImageTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventImageTypeExistsByKey request)
        {
            return await Workflows.CalendarEventImageTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventImageTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventImageTypeExistsByName request)
        {
            return await Workflows.CalendarEventImageTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventImageTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventImageTypeExistsByDisplayName request)
        {
            return await Workflows.CalendarEventImageTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCalendarEventImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCalendarEventImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageTypeDataAsync,
                    () => Workflows.CalendarEventImageTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCalendarEventImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCalendarEventImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageTypeDataAsync,
                    () => Workflows.CalendarEventImageTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCalendarEventImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCalendarEventImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageTypeDataAsync,
                    () => Workflows.CalendarEventImageTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCalendarEventImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarEventImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageTypeDataAsync,
                    () => Workflows.CalendarEventImageTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCalendarEventImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarEventImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageTypeDataAsync,
                    () => Workflows.CalendarEventImageTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCalendarEventImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarEventImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageTypeDataAsync,
                    () => Workflows.CalendarEventImageTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCalendarEventImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarEventImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageTypeDataAsync,
                    () => Workflows.CalendarEventImageTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCalendarEventImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarEventImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageTypeDataAsync,
                    () => Workflows.CalendarEventImageTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCalendarEventImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarEventImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageTypeDataAsync,
                    () => Workflows.CalendarEventImageTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCalendarEventImageTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCalendarEventImageTypeCache request)
        {
            await ClearCachedCalendarEventImageTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCalendarEventImageTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCalendarEventImageTypes>(string.Empty),
                    UrnId.Create<GetCalendarEventImageTypeByID>(string.Empty),
                    UrnId.Create<GetCalendarEventImageTypeByKey>(string.Empty),
                    UrnId.Create<GetCalendarEventImageTypeByName>(string.Empty),
                    UrnId.Create<CheckCalendarEventImageTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckCalendarEventImageTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckCalendarEventImageTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckCalendarEventImageTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CalendarEventImageTypeService : CalendarEventImageTypeServiceBase { }
}
