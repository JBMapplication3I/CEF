// <autogenerated>
// <copyright file="CampaignService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the campaign service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of campaigns.</summary>
    /// <seealso cref="CampaignSearchModel"/>
    /// <seealso cref="IReturn{CampaignPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/Campaigns", "GET", Priority = 1,
            Summary = "Use to get a list of campaigns")]
    public partial class GetCampaigns : CampaignSearchModel, IReturn<CampaignPagedResults> { }

    /// <summary>A ServiceStack Route to get campaigns for connect.</summary>
    /// <seealso cref="CampaignSearchModel"/>
    /// <seealso cref="IReturn{List{CampaignModel}}"/>
    [Authenticate, RequiredPermission("Tracking.Campaign.View"),
        PublicAPI,
        Route("/Tracking/CampaignsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all campaigns")]
    public partial class GetCampaignsForConnect : CampaignSearchModel, IReturn<List<CampaignModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all campaigns.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tracking.Campaign.View"),
        PublicAPI,
        Route("/Tracking/CampaignsDigest", "GET",
            Summary = "Use to get a hash representing each campaigns")]
    public partial class GetCampaignsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get campaign.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CampaignModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/Campaign/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific campaign")]
    public partial class GetCampaignByID : ImplementsIDBase, IReturn<CampaignModel> { }

    /// <summary>A ServiceStack Route to get campaign.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CampaignModel}"/>
    [PublicAPI,
        Route("/Tracking/Campaign/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific campaign by the custom key")]
    public partial class GetCampaignByKey : ImplementsKeyBase, IReturn<CampaignModel> { }

    /// <summary>A ServiceStack Route to get campaign.</summary>
    /// <seealso cref="IReturn{CampaignModel}"/>
    [PublicAPI,
        Route("/Tracking/Campaign/Name", "GET", Priority = 1,
            Summary = "Use to get a specific campaign by the name")]
    public partial class GetCampaignByName : ImplementsNameBase, IReturn<CampaignModel> { }

    /// <summary>A ServiceStack Route to check campaign exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.Campaign.View"),
        PublicAPI,
        Route("/Tracking/Campaign/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCampaignExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check campaign exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.Campaign.View"),
        PublicAPI,
        Route("/Tracking/Campaign/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCampaignExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check campaign exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.Campaign.View"),
        PublicAPI,
        Route("/Tracking/Campaign/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCampaignExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create campaign.</summary>
    /// <seealso cref="CampaignModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.Campaign.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Campaign/Create", "POST", Priority = 1,
            Summary = "Use to create a new campaign.")]
    public partial class CreateCampaign : CampaignModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert campaign.</summary>
    /// <seealso cref="CampaignModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tracking/Campaign/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing campaign (as needed).")]
    public partial class UpsertCampaign : CampaignModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update campaign.</summary>
    /// <seealso cref="CampaignModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.Campaign.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Campaign/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing campaign.")]
    public partial class UpdateCampaign : CampaignModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate campaign.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Campaign.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Campaign/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific campaign from the system [Soft-Delete]")]
    public partial class DeactivateCampaignByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate campaign by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Campaign.Deactivate"),
        PublicAPI,
        Route("/Tracking/Campaign/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific campaign from the system [Soft-Delete]")]
    public partial class DeactivateCampaignByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate campaign.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Campaign.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Campaign/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific campaign from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCampaignByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate campaign by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Campaign.Reactivate"),
        PublicAPI,
        Route("/Tracking/Campaign/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific campaign from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCampaignByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete campaign.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Campaign.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/Campaign/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific campaign from the system [Hard-Delete]")]
    public partial class DeleteCampaignByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete campaign by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.Campaign.Delete"),
        PublicAPI,
        Route("/Tracking/Campaign/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific campaign from the system [Hard-Delete]")]
    public partial class DeleteCampaignByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear campaign cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/Campaign/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all campaign calls.")]
    public class ClearCampaignCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CampaignServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCampaigns"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaigns request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICampaignModel, CampaignModel, ICampaignSearchModel, CampaignPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Campaigns)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCampaignsForConnect request)
        {
            return await Workflows.Campaigns.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignsDigest request)
        {
            return await Workflows.Campaigns.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCampaignByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Campaigns, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Campaigns, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Campaigns, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCampaignExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCampaignExistsByID request)
        {
            return await Workflows.Campaigns.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCampaignExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCampaignExistsByKey request)
        {
            return await Workflows.Campaigns.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCampaignExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCampaignExistsByName request)
        {
            return await Workflows.Campaigns.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCampaign"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCampaign request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignDataAsync,
                    () => Workflows.Campaigns.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCampaign"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCampaign request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignDataAsync,
                    () => Workflows.Campaigns.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCampaign"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCampaign request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignDataAsync,
                    () => Workflows.Campaigns.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCampaignByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCampaignByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignDataAsync,
                    () => Workflows.Campaigns.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCampaignByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCampaignByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignDataAsync,
                    () => Workflows.Campaigns.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCampaignByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCampaignByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignDataAsync,
                    () => Workflows.Campaigns.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCampaignByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCampaignByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignDataAsync,
                    () => Workflows.Campaigns.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCampaignByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCampaignByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignDataAsync,
                    () => Workflows.Campaigns.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCampaignByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCampaignByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignDataAsync,
                    () => Workflows.Campaigns.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCampaignCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCampaignCache request)
        {
            await ClearCachedCampaignDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCampaignDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCampaigns>(string.Empty),
                    UrnId.Create<GetCampaignByID>(string.Empty),
                    UrnId.Create<GetCampaignByKey>(string.Empty),
                    UrnId.Create<GetCampaignByName>(string.Empty),
                    UrnId.Create<CheckCampaignExistsByID>(string.Empty),
                    UrnId.Create<CheckCampaignExistsByKey>(string.Empty),
                    UrnId.Create<CheckCampaignExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CampaignService : CampaignServiceBase { }
}
