// <autogenerated>
// <copyright file="PurchaseOrderItemTargetService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the purchase order item target service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of purchase order item targets.</summary>
    /// <seealso cref="SalesItemTargetBaseSearchModel"/>
    /// <seealso cref="IReturn{PurchaseOrderItemTargetPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderItemTargets", "GET", Priority = 1,
            Summary = "Use to get a list of purchase order item targets")]
    public partial class GetPurchaseOrderItemTargets : SalesItemTargetBaseSearchModel, IReturn<PurchaseOrderItemTargetPagedResults> { }

    /// <summary>A ServiceStack Route to get purchase order item targets for connect.</summary>
    /// <seealso cref="SalesItemTargetBaseSearchModel"/>
    /// <seealso cref="IReturn{List{SalesItemTargetBaseModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderItemTarget.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderItemTargetsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all purchase order item targets")]
    public partial class GetPurchaseOrderItemTargetsForConnect : SalesItemTargetBaseSearchModel, IReturn<List<SalesItemTargetBaseModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all purchase order item targets.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderItemTarget.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderItemTargetsDigest", "GET",
            Summary = "Use to get a hash representing each purchase order item targets")]
    public partial class GetPurchaseOrderItemTargetsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get purchase order item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesItemTargetBaseModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderItemTarget/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order item target")]
    public partial class GetPurchaseOrderItemTargetByID : ImplementsIDBase, IReturn<SalesItemTargetBaseModel> { }

    /// <summary>A ServiceStack Route to get purchase order item target.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesItemTargetBaseModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderItemTarget/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order item target by the custom key")]
    public partial class GetPurchaseOrderItemTargetByKey : ImplementsKeyBase, IReturn<SalesItemTargetBaseModel> { }

    /// <summary>A ServiceStack Route to check purchase order item target exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderItemTarget.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderItemTarget/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderItemTargetExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order item target exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderItemTarget.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderItemTarget/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderItemTargetExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create purchase order item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderItemTarget.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderItemTarget/Create", "POST", Priority = 1,
            Summary = "Use to create a new purchase order item target.")]
    public partial class CreatePurchaseOrderItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert purchase order item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderItemTarget/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing purchase order item target (as needed).")]
    public partial class UpsertPurchaseOrderItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update purchase order item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderItemTarget.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderItemTarget/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing purchase order item target.")]
    public partial class UpdatePurchaseOrderItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate purchase order item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderItemTarget.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderItemTarget/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order item target from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate purchase order item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderItemTarget.Deactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderItemTarget/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order item target from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderItemTarget.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderItemTarget/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order item target from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderItemTarget.Reactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderItemTarget/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order item target from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderItemTarget.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderItemTarget/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific purchase order item target from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderItemTarget.Delete"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderItemTarget/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific purchase order item target from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear purchase order item target cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderItemTarget/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all purchase order item target calls.")]
    public class ClearPurchaseOrderItemTargetCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PurchaseOrderItemTargetServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPurchaseOrderItemTargets"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderItemTargets request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesItemTargetBaseModel, SalesItemTargetBaseModel, ISalesItemTargetBaseSearchModel, PurchaseOrderItemTargetPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PurchaseOrderItemTargets)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderItemTargetsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPurchaseOrderItemTargetsForConnect request)
        {
            return await Workflows.PurchaseOrderItemTargets.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderItemTargetsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderItemTargetsDigest request)
        {
            return await Workflows.PurchaseOrderItemTargets.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPurchaseOrderItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderItemTargetByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PurchaseOrderItemTargets, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderItemTargetByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PurchaseOrderItemTargets, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPurchaseOrderItemTargetExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderItemTargetExistsByID request)
        {
            return await Workflows.PurchaseOrderItemTargets.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderItemTargetExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderItemTargetExistsByKey request)
        {
            return await Workflows.PurchaseOrderItemTargets.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPurchaseOrderItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPurchaseOrderItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderItemTargetDataAsync,
                    () => Workflows.PurchaseOrderItemTargets.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePurchaseOrderItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePurchaseOrderItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderItemTargetDataAsync,
                    () => Workflows.PurchaseOrderItemTargets.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePurchaseOrderItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePurchaseOrderItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderItemTargetDataAsync,
                    () => Workflows.PurchaseOrderItemTargets.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderItemTargetDataAsync,
                    () => Workflows.PurchaseOrderItemTargets.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderItemTargetDataAsync,
                    () => Workflows.PurchaseOrderItemTargets.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderItemTargetDataAsync,
                    () => Workflows.PurchaseOrderItemTargets.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderItemTargetDataAsync,
                    () => Workflows.PurchaseOrderItemTargets.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderItemTargetDataAsync,
                    () => Workflows.PurchaseOrderItemTargets.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderItemTargetDataAsync,
                    () => Workflows.PurchaseOrderItemTargets.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPurchaseOrderItemTargetCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPurchaseOrderItemTargetCache request)
        {
            await ClearCachedPurchaseOrderItemTargetDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPurchaseOrderItemTargetDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPurchaseOrderItemTargets>(string.Empty),
                    UrnId.Create<GetPurchaseOrderItemTargetByID>(string.Empty),
                    UrnId.Create<GetPurchaseOrderItemTargetByKey>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderItemTargetExistsByID>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderItemTargetExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PurchaseOrderItemTargetService : PurchaseOrderItemTargetServiceBase { }
}
