// <autogenerated>
// <copyright file="BadgeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the badge service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of badges.</summary>
    /// <seealso cref="BadgeSearchModel"/>
    /// <seealso cref="IReturn{BadgePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Badges/Badges", "GET", Priority = 1,
            Summary = "Use to get a list of badges")]
    public partial class GetBadges : BadgeSearchModel, IReturn<BadgePagedResults> { }

    /// <summary>A ServiceStack Route to get badges for connect.</summary>
    /// <seealso cref="BadgeSearchModel"/>
    /// <seealso cref="IReturn{List{BadgeModel}}"/>
    [Authenticate, RequiredPermission("Badges.Badge.View"),
        PublicAPI,
        Route("/Badges/BadgesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all badges")]
    public partial class GetBadgesForConnect : BadgeSearchModel, IReturn<List<BadgeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all badges.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Badges.Badge.View"),
        PublicAPI,
        Route("/Badges/BadgesDigest", "GET",
            Summary = "Use to get a hash representing each badges")]
    public partial class GetBadgesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get badge.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{BadgeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Badges/Badge/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific badge")]
    public partial class GetBadgeByID : ImplementsIDBase, IReturn<BadgeModel> { }

    /// <summary>A ServiceStack Route to get badge.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{BadgeModel}"/>
    [PublicAPI,
        Route("/Badges/Badge/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific badge by the custom key")]
    public partial class GetBadgeByKey : ImplementsKeyBase, IReturn<BadgeModel> { }

    /// <summary>A ServiceStack Route to get badge.</summary>
    /// <seealso cref="IReturn{BadgeModel}"/>
    [PublicAPI,
        Route("/Badges/Badge/Name", "GET", Priority = 1,
            Summary = "Use to get a specific badge by the name")]
    public partial class GetBadgeByName : ImplementsNameBase, IReturn<BadgeModel> { }

    /// <summary>A ServiceStack Route to check badge exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Badges.Badge.View"),
        PublicAPI,
        Route("/Badges/Badge/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBadgeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check badge exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Badges.Badge.View"),
        PublicAPI,
        Route("/Badges/Badge/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBadgeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check badge exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Badges.Badge.View"),
        PublicAPI,
        Route("/Badges/Badge/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckBadgeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create badge.</summary>
    /// <seealso cref="BadgeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Badges.Badge.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/Badge/Create", "POST", Priority = 1,
            Summary = "Use to create a new badge.")]
    public partial class CreateBadge : BadgeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert badge.</summary>
    /// <seealso cref="BadgeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Badges/Badge/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing badge (as needed).")]
    public partial class UpsertBadge : BadgeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update badge.</summary>
    /// <seealso cref="BadgeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Badges.Badge.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/Badge/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing badge.")]
    public partial class UpdateBadge : BadgeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate badge.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.Badge.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/Badge/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific badge from the system [Soft-Delete]")]
    public partial class DeactivateBadgeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate badge by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.Badge.Deactivate"),
        PublicAPI,
        Route("/Badges/Badge/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific badge from the system [Soft-Delete]")]
    public partial class DeactivateBadgeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate badge.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.Badge.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/Badge/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific badge from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBadgeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate badge by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.Badge.Reactivate"),
        PublicAPI,
        Route("/Badges/Badge/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific badge from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBadgeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete badge.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.Badge.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Badges/Badge/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific badge from the system [Hard-Delete]")]
    public partial class DeleteBadgeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete badge by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Badges.Badge.Delete"),
        PublicAPI,
        Route("/Badges/Badge/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific badge from the system [Hard-Delete]")]
    public partial class DeleteBadgeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear badge cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Badges/Badge/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all badge calls.")]
    public class ClearBadgeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BadgeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBadges"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadges request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IBadgeModel, BadgeModel, IBadgeSearchModel, BadgePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Badges)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBadgesForConnect request)
        {
            return await Workflows.Badges.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgesDigest request)
        {
            return await Workflows.Badges.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBadgeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Badges, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Badges, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBadgeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBadgeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Badges, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBadgeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBadgeExistsByID request)
        {
            return await Workflows.Badges.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBadgeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBadgeExistsByKey request)
        {
            return await Workflows.Badges.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBadgeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBadgeExistsByName request)
        {
            return await Workflows.Badges.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBadge"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBadge request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeDataAsync,
                    () => Workflows.Badges.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBadge"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBadge request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeDataAsync,
                    () => Workflows.Badges.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBadge"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBadge request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeDataAsync,
                    () => Workflows.Badges.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBadgeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBadgeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeDataAsync,
                    () => Workflows.Badges.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBadgeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBadgeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeDataAsync,
                    () => Workflows.Badges.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBadgeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBadgeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeDataAsync,
                    () => Workflows.Badges.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBadgeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBadgeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeDataAsync,
                    () => Workflows.Badges.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBadgeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBadgeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeDataAsync,
                    () => Workflows.Badges.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBadgeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBadgeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBadgeDataAsync,
                    () => Workflows.Badges.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBadgeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBadgeCache request)
        {
            await ClearCachedBadgeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBadgeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBadges>(string.Empty),
                    UrnId.Create<GetBadgeByID>(string.Empty),
                    UrnId.Create<GetBadgeByKey>(string.Empty),
                    UrnId.Create<GetBadgeByName>(string.Empty),
                    UrnId.Create<CheckBadgeExistsByID>(string.Empty),
                    UrnId.Create<CheckBadgeExistsByKey>(string.Empty),
                    UrnId.Create<CheckBadgeExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BadgeService : BadgeServiceBase { }
}
