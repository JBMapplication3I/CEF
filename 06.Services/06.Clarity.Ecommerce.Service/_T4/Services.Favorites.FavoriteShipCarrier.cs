// <autogenerated>
// <copyright file="FavoriteShipCarrierService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the favorite ship carrier service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of favorite ship carriers.</summary>
    /// <seealso cref="FavoriteShipCarrierSearchModel"/>
    /// <seealso cref="IReturn{FavoriteShipCarrierPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteShipCarriers", "GET", Priority = 1,
            Summary = "Use to get a list of favorite ship carriers")]
    public partial class GetFavoriteShipCarriers : FavoriteShipCarrierSearchModel, IReturn<FavoriteShipCarrierPagedResults> { }

    /// <summary>A ServiceStack Route to get favorite ship carriers for connect.</summary>
    /// <seealso cref="FavoriteShipCarrierSearchModel"/>
    /// <seealso cref="IReturn{List{FavoriteShipCarrierModel}}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteShipCarrier.View"),
        PublicAPI,
        Route("/Favorites/FavoriteShipCarriersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all favorite ship carriers")]
    public partial class GetFavoriteShipCarriersForConnect : FavoriteShipCarrierSearchModel, IReturn<List<FavoriteShipCarrierModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all favorite ship carriers.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteShipCarrier.View"),
        PublicAPI,
        Route("/Favorites/FavoriteShipCarriersDigest", "GET",
            Summary = "Use to get a hash representing each favorite ship carriers")]
    public partial class GetFavoriteShipCarriersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get favorite ship carrier.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FavoriteShipCarrierModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteShipCarrier/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific favorite ship carrier")]
    public partial class GetFavoriteShipCarrierByID : ImplementsIDBase, IReturn<FavoriteShipCarrierModel> { }

    /// <summary>A ServiceStack Route to get favorite ship carrier.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FavoriteShipCarrierModel}"/>
    [PublicAPI,
        Route("/Favorites/FavoriteShipCarrier/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific favorite ship carrier by the custom key")]
    public partial class GetFavoriteShipCarrierByKey : ImplementsKeyBase, IReturn<FavoriteShipCarrierModel> { }

    /// <summary>A ServiceStack Route to check favorite ship carrier exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteShipCarrier.View"),
        PublicAPI,
        Route("/Favorites/FavoriteShipCarrier/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFavoriteShipCarrierExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check favorite ship carrier exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteShipCarrier.View"),
        PublicAPI,
        Route("/Favorites/FavoriteShipCarrier/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFavoriteShipCarrierExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create favorite ship carrier.</summary>
    /// <seealso cref="FavoriteShipCarrierModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteShipCarrier.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteShipCarrier/Create", "POST", Priority = 1,
            Summary = "Use to create a new favorite ship carrier.")]
    public partial class CreateFavoriteShipCarrier : FavoriteShipCarrierModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert favorite ship carrier.</summary>
    /// <seealso cref="FavoriteShipCarrierModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Favorites/FavoriteShipCarrier/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing favorite ship carrier (as needed).")]
    public partial class UpsertFavoriteShipCarrier : FavoriteShipCarrierModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update favorite ship carrier.</summary>
    /// <seealso cref="FavoriteShipCarrierModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteShipCarrier.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteShipCarrier/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing favorite ship carrier.")]
    public partial class UpdateFavoriteShipCarrier : FavoriteShipCarrierModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate favorite ship carrier.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteShipCarrier.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteShipCarrier/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific favorite ship carrier from the system [Soft-Delete]")]
    public partial class DeactivateFavoriteShipCarrierByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate favorite ship carrier by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteShipCarrier.Deactivate"),
        PublicAPI,
        Route("/Favorites/FavoriteShipCarrier/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific favorite ship carrier from the system [Soft-Delete]")]
    public partial class DeactivateFavoriteShipCarrierByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate favorite ship carrier.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteShipCarrier.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteShipCarrier/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific favorite ship carrier from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFavoriteShipCarrierByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate favorite ship carrier by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteShipCarrier.Reactivate"),
        PublicAPI,
        Route("/Favorites/FavoriteShipCarrier/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific favorite ship carrier from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFavoriteShipCarrierByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete favorite ship carrier.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteShipCarrier.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteShipCarrier/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific favorite ship carrier from the system [Hard-Delete]")]
    public partial class DeleteFavoriteShipCarrierByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete favorite ship carrier by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteShipCarrier.Delete"),
        PublicAPI,
        Route("/Favorites/FavoriteShipCarrier/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific favorite ship carrier from the system [Hard-Delete]")]
    public partial class DeleteFavoriteShipCarrierByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear favorite ship carrier cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteShipCarrier/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all favorite ship carrier calls.")]
    public class ClearFavoriteShipCarrierCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FavoriteShipCarrierServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFavoriteShipCarriers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteShipCarriers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFavoriteShipCarrierModel, FavoriteShipCarrierModel, IFavoriteShipCarrierSearchModel, FavoriteShipCarrierPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FavoriteShipCarriers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteShipCarriersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFavoriteShipCarriersForConnect request)
        {
            return await Workflows.FavoriteShipCarriers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteShipCarriersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteShipCarriersDigest request)
        {
            return await Workflows.FavoriteShipCarriers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFavoriteShipCarrierByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteShipCarrierByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FavoriteShipCarriers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteShipCarrierByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteShipCarrierByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FavoriteShipCarriers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFavoriteShipCarrierExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFavoriteShipCarrierExistsByID request)
        {
            return await Workflows.FavoriteShipCarriers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFavoriteShipCarrierExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFavoriteShipCarrierExistsByKey request)
        {
            return await Workflows.FavoriteShipCarriers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFavoriteShipCarrier"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFavoriteShipCarrier request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteShipCarrierDataAsync,
                    () => Workflows.FavoriteShipCarriers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFavoriteShipCarrier"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFavoriteShipCarrier request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteShipCarrierDataAsync,
                    () => Workflows.FavoriteShipCarriers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFavoriteShipCarrier"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFavoriteShipCarrier request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteShipCarrierDataAsync,
                    () => Workflows.FavoriteShipCarriers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFavoriteShipCarrierByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFavoriteShipCarrierByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteShipCarrierDataAsync,
                    () => Workflows.FavoriteShipCarriers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFavoriteShipCarrierByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFavoriteShipCarrierByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteShipCarrierDataAsync,
                    () => Workflows.FavoriteShipCarriers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFavoriteShipCarrierByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFavoriteShipCarrierByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteShipCarrierDataAsync,
                    () => Workflows.FavoriteShipCarriers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFavoriteShipCarrierByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFavoriteShipCarrierByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteShipCarrierDataAsync,
                    () => Workflows.FavoriteShipCarriers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFavoriteShipCarrierByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFavoriteShipCarrierByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteShipCarrierDataAsync,
                    () => Workflows.FavoriteShipCarriers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFavoriteShipCarrierByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFavoriteShipCarrierByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteShipCarrierDataAsync,
                    () => Workflows.FavoriteShipCarriers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFavoriteShipCarrierCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFavoriteShipCarrierCache request)
        {
            await ClearCachedFavoriteShipCarrierDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFavoriteShipCarrierDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFavoriteShipCarriers>(string.Empty),
                    UrnId.Create<GetFavoriteShipCarrierByID>(string.Empty),
                    UrnId.Create<GetFavoriteShipCarrierByKey>(string.Empty),
                    UrnId.Create<CheckFavoriteShipCarrierExistsByID>(string.Empty),
                    UrnId.Create<CheckFavoriteShipCarrierExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FavoriteShipCarrierService : FavoriteShipCarrierServiceBase { }
}
