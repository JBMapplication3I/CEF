// <autogenerated>
// <copyright file="CartTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the cart type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of cart types.</summary>
    /// <seealso cref="CartTypeSearchModel"/>
    /// <seealso cref="IReturn{CartTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartTypes", "GET", Priority = 1,
            Summary = "Use to get a list of cart types")]
    public partial class GetCartTypes : CartTypeSearchModel, IReturn<CartTypePagedResults> { }

    /// <summary>A ServiceStack Route to get cart types for connect.</summary>
    /// <seealso cref="CartTypeSearchModel"/>
    /// <seealso cref="IReturn{List{CartTypeModel}}"/>
    [Authenticate, RequiredPermission("Shopping.CartType.View"),
        PublicAPI,
        Route("/Shopping/CartTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all cart types")]
    public partial class GetCartTypesForConnect : CartTypeSearchModel, IReturn<List<CartTypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all cart types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shopping.CartType.View"),
        PublicAPI,
        Route("/Shopping/CartTypesDigest", "GET",
            Summary = "Use to get a hash representing each cart types")]
    public partial class GetCartTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get cart type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CartTypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific cart type")]
    public partial class GetCartTypeByID : ImplementsIDBase, IReturn<CartTypeModel> { }

    /// <summary>A ServiceStack Route to get cart type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CartTypeModel}"/>
    [PublicAPI,
        Route("/Shopping/CartType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific cart type by the custom key")]
    public partial class GetCartTypeByKey : ImplementsKeyBase, IReturn<CartTypeModel> { }

    /// <summary>A ServiceStack Route to get cart type.</summary>
    /// <seealso cref="IReturn{CartTypeModel}"/>
    [PublicAPI,
        Route("/Shopping/CartType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific cart type by the name")]
    public partial class GetCartTypeByName : ImplementsNameBase, IReturn<CartTypeModel> { }

    /// <summary>A ServiceStack Route to get cart type.</summary>
    /// <seealso cref="IReturn{CartTypeModel}"/>
    [PublicAPI,
        Route("/Shopping/CartType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific cart type by the name")]
    public partial class GetCartTypeByDisplayName : ImplementsDisplayNameBase, IReturn<CartTypeModel> { }

    /// <summary>A ServiceStack Route to check cart type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartType.View"),
        PublicAPI,
        Route("/Shopping/CartType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCartTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartType.View"),
        PublicAPI,
        Route("/Shopping/CartType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCartTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartType.View"),
        PublicAPI,
        Route("/Shopping/CartType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCartTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartType.View"),
        PublicAPI,
        Route("/Shopping/CartType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCartTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create cart type.</summary>
    /// <seealso cref="CartTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.CartType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartType/Create", "POST", Priority = 1,
            Summary = "Use to create a new cart type.")]
    public partial class CreateCartType : CartTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert cart type.</summary>
    /// <seealso cref="CartTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shopping/CartType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing cart type (as needed).")]
    public partial class UpsertCartType : CartTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update cart type.</summary>
    /// <seealso cref="CartTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.CartType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing cart type.")]
    public partial class UpdateCartType : CartTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate cart type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart type from the system [Soft-Delete]")]
    public partial class DeactivateCartTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate cart type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartType.Deactivate"),
        PublicAPI,
        Route("/Shopping/CartType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart type from the system [Soft-Delete]")]
    public partial class DeactivateCartTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartType.Reactivate"),
        PublicAPI,
        Route("/Shopping/CartType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific cart type from the system [Hard-Delete]")]
    public partial class DeleteCartTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartType.Delete"),
        PublicAPI,
        Route("/Shopping/CartType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific cart type from the system [Hard-Delete]")]
    public partial class DeleteCartTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear cart type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all cart type calls.")]
    public class ClearCartTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CartTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCartTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICartTypeModel, CartTypeModel, ICartTypeSearchModel, CartTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CartTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCartTypesForConnect request)
        {
            return await Workflows.CartTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartTypesDigest request)
        {
            return await Workflows.CartTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCartTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CartTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CartTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CartTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.CartTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCartTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartTypeExistsByID request)
        {
            return await Workflows.CartTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartTypeExistsByKey request)
        {
            return await Workflows.CartTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartTypeExistsByName request)
        {
            return await Workflows.CartTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartTypeExistsByDisplayName request)
        {
            return await Workflows.CartTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCartType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCartType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartTypeDataAsync,
                    () => Workflows.CartTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCartType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCartType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartTypeDataAsync,
                    () => Workflows.CartTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCartType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCartType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartTypeDataAsync,
                    () => Workflows.CartTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCartTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartTypeDataAsync,
                    () => Workflows.CartTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCartTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartTypeDataAsync,
                    () => Workflows.CartTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCartTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartTypeDataAsync,
                    () => Workflows.CartTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCartTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartTypeDataAsync,
                    () => Workflows.CartTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCartTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartTypeDataAsync,
                    () => Workflows.CartTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCartTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartTypeDataAsync,
                    () => Workflows.CartTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCartTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCartTypeCache request)
        {
            await ClearCachedCartTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCartTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCartTypes>(string.Empty),
                    UrnId.Create<GetCartTypeByID>(string.Empty),
                    UrnId.Create<GetCartTypeByKey>(string.Empty),
                    UrnId.Create<GetCartTypeByName>(string.Empty),
                    UrnId.Create<CheckCartTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckCartTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckCartTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckCartTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CartTypeService : CartTypeServiceBase { }
}
