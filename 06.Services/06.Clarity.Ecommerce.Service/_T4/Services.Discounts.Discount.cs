// <autogenerated>
// <copyright file="DiscountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discounts.</summary>
    /// <seealso cref="DiscountSearchModel"/>
    /// <seealso cref="IReturn{DiscountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/Discounts", "GET", Priority = 1,
            Summary = "Use to get a list of discounts")]
    public partial class GetDiscounts : DiscountSearchModel, IReturn<DiscountPagedResults> { }

    /// <summary>A ServiceStack Route to get discounts for connect.</summary>
    /// <seealso cref="DiscountSearchModel"/>
    /// <seealso cref="IReturn{List{DiscountModel}}"/>
    [Authenticate, RequiredPermission("Discounts.Discount.View"),
        PublicAPI,
        Route("/Discounts/DiscountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discounts")]
    public partial class GetDiscountsForConnect : DiscountSearchModel, IReturn<List<DiscountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.Discount.View"),
        PublicAPI,
        Route("/Discounts/DiscountsDigest", "GET",
            Summary = "Use to get a hash representing each discounts")]
    public partial class GetDiscountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/Discount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount")]
    public partial class GetDiscountByID : ImplementsIDBase, IReturn<DiscountModel> { }

    /// <summary>A ServiceStack Route to get discount.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountModel}"/>
    [PublicAPI,
        Route("/Discounts/Discount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount by the custom key")]
    public partial class GetDiscountByKey : ImplementsKeyBase, IReturn<DiscountModel> { }

    /// <summary>A ServiceStack Route to get discount.</summary>
    /// <seealso cref="IReturn{DiscountModel}"/>
    [PublicAPI,
        Route("/Discounts/Discount/Name", "GET", Priority = 1,
            Summary = "Use to get a specific discount by the name")]
    public partial class GetDiscountByName : ImplementsNameBase, IReturn<DiscountModel> { }

    /// <summary>A ServiceStack Route to check discount exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.Discount.View"),
        PublicAPI,
        Route("/Discounts/Discount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.Discount.View"),
        PublicAPI,
        Route("/Discounts/Discount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.Discount.View"),
        PublicAPI,
        Route("/Discounts/Discount/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount.</summary>
    /// <seealso cref="DiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.Discount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/Discount/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount.")]
    public partial class CreateDiscount : DiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount.</summary>
    /// <seealso cref="DiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/Discount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount (as needed).")]
    public partial class UpsertDiscount : DiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount.</summary>
    /// <seealso cref="DiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.Discount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/Discount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount.")]
    public partial class UpdateDiscount : DiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.Discount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/Discount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount from the system [Soft-Delete]")]
    public partial class DeactivateDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.Discount.Deactivate"),
        PublicAPI,
        Route("/Discounts/Discount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount from the system [Soft-Delete]")]
    public partial class DeactivateDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.Discount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/Discount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.Discount.Reactivate"),
        PublicAPI,
        Route("/Discounts/Discount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.Discount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/Discount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount from the system [Hard-Delete]")]
    public partial class DeleteDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.Discount.Delete"),
        PublicAPI,
        Route("/Discounts/Discount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount from the system [Hard-Delete]")]
    public partial class DeleteDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/Discount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount calls.")]
    public class ClearDiscountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountModel, DiscountModel, IDiscountSearchModel, DiscountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Discounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountsForConnect request)
        {
            return await Workflows.Discounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountsDigest request)
        {
            return await Workflows.Discounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Discounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Discounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Discounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountExistsByID request)
        {
            return await Workflows.Discounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountExistsByKey request)
        {
            return await Workflows.Discounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountExistsByName request)
        {
            return await Workflows.Discounts.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountDataAsync,
                    () => Workflows.Discounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountDataAsync,
                    () => Workflows.Discounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountDataAsync,
                    () => Workflows.Discounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountDataAsync,
                    () => Workflows.Discounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountDataAsync,
                    () => Workflows.Discounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountDataAsync,
                    () => Workflows.Discounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountDataAsync,
                    () => Workflows.Discounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountDataAsync,
                    () => Workflows.Discounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountDataAsync,
                    () => Workflows.Discounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountCache request)
        {
            await ClearCachedDiscountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscounts>(string.Empty),
                    UrnId.Create<GetDiscountByID>(string.Empty),
                    UrnId.Create<GetDiscountByKey>(string.Empty),
                    UrnId.Create<GetDiscountByName>(string.Empty),
                    UrnId.Create<CheckDiscountExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountExistsByKey>(string.Empty),
                    UrnId.Create<CheckDiscountExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountService : DiscountServiceBase { }
}
