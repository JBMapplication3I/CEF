// <autogenerated>
// <copyright file="SalesQuoteContactService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales quote contact service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales quote contacts.</summary>
    /// <seealso cref="SalesQuoteContactSearchModel"/>
    /// <seealso cref="IReturn{SalesQuoteContactPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteContacts", "GET", Priority = 1,
            Summary = "Use to get a list of sales quote contacts")]
    public partial class GetSalesQuoteContacts : SalesQuoteContactSearchModel, IReturn<SalesQuoteContactPagedResults> { }

    /// <summary>A ServiceStack Route to get sales quote contacts for connect.</summary>
    /// <seealso cref="SalesQuoteContactSearchModel"/>
    /// <seealso cref="IReturn{List{SalesQuoteContactModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteContact.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteContactsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales quote contacts")]
    public partial class GetSalesQuoteContactsForConnect : SalesQuoteContactSearchModel, IReturn<List<SalesQuoteContactModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales quote contacts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteContact.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteContactsDigest", "GET",
            Summary = "Use to get a hash representing each sales quote contacts")]
    public partial class GetSalesQuoteContactsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales quote contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesQuoteContactModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteContact/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote contact")]
    public partial class GetSalesQuoteContactByID : ImplementsIDBase, IReturn<SalesQuoteContactModel> { }

    /// <summary>A ServiceStack Route to get sales quote contact.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesQuoteContactModel}"/>
    [PublicAPI,
        Route("/Quoting/SalesQuoteContact/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote contact by the custom key")]
    public partial class GetSalesQuoteContactByKey : ImplementsKeyBase, IReturn<SalesQuoteContactModel> { }

    /// <summary>A ServiceStack Route to check sales quote contact exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteContact.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteContact/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteContactExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales quote contact exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteContact.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteContact/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteContactExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales quote contact.</summary>
    /// <seealso cref="SalesQuoteContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteContact.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteContact/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales quote contact.")]
    public partial class CreateSalesQuoteContact : SalesQuoteContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales quote contact.</summary>
    /// <seealso cref="SalesQuoteContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Quoting/SalesQuoteContact/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales quote contact (as needed).")]
    public partial class UpsertSalesQuoteContact : SalesQuoteContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales quote contact.</summary>
    /// <seealso cref="SalesQuoteContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteContact.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteContact/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales quote contact.")]
    public partial class UpdateSalesQuoteContact : SalesQuoteContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales quote contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteContact.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteContact/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote contact from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales quote contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteContact.Deactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuoteContact/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote contact from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteContact.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteContact/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteContact.Reactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuoteContact/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteContact.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteContact/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales quote contact from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteContact.Delete"),
        PublicAPI,
        Route("/Quoting/SalesQuoteContact/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales quote contact from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales quote contact cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteContact/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales quote contact calls.")]
    public class ClearSalesQuoteContactCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesQuoteContactServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesQuoteContacts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteContacts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesQuoteContactModel, SalesQuoteContactModel, ISalesQuoteContactSearchModel, SalesQuoteContactPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesQuoteContacts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteContactsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesQuoteContactsForConnect request)
        {
            return await Workflows.SalesQuoteContacts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteContactsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteContactsDigest request)
        {
            return await Workflows.SalesQuoteContacts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesQuoteContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteContactByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesQuoteContacts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteContactByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesQuoteContacts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesQuoteContactExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteContactExistsByID request)
        {
            return await Workflows.SalesQuoteContacts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesQuoteContactExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteContactExistsByKey request)
        {
            return await Workflows.SalesQuoteContacts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesQuoteContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesQuoteContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteContactDataAsync,
                    () => Workflows.SalesQuoteContacts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesQuoteContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesQuoteContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteContactDataAsync,
                    () => Workflows.SalesQuoteContacts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesQuoteContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesQuoteContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteContactDataAsync,
                    () => Workflows.SalesQuoteContacts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteContactDataAsync,
                    () => Workflows.SalesQuoteContacts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteContactDataAsync,
                    () => Workflows.SalesQuoteContacts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteContactDataAsync,
                    () => Workflows.SalesQuoteContacts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteContactDataAsync,
                    () => Workflows.SalesQuoteContacts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteContactDataAsync,
                    () => Workflows.SalesQuoteContacts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteContactDataAsync,
                    () => Workflows.SalesQuoteContacts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesQuoteContactCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesQuoteContactCache request)
        {
            await ClearCachedSalesQuoteContactDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesQuoteContactDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesQuoteContacts>(string.Empty),
                    UrnId.Create<GetSalesQuoteContactByID>(string.Empty),
                    UrnId.Create<GetSalesQuoteContactByKey>(string.Empty),
                    UrnId.Create<CheckSalesQuoteContactExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesQuoteContactExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesQuoteContactService : SalesQuoteContactServiceBase { }
}
