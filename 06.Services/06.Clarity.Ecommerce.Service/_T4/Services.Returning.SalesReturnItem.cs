// <autogenerated>
// <copyright file="SalesReturnItemService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales return item service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales return items.</summary>
    /// <seealso cref="SalesItemBaseSearchModel"/>
    /// <seealso cref="IReturn{SalesReturnItemPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturnItems", "GET", Priority = 1,
            Summary = "Use to get a list of sales return items")]
    public partial class GetSalesReturnItems : SalesItemBaseSearchModel, IReturn<SalesReturnItemPagedResults> { }

    /// <summary>A ServiceStack Route to get sales return items for connect.</summary>
    /// <seealso cref="SalesItemBaseSearchModel"/>
    /// <seealso cref="IReturn{List{SalesItemBaseModel}}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItem.View"),
        PublicAPI,
        Route("/Returning/SalesReturnItemsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales return items")]
    public partial class GetSalesReturnItemsForConnect : SalesItemBaseSearchModel, IReturn<List<SalesItemBaseModel<IAppliedSalesReturnItemDiscountModel, AppliedSalesReturnItemDiscountModel>>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales return items.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItem.View"),
        PublicAPI,
        Route("/Returning/SalesReturnItemsDigest", "GET",
            Summary = "Use to get a hash representing each sales return items")]
    public partial class GetSalesReturnItemsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales return item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturnItem/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales return item")]
    public partial class GetSalesReturnItemByID : ImplementsIDBase, IReturn<SalesItemBaseModel<IAppliedSalesReturnItemDiscountModel, AppliedSalesReturnItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get sales return item.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        Route("/Returning/SalesReturnItem/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales return item by the custom key")]
    public partial class GetSalesReturnItemByKey : ImplementsKeyBase, IReturn<SalesItemBaseModel<IAppliedSalesReturnItemDiscountModel, AppliedSalesReturnItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get sales return item.</summary>
    /// <seealso cref="IReturn{SalesItemBaseModel}"/>
    [PublicAPI,
        Route("/Returning/SalesReturnItem/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sales return item by the name")]
    public partial class GetSalesReturnItemByName : ImplementsNameBase, IReturn<SalesItemBaseModel<IAppliedSalesReturnItemDiscountModel, AppliedSalesReturnItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to check sales return item exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItem.View"),
        PublicAPI,
        Route("/Returning/SalesReturnItem/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnItemExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales return item exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItem.View"),
        PublicAPI,
        Route("/Returning/SalesReturnItem/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnItemExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales return item exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItem.View"),
        PublicAPI,
        Route("/Returning/SalesReturnItem/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnItemExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales return item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItem.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnItem/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales return item.")]
    public partial class CreateSalesReturnItem : SalesItemBaseModel<IAppliedSalesReturnItemDiscountModel, AppliedSalesReturnItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales return item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Returning/SalesReturnItem/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales return item (as needed).")]
    public partial class UpsertSalesReturnItem : SalesItemBaseModel<IAppliedSalesReturnItemDiscountModel, AppliedSalesReturnItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales return item.</summary>
    /// <seealso cref="SalesItemBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItem.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnItem/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales return item.")]
    public partial class UpdateSalesReturnItem : SalesItemBaseModel<IAppliedSalesReturnItemDiscountModel, AppliedSalesReturnItemDiscountModel>, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales return item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItem.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnItem/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales return item from the system [Soft-Delete]")]
    public partial class DeactivateSalesReturnItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales return item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItem.Deactivate"),
        PublicAPI,
        Route("/Returning/SalesReturnItem/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales return item from the system [Soft-Delete]")]
    public partial class DeactivateSalesReturnItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales return item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItem.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnItem/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales return item from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesReturnItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales return item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItem.Reactivate"),
        PublicAPI,
        Route("/Returning/SalesReturnItem/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales return item from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesReturnItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales return item.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItem.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnItem/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales return item from the system [Hard-Delete]")]
    public partial class DeleteSalesReturnItemByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales return item by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItem.Delete"),
        PublicAPI,
        Route("/Returning/SalesReturnItem/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales return item from the system [Hard-Delete]")]
    public partial class DeleteSalesReturnItemByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales return item cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturnItem/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales return item calls.")]
    public class ClearSalesReturnItemCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesReturnItemServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesReturnItems"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnItems request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesItemBaseModel<IAppliedSalesReturnItemDiscountModel>, SalesItemBaseModel<IAppliedSalesReturnItemDiscountModel, AppliedSalesReturnItemDiscountModel>, ISalesItemBaseSearchModel, SalesReturnItemPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesReturnItems)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnItemsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesReturnItemsForConnect request)
        {
            return await Workflows.SalesReturnItems.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnItemsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnItemsDigest request)
        {
            return await Workflows.SalesReturnItems.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesReturnItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnItemByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesReturnItems, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnItemByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesReturnItems, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnItemByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnItemByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SalesReturnItems, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesReturnItemExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnItemExistsByID request)
        {
            return await Workflows.SalesReturnItems.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesReturnItemExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnItemExistsByKey request)
        {
            return await Workflows.SalesReturnItems.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesReturnItemExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnItemExistsByName request)
        {
            return await Workflows.SalesReturnItems.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesReturnItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesReturnItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemDataAsync,
                    () => Workflows.SalesReturnItems.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesReturnItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesReturnItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemDataAsync,
                    () => Workflows.SalesReturnItems.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesReturnItem"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesReturnItem request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemDataAsync,
                    () => Workflows.SalesReturnItems.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesReturnItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesReturnItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemDataAsync,
                    () => Workflows.SalesReturnItems.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesReturnItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesReturnItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemDataAsync,
                    () => Workflows.SalesReturnItems.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesReturnItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesReturnItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemDataAsync,
                    () => Workflows.SalesReturnItems.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesReturnItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesReturnItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemDataAsync,
                    () => Workflows.SalesReturnItems.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesReturnItemByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesReturnItemByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemDataAsync,
                    () => Workflows.SalesReturnItems.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesReturnItemByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesReturnItemByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemDataAsync,
                    () => Workflows.SalesReturnItems.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesReturnItemCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesReturnItemCache request)
        {
            await ClearCachedSalesReturnItemDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesReturnItemDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesReturnItems>(string.Empty),
                    UrnId.Create<GetSalesReturnItemByID>(string.Empty),
                    UrnId.Create<GetSalesReturnItemByKey>(string.Empty),
                    UrnId.Create<GetSalesReturnItemByName>(string.Empty),
                    UrnId.Create<CheckSalesReturnItemExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesReturnItemExistsByKey>(string.Empty),
                    UrnId.Create<CheckSalesReturnItemExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesReturnItemService : SalesReturnItemServiceBase { }
}
