// <autogenerated>
// <copyright file="FavoriteCategoryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the favorite category service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of favorite categories.</summary>
    /// <seealso cref="FavoriteCategorySearchModel"/>
    /// <seealso cref="IReturn{FavoriteCategoryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteCategories", "GET", Priority = 1,
            Summary = "Use to get a list of favorite categories")]
    public partial class GetFavoriteCategories : FavoriteCategorySearchModel, IReturn<FavoriteCategoryPagedResults> { }

    /// <summary>A ServiceStack Route to get favorite categories for connect.</summary>
    /// <seealso cref="FavoriteCategorySearchModel"/>
    /// <seealso cref="IReturn{List{FavoriteCategoryModel}}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteCategory.View"),
        PublicAPI,
        Route("/Favorites/FavoriteCategoriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all favorite categories")]
    public partial class GetFavoriteCategoriesForConnect : FavoriteCategorySearchModel, IReturn<List<FavoriteCategoryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all favorite categories.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteCategory.View"),
        PublicAPI,
        Route("/Favorites/FavoriteCategoriesDigest", "GET",
            Summary = "Use to get a hash representing each favorite categories")]
    public partial class GetFavoriteCategoriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get favorite category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FavoriteCategoryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteCategory/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific favorite category")]
    public partial class GetFavoriteCategoryByID : ImplementsIDBase, IReturn<FavoriteCategoryModel> { }

    /// <summary>A ServiceStack Route to get favorite category.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FavoriteCategoryModel}"/>
    [PublicAPI,
        Route("/Favorites/FavoriteCategory/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific favorite category by the custom key")]
    public partial class GetFavoriteCategoryByKey : ImplementsKeyBase, IReturn<FavoriteCategoryModel> { }

    /// <summary>A ServiceStack Route to check favorite category exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteCategory.View"),
        PublicAPI,
        Route("/Favorites/FavoriteCategory/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFavoriteCategoryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check favorite category exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteCategory.View"),
        PublicAPI,
        Route("/Favorites/FavoriteCategory/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFavoriteCategoryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create favorite category.</summary>
    /// <seealso cref="FavoriteCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteCategory.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteCategory/Create", "POST", Priority = 1,
            Summary = "Use to create a new favorite category.")]
    public partial class CreateFavoriteCategory : FavoriteCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert favorite category.</summary>
    /// <seealso cref="FavoriteCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Favorites/FavoriteCategory/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing favorite category (as needed).")]
    public partial class UpsertFavoriteCategory : FavoriteCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update favorite category.</summary>
    /// <seealso cref="FavoriteCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteCategory.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteCategory/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing favorite category.")]
    public partial class UpdateFavoriteCategory : FavoriteCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate favorite category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteCategory.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteCategory/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific favorite category from the system [Soft-Delete]")]
    public partial class DeactivateFavoriteCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate favorite category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteCategory.Deactivate"),
        PublicAPI,
        Route("/Favorites/FavoriteCategory/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific favorite category from the system [Soft-Delete]")]
    public partial class DeactivateFavoriteCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate favorite category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteCategory.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteCategory/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific favorite category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFavoriteCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate favorite category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteCategory.Reactivate"),
        PublicAPI,
        Route("/Favorites/FavoriteCategory/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific favorite category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFavoriteCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete favorite category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteCategory.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Favorites/FavoriteCategory/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific favorite category from the system [Hard-Delete]")]
    public partial class DeleteFavoriteCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete favorite category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Favorites.FavoriteCategory.Delete"),
        PublicAPI,
        Route("/Favorites/FavoriteCategory/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific favorite category from the system [Hard-Delete]")]
    public partial class DeleteFavoriteCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear favorite category cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Favorites/FavoriteCategory/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all favorite category calls.")]
    public class ClearFavoriteCategoryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FavoriteCategoryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFavoriteCategories"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteCategories request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFavoriteCategoryModel, FavoriteCategoryModel, IFavoriteCategorySearchModel, FavoriteCategoryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FavoriteCategories)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteCategoriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFavoriteCategoriesForConnect request)
        {
            return await Workflows.FavoriteCategories.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteCategoriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteCategoriesDigest request)
        {
            return await Workflows.FavoriteCategories.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFavoriteCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteCategoryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FavoriteCategories, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFavoriteCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFavoriteCategoryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FavoriteCategories, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFavoriteCategoryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFavoriteCategoryExistsByID request)
        {
            return await Workflows.FavoriteCategories.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFavoriteCategoryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFavoriteCategoryExistsByKey request)
        {
            return await Workflows.FavoriteCategories.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFavoriteCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFavoriteCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteCategoryDataAsync,
                    () => Workflows.FavoriteCategories.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFavoriteCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFavoriteCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteCategoryDataAsync,
                    () => Workflows.FavoriteCategories.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFavoriteCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFavoriteCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteCategoryDataAsync,
                    () => Workflows.FavoriteCategories.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFavoriteCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFavoriteCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteCategoryDataAsync,
                    () => Workflows.FavoriteCategories.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFavoriteCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFavoriteCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteCategoryDataAsync,
                    () => Workflows.FavoriteCategories.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFavoriteCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFavoriteCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteCategoryDataAsync,
                    () => Workflows.FavoriteCategories.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFavoriteCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFavoriteCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteCategoryDataAsync,
                    () => Workflows.FavoriteCategories.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFavoriteCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFavoriteCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteCategoryDataAsync,
                    () => Workflows.FavoriteCategories.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFavoriteCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFavoriteCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFavoriteCategoryDataAsync,
                    () => Workflows.FavoriteCategories.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFavoriteCategoryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFavoriteCategoryCache request)
        {
            await ClearCachedFavoriteCategoryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFavoriteCategoryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFavoriteCategories>(string.Empty),
                    UrnId.Create<GetFavoriteCategoryByID>(string.Empty),
                    UrnId.Create<GetFavoriteCategoryByKey>(string.Empty),
                    UrnId.Create<CheckFavoriteCategoryExistsByID>(string.Empty),
                    UrnId.Create<CheckFavoriteCategoryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FavoriteCategoryService : FavoriteCategoryServiceBase { }
}
