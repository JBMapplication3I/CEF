// <autogenerated>
// <copyright file="FranchiseInventoryLocationService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise inventory location service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise inventory locations.</summary>
    /// <seealso cref="FranchiseInventoryLocationSearchModel"/>
    /// <seealso cref="IReturn{FranchiseInventoryLocationPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseInventoryLocations", "GET", Priority = 1,
            Summary = "Use to get a list of franchise inventory locations")]
    public partial class GetFranchiseInventoryLocations : FranchiseInventoryLocationSearchModel, IReturn<FranchiseInventoryLocationPagedResults> { }

    /// <summary>A ServiceStack Route to get franchise inventory locations for connect.</summary>
    /// <seealso cref="FranchiseInventoryLocationSearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseInventoryLocationModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocation.View"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise inventory locations")]
    public partial class GetFranchiseInventoryLocationsForConnect : FranchiseInventoryLocationSearchModel, IReturn<List<FranchiseInventoryLocationModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise inventory locations.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocation.View"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationsDigest", "GET",
            Summary = "Use to get a hash representing each franchise inventory locations")]
    public partial class GetFranchiseInventoryLocationsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseInventoryLocationModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseInventoryLocation/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise inventory location")]
    public partial class GetFranchiseInventoryLocationByID : ImplementsIDBase, IReturn<FranchiseInventoryLocationModel> { }

    /// <summary>A ServiceStack Route to get franchise inventory location.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseInventoryLocationModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseInventoryLocation/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise inventory location by the custom key")]
    public partial class GetFranchiseInventoryLocationByKey : ImplementsKeyBase, IReturn<FranchiseInventoryLocationModel> { }

    /// <summary>A ServiceStack Route to check franchise inventory location exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocation.View"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocation/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseInventoryLocationExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise inventory location exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocation.View"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocation/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseInventoryLocationExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise inventory location.</summary>
    /// <seealso cref="FranchiseInventoryLocationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocation.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocation/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise inventory location.")]
    public partial class CreateFranchiseInventoryLocation : FranchiseInventoryLocationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise inventory location.</summary>
    /// <seealso cref="FranchiseInventoryLocationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocation/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise inventory location (as needed).")]
    public partial class UpsertFranchiseInventoryLocation : FranchiseInventoryLocationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise inventory location.</summary>
    /// <seealso cref="FranchiseInventoryLocationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocation.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocation/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise inventory location.")]
    public partial class UpdateFranchiseInventoryLocation : FranchiseInventoryLocationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocation.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocation/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise inventory location from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseInventoryLocationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise inventory location by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocation.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocation/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise inventory location from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseInventoryLocationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocation.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocation/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise inventory location from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseInventoryLocationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise inventory location by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocation.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocation/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise inventory location from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseInventoryLocationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocation.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocation/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise inventory location from the system [Hard-Delete]")]
    public partial class DeleteFranchiseInventoryLocationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise inventory location by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocation.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocation/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise inventory location from the system [Hard-Delete]")]
    public partial class DeleteFranchiseInventoryLocationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise inventory location cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseInventoryLocation/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise inventory location calls.")]
    public class ClearFranchiseInventoryLocationCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseInventoryLocationServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseInventoryLocations"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseInventoryLocations request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseInventoryLocationModel, FranchiseInventoryLocationModel, IFranchiseInventoryLocationSearchModel, FranchiseInventoryLocationPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseInventoryLocations)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseInventoryLocationsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseInventoryLocationsForConnect request)
        {
            return await Workflows.FranchiseInventoryLocations.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseInventoryLocationsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseInventoryLocationsDigest request)
        {
            return await Workflows.FranchiseInventoryLocations.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseInventoryLocationByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseInventoryLocations, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseInventoryLocationByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseInventoryLocations, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseInventoryLocationExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseInventoryLocationExistsByID request)
        {
            return await Workflows.FranchiseInventoryLocations.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseInventoryLocationExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseInventoryLocationExistsByKey request)
        {
            return await Workflows.FranchiseInventoryLocations.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseInventoryLocation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseInventoryLocation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationDataAsync,
                    () => Workflows.FranchiseInventoryLocations.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseInventoryLocation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseInventoryLocation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationDataAsync,
                    () => Workflows.FranchiseInventoryLocations.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseInventoryLocation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseInventoryLocation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationDataAsync,
                    () => Workflows.FranchiseInventoryLocations.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseInventoryLocationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationDataAsync,
                    () => Workflows.FranchiseInventoryLocations.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseInventoryLocationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationDataAsync,
                    () => Workflows.FranchiseInventoryLocations.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseInventoryLocationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationDataAsync,
                    () => Workflows.FranchiseInventoryLocations.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseInventoryLocationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationDataAsync,
                    () => Workflows.FranchiseInventoryLocations.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseInventoryLocationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationDataAsync,
                    () => Workflows.FranchiseInventoryLocations.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseInventoryLocationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationDataAsync,
                    () => Workflows.FranchiseInventoryLocations.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseInventoryLocationCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseInventoryLocationCache request)
        {
            await ClearCachedFranchiseInventoryLocationDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseInventoryLocationDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseInventoryLocations>(string.Empty),
                    UrnId.Create<GetFranchiseInventoryLocationByID>(string.Empty),
                    UrnId.Create<GetFranchiseInventoryLocationByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseInventoryLocationExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseInventoryLocationExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseInventoryLocationService : FranchiseInventoryLocationServiceBase { }
}
