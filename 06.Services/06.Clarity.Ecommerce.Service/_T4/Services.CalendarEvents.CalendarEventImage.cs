// <autogenerated>
// <copyright file="CalendarEventImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the calendar event image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of calendar event images.</summary>
    /// <seealso cref="CalendarEventImageSearchModel"/>
    /// <seealso cref="IReturn{CalendarEventImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventImages", "GET", Priority = 1,
            Summary = "Use to get a list of calendar event images")]
    public partial class GetCalendarEventImages : CalendarEventImageSearchModel, IReturn<CalendarEventImagePagedResults> { }

    /// <summary>A ServiceStack Route to get calendar event images for connect.</summary>
    /// <seealso cref="CalendarEventImageSearchModel"/>
    /// <seealso cref="IReturn{List{CalendarEventImageModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImage.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all calendar event images")]
    public partial class GetCalendarEventImagesForConnect : CalendarEventImageSearchModel, IReturn<List<CalendarEventImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all calendar event images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImage.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImagesDigest", "GET",
            Summary = "Use to get a hash representing each calendar event images")]
    public partial class GetCalendarEventImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get calendar event image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CalendarEventImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event image")]
    public partial class GetCalendarEventImageByID : ImplementsIDBase, IReturn<CalendarEventImageModel> { }

    /// <summary>A ServiceStack Route to get calendar event image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CalendarEventImageModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEventImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event image by the custom key")]
    public partial class GetCalendarEventImageByKey : ImplementsKeyBase, IReturn<CalendarEventImageModel> { }

    /// <summary>A ServiceStack Route to get calendar event image.</summary>
    /// <seealso cref="IReturn{CalendarEventImageModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEventImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event image by the name")]
    public partial class GetCalendarEventImageByName : ImplementsNameBase, IReturn<CalendarEventImageModel> { }

    /// <summary>A ServiceStack Route to check calendar event image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImage.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImage.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImage.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create calendar event image.</summary>
    /// <seealso cref="CalendarEventImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new calendar event image.")]
    public partial class CreateCalendarEventImage : CalendarEventImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert calendar event image.</summary>
    /// <seealso cref="CalendarEventImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing calendar event image (as needed).")]
    public partial class UpsertCalendarEventImage : CalendarEventImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update calendar event image.</summary>
    /// <seealso cref="CalendarEventImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing calendar event image.")]
    public partial class UpdateCalendarEventImage : CalendarEventImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate calendar event image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar event image from the system [Soft-Delete]")]
    public partial class DeactivateCalendarEventImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate calendar event image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImage.Deactivate"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar event image from the system [Soft-Delete]")]
    public partial class DeactivateCalendarEventImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar event image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar event image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarEventImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar event image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImage.Reactivate"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar event image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarEventImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar event image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific calendar event image from the system [Hard-Delete]")]
    public partial class DeleteCalendarEventImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar event image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventImage.Delete"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific calendar event image from the system [Hard-Delete]")]
    public partial class DeleteCalendarEventImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear calendar event image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all calendar event image calls.")]
    public class ClearCalendarEventImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CalendarEventImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCalendarEventImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICalendarEventImageModel, CalendarEventImageModel, ICalendarEventImageSearchModel, CalendarEventImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CalendarEventImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCalendarEventImagesForConnect request)
        {
            return await Workflows.CalendarEventImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventImagesDigest request)
        {
            return await Workflows.CalendarEventImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCalendarEventImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CalendarEventImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CalendarEventImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CalendarEventImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCalendarEventImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventImageExistsByID request)
        {
            return await Workflows.CalendarEventImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventImageExistsByKey request)
        {
            return await Workflows.CalendarEventImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventImageExistsByName request)
        {
            return await Workflows.CalendarEventImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCalendarEventImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCalendarEventImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageDataAsync,
                    () => Workflows.CalendarEventImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCalendarEventImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCalendarEventImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageDataAsync,
                    () => Workflows.CalendarEventImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCalendarEventImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCalendarEventImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageDataAsync,
                    () => Workflows.CalendarEventImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCalendarEventImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarEventImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageDataAsync,
                    () => Workflows.CalendarEventImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCalendarEventImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarEventImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageDataAsync,
                    () => Workflows.CalendarEventImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCalendarEventImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarEventImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageDataAsync,
                    () => Workflows.CalendarEventImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCalendarEventImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarEventImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageDataAsync,
                    () => Workflows.CalendarEventImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCalendarEventImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarEventImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageDataAsync,
                    () => Workflows.CalendarEventImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCalendarEventImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarEventImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventImageDataAsync,
                    () => Workflows.CalendarEventImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCalendarEventImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCalendarEventImageCache request)
        {
            await ClearCachedCalendarEventImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCalendarEventImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCalendarEventImages>(string.Empty),
                    UrnId.Create<GetCalendarEventImageByID>(string.Empty),
                    UrnId.Create<GetCalendarEventImageByKey>(string.Empty),
                    UrnId.Create<GetCalendarEventImageByName>(string.Empty),
                    UrnId.Create<CheckCalendarEventImageExistsByID>(string.Empty),
                    UrnId.Create<CheckCalendarEventImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckCalendarEventImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CalendarEventImageService : CalendarEventImageServiceBase { }
}
