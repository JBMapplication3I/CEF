// <autogenerated>
// <copyright file="SalesQuoteService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales quote service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales quotes.</summary>
    /// <seealso cref="SalesQuoteSearchModel"/>
    /// <seealso cref="IReturn{SalesQuotePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuotes", "GET", Priority = 1,
            Summary = "Use to get a list of sales quotes")]
    public partial class GetSalesQuotes : SalesQuoteSearchModel, IReturn<SalesQuotePagedResults> { }

    /// <summary>A ServiceStack Route to get sales quotes for connect.</summary>
    /// <seealso cref="SalesQuoteSearchModel"/>
    /// <seealso cref="IReturn{List{SalesQuoteModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuote.View"),
        PublicAPI,
        Route("/Quoting/SalesQuotesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales quotes")]
    public partial class GetSalesQuotesForConnect : SalesQuoteSearchModel, IReturn<List<SalesQuoteModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales quotes.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuote.View"),
        PublicAPI,
        Route("/Quoting/SalesQuotesDigest", "GET",
            Summary = "Use to get a hash representing each sales quotes")]
    public partial class GetSalesQuotesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales quote.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesQuoteModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuote/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote")]
    public partial class GetSalesQuoteByID : ImplementsIDBase, IReturn<SalesQuoteModel> { }

    /// <summary>A ServiceStack Route to get sales quote.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesQuoteModel}"/>
    [PublicAPI,
        Route("/Quoting/SalesQuote/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote by the custom key")]
    public partial class GetSalesQuoteByKey : ImplementsKeyBase, IReturn<SalesQuoteModel> { }

    /// <summary>A ServiceStack Route to check sales quote exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuote.View"),
        PublicAPI,
        Route("/Quoting/SalesQuote/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales quote exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuote.View"),
        PublicAPI,
        Route("/Quoting/SalesQuote/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales quote.</summary>
    /// <seealso cref="SalesQuoteModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuote.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuote/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales quote.")]
    public partial class CreateSalesQuote : SalesQuoteModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales quote.</summary>
    /// <seealso cref="SalesQuoteModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Quoting/SalesQuote/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales quote (as needed).")]
    public partial class UpsertSalesQuote : SalesQuoteModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales quote.</summary>
    /// <seealso cref="SalesQuoteModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuote.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuote/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales quote.")]
    public partial class UpdateSalesQuote : SalesQuoteModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales quote.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuote.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuote/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales quote by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuote.Deactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuote/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuote.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuote/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuote.Reactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuote/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuote.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuote/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales quote from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuote.Delete"),
        PublicAPI,
        Route("/Quoting/SalesQuote/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales quote from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales quote cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuote/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales quote calls.")]
    public class ClearSalesQuoteCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesQuoteServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesQuotes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuotes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesQuoteModel, SalesQuoteModel, ISalesQuoteSearchModel, SalesQuotePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesQuotes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuotesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesQuotesForConnect request)
        {
            return await Workflows.SalesQuotes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuotesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuotesDigest request)
        {
            return await Workflows.SalesQuotes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesQuoteByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesQuotes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesQuotes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesQuoteExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteExistsByID request)
        {
            return await Workflows.SalesQuotes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesQuoteExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteExistsByKey request)
        {
            return await Workflows.SalesQuotes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesQuote"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesQuote request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteDataAsync,
                    () => Workflows.SalesQuotes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesQuote"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesQuote request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteDataAsync,
                    () => Workflows.SalesQuotes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesQuote"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesQuote request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteDataAsync,
                    () => Workflows.SalesQuotes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteDataAsync,
                    () => Workflows.SalesQuotes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteDataAsync,
                    () => Workflows.SalesQuotes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteDataAsync,
                    () => Workflows.SalesQuotes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteDataAsync,
                    () => Workflows.SalesQuotes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteDataAsync,
                    () => Workflows.SalesQuotes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteDataAsync,
                    () => Workflows.SalesQuotes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesQuoteCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesQuoteCache request)
        {
            await ClearCachedSalesQuoteDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesQuoteDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesQuotes>(string.Empty),
                    UrnId.Create<GetSalesQuoteByID>(string.Empty),
                    UrnId.Create<GetSalesQuoteByKey>(string.Empty),
                    UrnId.Create<CheckSalesQuoteExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesQuoteExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesQuoteService : SalesQuoteServiceBase { }
}
