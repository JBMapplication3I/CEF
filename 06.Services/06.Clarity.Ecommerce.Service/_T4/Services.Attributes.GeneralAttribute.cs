// <autogenerated>
// <copyright file="GeneralAttributeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the general attribute service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of general attributes.</summary>
    /// <seealso cref="GeneralAttributeSearchModel"/>
    /// <seealso cref="IReturn{GeneralAttributePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Attributes/GeneralAttributes", "GET", Priority = 1,
            Summary = "Use to get a list of general attributes")]
    public partial class GetGeneralAttributes : GeneralAttributeSearchModel, IReturn<GeneralAttributePagedResults> { }

    /// <summary>A ServiceStack Route to get general attributes for connect.</summary>
    /// <seealso cref="GeneralAttributeSearchModel"/>
    /// <seealso cref="IReturn{List{GeneralAttributeModel}}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttribute.View"),
        PublicAPI,
        Route("/Attributes/GeneralAttributesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all general attributes")]
    public partial class GetGeneralAttributesForConnect : GeneralAttributeSearchModel, IReturn<List<GeneralAttributeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all general attributes.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttribute.View"),
        PublicAPI,
        Route("/Attributes/GeneralAttributesDigest", "GET",
            Summary = "Use to get a hash representing each general attributes")]
    public partial class GetGeneralAttributesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get general attribute.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{GeneralAttributeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Attributes/GeneralAttribute/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific general attribute")]
    public partial class GetGeneralAttributeByID : ImplementsIDBase, IReturn<GeneralAttributeModel> { }

    /// <summary>A ServiceStack Route to get general attribute.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{GeneralAttributeModel}"/>
    [PublicAPI,
        Route("/Attributes/GeneralAttribute/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific general attribute by the custom key")]
    public partial class GetGeneralAttributeByKey : ImplementsKeyBase, IReturn<GeneralAttributeModel> { }

    /// <summary>A ServiceStack Route to get general attribute.</summary>
    /// <seealso cref="IReturn{GeneralAttributeModel}"/>
    [PublicAPI,
        Route("/Attributes/GeneralAttribute/Name", "GET", Priority = 1,
            Summary = "Use to get a specific general attribute by the name")]
    public partial class GetGeneralAttributeByName : ImplementsNameBase, IReturn<GeneralAttributeModel> { }

    /// <summary>A ServiceStack Route to get general attribute.</summary>
    /// <seealso cref="IReturn{GeneralAttributeModel}"/>
    [PublicAPI,
        Route("/Attributes/GeneralAttribute/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific general attribute by the name")]
    public partial class GetGeneralAttributeByDisplayName : ImplementsDisplayNameBase, IReturn<GeneralAttributeModel> { }

    /// <summary>A ServiceStack Route to check general attribute exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttribute.View"),
        PublicAPI,
        Route("/Attributes/GeneralAttribute/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckGeneralAttributeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check general attribute exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttribute.View"),
        PublicAPI,
        Route("/Attributes/GeneralAttribute/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckGeneralAttributeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check general attribute exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttribute.View"),
        PublicAPI,
        Route("/Attributes/GeneralAttribute/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckGeneralAttributeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check general attribute exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttribute.View"),
        PublicAPI,
        Route("/Attributes/GeneralAttribute/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckGeneralAttributeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create general attribute.</summary>
    /// <seealso cref="GeneralAttributeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttribute.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/GeneralAttribute/Create", "POST", Priority = 1,
            Summary = "Use to create a new general attribute.")]
    public partial class CreateGeneralAttribute : GeneralAttributeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert general attribute.</summary>
    /// <seealso cref="GeneralAttributeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Attributes/GeneralAttribute/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing general attribute (as needed).")]
    public partial class UpsertGeneralAttribute : GeneralAttributeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update general attribute.</summary>
    /// <seealso cref="GeneralAttributeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttribute.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/GeneralAttribute/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing general attribute.")]
    public partial class UpdateGeneralAttribute : GeneralAttributeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate general attribute.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttribute.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/GeneralAttribute/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific general attribute from the system [Soft-Delete]")]
    public partial class DeactivateGeneralAttributeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate general attribute by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttribute.Deactivate"),
        PublicAPI,
        Route("/Attributes/GeneralAttribute/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific general attribute from the system [Soft-Delete]")]
    public partial class DeactivateGeneralAttributeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate general attribute.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttribute.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/GeneralAttribute/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific general attribute from the system [Restore from Soft-Delete]")]
    public partial class ReactivateGeneralAttributeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate general attribute by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttribute.Reactivate"),
        PublicAPI,
        Route("/Attributes/GeneralAttribute/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific general attribute from the system [Restore from Soft-Delete]")]
    public partial class ReactivateGeneralAttributeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete general attribute.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttribute.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Attributes/GeneralAttribute/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific general attribute from the system [Hard-Delete]")]
    public partial class DeleteGeneralAttributeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete general attribute by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Attributes.GeneralAttribute.Delete"),
        PublicAPI,
        Route("/Attributes/GeneralAttribute/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific general attribute from the system [Hard-Delete]")]
    public partial class DeleteGeneralAttributeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear general attribute cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Attributes/GeneralAttribute/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all general attribute calls.")]
    public class ClearGeneralAttributeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class GeneralAttributeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetGeneralAttributes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGeneralAttributes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IGeneralAttributeModel, GeneralAttributeModel, IGeneralAttributeSearchModel, GeneralAttributePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.GeneralAttributes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGeneralAttributesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetGeneralAttributesForConnect request)
        {
            return await Workflows.GeneralAttributes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGeneralAttributesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGeneralAttributesDigest request)
        {
            return await Workflows.GeneralAttributes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetGeneralAttributeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGeneralAttributeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.GeneralAttributes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGeneralAttributeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGeneralAttributeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.GeneralAttributes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGeneralAttributeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGeneralAttributeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.GeneralAttributes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGeneralAttributeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGeneralAttributeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.GeneralAttributes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckGeneralAttributeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGeneralAttributeExistsByID request)
        {
            return await Workflows.GeneralAttributes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckGeneralAttributeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGeneralAttributeExistsByKey request)
        {
            return await Workflows.GeneralAttributes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckGeneralAttributeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGeneralAttributeExistsByName request)
        {
            return await Workflows.GeneralAttributes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckGeneralAttributeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGeneralAttributeExistsByDisplayName request)
        {
            return await Workflows.GeneralAttributes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertGeneralAttribute"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertGeneralAttribute request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributeDataAsync,
                    () => Workflows.GeneralAttributes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateGeneralAttribute"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateGeneralAttribute request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributeDataAsync,
                    () => Workflows.GeneralAttributes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateGeneralAttribute"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateGeneralAttribute request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributeDataAsync,
                    () => Workflows.GeneralAttributes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateGeneralAttributeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateGeneralAttributeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributeDataAsync,
                    () => Workflows.GeneralAttributes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateGeneralAttributeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateGeneralAttributeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributeDataAsync,
                    () => Workflows.GeneralAttributes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateGeneralAttributeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateGeneralAttributeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributeDataAsync,
                    () => Workflows.GeneralAttributes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateGeneralAttributeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateGeneralAttributeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributeDataAsync,
                    () => Workflows.GeneralAttributes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteGeneralAttributeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteGeneralAttributeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributeDataAsync,
                    () => Workflows.GeneralAttributes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteGeneralAttributeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteGeneralAttributeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGeneralAttributeDataAsync,
                    () => Workflows.GeneralAttributes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearGeneralAttributeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearGeneralAttributeCache request)
        {
            await ClearCachedGeneralAttributeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedGeneralAttributeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetGeneralAttributes>(string.Empty),
                    UrnId.Create<GetGeneralAttributeByID>(string.Empty),
                    UrnId.Create<GetGeneralAttributeByKey>(string.Empty),
                    UrnId.Create<GetGeneralAttributeByName>(string.Empty),
                    UrnId.Create<CheckGeneralAttributeExistsByID>(string.Empty),
                    UrnId.Create<CheckGeneralAttributeExistsByKey>(string.Empty),
                    UrnId.Create<CheckGeneralAttributeExistsByName>(string.Empty),
                    UrnId.Create<CheckGeneralAttributeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class GeneralAttributeService : GeneralAttributeServiceBase { }
}
