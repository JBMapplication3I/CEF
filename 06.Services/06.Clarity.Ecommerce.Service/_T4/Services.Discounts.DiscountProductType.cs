// <autogenerated>
// <copyright file="DiscountProductTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount product type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discount product types.</summary>
    /// <seealso cref="DiscountProductTypeSearchModel"/>
    /// <seealso cref="IReturn{DiscountProductTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountProductTypes", "GET", Priority = 1,
            Summary = "Use to get a list of discount product types")]
    public partial class GetDiscountProductTypes : DiscountProductTypeSearchModel, IReturn<DiscountProductTypePagedResults> { }

    /// <summary>A ServiceStack Route to get discount product types for connect.</summary>
    /// <seealso cref="DiscountProductTypeSearchModel"/>
    /// <seealso cref="IReturn{List{DiscountProductTypeModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProductType.View"),
        PublicAPI,
        Route("/Discounts/DiscountProductTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discount product types")]
    public partial class GetDiscountProductTypesForConnect : DiscountProductTypeSearchModel, IReturn<List<DiscountProductTypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discount product types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProductType.View"),
        PublicAPI,
        Route("/Discounts/DiscountProductTypesDigest", "GET",
            Summary = "Use to get a hash representing each discount product types")]
    public partial class GetDiscountProductTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountProductTypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountProductType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount product type")]
    public partial class GetDiscountProductTypeByID : ImplementsIDBase, IReturn<DiscountProductTypeModel> { }

    /// <summary>A ServiceStack Route to get discount product type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountProductTypeModel}"/>
    [PublicAPI,
        Route("/Discounts/DiscountProductType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount product type by the custom key")]
    public partial class GetDiscountProductTypeByKey : ImplementsKeyBase, IReturn<DiscountProductTypeModel> { }

    /// <summary>A ServiceStack Route to check discount product type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProductType.View"),
        PublicAPI,
        Route("/Discounts/DiscountProductType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountProductTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount product type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProductType.View"),
        PublicAPI,
        Route("/Discounts/DiscountProductType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountProductTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount product type.</summary>
    /// <seealso cref="DiscountProductTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProductType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountProductType/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount product type.")]
    public partial class CreateDiscountProductType : DiscountProductTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount product type.</summary>
    /// <seealso cref="DiscountProductTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/DiscountProductType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount product type (as needed).")]
    public partial class UpsertDiscountProductType : DiscountProductTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount product type.</summary>
    /// <seealso cref="DiscountProductTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProductType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountProductType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount product type.")]
    public partial class UpdateDiscountProductType : DiscountProductTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProductType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountProductType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount product type from the system [Soft-Delete]")]
    public partial class DeactivateDiscountProductTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount product type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProductType.Deactivate"),
        PublicAPI,
        Route("/Discounts/DiscountProductType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount product type from the system [Soft-Delete]")]
    public partial class DeactivateDiscountProductTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProductType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountProductType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount product type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountProductTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount product type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProductType.Reactivate"),
        PublicAPI,
        Route("/Discounts/DiscountProductType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount product type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountProductTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProductType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountProductType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount product type from the system [Hard-Delete]")]
    public partial class DeleteDiscountProductTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount product type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountProductType.Delete"),
        PublicAPI,
        Route("/Discounts/DiscountProductType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount product type from the system [Hard-Delete]")]
    public partial class DeleteDiscountProductTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount product type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountProductType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount product type calls.")]
    public class ClearDiscountProductTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountProductTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscountProductTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountProductTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountProductTypeModel, DiscountProductTypeModel, IDiscountProductTypeSearchModel, DiscountProductTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DiscountProductTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountProductTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountProductTypesForConnect request)
        {
            return await Workflows.DiscountProductTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountProductTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountProductTypesDigest request)
        {
            return await Workflows.DiscountProductTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountProductTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DiscountProductTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountProductTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DiscountProductTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountProductTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountProductTypeExistsByID request)
        {
            return await Workflows.DiscountProductTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountProductTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountProductTypeExistsByKey request)
        {
            return await Workflows.DiscountProductTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscountProductType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscountProductType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductTypeDataAsync,
                    () => Workflows.DiscountProductTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscountProductType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscountProductType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductTypeDataAsync,
                    () => Workflows.DiscountProductTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscountProductType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscountProductType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductTypeDataAsync,
                    () => Workflows.DiscountProductTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountProductTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductTypeDataAsync,
                    () => Workflows.DiscountProductTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountProductTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductTypeDataAsync,
                    () => Workflows.DiscountProductTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountProductTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductTypeDataAsync,
                    () => Workflows.DiscountProductTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountProductTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductTypeDataAsync,
                    () => Workflows.DiscountProductTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountProductTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductTypeDataAsync,
                    () => Workflows.DiscountProductTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountProductTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountProductTypeDataAsync,
                    () => Workflows.DiscountProductTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountProductTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountProductTypeCache request)
        {
            await ClearCachedDiscountProductTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountProductTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscountProductTypes>(string.Empty),
                    UrnId.Create<GetDiscountProductTypeByID>(string.Empty),
                    UrnId.Create<GetDiscountProductTypeByKey>(string.Empty),
                    UrnId.Create<CheckDiscountProductTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountProductTypeExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountProductTypeService : DiscountProductTypeServiceBase { }
}
