// <autogenerated>
// <copyright file="RegionLanguageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the region language service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of region languages.</summary>
    /// <seealso cref="RegionLanguageSearchModel"/>
    /// <seealso cref="IReturn{RegionLanguagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/RegionLanguages", "GET", Priority = 1,
            Summary = "Use to get a list of region languages")]
    public partial class GetRegionLanguages : RegionLanguageSearchModel, IReturn<RegionLanguagePagedResults> { }

    /// <summary>A ServiceStack Route to get region languages for connect.</summary>
    /// <seealso cref="RegionLanguageSearchModel"/>
    /// <seealso cref="IReturn{List{RegionLanguageModel}}"/>
    [Authenticate, RequiredPermission("Geography.RegionLanguage.View"),
        PublicAPI,
        Route("/Geography/RegionLanguagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all region languages")]
    public partial class GetRegionLanguagesForConnect : RegionLanguageSearchModel, IReturn<List<RegionLanguageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all region languages.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.RegionLanguage.View"),
        PublicAPI,
        Route("/Geography/RegionLanguagesDigest", "GET",
            Summary = "Use to get a hash representing each region languages")]
    public partial class GetRegionLanguagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get region language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{RegionLanguageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/RegionLanguage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific region language")]
    public partial class GetRegionLanguageByID : ImplementsIDBase, IReturn<RegionLanguageModel> { }

    /// <summary>A ServiceStack Route to get region language.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{RegionLanguageModel}"/>
    [PublicAPI,
        Route("/Geography/RegionLanguage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific region language by the custom key")]
    public partial class GetRegionLanguageByKey : ImplementsKeyBase, IReturn<RegionLanguageModel> { }

    /// <summary>A ServiceStack Route to check region language exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.RegionLanguage.View"),
        PublicAPI,
        Route("/Geography/RegionLanguage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckRegionLanguageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check region language exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.RegionLanguage.View"),
        PublicAPI,
        Route("/Geography/RegionLanguage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckRegionLanguageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create region language.</summary>
    /// <seealso cref="RegionLanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.RegionLanguage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionLanguage/Create", "POST", Priority = 1,
            Summary = "Use to create a new region language.")]
    public partial class CreateRegionLanguage : RegionLanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert region language.</summary>
    /// <seealso cref="RegionLanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/RegionLanguage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing region language (as needed).")]
    public partial class UpsertRegionLanguage : RegionLanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update region language.</summary>
    /// <seealso cref="RegionLanguageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.RegionLanguage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionLanguage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing region language.")]
    public partial class UpdateRegionLanguage : RegionLanguageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate region language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionLanguage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionLanguage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific region language from the system [Soft-Delete]")]
    public partial class DeactivateRegionLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate region language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionLanguage.Deactivate"),
        PublicAPI,
        Route("/Geography/RegionLanguage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific region language from the system [Soft-Delete]")]
    public partial class DeactivateRegionLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate region language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionLanguage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionLanguage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific region language from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRegionLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate region language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionLanguage.Reactivate"),
        PublicAPI,
        Route("/Geography/RegionLanguage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific region language from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRegionLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete region language.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionLanguage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionLanguage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific region language from the system [Hard-Delete]")]
    public partial class DeleteRegionLanguageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete region language by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionLanguage.Delete"),
        PublicAPI,
        Route("/Geography/RegionLanguage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific region language from the system [Hard-Delete]")]
    public partial class DeleteRegionLanguageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear region language cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/RegionLanguage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all region language calls.")]
    public class ClearRegionLanguageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class RegionLanguageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetRegionLanguages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionLanguages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IRegionLanguageModel, RegionLanguageModel, IRegionLanguageSearchModel, RegionLanguagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.RegionLanguages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRegionLanguagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetRegionLanguagesForConnect request)
        {
            return await Workflows.RegionLanguages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRegionLanguagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionLanguagesDigest request)
        {
            return await Workflows.RegionLanguages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetRegionLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionLanguageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.RegionLanguages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRegionLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionLanguageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.RegionLanguages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckRegionLanguageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRegionLanguageExistsByID request)
        {
            return await Workflows.RegionLanguages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRegionLanguageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRegionLanguageExistsByKey request)
        {
            return await Workflows.RegionLanguages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertRegionLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertRegionLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionLanguageDataAsync,
                    () => Workflows.RegionLanguages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateRegionLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateRegionLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionLanguageDataAsync,
                    () => Workflows.RegionLanguages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateRegionLanguage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateRegionLanguage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionLanguageDataAsync,
                    () => Workflows.RegionLanguages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateRegionLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRegionLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionLanguageDataAsync,
                    () => Workflows.RegionLanguages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateRegionLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRegionLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionLanguageDataAsync,
                    () => Workflows.RegionLanguages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateRegionLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRegionLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionLanguageDataAsync,
                    () => Workflows.RegionLanguages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateRegionLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRegionLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionLanguageDataAsync,
                    () => Workflows.RegionLanguages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteRegionLanguageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRegionLanguageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionLanguageDataAsync,
                    () => Workflows.RegionLanguages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteRegionLanguageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRegionLanguageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionLanguageDataAsync,
                    () => Workflows.RegionLanguages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearRegionLanguageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearRegionLanguageCache request)
        {
            await ClearCachedRegionLanguageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedRegionLanguageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetRegionLanguages>(string.Empty),
                    UrnId.Create<GetRegionLanguageByID>(string.Empty),
                    UrnId.Create<GetRegionLanguageByKey>(string.Empty),
                    UrnId.Create<CheckRegionLanguageExistsByID>(string.Empty),
                    UrnId.Create<CheckRegionLanguageExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class RegionLanguageService : RegionLanguageServiceBase { }
}
