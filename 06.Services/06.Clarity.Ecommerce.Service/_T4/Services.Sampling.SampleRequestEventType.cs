// <autogenerated>
// <copyright file="SampleRequestEventTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sample request event type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sample request event types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{SampleRequestEventTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestEventTypes", "GET", Priority = 1,
            Summary = "Use to get a list of sample request event types")]
    public partial class GetSampleRequestEventTypes : TypeSearchModel, IReturn<SampleRequestEventTypePagedResults> { }

    /// <summary>A ServiceStack Route to get sample request event types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEventType.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestEventTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sample request event types")]
    public partial class GetSampleRequestEventTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sample request event types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEventType.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestEventTypesDigest", "GET",
            Summary = "Use to get a hash representing each sample request event types")]
    public partial class GetSampleRequestEventTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sample request event type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestEventType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sample request event type")]
    public partial class GetSampleRequestEventTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get sample request event type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequestEventType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sample request event type by the custom key")]
    public partial class GetSampleRequestEventTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get sample request event type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequestEventType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sample request event type by the name")]
    public partial class GetSampleRequestEventTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get sample request event type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequestEventType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific sample request event type by the name")]
    public partial class GetSampleRequestEventTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check sample request event type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEventType.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestEventType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestEventTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request event type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEventType.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestEventType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestEventTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request event type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEventType.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestEventType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestEventTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request event type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEventType.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestEventType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestEventTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sample request event type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEventType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestEventType/Create", "POST", Priority = 1,
            Summary = "Use to create a new sample request event type.")]
    public partial class CreateSampleRequestEventType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sample request event type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Sampling/SampleRequestEventType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sample request event type (as needed).")]
    public partial class UpsertSampleRequestEventType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sample request event type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEventType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestEventType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sample request event type.")]
    public partial class UpdateSampleRequestEventType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sample request event type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEventType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestEventType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sample request event type from the system [Soft-Delete]")]
    public partial class DeactivateSampleRequestEventTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sample request event type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEventType.Deactivate"),
        PublicAPI,
        Route("/Sampling/SampleRequestEventType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sample request event type from the system [Soft-Delete]")]
    public partial class DeactivateSampleRequestEventTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sample request event type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEventType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestEventType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sample request event type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSampleRequestEventTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sample request event type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEventType.Reactivate"),
        PublicAPI,
        Route("/Sampling/SampleRequestEventType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sample request event type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSampleRequestEventTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sample request event type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEventType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestEventType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sample request event type from the system [Hard-Delete]")]
    public partial class DeleteSampleRequestEventTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sample request event type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestEventType.Delete"),
        PublicAPI,
        Route("/Sampling/SampleRequestEventType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sample request event type from the system [Hard-Delete]")]
    public partial class DeleteSampleRequestEventTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sample request event type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestEventType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sample request event type calls.")]
    public class ClearSampleRequestEventTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SampleRequestEventTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSampleRequestEventTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestEventTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, SampleRequestEventTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SampleRequestEventTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestEventTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSampleRequestEventTypesForConnect request)
        {
            return await Workflows.SampleRequestEventTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestEventTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestEventTypesDigest request)
        {
            return await Workflows.SampleRequestEventTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSampleRequestEventTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestEventTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SampleRequestEventTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestEventTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestEventTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SampleRequestEventTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestEventTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestEventTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SampleRequestEventTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestEventTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestEventTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.SampleRequestEventTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSampleRequestEventTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestEventTypeExistsByID request)
        {
            return await Workflows.SampleRequestEventTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestEventTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestEventTypeExistsByKey request)
        {
            return await Workflows.SampleRequestEventTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestEventTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestEventTypeExistsByName request)
        {
            return await Workflows.SampleRequestEventTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestEventTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestEventTypeExistsByDisplayName request)
        {
            return await Workflows.SampleRequestEventTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSampleRequestEventType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSampleRequestEventType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventTypeDataAsync,
                    () => Workflows.SampleRequestEventTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSampleRequestEventType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSampleRequestEventType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventTypeDataAsync,
                    () => Workflows.SampleRequestEventTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSampleRequestEventType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSampleRequestEventType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventTypeDataAsync,
                    () => Workflows.SampleRequestEventTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSampleRequestEventTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSampleRequestEventTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventTypeDataAsync,
                    () => Workflows.SampleRequestEventTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSampleRequestEventTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSampleRequestEventTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventTypeDataAsync,
                    () => Workflows.SampleRequestEventTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSampleRequestEventTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSampleRequestEventTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventTypeDataAsync,
                    () => Workflows.SampleRequestEventTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSampleRequestEventTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSampleRequestEventTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventTypeDataAsync,
                    () => Workflows.SampleRequestEventTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSampleRequestEventTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSampleRequestEventTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventTypeDataAsync,
                    () => Workflows.SampleRequestEventTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSampleRequestEventTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSampleRequestEventTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestEventTypeDataAsync,
                    () => Workflows.SampleRequestEventTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSampleRequestEventTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSampleRequestEventTypeCache request)
        {
            await ClearCachedSampleRequestEventTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSampleRequestEventTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSampleRequestEventTypes>(string.Empty),
                    UrnId.Create<GetSampleRequestEventTypeByID>(string.Empty),
                    UrnId.Create<GetSampleRequestEventTypeByKey>(string.Empty),
                    UrnId.Create<GetSampleRequestEventTypeByName>(string.Empty),
                    UrnId.Create<CheckSampleRequestEventTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckSampleRequestEventTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckSampleRequestEventTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckSampleRequestEventTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SampleRequestEventTypeService : SampleRequestEventTypeServiceBase { }
}
