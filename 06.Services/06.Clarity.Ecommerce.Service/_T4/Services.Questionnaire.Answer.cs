// <autogenerated>
// <copyright file="AnswerService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the answer service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of answers.</summary>
    /// <seealso cref="AnswerSearchModel"/>
    /// <seealso cref="IReturn{AnswerPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Questionnaire/Answers", "GET", Priority = 1,
            Summary = "Use to get a list of answers")]
    public partial class GetAnswers : AnswerSearchModel, IReturn<AnswerPagedResults> { }

    /// <summary>A ServiceStack Route to get answers for connect.</summary>
    /// <seealso cref="AnswerSearchModel"/>
    /// <seealso cref="IReturn{List{AnswerModel}}"/>
    [Authenticate, RequiredPermission("Questionnaire.Answer.View"),
        PublicAPI,
        Route("/Questionnaire/AnswersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all answers")]
    public partial class GetAnswersForConnect : AnswerSearchModel, IReturn<List<AnswerModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all answers.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Questionnaire.Answer.View"),
        PublicAPI,
        Route("/Questionnaire/AnswersDigest", "GET",
            Summary = "Use to get a hash representing each answers")]
    public partial class GetAnswersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get answer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AnswerModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Questionnaire/Answer/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific answer")]
    public partial class GetAnswerByID : ImplementsIDBase, IReturn<AnswerModel> { }

    /// <summary>A ServiceStack Route to get answer.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AnswerModel}"/>
    [PublicAPI,
        Route("/Questionnaire/Answer/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific answer by the custom key")]
    public partial class GetAnswerByKey : ImplementsKeyBase, IReturn<AnswerModel> { }

    /// <summary>A ServiceStack Route to check answer exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Questionnaire.Answer.View"),
        PublicAPI,
        Route("/Questionnaire/Answer/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAnswerExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check answer exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Questionnaire.Answer.View"),
        PublicAPI,
        Route("/Questionnaire/Answer/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAnswerExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create answer.</summary>
    /// <seealso cref="AnswerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Questionnaire.Answer.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/Answer/Create", "POST", Priority = 1,
            Summary = "Use to create a new answer.")]
    public partial class CreateAnswer : AnswerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert answer.</summary>
    /// <seealso cref="AnswerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Questionnaire/Answer/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing answer (as needed).")]
    public partial class UpsertAnswer : AnswerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update answer.</summary>
    /// <seealso cref="AnswerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Questionnaire.Answer.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/Answer/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing answer.")]
    public partial class UpdateAnswer : AnswerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate answer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.Answer.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/Answer/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific answer from the system [Soft-Delete]")]
    public partial class DeactivateAnswerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate answer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.Answer.Deactivate"),
        PublicAPI,
        Route("/Questionnaire/Answer/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific answer from the system [Soft-Delete]")]
    public partial class DeactivateAnswerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate answer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.Answer.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/Answer/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific answer from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAnswerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate answer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.Answer.Reactivate"),
        PublicAPI,
        Route("/Questionnaire/Answer/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific answer from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAnswerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete answer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.Answer.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/Answer/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific answer from the system [Hard-Delete]")]
    public partial class DeleteAnswerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete answer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.Answer.Delete"),
        PublicAPI,
        Route("/Questionnaire/Answer/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific answer from the system [Hard-Delete]")]
    public partial class DeleteAnswerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear answer cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Questionnaire/Answer/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all answer calls.")]
    public class ClearAnswerCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AnswerServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAnswers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAnswers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAnswerModel, AnswerModel, IAnswerSearchModel, AnswerPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Answers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAnswersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAnswersForConnect request)
        {
            return await Workflows.Answers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAnswersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAnswersDigest request)
        {
            return await Workflows.Answers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAnswerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAnswerByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Answers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAnswerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAnswerByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Answers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAnswerExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAnswerExistsByID request)
        {
            return await Workflows.Answers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAnswerExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAnswerExistsByKey request)
        {
            return await Workflows.Answers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAnswer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAnswer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAnswerDataAsync,
                    () => Workflows.Answers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAnswer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAnswer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAnswerDataAsync,
                    () => Workflows.Answers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAnswer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAnswer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAnswerDataAsync,
                    () => Workflows.Answers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAnswerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAnswerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAnswerDataAsync,
                    () => Workflows.Answers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAnswerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAnswerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAnswerDataAsync,
                    () => Workflows.Answers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAnswerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAnswerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAnswerDataAsync,
                    () => Workflows.Answers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAnswerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAnswerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAnswerDataAsync,
                    () => Workflows.Answers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAnswerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAnswerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAnswerDataAsync,
                    () => Workflows.Answers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAnswerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAnswerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAnswerDataAsync,
                    () => Workflows.Answers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAnswerCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAnswerCache request)
        {
            await ClearCachedAnswerDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAnswerDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAnswers>(string.Empty),
                    UrnId.Create<GetAnswerByID>(string.Empty),
                    UrnId.Create<GetAnswerByKey>(string.Empty),
                    UrnId.Create<CheckAnswerExistsByID>(string.Empty),
                    UrnId.Create<CheckAnswerExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AnswerService : AnswerServiceBase { }
}
