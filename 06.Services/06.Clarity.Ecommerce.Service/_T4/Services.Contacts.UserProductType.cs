// <autogenerated>
// <copyright file="UserProductTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the user product type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of user product types.</summary>
    /// <seealso cref="UserProductTypeSearchModel"/>
    /// <seealso cref="IReturn{UserProductTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserProductTypes", "GET", Priority = 1,
            Summary = "Use to get a list of user product types")]
    public partial class GetUserProductTypes : UserProductTypeSearchModel, IReturn<UserProductTypePagedResults> { }

    /// <summary>A ServiceStack Route to get user product types for connect.</summary>
    /// <seealso cref="UserProductTypeSearchModel"/>
    /// <seealso cref="IReturn{List{UserProductTypeModel}}"/>
    [Authenticate, RequiredPermission("Contacts.UserProductType.View"),
        PublicAPI,
        Route("/Contacts/UserProductTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all user product types")]
    public partial class GetUserProductTypesForConnect : UserProductTypeSearchModel, IReturn<List<UserProductTypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all user product types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Contacts.UserProductType.View"),
        PublicAPI,
        Route("/Contacts/UserProductTypesDigest", "GET",
            Summary = "Use to get a hash representing each user product types")]
    public partial class GetUserProductTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get user product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{UserProductTypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserProductType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific user product type")]
    public partial class GetUserProductTypeByID : ImplementsIDBase, IReturn<UserProductTypeModel> { }

    /// <summary>A ServiceStack Route to get user product type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{UserProductTypeModel}"/>
    [PublicAPI,
        Route("/Contacts/UserProductType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific user product type by the custom key")]
    public partial class GetUserProductTypeByKey : ImplementsKeyBase, IReturn<UserProductTypeModel> { }

    /// <summary>A ServiceStack Route to check user product type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserProductType.View"),
        PublicAPI,
        Route("/Contacts/UserProductType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckUserProductTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user product type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserProductType.View"),
        PublicAPI,
        Route("/Contacts/UserProductType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckUserProductTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create user product type.</summary>
    /// <seealso cref="UserProductTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.UserProductType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserProductType/Create", "POST", Priority = 1,
            Summary = "Use to create a new user product type.")]
    public partial class CreateUserProductType : UserProductTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert user product type.</summary>
    /// <seealso cref="UserProductTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Contacts/UserProductType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing user product type (as needed).")]
    public partial class UpsertUserProductType : UserProductTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update user product type.</summary>
    /// <seealso cref="UserProductTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.UserProductType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserProductType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing user product type.")]
    public partial class UpdateUserProductType : UserProductTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate user product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserProductType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserProductType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user product type from the system [Soft-Delete]")]
    public partial class DeactivateUserProductTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate user product type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserProductType.Deactivate"),
        PublicAPI,
        Route("/Contacts/UserProductType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user product type from the system [Soft-Delete]")]
    public partial class DeactivateUserProductTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserProductType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserProductType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user product type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserProductTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user product type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserProductType.Reactivate"),
        PublicAPI,
        Route("/Contacts/UserProductType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user product type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserProductTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserProductType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserProductType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific user product type from the system [Hard-Delete]")]
    public partial class DeleteUserProductTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user product type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserProductType.Delete"),
        PublicAPI,
        Route("/Contacts/UserProductType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific user product type from the system [Hard-Delete]")]
    public partial class DeleteUserProductTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear user product type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserProductType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all user product type calls.")]
    public class ClearUserProductTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class UserProductTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetUserProductTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserProductTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IUserProductTypeModel, UserProductTypeModel, IUserProductTypeSearchModel, UserProductTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.UserProductTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserProductTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetUserProductTypesForConnect request)
        {
            return await Workflows.UserProductTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserProductTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserProductTypesDigest request)
        {
            return await Workflows.UserProductTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetUserProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserProductTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.UserProductTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserProductTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.UserProductTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckUserProductTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserProductTypeExistsByID request)
        {
            return await Workflows.UserProductTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserProductTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserProductTypeExistsByKey request)
        {
            return await Workflows.UserProductTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertUserProductType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertUserProductType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserProductTypeDataAsync,
                    () => Workflows.UserProductTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateUserProductType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateUserProductType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserProductTypeDataAsync,
                    () => Workflows.UserProductTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateUserProductType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateUserProductType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserProductTypeDataAsync,
                    () => Workflows.UserProductTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateUserProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserProductTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserProductTypeDataAsync,
                    () => Workflows.UserProductTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateUserProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserProductTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserProductTypeDataAsync,
                    () => Workflows.UserProductTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateUserProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserProductTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserProductTypeDataAsync,
                    () => Workflows.UserProductTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateUserProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserProductTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserProductTypeDataAsync,
                    () => Workflows.UserProductTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteUserProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserProductTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserProductTypeDataAsync,
                    () => Workflows.UserProductTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteUserProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserProductTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserProductTypeDataAsync,
                    () => Workflows.UserProductTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearUserProductTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearUserProductTypeCache request)
        {
            await ClearCachedUserProductTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedUserProductTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetUserProductTypes>(string.Empty),
                    UrnId.Create<GetUserProductTypeByID>(string.Empty),
                    UrnId.Create<GetUserProductTypeByKey>(string.Empty),
                    UrnId.Create<CheckUserProductTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckUserProductTypeExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class UserProductTypeService : UserProductTypeServiceBase { }
}
