// <autogenerated>
// <copyright file="GroupService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the group service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of groups.</summary>
    /// <seealso cref="GroupSearchModel"/>
    /// <seealso cref="IReturn{GroupPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Groups/Groups", "GET", Priority = 1,
            Summary = "Use to get a list of groups")]
    public partial class GetGroups : GroupSearchModel, IReturn<GroupPagedResults> { }

    /// <summary>A ServiceStack Route to get groups for connect.</summary>
    /// <seealso cref="GroupSearchModel"/>
    /// <seealso cref="IReturn{List{GroupModel}}"/>
    [Authenticate, RequiredPermission("Groups.Group.View"),
        PublicAPI,
        Route("/Groups/GroupsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all groups")]
    public partial class GetGroupsForConnect : GroupSearchModel, IReturn<List<GroupModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all groups.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Groups.Group.View"),
        PublicAPI,
        Route("/Groups/GroupsDigest", "GET",
            Summary = "Use to get a hash representing each groups")]
    public partial class GetGroupsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{GroupModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Groups/Group/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific group")]
    public partial class GetGroupByID : ImplementsIDBase, IReturn<GroupModel> { }

    /// <summary>A ServiceStack Route to get group.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{GroupModel}"/>
    [PublicAPI,
        Route("/Groups/Group/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific group by the custom key")]
    public partial class GetGroupByKey : ImplementsKeyBase, IReturn<GroupModel> { }

    /// <summary>A ServiceStack Route to get group.</summary>
    /// <seealso cref="IReturn{GroupModel}"/>
    [PublicAPI,
        Route("/Groups/Group/Name", "GET", Priority = 1,
            Summary = "Use to get a specific group by the name")]
    public partial class GetGroupByName : ImplementsNameBase, IReturn<GroupModel> { }

    /// <summary>A ServiceStack Route to check group exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Groups.Group.View"),
        PublicAPI,
        Route("/Groups/Group/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckGroupExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check group exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Groups.Group.View"),
        PublicAPI,
        Route("/Groups/Group/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckGroupExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check group exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Groups.Group.View"),
        PublicAPI,
        Route("/Groups/Group/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckGroupExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create group.</summary>
    /// <seealso cref="GroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Groups.Group.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/Group/Create", "POST", Priority = 1,
            Summary = "Use to create a new group.")]
    public partial class CreateGroup : GroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert group.</summary>
    /// <seealso cref="GroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Groups/Group/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing group (as needed).")]
    public partial class UpsertGroup : GroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update group.</summary>
    /// <seealso cref="GroupModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Groups.Group.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/Group/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing group.")]
    public partial class UpdateGroup : GroupModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.Group.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/Group/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific group from the system [Soft-Delete]")]
    public partial class DeactivateGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.Group.Deactivate"),
        PublicAPI,
        Route("/Groups/Group/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific group from the system [Soft-Delete]")]
    public partial class DeactivateGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.Group.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/Group/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific group from the system [Restore from Soft-Delete]")]
    public partial class ReactivateGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.Group.Reactivate"),
        PublicAPI,
        Route("/Groups/Group/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific group from the system [Restore from Soft-Delete]")]
    public partial class ReactivateGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete group.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.Group.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Groups/Group/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific group from the system [Hard-Delete]")]
    public partial class DeleteGroupByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete group by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Groups.Group.Delete"),
        PublicAPI,
        Route("/Groups/Group/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific group from the system [Hard-Delete]")]
    public partial class DeleteGroupByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear group cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Groups/Group/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all group calls.")]
    public class ClearGroupCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class GroupServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetGroups"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroups request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IGroupModel, GroupModel, IGroupSearchModel, GroupPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Groups)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetGroupsForConnect request)
        {
            return await Workflows.Groups.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupsDigest request)
        {
            return await Workflows.Groups.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Groups, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Groups, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetGroupByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetGroupByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Groups, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckGroupExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGroupExistsByID request)
        {
            return await Workflows.Groups.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckGroupExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGroupExistsByKey request)
        {
            return await Workflows.Groups.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckGroupExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckGroupExistsByName request)
        {
            return await Workflows.Groups.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupDataAsync,
                    () => Workflows.Groups.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupDataAsync,
                    () => Workflows.Groups.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateGroup"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateGroup request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupDataAsync,
                    () => Workflows.Groups.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupDataAsync,
                    () => Workflows.Groups.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupDataAsync,
                    () => Workflows.Groups.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupDataAsync,
                    () => Workflows.Groups.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupDataAsync,
                    () => Workflows.Groups.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteGroupByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteGroupByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupDataAsync,
                    () => Workflows.Groups.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteGroupByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteGroupByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedGroupDataAsync,
                    () => Workflows.Groups.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearGroupCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearGroupCache request)
        {
            await ClearCachedGroupDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedGroupDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetGroups>(string.Empty),
                    UrnId.Create<GetGroupByID>(string.Empty),
                    UrnId.Create<GetGroupByKey>(string.Empty),
                    UrnId.Create<GetGroupByName>(string.Empty),
                    UrnId.Create<CheckGroupExistsByID>(string.Empty),
                    UrnId.Create<CheckGroupExistsByKey>(string.Empty),
                    UrnId.Create<CheckGroupExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class GroupService : GroupServiceBase { }
}
