// <autogenerated>
// <copyright file="ZoneTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the zone type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of zone types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{ZoneTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/ZoneTypes", "GET", Priority = 1,
            Summary = "Use to get a list of zone types")]
    public partial class GetZoneTypes : TypeSearchModel, IReturn<ZoneTypePagedResults> { }

    /// <summary>A ServiceStack Route to get zone types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneType.View"),
        PublicAPI,
        Route("/Advertising/ZoneTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all zone types")]
    public partial class GetZoneTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all zone types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneType.View"),
        PublicAPI,
        Route("/Advertising/ZoneTypesDigest", "GET",
            Summary = "Use to get a hash representing each zone types")]
    public partial class GetZoneTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get zone type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/ZoneType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific zone type")]
    public partial class GetZoneTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get zone type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Advertising/ZoneType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific zone type by the custom key")]
    public partial class GetZoneTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get zone type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Advertising/ZoneType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific zone type by the name")]
    public partial class GetZoneTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get zone type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Advertising/ZoneType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific zone type by the name")]
    public partial class GetZoneTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check zone type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneType.View"),
        PublicAPI,
        Route("/Advertising/ZoneType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckZoneTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check zone type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneType.View"),
        PublicAPI,
        Route("/Advertising/ZoneType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckZoneTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check zone type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneType.View"),
        PublicAPI,
        Route("/Advertising/ZoneType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckZoneTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check zone type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneType.View"),
        PublicAPI,
        Route("/Advertising/ZoneType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckZoneTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create zone type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/ZoneType/Create", "POST", Priority = 1,
            Summary = "Use to create a new zone type.")]
    public partial class CreateZoneType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert zone type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Advertising/ZoneType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing zone type (as needed).")]
    public partial class UpsertZoneType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update zone type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/ZoneType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing zone type.")]
    public partial class UpdateZoneType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate zone type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/ZoneType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific zone type from the system [Soft-Delete]")]
    public partial class DeactivateZoneTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate zone type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneType.Deactivate"),
        PublicAPI,
        Route("/Advertising/ZoneType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific zone type from the system [Soft-Delete]")]
    public partial class DeactivateZoneTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate zone type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/ZoneType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific zone type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateZoneTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate zone type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneType.Reactivate"),
        PublicAPI,
        Route("/Advertising/ZoneType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific zone type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateZoneTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete zone type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/ZoneType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific zone type from the system [Hard-Delete]")]
    public partial class DeleteZoneTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete zone type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.ZoneType.Delete"),
        PublicAPI,
        Route("/Advertising/ZoneType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific zone type from the system [Hard-Delete]")]
    public partial class DeleteZoneTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear zone type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/ZoneType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all zone type calls.")]
    public class ClearZoneTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ZoneTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetZoneTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZoneTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, ZoneTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ZoneTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetZoneTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetZoneTypesForConnect request)
        {
            return await Workflows.ZoneTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetZoneTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZoneTypesDigest request)
        {
            return await Workflows.ZoneTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetZoneTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZoneTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ZoneTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetZoneTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZoneTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ZoneTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetZoneTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZoneTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ZoneTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetZoneTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZoneTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.ZoneTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckZoneTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckZoneTypeExistsByID request)
        {
            return await Workflows.ZoneTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckZoneTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckZoneTypeExistsByKey request)
        {
            return await Workflows.ZoneTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckZoneTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckZoneTypeExistsByName request)
        {
            return await Workflows.ZoneTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckZoneTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckZoneTypeExistsByDisplayName request)
        {
            return await Workflows.ZoneTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertZoneType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertZoneType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneTypeDataAsync,
                    () => Workflows.ZoneTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateZoneType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateZoneType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneTypeDataAsync,
                    () => Workflows.ZoneTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateZoneType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateZoneType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneTypeDataAsync,
                    () => Workflows.ZoneTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateZoneTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateZoneTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneTypeDataAsync,
                    () => Workflows.ZoneTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateZoneTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateZoneTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneTypeDataAsync,
                    () => Workflows.ZoneTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateZoneTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateZoneTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneTypeDataAsync,
                    () => Workflows.ZoneTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateZoneTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateZoneTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneTypeDataAsync,
                    () => Workflows.ZoneTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteZoneTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteZoneTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneTypeDataAsync,
                    () => Workflows.ZoneTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteZoneTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteZoneTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZoneTypeDataAsync,
                    () => Workflows.ZoneTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearZoneTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearZoneTypeCache request)
        {
            await ClearCachedZoneTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedZoneTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetZoneTypes>(string.Empty),
                    UrnId.Create<GetZoneTypeByID>(string.Empty),
                    UrnId.Create<GetZoneTypeByKey>(string.Empty),
                    UrnId.Create<GetZoneTypeByName>(string.Empty),
                    UrnId.Create<CheckZoneTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckZoneTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckZoneTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckZoneTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ZoneTypeService : ZoneTypeServiceBase { }
}
