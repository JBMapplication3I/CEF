// <autogenerated>
// <copyright file="SalesOrderSalesInvoiceService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales order sales invoice service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales order sales invoices.</summary>
    /// <seealso cref="SalesOrderSalesInvoiceSearchModel"/>
    /// <seealso cref="IReturn{SalesOrderSalesInvoicePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Invoicing/SalesOrderSalesInvoices", "GET", Priority = 1,
            Summary = "Use to get a list of sales order sales invoices")]
    public partial class GetSalesOrderSalesInvoices : SalesOrderSalesInvoiceSearchModel, IReturn<SalesOrderSalesInvoicePagedResults> { }

    /// <summary>A ServiceStack Route to get sales order sales invoices for connect.</summary>
    /// <seealso cref="SalesOrderSalesInvoiceSearchModel"/>
    /// <seealso cref="IReturn{List{SalesOrderSalesInvoiceModel}}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesOrderSalesInvoice.View"),
        PublicAPI,
        Route("/Invoicing/SalesOrderSalesInvoicesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales order sales invoices")]
    public partial class GetSalesOrderSalesInvoicesForConnect : SalesOrderSalesInvoiceSearchModel, IReturn<List<SalesOrderSalesInvoiceModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales order sales invoices.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesOrderSalesInvoice.View"),
        PublicAPI,
        Route("/Invoicing/SalesOrderSalesInvoicesDigest", "GET",
            Summary = "Use to get a hash representing each sales order sales invoices")]
    public partial class GetSalesOrderSalesInvoicesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales order sales invoice.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesOrderSalesInvoiceModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Invoicing/SalesOrderSalesInvoice/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order sales invoice")]
    public partial class GetSalesOrderSalesInvoiceByID : ImplementsIDBase, IReturn<SalesOrderSalesInvoiceModel> { }

    /// <summary>A ServiceStack Route to get sales order sales invoice.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesOrderSalesInvoiceModel}"/>
    [PublicAPI,
        Route("/Invoicing/SalesOrderSalesInvoice/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order sales invoice by the custom key")]
    public partial class GetSalesOrderSalesInvoiceByKey : ImplementsKeyBase, IReturn<SalesOrderSalesInvoiceModel> { }

    /// <summary>A ServiceStack Route to check sales order sales invoice exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesOrderSalesInvoice.View"),
        PublicAPI,
        Route("/Invoicing/SalesOrderSalesInvoice/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderSalesInvoiceExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales order sales invoice exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesOrderSalesInvoice.View"),
        PublicAPI,
        Route("/Invoicing/SalesOrderSalesInvoice/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderSalesInvoiceExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales order sales invoice.</summary>
    /// <seealso cref="SalesOrderSalesInvoiceModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesOrderSalesInvoice.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesOrderSalesInvoice/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales order sales invoice.")]
    public partial class CreateSalesOrderSalesInvoice : SalesOrderSalesInvoiceModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales order sales invoice.</summary>
    /// <seealso cref="SalesOrderSalesInvoiceModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Invoicing/SalesOrderSalesInvoice/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales order sales invoice (as needed).")]
    public partial class UpsertSalesOrderSalesInvoice : SalesOrderSalesInvoiceModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales order sales invoice.</summary>
    /// <seealso cref="SalesOrderSalesInvoiceModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesOrderSalesInvoice.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesOrderSalesInvoice/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales order sales invoice.")]
    public partial class UpdateSalesOrderSalesInvoice : SalesOrderSalesInvoiceModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales order sales invoice.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesOrderSalesInvoice.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesOrderSalesInvoice/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order sales invoice from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderSalesInvoiceByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales order sales invoice by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesOrderSalesInvoice.Deactivate"),
        PublicAPI,
        Route("/Invoicing/SalesOrderSalesInvoice/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order sales invoice from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderSalesInvoiceByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order sales invoice.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesOrderSalesInvoice.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesOrderSalesInvoice/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order sales invoice from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderSalesInvoiceByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order sales invoice by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesOrderSalesInvoice.Reactivate"),
        PublicAPI,
        Route("/Invoicing/SalesOrderSalesInvoice/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order sales invoice from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderSalesInvoiceByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order sales invoice.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesOrderSalesInvoice.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesOrderSalesInvoice/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales order sales invoice from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderSalesInvoiceByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order sales invoice by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesOrderSalesInvoice.Delete"),
        PublicAPI,
        Route("/Invoicing/SalesOrderSalesInvoice/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales order sales invoice from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderSalesInvoiceByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales order sales invoice cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Invoicing/SalesOrderSalesInvoice/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales order sales invoice calls.")]
    public class ClearSalesOrderSalesInvoiceCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesOrderSalesInvoiceServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesOrderSalesInvoices"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderSalesInvoices request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesOrderSalesInvoiceModel, SalesOrderSalesInvoiceModel, ISalesOrderSalesInvoiceSearchModel, SalesOrderSalesInvoicePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesOrderSalesInvoices)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderSalesInvoicesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesOrderSalesInvoicesForConnect request)
        {
            return await Workflows.SalesOrderSalesInvoices.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderSalesInvoicesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderSalesInvoicesDigest request)
        {
            return await Workflows.SalesOrderSalesInvoices.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesOrderSalesInvoiceByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderSalesInvoiceByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesOrderSalesInvoices, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderSalesInvoiceByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderSalesInvoiceByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesOrderSalesInvoices, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesOrderSalesInvoiceExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderSalesInvoiceExistsByID request)
        {
            return await Workflows.SalesOrderSalesInvoices.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesOrderSalesInvoiceExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderSalesInvoiceExistsByKey request)
        {
            return await Workflows.SalesOrderSalesInvoices.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesOrderSalesInvoice"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesOrderSalesInvoice request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderSalesInvoiceDataAsync,
                    () => Workflows.SalesOrderSalesInvoices.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesOrderSalesInvoice"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesOrderSalesInvoice request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderSalesInvoiceDataAsync,
                    () => Workflows.SalesOrderSalesInvoices.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesOrderSalesInvoice"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesOrderSalesInvoice request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderSalesInvoiceDataAsync,
                    () => Workflows.SalesOrderSalesInvoices.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderSalesInvoiceByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderSalesInvoiceByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderSalesInvoiceDataAsync,
                    () => Workflows.SalesOrderSalesInvoices.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderSalesInvoiceByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderSalesInvoiceByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderSalesInvoiceDataAsync,
                    () => Workflows.SalesOrderSalesInvoices.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderSalesInvoiceByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderSalesInvoiceByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderSalesInvoiceDataAsync,
                    () => Workflows.SalesOrderSalesInvoices.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderSalesInvoiceByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderSalesInvoiceByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderSalesInvoiceDataAsync,
                    () => Workflows.SalesOrderSalesInvoices.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderSalesInvoiceByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderSalesInvoiceByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderSalesInvoiceDataAsync,
                    () => Workflows.SalesOrderSalesInvoices.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderSalesInvoiceByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderSalesInvoiceByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderSalesInvoiceDataAsync,
                    () => Workflows.SalesOrderSalesInvoices.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesOrderSalesInvoiceCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesOrderSalesInvoiceCache request)
        {
            await ClearCachedSalesOrderSalesInvoiceDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesOrderSalesInvoiceDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesOrderSalesInvoices>(string.Empty),
                    UrnId.Create<GetSalesOrderSalesInvoiceByID>(string.Empty),
                    UrnId.Create<GetSalesOrderSalesInvoiceByKey>(string.Empty),
                    UrnId.Create<CheckSalesOrderSalesInvoiceExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesOrderSalesInvoiceExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesOrderSalesInvoiceService : SalesOrderSalesInvoiceServiceBase { }
}
