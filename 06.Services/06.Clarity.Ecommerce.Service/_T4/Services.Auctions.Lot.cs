// <autogenerated>
// <copyright file="LotService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the lot service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of lots.</summary>
    /// <seealso cref="LotSearchModel"/>
    /// <seealso cref="IReturn{LotPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/Lots", "GET", Priority = 1,
            Summary = "Use to get a list of lots")]
    public partial class GetLots : LotSearchModel, IReturn<LotPagedResults> { }

    /// <summary>A ServiceStack Route to get lots for connect.</summary>
    /// <seealso cref="LotSearchModel"/>
    /// <seealso cref="IReturn{List{LotModel}}"/>
    [Authenticate, RequiredPermission("Auctions.Lot.View"),
        PublicAPI,
        Route("/Auctions/LotsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all lots")]
    public partial class GetLotsForConnect : LotSearchModel, IReturn<List<LotModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all lots.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Auctions.Lot.View"),
        PublicAPI,
        Route("/Auctions/LotsDigest", "GET",
            Summary = "Use to get a hash representing each lots")]
    public partial class GetLotsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get lot.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{LotModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/Lot/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific lot")]
    public partial class GetLotByID : ImplementsIDBase, IReturn<LotModel> { }

    /// <summary>A ServiceStack Route to get lot.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{LotModel}"/>
    [PublicAPI,
        Route("/Auctions/Lot/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific lot by the custom key")]
    public partial class GetLotByKey : ImplementsKeyBase, IReturn<LotModel> { }

    /// <summary>A ServiceStack Route to get lot.</summary>
    /// <seealso cref="IReturn{LotModel}"/>
    [PublicAPI,
        Route("/Auctions/Lot/Name", "GET", Priority = 1,
            Summary = "Use to get a specific lot by the name")]
    public partial class GetLotByName : ImplementsNameBase, IReturn<LotModel> { }

    /// <summary>A ServiceStack Route to check lot exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.Lot.View"),
        PublicAPI,
        Route("/Auctions/Lot/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckLotExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check lot exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.Lot.View"),
        PublicAPI,
        Route("/Auctions/Lot/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckLotExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check lot exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.Lot.View"),
        PublicAPI,
        Route("/Auctions/Lot/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckLotExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create lot.</summary>
    /// <seealso cref="LotModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.Lot.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Lot/Create", "POST", Priority = 1,
            Summary = "Use to create a new lot.")]
    public partial class CreateLot : LotModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert lot.</summary>
    /// <seealso cref="LotModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Auctions/Lot/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing lot (as needed).")]
    public partial class UpsertLot : LotModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update lot.</summary>
    /// <seealso cref="LotModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.Lot.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Lot/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing lot.")]
    public partial class UpdateLot : LotModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate lot.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Lot.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Lot/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific lot from the system [Soft-Delete]")]
    public partial class DeactivateLotByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate lot by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Lot.Deactivate"),
        PublicAPI,
        Route("/Auctions/Lot/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific lot from the system [Soft-Delete]")]
    public partial class DeactivateLotByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate lot.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Lot.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Lot/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific lot from the system [Restore from Soft-Delete]")]
    public partial class ReactivateLotByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate lot by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Lot.Reactivate"),
        PublicAPI,
        Route("/Auctions/Lot/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific lot from the system [Restore from Soft-Delete]")]
    public partial class ReactivateLotByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete lot.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Lot.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/Lot/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific lot from the system [Hard-Delete]")]
    public partial class DeleteLotByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete lot by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.Lot.Delete"),
        PublicAPI,
        Route("/Auctions/Lot/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific lot from the system [Hard-Delete]")]
    public partial class DeleteLotByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear lot cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/Lot/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all lot calls.")]
    public class ClearLotCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class LotServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetLots"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLots request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ILotModel, LotModel, ILotSearchModel, LotPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Lots)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLotsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetLotsForConnect request)
        {
            return await Workflows.Lots.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLotsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLotsDigest request)
        {
            return await Workflows.Lots.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetLotByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLotByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Lots, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLotByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLotByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Lots, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLotByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLotByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Lots, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckLotExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLotExistsByID request)
        {
            return await Workflows.Lots.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckLotExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLotExistsByKey request)
        {
            return await Workflows.Lots.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckLotExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLotExistsByName request)
        {
            return await Workflows.Lots.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertLot"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertLot request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotDataAsync,
                    () => Workflows.Lots.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateLot"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateLot request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotDataAsync,
                    () => Workflows.Lots.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateLot"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateLot request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotDataAsync,
                    () => Workflows.Lots.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateLotByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateLotByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotDataAsync,
                    () => Workflows.Lots.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateLotByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateLotByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotDataAsync,
                    () => Workflows.Lots.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateLotByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateLotByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotDataAsync,
                    () => Workflows.Lots.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateLotByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateLotByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotDataAsync,
                    () => Workflows.Lots.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteLotByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteLotByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotDataAsync,
                    () => Workflows.Lots.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteLotByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteLotByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLotDataAsync,
                    () => Workflows.Lots.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearLotCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearLotCache request)
        {
            await ClearCachedLotDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedLotDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetLots>(string.Empty),
                    UrnId.Create<GetLotByID>(string.Empty),
                    UrnId.Create<GetLotByKey>(string.Empty),
                    UrnId.Create<GetLotByName>(string.Empty),
                    UrnId.Create<CheckLotExistsByID>(string.Empty),
                    UrnId.Create<CheckLotExistsByKey>(string.Empty),
                    UrnId.Create<CheckLotExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class LotService : LotServiceBase { }
}
