// <autogenerated>
// <copyright file="QuestionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the question service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of questions.</summary>
    /// <seealso cref="QuestionSearchModel"/>
    /// <seealso cref="IReturn{QuestionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Questionnaire/Questions", "GET", Priority = 1,
            Summary = "Use to get a list of questions")]
    public partial class GetQuestions : QuestionSearchModel, IReturn<QuestionPagedResults> { }

    /// <summary>A ServiceStack Route to get questions for connect.</summary>
    /// <seealso cref="QuestionSearchModel"/>
    /// <seealso cref="IReturn{List{QuestionModel}}"/>
    [Authenticate, RequiredPermission("Questionnaire.Question.View"),
        PublicAPI,
        Route("/Questionnaire/QuestionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all questions")]
    public partial class GetQuestionsForConnect : QuestionSearchModel, IReturn<List<QuestionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all questions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Questionnaire.Question.View"),
        PublicAPI,
        Route("/Questionnaire/QuestionsDigest", "GET",
            Summary = "Use to get a hash representing each questions")]
    public partial class GetQuestionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get question.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{QuestionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Questionnaire/Question/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific question")]
    public partial class GetQuestionByID : ImplementsIDBase, IReturn<QuestionModel> { }

    /// <summary>A ServiceStack Route to get question.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{QuestionModel}"/>
    [PublicAPI,
        Route("/Questionnaire/Question/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific question by the custom key")]
    public partial class GetQuestionByKey : ImplementsKeyBase, IReturn<QuestionModel> { }

    /// <summary>A ServiceStack Route to check question exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Questionnaire.Question.View"),
        PublicAPI,
        Route("/Questionnaire/Question/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckQuestionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check question exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Questionnaire.Question.View"),
        PublicAPI,
        Route("/Questionnaire/Question/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckQuestionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create question.</summary>
    /// <seealso cref="QuestionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Questionnaire.Question.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/Question/Create", "POST", Priority = 1,
            Summary = "Use to create a new question.")]
    public partial class CreateQuestion : QuestionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert question.</summary>
    /// <seealso cref="QuestionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Questionnaire/Question/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing question (as needed).")]
    public partial class UpsertQuestion : QuestionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update question.</summary>
    /// <seealso cref="QuestionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Questionnaire.Question.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/Question/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing question.")]
    public partial class UpdateQuestion : QuestionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate question.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.Question.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/Question/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific question from the system [Soft-Delete]")]
    public partial class DeactivateQuestionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate question by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.Question.Deactivate"),
        PublicAPI,
        Route("/Questionnaire/Question/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific question from the system [Soft-Delete]")]
    public partial class DeactivateQuestionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate question.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.Question.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/Question/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific question from the system [Restore from Soft-Delete]")]
    public partial class ReactivateQuestionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate question by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.Question.Reactivate"),
        PublicAPI,
        Route("/Questionnaire/Question/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific question from the system [Restore from Soft-Delete]")]
    public partial class ReactivateQuestionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete question.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.Question.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/Question/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific question from the system [Hard-Delete]")]
    public partial class DeleteQuestionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete question by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.Question.Delete"),
        PublicAPI,
        Route("/Questionnaire/Question/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific question from the system [Hard-Delete]")]
    public partial class DeleteQuestionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear question cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Questionnaire/Question/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all question calls.")]
    public class ClearQuestionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class QuestionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetQuestions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetQuestions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IQuestionModel, QuestionModel, IQuestionSearchModel, QuestionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Questions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetQuestionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetQuestionsForConnect request)
        {
            return await Workflows.Questions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetQuestionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetQuestionsDigest request)
        {
            return await Workflows.Questions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetQuestionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetQuestionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Questions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetQuestionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetQuestionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Questions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckQuestionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckQuestionExistsByID request)
        {
            return await Workflows.Questions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckQuestionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckQuestionExistsByKey request)
        {
            return await Workflows.Questions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertQuestion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertQuestion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionDataAsync,
                    () => Workflows.Questions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateQuestion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateQuestion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionDataAsync,
                    () => Workflows.Questions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateQuestion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateQuestion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionDataAsync,
                    () => Workflows.Questions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateQuestionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateQuestionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionDataAsync,
                    () => Workflows.Questions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateQuestionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateQuestionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionDataAsync,
                    () => Workflows.Questions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateQuestionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateQuestionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionDataAsync,
                    () => Workflows.Questions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateQuestionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateQuestionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionDataAsync,
                    () => Workflows.Questions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteQuestionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteQuestionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionDataAsync,
                    () => Workflows.Questions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteQuestionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteQuestionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionDataAsync,
                    () => Workflows.Questions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearQuestionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearQuestionCache request)
        {
            await ClearCachedQuestionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedQuestionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetQuestions>(string.Empty),
                    UrnId.Create<GetQuestionByID>(string.Empty),
                    UrnId.Create<GetQuestionByKey>(string.Empty),
                    UrnId.Create<CheckQuestionExistsByID>(string.Empty),
                    UrnId.Create<CheckQuestionExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class QuestionService : QuestionServiceBase { }
}
