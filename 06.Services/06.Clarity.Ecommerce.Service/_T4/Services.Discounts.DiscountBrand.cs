// <autogenerated>
// <copyright file="DiscountBrandService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount brand service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discount brands.</summary>
    /// <seealso cref="DiscountBrandSearchModel"/>
    /// <seealso cref="IReturn{DiscountBrandPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountBrands", "GET", Priority = 1,
            Summary = "Use to get a list of discount brands")]
    public partial class GetDiscountBrands : DiscountBrandSearchModel, IReturn<DiscountBrandPagedResults> { }

    /// <summary>A ServiceStack Route to get discount brands for connect.</summary>
    /// <seealso cref="DiscountBrandSearchModel"/>
    /// <seealso cref="IReturn{List{DiscountBrandModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountBrand.View"),
        PublicAPI,
        Route("/Discounts/DiscountBrandsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discount brands")]
    public partial class GetDiscountBrandsForConnect : DiscountBrandSearchModel, IReturn<List<DiscountBrandModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discount brands.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountBrand.View"),
        PublicAPI,
        Route("/Discounts/DiscountBrandsDigest", "GET",
            Summary = "Use to get a hash representing each discount brands")]
    public partial class GetDiscountBrandsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount brand.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountBrandModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountBrand/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount brand")]
    public partial class GetDiscountBrandByID : ImplementsIDBase, IReturn<DiscountBrandModel> { }

    /// <summary>A ServiceStack Route to get discount brand.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountBrandModel}"/>
    [PublicAPI,
        Route("/Discounts/DiscountBrand/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount brand by the custom key")]
    public partial class GetDiscountBrandByKey : ImplementsKeyBase, IReturn<DiscountBrandModel> { }

    /// <summary>A ServiceStack Route to check discount brand exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountBrand.View"),
        PublicAPI,
        Route("/Discounts/DiscountBrand/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountBrandExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount brand exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountBrand.View"),
        PublicAPI,
        Route("/Discounts/DiscountBrand/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountBrandExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount brand.</summary>
    /// <seealso cref="DiscountBrandModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountBrand.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountBrand/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount brand.")]
    public partial class CreateDiscountBrand : DiscountBrandModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount brand.</summary>
    /// <seealso cref="DiscountBrandModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/DiscountBrand/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount brand (as needed).")]
    public partial class UpsertDiscountBrand : DiscountBrandModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount brand.</summary>
    /// <seealso cref="DiscountBrandModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountBrand.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountBrand/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount brand.")]
    public partial class UpdateDiscountBrand : DiscountBrandModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount brand.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountBrand.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountBrand/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount brand from the system [Soft-Delete]")]
    public partial class DeactivateDiscountBrandByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount brand by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountBrand.Deactivate"),
        PublicAPI,
        Route("/Discounts/DiscountBrand/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount brand from the system [Soft-Delete]")]
    public partial class DeactivateDiscountBrandByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount brand.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountBrand.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountBrand/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount brand from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountBrandByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount brand by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountBrand.Reactivate"),
        PublicAPI,
        Route("/Discounts/DiscountBrand/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount brand from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountBrandByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount brand.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountBrand.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountBrand/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount brand from the system [Hard-Delete]")]
    public partial class DeleteDiscountBrandByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount brand by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountBrand.Delete"),
        PublicAPI,
        Route("/Discounts/DiscountBrand/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount brand from the system [Hard-Delete]")]
    public partial class DeleteDiscountBrandByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount brand cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountBrand/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount brand calls.")]
    public class ClearDiscountBrandCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountBrandServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscountBrands"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountBrands request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountBrandModel, DiscountBrandModel, IDiscountBrandSearchModel, DiscountBrandPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DiscountBrands)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountBrandsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountBrandsForConnect request)
        {
            return await Workflows.DiscountBrands.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountBrandsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountBrandsDigest request)
        {
            return await Workflows.DiscountBrands.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountBrandByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountBrandByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DiscountBrands, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountBrandByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountBrandByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DiscountBrands, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountBrandExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountBrandExistsByID request)
        {
            return await Workflows.DiscountBrands.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountBrandExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountBrandExistsByKey request)
        {
            return await Workflows.DiscountBrands.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscountBrand"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscountBrand request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountBrandDataAsync,
                    () => Workflows.DiscountBrands.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscountBrand"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscountBrand request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountBrandDataAsync,
                    () => Workflows.DiscountBrands.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscountBrand"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscountBrand request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountBrandDataAsync,
                    () => Workflows.DiscountBrands.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountBrandByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountBrandByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountBrandDataAsync,
                    () => Workflows.DiscountBrands.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountBrandByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountBrandByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountBrandDataAsync,
                    () => Workflows.DiscountBrands.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountBrandByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountBrandByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountBrandDataAsync,
                    () => Workflows.DiscountBrands.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountBrandByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountBrandByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountBrandDataAsync,
                    () => Workflows.DiscountBrands.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountBrandByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountBrandByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountBrandDataAsync,
                    () => Workflows.DiscountBrands.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountBrandByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountBrandByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountBrandDataAsync,
                    () => Workflows.DiscountBrands.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountBrandCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountBrandCache request)
        {
            await ClearCachedDiscountBrandDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountBrandDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscountBrands>(string.Empty),
                    UrnId.Create<GetDiscountBrandByID>(string.Empty),
                    UrnId.Create<GetDiscountBrandByKey>(string.Empty),
                    UrnId.Create<CheckDiscountBrandExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountBrandExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountBrandService : DiscountBrandServiceBase { }
}
