// <autogenerated>
// <copyright file="MembershipRepeatTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the membership repeat type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of membership repeat types.</summary>
    /// <seealso cref="MembershipRepeatTypeSearchModel"/>
    /// <seealso cref="IReturn{MembershipRepeatTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/MembershipRepeatTypes", "GET", Priority = 1,
            Summary = "Use to get a list of membership repeat types")]
    public partial class GetMembershipRepeatTypes : MembershipRepeatTypeSearchModel, IReturn<MembershipRepeatTypePagedResults> { }

    /// <summary>A ServiceStack Route to get membership repeat types for connect.</summary>
    /// <seealso cref="MembershipRepeatTypeSearchModel"/>
    /// <seealso cref="IReturn{List{MembershipRepeatTypeModel}}"/>
    [Authenticate, RequiredPermission("Payments.MembershipRepeatType.View"),
        PublicAPI,
        Route("/Payments/MembershipRepeatTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all membership repeat types")]
    public partial class GetMembershipRepeatTypesForConnect : MembershipRepeatTypeSearchModel, IReturn<List<MembershipRepeatTypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all membership repeat types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.MembershipRepeatType.View"),
        PublicAPI,
        Route("/Payments/MembershipRepeatTypesDigest", "GET",
            Summary = "Use to get a hash representing each membership repeat types")]
    public partial class GetMembershipRepeatTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get membership repeat type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{MembershipRepeatTypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/MembershipRepeatType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific membership repeat type")]
    public partial class GetMembershipRepeatTypeByID : ImplementsIDBase, IReturn<MembershipRepeatTypeModel> { }

    /// <summary>A ServiceStack Route to get membership repeat type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{MembershipRepeatTypeModel}"/>
    [PublicAPI,
        Route("/Payments/MembershipRepeatType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific membership repeat type by the custom key")]
    public partial class GetMembershipRepeatTypeByKey : ImplementsKeyBase, IReturn<MembershipRepeatTypeModel> { }

    /// <summary>A ServiceStack Route to check membership repeat type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.MembershipRepeatType.View"),
        PublicAPI,
        Route("/Payments/MembershipRepeatType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckMembershipRepeatTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check membership repeat type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.MembershipRepeatType.View"),
        PublicAPI,
        Route("/Payments/MembershipRepeatType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckMembershipRepeatTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create membership repeat type.</summary>
    /// <seealso cref="MembershipRepeatTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.MembershipRepeatType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/MembershipRepeatType/Create", "POST", Priority = 1,
            Summary = "Use to create a new membership repeat type.")]
    public partial class CreateMembershipRepeatType : MembershipRepeatTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert membership repeat type.</summary>
    /// <seealso cref="MembershipRepeatTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/MembershipRepeatType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing membership repeat type (as needed).")]
    public partial class UpsertMembershipRepeatType : MembershipRepeatTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update membership repeat type.</summary>
    /// <seealso cref="MembershipRepeatTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.MembershipRepeatType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/MembershipRepeatType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing membership repeat type.")]
    public partial class UpdateMembershipRepeatType : MembershipRepeatTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate membership repeat type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.MembershipRepeatType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/MembershipRepeatType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific membership repeat type from the system [Soft-Delete]")]
    public partial class DeactivateMembershipRepeatTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate membership repeat type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.MembershipRepeatType.Deactivate"),
        PublicAPI,
        Route("/Payments/MembershipRepeatType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific membership repeat type from the system [Soft-Delete]")]
    public partial class DeactivateMembershipRepeatTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate membership repeat type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.MembershipRepeatType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/MembershipRepeatType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific membership repeat type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateMembershipRepeatTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate membership repeat type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.MembershipRepeatType.Reactivate"),
        PublicAPI,
        Route("/Payments/MembershipRepeatType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific membership repeat type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateMembershipRepeatTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete membership repeat type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.MembershipRepeatType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/MembershipRepeatType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific membership repeat type from the system [Hard-Delete]")]
    public partial class DeleteMembershipRepeatTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete membership repeat type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.MembershipRepeatType.Delete"),
        PublicAPI,
        Route("/Payments/MembershipRepeatType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific membership repeat type from the system [Hard-Delete]")]
    public partial class DeleteMembershipRepeatTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear membership repeat type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/MembershipRepeatType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all membership repeat type calls.")]
    public class ClearMembershipRepeatTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class MembershipRepeatTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetMembershipRepeatTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMembershipRepeatTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IMembershipRepeatTypeModel, MembershipRepeatTypeModel, IMembershipRepeatTypeSearchModel, MembershipRepeatTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.MembershipRepeatTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMembershipRepeatTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetMembershipRepeatTypesForConnect request)
        {
            return await Workflows.MembershipRepeatTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMembershipRepeatTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMembershipRepeatTypesDigest request)
        {
            return await Workflows.MembershipRepeatTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetMembershipRepeatTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMembershipRepeatTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.MembershipRepeatTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMembershipRepeatTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMembershipRepeatTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.MembershipRepeatTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckMembershipRepeatTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMembershipRepeatTypeExistsByID request)
        {
            return await Workflows.MembershipRepeatTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckMembershipRepeatTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMembershipRepeatTypeExistsByKey request)
        {
            return await Workflows.MembershipRepeatTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertMembershipRepeatType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertMembershipRepeatType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipRepeatTypeDataAsync,
                    () => Workflows.MembershipRepeatTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateMembershipRepeatType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateMembershipRepeatType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipRepeatTypeDataAsync,
                    () => Workflows.MembershipRepeatTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateMembershipRepeatType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateMembershipRepeatType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipRepeatTypeDataAsync,
                    () => Workflows.MembershipRepeatTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateMembershipRepeatTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateMembershipRepeatTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipRepeatTypeDataAsync,
                    () => Workflows.MembershipRepeatTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateMembershipRepeatTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateMembershipRepeatTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipRepeatTypeDataAsync,
                    () => Workflows.MembershipRepeatTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateMembershipRepeatTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateMembershipRepeatTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipRepeatTypeDataAsync,
                    () => Workflows.MembershipRepeatTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateMembershipRepeatTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateMembershipRepeatTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipRepeatTypeDataAsync,
                    () => Workflows.MembershipRepeatTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteMembershipRepeatTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteMembershipRepeatTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipRepeatTypeDataAsync,
                    () => Workflows.MembershipRepeatTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteMembershipRepeatTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteMembershipRepeatTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipRepeatTypeDataAsync,
                    () => Workflows.MembershipRepeatTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearMembershipRepeatTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearMembershipRepeatTypeCache request)
        {
            await ClearCachedMembershipRepeatTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedMembershipRepeatTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetMembershipRepeatTypes>(string.Empty),
                    UrnId.Create<GetMembershipRepeatTypeByID>(string.Empty),
                    UrnId.Create<GetMembershipRepeatTypeByKey>(string.Empty),
                    UrnId.Create<CheckMembershipRepeatTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckMembershipRepeatTypeExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class MembershipRepeatTypeService : MembershipRepeatTypeServiceBase { }
}
