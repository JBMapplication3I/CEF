// <autogenerated>
// <copyright file="BrandAuctionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the brand auction service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of brand auctions.</summary>
    /// <seealso cref="BrandAuctionSearchModel"/>
    /// <seealso cref="IReturn{BrandAuctionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/BrandAuctions", "GET", Priority = 1,
            Summary = "Use to get a list of brand auctions")]
    public partial class GetBrandAuctions : BrandAuctionSearchModel, IReturn<BrandAuctionPagedResults> { }

    /// <summary>A ServiceStack Route to get brand auctions for connect.</summary>
    /// <seealso cref="BrandAuctionSearchModel"/>
    /// <seealso cref="IReturn{List{BrandAuctionModel}}"/>
    [Authenticate, RequiredPermission("Auctions.BrandAuction.View"),
        PublicAPI,
        Route("/Auctions/BrandAuctionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all brand auctions")]
    public partial class GetBrandAuctionsForConnect : BrandAuctionSearchModel, IReturn<List<BrandAuctionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all brand auctions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Auctions.BrandAuction.View"),
        PublicAPI,
        Route("/Auctions/BrandAuctionsDigest", "GET",
            Summary = "Use to get a hash representing each brand auctions")]
    public partial class GetBrandAuctionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get brand auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{BrandAuctionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/BrandAuction/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific brand auction")]
    public partial class GetBrandAuctionByID : ImplementsIDBase, IReturn<BrandAuctionModel> { }

    /// <summary>A ServiceStack Route to get brand auction.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{BrandAuctionModel}"/>
    [PublicAPI,
        Route("/Auctions/BrandAuction/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific brand auction by the custom key")]
    public partial class GetBrandAuctionByKey : ImplementsKeyBase, IReturn<BrandAuctionModel> { }

    /// <summary>A ServiceStack Route to check brand auction exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.BrandAuction.View"),
        PublicAPI,
        Route("/Auctions/BrandAuction/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandAuctionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand auction exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Auctions.BrandAuction.View"),
        PublicAPI,
        Route("/Auctions/BrandAuction/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandAuctionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create brand auction.</summary>
    /// <seealso cref="BrandAuctionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.BrandAuction.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/BrandAuction/Create", "POST", Priority = 1,
            Summary = "Use to create a new brand auction.")]
    public partial class CreateBrandAuction : BrandAuctionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert brand auction.</summary>
    /// <seealso cref="BrandAuctionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Auctions/BrandAuction/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing brand auction (as needed).")]
    public partial class UpsertBrandAuction : BrandAuctionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update brand auction.</summary>
    /// <seealso cref="BrandAuctionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Auctions.BrandAuction.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/BrandAuction/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing brand auction.")]
    public partial class UpdateBrandAuction : BrandAuctionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate brand auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.BrandAuction.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/BrandAuction/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand auction from the system [Soft-Delete]")]
    public partial class DeactivateBrandAuctionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate brand auction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.BrandAuction.Deactivate"),
        PublicAPI,
        Route("/Auctions/BrandAuction/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand auction from the system [Soft-Delete]")]
    public partial class DeactivateBrandAuctionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.BrandAuction.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/BrandAuction/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand auction from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandAuctionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand auction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.BrandAuction.Reactivate"),
        PublicAPI,
        Route("/Auctions/BrandAuction/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand auction from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandAuctionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand auction.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.BrandAuction.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Auctions/BrandAuction/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific brand auction from the system [Hard-Delete]")]
    public partial class DeleteBrandAuctionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand auction by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Auctions.BrandAuction.Delete"),
        PublicAPI,
        Route("/Auctions/BrandAuction/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific brand auction from the system [Hard-Delete]")]
    public partial class DeleteBrandAuctionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear brand auction cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Auctions/BrandAuction/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all brand auction calls.")]
    public class ClearBrandAuctionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BrandAuctionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBrandAuctions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandAuctions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IBrandAuctionModel, BrandAuctionModel, IBrandAuctionSearchModel, BrandAuctionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BrandAuctions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandAuctionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBrandAuctionsForConnect request)
        {
            return await Workflows.BrandAuctions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandAuctionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandAuctionsDigest request)
        {
            return await Workflows.BrandAuctions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBrandAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandAuctionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BrandAuctions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandAuctionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BrandAuctions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBrandAuctionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandAuctionExistsByID request)
        {
            return await Workflows.BrandAuctions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandAuctionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandAuctionExistsByKey request)
        {
            return await Workflows.BrandAuctions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBrandAuction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBrandAuction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAuctionDataAsync,
                    () => Workflows.BrandAuctions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBrandAuction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBrandAuction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAuctionDataAsync,
                    () => Workflows.BrandAuctions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBrandAuction"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBrandAuction request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAuctionDataAsync,
                    () => Workflows.BrandAuctions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBrandAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandAuctionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAuctionDataAsync,
                    () => Workflows.BrandAuctions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBrandAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandAuctionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAuctionDataAsync,
                    () => Workflows.BrandAuctions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBrandAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandAuctionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAuctionDataAsync,
                    () => Workflows.BrandAuctions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBrandAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandAuctionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAuctionDataAsync,
                    () => Workflows.BrandAuctions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBrandAuctionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandAuctionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAuctionDataAsync,
                    () => Workflows.BrandAuctions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBrandAuctionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandAuctionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandAuctionDataAsync,
                    () => Workflows.BrandAuctions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBrandAuctionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBrandAuctionCache request)
        {
            await ClearCachedBrandAuctionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBrandAuctionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBrandAuctions>(string.Empty),
                    UrnId.Create<GetBrandAuctionByID>(string.Empty),
                    UrnId.Create<GetBrandAuctionByKey>(string.Empty),
                    UrnId.Create<CheckBrandAuctionExistsByID>(string.Empty),
                    UrnId.Create<CheckBrandAuctionExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BrandAuctionService : BrandAuctionServiceBase { }
}
