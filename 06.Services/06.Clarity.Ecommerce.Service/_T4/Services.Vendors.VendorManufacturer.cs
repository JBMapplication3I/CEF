// <autogenerated>
// <copyright file="VendorManufacturerService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the vendor manufacturer service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of vendor manufacturers.</summary>
    /// <seealso cref="VendorManufacturerSearchModel"/>
    /// <seealso cref="IReturn{VendorManufacturerPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorManufacturers", "GET", Priority = 1,
            Summary = "Use to get a list of vendor manufacturers")]
    public partial class GetVendorManufacturers : VendorManufacturerSearchModel, IReturn<VendorManufacturerPagedResults> { }

    /// <summary>A ServiceStack Route to get vendor manufacturers for connect.</summary>
    /// <seealso cref="VendorManufacturerSearchModel"/>
    /// <seealso cref="IReturn{List{VendorManufacturerModel}}"/>
    [Authenticate, RequiredPermission("Vendors.VendorManufacturer.View"),
        PublicAPI,
        Route("/Vendors/VendorManufacturersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all vendor manufacturers")]
    public partial class GetVendorManufacturersForConnect : VendorManufacturerSearchModel, IReturn<List<VendorManufacturerModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all vendor manufacturers.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Vendors.VendorManufacturer.View"),
        PublicAPI,
        Route("/Vendors/VendorManufacturersDigest", "GET",
            Summary = "Use to get a hash representing each vendor manufacturers")]
    public partial class GetVendorManufacturersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get vendor manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{VendorManufacturerModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorManufacturer/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific vendor manufacturer")]
    public partial class GetVendorManufacturerByID : ImplementsIDBase, IReturn<VendorManufacturerModel> { }

    /// <summary>A ServiceStack Route to get vendor manufacturer.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{VendorManufacturerModel}"/>
    [PublicAPI,
        Route("/Vendors/VendorManufacturer/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific vendor manufacturer by the custom key")]
    public partial class GetVendorManufacturerByKey : ImplementsKeyBase, IReturn<VendorManufacturerModel> { }

    /// <summary>A ServiceStack Route to check vendor manufacturer exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.VendorManufacturer.View"),
        PublicAPI,
        Route("/Vendors/VendorManufacturer/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorManufacturerExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check vendor manufacturer exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.VendorManufacturer.View"),
        PublicAPI,
        Route("/Vendors/VendorManufacturer/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorManufacturerExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create vendor manufacturer.</summary>
    /// <seealso cref="VendorManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Vendors.VendorManufacturer.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorManufacturer/Create", "POST", Priority = 1,
            Summary = "Use to create a new vendor manufacturer.")]
    public partial class CreateVendorManufacturer : VendorManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert vendor manufacturer.</summary>
    /// <seealso cref="VendorManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Vendors/VendorManufacturer/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing vendor manufacturer (as needed).")]
    public partial class UpsertVendorManufacturer : VendorManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update vendor manufacturer.</summary>
    /// <seealso cref="VendorManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Vendors.VendorManufacturer.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorManufacturer/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing vendor manufacturer.")]
    public partial class UpdateVendorManufacturer : VendorManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate vendor manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorManufacturer.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorManufacturer/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific vendor manufacturer from the system [Soft-Delete]")]
    public partial class DeactivateVendorManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate vendor manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorManufacturer.Deactivate"),
        PublicAPI,
        Route("/Vendors/VendorManufacturer/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific vendor manufacturer from the system [Soft-Delete]")]
    public partial class DeactivateVendorManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate vendor manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorManufacturer.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorManufacturer/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific vendor manufacturer from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVendorManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate vendor manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorManufacturer.Reactivate"),
        PublicAPI,
        Route("/Vendors/VendorManufacturer/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific vendor manufacturer from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVendorManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete vendor manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorManufacturer.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/VendorManufacturer/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific vendor manufacturer from the system [Hard-Delete]")]
    public partial class DeleteVendorManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete vendor manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.VendorManufacturer.Delete"),
        PublicAPI,
        Route("/Vendors/VendorManufacturer/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific vendor manufacturer from the system [Hard-Delete]")]
    public partial class DeleteVendorManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear vendor manufacturer cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/VendorManufacturer/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all vendor manufacturer calls.")]
    public class ClearVendorManufacturerCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class VendorManufacturerServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetVendorManufacturers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorManufacturers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IVendorManufacturerModel, VendorManufacturerModel, IVendorManufacturerSearchModel, VendorManufacturerPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.VendorManufacturers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorManufacturersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetVendorManufacturersForConnect request)
        {
            return await Workflows.VendorManufacturers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorManufacturersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorManufacturersDigest request)
        {
            return await Workflows.VendorManufacturers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetVendorManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorManufacturerByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.VendorManufacturers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorManufacturerByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.VendorManufacturers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckVendorManufacturerExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorManufacturerExistsByID request)
        {
            return await Workflows.VendorManufacturers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckVendorManufacturerExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorManufacturerExistsByKey request)
        {
            return await Workflows.VendorManufacturers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertVendorManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertVendorManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorManufacturerDataAsync,
                    () => Workflows.VendorManufacturers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateVendorManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateVendorManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorManufacturerDataAsync,
                    () => Workflows.VendorManufacturers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateVendorManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateVendorManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorManufacturerDataAsync,
                    () => Workflows.VendorManufacturers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateVendorManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVendorManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorManufacturerDataAsync,
                    () => Workflows.VendorManufacturers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateVendorManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVendorManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorManufacturerDataAsync,
                    () => Workflows.VendorManufacturers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateVendorManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVendorManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorManufacturerDataAsync,
                    () => Workflows.VendorManufacturers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateVendorManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVendorManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorManufacturerDataAsync,
                    () => Workflows.VendorManufacturers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteVendorManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVendorManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorManufacturerDataAsync,
                    () => Workflows.VendorManufacturers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteVendorManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVendorManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorManufacturerDataAsync,
                    () => Workflows.VendorManufacturers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearVendorManufacturerCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearVendorManufacturerCache request)
        {
            await ClearCachedVendorManufacturerDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedVendorManufacturerDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetVendorManufacturers>(string.Empty),
                    UrnId.Create<GetVendorManufacturerByID>(string.Empty),
                    UrnId.Create<GetVendorManufacturerByKey>(string.Empty),
                    UrnId.Create<CheckVendorManufacturerExistsByID>(string.Empty),
                    UrnId.Create<CheckVendorManufacturerExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class VendorManufacturerService : VendorManufacturerServiceBase { }
}
