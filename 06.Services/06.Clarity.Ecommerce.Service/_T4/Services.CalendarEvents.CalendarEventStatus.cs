// <autogenerated>
// <copyright file="CalendarEventStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the calendar event status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of calendar event statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{CalendarEventStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of calendar event statuses")]
    public partial class GetCalendarEventStatuses : StatusSearchModel, IReturn<CalendarEventStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get calendar event statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventStatus.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all calendar event statuses")]
    public partial class GetCalendarEventStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all calendar event statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventStatus.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatusesDigest", "GET",
            Summary = "Use to get a hash representing each calendar event statuses")]
    public partial class GetCalendarEventStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get calendar event status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event status")]
    public partial class GetCalendarEventStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get calendar event status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event status by the custom key")]
    public partial class GetCalendarEventStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get calendar event status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event status by the name")]
    public partial class GetCalendarEventStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get calendar event status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event status by the name")]
    public partial class GetCalendarEventStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check calendar event status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventStatus.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventStatus.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventStatus.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventStatus.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create calendar event status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new calendar event status.")]
    public partial class CreateCalendarEventStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert calendar event status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing calendar event status (as needed).")]
    public partial class UpsertCalendarEventStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update calendar event status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing calendar event status.")]
    public partial class UpdateCalendarEventStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate calendar event status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar event status from the system [Soft-Delete]")]
    public partial class DeactivateCalendarEventStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate calendar event status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventStatus.Deactivate"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar event status from the system [Soft-Delete]")]
    public partial class DeactivateCalendarEventStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar event status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar event status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarEventStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar event status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventStatus.Reactivate"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar event status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarEventStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar event status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific calendar event status from the system [Hard-Delete]")]
    public partial class DeleteCalendarEventStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar event status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventStatus.Delete"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific calendar event status from the system [Hard-Delete]")]
    public partial class DeleteCalendarEventStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear calendar event status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all calendar event status calls.")]
    public class ClearCalendarEventStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CalendarEventStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCalendarEventStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, CalendarEventStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CalendarEventStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCalendarEventStatusesForConnect request)
        {
            return await Workflows.CalendarEventStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventStatusesDigest request)
        {
            return await Workflows.CalendarEventStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCalendarEventStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CalendarEventStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CalendarEventStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CalendarEventStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.CalendarEventStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCalendarEventStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventStatusExistsByID request)
        {
            return await Workflows.CalendarEventStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventStatusExistsByKey request)
        {
            return await Workflows.CalendarEventStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventStatusExistsByName request)
        {
            return await Workflows.CalendarEventStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventStatusExistsByDisplayName request)
        {
            return await Workflows.CalendarEventStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCalendarEventStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCalendarEventStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventStatusDataAsync,
                    () => Workflows.CalendarEventStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCalendarEventStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCalendarEventStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventStatusDataAsync,
                    () => Workflows.CalendarEventStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCalendarEventStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCalendarEventStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventStatusDataAsync,
                    () => Workflows.CalendarEventStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCalendarEventStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarEventStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventStatusDataAsync,
                    () => Workflows.CalendarEventStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCalendarEventStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarEventStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventStatusDataAsync,
                    () => Workflows.CalendarEventStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCalendarEventStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarEventStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventStatusDataAsync,
                    () => Workflows.CalendarEventStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCalendarEventStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarEventStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventStatusDataAsync,
                    () => Workflows.CalendarEventStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCalendarEventStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarEventStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventStatusDataAsync,
                    () => Workflows.CalendarEventStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCalendarEventStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarEventStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventStatusDataAsync,
                    () => Workflows.CalendarEventStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCalendarEventStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCalendarEventStatusCache request)
        {
            await ClearCachedCalendarEventStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCalendarEventStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCalendarEventStatuses>(string.Empty),
                    UrnId.Create<GetCalendarEventStatusByID>(string.Empty),
                    UrnId.Create<GetCalendarEventStatusByKey>(string.Empty),
                    UrnId.Create<GetCalendarEventStatusByName>(string.Empty),
                    UrnId.Create<CheckCalendarEventStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckCalendarEventStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckCalendarEventStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckCalendarEventStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CalendarEventStatusService : CalendarEventStatusServiceBase { }
}
