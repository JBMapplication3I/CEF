// <autogenerated>
// <copyright file="DistrictImageTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the district image type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of district image types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{DistrictImageTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/DistrictImageTypes", "GET", Priority = 1,
            Summary = "Use to get a list of district image types")]
    public partial class GetDistrictImageTypes : TypeSearchModel, IReturn<DistrictImageTypePagedResults> { }

    /// <summary>A ServiceStack Route to get district image types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImageType.View"),
        PublicAPI,
        Route("/Geography/DistrictImageTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all district image types")]
    public partial class GetDistrictImageTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all district image types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImageType.View"),
        PublicAPI,
        Route("/Geography/DistrictImageTypesDigest", "GET",
            Summary = "Use to get a hash representing each district image types")]
    public partial class GetDistrictImageTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get district image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/DistrictImageType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific district image type")]
    public partial class GetDistrictImageTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get district image type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Geography/DistrictImageType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific district image type by the custom key")]
    public partial class GetDistrictImageTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get district image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Geography/DistrictImageType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific district image type by the name")]
    public partial class GetDistrictImageTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get district image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Geography/DistrictImageType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific district image type by the name")]
    public partial class GetDistrictImageTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check district image type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImageType.View"),
        PublicAPI,
        Route("/Geography/DistrictImageType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDistrictImageTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check district image type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImageType.View"),
        PublicAPI,
        Route("/Geography/DistrictImageType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDistrictImageTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check district image type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImageType.View"),
        PublicAPI,
        Route("/Geography/DistrictImageType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckDistrictImageTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check district image type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImageType.View"),
        PublicAPI,
        Route("/Geography/DistrictImageType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckDistrictImageTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create district image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImageType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictImageType/Create", "POST", Priority = 1,
            Summary = "Use to create a new district image type.")]
    public partial class CreateDistrictImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert district image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/DistrictImageType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing district image type (as needed).")]
    public partial class UpsertDistrictImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update district image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImageType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictImageType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing district image type.")]
    public partial class UpdateDistrictImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate district image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImageType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictImageType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific district image type from the system [Soft-Delete]")]
    public partial class DeactivateDistrictImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate district image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImageType.Deactivate"),
        PublicAPI,
        Route("/Geography/DistrictImageType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific district image type from the system [Soft-Delete]")]
    public partial class DeactivateDistrictImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate district image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImageType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictImageType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific district image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDistrictImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate district image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImageType.Reactivate"),
        PublicAPI,
        Route("/Geography/DistrictImageType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific district image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDistrictImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete district image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImageType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/DistrictImageType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific district image type from the system [Hard-Delete]")]
    public partial class DeleteDistrictImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete district image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.DistrictImageType.Delete"),
        PublicAPI,
        Route("/Geography/DistrictImageType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific district image type from the system [Hard-Delete]")]
    public partial class DeleteDistrictImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear district image type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/DistrictImageType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all district image type calls.")]
    public class ClearDistrictImageTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DistrictImageTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDistrictImageTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictImageTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, DistrictImageTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DistrictImageTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictImageTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDistrictImageTypesForConnect request)
        {
            return await Workflows.DistrictImageTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictImageTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictImageTypesDigest request)
        {
            return await Workflows.DistrictImageTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDistrictImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictImageTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DistrictImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictImageTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DistrictImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictImageTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictImageTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.DistrictImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDistrictImageTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDistrictImageTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.DistrictImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDistrictImageTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDistrictImageTypeExistsByID request)
        {
            return await Workflows.DistrictImageTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDistrictImageTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDistrictImageTypeExistsByKey request)
        {
            return await Workflows.DistrictImageTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDistrictImageTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDistrictImageTypeExistsByName request)
        {
            return await Workflows.DistrictImageTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDistrictImageTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDistrictImageTypeExistsByDisplayName request)
        {
            return await Workflows.DistrictImageTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDistrictImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDistrictImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageTypeDataAsync,
                    () => Workflows.DistrictImageTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDistrictImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDistrictImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageTypeDataAsync,
                    () => Workflows.DistrictImageTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDistrictImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDistrictImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageTypeDataAsync,
                    () => Workflows.DistrictImageTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDistrictImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDistrictImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageTypeDataAsync,
                    () => Workflows.DistrictImageTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDistrictImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDistrictImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageTypeDataAsync,
                    () => Workflows.DistrictImageTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDistrictImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDistrictImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageTypeDataAsync,
                    () => Workflows.DistrictImageTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDistrictImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDistrictImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageTypeDataAsync,
                    () => Workflows.DistrictImageTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDistrictImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDistrictImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageTypeDataAsync,
                    () => Workflows.DistrictImageTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDistrictImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDistrictImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDistrictImageTypeDataAsync,
                    () => Workflows.DistrictImageTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDistrictImageTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDistrictImageTypeCache request)
        {
            await ClearCachedDistrictImageTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDistrictImageTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDistrictImageTypes>(string.Empty),
                    UrnId.Create<GetDistrictImageTypeByID>(string.Empty),
                    UrnId.Create<GetDistrictImageTypeByKey>(string.Empty),
                    UrnId.Create<GetDistrictImageTypeByName>(string.Empty),
                    UrnId.Create<CheckDistrictImageTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckDistrictImageTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckDistrictImageTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckDistrictImageTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DistrictImageTypeService : DistrictImageTypeServiceBase { }
}
