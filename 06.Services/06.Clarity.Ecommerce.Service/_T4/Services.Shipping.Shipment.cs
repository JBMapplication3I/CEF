// <autogenerated>
// <copyright file="ShipmentService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the shipment service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of shipments.</summary>
    /// <seealso cref="ShipmentSearchModel"/>
    /// <seealso cref="IReturn{ShipmentPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/Shipments", "GET", Priority = 1,
            Summary = "Use to get a list of shipments")]
    public partial class GetShipments : ShipmentSearchModel, IReturn<ShipmentPagedResults> { }

    /// <summary>A ServiceStack Route to get shipments for connect.</summary>
    /// <seealso cref="ShipmentSearchModel"/>
    /// <seealso cref="IReturn{List{ShipmentModel}}"/>
    [Authenticate, RequiredPermission("Shipping.Shipment.View"),
        PublicAPI,
        Route("/Shipping/ShipmentsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all shipments")]
    public partial class GetShipmentsForConnect : ShipmentSearchModel, IReturn<List<ShipmentModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all shipments.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shipping.Shipment.View"),
        PublicAPI,
        Route("/Shipping/ShipmentsDigest", "GET",
            Summary = "Use to get a hash representing each shipments")]
    public partial class GetShipmentsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get shipment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ShipmentModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/Shipment/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific shipment")]
    public partial class GetShipmentByID : ImplementsIDBase, IReturn<ShipmentModel> { }

    /// <summary>A ServiceStack Route to get shipment.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ShipmentModel}"/>
    [PublicAPI,
        Route("/Shipping/Shipment/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific shipment by the custom key")]
    public partial class GetShipmentByKey : ImplementsKeyBase, IReturn<ShipmentModel> { }

    /// <summary>A ServiceStack Route to check shipment exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.Shipment.View"),
        PublicAPI,
        Route("/Shipping/Shipment/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckShipmentExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check shipment exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.Shipment.View"),
        PublicAPI,
        Route("/Shipping/Shipment/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckShipmentExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create shipment.</summary>
    /// <seealso cref="ShipmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.Shipment.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/Shipment/Create", "POST", Priority = 1,
            Summary = "Use to create a new shipment.")]
    public partial class CreateShipment : ShipmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert shipment.</summary>
    /// <seealso cref="ShipmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shipping/Shipment/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing shipment (as needed).")]
    public partial class UpsertShipment : ShipmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update shipment.</summary>
    /// <seealso cref="ShipmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.Shipment.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/Shipment/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing shipment.")]
    public partial class UpdateShipment : ShipmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate shipment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.Shipment.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/Shipment/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific shipment from the system [Soft-Delete]")]
    public partial class DeactivateShipmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate shipment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.Shipment.Deactivate"),
        PublicAPI,
        Route("/Shipping/Shipment/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific shipment from the system [Soft-Delete]")]
    public partial class DeactivateShipmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate shipment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.Shipment.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/Shipment/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific shipment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateShipmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate shipment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.Shipment.Reactivate"),
        PublicAPI,
        Route("/Shipping/Shipment/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific shipment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateShipmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete shipment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.Shipment.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/Shipment/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific shipment from the system [Hard-Delete]")]
    public partial class DeleteShipmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete shipment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.Shipment.Delete"),
        PublicAPI,
        Route("/Shipping/Shipment/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific shipment from the system [Hard-Delete]")]
    public partial class DeleteShipmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear shipment cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/Shipment/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all shipment calls.")]
    public class ClearShipmentCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ShipmentServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetShipments"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipments request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IShipmentModel, ShipmentModel, IShipmentSearchModel, ShipmentPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Shipments)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetShipmentsForConnect request)
        {
            return await Workflows.Shipments.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentsDigest request)
        {
            return await Workflows.Shipments.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetShipmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Shipments, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Shipments, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckShipmentExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipmentExistsByID request)
        {
            return await Workflows.Shipments.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckShipmentExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipmentExistsByKey request)
        {
            return await Workflows.Shipments.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertShipment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertShipment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentDataAsync,
                    () => Workflows.Shipments.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateShipment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateShipment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentDataAsync,
                    () => Workflows.Shipments.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateShipment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateShipment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentDataAsync,
                    () => Workflows.Shipments.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateShipmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateShipmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentDataAsync,
                    () => Workflows.Shipments.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateShipmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateShipmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentDataAsync,
                    () => Workflows.Shipments.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateShipmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateShipmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentDataAsync,
                    () => Workflows.Shipments.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateShipmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateShipmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentDataAsync,
                    () => Workflows.Shipments.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteShipmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteShipmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentDataAsync,
                    () => Workflows.Shipments.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteShipmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteShipmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentDataAsync,
                    () => Workflows.Shipments.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearShipmentCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearShipmentCache request)
        {
            await ClearCachedShipmentDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedShipmentDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetShipments>(string.Empty),
                    UrnId.Create<GetShipmentByID>(string.Empty),
                    UrnId.Create<GetShipmentByKey>(string.Empty),
                    UrnId.Create<CheckShipmentExistsByID>(string.Empty),
                    UrnId.Create<CheckShipmentExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ShipmentService : ShipmentServiceBase { }
}
