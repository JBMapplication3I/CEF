// <autogenerated>
// <copyright file="AppointmentStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the appointment status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of appointment statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{AppointmentStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/AppointmentStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of appointment statuses")]
    public partial class GetAppointmentStatuses : StatusSearchModel, IReturn<AppointmentStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get appointment statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentStatus.View"),
        PublicAPI,
        Route("/Scheduling/AppointmentStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all appointment statuses")]
    public partial class GetAppointmentStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all appointment statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentStatus.View"),
        PublicAPI,
        Route("/Scheduling/AppointmentStatusesDigest", "GET",
            Summary = "Use to get a hash representing each appointment statuses")]
    public partial class GetAppointmentStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get appointment status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/AppointmentStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific appointment status")]
    public partial class GetAppointmentStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get appointment status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Scheduling/AppointmentStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific appointment status by the custom key")]
    public partial class GetAppointmentStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get appointment status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Scheduling/AppointmentStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific appointment status by the name")]
    public partial class GetAppointmentStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get appointment status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Scheduling/AppointmentStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific appointment status by the name")]
    public partial class GetAppointmentStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check appointment status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentStatus.View"),
        PublicAPI,
        Route("/Scheduling/AppointmentStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAppointmentStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check appointment status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentStatus.View"),
        PublicAPI,
        Route("/Scheduling/AppointmentStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAppointmentStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check appointment status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentStatus.View"),
        PublicAPI,
        Route("/Scheduling/AppointmentStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAppointmentStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check appointment status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentStatus.View"),
        PublicAPI,
        Route("/Scheduling/AppointmentStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAppointmentStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create appointment status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/AppointmentStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new appointment status.")]
    public partial class CreateAppointmentStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert appointment status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Scheduling/AppointmentStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing appointment status (as needed).")]
    public partial class UpsertAppointmentStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update appointment status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/AppointmentStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing appointment status.")]
    public partial class UpdateAppointmentStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate appointment status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/AppointmentStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific appointment status from the system [Soft-Delete]")]
    public partial class DeactivateAppointmentStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate appointment status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentStatus.Deactivate"),
        PublicAPI,
        Route("/Scheduling/AppointmentStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific appointment status from the system [Soft-Delete]")]
    public partial class DeactivateAppointmentStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate appointment status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/AppointmentStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific appointment status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppointmentStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate appointment status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentStatus.Reactivate"),
        PublicAPI,
        Route("/Scheduling/AppointmentStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific appointment status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppointmentStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete appointment status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/AppointmentStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific appointment status from the system [Hard-Delete]")]
    public partial class DeleteAppointmentStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete appointment status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.AppointmentStatus.Delete"),
        PublicAPI,
        Route("/Scheduling/AppointmentStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific appointment status from the system [Hard-Delete]")]
    public partial class DeleteAppointmentStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear appointment status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/AppointmentStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all appointment status calls.")]
    public class ClearAppointmentStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AppointmentStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAppointmentStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, AppointmentStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AppointmentStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppointmentStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAppointmentStatusesForConnect request)
        {
            return await Workflows.AppointmentStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppointmentStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentStatusesDigest request)
        {
            return await Workflows.AppointmentStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAppointmentStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AppointmentStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppointmentStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AppointmentStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppointmentStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.AppointmentStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppointmentStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppointmentStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.AppointmentStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAppointmentStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppointmentStatusExistsByID request)
        {
            return await Workflows.AppointmentStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppointmentStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppointmentStatusExistsByKey request)
        {
            return await Workflows.AppointmentStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppointmentStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppointmentStatusExistsByName request)
        {
            return await Workflows.AppointmentStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppointmentStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppointmentStatusExistsByDisplayName request)
        {
            return await Workflows.AppointmentStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAppointmentStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAppointmentStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentStatusDataAsync,
                    () => Workflows.AppointmentStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAppointmentStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAppointmentStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentStatusDataAsync,
                    () => Workflows.AppointmentStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAppointmentStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAppointmentStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentStatusDataAsync,
                    () => Workflows.AppointmentStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAppointmentStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppointmentStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentStatusDataAsync,
                    () => Workflows.AppointmentStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAppointmentStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppointmentStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentStatusDataAsync,
                    () => Workflows.AppointmentStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAppointmentStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppointmentStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentStatusDataAsync,
                    () => Workflows.AppointmentStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAppointmentStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppointmentStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentStatusDataAsync,
                    () => Workflows.AppointmentStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAppointmentStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppointmentStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentStatusDataAsync,
                    () => Workflows.AppointmentStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAppointmentStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppointmentStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppointmentStatusDataAsync,
                    () => Workflows.AppointmentStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAppointmentStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAppointmentStatusCache request)
        {
            await ClearCachedAppointmentStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAppointmentStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAppointmentStatuses>(string.Empty),
                    UrnId.Create<GetAppointmentStatusByID>(string.Empty),
                    UrnId.Create<GetAppointmentStatusByKey>(string.Empty),
                    UrnId.Create<GetAppointmentStatusByName>(string.Empty),
                    UrnId.Create<CheckAppointmentStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckAppointmentStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckAppointmentStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckAppointmentStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AppointmentStatusService : AppointmentStatusServiceBase { }
}
