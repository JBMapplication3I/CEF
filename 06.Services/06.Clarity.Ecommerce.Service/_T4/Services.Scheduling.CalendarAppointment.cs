// <autogenerated>
// <copyright file="CalendarAppointmentService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the calendar appointment service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of calendar appointments.</summary>
    /// <seealso cref="CalendarAppointmentSearchModel"/>
    /// <seealso cref="IReturn{CalendarAppointmentPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/CalendarAppointments", "GET", Priority = 1,
            Summary = "Use to get a list of calendar appointments")]
    public partial class GetCalendarAppointments : CalendarAppointmentSearchModel, IReturn<CalendarAppointmentPagedResults> { }

    /// <summary>A ServiceStack Route to get calendar appointments for connect.</summary>
    /// <seealso cref="CalendarAppointmentSearchModel"/>
    /// <seealso cref="IReturn{List{CalendarAppointmentModel}}"/>
    [Authenticate, RequiredPermission("Scheduling.CalendarAppointment.View"),
        PublicAPI,
        Route("/Scheduling/CalendarAppointmentsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all calendar appointments")]
    public partial class GetCalendarAppointmentsForConnect : CalendarAppointmentSearchModel, IReturn<List<CalendarAppointmentModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all calendar appointments.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Scheduling.CalendarAppointment.View"),
        PublicAPI,
        Route("/Scheduling/CalendarAppointmentsDigest", "GET",
            Summary = "Use to get a hash representing each calendar appointments")]
    public partial class GetCalendarAppointmentsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get calendar appointment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CalendarAppointmentModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/CalendarAppointment/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar appointment")]
    public partial class GetCalendarAppointmentByID : ImplementsIDBase, IReturn<CalendarAppointmentModel> { }

    /// <summary>A ServiceStack Route to get calendar appointment.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CalendarAppointmentModel}"/>
    [PublicAPI,
        Route("/Scheduling/CalendarAppointment/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar appointment by the custom key")]
    public partial class GetCalendarAppointmentByKey : ImplementsKeyBase, IReturn<CalendarAppointmentModel> { }

    /// <summary>A ServiceStack Route to check calendar appointment exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.CalendarAppointment.View"),
        PublicAPI,
        Route("/Scheduling/CalendarAppointment/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarAppointmentExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar appointment exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scheduling.CalendarAppointment.View"),
        PublicAPI,
        Route("/Scheduling/CalendarAppointment/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarAppointmentExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create calendar appointment.</summary>
    /// <seealso cref="CalendarAppointmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scheduling.CalendarAppointment.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/CalendarAppointment/Create", "POST", Priority = 1,
            Summary = "Use to create a new calendar appointment.")]
    public partial class CreateCalendarAppointment : CalendarAppointmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert calendar appointment.</summary>
    /// <seealso cref="CalendarAppointmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Scheduling/CalendarAppointment/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing calendar appointment (as needed).")]
    public partial class UpsertCalendarAppointment : CalendarAppointmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update calendar appointment.</summary>
    /// <seealso cref="CalendarAppointmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scheduling.CalendarAppointment.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/CalendarAppointment/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing calendar appointment.")]
    public partial class UpdateCalendarAppointment : CalendarAppointmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate calendar appointment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.CalendarAppointment.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/CalendarAppointment/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar appointment from the system [Soft-Delete]")]
    public partial class DeactivateCalendarAppointmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate calendar appointment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.CalendarAppointment.Deactivate"),
        PublicAPI,
        Route("/Scheduling/CalendarAppointment/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar appointment from the system [Soft-Delete]")]
    public partial class DeactivateCalendarAppointmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar appointment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.CalendarAppointment.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/CalendarAppointment/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar appointment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarAppointmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar appointment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.CalendarAppointment.Reactivate"),
        PublicAPI,
        Route("/Scheduling/CalendarAppointment/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar appointment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarAppointmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar appointment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.CalendarAppointment.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scheduling/CalendarAppointment/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific calendar appointment from the system [Hard-Delete]")]
    public partial class DeleteCalendarAppointmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar appointment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scheduling.CalendarAppointment.Delete"),
        PublicAPI,
        Route("/Scheduling/CalendarAppointment/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific calendar appointment from the system [Hard-Delete]")]
    public partial class DeleteCalendarAppointmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear calendar appointment cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scheduling/CalendarAppointment/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all calendar appointment calls.")]
    public class ClearCalendarAppointmentCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CalendarAppointmentServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCalendarAppointments"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarAppointments request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICalendarAppointmentModel, CalendarAppointmentModel, ICalendarAppointmentSearchModel, CalendarAppointmentPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CalendarAppointments)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarAppointmentsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCalendarAppointmentsForConnect request)
        {
            return await Workflows.CalendarAppointments.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarAppointmentsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarAppointmentsDigest request)
        {
            return await Workflows.CalendarAppointments.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCalendarAppointmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarAppointmentByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CalendarAppointments, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarAppointmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarAppointmentByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CalendarAppointments, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCalendarAppointmentExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarAppointmentExistsByID request)
        {
            return await Workflows.CalendarAppointments.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarAppointmentExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarAppointmentExistsByKey request)
        {
            return await Workflows.CalendarAppointments.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCalendarAppointment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCalendarAppointment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarAppointmentDataAsync,
                    () => Workflows.CalendarAppointments.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCalendarAppointment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCalendarAppointment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarAppointmentDataAsync,
                    () => Workflows.CalendarAppointments.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCalendarAppointment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCalendarAppointment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarAppointmentDataAsync,
                    () => Workflows.CalendarAppointments.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCalendarAppointmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarAppointmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarAppointmentDataAsync,
                    () => Workflows.CalendarAppointments.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCalendarAppointmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarAppointmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarAppointmentDataAsync,
                    () => Workflows.CalendarAppointments.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCalendarAppointmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarAppointmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarAppointmentDataAsync,
                    () => Workflows.CalendarAppointments.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCalendarAppointmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarAppointmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarAppointmentDataAsync,
                    () => Workflows.CalendarAppointments.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCalendarAppointmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarAppointmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarAppointmentDataAsync,
                    () => Workflows.CalendarAppointments.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCalendarAppointmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarAppointmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarAppointmentDataAsync,
                    () => Workflows.CalendarAppointments.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCalendarAppointmentCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCalendarAppointmentCache request)
        {
            await ClearCachedCalendarAppointmentDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCalendarAppointmentDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCalendarAppointments>(string.Empty),
                    UrnId.Create<GetCalendarAppointmentByID>(string.Empty),
                    UrnId.Create<GetCalendarAppointmentByKey>(string.Empty),
                    UrnId.Create<CheckCalendarAppointmentExistsByID>(string.Empty),
                    UrnId.Create<CheckCalendarAppointmentExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CalendarAppointmentService : CalendarAppointmentServiceBase { }
}
