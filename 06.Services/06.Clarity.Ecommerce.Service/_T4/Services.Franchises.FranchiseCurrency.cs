// <autogenerated>
// <copyright file="FranchiseCurrencyService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise currency service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise currencies.</summary>
    /// <seealso cref="FranchiseCurrencySearchModel"/>
    /// <seealso cref="IReturn{FranchiseCurrencyPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseCurrencies", "GET", Priority = 1,
            Summary = "Use to get a list of franchise currencies")]
    public partial class GetFranchiseCurrencies : FranchiseCurrencySearchModel, IReturn<FranchiseCurrencyPagedResults> { }

    /// <summary>A ServiceStack Route to get franchise currencies for connect.</summary>
    /// <seealso cref="FranchiseCurrencySearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseCurrencyModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCurrency.View"),
        PublicAPI,
        Route("/Franchises/FranchiseCurrenciesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise currencies")]
    public partial class GetFranchiseCurrenciesForConnect : FranchiseCurrencySearchModel, IReturn<List<FranchiseCurrencyModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise currencies.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCurrency.View"),
        PublicAPI,
        Route("/Franchises/FranchiseCurrenciesDigest", "GET",
            Summary = "Use to get a hash representing each franchise currencies")]
    public partial class GetFranchiseCurrenciesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseCurrencyModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseCurrency/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise currency")]
    public partial class GetFranchiseCurrencyByID : ImplementsIDBase, IReturn<FranchiseCurrencyModel> { }

    /// <summary>A ServiceStack Route to get franchise currency.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseCurrencyModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseCurrency/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise currency by the custom key")]
    public partial class GetFranchiseCurrencyByKey : ImplementsKeyBase, IReturn<FranchiseCurrencyModel> { }

    /// <summary>A ServiceStack Route to check franchise currency exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCurrency.View"),
        PublicAPI,
        Route("/Franchises/FranchiseCurrency/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseCurrencyExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise currency exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCurrency.View"),
        PublicAPI,
        Route("/Franchises/FranchiseCurrency/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseCurrencyExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise currency.</summary>
    /// <seealso cref="FranchiseCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCurrency.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseCurrency/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise currency.")]
    public partial class CreateFranchiseCurrency : FranchiseCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise currency.</summary>
    /// <seealso cref="FranchiseCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseCurrency/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise currency (as needed).")]
    public partial class UpsertFranchiseCurrency : FranchiseCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise currency.</summary>
    /// <seealso cref="FranchiseCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCurrency.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseCurrency/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise currency.")]
    public partial class UpdateFranchiseCurrency : FranchiseCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCurrency.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseCurrency/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise currency from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCurrency.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseCurrency/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise currency from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCurrency.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseCurrency/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise currency from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCurrency.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseCurrency/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise currency from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCurrency.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseCurrency/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise currency from the system [Hard-Delete]")]
    public partial class DeleteFranchiseCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseCurrency.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseCurrency/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise currency from the system [Hard-Delete]")]
    public partial class DeleteFranchiseCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise currency cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseCurrency/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise currency calls.")]
    public class ClearFranchiseCurrencyCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseCurrencyServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseCurrencies"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseCurrencies request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseCurrencyModel, FranchiseCurrencyModel, IFranchiseCurrencySearchModel, FranchiseCurrencyPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseCurrencies)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseCurrenciesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseCurrenciesForConnect request)
        {
            return await Workflows.FranchiseCurrencies.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseCurrenciesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseCurrenciesDigest request)
        {
            return await Workflows.FranchiseCurrencies.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseCurrencyByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseCurrencies, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseCurrencyByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseCurrencies, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseCurrencyExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseCurrencyExistsByID request)
        {
            return await Workflows.FranchiseCurrencies.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseCurrencyExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseCurrencyExistsByKey request)
        {
            return await Workflows.FranchiseCurrencies.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCurrencyDataAsync,
                    () => Workflows.FranchiseCurrencies.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCurrencyDataAsync,
                    () => Workflows.FranchiseCurrencies.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCurrencyDataAsync,
                    () => Workflows.FranchiseCurrencies.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCurrencyDataAsync,
                    () => Workflows.FranchiseCurrencies.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCurrencyDataAsync,
                    () => Workflows.FranchiseCurrencies.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCurrencyDataAsync,
                    () => Workflows.FranchiseCurrencies.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCurrencyDataAsync,
                    () => Workflows.FranchiseCurrencies.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCurrencyDataAsync,
                    () => Workflows.FranchiseCurrencies.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseCurrencyDataAsync,
                    () => Workflows.FranchiseCurrencies.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseCurrencyCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseCurrencyCache request)
        {
            await ClearCachedFranchiseCurrencyDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseCurrencyDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseCurrencies>(string.Empty),
                    UrnId.Create<GetFranchiseCurrencyByID>(string.Empty),
                    UrnId.Create<GetFranchiseCurrencyByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseCurrencyExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseCurrencyExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseCurrencyService : FranchiseCurrencyServiceBase { }
}
