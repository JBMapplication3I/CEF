// <autogenerated>
// <copyright file="BrandCategoryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the brand category service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of brand categories.</summary>
    /// <seealso cref="BrandCategorySearchModel"/>
    /// <seealso cref="IReturn{BrandCategoryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandCategories", "GET", Priority = 1,
            Summary = "Use to get a list of brand categories")]
    public partial class GetBrandCategories : BrandCategorySearchModel, IReturn<BrandCategoryPagedResults> { }

    /// <summary>A ServiceStack Route to get brand categories for connect.</summary>
    /// <seealso cref="BrandCategorySearchModel"/>
    /// <seealso cref="IReturn{List{BrandCategoryModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandCategory.View"),
        PublicAPI,
        Route("/Brands/BrandCategoriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all brand categories")]
    public partial class GetBrandCategoriesForConnect : BrandCategorySearchModel, IReturn<List<BrandCategoryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all brand categories.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandCategory.View"),
        PublicAPI,
        Route("/Brands/BrandCategoriesDigest", "GET",
            Summary = "Use to get a hash representing each brand categories")]
    public partial class GetBrandCategoriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get brand category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{BrandCategoryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandCategory/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific brand category")]
    public partial class GetBrandCategoryByID : ImplementsIDBase, IReturn<BrandCategoryModel> { }

    /// <summary>A ServiceStack Route to get brand category.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{BrandCategoryModel}"/>
    [PublicAPI,
        Route("/Brands/BrandCategory/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific brand category by the custom key")]
    public partial class GetBrandCategoryByKey : ImplementsKeyBase, IReturn<BrandCategoryModel> { }

    /// <summary>A ServiceStack Route to check brand category exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandCategory.View"),
        PublicAPI,
        Route("/Brands/BrandCategory/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandCategoryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand category exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandCategory.View"),
        PublicAPI,
        Route("/Brands/BrandCategory/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandCategoryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create brand category.</summary>
    /// <seealso cref="BrandCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandCategory.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandCategory/Create", "POST", Priority = 1,
            Summary = "Use to create a new brand category.")]
    public partial class CreateBrandCategory : BrandCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert brand category.</summary>
    /// <seealso cref="BrandCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Brands/BrandCategory/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing brand category (as needed).")]
    public partial class UpsertBrandCategory : BrandCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update brand category.</summary>
    /// <seealso cref="BrandCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandCategory.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandCategory/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing brand category.")]
    public partial class UpdateBrandCategory : BrandCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate brand category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandCategory.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandCategory/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand category from the system [Soft-Delete]")]
    public partial class DeactivateBrandCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate brand category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandCategory.Deactivate"),
        PublicAPI,
        Route("/Brands/BrandCategory/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand category from the system [Soft-Delete]")]
    public partial class DeactivateBrandCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandCategory.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandCategory/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandCategory.Reactivate"),
        PublicAPI,
        Route("/Brands/BrandCategory/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandCategory.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandCategory/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific brand category from the system [Hard-Delete]")]
    public partial class DeleteBrandCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandCategory.Delete"),
        PublicAPI,
        Route("/Brands/BrandCategory/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific brand category from the system [Hard-Delete]")]
    public partial class DeleteBrandCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear brand category cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandCategory/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all brand category calls.")]
    public class ClearBrandCategoryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BrandCategoryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBrandCategories"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandCategories request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IBrandCategoryModel, BrandCategoryModel, IBrandCategorySearchModel, BrandCategoryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BrandCategories)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandCategoriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBrandCategoriesForConnect request)
        {
            return await Workflows.BrandCategories.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandCategoriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandCategoriesDigest request)
        {
            return await Workflows.BrandCategories.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBrandCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandCategoryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BrandCategories, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandCategoryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BrandCategories, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBrandCategoryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandCategoryExistsByID request)
        {
            return await Workflows.BrandCategories.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandCategoryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandCategoryExistsByKey request)
        {
            return await Workflows.BrandCategories.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBrandCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBrandCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandCategoryDataAsync,
                    () => Workflows.BrandCategories.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBrandCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBrandCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandCategoryDataAsync,
                    () => Workflows.BrandCategories.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBrandCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBrandCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandCategoryDataAsync,
                    () => Workflows.BrandCategories.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBrandCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandCategoryDataAsync,
                    () => Workflows.BrandCategories.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBrandCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandCategoryDataAsync,
                    () => Workflows.BrandCategories.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBrandCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandCategoryDataAsync,
                    () => Workflows.BrandCategories.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBrandCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandCategoryDataAsync,
                    () => Workflows.BrandCategories.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBrandCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandCategoryDataAsync,
                    () => Workflows.BrandCategories.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBrandCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandCategoryDataAsync,
                    () => Workflows.BrandCategories.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBrandCategoryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBrandCategoryCache request)
        {
            await ClearCachedBrandCategoryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBrandCategoryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBrandCategories>(string.Empty),
                    UrnId.Create<GetBrandCategoryByID>(string.Empty),
                    UrnId.Create<GetBrandCategoryByKey>(string.Empty),
                    UrnId.Create<CheckBrandCategoryExistsByID>(string.Empty),
                    UrnId.Create<CheckBrandCategoryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BrandCategoryService : BrandCategoryServiceBase { }
}
