// <autogenerated>
// <copyright file="PurchaseOrderEventService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the purchase order event service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of purchase order events.</summary>
    /// <seealso cref="PurchaseOrderEventSearchModel"/>
    /// <seealso cref="IReturn{PurchaseOrderEventPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderEvents", "GET", Priority = 1,
            Summary = "Use to get a list of purchase order events")]
    public partial class GetPurchaseOrderEvents : PurchaseOrderEventSearchModel, IReturn<PurchaseOrderEventPagedResults> { }

    /// <summary>A ServiceStack Route to get purchase order events for connect.</summary>
    /// <seealso cref="PurchaseOrderEventSearchModel"/>
    /// <seealso cref="IReturn{List{PurchaseOrderEventModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderEvent.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderEventsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all purchase order events")]
    public partial class GetPurchaseOrderEventsForConnect : PurchaseOrderEventSearchModel, IReturn<List<PurchaseOrderEventModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all purchase order events.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderEvent.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderEventsDigest", "GET",
            Summary = "Use to get a hash representing each purchase order events")]
    public partial class GetPurchaseOrderEventsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get purchase order event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PurchaseOrderEventModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderEvent/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order event")]
    public partial class GetPurchaseOrderEventByID : ImplementsIDBase, IReturn<PurchaseOrderEventModel> { }

    /// <summary>A ServiceStack Route to get purchase order event.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PurchaseOrderEventModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderEvent/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order event by the custom key")]
    public partial class GetPurchaseOrderEventByKey : ImplementsKeyBase, IReturn<PurchaseOrderEventModel> { }

    /// <summary>A ServiceStack Route to get purchase order event.</summary>
    /// <seealso cref="IReturn{PurchaseOrderEventModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderEvent/Name", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order event by the name")]
    public partial class GetPurchaseOrderEventByName : ImplementsNameBase, IReturn<PurchaseOrderEventModel> { }

    /// <summary>A ServiceStack Route to check purchase order event exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderEvent.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderEvent/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderEventExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order event exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderEvent.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderEvent/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderEventExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order event exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderEvent.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderEvent/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderEventExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create purchase order event.</summary>
    /// <seealso cref="PurchaseOrderEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderEvent.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderEvent/Create", "POST", Priority = 1,
            Summary = "Use to create a new purchase order event.")]
    public partial class CreatePurchaseOrderEvent : PurchaseOrderEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert purchase order event.</summary>
    /// <seealso cref="PurchaseOrderEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderEvent/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing purchase order event (as needed).")]
    public partial class UpsertPurchaseOrderEvent : PurchaseOrderEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update purchase order event.</summary>
    /// <seealso cref="PurchaseOrderEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderEvent.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderEvent/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing purchase order event.")]
    public partial class UpdatePurchaseOrderEvent : PurchaseOrderEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate purchase order event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderEvent.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderEvent/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order event from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate purchase order event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderEvent.Deactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderEvent/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order event from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderEvent.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderEvent/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order event from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderEvent.Reactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderEvent/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order event from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderEvent.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderEvent/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific purchase order event from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderEvent.Delete"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderEvent/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific purchase order event from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear purchase order event cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderEvent/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all purchase order event calls.")]
    public class ClearPurchaseOrderEventCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PurchaseOrderEventServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPurchaseOrderEvents"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderEvents request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPurchaseOrderEventModel, PurchaseOrderEventModel, IPurchaseOrderEventSearchModel, PurchaseOrderEventPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PurchaseOrderEvents)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderEventsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPurchaseOrderEventsForConnect request)
        {
            return await Workflows.PurchaseOrderEvents.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderEventsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderEventsDigest request)
        {
            return await Workflows.PurchaseOrderEvents.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPurchaseOrderEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderEventByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PurchaseOrderEvents, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderEventByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PurchaseOrderEvents, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderEventByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderEventByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.PurchaseOrderEvents, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPurchaseOrderEventExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderEventExistsByID request)
        {
            return await Workflows.PurchaseOrderEvents.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderEventExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderEventExistsByKey request)
        {
            return await Workflows.PurchaseOrderEvents.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderEventExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderEventExistsByName request)
        {
            return await Workflows.PurchaseOrderEvents.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPurchaseOrderEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPurchaseOrderEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderEventDataAsync,
                    () => Workflows.PurchaseOrderEvents.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePurchaseOrderEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePurchaseOrderEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderEventDataAsync,
                    () => Workflows.PurchaseOrderEvents.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePurchaseOrderEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePurchaseOrderEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderEventDataAsync,
                    () => Workflows.PurchaseOrderEvents.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderEventDataAsync,
                    () => Workflows.PurchaseOrderEvents.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderEventDataAsync,
                    () => Workflows.PurchaseOrderEvents.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderEventDataAsync,
                    () => Workflows.PurchaseOrderEvents.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderEventDataAsync,
                    () => Workflows.PurchaseOrderEvents.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderEventDataAsync,
                    () => Workflows.PurchaseOrderEvents.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderEventDataAsync,
                    () => Workflows.PurchaseOrderEvents.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPurchaseOrderEventCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPurchaseOrderEventCache request)
        {
            await ClearCachedPurchaseOrderEventDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPurchaseOrderEventDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPurchaseOrderEvents>(string.Empty),
                    UrnId.Create<GetPurchaseOrderEventByID>(string.Empty),
                    UrnId.Create<GetPurchaseOrderEventByKey>(string.Empty),
                    UrnId.Create<GetPurchaseOrderEventByName>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderEventExistsByID>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderEventExistsByKey>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderEventExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PurchaseOrderEventService : PurchaseOrderEventServiceBase { }
}
