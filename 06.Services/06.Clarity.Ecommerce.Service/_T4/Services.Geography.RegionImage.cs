// <autogenerated>
// <copyright file="RegionImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the region image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of region images.</summary>
    /// <seealso cref="RegionImageSearchModel"/>
    /// <seealso cref="IReturn{RegionImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/RegionImages", "GET", Priority = 1,
            Summary = "Use to get a list of region images")]
    public partial class GetRegionImages : RegionImageSearchModel, IReturn<RegionImagePagedResults> { }

    /// <summary>A ServiceStack Route to get region images for connect.</summary>
    /// <seealso cref="RegionImageSearchModel"/>
    /// <seealso cref="IReturn{List{RegionImageModel}}"/>
    [Authenticate, RequiredPermission("Geography.RegionImage.View"),
        PublicAPI,
        Route("/Geography/RegionImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all region images")]
    public partial class GetRegionImagesForConnect : RegionImageSearchModel, IReturn<List<RegionImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all region images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.RegionImage.View"),
        PublicAPI,
        Route("/Geography/RegionImagesDigest", "GET",
            Summary = "Use to get a hash representing each region images")]
    public partial class GetRegionImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get region image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{RegionImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/RegionImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific region image")]
    public partial class GetRegionImageByID : ImplementsIDBase, IReturn<RegionImageModel> { }

    /// <summary>A ServiceStack Route to get region image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{RegionImageModel}"/>
    [PublicAPI,
        Route("/Geography/RegionImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific region image by the custom key")]
    public partial class GetRegionImageByKey : ImplementsKeyBase, IReturn<RegionImageModel> { }

    /// <summary>A ServiceStack Route to get region image.</summary>
    /// <seealso cref="IReturn{RegionImageModel}"/>
    [PublicAPI,
        Route("/Geography/RegionImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific region image by the name")]
    public partial class GetRegionImageByName : ImplementsNameBase, IReturn<RegionImageModel> { }

    /// <summary>A ServiceStack Route to check region image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.RegionImage.View"),
        PublicAPI,
        Route("/Geography/RegionImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckRegionImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check region image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.RegionImage.View"),
        PublicAPI,
        Route("/Geography/RegionImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckRegionImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check region image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.RegionImage.View"),
        PublicAPI,
        Route("/Geography/RegionImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckRegionImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create region image.</summary>
    /// <seealso cref="RegionImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.RegionImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new region image.")]
    public partial class CreateRegionImage : RegionImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert region image.</summary>
    /// <seealso cref="RegionImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/RegionImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing region image (as needed).")]
    public partial class UpsertRegionImage : RegionImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update region image.</summary>
    /// <seealso cref="RegionImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.RegionImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing region image.")]
    public partial class UpdateRegionImage : RegionImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate region image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific region image from the system [Soft-Delete]")]
    public partial class DeactivateRegionImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate region image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionImage.Deactivate"),
        PublicAPI,
        Route("/Geography/RegionImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific region image from the system [Soft-Delete]")]
    public partial class DeactivateRegionImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate region image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific region image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRegionImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate region image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionImage.Reactivate"),
        PublicAPI,
        Route("/Geography/RegionImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific region image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRegionImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete region image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific region image from the system [Hard-Delete]")]
    public partial class DeleteRegionImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete region image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionImage.Delete"),
        PublicAPI,
        Route("/Geography/RegionImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific region image from the system [Hard-Delete]")]
    public partial class DeleteRegionImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear region image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/RegionImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all region image calls.")]
    public class ClearRegionImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class RegionImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetRegionImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IRegionImageModel, RegionImageModel, IRegionImageSearchModel, RegionImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.RegionImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRegionImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetRegionImagesForConnect request)
        {
            return await Workflows.RegionImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRegionImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionImagesDigest request)
        {
            return await Workflows.RegionImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetRegionImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.RegionImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRegionImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.RegionImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRegionImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.RegionImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckRegionImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRegionImageExistsByID request)
        {
            return await Workflows.RegionImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRegionImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRegionImageExistsByKey request)
        {
            return await Workflows.RegionImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRegionImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRegionImageExistsByName request)
        {
            return await Workflows.RegionImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertRegionImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertRegionImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionImageDataAsync,
                    () => Workflows.RegionImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateRegionImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateRegionImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionImageDataAsync,
                    () => Workflows.RegionImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateRegionImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateRegionImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionImageDataAsync,
                    () => Workflows.RegionImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateRegionImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRegionImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionImageDataAsync,
                    () => Workflows.RegionImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateRegionImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRegionImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionImageDataAsync,
                    () => Workflows.RegionImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateRegionImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRegionImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionImageDataAsync,
                    () => Workflows.RegionImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateRegionImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRegionImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionImageDataAsync,
                    () => Workflows.RegionImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteRegionImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRegionImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionImageDataAsync,
                    () => Workflows.RegionImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteRegionImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRegionImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionImageDataAsync,
                    () => Workflows.RegionImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearRegionImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearRegionImageCache request)
        {
            await ClearCachedRegionImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedRegionImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetRegionImages>(string.Empty),
                    UrnId.Create<GetRegionImageByID>(string.Empty),
                    UrnId.Create<GetRegionImageByKey>(string.Empty),
                    UrnId.Create<GetRegionImageByName>(string.Empty),
                    UrnId.Create<CheckRegionImageExistsByID>(string.Empty),
                    UrnId.Create<CheckRegionImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckRegionImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class RegionImageService : RegionImageServiceBase { }
}
