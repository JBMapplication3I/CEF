// <autogenerated>
// <copyright file="MessageAttachmentService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the message attachment service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of message attachments.</summary>
    /// <seealso cref="MessageAttachmentSearchModel"/>
    /// <seealso cref="IReturn{MessageAttachmentPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/MessageAttachments", "GET", Priority = 1,
            Summary = "Use to get a list of message attachments")]
    public partial class GetMessageAttachments : MessageAttachmentSearchModel, IReturn<MessageAttachmentPagedResults> { }

    /// <summary>A ServiceStack Route to get message attachments for connect.</summary>
    /// <seealso cref="MessageAttachmentSearchModel"/>
    /// <seealso cref="IReturn{List{MessageAttachmentModel}}"/>
    [Authenticate, RequiredPermission("Messaging.MessageAttachment.View"),
        PublicAPI,
        Route("/Messaging/MessageAttachmentsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all message attachments")]
    public partial class GetMessageAttachmentsForConnect : MessageAttachmentSearchModel, IReturn<List<MessageAttachmentModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all message attachments.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Messaging.MessageAttachment.View"),
        PublicAPI,
        Route("/Messaging/MessageAttachmentsDigest", "GET",
            Summary = "Use to get a hash representing each message attachments")]
    public partial class GetMessageAttachmentsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get message attachment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{MessageAttachmentModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/MessageAttachment/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific message attachment")]
    public partial class GetMessageAttachmentByID : ImplementsIDBase, IReturn<MessageAttachmentModel> { }

    /// <summary>A ServiceStack Route to get message attachment.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{MessageAttachmentModel}"/>
    [PublicAPI,
        Route("/Messaging/MessageAttachment/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific message attachment by the custom key")]
    public partial class GetMessageAttachmentByKey : ImplementsKeyBase, IReturn<MessageAttachmentModel> { }

    /// <summary>A ServiceStack Route to get message attachment.</summary>
    /// <seealso cref="IReturn{MessageAttachmentModel}"/>
    [PublicAPI,
        Route("/Messaging/MessageAttachment/Name", "GET", Priority = 1,
            Summary = "Use to get a specific message attachment by the name")]
    public partial class GetMessageAttachmentByName : ImplementsNameBase, IReturn<MessageAttachmentModel> { }

    /// <summary>A ServiceStack Route to get message attachment.</summary>
    /// <seealso cref="IReturn{MessageAttachmentModel}"/>
    [PublicAPI,
        Route("/Messaging/MessageAttachment/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific message attachment by the SEO URL")]
    public partial class GetMessageAttachmentBySeoUrl : ImplementsSeoUrlBase, IReturn<MessageAttachmentModel> { }

    /// <summary>A ServiceStack Route to check message attachment exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.MessageAttachment.View"),
        PublicAPI,
        Route("/Messaging/MessageAttachment/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckMessageAttachmentExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check message attachment exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.MessageAttachment.View"),
        PublicAPI,
        Route("/Messaging/MessageAttachment/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckMessageAttachmentExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check message attachment exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.MessageAttachment.View"),
        PublicAPI,
        Route("/Messaging/MessageAttachment/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckMessageAttachmentExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check message attachment exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Messaging.MessageAttachment.View"),
        PublicAPI,
        Route("/Messaging/MessageAttachment/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckMessageAttachmentExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create message attachment.</summary>
    /// <seealso cref="MessageAttachmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.MessageAttachment.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/MessageAttachment/Create", "POST", Priority = 1,
            Summary = "Use to create a new message attachment.")]
    public partial class CreateMessageAttachment : MessageAttachmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert message attachment.</summary>
    /// <seealso cref="MessageAttachmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Messaging/MessageAttachment/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing message attachment (as needed).")]
    public partial class UpsertMessageAttachment : MessageAttachmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update message attachment.</summary>
    /// <seealso cref="MessageAttachmentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Messaging.MessageAttachment.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/MessageAttachment/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing message attachment.")]
    public partial class UpdateMessageAttachment : MessageAttachmentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate message attachment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.MessageAttachment.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/MessageAttachment/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific message attachment from the system [Soft-Delete]")]
    public partial class DeactivateMessageAttachmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate message attachment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.MessageAttachment.Deactivate"),
        PublicAPI,
        Route("/Messaging/MessageAttachment/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific message attachment from the system [Soft-Delete]")]
    public partial class DeactivateMessageAttachmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate message attachment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.MessageAttachment.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/MessageAttachment/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific message attachment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateMessageAttachmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate message attachment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.MessageAttachment.Reactivate"),
        PublicAPI,
        Route("/Messaging/MessageAttachment/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific message attachment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateMessageAttachmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete message attachment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.MessageAttachment.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Messaging/MessageAttachment/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific message attachment from the system [Hard-Delete]")]
    public partial class DeleteMessageAttachmentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete message attachment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Messaging.MessageAttachment.Delete"),
        PublicAPI,
        Route("/Messaging/MessageAttachment/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific message attachment from the system [Hard-Delete]")]
    public partial class DeleteMessageAttachmentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear message attachment cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Messaging/MessageAttachment/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all message attachment calls.")]
    public class ClearMessageAttachmentCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class MessageAttachmentServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetMessageAttachments"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMessageAttachments request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IMessageAttachmentModel, MessageAttachmentModel, IMessageAttachmentSearchModel, MessageAttachmentPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.MessageAttachments)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMessageAttachmentsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetMessageAttachmentsForConnect request)
        {
            return await Workflows.MessageAttachments.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMessageAttachmentsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMessageAttachmentsDigest request)
        {
            return await Workflows.MessageAttachments.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetMessageAttachmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMessageAttachmentByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.MessageAttachments, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMessageAttachmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMessageAttachmentByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.MessageAttachments, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMessageAttachmentByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMessageAttachmentByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.MessageAttachments, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMessageAttachmentBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMessageAttachmentBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.MessageAttachments, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckMessageAttachmentExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMessageAttachmentExistsByID request)
        {
            return await Workflows.MessageAttachments.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckMessageAttachmentExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMessageAttachmentExistsByKey request)
        {
            return await Workflows.MessageAttachments.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckMessageAttachmentExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMessageAttachmentExistsByName request)
        {
            return await Workflows.MessageAttachments.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckMessageAttachmentExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMessageAttachmentExistsBySeoUrl request)
        {
            return await Workflows.MessageAttachments.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertMessageAttachment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertMessageAttachment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageAttachmentDataAsync,
                    () => Workflows.MessageAttachments.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateMessageAttachment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateMessageAttachment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageAttachmentDataAsync,
                    () => Workflows.MessageAttachments.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateMessageAttachment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateMessageAttachment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageAttachmentDataAsync,
                    () => Workflows.MessageAttachments.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateMessageAttachmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateMessageAttachmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageAttachmentDataAsync,
                    () => Workflows.MessageAttachments.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateMessageAttachmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateMessageAttachmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageAttachmentDataAsync,
                    () => Workflows.MessageAttachments.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateMessageAttachmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateMessageAttachmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageAttachmentDataAsync,
                    () => Workflows.MessageAttachments.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateMessageAttachmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateMessageAttachmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageAttachmentDataAsync,
                    () => Workflows.MessageAttachments.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteMessageAttachmentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteMessageAttachmentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageAttachmentDataAsync,
                    () => Workflows.MessageAttachments.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteMessageAttachmentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteMessageAttachmentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMessageAttachmentDataAsync,
                    () => Workflows.MessageAttachments.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearMessageAttachmentCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearMessageAttachmentCache request)
        {
            await ClearCachedMessageAttachmentDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedMessageAttachmentDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetMessageAttachments>(string.Empty),
                    UrnId.Create<GetMessageAttachmentByID>(string.Empty),
                    UrnId.Create<GetMessageAttachmentByKey>(string.Empty),
                    UrnId.Create<GetMessageAttachmentByName>(string.Empty),
                    UrnId.Create<GetMessageAttachmentBySeoUrl>(string.Empty),
                    UrnId.Create<CheckMessageAttachmentExistsByID>(string.Empty),
                    UrnId.Create<CheckMessageAttachmentExistsByKey>(string.Empty),
                    UrnId.Create<CheckMessageAttachmentExistsByName>(string.Empty),
                    UrnId.Create<CheckMessageAttachmentExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class MessageAttachmentService : MessageAttachmentServiceBase { }
}
