// <autogenerated>
// <copyright file="AppliedPurchaseOrderDiscountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the applied purchase order discount service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of applied purchase order discounts.</summary>
    /// <seealso cref="AppliedPurchaseOrderDiscountSearchModel"/>
    /// <seealso cref="IReturn{AppliedPurchaseOrderDiscountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedPurchaseOrderDiscounts", "GET", Priority = 1,
            Summary = "Use to get a list of applied purchase order discounts")]
    public partial class GetAppliedPurchaseOrderDiscounts : AppliedPurchaseOrderDiscountSearchModel, IReturn<AppliedPurchaseOrderDiscountPagedResults> { }

    /// <summary>A ServiceStack Route to get applied purchase order discounts for connect.</summary>
    /// <seealso cref="AppliedPurchaseOrderDiscountSearchModel"/>
    /// <seealso cref="IReturn{List{AppliedPurchaseOrderDiscountModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderDiscountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all applied purchase order discounts")]
    public partial class GetAppliedPurchaseOrderDiscountsForConnect : AppliedPurchaseOrderDiscountSearchModel, IReturn<List<AppliedPurchaseOrderDiscountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all applied purchase order discounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderDiscountsDigest", "GET",
            Summary = "Use to get a hash representing each applied purchase order discounts")]
    public partial class GetAppliedPurchaseOrderDiscountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get applied purchase order discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AppliedPurchaseOrderDiscountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedPurchaseOrderDiscount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific applied purchase order discount")]
    public partial class GetAppliedPurchaseOrderDiscountByID : ImplementsIDBase, IReturn<AppliedPurchaseOrderDiscountModel> { }

    /// <summary>A ServiceStack Route to get applied purchase order discount.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AppliedPurchaseOrderDiscountModel}"/>
    [PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderDiscount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific applied purchase order discount by the custom key")]
    public partial class GetAppliedPurchaseOrderDiscountByKey : ImplementsKeyBase, IReturn<AppliedPurchaseOrderDiscountModel> { }

    /// <summary>A ServiceStack Route to check applied purchase order discount exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderDiscount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedPurchaseOrderDiscountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check applied purchase order discount exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderDiscount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedPurchaseOrderDiscountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create applied purchase order discount.</summary>
    /// <seealso cref="AppliedPurchaseOrderDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderDiscount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderDiscount/Create", "POST", Priority = 1,
            Summary = "Use to create a new applied purchase order discount.")]
    public partial class CreateAppliedPurchaseOrderDiscount : AppliedPurchaseOrderDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert applied purchase order discount.</summary>
    /// <seealso cref="AppliedPurchaseOrderDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderDiscount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing applied purchase order discount (as needed).")]
    public partial class UpsertAppliedPurchaseOrderDiscount : AppliedPurchaseOrderDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update applied purchase order discount.</summary>
    /// <seealso cref="AppliedPurchaseOrderDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderDiscount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderDiscount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing applied purchase order discount.")]
    public partial class UpdateAppliedPurchaseOrderDiscount : AppliedPurchaseOrderDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate applied purchase order discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderDiscount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderDiscount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied purchase order discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedPurchaseOrderDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate applied purchase order discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderDiscount.Deactivate"),
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderDiscount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied purchase order discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedPurchaseOrderDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied purchase order discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderDiscount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderDiscount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied purchase order discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedPurchaseOrderDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied purchase order discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderDiscount.Reactivate"),
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderDiscount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied purchase order discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedPurchaseOrderDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied purchase order discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderDiscount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderDiscount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific applied purchase order discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedPurchaseOrderDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied purchase order discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderDiscount.Delete"),
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderDiscount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific applied purchase order discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedPurchaseOrderDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear applied purchase order discount cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedPurchaseOrderDiscount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all applied purchase order discount calls.")]
    public class ClearAppliedPurchaseOrderDiscountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AppliedPurchaseOrderDiscountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAppliedPurchaseOrderDiscounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedPurchaseOrderDiscounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAppliedPurchaseOrderDiscountModel, AppliedPurchaseOrderDiscountModel, IAppliedPurchaseOrderDiscountSearchModel, AppliedPurchaseOrderDiscountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AppliedPurchaseOrderDiscounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedPurchaseOrderDiscountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAppliedPurchaseOrderDiscountsForConnect request)
        {
            return await Workflows.AppliedPurchaseOrderDiscounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedPurchaseOrderDiscountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedPurchaseOrderDiscountsDigest request)
        {
            return await Workflows.AppliedPurchaseOrderDiscounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAppliedPurchaseOrderDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedPurchaseOrderDiscountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AppliedPurchaseOrderDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedPurchaseOrderDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedPurchaseOrderDiscountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AppliedPurchaseOrderDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAppliedPurchaseOrderDiscountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedPurchaseOrderDiscountExistsByID request)
        {
            return await Workflows.AppliedPurchaseOrderDiscounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppliedPurchaseOrderDiscountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedPurchaseOrderDiscountExistsByKey request)
        {
            return await Workflows.AppliedPurchaseOrderDiscounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAppliedPurchaseOrderDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAppliedPurchaseOrderDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderDiscounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAppliedPurchaseOrderDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAppliedPurchaseOrderDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderDiscounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAppliedPurchaseOrderDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAppliedPurchaseOrderDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderDiscounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAppliedPurchaseOrderDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedPurchaseOrderDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderDiscounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAppliedPurchaseOrderDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedPurchaseOrderDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderDiscounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAppliedPurchaseOrderDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedPurchaseOrderDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderDiscounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAppliedPurchaseOrderDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedPurchaseOrderDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderDiscounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAppliedPurchaseOrderDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedPurchaseOrderDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderDiscounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAppliedPurchaseOrderDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedPurchaseOrderDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderDiscounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAppliedPurchaseOrderDiscountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAppliedPurchaseOrderDiscountCache request)
        {
            await ClearCachedAppliedPurchaseOrderDiscountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAppliedPurchaseOrderDiscountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAppliedPurchaseOrderDiscounts>(string.Empty),
                    UrnId.Create<GetAppliedPurchaseOrderDiscountByID>(string.Empty),
                    UrnId.Create<GetAppliedPurchaseOrderDiscountByKey>(string.Empty),
                    UrnId.Create<CheckAppliedPurchaseOrderDiscountExistsByID>(string.Empty),
                    UrnId.Create<CheckAppliedPurchaseOrderDiscountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AppliedPurchaseOrderDiscountService : AppliedPurchaseOrderDiscountServiceBase { }
}
