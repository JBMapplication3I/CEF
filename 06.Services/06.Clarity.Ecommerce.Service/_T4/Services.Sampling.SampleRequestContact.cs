// <autogenerated>
// <copyright file="SampleRequestContactService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sample request contact service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sample request contacts.</summary>
    /// <seealso cref="SampleRequestContactSearchModel"/>
    /// <seealso cref="IReturn{SampleRequestContactPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestContacts", "GET", Priority = 1,
            Summary = "Use to get a list of sample request contacts")]
    public partial class GetSampleRequestContacts : SampleRequestContactSearchModel, IReturn<SampleRequestContactPagedResults> { }

    /// <summary>A ServiceStack Route to get sample request contacts for connect.</summary>
    /// <seealso cref="SampleRequestContactSearchModel"/>
    /// <seealso cref="IReturn{List{SampleRequestContactModel}}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestContact.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestContactsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sample request contacts")]
    public partial class GetSampleRequestContactsForConnect : SampleRequestContactSearchModel, IReturn<List<SampleRequestContactModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sample request contacts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestContact.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestContactsDigest", "GET",
            Summary = "Use to get a hash representing each sample request contacts")]
    public partial class GetSampleRequestContactsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sample request contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SampleRequestContactModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestContact/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sample request contact")]
    public partial class GetSampleRequestContactByID : ImplementsIDBase, IReturn<SampleRequestContactModel> { }

    /// <summary>A ServiceStack Route to get sample request contact.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SampleRequestContactModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequestContact/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sample request contact by the custom key")]
    public partial class GetSampleRequestContactByKey : ImplementsKeyBase, IReturn<SampleRequestContactModel> { }

    /// <summary>A ServiceStack Route to check sample request contact exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestContact.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestContact/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestContactExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request contact exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestContact.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestContact/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestContactExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sample request contact.</summary>
    /// <seealso cref="SampleRequestContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestContact.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestContact/Create", "POST", Priority = 1,
            Summary = "Use to create a new sample request contact.")]
    public partial class CreateSampleRequestContact : SampleRequestContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sample request contact.</summary>
    /// <seealso cref="SampleRequestContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Sampling/SampleRequestContact/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sample request contact (as needed).")]
    public partial class UpsertSampleRequestContact : SampleRequestContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sample request contact.</summary>
    /// <seealso cref="SampleRequestContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestContact.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestContact/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sample request contact.")]
    public partial class UpdateSampleRequestContact : SampleRequestContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sample request contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestContact.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestContact/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sample request contact from the system [Soft-Delete]")]
    public partial class DeactivateSampleRequestContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sample request contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestContact.Deactivate"),
        PublicAPI,
        Route("/Sampling/SampleRequestContact/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sample request contact from the system [Soft-Delete]")]
    public partial class DeactivateSampleRequestContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sample request contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestContact.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestContact/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sample request contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSampleRequestContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sample request contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestContact.Reactivate"),
        PublicAPI,
        Route("/Sampling/SampleRequestContact/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sample request contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSampleRequestContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sample request contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestContact.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestContact/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sample request contact from the system [Hard-Delete]")]
    public partial class DeleteSampleRequestContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sample request contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestContact.Delete"),
        PublicAPI,
        Route("/Sampling/SampleRequestContact/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sample request contact from the system [Hard-Delete]")]
    public partial class DeleteSampleRequestContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sample request contact cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestContact/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sample request contact calls.")]
    public class ClearSampleRequestContactCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SampleRequestContactServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSampleRequestContacts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestContacts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISampleRequestContactModel, SampleRequestContactModel, ISampleRequestContactSearchModel, SampleRequestContactPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SampleRequestContacts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestContactsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSampleRequestContactsForConnect request)
        {
            return await Workflows.SampleRequestContacts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestContactsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestContactsDigest request)
        {
            return await Workflows.SampleRequestContacts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSampleRequestContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestContactByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SampleRequestContacts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestContactByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SampleRequestContacts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSampleRequestContactExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestContactExistsByID request)
        {
            return await Workflows.SampleRequestContacts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestContactExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestContactExistsByKey request)
        {
            return await Workflows.SampleRequestContacts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSampleRequestContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSampleRequestContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestContactDataAsync,
                    () => Workflows.SampleRequestContacts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSampleRequestContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSampleRequestContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestContactDataAsync,
                    () => Workflows.SampleRequestContacts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSampleRequestContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSampleRequestContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestContactDataAsync,
                    () => Workflows.SampleRequestContacts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSampleRequestContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSampleRequestContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestContactDataAsync,
                    () => Workflows.SampleRequestContacts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSampleRequestContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSampleRequestContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestContactDataAsync,
                    () => Workflows.SampleRequestContacts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSampleRequestContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSampleRequestContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestContactDataAsync,
                    () => Workflows.SampleRequestContacts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSampleRequestContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSampleRequestContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestContactDataAsync,
                    () => Workflows.SampleRequestContacts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSampleRequestContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSampleRequestContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestContactDataAsync,
                    () => Workflows.SampleRequestContacts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSampleRequestContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSampleRequestContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestContactDataAsync,
                    () => Workflows.SampleRequestContacts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSampleRequestContactCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSampleRequestContactCache request)
        {
            await ClearCachedSampleRequestContactDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSampleRequestContactDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSampleRequestContacts>(string.Empty),
                    UrnId.Create<GetSampleRequestContactByID>(string.Empty),
                    UrnId.Create<GetSampleRequestContactByKey>(string.Empty),
                    UrnId.Create<CheckSampleRequestContactExistsByID>(string.Empty),
                    UrnId.Create<CheckSampleRequestContactExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SampleRequestContactService : SampleRequestContactServiceBase { }
}
