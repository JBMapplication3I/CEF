// <autogenerated>
// <copyright file="PriceRuleManufacturerService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the price rule manufacturer service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of price rule manufacturers.</summary>
    /// <seealso cref="PriceRuleManufacturerSearchModel"/>
    /// <seealso cref="IReturn{PriceRuleManufacturerPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleManufacturers", "GET", Priority = 1,
            Summary = "Use to get a list of price rule manufacturers")]
    public partial class GetPriceRuleManufacturers : PriceRuleManufacturerSearchModel, IReturn<PriceRuleManufacturerPagedResults> { }

    /// <summary>A ServiceStack Route to get price rule manufacturers for connect.</summary>
    /// <seealso cref="PriceRuleManufacturerSearchModel"/>
    /// <seealso cref="IReturn{List{PriceRuleManufacturerModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleManufacturer.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleManufacturersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all price rule manufacturers")]
    public partial class GetPriceRuleManufacturersForConnect : PriceRuleManufacturerSearchModel, IReturn<List<PriceRuleManufacturerModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all price rule manufacturers.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleManufacturer.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleManufacturersDigest", "GET",
            Summary = "Use to get a hash representing each price rule manufacturers")]
    public partial class GetPriceRuleManufacturersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get price rule manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PriceRuleManufacturerModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleManufacturer/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule manufacturer")]
    public partial class GetPriceRuleManufacturerByID : ImplementsIDBase, IReturn<PriceRuleManufacturerModel> { }

    /// <summary>A ServiceStack Route to get price rule manufacturer.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PriceRuleManufacturerModel}"/>
    [PublicAPI,
        Route("/Pricing/PriceRuleManufacturer/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific price rule manufacturer by the custom key")]
    public partial class GetPriceRuleManufacturerByKey : ImplementsKeyBase, IReturn<PriceRuleManufacturerModel> { }

    /// <summary>A ServiceStack Route to check price rule manufacturer exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleManufacturer.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleManufacturer/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleManufacturerExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check price rule manufacturer exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleManufacturer.View"),
        PublicAPI,
        Route("/Pricing/PriceRuleManufacturer/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPriceRuleManufacturerExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create price rule manufacturer.</summary>
    /// <seealso cref="PriceRuleManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleManufacturer.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleManufacturer/Create", "POST", Priority = 1,
            Summary = "Use to create a new price rule manufacturer.")]
    public partial class CreatePriceRuleManufacturer : PriceRuleManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert price rule manufacturer.</summary>
    /// <seealso cref="PriceRuleManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Pricing/PriceRuleManufacturer/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing price rule manufacturer (as needed).")]
    public partial class UpsertPriceRuleManufacturer : PriceRuleManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update price rule manufacturer.</summary>
    /// <seealso cref="PriceRuleManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleManufacturer.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleManufacturer/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing price rule manufacturer.")]
    public partial class UpdatePriceRuleManufacturer : PriceRuleManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate price rule manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleManufacturer.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleManufacturer/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule manufacturer from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate price rule manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleManufacturer.Deactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleManufacturer/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific price rule manufacturer from the system [Soft-Delete]")]
    public partial class DeactivatePriceRuleManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleManufacturer.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleManufacturer/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule manufacturer from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate price rule manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleManufacturer.Reactivate"),
        PublicAPI,
        Route("/Pricing/PriceRuleManufacturer/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific price rule manufacturer from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePriceRuleManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleManufacturer.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Pricing/PriceRuleManufacturer/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific price rule manufacturer from the system [Hard-Delete]")]
    public partial class DeletePriceRuleManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete price rule manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Pricing.PriceRuleManufacturer.Delete"),
        PublicAPI,
        Route("/Pricing/PriceRuleManufacturer/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific price rule manufacturer from the system [Hard-Delete]")]
    public partial class DeletePriceRuleManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear price rule manufacturer cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Pricing/PriceRuleManufacturer/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all price rule manufacturer calls.")]
    public class ClearPriceRuleManufacturerCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PriceRuleManufacturerServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPriceRuleManufacturers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleManufacturers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPriceRuleManufacturerModel, PriceRuleManufacturerModel, IPriceRuleManufacturerSearchModel, PriceRuleManufacturerPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PriceRuleManufacturers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleManufacturersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPriceRuleManufacturersForConnect request)
        {
            return await Workflows.PriceRuleManufacturers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleManufacturersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleManufacturersDigest request)
        {
            return await Workflows.PriceRuleManufacturers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPriceRuleManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleManufacturerByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PriceRuleManufacturers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPriceRuleManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPriceRuleManufacturerByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PriceRuleManufacturers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPriceRuleManufacturerExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleManufacturerExistsByID request)
        {
            return await Workflows.PriceRuleManufacturers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPriceRuleManufacturerExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPriceRuleManufacturerExistsByKey request)
        {
            return await Workflows.PriceRuleManufacturers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPriceRuleManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPriceRuleManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleManufacturerDataAsync,
                    () => Workflows.PriceRuleManufacturers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePriceRuleManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePriceRuleManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleManufacturerDataAsync,
                    () => Workflows.PriceRuleManufacturers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePriceRuleManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePriceRuleManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleManufacturerDataAsync,
                    () => Workflows.PriceRuleManufacturers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleManufacturerDataAsync,
                    () => Workflows.PriceRuleManufacturers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePriceRuleManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePriceRuleManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleManufacturerDataAsync,
                    () => Workflows.PriceRuleManufacturers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleManufacturerDataAsync,
                    () => Workflows.PriceRuleManufacturers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePriceRuleManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePriceRuleManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleManufacturerDataAsync,
                    () => Workflows.PriceRuleManufacturers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePriceRuleManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleManufacturerDataAsync,
                    () => Workflows.PriceRuleManufacturers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePriceRuleManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePriceRuleManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPriceRuleManufacturerDataAsync,
                    () => Workflows.PriceRuleManufacturers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPriceRuleManufacturerCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPriceRuleManufacturerCache request)
        {
            await ClearCachedPriceRuleManufacturerDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPriceRuleManufacturerDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPriceRuleManufacturers>(string.Empty),
                    UrnId.Create<GetPriceRuleManufacturerByID>(string.Empty),
                    UrnId.Create<GetPriceRuleManufacturerByKey>(string.Empty),
                    UrnId.Create<CheckPriceRuleManufacturerExistsByID>(string.Empty),
                    UrnId.Create<CheckPriceRuleManufacturerExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PriceRuleManufacturerService : PriceRuleManufacturerServiceBase { }
}
