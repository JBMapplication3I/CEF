// <autogenerated>
// <copyright file="CurrencyImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the currency image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of currency images.</summary>
    /// <seealso cref="CurrencyImageSearchModel"/>
    /// <seealso cref="IReturn{CurrencyImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Currencies/CurrencyImages", "GET", Priority = 1,
            Summary = "Use to get a list of currency images")]
    public partial class GetCurrencyImages : CurrencyImageSearchModel, IReturn<CurrencyImagePagedResults> { }

    /// <summary>A ServiceStack Route to get currency images for connect.</summary>
    /// <seealso cref="CurrencyImageSearchModel"/>
    /// <seealso cref="IReturn{List{CurrencyImageModel}}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyImage.View"),
        PublicAPI,
        Route("/Currencies/CurrencyImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all currency images")]
    public partial class GetCurrencyImagesForConnect : CurrencyImageSearchModel, IReturn<List<CurrencyImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all currency images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyImage.View"),
        PublicAPI,
        Route("/Currencies/CurrencyImagesDigest", "GET",
            Summary = "Use to get a hash representing each currency images")]
    public partial class GetCurrencyImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get currency image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CurrencyImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Currencies/CurrencyImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific currency image")]
    public partial class GetCurrencyImageByID : ImplementsIDBase, IReturn<CurrencyImageModel> { }

    /// <summary>A ServiceStack Route to get currency image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CurrencyImageModel}"/>
    [PublicAPI,
        Route("/Currencies/CurrencyImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific currency image by the custom key")]
    public partial class GetCurrencyImageByKey : ImplementsKeyBase, IReturn<CurrencyImageModel> { }

    /// <summary>A ServiceStack Route to get currency image.</summary>
    /// <seealso cref="IReturn{CurrencyImageModel}"/>
    [PublicAPI,
        Route("/Currencies/CurrencyImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific currency image by the name")]
    public partial class GetCurrencyImageByName : ImplementsNameBase, IReturn<CurrencyImageModel> { }

    /// <summary>A ServiceStack Route to check currency image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyImage.View"),
        PublicAPI,
        Route("/Currencies/CurrencyImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCurrencyImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check currency image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyImage.View"),
        PublicAPI,
        Route("/Currencies/CurrencyImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCurrencyImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check currency image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyImage.View"),
        PublicAPI,
        Route("/Currencies/CurrencyImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCurrencyImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create currency image.</summary>
    /// <seealso cref="CurrencyImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/CurrencyImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new currency image.")]
    public partial class CreateCurrencyImage : CurrencyImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert currency image.</summary>
    /// <seealso cref="CurrencyImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Currencies/CurrencyImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing currency image (as needed).")]
    public partial class UpsertCurrencyImage : CurrencyImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update currency image.</summary>
    /// <seealso cref="CurrencyImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/CurrencyImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing currency image.")]
    public partial class UpdateCurrencyImage : CurrencyImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate currency image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/CurrencyImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific currency image from the system [Soft-Delete]")]
    public partial class DeactivateCurrencyImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate currency image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyImage.Deactivate"),
        PublicAPI,
        Route("/Currencies/CurrencyImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific currency image from the system [Soft-Delete]")]
    public partial class DeactivateCurrencyImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate currency image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/CurrencyImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific currency image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCurrencyImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate currency image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyImage.Reactivate"),
        PublicAPI,
        Route("/Currencies/CurrencyImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific currency image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCurrencyImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete currency image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Currencies/CurrencyImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific currency image from the system [Hard-Delete]")]
    public partial class DeleteCurrencyImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete currency image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Currencies.CurrencyImage.Delete"),
        PublicAPI,
        Route("/Currencies/CurrencyImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific currency image from the system [Hard-Delete]")]
    public partial class DeleteCurrencyImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear currency image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Currencies/CurrencyImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all currency image calls.")]
    public class ClearCurrencyImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CurrencyImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCurrencyImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCurrencyImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICurrencyImageModel, CurrencyImageModel, ICurrencyImageSearchModel, CurrencyImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CurrencyImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCurrencyImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCurrencyImagesForConnect request)
        {
            return await Workflows.CurrencyImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCurrencyImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCurrencyImagesDigest request)
        {
            return await Workflows.CurrencyImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCurrencyImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCurrencyImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CurrencyImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCurrencyImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCurrencyImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CurrencyImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCurrencyImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCurrencyImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CurrencyImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCurrencyImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCurrencyImageExistsByID request)
        {
            return await Workflows.CurrencyImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCurrencyImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCurrencyImageExistsByKey request)
        {
            return await Workflows.CurrencyImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCurrencyImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCurrencyImageExistsByName request)
        {
            return await Workflows.CurrencyImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCurrencyImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCurrencyImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyImageDataAsync,
                    () => Workflows.CurrencyImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCurrencyImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCurrencyImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyImageDataAsync,
                    () => Workflows.CurrencyImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCurrencyImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCurrencyImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyImageDataAsync,
                    () => Workflows.CurrencyImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCurrencyImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCurrencyImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyImageDataAsync,
                    () => Workflows.CurrencyImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCurrencyImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCurrencyImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyImageDataAsync,
                    () => Workflows.CurrencyImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCurrencyImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCurrencyImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyImageDataAsync,
                    () => Workflows.CurrencyImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCurrencyImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCurrencyImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyImageDataAsync,
                    () => Workflows.CurrencyImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCurrencyImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCurrencyImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyImageDataAsync,
                    () => Workflows.CurrencyImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCurrencyImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCurrencyImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCurrencyImageDataAsync,
                    () => Workflows.CurrencyImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCurrencyImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCurrencyImageCache request)
        {
            await ClearCachedCurrencyImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCurrencyImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCurrencyImages>(string.Empty),
                    UrnId.Create<GetCurrencyImageByID>(string.Empty),
                    UrnId.Create<GetCurrencyImageByKey>(string.Empty),
                    UrnId.Create<GetCurrencyImageByName>(string.Empty),
                    UrnId.Create<CheckCurrencyImageExistsByID>(string.Empty),
                    UrnId.Create<CheckCurrencyImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckCurrencyImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CurrencyImageService : CurrencyImageServiceBase { }
}
