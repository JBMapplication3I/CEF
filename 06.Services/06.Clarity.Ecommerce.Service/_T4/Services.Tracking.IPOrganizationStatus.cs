// <autogenerated>
// <copyright file="IPOrganizationStatusService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the ip organization status service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of ip organization statuses.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{IPOrganizationStatusPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/IPOrganizationStatuses", "GET", Priority = 1,
            Summary = "Use to get a list of ip organization statuses")]
    public partial class GetIPOrganizationStatuses : StatusSearchModel, IReturn<IPOrganizationStatusPagedResults> { }

    /// <summary>A ServiceStack Route to get ip organization statuses for connect.</summary>
    /// <seealso cref="StatusSearchModel"/>
    /// <seealso cref="IReturn{List{StatusModel}}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganizationStatus.View"),
        PublicAPI,
        Route("/Tracking/IPOrganizationStatusesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all ip organization statuses")]
    public partial class GetIPOrganizationStatusesForConnect : StatusSearchModel, IReturn<List<StatusModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all ip organization statuses.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganizationStatus.View"),
        PublicAPI,
        Route("/Tracking/IPOrganizationStatusesDigest", "GET",
            Summary = "Use to get a hash representing each ip organization statuses")]
    public partial class GetIPOrganizationStatusesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get ip organization status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/IPOrganizationStatus/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific ip organization status")]
    public partial class GetIPOrganizationStatusByID : ImplementsIDBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get ip organization status.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific ip organization status by the custom key")]
    public partial class GetIPOrganizationStatusByKey : ImplementsKeyBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get ip organization status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Name", "GET", Priority = 1,
            Summary = "Use to get a specific ip organization status by the name")]
    public partial class GetIPOrganizationStatusByName : ImplementsNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to get ip organization status.</summary>
    /// <seealso cref="IReturn{StatusModel}"/>
    [PublicAPI,
        Route("/Tracking/IPOrganizationStatus/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific ip organization status by the name")]
    public partial class GetIPOrganizationStatusByDisplayName : ImplementsDisplayNameBase, IReturn<StatusModel> { }

    /// <summary>A ServiceStack Route to check ip organization status exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganizationStatus.View"),
        PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckIPOrganizationStatusExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ip organization status exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganizationStatus.View"),
        PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckIPOrganizationStatusExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ip organization status exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganizationStatus.View"),
        PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckIPOrganizationStatusExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ip organization status exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganizationStatus.View"),
        PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckIPOrganizationStatusExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create ip organization status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganizationStatus.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Create", "POST", Priority = 1,
            Summary = "Use to create a new ip organization status.")]
    public partial class CreateIPOrganizationStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert ip organization status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing ip organization status (as needed).")]
    public partial class UpsertIPOrganizationStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update ip organization status.</summary>
    /// <seealso cref="StatusModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganizationStatus.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing ip organization status.")]
    public partial class UpdateIPOrganizationStatus : StatusModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate ip organization status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganizationStatus.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ip organization status from the system [Soft-Delete]")]
    public partial class DeactivateIPOrganizationStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate ip organization status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganizationStatus.Deactivate"),
        PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ip organization status from the system [Soft-Delete]")]
    public partial class DeactivateIPOrganizationStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ip organization status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganizationStatus.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ip organization status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateIPOrganizationStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ip organization status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganizationStatus.Reactivate"),
        PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ip organization status from the system [Restore from Soft-Delete]")]
    public partial class ReactivateIPOrganizationStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ip organization status.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganizationStatus.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific ip organization status from the system [Hard-Delete]")]
    public partial class DeleteIPOrganizationStatusByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ip organization status by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganizationStatus.Delete"),
        PublicAPI,
        Route("/Tracking/IPOrganizationStatus/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific ip organization status from the system [Hard-Delete]")]
    public partial class DeleteIPOrganizationStatusByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear ip organization status cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/IPOrganizationStatus/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all ip organization status calls.")]
    public class ClearIPOrganizationStatusCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class IPOrganizationStatusServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetIPOrganizationStatuses"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetIPOrganizationStatuses request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStatusModel, StatusModel, IStatusSearchModel, IPOrganizationStatusPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.IPOrganizationStatuses)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetIPOrganizationStatusesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetIPOrganizationStatusesForConnect request)
        {
            return await Workflows.IPOrganizationStatuses.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetIPOrganizationStatusesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetIPOrganizationStatusesDigest request)
        {
            return await Workflows.IPOrganizationStatuses.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetIPOrganizationStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetIPOrganizationStatusByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.IPOrganizationStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetIPOrganizationStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetIPOrganizationStatusByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.IPOrganizationStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetIPOrganizationStatusByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetIPOrganizationStatusByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.IPOrganizationStatuses, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetIPOrganizationStatusByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetIPOrganizationStatusByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.IPOrganizationStatuses, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckIPOrganizationStatusExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckIPOrganizationStatusExistsByID request)
        {
            return await Workflows.IPOrganizationStatuses.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckIPOrganizationStatusExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckIPOrganizationStatusExistsByKey request)
        {
            return await Workflows.IPOrganizationStatuses.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckIPOrganizationStatusExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckIPOrganizationStatusExistsByName request)
        {
            return await Workflows.IPOrganizationStatuses.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckIPOrganizationStatusExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckIPOrganizationStatusExistsByDisplayName request)
        {
            return await Workflows.IPOrganizationStatuses.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertIPOrganizationStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertIPOrganizationStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationStatusDataAsync,
                    () => Workflows.IPOrganizationStatuses.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateIPOrganizationStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateIPOrganizationStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationStatusDataAsync,
                    () => Workflows.IPOrganizationStatuses.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateIPOrganizationStatus"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateIPOrganizationStatus request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationStatusDataAsync,
                    () => Workflows.IPOrganizationStatuses.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateIPOrganizationStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateIPOrganizationStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationStatusDataAsync,
                    () => Workflows.IPOrganizationStatuses.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateIPOrganizationStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateIPOrganizationStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationStatusDataAsync,
                    () => Workflows.IPOrganizationStatuses.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateIPOrganizationStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateIPOrganizationStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationStatusDataAsync,
                    () => Workflows.IPOrganizationStatuses.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateIPOrganizationStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateIPOrganizationStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationStatusDataAsync,
                    () => Workflows.IPOrganizationStatuses.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteIPOrganizationStatusByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteIPOrganizationStatusByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationStatusDataAsync,
                    () => Workflows.IPOrganizationStatuses.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteIPOrganizationStatusByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteIPOrganizationStatusByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationStatusDataAsync,
                    () => Workflows.IPOrganizationStatuses.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearIPOrganizationStatusCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearIPOrganizationStatusCache request)
        {
            await ClearCachedIPOrganizationStatusDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedIPOrganizationStatusDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetIPOrganizationStatuses>(string.Empty),
                    UrnId.Create<GetIPOrganizationStatusByID>(string.Empty),
                    UrnId.Create<GetIPOrganizationStatusByKey>(string.Empty),
                    UrnId.Create<GetIPOrganizationStatusByName>(string.Empty),
                    UrnId.Create<CheckIPOrganizationStatusExistsByID>(string.Empty),
                    UrnId.Create<CheckIPOrganizationStatusExistsByKey>(string.Empty),
                    UrnId.Create<CheckIPOrganizationStatusExistsByName>(string.Empty),
                    UrnId.Create<CheckIPOrganizationStatusExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class IPOrganizationStatusService : IPOrganizationStatusServiceBase { }
}
