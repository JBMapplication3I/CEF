// <autogenerated>
// <copyright file="ManufacturerImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the manufacturer image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of manufacturer images.</summary>
    /// <seealso cref="ManufacturerImageSearchModel"/>
    /// <seealso cref="IReturn{ManufacturerImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Manufacturers/ManufacturerImages", "GET", Priority = 1,
            Summary = "Use to get a list of manufacturer images")]
    public partial class GetManufacturerImages : ManufacturerImageSearchModel, IReturn<ManufacturerImagePagedResults> { }

    /// <summary>A ServiceStack Route to get manufacturer images for connect.</summary>
    /// <seealso cref="ManufacturerImageSearchModel"/>
    /// <seealso cref="IReturn{List{ManufacturerImageModel}}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImage.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all manufacturer images")]
    public partial class GetManufacturerImagesForConnect : ManufacturerImageSearchModel, IReturn<List<ManufacturerImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all manufacturer images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImage.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImagesDigest", "GET",
            Summary = "Use to get a hash representing each manufacturer images")]
    public partial class GetManufacturerImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get manufacturer image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ManufacturerImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Manufacturers/ManufacturerImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific manufacturer image")]
    public partial class GetManufacturerImageByID : ImplementsIDBase, IReturn<ManufacturerImageModel> { }

    /// <summary>A ServiceStack Route to get manufacturer image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ManufacturerImageModel}"/>
    [PublicAPI,
        Route("/Manufacturers/ManufacturerImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific manufacturer image by the custom key")]
    public partial class GetManufacturerImageByKey : ImplementsKeyBase, IReturn<ManufacturerImageModel> { }

    /// <summary>A ServiceStack Route to get manufacturer image.</summary>
    /// <seealso cref="IReturn{ManufacturerImageModel}"/>
    [PublicAPI,
        Route("/Manufacturers/ManufacturerImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific manufacturer image by the name")]
    public partial class GetManufacturerImageByName : ImplementsNameBase, IReturn<ManufacturerImageModel> { }

    /// <summary>A ServiceStack Route to check manufacturer image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImage.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckManufacturerImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check manufacturer image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImage.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckManufacturerImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check manufacturer image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImage.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckManufacturerImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create manufacturer image.</summary>
    /// <seealso cref="ManufacturerImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new manufacturer image.")]
    public partial class CreateManufacturerImage : ManufacturerImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert manufacturer image.</summary>
    /// <seealso cref="ManufacturerImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Manufacturers/ManufacturerImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing manufacturer image (as needed).")]
    public partial class UpsertManufacturerImage : ManufacturerImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update manufacturer image.</summary>
    /// <seealso cref="ManufacturerImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing manufacturer image.")]
    public partial class UpdateManufacturerImage : ManufacturerImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate manufacturer image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific manufacturer image from the system [Soft-Delete]")]
    public partial class DeactivateManufacturerImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate manufacturer image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImage.Deactivate"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific manufacturer image from the system [Soft-Delete]")]
    public partial class DeactivateManufacturerImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate manufacturer image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific manufacturer image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateManufacturerImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate manufacturer image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImage.Reactivate"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific manufacturer image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateManufacturerImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete manufacturer image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific manufacturer image from the system [Hard-Delete]")]
    public partial class DeleteManufacturerImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete manufacturer image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerImage.Delete"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific manufacturer image from the system [Hard-Delete]")]
    public partial class DeleteManufacturerImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear manufacturer image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Manufacturers/ManufacturerImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all manufacturer image calls.")]
    public class ClearManufacturerImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ManufacturerImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetManufacturerImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IManufacturerImageModel, ManufacturerImageModel, IManufacturerImageSearchModel, ManufacturerImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ManufacturerImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetManufacturerImagesForConnect request)
        {
            return await Workflows.ManufacturerImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerImagesDigest request)
        {
            return await Workflows.ManufacturerImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetManufacturerImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ManufacturerImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ManufacturerImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ManufacturerImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckManufacturerImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckManufacturerImageExistsByID request)
        {
            return await Workflows.ManufacturerImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckManufacturerImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckManufacturerImageExistsByKey request)
        {
            return await Workflows.ManufacturerImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckManufacturerImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckManufacturerImageExistsByName request)
        {
            return await Workflows.ManufacturerImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertManufacturerImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertManufacturerImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageDataAsync,
                    () => Workflows.ManufacturerImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateManufacturerImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateManufacturerImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageDataAsync,
                    () => Workflows.ManufacturerImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateManufacturerImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateManufacturerImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageDataAsync,
                    () => Workflows.ManufacturerImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateManufacturerImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateManufacturerImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageDataAsync,
                    () => Workflows.ManufacturerImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateManufacturerImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateManufacturerImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageDataAsync,
                    () => Workflows.ManufacturerImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateManufacturerImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateManufacturerImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageDataAsync,
                    () => Workflows.ManufacturerImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateManufacturerImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateManufacturerImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageDataAsync,
                    () => Workflows.ManufacturerImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteManufacturerImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteManufacturerImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageDataAsync,
                    () => Workflows.ManufacturerImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteManufacturerImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteManufacturerImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerImageDataAsync,
                    () => Workflows.ManufacturerImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearManufacturerImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearManufacturerImageCache request)
        {
            await ClearCachedManufacturerImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedManufacturerImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetManufacturerImages>(string.Empty),
                    UrnId.Create<GetManufacturerImageByID>(string.Empty),
                    UrnId.Create<GetManufacturerImageByKey>(string.Empty),
                    UrnId.Create<GetManufacturerImageByName>(string.Empty),
                    UrnId.Create<CheckManufacturerImageExistsByID>(string.Empty),
                    UrnId.Create<CheckManufacturerImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckManufacturerImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ManufacturerImageService : ManufacturerImageServiceBase { }
}
