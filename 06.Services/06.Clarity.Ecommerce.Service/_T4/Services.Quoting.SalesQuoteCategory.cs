// <autogenerated>
// <copyright file="SalesQuoteCategoryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales quote category service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales quote categories.</summary>
    /// <seealso cref="SalesQuoteCategorySearchModel"/>
    /// <seealso cref="IReturn{SalesQuoteCategoryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteCategories", "GET", Priority = 1,
            Summary = "Use to get a list of sales quote categories")]
    public partial class GetSalesQuoteCategories : SalesQuoteCategorySearchModel, IReturn<SalesQuoteCategoryPagedResults> { }

    /// <summary>A ServiceStack Route to get sales quote categories for connect.</summary>
    /// <seealso cref="SalesQuoteCategorySearchModel"/>
    /// <seealso cref="IReturn{List{SalesQuoteCategoryModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteCategory.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteCategoriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales quote categories")]
    public partial class GetSalesQuoteCategoriesForConnect : SalesQuoteCategorySearchModel, IReturn<List<SalesQuoteCategoryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales quote categories.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteCategory.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteCategoriesDigest", "GET",
            Summary = "Use to get a hash representing each sales quote categories")]
    public partial class GetSalesQuoteCategoriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales quote category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesQuoteCategoryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteCategory/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote category")]
    public partial class GetSalesQuoteCategoryByID : ImplementsIDBase, IReturn<SalesQuoteCategoryModel> { }

    /// <summary>A ServiceStack Route to get sales quote category.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesQuoteCategoryModel}"/>
    [PublicAPI,
        Route("/Quoting/SalesQuoteCategory/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales quote category by the custom key")]
    public partial class GetSalesQuoteCategoryByKey : ImplementsKeyBase, IReturn<SalesQuoteCategoryModel> { }

    /// <summary>A ServiceStack Route to check sales quote category exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteCategory.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteCategory/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteCategoryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales quote category exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteCategory.View"),
        PublicAPI,
        Route("/Quoting/SalesQuoteCategory/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesQuoteCategoryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales quote category.</summary>
    /// <seealso cref="SalesQuoteCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteCategory.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteCategory/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales quote category.")]
    public partial class CreateSalesQuoteCategory : SalesQuoteCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales quote category.</summary>
    /// <seealso cref="SalesQuoteCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Quoting/SalesQuoteCategory/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales quote category (as needed).")]
    public partial class UpsertSalesQuoteCategory : SalesQuoteCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales quote category.</summary>
    /// <seealso cref="SalesQuoteCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteCategory.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteCategory/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales quote category.")]
    public partial class UpdateSalesQuoteCategory : SalesQuoteCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales quote category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteCategory.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteCategory/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote category from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales quote category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteCategory.Deactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuoteCategory/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales quote category from the system [Soft-Delete]")]
    public partial class DeactivateSalesQuoteCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteCategory.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteCategory/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales quote category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteCategory.Reactivate"),
        PublicAPI,
        Route("/Quoting/SalesQuoteCategory/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales quote category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesQuoteCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteCategory.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Quoting/SalesQuoteCategory/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales quote category from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales quote category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Quoting.SalesQuoteCategory.Delete"),
        PublicAPI,
        Route("/Quoting/SalesQuoteCategory/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales quote category from the system [Hard-Delete]")]
    public partial class DeleteSalesQuoteCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales quote category cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Quoting/SalesQuoteCategory/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales quote category calls.")]
    public class ClearSalesQuoteCategoryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesQuoteCategoryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesQuoteCategories"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteCategories request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesQuoteCategoryModel, SalesQuoteCategoryModel, ISalesQuoteCategorySearchModel, SalesQuoteCategoryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesQuoteCategories)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteCategoriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesQuoteCategoriesForConnect request)
        {
            return await Workflows.SalesQuoteCategories.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteCategoriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteCategoriesDigest request)
        {
            return await Workflows.SalesQuoteCategories.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesQuoteCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteCategoryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesQuoteCategories, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesQuoteCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesQuoteCategoryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesQuoteCategories, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesQuoteCategoryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteCategoryExistsByID request)
        {
            return await Workflows.SalesQuoteCategories.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesQuoteCategoryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesQuoteCategoryExistsByKey request)
        {
            return await Workflows.SalesQuoteCategories.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesQuoteCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesQuoteCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteCategoryDataAsync,
                    () => Workflows.SalesQuoteCategories.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesQuoteCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesQuoteCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteCategoryDataAsync,
                    () => Workflows.SalesQuoteCategories.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesQuoteCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesQuoteCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteCategoryDataAsync,
                    () => Workflows.SalesQuoteCategories.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteCategoryDataAsync,
                    () => Workflows.SalesQuoteCategories.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesQuoteCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesQuoteCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteCategoryDataAsync,
                    () => Workflows.SalesQuoteCategories.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteCategoryDataAsync,
                    () => Workflows.SalesQuoteCategories.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesQuoteCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesQuoteCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteCategoryDataAsync,
                    () => Workflows.SalesQuoteCategories.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteCategoryDataAsync,
                    () => Workflows.SalesQuoteCategories.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesQuoteCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesQuoteCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesQuoteCategoryDataAsync,
                    () => Workflows.SalesQuoteCategories.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesQuoteCategoryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesQuoteCategoryCache request)
        {
            await ClearCachedSalesQuoteCategoryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesQuoteCategoryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesQuoteCategories>(string.Empty),
                    UrnId.Create<GetSalesQuoteCategoryByID>(string.Empty),
                    UrnId.Create<GetSalesQuoteCategoryByKey>(string.Empty),
                    UrnId.Create<CheckSalesQuoteCategoryExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesQuoteCategoryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesQuoteCategoryService : SalesQuoteCategoryServiceBase { }
}
