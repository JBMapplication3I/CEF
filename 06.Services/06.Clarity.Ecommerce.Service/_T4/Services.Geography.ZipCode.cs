// <autogenerated>
// <copyright file="ZipCodeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the zip code service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of zip codes.</summary>
    /// <seealso cref="ZipCodeSearchModel"/>
    /// <seealso cref="IReturn{ZipCodePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/ZipCodes", "GET", Priority = 1,
            Summary = "Use to get a list of zip codes")]
    public partial class GetZipCodes : ZipCodeSearchModel, IReturn<ZipCodePagedResults> { }

    /// <summary>A ServiceStack Route to get zip codes for connect.</summary>
    /// <seealso cref="ZipCodeSearchModel"/>
    /// <seealso cref="IReturn{List{ZipCodeModel}}"/>
    [Authenticate, RequiredPermission("Geography.ZipCode.View"),
        PublicAPI,
        Route("/Geography/ZipCodesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all zip codes")]
    public partial class GetZipCodesForConnect : ZipCodeSearchModel, IReturn<List<ZipCodeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all zip codes.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.ZipCode.View"),
        PublicAPI,
        Route("/Geography/ZipCodesDigest", "GET",
            Summary = "Use to get a hash representing each zip codes")]
    public partial class GetZipCodesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get zip code.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ZipCodeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/ZipCode/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific zip code")]
    public partial class GetZipCodeByID : ImplementsIDBase, IReturn<ZipCodeModel> { }

    /// <summary>A ServiceStack Route to get zip code.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ZipCodeModel}"/>
    [PublicAPI,
        Route("/Geography/ZipCode/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific zip code by the custom key")]
    public partial class GetZipCodeByKey : ImplementsKeyBase, IReturn<ZipCodeModel> { }

    /// <summary>A ServiceStack Route to check zip code exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.ZipCode.View"),
        PublicAPI,
        Route("/Geography/ZipCode/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckZipCodeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check zip code exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.ZipCode.View"),
        PublicAPI,
        Route("/Geography/ZipCode/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckZipCodeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create zip code.</summary>
    /// <seealso cref="ZipCodeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.ZipCode.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/ZipCode/Create", "POST", Priority = 1,
            Summary = "Use to create a new zip code.")]
    public partial class CreateZipCode : ZipCodeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert zip code.</summary>
    /// <seealso cref="ZipCodeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/ZipCode/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing zip code (as needed).")]
    public partial class UpsertZipCode : ZipCodeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update zip code.</summary>
    /// <seealso cref="ZipCodeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.ZipCode.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/ZipCode/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing zip code.")]
    public partial class UpdateZipCode : ZipCodeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate zip code.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.ZipCode.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/ZipCode/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific zip code from the system [Soft-Delete]")]
    public partial class DeactivateZipCodeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate zip code by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.ZipCode.Deactivate"),
        PublicAPI,
        Route("/Geography/ZipCode/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific zip code from the system [Soft-Delete]")]
    public partial class DeactivateZipCodeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate zip code.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.ZipCode.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/ZipCode/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific zip code from the system [Restore from Soft-Delete]")]
    public partial class ReactivateZipCodeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate zip code by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.ZipCode.Reactivate"),
        PublicAPI,
        Route("/Geography/ZipCode/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific zip code from the system [Restore from Soft-Delete]")]
    public partial class ReactivateZipCodeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete zip code.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.ZipCode.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/ZipCode/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific zip code from the system [Hard-Delete]")]
    public partial class DeleteZipCodeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete zip code by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.ZipCode.Delete"),
        PublicAPI,
        Route("/Geography/ZipCode/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific zip code from the system [Hard-Delete]")]
    public partial class DeleteZipCodeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear zip code cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/ZipCode/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all zip code calls.")]
    public class ClearZipCodeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ZipCodeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetZipCodes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZipCodes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IZipCodeModel, ZipCodeModel, IZipCodeSearchModel, ZipCodePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ZipCodes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetZipCodesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetZipCodesForConnect request)
        {
            return await Workflows.ZipCodes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetZipCodesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZipCodesDigest request)
        {
            return await Workflows.ZipCodes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetZipCodeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZipCodeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ZipCodes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetZipCodeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetZipCodeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ZipCodes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckZipCodeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckZipCodeExistsByID request)
        {
            return await Workflows.ZipCodes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckZipCodeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckZipCodeExistsByKey request)
        {
            return await Workflows.ZipCodes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertZipCode"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertZipCode request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZipCodeDataAsync,
                    () => Workflows.ZipCodes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateZipCode"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateZipCode request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZipCodeDataAsync,
                    () => Workflows.ZipCodes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateZipCode"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateZipCode request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZipCodeDataAsync,
                    () => Workflows.ZipCodes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateZipCodeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateZipCodeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZipCodeDataAsync,
                    () => Workflows.ZipCodes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateZipCodeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateZipCodeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZipCodeDataAsync,
                    () => Workflows.ZipCodes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateZipCodeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateZipCodeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZipCodeDataAsync,
                    () => Workflows.ZipCodes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateZipCodeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateZipCodeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZipCodeDataAsync,
                    () => Workflows.ZipCodes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteZipCodeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteZipCodeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZipCodeDataAsync,
                    () => Workflows.ZipCodes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteZipCodeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteZipCodeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedZipCodeDataAsync,
                    () => Workflows.ZipCodes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearZipCodeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearZipCodeCache request)
        {
            await ClearCachedZipCodeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedZipCodeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetZipCodes>(string.Empty),
                    UrnId.Create<GetZipCodeByID>(string.Empty),
                    UrnId.Create<GetZipCodeByKey>(string.Empty),
                    UrnId.Create<CheckZipCodeExistsByID>(string.Empty),
                    UrnId.Create<CheckZipCodeExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ZipCodeService : ZipCodeServiceBase { }
}
