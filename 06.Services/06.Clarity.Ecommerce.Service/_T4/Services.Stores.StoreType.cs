// <autogenerated>
// <copyright file="StoreTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{StoreTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreTypes", "GET", Priority = 1,
            Summary = "Use to get a list of store types")]
    public partial class GetStoreTypes : TypeSearchModel, IReturn<StoreTypePagedResults> { }

    /// <summary>A ServiceStack Route to get store types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreType.View"),
        PublicAPI,
        Route("/Stores/StoreTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store types")]
    public partial class GetStoreTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreType.View"),
        PublicAPI,
        Route("/Stores/StoreTypesDigest", "GET",
            Summary = "Use to get a hash representing each store types")]
    public partial class GetStoreTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store type")]
    public partial class GetStoreTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get store type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Stores/StoreType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store type by the custom key")]
    public partial class GetStoreTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get store type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Stores/StoreType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific store type by the name")]
    public partial class GetStoreTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get store type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Stores/StoreType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific store type by the name")]
    public partial class GetStoreTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check store type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreType.View"),
        PublicAPI,
        Route("/Stores/StoreType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreType.View"),
        PublicAPI,
        Route("/Stores/StoreType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreType.View"),
        PublicAPI,
        Route("/Stores/StoreType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreType.View"),
        PublicAPI,
        Route("/Stores/StoreType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreType/Create", "POST", Priority = 1,
            Summary = "Use to create a new store type.")]
    public partial class CreateStoreType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store type (as needed).")]
    public partial class UpsertStoreType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store type.")]
    public partial class UpdateStoreType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store type from the system [Soft-Delete]")]
    public partial class DeactivateStoreTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreType.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store type from the system [Soft-Delete]")]
    public partial class DeactivateStoreTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreType.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store type from the system [Hard-Delete]")]
    public partial class DeleteStoreTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreType.Delete"),
        PublicAPI,
        Route("/Stores/StoreType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store type from the system [Hard-Delete]")]
    public partial class DeleteStoreTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store type calls.")]
    public class ClearStoreTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, StoreTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreTypesForConnect request)
        {
            return await Workflows.StoreTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreTypesDigest request)
        {
            return await Workflows.StoreTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.StoreTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.StoreTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreTypeExistsByID request)
        {
            return await Workflows.StoreTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreTypeExistsByKey request)
        {
            return await Workflows.StoreTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreTypeExistsByName request)
        {
            return await Workflows.StoreTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreTypeExistsByDisplayName request)
        {
            return await Workflows.StoreTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreTypeDataAsync,
                    () => Workflows.StoreTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreTypeDataAsync,
                    () => Workflows.StoreTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreTypeDataAsync,
                    () => Workflows.StoreTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreTypeDataAsync,
                    () => Workflows.StoreTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreTypeDataAsync,
                    () => Workflows.StoreTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreTypeDataAsync,
                    () => Workflows.StoreTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreTypeDataAsync,
                    () => Workflows.StoreTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreTypeDataAsync,
                    () => Workflows.StoreTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreTypeDataAsync,
                    () => Workflows.StoreTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreTypeCache request)
        {
            await ClearCachedStoreTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreTypes>(string.Empty),
                    UrnId.Create<GetStoreTypeByID>(string.Empty),
                    UrnId.Create<GetStoreTypeByKey>(string.Empty),
                    UrnId.Create<GetStoreTypeByName>(string.Empty),
                    UrnId.Create<CheckStoreTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckStoreTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckStoreTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreTypeService : StoreTypeServiceBase { }
}
