// <autogenerated>
// <copyright file="SocialProviderService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the social provider service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of social providers.</summary>
    /// <seealso cref="SocialProviderSearchModel"/>
    /// <seealso cref="IReturn{SocialProviderPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/SocialProviders", "GET", Priority = 1,
            Summary = "Use to get a list of social providers")]
    public partial class GetSocialProviders : SocialProviderSearchModel, IReturn<SocialProviderPagedResults> { }

    /// <summary>A ServiceStack Route to get social providers for connect.</summary>
    /// <seealso cref="SocialProviderSearchModel"/>
    /// <seealso cref="IReturn{List{SocialProviderModel}}"/>
    [Authenticate, RequiredPermission("Stores.SocialProvider.View"),
        PublicAPI,
        Route("/Stores/SocialProvidersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all social providers")]
    public partial class GetSocialProvidersForConnect : SocialProviderSearchModel, IReturn<List<SocialProviderModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all social providers.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.SocialProvider.View"),
        PublicAPI,
        Route("/Stores/SocialProvidersDigest", "GET",
            Summary = "Use to get a hash representing each social providers")]
    public partial class GetSocialProvidersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get social provider.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SocialProviderModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/SocialProvider/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific social provider")]
    public partial class GetSocialProviderByID : ImplementsIDBase, IReturn<SocialProviderModel> { }

    /// <summary>A ServiceStack Route to get social provider.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SocialProviderModel}"/>
    [PublicAPI,
        Route("/Stores/SocialProvider/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific social provider by the custom key")]
    public partial class GetSocialProviderByKey : ImplementsKeyBase, IReturn<SocialProviderModel> { }

    /// <summary>A ServiceStack Route to get social provider.</summary>
    /// <seealso cref="IReturn{SocialProviderModel}"/>
    [PublicAPI,
        Route("/Stores/SocialProvider/Name", "GET", Priority = 1,
            Summary = "Use to get a specific social provider by the name")]
    public partial class GetSocialProviderByName : ImplementsNameBase, IReturn<SocialProviderModel> { }

    /// <summary>A ServiceStack Route to check social provider exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.SocialProvider.View"),
        PublicAPI,
        Route("/Stores/SocialProvider/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSocialProviderExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check social provider exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.SocialProvider.View"),
        PublicAPI,
        Route("/Stores/SocialProvider/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSocialProviderExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check social provider exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.SocialProvider.View"),
        PublicAPI,
        Route("/Stores/SocialProvider/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSocialProviderExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create social provider.</summary>
    /// <seealso cref="SocialProviderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.SocialProvider.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SocialProvider/Create", "POST", Priority = 1,
            Summary = "Use to create a new social provider.")]
    public partial class CreateSocialProvider : SocialProviderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert social provider.</summary>
    /// <seealso cref="SocialProviderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/SocialProvider/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing social provider (as needed).")]
    public partial class UpsertSocialProvider : SocialProviderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update social provider.</summary>
    /// <seealso cref="SocialProviderModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.SocialProvider.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SocialProvider/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing social provider.")]
    public partial class UpdateSocialProvider : SocialProviderModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate social provider.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SocialProvider.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SocialProvider/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific social provider from the system [Soft-Delete]")]
    public partial class DeactivateSocialProviderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate social provider by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SocialProvider.Deactivate"),
        PublicAPI,
        Route("/Stores/SocialProvider/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific social provider from the system [Soft-Delete]")]
    public partial class DeactivateSocialProviderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate social provider.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SocialProvider.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SocialProvider/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific social provider from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSocialProviderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate social provider by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SocialProvider.Reactivate"),
        PublicAPI,
        Route("/Stores/SocialProvider/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific social provider from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSocialProviderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete social provider.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SocialProvider.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SocialProvider/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific social provider from the system [Hard-Delete]")]
    public partial class DeleteSocialProviderByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete social provider by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SocialProvider.Delete"),
        PublicAPI,
        Route("/Stores/SocialProvider/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific social provider from the system [Hard-Delete]")]
    public partial class DeleteSocialProviderByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear social provider cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/SocialProvider/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all social provider calls.")]
    public class ClearSocialProviderCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SocialProviderServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSocialProviders"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSocialProviders request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISocialProviderModel, SocialProviderModel, ISocialProviderSearchModel, SocialProviderPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SocialProviders)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSocialProvidersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSocialProvidersForConnect request)
        {
            return await Workflows.SocialProviders.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSocialProvidersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSocialProvidersDigest request)
        {
            return await Workflows.SocialProviders.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSocialProviderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSocialProviderByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SocialProviders, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSocialProviderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSocialProviderByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SocialProviders, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSocialProviderByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSocialProviderByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SocialProviders, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSocialProviderExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSocialProviderExistsByID request)
        {
            return await Workflows.SocialProviders.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSocialProviderExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSocialProviderExistsByKey request)
        {
            return await Workflows.SocialProviders.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSocialProviderExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSocialProviderExistsByName request)
        {
            return await Workflows.SocialProviders.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSocialProvider"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSocialProvider request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSocialProviderDataAsync,
                    () => Workflows.SocialProviders.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSocialProvider"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSocialProvider request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSocialProviderDataAsync,
                    () => Workflows.SocialProviders.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSocialProvider"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSocialProvider request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSocialProviderDataAsync,
                    () => Workflows.SocialProviders.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSocialProviderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSocialProviderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSocialProviderDataAsync,
                    () => Workflows.SocialProviders.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSocialProviderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSocialProviderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSocialProviderDataAsync,
                    () => Workflows.SocialProviders.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSocialProviderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSocialProviderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSocialProviderDataAsync,
                    () => Workflows.SocialProviders.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSocialProviderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSocialProviderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSocialProviderDataAsync,
                    () => Workflows.SocialProviders.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSocialProviderByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSocialProviderByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSocialProviderDataAsync,
                    () => Workflows.SocialProviders.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSocialProviderByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSocialProviderByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSocialProviderDataAsync,
                    () => Workflows.SocialProviders.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSocialProviderCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSocialProviderCache request)
        {
            await ClearCachedSocialProviderDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSocialProviderDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSocialProviders>(string.Empty),
                    UrnId.Create<GetSocialProviderByID>(string.Empty),
                    UrnId.Create<GetSocialProviderByKey>(string.Empty),
                    UrnId.Create<GetSocialProviderByName>(string.Empty),
                    UrnId.Create<CheckSocialProviderExistsByID>(string.Empty),
                    UrnId.Create<CheckSocialProviderExistsByKey>(string.Empty),
                    UrnId.Create<CheckSocialProviderExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SocialProviderService : SocialProviderServiceBase { }
}
