// <autogenerated>
// <copyright file="BrandVendorService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the brand vendor service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of brand vendors.</summary>
    /// <seealso cref="BrandVendorSearchModel"/>
    /// <seealso cref="IReturn{BrandVendorPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandVendors", "GET", Priority = 1,
            Summary = "Use to get a list of brand vendors")]
    public partial class GetBrandVendors : BrandVendorSearchModel, IReturn<BrandVendorPagedResults> { }

    /// <summary>A ServiceStack Route to get brand vendors for connect.</summary>
    /// <seealso cref="BrandVendorSearchModel"/>
    /// <seealso cref="IReturn{List{BrandVendorModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandVendor.View"),
        PublicAPI,
        Route("/Brands/BrandVendorsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all brand vendors")]
    public partial class GetBrandVendorsForConnect : BrandVendorSearchModel, IReturn<List<BrandVendorModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all brand vendors.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandVendor.View"),
        PublicAPI,
        Route("/Brands/BrandVendorsDigest", "GET",
            Summary = "Use to get a hash representing each brand vendors")]
    public partial class GetBrandVendorsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get brand vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{BrandVendorModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandVendor/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific brand vendor")]
    public partial class GetBrandVendorByID : ImplementsIDBase, IReturn<BrandVendorModel> { }

    /// <summary>A ServiceStack Route to get brand vendor.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{BrandVendorModel}"/>
    [PublicAPI,
        Route("/Brands/BrandVendor/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific brand vendor by the custom key")]
    public partial class GetBrandVendorByKey : ImplementsKeyBase, IReturn<BrandVendorModel> { }

    /// <summary>A ServiceStack Route to check brand vendor exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandVendor.View"),
        PublicAPI,
        Route("/Brands/BrandVendor/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandVendorExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand vendor exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandVendor.View"),
        PublicAPI,
        Route("/Brands/BrandVendor/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandVendorExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create brand vendor.</summary>
    /// <seealso cref="BrandVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandVendor.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandVendor/Create", "POST", Priority = 1,
            Summary = "Use to create a new brand vendor.")]
    public partial class CreateBrandVendor : BrandVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert brand vendor.</summary>
    /// <seealso cref="BrandVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Brands/BrandVendor/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing brand vendor (as needed).")]
    public partial class UpsertBrandVendor : BrandVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update brand vendor.</summary>
    /// <seealso cref="BrandVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandVendor.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandVendor/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing brand vendor.")]
    public partial class UpdateBrandVendor : BrandVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate brand vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandVendor.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandVendor/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand vendor from the system [Soft-Delete]")]
    public partial class DeactivateBrandVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate brand vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandVendor.Deactivate"),
        PublicAPI,
        Route("/Brands/BrandVendor/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand vendor from the system [Soft-Delete]")]
    public partial class DeactivateBrandVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandVendor.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandVendor/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand vendor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandVendor.Reactivate"),
        PublicAPI,
        Route("/Brands/BrandVendor/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand vendor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandVendor.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandVendor/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific brand vendor from the system [Hard-Delete]")]
    public partial class DeleteBrandVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandVendor.Delete"),
        PublicAPI,
        Route("/Brands/BrandVendor/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific brand vendor from the system [Hard-Delete]")]
    public partial class DeleteBrandVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear brand vendor cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandVendor/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all brand vendor calls.")]
    public class ClearBrandVendorCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BrandVendorServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBrandVendors"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandVendors request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IBrandVendorModel, BrandVendorModel, IBrandVendorSearchModel, BrandVendorPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BrandVendors)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandVendorsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBrandVendorsForConnect request)
        {
            return await Workflows.BrandVendors.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandVendorsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandVendorsDigest request)
        {
            return await Workflows.BrandVendors.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBrandVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandVendorByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BrandVendors, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandVendorByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BrandVendors, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBrandVendorExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandVendorExistsByID request)
        {
            return await Workflows.BrandVendors.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandVendorExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandVendorExistsByKey request)
        {
            return await Workflows.BrandVendors.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBrandVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBrandVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandVendorDataAsync,
                    () => Workflows.BrandVendors.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBrandVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBrandVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandVendorDataAsync,
                    () => Workflows.BrandVendors.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBrandVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBrandVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandVendorDataAsync,
                    () => Workflows.BrandVendors.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBrandVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandVendorDataAsync,
                    () => Workflows.BrandVendors.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBrandVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandVendorDataAsync,
                    () => Workflows.BrandVendors.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBrandVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandVendorDataAsync,
                    () => Workflows.BrandVendors.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBrandVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandVendorDataAsync,
                    () => Workflows.BrandVendors.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBrandVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandVendorDataAsync,
                    () => Workflows.BrandVendors.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBrandVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandVendorDataAsync,
                    () => Workflows.BrandVendors.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBrandVendorCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBrandVendorCache request)
        {
            await ClearCachedBrandVendorDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBrandVendorDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBrandVendors>(string.Empty),
                    UrnId.Create<GetBrandVendorByID>(string.Empty),
                    UrnId.Create<GetBrandVendorByKey>(string.Empty),
                    UrnId.Create<CheckBrandVendorExistsByID>(string.Empty),
                    UrnId.Create<CheckBrandVendorExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BrandVendorService : BrandVendorServiceBase { }
}
