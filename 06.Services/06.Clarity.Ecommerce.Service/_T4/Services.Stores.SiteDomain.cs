// <autogenerated>
// <copyright file="SiteDomainService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the site domain service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of site domains.</summary>
    /// <seealso cref="SiteDomainSearchModel"/>
    /// <seealso cref="IReturn{SiteDomainPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/SiteDomains", "GET", Priority = 1,
            Summary = "Use to get a list of site domains")]
    public partial class GetSiteDomains : SiteDomainSearchModel, IReturn<SiteDomainPagedResults> { }

    /// <summary>A ServiceStack Route to get site domains for connect.</summary>
    /// <seealso cref="SiteDomainSearchModel"/>
    /// <seealso cref="IReturn{List{SiteDomainModel}}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomain.View"),
        PublicAPI,
        Route("/Stores/SiteDomainsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all site domains")]
    public partial class GetSiteDomainsForConnect : SiteDomainSearchModel, IReturn<List<SiteDomainModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all site domains.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomain.View"),
        PublicAPI,
        Route("/Stores/SiteDomainsDigest", "GET",
            Summary = "Use to get a hash representing each site domains")]
    public partial class GetSiteDomainsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get site domain.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SiteDomainModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/SiteDomain/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific site domain")]
    public partial class GetSiteDomainByID : ImplementsIDBase, IReturn<SiteDomainModel> { }

    /// <summary>A ServiceStack Route to get site domain.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SiteDomainModel}"/>
    [PublicAPI,
        Route("/Stores/SiteDomain/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific site domain by the custom key")]
    public partial class GetSiteDomainByKey : ImplementsKeyBase, IReturn<SiteDomainModel> { }

    /// <summary>A ServiceStack Route to get site domain.</summary>
    /// <seealso cref="IReturn{SiteDomainModel}"/>
    [PublicAPI,
        Route("/Stores/SiteDomain/Name", "GET", Priority = 1,
            Summary = "Use to get a specific site domain by the name")]
    public partial class GetSiteDomainByName : ImplementsNameBase, IReturn<SiteDomainModel> { }

    /// <summary>A ServiceStack Route to check site domain exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomain.View"),
        PublicAPI,
        Route("/Stores/SiteDomain/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSiteDomainExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check site domain exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomain.View"),
        PublicAPI,
        Route("/Stores/SiteDomain/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSiteDomainExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check site domain exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomain.View"),
        PublicAPI,
        Route("/Stores/SiteDomain/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSiteDomainExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create site domain.</summary>
    /// <seealso cref="SiteDomainModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomain.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SiteDomain/Create", "POST", Priority = 1,
            Summary = "Use to create a new site domain.")]
    public partial class CreateSiteDomain : SiteDomainModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert site domain.</summary>
    /// <seealso cref="SiteDomainModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/SiteDomain/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing site domain (as needed).")]
    public partial class UpsertSiteDomain : SiteDomainModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update site domain.</summary>
    /// <seealso cref="SiteDomainModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomain.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SiteDomain/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing site domain.")]
    public partial class UpdateSiteDomain : SiteDomainModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate site domain.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomain.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SiteDomain/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific site domain from the system [Soft-Delete]")]
    public partial class DeactivateSiteDomainByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate site domain by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomain.Deactivate"),
        PublicAPI,
        Route("/Stores/SiteDomain/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific site domain from the system [Soft-Delete]")]
    public partial class DeactivateSiteDomainByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate site domain.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomain.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SiteDomain/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific site domain from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSiteDomainByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate site domain by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomain.Reactivate"),
        PublicAPI,
        Route("/Stores/SiteDomain/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific site domain from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSiteDomainByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete site domain.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomain.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/SiteDomain/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific site domain from the system [Hard-Delete]")]
    public partial class DeleteSiteDomainByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete site domain by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.SiteDomain.Delete"),
        PublicAPI,
        Route("/Stores/SiteDomain/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific site domain from the system [Hard-Delete]")]
    public partial class DeleteSiteDomainByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear site domain cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/SiteDomain/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all site domain calls.")]
    public class ClearSiteDomainCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SiteDomainServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSiteDomains"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSiteDomains request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISiteDomainModel, SiteDomainModel, ISiteDomainSearchModel, SiteDomainPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SiteDomains)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSiteDomainsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSiteDomainsForConnect request)
        {
            return await Workflows.SiteDomains.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSiteDomainsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSiteDomainsDigest request)
        {
            return await Workflows.SiteDomains.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSiteDomainByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSiteDomainByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SiteDomains, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSiteDomainByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSiteDomainByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SiteDomains, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSiteDomainByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSiteDomainByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SiteDomains, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSiteDomainExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSiteDomainExistsByID request)
        {
            return await Workflows.SiteDomains.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSiteDomainExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSiteDomainExistsByKey request)
        {
            return await Workflows.SiteDomains.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSiteDomainExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSiteDomainExistsByName request)
        {
            return await Workflows.SiteDomains.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSiteDomain"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSiteDomain request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainDataAsync,
                    () => Workflows.SiteDomains.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSiteDomain"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSiteDomain request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainDataAsync,
                    () => Workflows.SiteDomains.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSiteDomain"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSiteDomain request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainDataAsync,
                    () => Workflows.SiteDomains.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSiteDomainByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSiteDomainByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainDataAsync,
                    () => Workflows.SiteDomains.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSiteDomainByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSiteDomainByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainDataAsync,
                    () => Workflows.SiteDomains.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSiteDomainByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSiteDomainByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainDataAsync,
                    () => Workflows.SiteDomains.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSiteDomainByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSiteDomainByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainDataAsync,
                    () => Workflows.SiteDomains.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSiteDomainByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSiteDomainByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainDataAsync,
                    () => Workflows.SiteDomains.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSiteDomainByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSiteDomainByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSiteDomainDataAsync,
                    () => Workflows.SiteDomains.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSiteDomainCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSiteDomainCache request)
        {
            await ClearCachedSiteDomainDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSiteDomainDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSiteDomains>(string.Empty),
                    UrnId.Create<GetSiteDomainByID>(string.Empty),
                    UrnId.Create<GetSiteDomainByKey>(string.Empty),
                    UrnId.Create<GetSiteDomainByName>(string.Empty),
                    UrnId.Create<CheckSiteDomainExistsByID>(string.Empty),
                    UrnId.Create<CheckSiteDomainExistsByKey>(string.Empty),
                    UrnId.Create<CheckSiteDomainExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SiteDomainService : SiteDomainServiceBase { }
}
