// <autogenerated>
// <copyright file="MembershipService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the membership service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of memberships.</summary>
    /// <seealso cref="MembershipSearchModel"/>
    /// <seealso cref="IReturn{MembershipPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/Memberships", "GET", Priority = 1,
            Summary = "Use to get a list of memberships")]
    public partial class GetMemberships : MembershipSearchModel, IReturn<MembershipPagedResults> { }

    /// <summary>A ServiceStack Route to get memberships for connect.</summary>
    /// <seealso cref="MembershipSearchModel"/>
    /// <seealso cref="IReturn{List{MembershipModel}}"/>
    [Authenticate, RequiredPermission("Payments.Membership.View"),
        PublicAPI,
        Route("/Payments/MembershipsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all memberships")]
    public partial class GetMembershipsForConnect : MembershipSearchModel, IReturn<List<MembershipModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all memberships.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.Membership.View"),
        PublicAPI,
        Route("/Payments/MembershipsDigest", "GET",
            Summary = "Use to get a hash representing each memberships")]
    public partial class GetMembershipsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get membership.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{MembershipModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/Membership/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific membership")]
    public partial class GetMembershipByID : ImplementsIDBase, IReturn<MembershipModel> { }

    /// <summary>A ServiceStack Route to get membership.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{MembershipModel}"/>
    [PublicAPI,
        Route("/Payments/Membership/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific membership by the custom key")]
    public partial class GetMembershipByKey : ImplementsKeyBase, IReturn<MembershipModel> { }

    /// <summary>A ServiceStack Route to get membership.</summary>
    /// <seealso cref="IReturn{MembershipModel}"/>
    [PublicAPI,
        Route("/Payments/Membership/Name", "GET", Priority = 1,
            Summary = "Use to get a specific membership by the name")]
    public partial class GetMembershipByName : ImplementsNameBase, IReturn<MembershipModel> { }

    /// <summary>A ServiceStack Route to get membership.</summary>
    /// <seealso cref="IReturn{MembershipModel}"/>
    [PublicAPI,
        Route("/Payments/Membership/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific membership by the name")]
    public partial class GetMembershipByDisplayName : ImplementsDisplayNameBase, IReturn<MembershipModel> { }

    /// <summary>A ServiceStack Route to check membership exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.Membership.View"),
        PublicAPI,
        Route("/Payments/Membership/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckMembershipExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check membership exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.Membership.View"),
        PublicAPI,
        Route("/Payments/Membership/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckMembershipExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check membership exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.Membership.View"),
        PublicAPI,
        Route("/Payments/Membership/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckMembershipExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check membership exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.Membership.View"),
        PublicAPI,
        Route("/Payments/Membership/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckMembershipExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create membership.</summary>
    /// <seealso cref="MembershipModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.Membership.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Membership/Create", "POST", Priority = 1,
            Summary = "Use to create a new membership.")]
    public partial class CreateMembership : MembershipModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert membership.</summary>
    /// <seealso cref="MembershipModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/Membership/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing membership (as needed).")]
    public partial class UpsertMembership : MembershipModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update membership.</summary>
    /// <seealso cref="MembershipModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.Membership.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Membership/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing membership.")]
    public partial class UpdateMembership : MembershipModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate membership.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Membership.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Membership/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific membership from the system [Soft-Delete]")]
    public partial class DeactivateMembershipByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate membership by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Membership.Deactivate"),
        PublicAPI,
        Route("/Payments/Membership/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific membership from the system [Soft-Delete]")]
    public partial class DeactivateMembershipByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate membership.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Membership.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Membership/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific membership from the system [Restore from Soft-Delete]")]
    public partial class ReactivateMembershipByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate membership by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Membership.Reactivate"),
        PublicAPI,
        Route("/Payments/Membership/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific membership from the system [Restore from Soft-Delete]")]
    public partial class ReactivateMembershipByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete membership.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Membership.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/Membership/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific membership from the system [Hard-Delete]")]
    public partial class DeleteMembershipByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete membership by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.Membership.Delete"),
        PublicAPI,
        Route("/Payments/Membership/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific membership from the system [Hard-Delete]")]
    public partial class DeleteMembershipByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear membership cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/Membership/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all membership calls.")]
    public class ClearMembershipCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class MembershipServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetMemberships"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMemberships request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IMembershipModel, MembershipModel, IMembershipSearchModel, MembershipPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Memberships)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMembershipsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetMembershipsForConnect request)
        {
            return await Workflows.Memberships.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMembershipsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMembershipsDigest request)
        {
            return await Workflows.Memberships.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetMembershipByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMembershipByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Memberships, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMembershipByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMembershipByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Memberships, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMembershipByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMembershipByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Memberships, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetMembershipByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetMembershipByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.Memberships, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckMembershipExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMembershipExistsByID request)
        {
            return await Workflows.Memberships.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckMembershipExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMembershipExistsByKey request)
        {
            return await Workflows.Memberships.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckMembershipExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMembershipExistsByName request)
        {
            return await Workflows.Memberships.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckMembershipExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckMembershipExistsByDisplayName request)
        {
            return await Workflows.Memberships.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertMembership"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertMembership request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipDataAsync,
                    () => Workflows.Memberships.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateMembership"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateMembership request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipDataAsync,
                    () => Workflows.Memberships.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateMembership"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateMembership request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipDataAsync,
                    () => Workflows.Memberships.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateMembershipByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateMembershipByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipDataAsync,
                    () => Workflows.Memberships.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateMembershipByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateMembershipByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipDataAsync,
                    () => Workflows.Memberships.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateMembershipByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateMembershipByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipDataAsync,
                    () => Workflows.Memberships.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateMembershipByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateMembershipByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipDataAsync,
                    () => Workflows.Memberships.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteMembershipByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteMembershipByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipDataAsync,
                    () => Workflows.Memberships.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteMembershipByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteMembershipByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedMembershipDataAsync,
                    () => Workflows.Memberships.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearMembershipCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearMembershipCache request)
        {
            await ClearCachedMembershipDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedMembershipDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetMemberships>(string.Empty),
                    UrnId.Create<GetMembershipByID>(string.Empty),
                    UrnId.Create<GetMembershipByKey>(string.Empty),
                    UrnId.Create<GetMembershipByName>(string.Empty),
                    UrnId.Create<CheckMembershipExistsByID>(string.Empty),
                    UrnId.Create<CheckMembershipExistsByKey>(string.Empty),
                    UrnId.Create<CheckMembershipExistsByName>(string.Empty),
                    UrnId.Create<CheckMembershipExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class MembershipService : MembershipServiceBase { }
}
