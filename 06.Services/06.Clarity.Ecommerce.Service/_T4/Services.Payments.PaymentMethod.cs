// <autogenerated>
// <copyright file="PaymentMethodService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the payment method service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of payment methods.</summary>
    /// <seealso cref="PaymentMethodSearchModel"/>
    /// <seealso cref="IReturn{PaymentMethodPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/PaymentMethods", "GET", Priority = 1,
            Summary = "Use to get a list of payment methods")]
    public partial class GetPaymentMethods : PaymentMethodSearchModel, IReturn<PaymentMethodPagedResults> { }

    /// <summary>A ServiceStack Route to get payment methods for connect.</summary>
    /// <seealso cref="PaymentMethodSearchModel"/>
    /// <seealso cref="IReturn{List{PaymentMethodModel}}"/>
    [Authenticate, RequiredPermission("Payments.PaymentMethod.View"),
        PublicAPI,
        Route("/Payments/PaymentMethodsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all payment methods")]
    public partial class GetPaymentMethodsForConnect : PaymentMethodSearchModel, IReturn<List<PaymentMethodModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all payment methods.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.PaymentMethod.View"),
        PublicAPI,
        Route("/Payments/PaymentMethodsDigest", "GET",
            Summary = "Use to get a hash representing each payment methods")]
    public partial class GetPaymentMethodsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get payment method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PaymentMethodModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/PaymentMethod/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific payment method")]
    public partial class GetPaymentMethodByID : ImplementsIDBase, IReturn<PaymentMethodModel> { }

    /// <summary>A ServiceStack Route to get payment method.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PaymentMethodModel}"/>
    [PublicAPI,
        Route("/Payments/PaymentMethod/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific payment method by the custom key")]
    public partial class GetPaymentMethodByKey : ImplementsKeyBase, IReturn<PaymentMethodModel> { }

    /// <summary>A ServiceStack Route to get payment method.</summary>
    /// <seealso cref="IReturn{PaymentMethodModel}"/>
    [PublicAPI,
        Route("/Payments/PaymentMethod/Name", "GET", Priority = 1,
            Summary = "Use to get a specific payment method by the name")]
    public partial class GetPaymentMethodByName : ImplementsNameBase, IReturn<PaymentMethodModel> { }

    /// <summary>A ServiceStack Route to check payment method exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.PaymentMethod.View"),
        PublicAPI,
        Route("/Payments/PaymentMethod/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPaymentMethodExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check payment method exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.PaymentMethod.View"),
        PublicAPI,
        Route("/Payments/PaymentMethod/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPaymentMethodExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check payment method exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.PaymentMethod.View"),
        PublicAPI,
        Route("/Payments/PaymentMethod/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPaymentMethodExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create payment method.</summary>
    /// <seealso cref="PaymentMethodModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.PaymentMethod.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentMethod/Create", "POST", Priority = 1,
            Summary = "Use to create a new payment method.")]
    public partial class CreatePaymentMethod : PaymentMethodModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert payment method.</summary>
    /// <seealso cref="PaymentMethodModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/PaymentMethod/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing payment method (as needed).")]
    public partial class UpsertPaymentMethod : PaymentMethodModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update payment method.</summary>
    /// <seealso cref="PaymentMethodModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.PaymentMethod.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentMethod/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing payment method.")]
    public partial class UpdatePaymentMethod : PaymentMethodModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate payment method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentMethod.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentMethod/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific payment method from the system [Soft-Delete]")]
    public partial class DeactivatePaymentMethodByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate payment method by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentMethod.Deactivate"),
        PublicAPI,
        Route("/Payments/PaymentMethod/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific payment method from the system [Soft-Delete]")]
    public partial class DeactivatePaymentMethodByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate payment method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentMethod.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentMethod/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific payment method from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePaymentMethodByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate payment method by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentMethod.Reactivate"),
        PublicAPI,
        Route("/Payments/PaymentMethod/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific payment method from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePaymentMethodByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete payment method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentMethod.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentMethod/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific payment method from the system [Hard-Delete]")]
    public partial class DeletePaymentMethodByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete payment method by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentMethod.Delete"),
        PublicAPI,
        Route("/Payments/PaymentMethod/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific payment method from the system [Hard-Delete]")]
    public partial class DeletePaymentMethodByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear payment method cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/PaymentMethod/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all payment method calls.")]
    public class ClearPaymentMethodCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PaymentMethodServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPaymentMethods"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentMethods request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPaymentMethodModel, PaymentMethodModel, IPaymentMethodSearchModel, PaymentMethodPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PaymentMethods)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentMethodsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPaymentMethodsForConnect request)
        {
            return await Workflows.PaymentMethods.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentMethodsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentMethodsDigest request)
        {
            return await Workflows.PaymentMethods.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPaymentMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentMethodByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PaymentMethods, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentMethodByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PaymentMethods, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentMethodByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentMethodByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.PaymentMethods, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPaymentMethodExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPaymentMethodExistsByID request)
        {
            return await Workflows.PaymentMethods.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPaymentMethodExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPaymentMethodExistsByKey request)
        {
            return await Workflows.PaymentMethods.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPaymentMethodExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPaymentMethodExistsByName request)
        {
            return await Workflows.PaymentMethods.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPaymentMethod"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPaymentMethod request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentMethodDataAsync,
                    () => Workflows.PaymentMethods.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePaymentMethod"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePaymentMethod request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentMethodDataAsync,
                    () => Workflows.PaymentMethods.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePaymentMethod"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePaymentMethod request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentMethodDataAsync,
                    () => Workflows.PaymentMethods.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePaymentMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePaymentMethodByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentMethodDataAsync,
                    () => Workflows.PaymentMethods.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePaymentMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePaymentMethodByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentMethodDataAsync,
                    () => Workflows.PaymentMethods.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePaymentMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePaymentMethodByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentMethodDataAsync,
                    () => Workflows.PaymentMethods.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePaymentMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePaymentMethodByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentMethodDataAsync,
                    () => Workflows.PaymentMethods.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePaymentMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePaymentMethodByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentMethodDataAsync,
                    () => Workflows.PaymentMethods.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePaymentMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePaymentMethodByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentMethodDataAsync,
                    () => Workflows.PaymentMethods.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPaymentMethodCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPaymentMethodCache request)
        {
            await ClearCachedPaymentMethodDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPaymentMethodDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPaymentMethods>(string.Empty),
                    UrnId.Create<GetPaymentMethodByID>(string.Empty),
                    UrnId.Create<GetPaymentMethodByKey>(string.Empty),
                    UrnId.Create<GetPaymentMethodByName>(string.Empty),
                    UrnId.Create<CheckPaymentMethodExistsByID>(string.Empty),
                    UrnId.Create<CheckPaymentMethodExistsByKey>(string.Empty),
                    UrnId.Create<CheckPaymentMethodExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PaymentMethodService : PaymentMethodServiceBase { }
}
