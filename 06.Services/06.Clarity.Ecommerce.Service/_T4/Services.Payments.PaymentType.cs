// <autogenerated>
// <copyright file="PaymentTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the payment type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of payment types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{PaymentTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/PaymentTypes", "GET", Priority = 1,
            Summary = "Use to get a list of payment types")]
    public partial class GetPaymentTypes : TypeSearchModel, IReturn<PaymentTypePagedResults> { }

    /// <summary>A ServiceStack Route to get payment types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Payments.PaymentType.View"),
        PublicAPI,
        Route("/Payments/PaymentTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all payment types")]
    public partial class GetPaymentTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all payment types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.PaymentType.View"),
        PublicAPI,
        Route("/Payments/PaymentTypesDigest", "GET",
            Summary = "Use to get a hash representing each payment types")]
    public partial class GetPaymentTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get payment type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/PaymentType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific payment type")]
    public partial class GetPaymentTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get payment type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Payments/PaymentType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific payment type by the custom key")]
    public partial class GetPaymentTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get payment type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Payments/PaymentType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific payment type by the name")]
    public partial class GetPaymentTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get payment type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Payments/PaymentType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific payment type by the name")]
    public partial class GetPaymentTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check payment type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.PaymentType.View"),
        PublicAPI,
        Route("/Payments/PaymentType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPaymentTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check payment type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.PaymentType.View"),
        PublicAPI,
        Route("/Payments/PaymentType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPaymentTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check payment type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.PaymentType.View"),
        PublicAPI,
        Route("/Payments/PaymentType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPaymentTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check payment type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.PaymentType.View"),
        PublicAPI,
        Route("/Payments/PaymentType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPaymentTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create payment type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.PaymentType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentType/Create", "POST", Priority = 1,
            Summary = "Use to create a new payment type.")]
    public partial class CreatePaymentType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert payment type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/PaymentType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing payment type (as needed).")]
    public partial class UpsertPaymentType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update payment type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.PaymentType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing payment type.")]
    public partial class UpdatePaymentType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate payment type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific payment type from the system [Soft-Delete]")]
    public partial class DeactivatePaymentTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate payment type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentType.Deactivate"),
        PublicAPI,
        Route("/Payments/PaymentType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific payment type from the system [Soft-Delete]")]
    public partial class DeactivatePaymentTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate payment type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific payment type from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePaymentTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate payment type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentType.Reactivate"),
        PublicAPI,
        Route("/Payments/PaymentType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific payment type from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePaymentTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete payment type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/PaymentType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific payment type from the system [Hard-Delete]")]
    public partial class DeletePaymentTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete payment type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.PaymentType.Delete"),
        PublicAPI,
        Route("/Payments/PaymentType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific payment type from the system [Hard-Delete]")]
    public partial class DeletePaymentTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear payment type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/PaymentType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all payment type calls.")]
    public class ClearPaymentTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PaymentTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPaymentTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, PaymentTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PaymentTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPaymentTypesForConnect request)
        {
            return await Workflows.PaymentTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentTypesDigest request)
        {
            return await Workflows.PaymentTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPaymentTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PaymentTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PaymentTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.PaymentTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPaymentTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPaymentTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.PaymentTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPaymentTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPaymentTypeExistsByID request)
        {
            return await Workflows.PaymentTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPaymentTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPaymentTypeExistsByKey request)
        {
            return await Workflows.PaymentTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPaymentTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPaymentTypeExistsByName request)
        {
            return await Workflows.PaymentTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPaymentTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPaymentTypeExistsByDisplayName request)
        {
            return await Workflows.PaymentTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPaymentType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPaymentType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentTypeDataAsync,
                    () => Workflows.PaymentTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePaymentType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePaymentType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentTypeDataAsync,
                    () => Workflows.PaymentTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePaymentType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePaymentType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentTypeDataAsync,
                    () => Workflows.PaymentTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePaymentTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePaymentTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentTypeDataAsync,
                    () => Workflows.PaymentTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePaymentTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePaymentTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentTypeDataAsync,
                    () => Workflows.PaymentTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePaymentTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePaymentTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentTypeDataAsync,
                    () => Workflows.PaymentTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePaymentTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePaymentTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentTypeDataAsync,
                    () => Workflows.PaymentTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePaymentTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePaymentTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentTypeDataAsync,
                    () => Workflows.PaymentTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePaymentTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePaymentTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPaymentTypeDataAsync,
                    () => Workflows.PaymentTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPaymentTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPaymentTypeCache request)
        {
            await ClearCachedPaymentTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPaymentTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPaymentTypes>(string.Empty),
                    UrnId.Create<GetPaymentTypeByID>(string.Empty),
                    UrnId.Create<GetPaymentTypeByKey>(string.Empty),
                    UrnId.Create<GetPaymentTypeByName>(string.Empty),
                    UrnId.Create<CheckPaymentTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckPaymentTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckPaymentTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckPaymentTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PaymentTypeService : PaymentTypeServiceBase { }
}
