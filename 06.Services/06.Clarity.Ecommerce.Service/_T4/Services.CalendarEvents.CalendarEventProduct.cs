// <autogenerated>
// <copyright file="CalendarEventProductService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the calendar event product service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of calendar event products.</summary>
    /// <seealso cref="CalendarEventProductSearchModel"/>
    /// <seealso cref="IReturn{CalendarEventProductPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventProducts", "GET", Priority = 1,
            Summary = "Use to get a list of calendar event products")]
    public partial class GetCalendarEventProducts : CalendarEventProductSearchModel, IReturn<CalendarEventProductPagedResults> { }

    /// <summary>A ServiceStack Route to get calendar event products for connect.</summary>
    /// <seealso cref="CalendarEventProductSearchModel"/>
    /// <seealso cref="IReturn{List{CalendarEventProductModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventProduct.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventProductsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all calendar event products")]
    public partial class GetCalendarEventProductsForConnect : CalendarEventProductSearchModel, IReturn<List<CalendarEventProductModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all calendar event products.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventProduct.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventProductsDigest", "GET",
            Summary = "Use to get a hash representing each calendar event products")]
    public partial class GetCalendarEventProductsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get calendar event product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CalendarEventProductModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventProduct/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event product")]
    public partial class GetCalendarEventProductByID : ImplementsIDBase, IReturn<CalendarEventProductModel> { }

    /// <summary>A ServiceStack Route to get calendar event product.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CalendarEventProductModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEventProduct/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event product by the custom key")]
    public partial class GetCalendarEventProductByKey : ImplementsKeyBase, IReturn<CalendarEventProductModel> { }

    /// <summary>A ServiceStack Route to check calendar event product exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventProduct.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventProduct/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventProductExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event product exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventProduct.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventProduct/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventProductExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create calendar event product.</summary>
    /// <seealso cref="CalendarEventProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventProduct.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventProduct/Create", "POST", Priority = 1,
            Summary = "Use to create a new calendar event product.")]
    public partial class CreateCalendarEventProduct : CalendarEventProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert calendar event product.</summary>
    /// <seealso cref="CalendarEventProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventProduct/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing calendar event product (as needed).")]
    public partial class UpsertCalendarEventProduct : CalendarEventProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update calendar event product.</summary>
    /// <seealso cref="CalendarEventProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventProduct.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventProduct/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing calendar event product.")]
    public partial class UpdateCalendarEventProduct : CalendarEventProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate calendar event product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventProduct.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventProduct/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar event product from the system [Soft-Delete]")]
    public partial class DeactivateCalendarEventProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate calendar event product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventProduct.Deactivate"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventProduct/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar event product from the system [Soft-Delete]")]
    public partial class DeactivateCalendarEventProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar event product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventProduct.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventProduct/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar event product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarEventProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar event product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventProduct.Reactivate"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventProduct/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar event product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarEventProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar event product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventProduct.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventProduct/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific calendar event product from the system [Hard-Delete]")]
    public partial class DeleteCalendarEventProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar event product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventProduct.Delete"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventProduct/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific calendar event product from the system [Hard-Delete]")]
    public partial class DeleteCalendarEventProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear calendar event product cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventProduct/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all calendar event product calls.")]
    public class ClearCalendarEventProductCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CalendarEventProductServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCalendarEventProducts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventProducts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICalendarEventProductModel, CalendarEventProductModel, ICalendarEventProductSearchModel, CalendarEventProductPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CalendarEventProducts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventProductsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCalendarEventProductsForConnect request)
        {
            return await Workflows.CalendarEventProducts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventProductsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventProductsDigest request)
        {
            return await Workflows.CalendarEventProducts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCalendarEventProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventProductByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CalendarEventProducts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventProductByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CalendarEventProducts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCalendarEventProductExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventProductExistsByID request)
        {
            return await Workflows.CalendarEventProducts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventProductExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventProductExistsByKey request)
        {
            return await Workflows.CalendarEventProducts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCalendarEventProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCalendarEventProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventProductDataAsync,
                    () => Workflows.CalendarEventProducts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCalendarEventProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCalendarEventProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventProductDataAsync,
                    () => Workflows.CalendarEventProducts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCalendarEventProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCalendarEventProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventProductDataAsync,
                    () => Workflows.CalendarEventProducts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCalendarEventProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarEventProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventProductDataAsync,
                    () => Workflows.CalendarEventProducts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCalendarEventProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarEventProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventProductDataAsync,
                    () => Workflows.CalendarEventProducts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCalendarEventProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarEventProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventProductDataAsync,
                    () => Workflows.CalendarEventProducts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCalendarEventProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarEventProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventProductDataAsync,
                    () => Workflows.CalendarEventProducts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCalendarEventProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarEventProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventProductDataAsync,
                    () => Workflows.CalendarEventProducts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCalendarEventProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarEventProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventProductDataAsync,
                    () => Workflows.CalendarEventProducts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCalendarEventProductCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCalendarEventProductCache request)
        {
            await ClearCachedCalendarEventProductDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCalendarEventProductDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCalendarEventProducts>(string.Empty),
                    UrnId.Create<GetCalendarEventProductByID>(string.Empty),
                    UrnId.Create<GetCalendarEventProductByKey>(string.Empty),
                    UrnId.Create<CheckCalendarEventProductExistsByID>(string.Empty),
                    UrnId.Create<CheckCalendarEventProductExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CalendarEventProductService : CalendarEventProductServiceBase { }
}
