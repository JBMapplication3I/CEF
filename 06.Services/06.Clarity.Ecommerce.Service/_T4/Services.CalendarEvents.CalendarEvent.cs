// <autogenerated>
// <copyright file="CalendarEventService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the calendar event service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of calendar events.</summary>
    /// <seealso cref="CalendarEventSearchModel"/>
    /// <seealso cref="IReturn{CalendarEventPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEvents", "GET", Priority = 1,
            Summary = "Use to get a list of calendar events")]
    public partial class GetCalendarEvents : CalendarEventSearchModel, IReturn<CalendarEventPagedResults> { }

    /// <summary>A ServiceStack Route to get calendar events for connect.</summary>
    /// <seealso cref="CalendarEventSearchModel"/>
    /// <seealso cref="IReturn{List{CalendarEventModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEvent.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all calendar events")]
    public partial class GetCalendarEventsForConnect : CalendarEventSearchModel, IReturn<List<CalendarEventModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all calendar events.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEvent.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventsDigest", "GET",
            Summary = "Use to get a hash representing each calendar events")]
    public partial class GetCalendarEventsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get calendar event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CalendarEventModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEvent/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event")]
    public partial class GetCalendarEventByID : ImplementsIDBase, IReturn<CalendarEventModel> { }

    /// <summary>A ServiceStack Route to get calendar event.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CalendarEventModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEvent/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event by the custom key")]
    public partial class GetCalendarEventByKey : ImplementsKeyBase, IReturn<CalendarEventModel> { }

    /// <summary>A ServiceStack Route to get calendar event.</summary>
    /// <seealso cref="IReturn{CalendarEventModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEvent/Name", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event by the name")]
    public partial class GetCalendarEventByName : ImplementsNameBase, IReturn<CalendarEventModel> { }

    /// <summary>A ServiceStack Route to check calendar event exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEvent.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEvent/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEvent.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEvent/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEvent.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEvent/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create calendar event.</summary>
    /// <seealso cref="CalendarEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEvent.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEvent/Create", "POST", Priority = 1,
            Summary = "Use to create a new calendar event.")]
    public partial class CreateCalendarEvent : CalendarEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert calendar event.</summary>
    /// <seealso cref="CalendarEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/CalendarEvents/CalendarEvent/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing calendar event (as needed).")]
    public partial class UpsertCalendarEvent : CalendarEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update calendar event.</summary>
    /// <seealso cref="CalendarEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEvent.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEvent/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing calendar event.")]
    public partial class UpdateCalendarEvent : CalendarEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate calendar event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEvent.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEvent/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar event from the system [Soft-Delete]")]
    public partial class DeactivateCalendarEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate calendar event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEvent.Deactivate"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEvent/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar event from the system [Soft-Delete]")]
    public partial class DeactivateCalendarEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEvent.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEvent/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar event from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEvent.Reactivate"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEvent/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar event from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEvent.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEvent/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific calendar event from the system [Hard-Delete]")]
    public partial class DeleteCalendarEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEvent.Delete"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEvent/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific calendar event from the system [Hard-Delete]")]
    public partial class DeleteCalendarEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear calendar event cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEvent/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all calendar event calls.")]
    public class ClearCalendarEventCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CalendarEventServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCalendarEvents"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEvents request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICalendarEventModel, CalendarEventModel, ICalendarEventSearchModel, CalendarEventPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CalendarEvents)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCalendarEventsForConnect request)
        {
            return await Workflows.CalendarEvents.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventsDigest request)
        {
            return await Workflows.CalendarEvents.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCalendarEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CalendarEvents, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CalendarEvents, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CalendarEvents, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCalendarEventExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventExistsByID request)
        {
            return await Workflows.CalendarEvents.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventExistsByKey request)
        {
            return await Workflows.CalendarEvents.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventExistsByName request)
        {
            return await Workflows.CalendarEvents.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCalendarEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCalendarEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDataAsync,
                    () => Workflows.CalendarEvents.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCalendarEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCalendarEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDataAsync,
                    () => Workflows.CalendarEvents.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCalendarEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCalendarEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDataAsync,
                    () => Workflows.CalendarEvents.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCalendarEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDataAsync,
                    () => Workflows.CalendarEvents.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCalendarEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDataAsync,
                    () => Workflows.CalendarEvents.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCalendarEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDataAsync,
                    () => Workflows.CalendarEvents.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCalendarEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDataAsync,
                    () => Workflows.CalendarEvents.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCalendarEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDataAsync,
                    () => Workflows.CalendarEvents.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCalendarEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDataAsync,
                    () => Workflows.CalendarEvents.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCalendarEventCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCalendarEventCache request)
        {
            await ClearCachedCalendarEventDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCalendarEventDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCalendarEvents>(string.Empty),
                    UrnId.Create<GetCalendarEventByID>(string.Empty),
                    UrnId.Create<GetCalendarEventByKey>(string.Empty),
                    UrnId.Create<GetCalendarEventByName>(string.Empty),
                    UrnId.Create<CheckCalendarEventExistsByID>(string.Empty),
                    UrnId.Create<CheckCalendarEventExistsByKey>(string.Empty),
                    UrnId.Create<CheckCalendarEventExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CalendarEventService : CalendarEventServiceBase { }
}
