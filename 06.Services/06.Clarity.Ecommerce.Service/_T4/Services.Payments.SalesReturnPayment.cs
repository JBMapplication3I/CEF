// <autogenerated>
// <copyright file="SalesReturnPaymentService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales return payment service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales return payments.</summary>
    /// <seealso cref="SalesReturnPaymentSearchModel"/>
    /// <seealso cref="IReturn{SalesReturnPaymentPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SalesReturnPayments", "GET", Priority = 1,
            Summary = "Use to get a list of sales return payments")]
    public partial class GetSalesReturnPayments : SalesReturnPaymentSearchModel, IReturn<SalesReturnPaymentPagedResults> { }

    /// <summary>A ServiceStack Route to get sales return payments for connect.</summary>
    /// <seealso cref="SalesReturnPaymentSearchModel"/>
    /// <seealso cref="IReturn{List{SalesReturnPaymentModel}}"/>
    [Authenticate, RequiredPermission("Payments.SalesReturnPayment.View"),
        PublicAPI,
        Route("/Payments/SalesReturnPaymentsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales return payments")]
    public partial class GetSalesReturnPaymentsForConnect : SalesReturnPaymentSearchModel, IReturn<List<SalesReturnPaymentModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales return payments.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Payments.SalesReturnPayment.View"),
        PublicAPI,
        Route("/Payments/SalesReturnPaymentsDigest", "GET",
            Summary = "Use to get a hash representing each sales return payments")]
    public partial class GetSalesReturnPaymentsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales return payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesReturnPaymentModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SalesReturnPayment/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales return payment")]
    public partial class GetSalesReturnPaymentByID : ImplementsIDBase, IReturn<SalesReturnPaymentModel> { }

    /// <summary>A ServiceStack Route to get sales return payment.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesReturnPaymentModel}"/>
    [PublicAPI,
        Route("/Payments/SalesReturnPayment/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales return payment by the custom key")]
    public partial class GetSalesReturnPaymentByKey : ImplementsKeyBase, IReturn<SalesReturnPaymentModel> { }

    /// <summary>A ServiceStack Route to check sales return payment exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.SalesReturnPayment.View"),
        PublicAPI,
        Route("/Payments/SalesReturnPayment/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnPaymentExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales return payment exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Payments.SalesReturnPayment.View"),
        PublicAPI,
        Route("/Payments/SalesReturnPayment/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnPaymentExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales return payment.</summary>
    /// <seealso cref="SalesReturnPaymentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.SalesReturnPayment.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesReturnPayment/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales return payment.")]
    public partial class CreateSalesReturnPayment : SalesReturnPaymentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales return payment.</summary>
    /// <seealso cref="SalesReturnPaymentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Payments/SalesReturnPayment/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales return payment (as needed).")]
    public partial class UpsertSalesReturnPayment : SalesReturnPaymentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales return payment.</summary>
    /// <seealso cref="SalesReturnPaymentModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Payments.SalesReturnPayment.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesReturnPayment/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales return payment.")]
    public partial class UpdateSalesReturnPayment : SalesReturnPaymentModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales return payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesReturnPayment.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesReturnPayment/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales return payment from the system [Soft-Delete]")]
    public partial class DeactivateSalesReturnPaymentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales return payment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesReturnPayment.Deactivate"),
        PublicAPI,
        Route("/Payments/SalesReturnPayment/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales return payment from the system [Soft-Delete]")]
    public partial class DeactivateSalesReturnPaymentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales return payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesReturnPayment.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesReturnPayment/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales return payment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesReturnPaymentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales return payment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesReturnPayment.Reactivate"),
        PublicAPI,
        Route("/Payments/SalesReturnPayment/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales return payment from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesReturnPaymentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales return payment.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesReturnPayment.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Payments/SalesReturnPayment/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales return payment from the system [Hard-Delete]")]
    public partial class DeleteSalesReturnPaymentByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales return payment by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Payments.SalesReturnPayment.Delete"),
        PublicAPI,
        Route("/Payments/SalesReturnPayment/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales return payment from the system [Hard-Delete]")]
    public partial class DeleteSalesReturnPaymentByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales return payment cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Payments/SalesReturnPayment/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales return payment calls.")]
    public class ClearSalesReturnPaymentCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesReturnPaymentServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesReturnPayments"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnPayments request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesReturnPaymentModel, SalesReturnPaymentModel, ISalesReturnPaymentSearchModel, SalesReturnPaymentPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesReturnPayments)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnPaymentsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesReturnPaymentsForConnect request)
        {
            return await Workflows.SalesReturnPayments.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnPaymentsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnPaymentsDigest request)
        {
            return await Workflows.SalesReturnPayments.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesReturnPaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnPaymentByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesReturnPayments, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnPaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnPaymentByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesReturnPayments, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesReturnPaymentExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnPaymentExistsByID request)
        {
            return await Workflows.SalesReturnPayments.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesReturnPaymentExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnPaymentExistsByKey request)
        {
            return await Workflows.SalesReturnPayments.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesReturnPayment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesReturnPayment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnPaymentDataAsync,
                    () => Workflows.SalesReturnPayments.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesReturnPayment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesReturnPayment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnPaymentDataAsync,
                    () => Workflows.SalesReturnPayments.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesReturnPayment"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesReturnPayment request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnPaymentDataAsync,
                    () => Workflows.SalesReturnPayments.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesReturnPaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesReturnPaymentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnPaymentDataAsync,
                    () => Workflows.SalesReturnPayments.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesReturnPaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesReturnPaymentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnPaymentDataAsync,
                    () => Workflows.SalesReturnPayments.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesReturnPaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesReturnPaymentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnPaymentDataAsync,
                    () => Workflows.SalesReturnPayments.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesReturnPaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesReturnPaymentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnPaymentDataAsync,
                    () => Workflows.SalesReturnPayments.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesReturnPaymentByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesReturnPaymentByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnPaymentDataAsync,
                    () => Workflows.SalesReturnPayments.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesReturnPaymentByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesReturnPaymentByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnPaymentDataAsync,
                    () => Workflows.SalesReturnPayments.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesReturnPaymentCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesReturnPaymentCache request)
        {
            await ClearCachedSalesReturnPaymentDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesReturnPaymentDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesReturnPayments>(string.Empty),
                    UrnId.Create<GetSalesReturnPaymentByID>(string.Empty),
                    UrnId.Create<GetSalesReturnPaymentByKey>(string.Empty),
                    UrnId.Create<CheckSalesReturnPaymentExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesReturnPaymentExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesReturnPaymentService : SalesReturnPaymentServiceBase { }
}
