// <autogenerated>
// <copyright file="AccountContactService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the account contact service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Threading.Tasks;
    using Clarity.Ecommerce.Utilities;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of account contacts.</summary>
    /// <seealso cref="AccountContactSearchModel"/>
    /// <seealso cref="IReturn{AccountContactPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountContacts", "GET", Priority = 1,
            Summary = "Use to get a list of account contacts")]
    public partial class GetAccountContacts : AccountContactSearchModel, IReturn<AccountContactPagedResults> { }

    /// <summary>A ServiceStack Route to get account contacts for connect.</summary>
    /// <seealso cref="AccountContactSearchModel"/>
    /// <seealso cref="IReturn{List{AccountContactModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountContact.View"),
        PublicAPI,
        Route("/Accounts/AccountContactsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all account contacts")]
    public partial class GetAccountContactsForConnect : AccountContactSearchModel, IReturn<List<AccountContactModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all account contacts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountContact.View"),
        PublicAPI,
        Route("/Accounts/AccountContactsDigest", "GET",
            Summary = "Use to get a hash representing each account contacts")]
    public partial class GetAccountContactsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get account contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AccountContactModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountContact/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific account contact")]
    public partial class GetAccountContactByID : ImplementsIDBase, IReturn<AccountContactModel> { }

    /// <summary>A ServiceStack Route to get account contact.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AccountContactModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountContact/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific account contact by the custom key")]
    public partial class GetAccountContactByKey : ImplementsKeyBase, IReturn<AccountContactModel> { }

    /// <summary>A ServiceStack Route to get account contact.</summary>
    /// <seealso cref="IReturn{AccountContactModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountContact/Name", "GET", Priority = 1,
            Summary = "Use to get a specific account contact by the name")]
    public partial class GetAccountContactByName : ImplementsNameBase, IReturn<AccountContactModel> { }

    /// <summary>A ServiceStack Route to check account contact exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountContact.View"),
        PublicAPI,
        Route("/Accounts/AccountContact/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountContactExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account contact exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountContact.View"),
        PublicAPI,
        Route("/Accounts/AccountContact/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountContactExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account contact exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountContact.View"),
        PublicAPI,
        Route("/Accounts/AccountContact/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountContactExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create account contact.</summary>
    /// <seealso cref="AccountContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountContact.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountContact/Create", "POST", Priority = 1,
            Summary = "Use to create a new account contact.")]
    public partial class CreateAccountContact : AccountContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert account contact.</summary>
    /// <seealso cref="AccountContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Accounts/AccountContact/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing account contact (as needed).")]
    public partial class UpsertAccountContact : AccountContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update account contact.</summary>
    /// <seealso cref="AccountContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountContact.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountContact/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing account contact.")]
    public partial class UpdateAccountContact : AccountContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate account contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountContact.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountContact/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account contact from the system [Soft-Delete]")]
    public partial class DeactivateAccountContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate account contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountContact.Deactivate"),
        PublicAPI,
        Route("/Accounts/AccountContact/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account contact from the system [Soft-Delete]")]
    public partial class DeactivateAccountContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountContact.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountContact/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountContact.Reactivate"),
        PublicAPI,
        Route("/Accounts/AccountContact/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountContact.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountContact/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific account contact from the system [Hard-Delete]")]
    public partial class DeleteAccountContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountContact.Delete"),
        PublicAPI,
        Route("/Accounts/AccountContact/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific account contact from the system [Hard-Delete]")]
    public partial class DeleteAccountContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear account contact cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountContact/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all account contact calls.")]
    public class ClearAccountContactCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AccountContactServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAccountContacts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountContacts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAccountContactModel, AccountContactModel, IAccountContactSearchModel, AccountContactPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AccountContacts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountContactsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAccountContactsForConnect request)
        {
            return await Workflows.AccountContacts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountContactsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountContactsDigest request)
        {
            return await Workflows.AccountContacts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAccountContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountContactByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AccountContacts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountContactByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AccountContacts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountContactByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountContactByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.AccountContacts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAccountContactExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountContactExistsByID request)
        {
            return await Workflows.AccountContacts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountContactExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountContactExistsByKey request)
        {
            return await Workflows.AccountContacts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountContactExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountContactExistsByName request)
        {
            return await Workflows.AccountContacts.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAccountContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAccountContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountContactDataAsync,
                    () => Workflows.AccountContacts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAccountContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAccountContact request)
        {
            request.Slave!.Type = null;
            request.Slave.TypeKey = null;
            request.Slave.TypeID = 4;
            request.Slave.TypeName = null;
            request.Slave.TypeDisplayName = null;
            // request.CustomKey = $"{await LocalAdminAccountIDOrThrow401Async(CurrentAccountIDOrThrow401).ConfigureAwait(false)}|{request.Slave.AddressKey}";
            var accountContactResult = await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountContactDataAsync,
                    () => Workflows.AccountContacts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
            using var context = RegistryLoaderWrapper.GetContext(ServiceContextProfileName);
            var accountContact = await context.AccountContacts.FilterByID(accountContactResult.Result).SingleOrDefaultAsync().ConfigureAwait(false);
            var acAttrs = accountContact.Slave!.SerializableAttributes;
            if (acAttrs is not null && !acAttrs.Keys.Contains("userId"))
            {
                var updated = accountContact.Slave!.JsonAttributes.DeserializeAttributesDictionary();
                updated.TryAdd("userId", new SerializableAttributeObject { Key = "userId", Value = CurrentUserIDOrThrow401.ToString() });
                accountContact.Slave.JsonAttributes = updated.SerializeAttributesDictionary();
                context.Contacts.Add(accountContact.Slave);
                context.Entry(accountContact.Slave).State = EntityState.Modified;
                await context.SaveUnitOfWorkAsync().ConfigureAwait(false);
            }
            return accountContactResult;
        }

        /// <summary>PUT handler for the <see cref="UpdateAccountContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAccountContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountContactDataAsync,
                    () => Workflows.AccountContacts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAccountContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountContactDataAsync,
                    () => Workflows.AccountContacts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAccountContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountContactDataAsync,
                    () => Workflows.AccountContacts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAccountContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountContactDataAsync,
                    () => Workflows.AccountContacts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAccountContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountContactDataAsync,
                    () => Workflows.AccountContacts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAccountContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountContactDataAsync,
                    () => Workflows.AccountContacts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAccountContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountContactDataAsync,
                    () => Workflows.AccountContacts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAccountContactCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAccountContactCache request)
        {
            await ClearCachedAccountContactDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAccountContactDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAccountContacts>(string.Empty),
                    UrnId.Create<GetAccountContactByID>(string.Empty),
                    UrnId.Create<GetAccountContactByKey>(string.Empty),
                    UrnId.Create<GetAccountContactByName>(string.Empty),
                    UrnId.Create<CheckAccountContactExistsByID>(string.Empty),
                    UrnId.Create<CheckAccountContactExistsByKey>(string.Empty),
                    UrnId.Create<CheckAccountContactExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AccountContactService : AccountContactServiceBase { }
}
