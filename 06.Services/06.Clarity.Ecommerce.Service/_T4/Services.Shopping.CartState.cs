// <autogenerated>
// <copyright file="CartStateService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the cart state service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of cart states.</summary>
    /// <seealso cref="StateSearchModel"/>
    /// <seealso cref="IReturn{CartStatePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartStates", "GET", Priority = 1,
            Summary = "Use to get a list of cart states")]
    public partial class GetCartStates : StateSearchModel, IReturn<CartStatePagedResults> { }

    /// <summary>A ServiceStack Route to get cart states for connect.</summary>
    /// <seealso cref="StateSearchModel"/>
    /// <seealso cref="IReturn{List{StateModel}}"/>
    [Authenticate, RequiredPermission("Shopping.CartState.View"),
        PublicAPI,
        Route("/Shopping/CartStatesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all cart states")]
    public partial class GetCartStatesForConnect : StateSearchModel, IReturn<List<StateModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all cart states.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shopping.CartState.View"),
        PublicAPI,
        Route("/Shopping/CartStatesDigest", "GET",
            Summary = "Use to get a hash representing each cart states")]
    public partial class GetCartStatesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get cart state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartState/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific cart state")]
    public partial class GetCartStateByID : ImplementsIDBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get cart state.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Shopping/CartState/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific cart state by the custom key")]
    public partial class GetCartStateByKey : ImplementsKeyBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get cart state.</summary>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Shopping/CartState/Name", "GET", Priority = 1,
            Summary = "Use to get a specific cart state by the name")]
    public partial class GetCartStateByName : ImplementsNameBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get cart state.</summary>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Shopping/CartState/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific cart state by the name")]
    public partial class GetCartStateByDisplayName : ImplementsDisplayNameBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to check cart state exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartState.View"),
        PublicAPI,
        Route("/Shopping/CartState/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCartStateExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart state exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartState.View"),
        PublicAPI,
        Route("/Shopping/CartState/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCartStateExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart state exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartState.View"),
        PublicAPI,
        Route("/Shopping/CartState/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCartStateExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart state exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartState.View"),
        PublicAPI,
        Route("/Shopping/CartState/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCartStateExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create cart state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.CartState.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartState/Create", "POST", Priority = 1,
            Summary = "Use to create a new cart state.")]
    public partial class CreateCartState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert cart state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shopping/CartState/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing cart state (as needed).")]
    public partial class UpsertCartState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update cart state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.CartState.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartState/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing cart state.")]
    public partial class UpdateCartState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate cart state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartState.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartState/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart state from the system [Soft-Delete]")]
    public partial class DeactivateCartStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate cart state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartState.Deactivate"),
        PublicAPI,
        Route("/Shopping/CartState/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart state from the system [Soft-Delete]")]
    public partial class DeactivateCartStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartState.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartState/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart state from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartState.Reactivate"),
        PublicAPI,
        Route("/Shopping/CartState/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart state from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartState.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartState/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific cart state from the system [Hard-Delete]")]
    public partial class DeleteCartStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartState.Delete"),
        PublicAPI,
        Route("/Shopping/CartState/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific cart state from the system [Hard-Delete]")]
    public partial class DeleteCartStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear cart state cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartState/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all cart state calls.")]
    public class ClearCartStateCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CartStateServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCartStates"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartStates request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStateModel, StateModel, IStateSearchModel, CartStatePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CartStates)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartStatesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCartStatesForConnect request)
        {
            return await Workflows.CartStates.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartStatesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartStatesDigest request)
        {
            return await Workflows.CartStates.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCartStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartStateByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CartStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartStateByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CartStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartStateByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartStateByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CartStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartStateByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartStateByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.CartStates, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCartStateExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartStateExistsByID request)
        {
            return await Workflows.CartStates.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartStateExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartStateExistsByKey request)
        {
            return await Workflows.CartStates.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartStateExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartStateExistsByName request)
        {
            return await Workflows.CartStates.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartStateExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartStateExistsByDisplayName request)
        {
            return await Workflows.CartStates.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCartState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCartState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartStateDataAsync,
                    () => Workflows.CartStates.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCartState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCartState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartStateDataAsync,
                    () => Workflows.CartStates.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCartState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCartState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartStateDataAsync,
                    () => Workflows.CartStates.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCartStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartStateDataAsync,
                    () => Workflows.CartStates.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCartStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartStateDataAsync,
                    () => Workflows.CartStates.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCartStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartStateDataAsync,
                    () => Workflows.CartStates.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCartStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartStateDataAsync,
                    () => Workflows.CartStates.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCartStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartStateDataAsync,
                    () => Workflows.CartStates.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCartStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartStateDataAsync,
                    () => Workflows.CartStates.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCartStateCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCartStateCache request)
        {
            await ClearCachedCartStateDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCartStateDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCartStates>(string.Empty),
                    UrnId.Create<GetCartStateByID>(string.Empty),
                    UrnId.Create<GetCartStateByKey>(string.Empty),
                    UrnId.Create<GetCartStateByName>(string.Empty),
                    UrnId.Create<CheckCartStateExistsByID>(string.Empty),
                    UrnId.Create<CheckCartStateExistsByKey>(string.Empty),
                    UrnId.Create<CheckCartStateExistsByName>(string.Empty),
                    UrnId.Create<CheckCartStateExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CartStateService : CartStateServiceBase { }
}
