// <autogenerated>
// <copyright file="CalendarEventDetailService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the calendar event detail service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of calendar event details.</summary>
    /// <seealso cref="CalendarEventDetailSearchModel"/>
    /// <seealso cref="IReturn{CalendarEventDetailPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventDetails", "GET", Priority = 1,
            Summary = "Use to get a list of calendar event details")]
    public partial class GetCalendarEventDetails : CalendarEventDetailSearchModel, IReturn<CalendarEventDetailPagedResults> { }

    /// <summary>A ServiceStack Route to get calendar event details for connect.</summary>
    /// <seealso cref="CalendarEventDetailSearchModel"/>
    /// <seealso cref="IReturn{List{CalendarEventDetailModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventDetail.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventDetailsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all calendar event details")]
    public partial class GetCalendarEventDetailsForConnect : CalendarEventDetailSearchModel, IReturn<List<CalendarEventDetailModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all calendar event details.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventDetail.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventDetailsDigest", "GET",
            Summary = "Use to get a hash representing each calendar event details")]
    public partial class GetCalendarEventDetailsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get calendar event detail.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CalendarEventDetailModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventDetail/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event detail")]
    public partial class GetCalendarEventDetailByID : ImplementsIDBase, IReturn<CalendarEventDetailModel> { }

    /// <summary>A ServiceStack Route to get calendar event detail.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CalendarEventDetailModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEventDetail/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event detail by the custom key")]
    public partial class GetCalendarEventDetailByKey : ImplementsKeyBase, IReturn<CalendarEventDetailModel> { }

    /// <summary>A ServiceStack Route to get calendar event detail.</summary>
    /// <seealso cref="IReturn{CalendarEventDetailModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEventDetail/Name", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event detail by the name")]
    public partial class GetCalendarEventDetailByName : ImplementsNameBase, IReturn<CalendarEventDetailModel> { }

    /// <summary>A ServiceStack Route to check calendar event detail exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventDetail.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventDetail/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventDetailExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event detail exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventDetail.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventDetail/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventDetailExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event detail exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventDetail.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventDetail/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventDetailExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create calendar event detail.</summary>
    /// <seealso cref="CalendarEventDetailModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventDetail.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventDetail/Create", "POST", Priority = 1,
            Summary = "Use to create a new calendar event detail.")]
    public partial class CreateCalendarEventDetail : CalendarEventDetailModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert calendar event detail.</summary>
    /// <seealso cref="CalendarEventDetailModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventDetail/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing calendar event detail (as needed).")]
    public partial class UpsertCalendarEventDetail : CalendarEventDetailModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update calendar event detail.</summary>
    /// <seealso cref="CalendarEventDetailModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventDetail.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventDetail/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing calendar event detail.")]
    public partial class UpdateCalendarEventDetail : CalendarEventDetailModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate calendar event detail.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventDetail.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventDetail/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar event detail from the system [Soft-Delete]")]
    public partial class DeactivateCalendarEventDetailByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate calendar event detail by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventDetail.Deactivate"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventDetail/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar event detail from the system [Soft-Delete]")]
    public partial class DeactivateCalendarEventDetailByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar event detail.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventDetail.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventDetail/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar event detail from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarEventDetailByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar event detail by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventDetail.Reactivate"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventDetail/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar event detail from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarEventDetailByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar event detail.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventDetail.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventDetail/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific calendar event detail from the system [Hard-Delete]")]
    public partial class DeleteCalendarEventDetailByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar event detail by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventDetail.Delete"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventDetail/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific calendar event detail from the system [Hard-Delete]")]
    public partial class DeleteCalendarEventDetailByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear calendar event detail cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventDetail/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all calendar event detail calls.")]
    public class ClearCalendarEventDetailCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CalendarEventDetailServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCalendarEventDetails"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventDetails request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICalendarEventDetailModel, CalendarEventDetailModel, ICalendarEventDetailSearchModel, CalendarEventDetailPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CalendarEventDetails)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventDetailsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCalendarEventDetailsForConnect request)
        {
            return await Workflows.CalendarEventDetails.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventDetailsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventDetailsDigest request)
        {
            return await Workflows.CalendarEventDetails.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCalendarEventDetailByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventDetailByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CalendarEventDetails, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventDetailByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventDetailByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CalendarEventDetails, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventDetailByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventDetailByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CalendarEventDetails, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCalendarEventDetailExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventDetailExistsByID request)
        {
            return await Workflows.CalendarEventDetails.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventDetailExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventDetailExistsByKey request)
        {
            return await Workflows.CalendarEventDetails.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventDetailExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventDetailExistsByName request)
        {
            return await Workflows.CalendarEventDetails.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCalendarEventDetail"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCalendarEventDetail request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDetailDataAsync,
                    () => Workflows.CalendarEventDetails.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCalendarEventDetail"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCalendarEventDetail request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDetailDataAsync,
                    () => Workflows.CalendarEventDetails.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCalendarEventDetail"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCalendarEventDetail request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDetailDataAsync,
                    () => Workflows.CalendarEventDetails.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCalendarEventDetailByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarEventDetailByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDetailDataAsync,
                    () => Workflows.CalendarEventDetails.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCalendarEventDetailByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarEventDetailByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDetailDataAsync,
                    () => Workflows.CalendarEventDetails.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCalendarEventDetailByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarEventDetailByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDetailDataAsync,
                    () => Workflows.CalendarEventDetails.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCalendarEventDetailByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarEventDetailByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDetailDataAsync,
                    () => Workflows.CalendarEventDetails.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCalendarEventDetailByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarEventDetailByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDetailDataAsync,
                    () => Workflows.CalendarEventDetails.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCalendarEventDetailByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarEventDetailByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventDetailDataAsync,
                    () => Workflows.CalendarEventDetails.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCalendarEventDetailCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCalendarEventDetailCache request)
        {
            await ClearCachedCalendarEventDetailDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCalendarEventDetailDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCalendarEventDetails>(string.Empty),
                    UrnId.Create<GetCalendarEventDetailByID>(string.Empty),
                    UrnId.Create<GetCalendarEventDetailByKey>(string.Empty),
                    UrnId.Create<GetCalendarEventDetailByName>(string.Empty),
                    UrnId.Create<CheckCalendarEventDetailExistsByID>(string.Empty),
                    UrnId.Create<CheckCalendarEventDetailExistsByKey>(string.Empty),
                    UrnId.Create<CheckCalendarEventDetailExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CalendarEventDetailService : CalendarEventDetailServiceBase { }
}
