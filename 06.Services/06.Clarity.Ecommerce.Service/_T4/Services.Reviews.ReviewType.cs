// <autogenerated>
// <copyright file="ReviewTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the review type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of review types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{ReviewTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Reviews/ReviewTypes", "GET", Priority = 1,
            Summary = "Use to get a list of review types")]
    public partial class GetReviewTypes : TypeSearchModel, IReturn<ReviewTypePagedResults> { }

    /// <summary>A ServiceStack Route to get review types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Reviews.ReviewType.View"),
        PublicAPI,
        Route("/Reviews/ReviewTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all review types")]
    public partial class GetReviewTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all review types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Reviews.ReviewType.View"),
        PublicAPI,
        Route("/Reviews/ReviewTypesDigest", "GET",
            Summary = "Use to get a hash representing each review types")]
    public partial class GetReviewTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get review type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Reviews/ReviewType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific review type")]
    public partial class GetReviewTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get review type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Reviews/ReviewType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific review type by the custom key")]
    public partial class GetReviewTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get review type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Reviews/ReviewType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific review type by the name")]
    public partial class GetReviewTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get review type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Reviews/ReviewType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific review type by the name")]
    public partial class GetReviewTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check review type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Reviews.ReviewType.View"),
        PublicAPI,
        Route("/Reviews/ReviewType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckReviewTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check review type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Reviews.ReviewType.View"),
        PublicAPI,
        Route("/Reviews/ReviewType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckReviewTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check review type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Reviews.ReviewType.View"),
        PublicAPI,
        Route("/Reviews/ReviewType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckReviewTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check review type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Reviews.ReviewType.View"),
        PublicAPI,
        Route("/Reviews/ReviewType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckReviewTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create review type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Reviews.ReviewType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reviews/ReviewType/Create", "POST", Priority = 1,
            Summary = "Use to create a new review type.")]
    public partial class CreateReviewType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert review type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Reviews/ReviewType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing review type (as needed).")]
    public partial class UpsertReviewType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update review type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Reviews.ReviewType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reviews/ReviewType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing review type.")]
    public partial class UpdateReviewType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate review type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reviews.ReviewType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reviews/ReviewType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific review type from the system [Soft-Delete]")]
    public partial class DeactivateReviewTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate review type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reviews.ReviewType.Deactivate"),
        PublicAPI,
        Route("/Reviews/ReviewType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific review type from the system [Soft-Delete]")]
    public partial class DeactivateReviewTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate review type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reviews.ReviewType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reviews/ReviewType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific review type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateReviewTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate review type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reviews.ReviewType.Reactivate"),
        PublicAPI,
        Route("/Reviews/ReviewType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific review type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateReviewTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete review type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reviews.ReviewType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reviews/ReviewType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific review type from the system [Hard-Delete]")]
    public partial class DeleteReviewTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete review type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reviews.ReviewType.Delete"),
        PublicAPI,
        Route("/Reviews/ReviewType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific review type from the system [Hard-Delete]")]
    public partial class DeleteReviewTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear review type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Reviews/ReviewType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all review type calls.")]
    public class ClearReviewTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ReviewTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetReviewTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReviewTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, ReviewTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ReviewTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReviewTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetReviewTypesForConnect request)
        {
            return await Workflows.ReviewTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReviewTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReviewTypesDigest request)
        {
            return await Workflows.ReviewTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetReviewTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReviewTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ReviewTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReviewTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReviewTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ReviewTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReviewTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReviewTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ReviewTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReviewTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReviewTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.ReviewTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckReviewTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReviewTypeExistsByID request)
        {
            return await Workflows.ReviewTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReviewTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReviewTypeExistsByKey request)
        {
            return await Workflows.ReviewTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReviewTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReviewTypeExistsByName request)
        {
            return await Workflows.ReviewTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReviewTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReviewTypeExistsByDisplayName request)
        {
            return await Workflows.ReviewTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertReviewType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertReviewType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewTypeDataAsync,
                    () => Workflows.ReviewTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateReviewType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateReviewType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewTypeDataAsync,
                    () => Workflows.ReviewTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateReviewType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateReviewType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewTypeDataAsync,
                    () => Workflows.ReviewTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateReviewTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateReviewTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewTypeDataAsync,
                    () => Workflows.ReviewTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateReviewTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateReviewTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewTypeDataAsync,
                    () => Workflows.ReviewTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateReviewTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateReviewTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewTypeDataAsync,
                    () => Workflows.ReviewTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateReviewTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateReviewTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewTypeDataAsync,
                    () => Workflows.ReviewTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteReviewTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteReviewTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewTypeDataAsync,
                    () => Workflows.ReviewTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteReviewTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteReviewTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewTypeDataAsync,
                    () => Workflows.ReviewTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearReviewTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearReviewTypeCache request)
        {
            await ClearCachedReviewTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedReviewTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetReviewTypes>(string.Empty),
                    UrnId.Create<GetReviewTypeByID>(string.Empty),
                    UrnId.Create<GetReviewTypeByKey>(string.Empty),
                    UrnId.Create<GetReviewTypeByName>(string.Empty),
                    UrnId.Create<CheckReviewTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckReviewTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckReviewTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckReviewTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ReviewTypeService : ReviewTypeServiceBase { }
}
