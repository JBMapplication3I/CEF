// <autogenerated>
// <copyright file="StoreDistrictService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store district service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store districts.</summary>
    /// <seealso cref="StoreDistrictSearchModel"/>
    /// <seealso cref="IReturn{StoreDistrictPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreDistricts", "GET", Priority = 1,
            Summary = "Use to get a list of store districts")]
    public partial class GetStoreDistricts : StoreDistrictSearchModel, IReturn<StoreDistrictPagedResults> { }

    /// <summary>A ServiceStack Route to get store districts for connect.</summary>
    /// <seealso cref="StoreDistrictSearchModel"/>
    /// <seealso cref="IReturn{List{StoreDistrictModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreDistrict.View"),
        PublicAPI,
        Route("/Stores/StoreDistrictsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store districts")]
    public partial class GetStoreDistrictsForConnect : StoreDistrictSearchModel, IReturn<List<StoreDistrictModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store districts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreDistrict.View"),
        PublicAPI,
        Route("/Stores/StoreDistrictsDigest", "GET",
            Summary = "Use to get a hash representing each store districts")]
    public partial class GetStoreDistrictsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreDistrictModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreDistrict/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store district")]
    public partial class GetStoreDistrictByID : ImplementsIDBase, IReturn<StoreDistrictModel> { }

    /// <summary>A ServiceStack Route to get store district.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreDistrictModel}"/>
    [PublicAPI,
        Route("/Stores/StoreDistrict/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store district by the custom key")]
    public partial class GetStoreDistrictByKey : ImplementsKeyBase, IReturn<StoreDistrictModel> { }

    /// <summary>A ServiceStack Route to check store district exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreDistrict.View"),
        PublicAPI,
        Route("/Stores/StoreDistrict/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreDistrictExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store district exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreDistrict.View"),
        PublicAPI,
        Route("/Stores/StoreDistrict/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreDistrictExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store district.</summary>
    /// <seealso cref="StoreDistrictModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreDistrict.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreDistrict/Create", "POST", Priority = 1,
            Summary = "Use to create a new store district.")]
    public partial class CreateStoreDistrict : StoreDistrictModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store district.</summary>
    /// <seealso cref="StoreDistrictModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreDistrict/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store district (as needed).")]
    public partial class UpsertStoreDistrict : StoreDistrictModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store district.</summary>
    /// <seealso cref="StoreDistrictModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreDistrict.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreDistrict/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store district.")]
    public partial class UpdateStoreDistrict : StoreDistrictModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreDistrict.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreDistrict/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store district from the system [Soft-Delete]")]
    public partial class DeactivateStoreDistrictByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store district by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreDistrict.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreDistrict/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store district from the system [Soft-Delete]")]
    public partial class DeactivateStoreDistrictByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreDistrict.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreDistrict/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store district from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreDistrictByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store district by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreDistrict.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreDistrict/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store district from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreDistrictByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreDistrict.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreDistrict/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store district from the system [Hard-Delete]")]
    public partial class DeleteStoreDistrictByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store district by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreDistrict.Delete"),
        PublicAPI,
        Route("/Stores/StoreDistrict/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store district from the system [Hard-Delete]")]
    public partial class DeleteStoreDistrictByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store district cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreDistrict/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store district calls.")]
    public class ClearStoreDistrictCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreDistrictServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreDistricts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreDistricts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreDistrictModel, StoreDistrictModel, IStoreDistrictSearchModel, StoreDistrictPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreDistricts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreDistrictsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreDistrictsForConnect request)
        {
            return await Workflows.StoreDistricts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreDistrictsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreDistrictsDigest request)
        {
            return await Workflows.StoreDistricts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreDistrictByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreDistricts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreDistrictByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreDistricts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreDistrictExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreDistrictExistsByID request)
        {
            return await Workflows.StoreDistricts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreDistrictExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreDistrictExistsByKey request)
        {
            return await Workflows.StoreDistricts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreDistrict"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreDistrict request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDistrictDataAsync,
                    () => Workflows.StoreDistricts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreDistrict"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreDistrict request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDistrictDataAsync,
                    () => Workflows.StoreDistricts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreDistrict"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreDistrict request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDistrictDataAsync,
                    () => Workflows.StoreDistricts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreDistrictByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDistrictDataAsync,
                    () => Workflows.StoreDistricts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreDistrictByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDistrictDataAsync,
                    () => Workflows.StoreDistricts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreDistrictByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDistrictDataAsync,
                    () => Workflows.StoreDistricts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreDistrictByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDistrictDataAsync,
                    () => Workflows.StoreDistricts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreDistrictByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDistrictDataAsync,
                    () => Workflows.StoreDistricts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreDistrictByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDistrictDataAsync,
                    () => Workflows.StoreDistricts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreDistrictCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreDistrictCache request)
        {
            await ClearCachedStoreDistrictDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreDistrictDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreDistricts>(string.Empty),
                    UrnId.Create<GetStoreDistrictByID>(string.Empty),
                    UrnId.Create<GetStoreDistrictByKey>(string.Empty),
                    UrnId.Create<CheckStoreDistrictExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreDistrictExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreDistrictService : StoreDistrictServiceBase { }
}
