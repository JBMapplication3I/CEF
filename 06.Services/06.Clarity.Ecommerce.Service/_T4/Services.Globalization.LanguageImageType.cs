// <autogenerated>
// <copyright file="LanguageImageTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the language image type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of language image types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{LanguageImageTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/LanguageImageTypes", "GET", Priority = 1,
            Summary = "Use to get a list of language image types")]
    public partial class GetLanguageImageTypes : TypeSearchModel, IReturn<LanguageImageTypePagedResults> { }

    /// <summary>A ServiceStack Route to get language image types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImageType.View"),
        PublicAPI,
        Route("/Globalization/LanguageImageTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all language image types")]
    public partial class GetLanguageImageTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all language image types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImageType.View"),
        PublicAPI,
        Route("/Globalization/LanguageImageTypesDigest", "GET",
            Summary = "Use to get a hash representing each language image types")]
    public partial class GetLanguageImageTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get language image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/LanguageImageType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific language image type")]
    public partial class GetLanguageImageTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get language image type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Globalization/LanguageImageType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific language image type by the custom key")]
    public partial class GetLanguageImageTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get language image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Globalization/LanguageImageType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific language image type by the name")]
    public partial class GetLanguageImageTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get language image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Globalization/LanguageImageType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific language image type by the name")]
    public partial class GetLanguageImageTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check language image type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImageType.View"),
        PublicAPI,
        Route("/Globalization/LanguageImageType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckLanguageImageTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check language image type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImageType.View"),
        PublicAPI,
        Route("/Globalization/LanguageImageType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckLanguageImageTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check language image type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImageType.View"),
        PublicAPI,
        Route("/Globalization/LanguageImageType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckLanguageImageTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check language image type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImageType.View"),
        PublicAPI,
        Route("/Globalization/LanguageImageType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckLanguageImageTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create language image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImageType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/LanguageImageType/Create", "POST", Priority = 1,
            Summary = "Use to create a new language image type.")]
    public partial class CreateLanguageImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert language image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Globalization/LanguageImageType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing language image type (as needed).")]
    public partial class UpsertLanguageImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update language image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImageType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/LanguageImageType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing language image type.")]
    public partial class UpdateLanguageImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate language image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImageType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/LanguageImageType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific language image type from the system [Soft-Delete]")]
    public partial class DeactivateLanguageImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate language image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImageType.Deactivate"),
        PublicAPI,
        Route("/Globalization/LanguageImageType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific language image type from the system [Soft-Delete]")]
    public partial class DeactivateLanguageImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate language image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImageType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/LanguageImageType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific language image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateLanguageImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate language image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImageType.Reactivate"),
        PublicAPI,
        Route("/Globalization/LanguageImageType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific language image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateLanguageImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete language image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImageType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/LanguageImageType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific language image type from the system [Hard-Delete]")]
    public partial class DeleteLanguageImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete language image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.LanguageImageType.Delete"),
        PublicAPI,
        Route("/Globalization/LanguageImageType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific language image type from the system [Hard-Delete]")]
    public partial class DeleteLanguageImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear language image type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/LanguageImageType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all language image type calls.")]
    public class ClearLanguageImageTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class LanguageImageTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetLanguageImageTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguageImageTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, LanguageImageTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.LanguageImageTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLanguageImageTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetLanguageImageTypesForConnect request)
        {
            return await Workflows.LanguageImageTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLanguageImageTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguageImageTypesDigest request)
        {
            return await Workflows.LanguageImageTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetLanguageImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguageImageTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.LanguageImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLanguageImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguageImageTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.LanguageImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLanguageImageTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguageImageTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.LanguageImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetLanguageImageTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetLanguageImageTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.LanguageImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckLanguageImageTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLanguageImageTypeExistsByID request)
        {
            return await Workflows.LanguageImageTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckLanguageImageTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLanguageImageTypeExistsByKey request)
        {
            return await Workflows.LanguageImageTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckLanguageImageTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLanguageImageTypeExistsByName request)
        {
            return await Workflows.LanguageImageTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckLanguageImageTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckLanguageImageTypeExistsByDisplayName request)
        {
            return await Workflows.LanguageImageTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertLanguageImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertLanguageImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageTypeDataAsync,
                    () => Workflows.LanguageImageTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateLanguageImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateLanguageImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageTypeDataAsync,
                    () => Workflows.LanguageImageTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateLanguageImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateLanguageImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageTypeDataAsync,
                    () => Workflows.LanguageImageTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateLanguageImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateLanguageImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageTypeDataAsync,
                    () => Workflows.LanguageImageTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateLanguageImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateLanguageImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageTypeDataAsync,
                    () => Workflows.LanguageImageTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateLanguageImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateLanguageImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageTypeDataAsync,
                    () => Workflows.LanguageImageTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateLanguageImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateLanguageImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageTypeDataAsync,
                    () => Workflows.LanguageImageTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteLanguageImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteLanguageImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageTypeDataAsync,
                    () => Workflows.LanguageImageTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteLanguageImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteLanguageImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedLanguageImageTypeDataAsync,
                    () => Workflows.LanguageImageTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearLanguageImageTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearLanguageImageTypeCache request)
        {
            await ClearCachedLanguageImageTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedLanguageImageTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetLanguageImageTypes>(string.Empty),
                    UrnId.Create<GetLanguageImageTypeByID>(string.Empty),
                    UrnId.Create<GetLanguageImageTypeByKey>(string.Empty),
                    UrnId.Create<GetLanguageImageTypeByName>(string.Empty),
                    UrnId.Create<CheckLanguageImageTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckLanguageImageTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckLanguageImageTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckLanguageImageTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class LanguageImageTypeService : LanguageImageTypeServiceBase { }
}
