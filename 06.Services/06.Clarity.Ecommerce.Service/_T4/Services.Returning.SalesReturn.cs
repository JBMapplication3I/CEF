// <autogenerated>
// <copyright file="SalesReturnService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales return service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales returns.</summary>
    /// <seealso cref="SalesReturnSearchModel"/>
    /// <seealso cref="IReturn{SalesReturnPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturns", "GET", Priority = 1,
            Summary = "Use to get a list of sales returns")]
    public partial class GetSalesReturns : SalesReturnSearchModel, IReturn<SalesReturnPagedResults> { }

    /// <summary>A ServiceStack Route to get sales returns for connect.</summary>
    /// <seealso cref="SalesReturnSearchModel"/>
    /// <seealso cref="IReturn{List{SalesReturnModel}}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturn.View"),
        PublicAPI,
        Route("/Returning/SalesReturnsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales returns")]
    public partial class GetSalesReturnsForConnect : SalesReturnSearchModel, IReturn<List<SalesReturnModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales returns.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturn.View"),
        PublicAPI,
        Route("/Returning/SalesReturnsDigest", "GET",
            Summary = "Use to get a hash representing each sales returns")]
    public partial class GetSalesReturnsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales return.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesReturnModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturn/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales return")]
    public partial class GetSalesReturnByID : ImplementsIDBase, IReturn<SalesReturnModel> { }

    /// <summary>A ServiceStack Route to get sales return.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesReturnModel}"/>
    [PublicAPI,
        Route("/Returning/SalesReturn/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales return by the custom key")]
    public partial class GetSalesReturnByKey : ImplementsKeyBase, IReturn<SalesReturnModel> { }

    /// <summary>A ServiceStack Route to check sales return exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturn.View"),
        PublicAPI,
        Route("/Returning/SalesReturn/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales return exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturn.View"),
        PublicAPI,
        Route("/Returning/SalesReturn/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales return.</summary>
    /// <seealso cref="SalesReturnModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturn.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturn/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales return.")]
    public partial class CreateSalesReturn : SalesReturnModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales return.</summary>
    /// <seealso cref="SalesReturnModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Returning/SalesReturn/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales return (as needed).")]
    public partial class UpsertSalesReturn : SalesReturnModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales return.</summary>
    /// <seealso cref="SalesReturnModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturn.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturn/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales return.")]
    public partial class UpdateSalesReturn : SalesReturnModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales return.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturn.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturn/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales return from the system [Soft-Delete]")]
    public partial class DeactivateSalesReturnByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales return by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturn.Deactivate"),
        PublicAPI,
        Route("/Returning/SalesReturn/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales return from the system [Soft-Delete]")]
    public partial class DeactivateSalesReturnByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales return.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturn.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturn/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales return from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesReturnByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales return by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturn.Reactivate"),
        PublicAPI,
        Route("/Returning/SalesReturn/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales return from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesReturnByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales return.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturn.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturn/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales return from the system [Hard-Delete]")]
    public partial class DeleteSalesReturnByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales return by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturn.Delete"),
        PublicAPI,
        Route("/Returning/SalesReturn/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales return from the system [Hard-Delete]")]
    public partial class DeleteSalesReturnByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales return cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturn/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales return calls.")]
    public class ClearSalesReturnCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesReturnServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesReturns"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturns request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesReturnModel, SalesReturnModel, ISalesReturnSearchModel, SalesReturnPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesReturns)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesReturnsForConnect request)
        {
            return await Workflows.SalesReturns.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnsDigest request)
        {
            return await Workflows.SalesReturns.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesReturnByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesReturns, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesReturns, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesReturnExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnExistsByID request)
        {
            return await Workflows.SalesReturns.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesReturnExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnExistsByKey request)
        {
            return await Workflows.SalesReturns.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesReturn"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesReturn request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnDataAsync,
                    () => Workflows.SalesReturns.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesReturn"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesReturn request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnDataAsync,
                    () => Workflows.SalesReturns.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesReturn"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesReturn request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnDataAsync,
                    () => Workflows.SalesReturns.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesReturnByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesReturnByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnDataAsync,
                    () => Workflows.SalesReturns.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesReturnByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesReturnByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnDataAsync,
                    () => Workflows.SalesReturns.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesReturnByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesReturnByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnDataAsync,
                    () => Workflows.SalesReturns.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesReturnByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesReturnByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnDataAsync,
                    () => Workflows.SalesReturns.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesReturnByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesReturnByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnDataAsync,
                    () => Workflows.SalesReturns.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesReturnByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesReturnByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnDataAsync,
                    () => Workflows.SalesReturns.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesReturnCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesReturnCache request)
        {
            await ClearCachedSalesReturnDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesReturnDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesReturns>(string.Empty),
                    UrnId.Create<GetSalesReturnByID>(string.Empty),
                    UrnId.Create<GetSalesReturnByKey>(string.Empty),
                    UrnId.Create<CheckSalesReturnExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesReturnExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesReturnService : SalesReturnServiceBase { }
}
