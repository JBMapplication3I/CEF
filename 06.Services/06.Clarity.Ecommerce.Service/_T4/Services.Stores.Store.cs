// <autogenerated>
// <copyright file="StoreService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of stores.</summary>
    /// <seealso cref="StoreSearchModel"/>
    /// <seealso cref="IReturn{StorePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/Stores", "GET", Priority = 1,
            Summary = "Use to get a list of stores")]
    public partial class GetStores : StoreSearchModel, IReturn<StorePagedResults> { }

    /// <summary>A ServiceStack Route to get stores for connect.</summary>
    /// <seealso cref="StoreSearchModel"/>
    /// <seealso cref="IReturn{List{StoreModel}}"/>
    [Authenticate, RequiredPermission("Stores.Store.View"),
        PublicAPI,
        Route("/Stores/StoresForConnect", "POST,GET", Priority = 1,
            Summary = "Get all stores")]
    public partial class GetStoresForConnect : StoreSearchModel, IReturn<List<StoreModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all stores.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.Store.View"),
        PublicAPI,
        Route("/Stores/StoresDigest", "GET",
            Summary = "Use to get a hash representing each stores")]
    public partial class GetStoresDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/Store/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store")]
    public partial class GetStoreByID : ImplementsIDBase, IReturn<StoreModel> { }

    /// <summary>A ServiceStack Route to get store.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreModel}"/>
    [PublicAPI,
        Route("/Stores/Store/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store by the custom key")]
    public partial class GetStoreByKey : ImplementsKeyBase, IReturn<StoreModel> { }

    /// <summary>A ServiceStack Route to get store.</summary>
    /// <seealso cref="IReturn{StoreModel}"/>
    [PublicAPI,
        Route("/Stores/Store/Name", "GET", Priority = 1,
            Summary = "Use to get a specific store by the name")]
    public partial class GetStoreByName : ImplementsNameBase, IReturn<StoreModel> { }

    /// <summary>A ServiceStack Route to get store.</summary>
    /// <seealso cref="IReturn{StoreModel}"/>
    [PublicAPI,
        Route("/Stores/Store/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific store by the SEO URL")]
    public partial class GetStoreBySeoUrl : ImplementsSeoUrlBase, IReturn<StoreModel> { }

    /// <summary>A ServiceStack Route to check store exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.Store.View"),
        PublicAPI,
        Route("/Stores/Store/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.Store.View"),
        PublicAPI,
        Route("/Stores/Store/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.Store.View"),
        PublicAPI,
        Route("/Stores/Store/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.Store.View"),
        PublicAPI,
        Route("/Stores/Store/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store.</summary>
    /// <seealso cref="StoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.Store.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/Store/Create", "POST", Priority = 1,
            Summary = "Use to create a new store.")]
    public partial class CreateStore : StoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store.</summary>
    /// <seealso cref="StoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/Store/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store (as needed).")]
    public partial class UpsertStore : StoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store.</summary>
    /// <seealso cref="StoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.Store.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/Store/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store.")]
    public partial class UpdateStore : StoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.Store.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/Store/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store from the system [Soft-Delete]")]
    public partial class DeactivateStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.Store.Deactivate"),
        PublicAPI,
        Route("/Stores/Store/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store from the system [Soft-Delete]")]
    public partial class DeactivateStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.Store.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/Store/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.Store.Reactivate"),
        PublicAPI,
        Route("/Stores/Store/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.Store.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/Store/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store from the system [Hard-Delete]")]
    public partial class DeleteStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.Store.Delete"),
        PublicAPI,
        Route("/Stores/Store/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store from the system [Hard-Delete]")]
    public partial class DeleteStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/Store/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store calls.")]
    public class ClearStoreCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStores"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStores request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreModel, StoreModel, IStoreSearchModel, StorePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Stores)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoresForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoresForConnect request)
        {
            return await Workflows.Stores.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoresDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoresDigest request)
        {
            return await Workflows.Stores.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Stores, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Stores, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Stores, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.Stores, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreExistsByID request)
        {
            return await Workflows.Stores.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreExistsByKey request)
        {
            return await Workflows.Stores.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreExistsByName request)
        {
            return await Workflows.Stores.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreExistsBySeoUrl request)
        {
            return await Workflows.Stores.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDataAsync,
                    () => Workflows.Stores.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDataAsync,
                    () => Workflows.Stores.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDataAsync,
                    () => Workflows.Stores.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDataAsync,
                    () => Workflows.Stores.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDataAsync,
                    () => Workflows.Stores.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDataAsync,
                    () => Workflows.Stores.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDataAsync,
                    () => Workflows.Stores.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDataAsync,
                    () => Workflows.Stores.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreDataAsync,
                    () => Workflows.Stores.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreCache request)
        {
            await ClearCachedStoreDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStores>(string.Empty),
                    UrnId.Create<GetStoreByID>(string.Empty),
                    UrnId.Create<GetStoreByKey>(string.Empty),
                    UrnId.Create<GetStoreByName>(string.Empty),
                    UrnId.Create<GetStoreBySeoUrl>(string.Empty),
                    UrnId.Create<CheckStoreExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreExistsByKey>(string.Empty),
                    UrnId.Create<CheckStoreExistsByName>(string.Empty),
                    UrnId.Create<CheckStoreExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreService : StoreServiceBase { }
}
