// <autogenerated>
// <copyright file="RegionCurrencyService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the region currency service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of region currencies.</summary>
    /// <seealso cref="RegionCurrencySearchModel"/>
    /// <seealso cref="IReturn{RegionCurrencyPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/RegionCurrencies", "GET", Priority = 1,
            Summary = "Use to get a list of region currencies")]
    public partial class GetRegionCurrencies : RegionCurrencySearchModel, IReturn<RegionCurrencyPagedResults> { }

    /// <summary>A ServiceStack Route to get region currencies for connect.</summary>
    /// <seealso cref="RegionCurrencySearchModel"/>
    /// <seealso cref="IReturn{List{RegionCurrencyModel}}"/>
    [Authenticate, RequiredPermission("Geography.RegionCurrency.View"),
        PublicAPI,
        Route("/Geography/RegionCurrenciesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all region currencies")]
    public partial class GetRegionCurrenciesForConnect : RegionCurrencySearchModel, IReturn<List<RegionCurrencyModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all region currencies.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Geography.RegionCurrency.View"),
        PublicAPI,
        Route("/Geography/RegionCurrenciesDigest", "GET",
            Summary = "Use to get a hash representing each region currencies")]
    public partial class GetRegionCurrenciesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get region currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{RegionCurrencyModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/RegionCurrency/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific region currency")]
    public partial class GetRegionCurrencyByID : ImplementsIDBase, IReturn<RegionCurrencyModel> { }

    /// <summary>A ServiceStack Route to get region currency.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{RegionCurrencyModel}"/>
    [PublicAPI,
        Route("/Geography/RegionCurrency/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific region currency by the custom key")]
    public partial class GetRegionCurrencyByKey : ImplementsKeyBase, IReturn<RegionCurrencyModel> { }

    /// <summary>A ServiceStack Route to check region currency exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.RegionCurrency.View"),
        PublicAPI,
        Route("/Geography/RegionCurrency/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckRegionCurrencyExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check region currency exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Geography.RegionCurrency.View"),
        PublicAPI,
        Route("/Geography/RegionCurrency/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckRegionCurrencyExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create region currency.</summary>
    /// <seealso cref="RegionCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.RegionCurrency.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionCurrency/Create", "POST", Priority = 1,
            Summary = "Use to create a new region currency.")]
    public partial class CreateRegionCurrency : RegionCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert region currency.</summary>
    /// <seealso cref="RegionCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Geography/RegionCurrency/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing region currency (as needed).")]
    public partial class UpsertRegionCurrency : RegionCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update region currency.</summary>
    /// <seealso cref="RegionCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Geography.RegionCurrency.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionCurrency/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing region currency.")]
    public partial class UpdateRegionCurrency : RegionCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate region currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionCurrency.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionCurrency/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific region currency from the system [Soft-Delete]")]
    public partial class DeactivateRegionCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate region currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionCurrency.Deactivate"),
        PublicAPI,
        Route("/Geography/RegionCurrency/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific region currency from the system [Soft-Delete]")]
    public partial class DeactivateRegionCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate region currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionCurrency.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionCurrency/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific region currency from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRegionCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate region currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionCurrency.Reactivate"),
        PublicAPI,
        Route("/Geography/RegionCurrency/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific region currency from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRegionCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete region currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionCurrency.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Geography/RegionCurrency/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific region currency from the system [Hard-Delete]")]
    public partial class DeleteRegionCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete region currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Geography.RegionCurrency.Delete"),
        PublicAPI,
        Route("/Geography/RegionCurrency/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific region currency from the system [Hard-Delete]")]
    public partial class DeleteRegionCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear region currency cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Geography/RegionCurrency/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all region currency calls.")]
    public class ClearRegionCurrencyCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class RegionCurrencyServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetRegionCurrencies"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionCurrencies request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IRegionCurrencyModel, RegionCurrencyModel, IRegionCurrencySearchModel, RegionCurrencyPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.RegionCurrencies)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRegionCurrenciesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetRegionCurrenciesForConnect request)
        {
            return await Workflows.RegionCurrencies.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRegionCurrenciesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionCurrenciesDigest request)
        {
            return await Workflows.RegionCurrencies.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetRegionCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionCurrencyByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.RegionCurrencies, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRegionCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRegionCurrencyByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.RegionCurrencies, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckRegionCurrencyExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRegionCurrencyExistsByID request)
        {
            return await Workflows.RegionCurrencies.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRegionCurrencyExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRegionCurrencyExistsByKey request)
        {
            return await Workflows.RegionCurrencies.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertRegionCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertRegionCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionCurrencyDataAsync,
                    () => Workflows.RegionCurrencies.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateRegionCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateRegionCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionCurrencyDataAsync,
                    () => Workflows.RegionCurrencies.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateRegionCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateRegionCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionCurrencyDataAsync,
                    () => Workflows.RegionCurrencies.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateRegionCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRegionCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionCurrencyDataAsync,
                    () => Workflows.RegionCurrencies.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateRegionCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRegionCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionCurrencyDataAsync,
                    () => Workflows.RegionCurrencies.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateRegionCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRegionCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionCurrencyDataAsync,
                    () => Workflows.RegionCurrencies.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateRegionCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRegionCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionCurrencyDataAsync,
                    () => Workflows.RegionCurrencies.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteRegionCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRegionCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionCurrencyDataAsync,
                    () => Workflows.RegionCurrencies.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteRegionCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRegionCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRegionCurrencyDataAsync,
                    () => Workflows.RegionCurrencies.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearRegionCurrencyCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearRegionCurrencyCache request)
        {
            await ClearCachedRegionCurrencyDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedRegionCurrencyDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetRegionCurrencies>(string.Empty),
                    UrnId.Create<GetRegionCurrencyByID>(string.Empty),
                    UrnId.Create<GetRegionCurrencyByKey>(string.Empty),
                    UrnId.Create<CheckRegionCurrencyExistsByID>(string.Empty),
                    UrnId.Create<CheckRegionCurrencyExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class RegionCurrencyService : RegionCurrencyServiceBase { }
}
