// <autogenerated>
// <copyright file="AdFranchiseService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the ad franchise service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of ad franchises.</summary>
    /// <seealso cref="AdFranchiseSearchModel"/>
    /// <seealso cref="IReturn{AdFranchisePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdFranchises", "GET", Priority = 1,
            Summary = "Use to get a list of ad franchises")]
    public partial class GetAdFranchises : AdFranchiseSearchModel, IReturn<AdFranchisePagedResults> { }

    /// <summary>A ServiceStack Route to get ad franchises for connect.</summary>
    /// <seealso cref="AdFranchiseSearchModel"/>
    /// <seealso cref="IReturn{List{AdFranchiseModel}}"/>
    [Authenticate, RequiredPermission("Advertising.AdFranchise.View"),
        PublicAPI,
        Route("/Advertising/AdFranchisesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all ad franchises")]
    public partial class GetAdFranchisesForConnect : AdFranchiseSearchModel, IReturn<List<AdFranchiseModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all ad franchises.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Advertising.AdFranchise.View"),
        PublicAPI,
        Route("/Advertising/AdFranchisesDigest", "GET",
            Summary = "Use to get a hash representing each ad franchises")]
    public partial class GetAdFranchisesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get ad franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AdFranchiseModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdFranchise/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific ad franchise")]
    public partial class GetAdFranchiseByID : ImplementsIDBase, IReturn<AdFranchiseModel> { }

    /// <summary>A ServiceStack Route to get ad franchise.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AdFranchiseModel}"/>
    [PublicAPI,
        Route("/Advertising/AdFranchise/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific ad franchise by the custom key")]
    public partial class GetAdFranchiseByKey : ImplementsKeyBase, IReturn<AdFranchiseModel> { }

    /// <summary>A ServiceStack Route to check ad franchise exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdFranchise.View"),
        PublicAPI,
        Route("/Advertising/AdFranchise/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAdFranchiseExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ad franchise exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdFranchise.View"),
        PublicAPI,
        Route("/Advertising/AdFranchise/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAdFranchiseExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create ad franchise.</summary>
    /// <seealso cref="AdFranchiseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.AdFranchise.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdFranchise/Create", "POST", Priority = 1,
            Summary = "Use to create a new ad franchise.")]
    public partial class CreateAdFranchise : AdFranchiseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert ad franchise.</summary>
    /// <seealso cref="AdFranchiseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Advertising/AdFranchise/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing ad franchise (as needed).")]
    public partial class UpsertAdFranchise : AdFranchiseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update ad franchise.</summary>
    /// <seealso cref="AdFranchiseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.AdFranchise.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdFranchise/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing ad franchise.")]
    public partial class UpdateAdFranchise : AdFranchiseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate ad franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdFranchise.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdFranchise/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ad franchise from the system [Soft-Delete]")]
    public partial class DeactivateAdFranchiseByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate ad franchise by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdFranchise.Deactivate"),
        PublicAPI,
        Route("/Advertising/AdFranchise/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ad franchise from the system [Soft-Delete]")]
    public partial class DeactivateAdFranchiseByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ad franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdFranchise.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdFranchise/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ad franchise from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAdFranchiseByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ad franchise by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdFranchise.Reactivate"),
        PublicAPI,
        Route("/Advertising/AdFranchise/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ad franchise from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAdFranchiseByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ad franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdFranchise.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdFranchise/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific ad franchise from the system [Hard-Delete]")]
    public partial class DeleteAdFranchiseByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ad franchise by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdFranchise.Delete"),
        PublicAPI,
        Route("/Advertising/AdFranchise/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific ad franchise from the system [Hard-Delete]")]
    public partial class DeleteAdFranchiseByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear ad franchise cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdFranchise/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all ad franchise calls.")]
    public class ClearAdFranchiseCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AdFranchiseServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAdFranchises"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdFranchises request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAdFranchiseModel, AdFranchiseModel, IAdFranchiseSearchModel, AdFranchisePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AdFranchises)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdFranchisesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAdFranchisesForConnect request)
        {
            return await Workflows.AdFranchises.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdFranchisesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdFranchisesDigest request)
        {
            return await Workflows.AdFranchises.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAdFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdFranchiseByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AdFranchises, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdFranchiseByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AdFranchises, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAdFranchiseExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdFranchiseExistsByID request)
        {
            return await Workflows.AdFranchises.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAdFranchiseExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdFranchiseExistsByKey request)
        {
            return await Workflows.AdFranchises.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAdFranchise"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAdFranchise request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdFranchiseDataAsync,
                    () => Workflows.AdFranchises.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAdFranchise"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAdFranchise request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdFranchiseDataAsync,
                    () => Workflows.AdFranchises.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAdFranchise"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAdFranchise request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdFranchiseDataAsync,
                    () => Workflows.AdFranchises.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAdFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAdFranchiseByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdFranchiseDataAsync,
                    () => Workflows.AdFranchises.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAdFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAdFranchiseByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdFranchiseDataAsync,
                    () => Workflows.AdFranchises.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAdFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAdFranchiseByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdFranchiseDataAsync,
                    () => Workflows.AdFranchises.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAdFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAdFranchiseByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdFranchiseDataAsync,
                    () => Workflows.AdFranchises.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAdFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAdFranchiseByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdFranchiseDataAsync,
                    () => Workflows.AdFranchises.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAdFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAdFranchiseByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdFranchiseDataAsync,
                    () => Workflows.AdFranchises.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAdFranchiseCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAdFranchiseCache request)
        {
            await ClearCachedAdFranchiseDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAdFranchiseDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAdFranchises>(string.Empty),
                    UrnId.Create<GetAdFranchiseByID>(string.Empty),
                    UrnId.Create<GetAdFranchiseByKey>(string.Empty),
                    UrnId.Create<CheckAdFranchiseExistsByID>(string.Empty),
                    UrnId.Create<CheckAdFranchiseExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AdFranchiseService : AdFranchiseServiceBase { }
}
