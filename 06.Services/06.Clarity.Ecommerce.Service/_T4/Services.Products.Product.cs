// <autogenerated>
// <copyright file="ProductService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the product service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of products.</summary>
    /// <seealso cref="ProductSearchModel"/>
    /// <seealso cref="IReturn{ProductPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/Products", "GET", Priority = 1,
            Summary = "Use to get a list of products")]
    public partial class GetProducts : ProductSearchModel, IReturn<ProductPagedResults> { }

    /// <summary>A ServiceStack Route to get products for connect.</summary>
    /// <seealso cref="ProductSearchModel"/>
    /// <seealso cref="IReturn{List{ProductModel}}"/>
    [Authenticate, RequiredPermission("Products.Product.View"),
        PublicAPI,
        Route("/Products/ProductsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all products")]
    public partial class GetProductsForConnect : ProductSearchModel, IReturn<List<ProductModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all products.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Products.Product.View"),
        PublicAPI,
        Route("/Products/ProductsDigest", "GET",
            Summary = "Use to get a hash representing each products")]
    public partial class GetProductsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ProductModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/Product/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific product")]
    public partial class GetProductByID : ImplementsIDBase, IReturn<ProductModel> { }

    /// <summary>A ServiceStack Route to get product.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ProductModel}"/>
    [PublicAPI,
        Route("/Products/Product/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific product by the custom key")]
    public partial class GetProductByKey : ImplementsKeyBase, IReturn<ProductModel> { }

    /// <summary>A ServiceStack Route to get product.</summary>
    /// <seealso cref="IReturn{ProductModel}"/>
    [PublicAPI,
        Route("/Products/Product/Name", "GET", Priority = 1,
            Summary = "Use to get a specific product by the name")]
    public partial class GetProductByName : ImplementsNameBase, IReturn<ProductModel> { }

    /// <summary>A ServiceStack Route to get product.</summary>
    /// <seealso cref="IReturn{ProductModel}"/>
    [PublicAPI,
        Route("/Products/Product/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific product by the SEO URL")]
    public partial class GetProductBySeoUrl : ImplementsSeoUrlBase, IReturn<ProductModel> { }

    /// <summary>A ServiceStack Route to check product exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [PublicAPI,
        Route("/Products/Product/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckProductExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [PublicAPI,
        Route("/Products/Product/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckProductExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [PublicAPI,
        Route("/Products/Product/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckProductExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [PublicAPI,
        Route("/Products/Product/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckProductExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create product.</summary>
    /// <seealso cref="ProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.Product.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/Product/Create", "POST", Priority = 1,
            Summary = "Use to create a new product.")]
    public partial class CreateProduct : ProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert product.</summary>
    /// <seealso cref="ProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Products/Product/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing product (as needed).")]
    public partial class UpsertProduct : ProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update product.</summary>
    /// <seealso cref="ProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.Product.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/Product/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing product.")]
    public partial class UpdateProduct : ProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.Product.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/Product/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product from the system [Soft-Delete]")]
    public partial class DeactivateProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.Product.Deactivate"),
        PublicAPI,
        Route("/Products/Product/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product from the system [Soft-Delete]")]
    public partial class DeactivateProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.Product.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/Product/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.Product.Reactivate"),
        PublicAPI,
        Route("/Products/Product/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.Product.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/Product/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific product from the system [Hard-Delete]")]
    public partial class DeleteProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.Product.Delete"),
        PublicAPI,
        Route("/Products/Product/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific product from the system [Hard-Delete]")]
    public partial class DeleteProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear product cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/Product/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all product calls.")]
    public class ClearProductCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ProductServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetProducts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProducts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IProductModel, ProductModel, IProductSearchModel, ProductPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Products)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetProductsForConnect request)
        {
            return await Workflows.Products.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductsDigest request)
        {
            return await Workflows.Products.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Products, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Products, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Products, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.Products, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckProductExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductExistsByID request)
        {
            return await Workflows.Products.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductExistsByKey request)
        {
            return await Workflows.Products.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductExistsByName request)
        {
            return await Workflows.Products.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductExistsBySeoUrl request)
        {
            return await Workflows.Products.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDataAsync,
                    () => Workflows.Products.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDataAsync,
                    () => Workflows.Products.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDataAsync,
                    () => Workflows.Products.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDataAsync,
                    () => Workflows.Products.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDataAsync,
                    () => Workflows.Products.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDataAsync,
                    () => Workflows.Products.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDataAsync,
                    () => Workflows.Products.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDataAsync,
                    () => Workflows.Products.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductDataAsync,
                    () => Workflows.Products.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearProductCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearProductCache request)
        {
            await ClearCachedProductDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedProductDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetProducts>(string.Empty),
                    UrnId.Create<GetProductByID>(string.Empty),
                    UrnId.Create<GetProductByKey>(string.Empty),
                    UrnId.Create<GetProductByName>(string.Empty),
                    UrnId.Create<GetProductBySeoUrl>(string.Empty),
                    UrnId.Create<CheckProductExistsByID>(string.Empty),
                    UrnId.Create<CheckProductExistsByKey>(string.Empty),
                    UrnId.Create<CheckProductExistsByName>(string.Empty),
                    UrnId.Create<CheckProductExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ProductService : ProductServiceBase { }
}
