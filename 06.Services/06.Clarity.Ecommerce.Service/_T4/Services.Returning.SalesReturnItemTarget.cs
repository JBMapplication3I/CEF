// <autogenerated>
// <copyright file="SalesReturnItemTargetService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales return item target service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales return item targets.</summary>
    /// <seealso cref="SalesItemTargetBaseSearchModel"/>
    /// <seealso cref="IReturn{SalesReturnItemTargetPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturnItemTargets", "GET", Priority = 1,
            Summary = "Use to get a list of sales return item targets")]
    public partial class GetSalesReturnItemTargets : SalesItemTargetBaseSearchModel, IReturn<SalesReturnItemTargetPagedResults> { }

    /// <summary>A ServiceStack Route to get sales return item targets for connect.</summary>
    /// <seealso cref="SalesItemTargetBaseSearchModel"/>
    /// <seealso cref="IReturn{List{SalesItemTargetBaseModel}}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItemTarget.View"),
        PublicAPI,
        Route("/Returning/SalesReturnItemTargetsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales return item targets")]
    public partial class GetSalesReturnItemTargetsForConnect : SalesItemTargetBaseSearchModel, IReturn<List<SalesItemTargetBaseModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales return item targets.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItemTarget.View"),
        PublicAPI,
        Route("/Returning/SalesReturnItemTargetsDigest", "GET",
            Summary = "Use to get a hash representing each sales return item targets")]
    public partial class GetSalesReturnItemTargetsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales return item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesItemTargetBaseModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturnItemTarget/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales return item target")]
    public partial class GetSalesReturnItemTargetByID : ImplementsIDBase, IReturn<SalesItemTargetBaseModel> { }

    /// <summary>A ServiceStack Route to get sales return item target.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesItemTargetBaseModel}"/>
    [PublicAPI,
        Route("/Returning/SalesReturnItemTarget/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales return item target by the custom key")]
    public partial class GetSalesReturnItemTargetByKey : ImplementsKeyBase, IReturn<SalesItemTargetBaseModel> { }

    /// <summary>A ServiceStack Route to check sales return item target exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItemTarget.View"),
        PublicAPI,
        Route("/Returning/SalesReturnItemTarget/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnItemTargetExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales return item target exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItemTarget.View"),
        PublicAPI,
        Route("/Returning/SalesReturnItemTarget/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnItemTargetExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales return item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItemTarget.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnItemTarget/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales return item target.")]
    public partial class CreateSalesReturnItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales return item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Returning/SalesReturnItemTarget/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales return item target (as needed).")]
    public partial class UpsertSalesReturnItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales return item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItemTarget.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnItemTarget/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales return item target.")]
    public partial class UpdateSalesReturnItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales return item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItemTarget.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnItemTarget/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales return item target from the system [Soft-Delete]")]
    public partial class DeactivateSalesReturnItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales return item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItemTarget.Deactivate"),
        PublicAPI,
        Route("/Returning/SalesReturnItemTarget/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales return item target from the system [Soft-Delete]")]
    public partial class DeactivateSalesReturnItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales return item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItemTarget.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnItemTarget/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales return item target from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesReturnItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales return item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItemTarget.Reactivate"),
        PublicAPI,
        Route("/Returning/SalesReturnItemTarget/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales return item target from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesReturnItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales return item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItemTarget.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnItemTarget/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales return item target from the system [Hard-Delete]")]
    public partial class DeleteSalesReturnItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales return item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnItemTarget.Delete"),
        PublicAPI,
        Route("/Returning/SalesReturnItemTarget/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales return item target from the system [Hard-Delete]")]
    public partial class DeleteSalesReturnItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales return item target cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturnItemTarget/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales return item target calls.")]
    public class ClearSalesReturnItemTargetCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesReturnItemTargetServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesReturnItemTargets"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnItemTargets request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesItemTargetBaseModel, SalesItemTargetBaseModel, ISalesItemTargetBaseSearchModel, SalesReturnItemTargetPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesReturnItemTargets)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnItemTargetsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesReturnItemTargetsForConnect request)
        {
            return await Workflows.SalesReturnItemTargets.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnItemTargetsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnItemTargetsDigest request)
        {
            return await Workflows.SalesReturnItemTargets.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesReturnItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnItemTargetByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesReturnItemTargets, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnItemTargetByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesReturnItemTargets, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesReturnItemTargetExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnItemTargetExistsByID request)
        {
            return await Workflows.SalesReturnItemTargets.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesReturnItemTargetExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnItemTargetExistsByKey request)
        {
            return await Workflows.SalesReturnItemTargets.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesReturnItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesReturnItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemTargetDataAsync,
                    () => Workflows.SalesReturnItemTargets.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesReturnItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesReturnItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemTargetDataAsync,
                    () => Workflows.SalesReturnItemTargets.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesReturnItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesReturnItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemTargetDataAsync,
                    () => Workflows.SalesReturnItemTargets.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesReturnItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesReturnItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemTargetDataAsync,
                    () => Workflows.SalesReturnItemTargets.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesReturnItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesReturnItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemTargetDataAsync,
                    () => Workflows.SalesReturnItemTargets.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesReturnItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesReturnItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemTargetDataAsync,
                    () => Workflows.SalesReturnItemTargets.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesReturnItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesReturnItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemTargetDataAsync,
                    () => Workflows.SalesReturnItemTargets.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesReturnItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesReturnItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemTargetDataAsync,
                    () => Workflows.SalesReturnItemTargets.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesReturnItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesReturnItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnItemTargetDataAsync,
                    () => Workflows.SalesReturnItemTargets.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesReturnItemTargetCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesReturnItemTargetCache request)
        {
            await ClearCachedSalesReturnItemTargetDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesReturnItemTargetDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesReturnItemTargets>(string.Empty),
                    UrnId.Create<GetSalesReturnItemTargetByID>(string.Empty),
                    UrnId.Create<GetSalesReturnItemTargetByKey>(string.Empty),
                    UrnId.Create<CheckSalesReturnItemTargetExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesReturnItemTargetExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesReturnItemTargetService : SalesReturnItemTargetServiceBase { }
}
