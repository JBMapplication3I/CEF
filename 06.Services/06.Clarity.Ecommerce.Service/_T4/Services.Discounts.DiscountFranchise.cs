// <autogenerated>
// <copyright file="DiscountFranchiseService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount franchise service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discount franchises.</summary>
    /// <seealso cref="DiscountFranchiseSearchModel"/>
    /// <seealso cref="IReturn{DiscountFranchisePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountFranchises", "GET", Priority = 1,
            Summary = "Use to get a list of discount franchises")]
    public partial class GetDiscountFranchises : DiscountFranchiseSearchModel, IReturn<DiscountFranchisePagedResults> { }

    /// <summary>A ServiceStack Route to get discount franchises for connect.</summary>
    /// <seealso cref="DiscountFranchiseSearchModel"/>
    /// <seealso cref="IReturn{List{DiscountFranchiseModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountFranchise.View"),
        PublicAPI,
        Route("/Discounts/DiscountFranchisesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discount franchises")]
    public partial class GetDiscountFranchisesForConnect : DiscountFranchiseSearchModel, IReturn<List<DiscountFranchiseModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discount franchises.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountFranchise.View"),
        PublicAPI,
        Route("/Discounts/DiscountFranchisesDigest", "GET",
            Summary = "Use to get a hash representing each discount franchises")]
    public partial class GetDiscountFranchisesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountFranchiseModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountFranchise/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount franchise")]
    public partial class GetDiscountFranchiseByID : ImplementsIDBase, IReturn<DiscountFranchiseModel> { }

    /// <summary>A ServiceStack Route to get discount franchise.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountFranchiseModel}"/>
    [PublicAPI,
        Route("/Discounts/DiscountFranchise/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount franchise by the custom key")]
    public partial class GetDiscountFranchiseByKey : ImplementsKeyBase, IReturn<DiscountFranchiseModel> { }

    /// <summary>A ServiceStack Route to check discount franchise exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountFranchise.View"),
        PublicAPI,
        Route("/Discounts/DiscountFranchise/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountFranchiseExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount franchise exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountFranchise.View"),
        PublicAPI,
        Route("/Discounts/DiscountFranchise/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountFranchiseExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount franchise.</summary>
    /// <seealso cref="DiscountFranchiseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountFranchise.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountFranchise/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount franchise.")]
    public partial class CreateDiscountFranchise : DiscountFranchiseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount franchise.</summary>
    /// <seealso cref="DiscountFranchiseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/DiscountFranchise/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount franchise (as needed).")]
    public partial class UpsertDiscountFranchise : DiscountFranchiseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount franchise.</summary>
    /// <seealso cref="DiscountFranchiseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountFranchise.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountFranchise/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount franchise.")]
    public partial class UpdateDiscountFranchise : DiscountFranchiseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountFranchise.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountFranchise/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount franchise from the system [Soft-Delete]")]
    public partial class DeactivateDiscountFranchiseByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount franchise by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountFranchise.Deactivate"),
        PublicAPI,
        Route("/Discounts/DiscountFranchise/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount franchise from the system [Soft-Delete]")]
    public partial class DeactivateDiscountFranchiseByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountFranchise.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountFranchise/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount franchise from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountFranchiseByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount franchise by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountFranchise.Reactivate"),
        PublicAPI,
        Route("/Discounts/DiscountFranchise/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount franchise from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountFranchiseByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount franchise.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountFranchise.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountFranchise/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount franchise from the system [Hard-Delete]")]
    public partial class DeleteDiscountFranchiseByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount franchise by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountFranchise.Delete"),
        PublicAPI,
        Route("/Discounts/DiscountFranchise/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount franchise from the system [Hard-Delete]")]
    public partial class DeleteDiscountFranchiseByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount franchise cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountFranchise/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount franchise calls.")]
    public class ClearDiscountFranchiseCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountFranchiseServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscountFranchises"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountFranchises request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountFranchiseModel, DiscountFranchiseModel, IDiscountFranchiseSearchModel, DiscountFranchisePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DiscountFranchises)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountFranchisesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountFranchisesForConnect request)
        {
            return await Workflows.DiscountFranchises.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountFranchisesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountFranchisesDigest request)
        {
            return await Workflows.DiscountFranchises.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountFranchiseByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DiscountFranchises, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountFranchiseByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DiscountFranchises, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountFranchiseExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountFranchiseExistsByID request)
        {
            return await Workflows.DiscountFranchises.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountFranchiseExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountFranchiseExistsByKey request)
        {
            return await Workflows.DiscountFranchises.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscountFranchise"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscountFranchise request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountFranchiseDataAsync,
                    () => Workflows.DiscountFranchises.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscountFranchise"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscountFranchise request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountFranchiseDataAsync,
                    () => Workflows.DiscountFranchises.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscountFranchise"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscountFranchise request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountFranchiseDataAsync,
                    () => Workflows.DiscountFranchises.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountFranchiseByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountFranchiseDataAsync,
                    () => Workflows.DiscountFranchises.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountFranchiseByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountFranchiseDataAsync,
                    () => Workflows.DiscountFranchises.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountFranchiseByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountFranchiseDataAsync,
                    () => Workflows.DiscountFranchises.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountFranchiseByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountFranchiseDataAsync,
                    () => Workflows.DiscountFranchises.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountFranchiseByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountFranchiseByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountFranchiseDataAsync,
                    () => Workflows.DiscountFranchises.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountFranchiseByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountFranchiseByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountFranchiseDataAsync,
                    () => Workflows.DiscountFranchises.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountFranchiseCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountFranchiseCache request)
        {
            await ClearCachedDiscountFranchiseDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountFranchiseDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscountFranchises>(string.Empty),
                    UrnId.Create<GetDiscountFranchiseByID>(string.Empty),
                    UrnId.Create<GetDiscountFranchiseByKey>(string.Empty),
                    UrnId.Create<CheckDiscountFranchiseExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountFranchiseExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountFranchiseService : DiscountFranchiseServiceBase { }
}
