// <autogenerated>
// <copyright file="SalesOrderEventTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales order event type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales order event types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{SalesOrderEventTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderEventTypes", "GET", Priority = 1,
            Summary = "Use to get a list of sales order event types")]
    public partial class GetSalesOrderEventTypes : TypeSearchModel, IReturn<SalesOrderEventTypePagedResults> { }

    /// <summary>A ServiceStack Route to get sales order event types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderEventType.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderEventTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales order event types")]
    public partial class GetSalesOrderEventTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales order event types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderEventType.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderEventTypesDigest", "GET",
            Summary = "Use to get a hash representing each sales order event types")]
    public partial class GetSalesOrderEventTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales order event type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderEventType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order event type")]
    public partial class GetSalesOrderEventTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get sales order event type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Ordering/SalesOrderEventType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order event type by the custom key")]
    public partial class GetSalesOrderEventTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get sales order event type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Ordering/SalesOrderEventType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sales order event type by the name")]
    public partial class GetSalesOrderEventTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get sales order event type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Ordering/SalesOrderEventType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific sales order event type by the name")]
    public partial class GetSalesOrderEventTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check sales order event type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderEventType.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderEventType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderEventTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales order event type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderEventType.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderEventType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderEventTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales order event type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderEventType.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderEventType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderEventTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales order event type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderEventType.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderEventType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderEventTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales order event type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderEventType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderEventType/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales order event type.")]
    public partial class CreateSalesOrderEventType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales order event type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Ordering/SalesOrderEventType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales order event type (as needed).")]
    public partial class UpsertSalesOrderEventType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales order event type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderEventType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderEventType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales order event type.")]
    public partial class UpdateSalesOrderEventType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales order event type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderEventType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderEventType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order event type from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderEventTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales order event type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderEventType.Deactivate"),
        PublicAPI,
        Route("/Ordering/SalesOrderEventType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order event type from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderEventTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order event type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderEventType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderEventType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order event type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderEventTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order event type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderEventType.Reactivate"),
        PublicAPI,
        Route("/Ordering/SalesOrderEventType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order event type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderEventTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order event type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderEventType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderEventType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales order event type from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderEventTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order event type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderEventType.Delete"),
        PublicAPI,
        Route("/Ordering/SalesOrderEventType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales order event type from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderEventTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales order event type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderEventType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales order event type calls.")]
    public class ClearSalesOrderEventTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesOrderEventTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesOrderEventTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderEventTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, SalesOrderEventTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesOrderEventTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderEventTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesOrderEventTypesForConnect request)
        {
            return await Workflows.SalesOrderEventTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderEventTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderEventTypesDigest request)
        {
            return await Workflows.SalesOrderEventTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesOrderEventTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderEventTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesOrderEventTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderEventTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderEventTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesOrderEventTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderEventTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderEventTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SalesOrderEventTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderEventTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderEventTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.SalesOrderEventTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesOrderEventTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderEventTypeExistsByID request)
        {
            return await Workflows.SalesOrderEventTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesOrderEventTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderEventTypeExistsByKey request)
        {
            return await Workflows.SalesOrderEventTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesOrderEventTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderEventTypeExistsByName request)
        {
            return await Workflows.SalesOrderEventTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesOrderEventTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderEventTypeExistsByDisplayName request)
        {
            return await Workflows.SalesOrderEventTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesOrderEventType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesOrderEventType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderEventTypeDataAsync,
                    () => Workflows.SalesOrderEventTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesOrderEventType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesOrderEventType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderEventTypeDataAsync,
                    () => Workflows.SalesOrderEventTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesOrderEventType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesOrderEventType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderEventTypeDataAsync,
                    () => Workflows.SalesOrderEventTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderEventTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderEventTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderEventTypeDataAsync,
                    () => Workflows.SalesOrderEventTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderEventTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderEventTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderEventTypeDataAsync,
                    () => Workflows.SalesOrderEventTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderEventTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderEventTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderEventTypeDataAsync,
                    () => Workflows.SalesOrderEventTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderEventTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderEventTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderEventTypeDataAsync,
                    () => Workflows.SalesOrderEventTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderEventTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderEventTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderEventTypeDataAsync,
                    () => Workflows.SalesOrderEventTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderEventTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderEventTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderEventTypeDataAsync,
                    () => Workflows.SalesOrderEventTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesOrderEventTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesOrderEventTypeCache request)
        {
            await ClearCachedSalesOrderEventTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesOrderEventTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesOrderEventTypes>(string.Empty),
                    UrnId.Create<GetSalesOrderEventTypeByID>(string.Empty),
                    UrnId.Create<GetSalesOrderEventTypeByKey>(string.Empty),
                    UrnId.Create<GetSalesOrderEventTypeByName>(string.Empty),
                    UrnId.Create<CheckSalesOrderEventTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesOrderEventTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckSalesOrderEventTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckSalesOrderEventTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesOrderEventTypeService : SalesOrderEventTypeServiceBase { }
}
