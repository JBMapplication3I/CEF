// <autogenerated>
// <copyright file="PageViewTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the page view type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of page view types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{PageViewTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/PageViewTypes", "GET", Priority = 1,
            Summary = "Use to get a list of page view types")]
    public partial class GetPageViewTypes : TypeSearchModel, IReturn<PageViewTypePagedResults> { }

    /// <summary>A ServiceStack Route to get page view types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewType.View"),
        PublicAPI,
        Route("/Tracking/PageViewTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all page view types")]
    public partial class GetPageViewTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all page view types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewType.View"),
        PublicAPI,
        Route("/Tracking/PageViewTypesDigest", "GET",
            Summary = "Use to get a hash representing each page view types")]
    public partial class GetPageViewTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get page view type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/PageViewType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific page view type")]
    public partial class GetPageViewTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get page view type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Tracking/PageViewType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific page view type by the custom key")]
    public partial class GetPageViewTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get page view type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Tracking/PageViewType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific page view type by the name")]
    public partial class GetPageViewTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get page view type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Tracking/PageViewType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific page view type by the name")]
    public partial class GetPageViewTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check page view type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewType.View"),
        PublicAPI,
        Route("/Tracking/PageViewType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPageViewTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check page view type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewType.View"),
        PublicAPI,
        Route("/Tracking/PageViewType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPageViewTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check page view type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewType.View"),
        PublicAPI,
        Route("/Tracking/PageViewType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPageViewTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check page view type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewType.View"),
        PublicAPI,
        Route("/Tracking/PageViewType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPageViewTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create page view type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewType/Create", "POST", Priority = 1,
            Summary = "Use to create a new page view type.")]
    public partial class CreatePageViewType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert page view type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tracking/PageViewType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing page view type (as needed).")]
    public partial class UpsertPageViewType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update page view type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing page view type.")]
    public partial class UpdatePageViewType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate page view type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific page view type from the system [Soft-Delete]")]
    public partial class DeactivatePageViewTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate page view type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewType.Deactivate"),
        PublicAPI,
        Route("/Tracking/PageViewType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific page view type from the system [Soft-Delete]")]
    public partial class DeactivatePageViewTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate page view type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific page view type from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePageViewTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate page view type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewType.Reactivate"),
        PublicAPI,
        Route("/Tracking/PageViewType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific page view type from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePageViewTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete page view type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific page view type from the system [Hard-Delete]")]
    public partial class DeletePageViewTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete page view type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewType.Delete"),
        PublicAPI,
        Route("/Tracking/PageViewType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific page view type from the system [Hard-Delete]")]
    public partial class DeletePageViewTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear page view type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/PageViewType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all page view type calls.")]
    public class ClearPageViewTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PageViewTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPageViewTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, PageViewTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PageViewTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPageViewTypesForConnect request)
        {
            return await Workflows.PageViewTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewTypesDigest request)
        {
            return await Workflows.PageViewTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPageViewTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PageViewTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PageViewTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.PageViewTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.PageViewTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPageViewTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPageViewTypeExistsByID request)
        {
            return await Workflows.PageViewTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPageViewTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPageViewTypeExistsByKey request)
        {
            return await Workflows.PageViewTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPageViewTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPageViewTypeExistsByName request)
        {
            return await Workflows.PageViewTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPageViewTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPageViewTypeExistsByDisplayName request)
        {
            return await Workflows.PageViewTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPageViewType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPageViewType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewTypeDataAsync,
                    () => Workflows.PageViewTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePageViewType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePageViewType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewTypeDataAsync,
                    () => Workflows.PageViewTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePageViewType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePageViewType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewTypeDataAsync,
                    () => Workflows.PageViewTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePageViewTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePageViewTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewTypeDataAsync,
                    () => Workflows.PageViewTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePageViewTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePageViewTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewTypeDataAsync,
                    () => Workflows.PageViewTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePageViewTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePageViewTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewTypeDataAsync,
                    () => Workflows.PageViewTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePageViewTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePageViewTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewTypeDataAsync,
                    () => Workflows.PageViewTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePageViewTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePageViewTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewTypeDataAsync,
                    () => Workflows.PageViewTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePageViewTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePageViewTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewTypeDataAsync,
                    () => Workflows.PageViewTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPageViewTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPageViewTypeCache request)
        {
            await ClearCachedPageViewTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPageViewTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPageViewTypes>(string.Empty),
                    UrnId.Create<GetPageViewTypeByID>(string.Empty),
                    UrnId.Create<GetPageViewTypeByKey>(string.Empty),
                    UrnId.Create<GetPageViewTypeByName>(string.Empty),
                    UrnId.Create<CheckPageViewTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckPageViewTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckPageViewTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckPageViewTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PageViewTypeService : PageViewTypeServiceBase { }
}
