// <autogenerated>
// <copyright file="UserTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the user type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of user types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{UserTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserTypes", "GET", Priority = 1,
            Summary = "Use to get a list of user types")]
    public partial class GetUserTypes : TypeSearchModel, IReturn<UserTypePagedResults> { }

    /// <summary>A ServiceStack Route to get user types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Contacts.UserType.View"),
        PublicAPI,
        Route("/Contacts/UserTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all user types")]
    public partial class GetUserTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all user types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Contacts.UserType.View"),
        PublicAPI,
        Route("/Contacts/UserTypesDigest", "GET",
            Summary = "Use to get a hash representing each user types")]
    public partial class GetUserTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get user type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific user type")]
    public partial class GetUserTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get user type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Contacts/UserType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific user type by the custom key")]
    public partial class GetUserTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get user type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Contacts/UserType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific user type by the name")]
    public partial class GetUserTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get user type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Contacts/UserType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific user type by the name")]
    public partial class GetUserTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check user type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserType.View"),
        PublicAPI,
        Route("/Contacts/UserType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckUserTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserType.View"),
        PublicAPI,
        Route("/Contacts/UserType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckUserTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserType.View"),
        PublicAPI,
        Route("/Contacts/UserType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckUserTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check user type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.UserType.View"),
        PublicAPI,
        Route("/Contacts/UserType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckUserTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create user type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.UserType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserType/Create", "POST", Priority = 1,
            Summary = "Use to create a new user type.")]
    public partial class CreateUserType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert user type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Contacts/UserType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing user type (as needed).")]
    public partial class UpsertUserType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update user type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.UserType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing user type.")]
    public partial class UpdateUserType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate user type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user type from the system [Soft-Delete]")]
    public partial class DeactivateUserTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate user type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserType.Deactivate"),
        PublicAPI,
        Route("/Contacts/UserType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific user type from the system [Soft-Delete]")]
    public partial class DeactivateUserTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate user type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserType.Reactivate"),
        PublicAPI,
        Route("/Contacts/UserType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific user type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUserTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/UserType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific user type from the system [Hard-Delete]")]
    public partial class DeleteUserTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete user type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.UserType.Delete"),
        PublicAPI,
        Route("/Contacts/UserType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific user type from the system [Hard-Delete]")]
    public partial class DeleteUserTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear user type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/UserType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all user type calls.")]
    public class ClearUserTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class UserTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetUserTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, UserTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.UserTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetUserTypesForConnect request)
        {
            return await Workflows.UserTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserTypesDigest request)
        {
            return await Workflows.UserTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetUserTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.UserTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.UserTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.UserTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUserTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUserTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.UserTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckUserTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserTypeExistsByID request)
        {
            return await Workflows.UserTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserTypeExistsByKey request)
        {
            return await Workflows.UserTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserTypeExistsByName request)
        {
            return await Workflows.UserTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUserTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUserTypeExistsByDisplayName request)
        {
            return await Workflows.UserTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertUserType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertUserType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserTypeDataAsync,
                    () => Workflows.UserTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateUserType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateUserType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserTypeDataAsync,
                    () => Workflows.UserTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateUserType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateUserType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserTypeDataAsync,
                    () => Workflows.UserTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateUserTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserTypeDataAsync,
                    () => Workflows.UserTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateUserTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUserTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserTypeDataAsync,
                    () => Workflows.UserTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateUserTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserTypeDataAsync,
                    () => Workflows.UserTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateUserTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUserTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserTypeDataAsync,
                    () => Workflows.UserTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteUserTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserTypeDataAsync,
                    () => Workflows.UserTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteUserTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUserTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUserTypeDataAsync,
                    () => Workflows.UserTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearUserTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearUserTypeCache request)
        {
            await ClearCachedUserTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedUserTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetUserTypes>(string.Empty),
                    UrnId.Create<GetUserTypeByID>(string.Empty),
                    UrnId.Create<GetUserTypeByKey>(string.Empty),
                    UrnId.Create<GetUserTypeByName>(string.Empty),
                    UrnId.Create<CheckUserTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckUserTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckUserTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckUserTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class UserTypeService : UserTypeServiceBase { }
}
