// <autogenerated>
// <copyright file="ReferralCodeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the referral code service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of referral codes.</summary>
    /// <seealso cref="ReferralCodeSearchModel"/>
    /// <seealso cref="IReturn{ReferralCodePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ReferralCodes", "GET", Priority = 1,
            Summary = "Use to get a list of referral codes")]
    public partial class GetReferralCodes : ReferralCodeSearchModel, IReturn<ReferralCodePagedResults> { }

    /// <summary>A ServiceStack Route to get referral codes for connect.</summary>
    /// <seealso cref="ReferralCodeSearchModel"/>
    /// <seealso cref="IReturn{List{ReferralCodeModel}}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCode.View"),
        PublicAPI,
        Route("/Contacts/ReferralCodesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all referral codes")]
    public partial class GetReferralCodesForConnect : ReferralCodeSearchModel, IReturn<List<ReferralCodeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all referral codes.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCode.View"),
        PublicAPI,
        Route("/Contacts/ReferralCodesDigest", "GET",
            Summary = "Use to get a hash representing each referral codes")]
    public partial class GetReferralCodesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get referral code.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ReferralCodeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ReferralCode/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific referral code")]
    public partial class GetReferralCodeByID : ImplementsIDBase, IReturn<ReferralCodeModel> { }

    /// <summary>A ServiceStack Route to get referral code.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ReferralCodeModel}"/>
    [PublicAPI,
        Route("/Contacts/ReferralCode/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific referral code by the custom key")]
    public partial class GetReferralCodeByKey : ImplementsKeyBase, IReturn<ReferralCodeModel> { }

    /// <summary>A ServiceStack Route to get referral code.</summary>
    /// <seealso cref="IReturn{ReferralCodeModel}"/>
    [PublicAPI,
        Route("/Contacts/ReferralCode/Name", "GET", Priority = 1,
            Summary = "Use to get a specific referral code by the name")]
    public partial class GetReferralCodeByName : ImplementsNameBase, IReturn<ReferralCodeModel> { }

    /// <summary>A ServiceStack Route to check referral code exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCode.View"),
        PublicAPI,
        Route("/Contacts/ReferralCode/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckReferralCodeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check referral code exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCode.View"),
        PublicAPI,
        Route("/Contacts/ReferralCode/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckReferralCodeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check referral code exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCode.View"),
        PublicAPI,
        Route("/Contacts/ReferralCode/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckReferralCodeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create referral code.</summary>
    /// <seealso cref="ReferralCodeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCode.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCode/Create", "POST", Priority = 1,
            Summary = "Use to create a new referral code.")]
    public partial class CreateReferralCode : ReferralCodeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert referral code.</summary>
    /// <seealso cref="ReferralCodeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Contacts/ReferralCode/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing referral code (as needed).")]
    public partial class UpsertReferralCode : ReferralCodeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update referral code.</summary>
    /// <seealso cref="ReferralCodeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCode.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCode/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing referral code.")]
    public partial class UpdateReferralCode : ReferralCodeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate referral code.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCode.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCode/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific referral code from the system [Soft-Delete]")]
    public partial class DeactivateReferralCodeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate referral code by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCode.Deactivate"),
        PublicAPI,
        Route("/Contacts/ReferralCode/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific referral code from the system [Soft-Delete]")]
    public partial class DeactivateReferralCodeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate referral code.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCode.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCode/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific referral code from the system [Restore from Soft-Delete]")]
    public partial class ReactivateReferralCodeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate referral code by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCode.Reactivate"),
        PublicAPI,
        Route("/Contacts/ReferralCode/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific referral code from the system [Restore from Soft-Delete]")]
    public partial class ReactivateReferralCodeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete referral code.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCode.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Contacts/ReferralCode/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific referral code from the system [Hard-Delete]")]
    public partial class DeleteReferralCodeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete referral code by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Contacts.ReferralCode.Delete"),
        PublicAPI,
        Route("/Contacts/ReferralCode/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific referral code from the system [Hard-Delete]")]
    public partial class DeleteReferralCodeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear referral code cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Contacts/ReferralCode/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all referral code calls.")]
    public class ClearReferralCodeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ReferralCodeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetReferralCodes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IReferralCodeModel, ReferralCodeModel, IReferralCodeSearchModel, ReferralCodePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ReferralCodes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReferralCodesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetReferralCodesForConnect request)
        {
            return await Workflows.ReferralCodes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReferralCodesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodesDigest request)
        {
            return await Workflows.ReferralCodes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetReferralCodeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ReferralCodes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReferralCodeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ReferralCodes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReferralCodeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReferralCodeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ReferralCodes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckReferralCodeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReferralCodeExistsByID request)
        {
            return await Workflows.ReferralCodes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReferralCodeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReferralCodeExistsByKey request)
        {
            return await Workflows.ReferralCodes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReferralCodeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReferralCodeExistsByName request)
        {
            return await Workflows.ReferralCodes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertReferralCode"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertReferralCode request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeDataAsync,
                    () => Workflows.ReferralCodes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateReferralCode"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateReferralCode request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeDataAsync,
                    () => Workflows.ReferralCodes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateReferralCode"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateReferralCode request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeDataAsync,
                    () => Workflows.ReferralCodes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateReferralCodeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateReferralCodeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeDataAsync,
                    () => Workflows.ReferralCodes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateReferralCodeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateReferralCodeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeDataAsync,
                    () => Workflows.ReferralCodes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateReferralCodeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateReferralCodeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeDataAsync,
                    () => Workflows.ReferralCodes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateReferralCodeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateReferralCodeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeDataAsync,
                    () => Workflows.ReferralCodes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteReferralCodeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteReferralCodeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeDataAsync,
                    () => Workflows.ReferralCodes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteReferralCodeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteReferralCodeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReferralCodeDataAsync,
                    () => Workflows.ReferralCodes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearReferralCodeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearReferralCodeCache request)
        {
            await ClearCachedReferralCodeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedReferralCodeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetReferralCodes>(string.Empty),
                    UrnId.Create<GetReferralCodeByID>(string.Empty),
                    UrnId.Create<GetReferralCodeByKey>(string.Empty),
                    UrnId.Create<GetReferralCodeByName>(string.Empty),
                    UrnId.Create<CheckReferralCodeExistsByID>(string.Empty),
                    UrnId.Create<CheckReferralCodeExistsByKey>(string.Empty),
                    UrnId.Create<CheckReferralCodeExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ReferralCodeService : ReferralCodeServiceBase { }
}
