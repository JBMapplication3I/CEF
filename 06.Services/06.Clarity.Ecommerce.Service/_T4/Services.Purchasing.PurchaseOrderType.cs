// <autogenerated>
// <copyright file="PurchaseOrderTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the purchase order type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of purchase order types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{PurchaseOrderTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderTypes", "GET", Priority = 1,
            Summary = "Use to get a list of purchase order types")]
    public partial class GetPurchaseOrderTypes : TypeSearchModel, IReturn<PurchaseOrderTypePagedResults> { }

    /// <summary>A ServiceStack Route to get purchase order types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderType.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all purchase order types")]
    public partial class GetPurchaseOrderTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all purchase order types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderType.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderTypesDigest", "GET",
            Summary = "Use to get a hash representing each purchase order types")]
    public partial class GetPurchaseOrderTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get purchase order type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order type")]
    public partial class GetPurchaseOrderTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get purchase order type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order type by the custom key")]
    public partial class GetPurchaseOrderTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get purchase order type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order type by the name")]
    public partial class GetPurchaseOrderTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get purchase order type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order type by the name")]
    public partial class GetPurchaseOrderTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check purchase order type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderType.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderType.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderType.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderType.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create purchase order type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Create", "POST", Priority = 1,
            Summary = "Use to create a new purchase order type.")]
    public partial class CreatePurchaseOrderType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert purchase order type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing purchase order type (as needed).")]
    public partial class UpsertPurchaseOrderType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update purchase order type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing purchase order type.")]
    public partial class UpdatePurchaseOrderType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate purchase order type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order type from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate purchase order type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderType.Deactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order type from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order type from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderType.Reactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order type from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific purchase order type from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderType.Delete"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific purchase order type from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear purchase order type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all purchase order type calls.")]
    public class ClearPurchaseOrderTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PurchaseOrderTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPurchaseOrderTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, PurchaseOrderTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PurchaseOrderTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPurchaseOrderTypesForConnect request)
        {
            return await Workflows.PurchaseOrderTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderTypesDigest request)
        {
            return await Workflows.PurchaseOrderTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPurchaseOrderTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PurchaseOrderTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PurchaseOrderTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.PurchaseOrderTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.PurchaseOrderTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPurchaseOrderTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderTypeExistsByID request)
        {
            return await Workflows.PurchaseOrderTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderTypeExistsByKey request)
        {
            return await Workflows.PurchaseOrderTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderTypeExistsByName request)
        {
            return await Workflows.PurchaseOrderTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderTypeExistsByDisplayName request)
        {
            return await Workflows.PurchaseOrderTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPurchaseOrderType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPurchaseOrderType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderTypeDataAsync,
                    () => Workflows.PurchaseOrderTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePurchaseOrderType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePurchaseOrderType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderTypeDataAsync,
                    () => Workflows.PurchaseOrderTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePurchaseOrderType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePurchaseOrderType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderTypeDataAsync,
                    () => Workflows.PurchaseOrderTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderTypeDataAsync,
                    () => Workflows.PurchaseOrderTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderTypeDataAsync,
                    () => Workflows.PurchaseOrderTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderTypeDataAsync,
                    () => Workflows.PurchaseOrderTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderTypeDataAsync,
                    () => Workflows.PurchaseOrderTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderTypeDataAsync,
                    () => Workflows.PurchaseOrderTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderTypeDataAsync,
                    () => Workflows.PurchaseOrderTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPurchaseOrderTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPurchaseOrderTypeCache request)
        {
            await ClearCachedPurchaseOrderTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPurchaseOrderTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPurchaseOrderTypes>(string.Empty),
                    UrnId.Create<GetPurchaseOrderTypeByID>(string.Empty),
                    UrnId.Create<GetPurchaseOrderTypeByKey>(string.Empty),
                    UrnId.Create<GetPurchaseOrderTypeByName>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PurchaseOrderTypeService : PurchaseOrderTypeServiceBase { }
}
