// <autogenerated>
// <copyright file="StoreVendorService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store vendor service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store vendors.</summary>
    /// <seealso cref="StoreVendorSearchModel"/>
    /// <seealso cref="IReturn{StoreVendorPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreVendors", "GET", Priority = 1,
            Summary = "Use to get a list of store vendors")]
    public partial class GetStoreVendors : StoreVendorSearchModel, IReturn<StoreVendorPagedResults> { }

    /// <summary>A ServiceStack Route to get store vendors for connect.</summary>
    /// <seealso cref="StoreVendorSearchModel"/>
    /// <seealso cref="IReturn{List{StoreVendorModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreVendor.View"),
        PublicAPI,
        Route("/Stores/StoreVendorsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store vendors")]
    public partial class GetStoreVendorsForConnect : StoreVendorSearchModel, IReturn<List<StoreVendorModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store vendors.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreVendor.View"),
        PublicAPI,
        Route("/Stores/StoreVendorsDigest", "GET",
            Summary = "Use to get a hash representing each store vendors")]
    public partial class GetStoreVendorsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreVendorModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreVendor/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store vendor")]
    public partial class GetStoreVendorByID : ImplementsIDBase, IReturn<StoreVendorModel> { }

    /// <summary>A ServiceStack Route to get store vendor.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreVendorModel}"/>
    [PublicAPI,
        Route("/Stores/StoreVendor/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store vendor by the custom key")]
    public partial class GetStoreVendorByKey : ImplementsKeyBase, IReturn<StoreVendorModel> { }

    /// <summary>A ServiceStack Route to check store vendor exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreVendor.View"),
        PublicAPI,
        Route("/Stores/StoreVendor/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreVendorExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store vendor exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreVendor.View"),
        PublicAPI,
        Route("/Stores/StoreVendor/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreVendorExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store vendor.</summary>
    /// <seealso cref="StoreVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreVendor.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreVendor/Create", "POST", Priority = 1,
            Summary = "Use to create a new store vendor.")]
    public partial class CreateStoreVendor : StoreVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store vendor.</summary>
    /// <seealso cref="StoreVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreVendor/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store vendor (as needed).")]
    public partial class UpsertStoreVendor : StoreVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store vendor.</summary>
    /// <seealso cref="StoreVendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreVendor.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreVendor/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store vendor.")]
    public partial class UpdateStoreVendor : StoreVendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreVendor.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreVendor/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store vendor from the system [Soft-Delete]")]
    public partial class DeactivateStoreVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreVendor.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreVendor/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store vendor from the system [Soft-Delete]")]
    public partial class DeactivateStoreVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreVendor.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreVendor/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store vendor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreVendor.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreVendor/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store vendor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreVendor.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreVendor/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store vendor from the system [Hard-Delete]")]
    public partial class DeleteStoreVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreVendor.Delete"),
        PublicAPI,
        Route("/Stores/StoreVendor/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store vendor from the system [Hard-Delete]")]
    public partial class DeleteStoreVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store vendor cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreVendor/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store vendor calls.")]
    public class ClearStoreVendorCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreVendorServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreVendors"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreVendors request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreVendorModel, StoreVendorModel, IStoreVendorSearchModel, StoreVendorPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreVendors)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreVendorsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreVendorsForConnect request)
        {
            return await Workflows.StoreVendors.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreVendorsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreVendorsDigest request)
        {
            return await Workflows.StoreVendors.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreVendorByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreVendors, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreVendorByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreVendors, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreVendorExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreVendorExistsByID request)
        {
            return await Workflows.StoreVendors.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreVendorExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreVendorExistsByKey request)
        {
            return await Workflows.StoreVendors.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreVendorDataAsync,
                    () => Workflows.StoreVendors.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreVendorDataAsync,
                    () => Workflows.StoreVendors.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreVendorDataAsync,
                    () => Workflows.StoreVendors.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreVendorDataAsync,
                    () => Workflows.StoreVendors.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreVendorDataAsync,
                    () => Workflows.StoreVendors.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreVendorDataAsync,
                    () => Workflows.StoreVendors.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreVendorDataAsync,
                    () => Workflows.StoreVendors.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreVendorDataAsync,
                    () => Workflows.StoreVendors.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreVendorDataAsync,
                    () => Workflows.StoreVendors.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreVendorCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreVendorCache request)
        {
            await ClearCachedStoreVendorDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreVendorDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreVendors>(string.Empty),
                    UrnId.Create<GetStoreVendorByID>(string.Empty),
                    UrnId.Create<GetStoreVendorByKey>(string.Empty),
                    UrnId.Create<CheckStoreVendorExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreVendorExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreVendorService : StoreVendorServiceBase { }
}
