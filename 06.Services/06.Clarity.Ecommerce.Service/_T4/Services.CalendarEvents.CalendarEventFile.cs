// <autogenerated>
// <copyright file="CalendarEventFileService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the calendar event file service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of calendar event files.</summary>
    /// <seealso cref="CalendarEventFileSearchModel"/>
    /// <seealso cref="IReturn{CalendarEventFilePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventFiles", "GET", Priority = 1,
            Summary = "Use to get a list of calendar event files")]
    public partial class GetCalendarEventFiles : CalendarEventFileSearchModel, IReturn<CalendarEventFilePagedResults> { }

    /// <summary>A ServiceStack Route to get calendar event files for connect.</summary>
    /// <seealso cref="CalendarEventFileSearchModel"/>
    /// <seealso cref="IReturn{List{CalendarEventFileModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventFile.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFilesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all calendar event files")]
    public partial class GetCalendarEventFilesForConnect : CalendarEventFileSearchModel, IReturn<List<CalendarEventFileModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all calendar event files.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventFile.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFilesDigest", "GET",
            Summary = "Use to get a hash representing each calendar event files")]
    public partial class GetCalendarEventFilesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get calendar event file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CalendarEventFileModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventFile/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event file")]
    public partial class GetCalendarEventFileByID : ImplementsIDBase, IReturn<CalendarEventFileModel> { }

    /// <summary>A ServiceStack Route to get calendar event file.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CalendarEventFileModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event file by the custom key")]
    public partial class GetCalendarEventFileByKey : ImplementsKeyBase, IReturn<CalendarEventFileModel> { }

    /// <summary>A ServiceStack Route to get calendar event file.</summary>
    /// <seealso cref="IReturn{CalendarEventFileModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Name", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event file by the name")]
    public partial class GetCalendarEventFileByName : ImplementsNameBase, IReturn<CalendarEventFileModel> { }

    /// <summary>A ServiceStack Route to get calendar event file.</summary>
    /// <seealso cref="IReturn{CalendarEventFileModel}"/>
    [PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific calendar event file by the SEO URL")]
    public partial class GetCalendarEventFileBySeoUrl : ImplementsSeoUrlBase, IReturn<CalendarEventFileModel> { }

    /// <summary>A ServiceStack Route to check calendar event file exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventFile.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventFileExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event file exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventFile.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventFileExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event file exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventFile.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventFileExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check calendar event file exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventFile.View"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckCalendarEventFileExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create calendar event file.</summary>
    /// <seealso cref="CalendarEventFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventFile.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Create", "POST", Priority = 1,
            Summary = "Use to create a new calendar event file.")]
    public partial class CreateCalendarEventFile : CalendarEventFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert calendar event file.</summary>
    /// <seealso cref="CalendarEventFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing calendar event file (as needed).")]
    public partial class UpsertCalendarEventFile : CalendarEventFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update calendar event file.</summary>
    /// <seealso cref="CalendarEventFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventFile.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing calendar event file.")]
    public partial class UpdateCalendarEventFile : CalendarEventFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate calendar event file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventFile.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar event file from the system [Soft-Delete]")]
    public partial class DeactivateCalendarEventFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate calendar event file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventFile.Deactivate"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific calendar event file from the system [Soft-Delete]")]
    public partial class DeactivateCalendarEventFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar event file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventFile.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar event file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarEventFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate calendar event file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventFile.Reactivate"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific calendar event file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCalendarEventFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar event file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventFile.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific calendar event file from the system [Hard-Delete]")]
    public partial class DeleteCalendarEventFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete calendar event file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("CalendarEvents.CalendarEventFile.Delete"),
        PublicAPI,
        Route("/CalendarEvents/CalendarEventFile/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific calendar event file from the system [Hard-Delete]")]
    public partial class DeleteCalendarEventFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear calendar event file cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/CalendarEvents/CalendarEventFile/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all calendar event file calls.")]
    public class ClearCalendarEventFileCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CalendarEventFileServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCalendarEventFiles"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventFiles request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICalendarEventFileModel, CalendarEventFileModel, ICalendarEventFileSearchModel, CalendarEventFilePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CalendarEventFiles)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventFilesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCalendarEventFilesForConnect request)
        {
            return await Workflows.CalendarEventFiles.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventFilesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventFilesDigest request)
        {
            return await Workflows.CalendarEventFiles.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCalendarEventFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventFileByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CalendarEventFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventFileByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CalendarEventFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventFileByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventFileByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CalendarEventFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCalendarEventFileBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCalendarEventFileBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.CalendarEventFiles, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCalendarEventFileExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventFileExistsByID request)
        {
            return await Workflows.CalendarEventFiles.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventFileExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventFileExistsByKey request)
        {
            return await Workflows.CalendarEventFiles.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventFileExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventFileExistsByName request)
        {
            return await Workflows.CalendarEventFiles.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCalendarEventFileExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCalendarEventFileExistsBySeoUrl request)
        {
            return await Workflows.CalendarEventFiles.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCalendarEventFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCalendarEventFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventFileDataAsync,
                    () => Workflows.CalendarEventFiles.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCalendarEventFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCalendarEventFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventFileDataAsync,
                    () => Workflows.CalendarEventFiles.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCalendarEventFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCalendarEventFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventFileDataAsync,
                    () => Workflows.CalendarEventFiles.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCalendarEventFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarEventFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventFileDataAsync,
                    () => Workflows.CalendarEventFiles.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCalendarEventFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCalendarEventFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventFileDataAsync,
                    () => Workflows.CalendarEventFiles.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCalendarEventFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarEventFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventFileDataAsync,
                    () => Workflows.CalendarEventFiles.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCalendarEventFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCalendarEventFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventFileDataAsync,
                    () => Workflows.CalendarEventFiles.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCalendarEventFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarEventFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventFileDataAsync,
                    () => Workflows.CalendarEventFiles.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCalendarEventFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCalendarEventFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCalendarEventFileDataAsync,
                    () => Workflows.CalendarEventFiles.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCalendarEventFileCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCalendarEventFileCache request)
        {
            await ClearCachedCalendarEventFileDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCalendarEventFileDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCalendarEventFiles>(string.Empty),
                    UrnId.Create<GetCalendarEventFileByID>(string.Empty),
                    UrnId.Create<GetCalendarEventFileByKey>(string.Empty),
                    UrnId.Create<GetCalendarEventFileByName>(string.Empty),
                    UrnId.Create<GetCalendarEventFileBySeoUrl>(string.Empty),
                    UrnId.Create<CheckCalendarEventFileExistsByID>(string.Empty),
                    UrnId.Create<CheckCalendarEventFileExistsByKey>(string.Empty),
                    UrnId.Create<CheckCalendarEventFileExistsByName>(string.Empty),
                    UrnId.Create<CheckCalendarEventFileExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CalendarEventFileService : CalendarEventFileServiceBase { }
}
