// <autogenerated>
// <copyright file="FranchiseInventoryLocationTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise inventory location type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise inventory location types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{FranchiseInventoryLocationTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseInventoryLocationTypes", "GET", Priority = 1,
            Summary = "Use to get a list of franchise inventory location types")]
    public partial class GetFranchiseInventoryLocationTypes : TypeSearchModel, IReturn<FranchiseInventoryLocationTypePagedResults> { }

    /// <summary>A ServiceStack Route to get franchise inventory location types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocationType.View"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise inventory location types")]
    public partial class GetFranchiseInventoryLocationTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise inventory location types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocationType.View"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationTypesDigest", "GET",
            Summary = "Use to get a hash representing each franchise inventory location types")]
    public partial class GetFranchiseInventoryLocationTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise inventory location type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseInventoryLocationType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise inventory location type")]
    public partial class GetFranchiseInventoryLocationTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get franchise inventory location type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise inventory location type by the custom key")]
    public partial class GetFranchiseInventoryLocationTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get franchise inventory location type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific franchise inventory location type by the name")]
    public partial class GetFranchiseInventoryLocationTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get franchise inventory location type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific franchise inventory location type by the name")]
    public partial class GetFranchiseInventoryLocationTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check franchise inventory location type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocationType.View"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseInventoryLocationTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise inventory location type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocationType.View"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseInventoryLocationTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise inventory location type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocationType.View"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseInventoryLocationTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise inventory location type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocationType.View"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseInventoryLocationTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise inventory location type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocationType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise inventory location type.")]
    public partial class CreateFranchiseInventoryLocationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise inventory location type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise inventory location type (as needed).")]
    public partial class UpsertFranchiseInventoryLocationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise inventory location type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocationType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise inventory location type.")]
    public partial class UpdateFranchiseInventoryLocationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise inventory location type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocationType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise inventory location type from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseInventoryLocationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise inventory location type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocationType.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise inventory location type from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseInventoryLocationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise inventory location type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocationType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise inventory location type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseInventoryLocationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise inventory location type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocationType.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise inventory location type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseInventoryLocationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise inventory location type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocationType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise inventory location type from the system [Hard-Delete]")]
    public partial class DeleteFranchiseInventoryLocationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise inventory location type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseInventoryLocationType.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseInventoryLocationType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise inventory location type from the system [Hard-Delete]")]
    public partial class DeleteFranchiseInventoryLocationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise inventory location type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseInventoryLocationType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise inventory location type calls.")]
    public class ClearFranchiseInventoryLocationTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseInventoryLocationTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseInventoryLocationTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseInventoryLocationTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, FranchiseInventoryLocationTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseInventoryLocationTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseInventoryLocationTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseInventoryLocationTypesForConnect request)
        {
            return await Workflows.FranchiseInventoryLocationTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseInventoryLocationTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseInventoryLocationTypesDigest request)
        {
            return await Workflows.FranchiseInventoryLocationTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseInventoryLocationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseInventoryLocationTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseInventoryLocationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseInventoryLocationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseInventoryLocationTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseInventoryLocationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseInventoryLocationTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseInventoryLocationTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.FranchiseInventoryLocationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseInventoryLocationTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseInventoryLocationTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.FranchiseInventoryLocationTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseInventoryLocationTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseInventoryLocationTypeExistsByID request)
        {
            return await Workflows.FranchiseInventoryLocationTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseInventoryLocationTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseInventoryLocationTypeExistsByKey request)
        {
            return await Workflows.FranchiseInventoryLocationTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseInventoryLocationTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseInventoryLocationTypeExistsByName request)
        {
            return await Workflows.FranchiseInventoryLocationTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseInventoryLocationTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseInventoryLocationTypeExistsByDisplayName request)
        {
            return await Workflows.FranchiseInventoryLocationTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseInventoryLocationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseInventoryLocationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationTypeDataAsync,
                    () => Workflows.FranchiseInventoryLocationTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseInventoryLocationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseInventoryLocationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationTypeDataAsync,
                    () => Workflows.FranchiseInventoryLocationTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseInventoryLocationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseInventoryLocationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationTypeDataAsync,
                    () => Workflows.FranchiseInventoryLocationTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseInventoryLocationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseInventoryLocationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationTypeDataAsync,
                    () => Workflows.FranchiseInventoryLocationTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseInventoryLocationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseInventoryLocationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationTypeDataAsync,
                    () => Workflows.FranchiseInventoryLocationTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseInventoryLocationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseInventoryLocationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationTypeDataAsync,
                    () => Workflows.FranchiseInventoryLocationTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseInventoryLocationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseInventoryLocationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationTypeDataAsync,
                    () => Workflows.FranchiseInventoryLocationTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseInventoryLocationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseInventoryLocationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationTypeDataAsync,
                    () => Workflows.FranchiseInventoryLocationTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseInventoryLocationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseInventoryLocationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseInventoryLocationTypeDataAsync,
                    () => Workflows.FranchiseInventoryLocationTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseInventoryLocationTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseInventoryLocationTypeCache request)
        {
            await ClearCachedFranchiseInventoryLocationTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseInventoryLocationTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseInventoryLocationTypes>(string.Empty),
                    UrnId.Create<GetFranchiseInventoryLocationTypeByID>(string.Empty),
                    UrnId.Create<GetFranchiseInventoryLocationTypeByKey>(string.Empty),
                    UrnId.Create<GetFranchiseInventoryLocationTypeByName>(string.Empty),
                    UrnId.Create<CheckFranchiseInventoryLocationTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseInventoryLocationTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseInventoryLocationTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckFranchiseInventoryLocationTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseInventoryLocationTypeService : FranchiseInventoryLocationTypeServiceBase { }
}
