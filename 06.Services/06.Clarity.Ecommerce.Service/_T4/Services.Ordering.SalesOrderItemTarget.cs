// <autogenerated>
// <copyright file="SalesOrderItemTargetService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales order item target service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales order item targets.</summary>
    /// <seealso cref="SalesItemTargetBaseSearchModel"/>
    /// <seealso cref="IReturn{SalesOrderItemTargetPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderItemTargets", "GET", Priority = 1,
            Summary = "Use to get a list of sales order item targets")]
    public partial class GetSalesOrderItemTargets : SalesItemTargetBaseSearchModel, IReturn<SalesOrderItemTargetPagedResults> { }

    /// <summary>A ServiceStack Route to get sales order item targets for connect.</summary>
    /// <seealso cref="SalesItemTargetBaseSearchModel"/>
    /// <seealso cref="IReturn{List{SalesItemTargetBaseModel}}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItemTarget.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderItemTargetsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales order item targets")]
    public partial class GetSalesOrderItemTargetsForConnect : SalesItemTargetBaseSearchModel, IReturn<List<SalesItemTargetBaseModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales order item targets.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItemTarget.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderItemTargetsDigest", "GET",
            Summary = "Use to get a hash representing each sales order item targets")]
    public partial class GetSalesOrderItemTargetsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales order item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesItemTargetBaseModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderItemTarget/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order item target")]
    public partial class GetSalesOrderItemTargetByID : ImplementsIDBase, IReturn<SalesItemTargetBaseModel> { }

    /// <summary>A ServiceStack Route to get sales order item target.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesItemTargetBaseModel}"/>
    [PublicAPI,
        Route("/Ordering/SalesOrderItemTarget/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order item target by the custom key")]
    public partial class GetSalesOrderItemTargetByKey : ImplementsKeyBase, IReturn<SalesItemTargetBaseModel> { }

    /// <summary>A ServiceStack Route to check sales order item target exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItemTarget.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderItemTarget/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderItemTargetExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales order item target exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItemTarget.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderItemTarget/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderItemTargetExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales order item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItemTarget.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderItemTarget/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales order item target.")]
    public partial class CreateSalesOrderItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales order item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Ordering/SalesOrderItemTarget/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales order item target (as needed).")]
    public partial class UpsertSalesOrderItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales order item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItemTarget.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderItemTarget/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales order item target.")]
    public partial class UpdateSalesOrderItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales order item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItemTarget.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderItemTarget/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order item target from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales order item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItemTarget.Deactivate"),
        PublicAPI,
        Route("/Ordering/SalesOrderItemTarget/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order item target from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItemTarget.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderItemTarget/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order item target from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItemTarget.Reactivate"),
        PublicAPI,
        Route("/Ordering/SalesOrderItemTarget/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order item target from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItemTarget.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderItemTarget/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales order item target from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderItemTarget.Delete"),
        PublicAPI,
        Route("/Ordering/SalesOrderItemTarget/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales order item target from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales order item target cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderItemTarget/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales order item target calls.")]
    public class ClearSalesOrderItemTargetCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesOrderItemTargetServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesOrderItemTargets"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderItemTargets request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesItemTargetBaseModel, SalesItemTargetBaseModel, ISalesItemTargetBaseSearchModel, SalesOrderItemTargetPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesOrderItemTargets)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderItemTargetsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesOrderItemTargetsForConnect request)
        {
            return await Workflows.SalesOrderItemTargets.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderItemTargetsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderItemTargetsDigest request)
        {
            return await Workflows.SalesOrderItemTargets.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesOrderItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderItemTargetByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesOrderItemTargets, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderItemTargetByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesOrderItemTargets, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesOrderItemTargetExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderItemTargetExistsByID request)
        {
            return await Workflows.SalesOrderItemTargets.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesOrderItemTargetExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderItemTargetExistsByKey request)
        {
            return await Workflows.SalesOrderItemTargets.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesOrderItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesOrderItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemTargetDataAsync,
                    () => Workflows.SalesOrderItemTargets.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesOrderItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesOrderItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemTargetDataAsync,
                    () => Workflows.SalesOrderItemTargets.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesOrderItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesOrderItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemTargetDataAsync,
                    () => Workflows.SalesOrderItemTargets.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemTargetDataAsync,
                    () => Workflows.SalesOrderItemTargets.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemTargetDataAsync,
                    () => Workflows.SalesOrderItemTargets.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemTargetDataAsync,
                    () => Workflows.SalesOrderItemTargets.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemTargetDataAsync,
                    () => Workflows.SalesOrderItemTargets.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemTargetDataAsync,
                    () => Workflows.SalesOrderItemTargets.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderItemTargetDataAsync,
                    () => Workflows.SalesOrderItemTargets.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesOrderItemTargetCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesOrderItemTargetCache request)
        {
            await ClearCachedSalesOrderItemTargetDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesOrderItemTargetDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesOrderItemTargets>(string.Empty),
                    UrnId.Create<GetSalesOrderItemTargetByID>(string.Empty),
                    UrnId.Create<GetSalesOrderItemTargetByKey>(string.Empty),
                    UrnId.Create<CheckSalesOrderItemTargetExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesOrderItemTargetExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesOrderItemTargetService : SalesOrderItemTargetServiceBase { }
}
