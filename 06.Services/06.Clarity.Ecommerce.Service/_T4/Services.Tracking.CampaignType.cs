// <autogenerated>
// <copyright file="CampaignTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the campaign type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of campaign types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{CampaignTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/CampaignTypes", "GET", Priority = 1,
            Summary = "Use to get a list of campaign types")]
    public partial class GetCampaignTypes : TypeSearchModel, IReturn<CampaignTypePagedResults> { }

    /// <summary>A ServiceStack Route to get campaign types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignType.View"),
        PublicAPI,
        Route("/Tracking/CampaignTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all campaign types")]
    public partial class GetCampaignTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all campaign types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignType.View"),
        PublicAPI,
        Route("/Tracking/CampaignTypesDigest", "GET",
            Summary = "Use to get a hash representing each campaign types")]
    public partial class GetCampaignTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get campaign type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/CampaignType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific campaign type")]
    public partial class GetCampaignTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get campaign type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Tracking/CampaignType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific campaign type by the custom key")]
    public partial class GetCampaignTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get campaign type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Tracking/CampaignType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific campaign type by the name")]
    public partial class GetCampaignTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get campaign type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Tracking/CampaignType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific campaign type by the name")]
    public partial class GetCampaignTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check campaign type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignType.View"),
        PublicAPI,
        Route("/Tracking/CampaignType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCampaignTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check campaign type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignType.View"),
        PublicAPI,
        Route("/Tracking/CampaignType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCampaignTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check campaign type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignType.View"),
        PublicAPI,
        Route("/Tracking/CampaignType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCampaignTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check campaign type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignType.View"),
        PublicAPI,
        Route("/Tracking/CampaignType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCampaignTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create campaign type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignType/Create", "POST", Priority = 1,
            Summary = "Use to create a new campaign type.")]
    public partial class CreateCampaignType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert campaign type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tracking/CampaignType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing campaign type (as needed).")]
    public partial class UpsertCampaignType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update campaign type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing campaign type.")]
    public partial class UpdateCampaignType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate campaign type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific campaign type from the system [Soft-Delete]")]
    public partial class DeactivateCampaignTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate campaign type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignType.Deactivate"),
        PublicAPI,
        Route("/Tracking/CampaignType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific campaign type from the system [Soft-Delete]")]
    public partial class DeactivateCampaignTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate campaign type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific campaign type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCampaignTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate campaign type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignType.Reactivate"),
        PublicAPI,
        Route("/Tracking/CampaignType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific campaign type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCampaignTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete campaign type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/CampaignType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific campaign type from the system [Hard-Delete]")]
    public partial class DeleteCampaignTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete campaign type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.CampaignType.Delete"),
        PublicAPI,
        Route("/Tracking/CampaignType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific campaign type from the system [Hard-Delete]")]
    public partial class DeleteCampaignTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear campaign type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/CampaignType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all campaign type calls.")]
    public class ClearCampaignTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CampaignTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCampaignTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, CampaignTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CampaignTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCampaignTypesForConnect request)
        {
            return await Workflows.CampaignTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignTypesDigest request)
        {
            return await Workflows.CampaignTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCampaignTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CampaignTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CampaignTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CampaignTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCampaignTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCampaignTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.CampaignTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCampaignTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCampaignTypeExistsByID request)
        {
            return await Workflows.CampaignTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCampaignTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCampaignTypeExistsByKey request)
        {
            return await Workflows.CampaignTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCampaignTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCampaignTypeExistsByName request)
        {
            return await Workflows.CampaignTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCampaignTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCampaignTypeExistsByDisplayName request)
        {
            return await Workflows.CampaignTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCampaignType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCampaignType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignTypeDataAsync,
                    () => Workflows.CampaignTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCampaignType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCampaignType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignTypeDataAsync,
                    () => Workflows.CampaignTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCampaignType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCampaignType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignTypeDataAsync,
                    () => Workflows.CampaignTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCampaignTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCampaignTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignTypeDataAsync,
                    () => Workflows.CampaignTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCampaignTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCampaignTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignTypeDataAsync,
                    () => Workflows.CampaignTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCampaignTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCampaignTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignTypeDataAsync,
                    () => Workflows.CampaignTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCampaignTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCampaignTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignTypeDataAsync,
                    () => Workflows.CampaignTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCampaignTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCampaignTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignTypeDataAsync,
                    () => Workflows.CampaignTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCampaignTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCampaignTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCampaignTypeDataAsync,
                    () => Workflows.CampaignTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCampaignTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCampaignTypeCache request)
        {
            await ClearCachedCampaignTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCampaignTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCampaignTypes>(string.Empty),
                    UrnId.Create<GetCampaignTypeByID>(string.Empty),
                    UrnId.Create<GetCampaignTypeByKey>(string.Empty),
                    UrnId.Create<GetCampaignTypeByName>(string.Empty),
                    UrnId.Create<CheckCampaignTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckCampaignTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckCampaignTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckCampaignTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CampaignTypeService : CampaignTypeServiceBase { }
}
