// <autogenerated>
// <copyright file="VendorService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the vendor service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of vendors.</summary>
    /// <seealso cref="VendorSearchModel"/>
    /// <seealso cref="IReturn{VendorPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/Vendors", "GET", Priority = 1,
            Summary = "Use to get a list of vendors")]
    public partial class GetVendors : VendorSearchModel, IReturn<VendorPagedResults> { }

    /// <summary>A ServiceStack Route to get vendors for connect.</summary>
    /// <seealso cref="VendorSearchModel"/>
    /// <seealso cref="IReturn{List{VendorModel}}"/>
    [Authenticate, RequiredPermission("Vendors.Vendor.View"),
        PublicAPI,
        Route("/Vendors/VendorsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all vendors")]
    public partial class GetVendorsForConnect : VendorSearchModel, IReturn<List<VendorModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all vendors.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Vendors.Vendor.View"),
        PublicAPI,
        Route("/Vendors/VendorsDigest", "GET",
            Summary = "Use to get a hash representing each vendors")]
    public partial class GetVendorsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{VendorModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/Vendor/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific vendor")]
    public partial class GetVendorByID : ImplementsIDBase, IReturn<VendorModel> { }

    /// <summary>A ServiceStack Route to get vendor.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{VendorModel}"/>
    [PublicAPI,
        Route("/Vendors/Vendor/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific vendor by the custom key")]
    public partial class GetVendorByKey : ImplementsKeyBase, IReturn<VendorModel> { }

    /// <summary>A ServiceStack Route to get vendor.</summary>
    /// <seealso cref="IReturn{VendorModel}"/>
    [PublicAPI,
        Route("/Vendors/Vendor/Name", "GET", Priority = 1,
            Summary = "Use to get a specific vendor by the name")]
    public partial class GetVendorByName : ImplementsNameBase, IReturn<VendorModel> { }

    /// <summary>A ServiceStack Route to check vendor exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.Vendor.View"),
        PublicAPI,
        Route("/Vendors/Vendor/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check vendor exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.Vendor.View"),
        PublicAPI,
        Route("/Vendors/Vendor/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check vendor exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Vendors.Vendor.View"),
        PublicAPI,
        Route("/Vendors/Vendor/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckVendorExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create vendor.</summary>
    /// <seealso cref="VendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Vendors.Vendor.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/Vendor/Create", "POST", Priority = 1,
            Summary = "Use to create a new vendor.")]
    public partial class CreateVendor : VendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert vendor.</summary>
    /// <seealso cref="VendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Vendors/Vendor/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing vendor (as needed).")]
    public partial class UpsertVendor : VendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update vendor.</summary>
    /// <seealso cref="VendorModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Vendors.Vendor.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/Vendor/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing vendor.")]
    public partial class UpdateVendor : VendorModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.Vendor.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/Vendor/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific vendor from the system [Soft-Delete]")]
    public partial class DeactivateVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.Vendor.Deactivate"),
        PublicAPI,
        Route("/Vendors/Vendor/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific vendor from the system [Soft-Delete]")]
    public partial class DeactivateVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.Vendor.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/Vendor/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific vendor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.Vendor.Reactivate"),
        PublicAPI,
        Route("/Vendors/Vendor/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific vendor from the system [Restore from Soft-Delete]")]
    public partial class ReactivateVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete vendor.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.Vendor.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Vendors/Vendor/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific vendor from the system [Hard-Delete]")]
    public partial class DeleteVendorByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete vendor by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Vendors.Vendor.Delete"),
        PublicAPI,
        Route("/Vendors/Vendor/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific vendor from the system [Hard-Delete]")]
    public partial class DeleteVendorByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear vendor cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Vendors/Vendor/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all vendor calls.")]
    public class ClearVendorCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class VendorServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetVendors"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendors request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IVendorModel, VendorModel, IVendorSearchModel, VendorPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Vendors)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetVendorsForConnect request)
        {
            return await Workflows.Vendors.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorsDigest request)
        {
            return await Workflows.Vendors.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Vendors, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Vendors, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetVendorByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetVendorByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Vendors, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckVendorExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorExistsByID request)
        {
            return await Workflows.Vendors.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckVendorExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorExistsByKey request)
        {
            return await Workflows.Vendors.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckVendorExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckVendorExistsByName request)
        {
            return await Workflows.Vendors.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorDataAsync,
                    () => Workflows.Vendors.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorDataAsync,
                    () => Workflows.Vendors.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateVendor"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateVendor request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorDataAsync,
                    () => Workflows.Vendors.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorDataAsync,
                    () => Workflows.Vendors.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorDataAsync,
                    () => Workflows.Vendors.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorDataAsync,
                    () => Workflows.Vendors.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorDataAsync,
                    () => Workflows.Vendors.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteVendorByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVendorByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorDataAsync,
                    () => Workflows.Vendors.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteVendorByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteVendorByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedVendorDataAsync,
                    () => Workflows.Vendors.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearVendorCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearVendorCache request)
        {
            await ClearCachedVendorDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedVendorDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetVendors>(string.Empty),
                    UrnId.Create<GetVendorByID>(string.Empty),
                    UrnId.Create<GetVendorByKey>(string.Empty),
                    UrnId.Create<GetVendorByName>(string.Empty),
                    UrnId.Create<CheckVendorExistsByID>(string.Empty),
                    UrnId.Create<CheckVendorExistsByKey>(string.Empty),
                    UrnId.Create<CheckVendorExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class VendorService : VendorServiceBase { }
}
