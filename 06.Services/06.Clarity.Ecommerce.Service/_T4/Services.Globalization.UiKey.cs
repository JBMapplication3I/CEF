// <autogenerated>
// <copyright file="UiKeyService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the ui key service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of ui keys.</summary>
    /// <seealso cref="UiKeySearchModel"/>
    /// <seealso cref="IReturn{UiKeyPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/UiKeys", "GET", Priority = 1,
            Summary = "Use to get a list of ui keys")]
    public partial class GetUiKeys : UiKeySearchModel, IReturn<UiKeyPagedResults> { }

    /// <summary>A ServiceStack Route to get ui keys for connect.</summary>
    /// <seealso cref="UiKeySearchModel"/>
    /// <seealso cref="IReturn{List{UiKeyModel}}"/>
    [Authenticate, RequiredPermission("Globalization.UiKey.View"),
        PublicAPI,
        Route("/Globalization/UiKeysForConnect", "POST,GET", Priority = 1,
            Summary = "Get all ui keys")]
    public partial class GetUiKeysForConnect : UiKeySearchModel, IReturn<List<UiKeyModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all ui keys.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Globalization.UiKey.View"),
        PublicAPI,
        Route("/Globalization/UiKeysDigest", "GET",
            Summary = "Use to get a hash representing each ui keys")]
    public partial class GetUiKeysDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get ui key.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{UiKeyModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/UiKey/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific ui key")]
    public partial class GetUiKeyByID : ImplementsIDBase, IReturn<UiKeyModel> { }

    /// <summary>A ServiceStack Route to get ui key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{UiKeyModel}"/>
    [PublicAPI,
        Route("/Globalization/UiKey/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific ui key by the custom key")]
    public partial class GetUiKeyByKey : ImplementsKeyBase, IReturn<UiKeyModel> { }

    /// <summary>A ServiceStack Route to check ui key exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Globalization.UiKey.View"),
        PublicAPI,
        Route("/Globalization/UiKey/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckUiKeyExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ui key exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Globalization.UiKey.View"),
        PublicAPI,
        Route("/Globalization/UiKey/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckUiKeyExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create ui key.</summary>
    /// <seealso cref="UiKeyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Globalization.UiKey.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/UiKey/Create", "POST", Priority = 1,
            Summary = "Use to create a new ui key.")]
    public partial class CreateUiKey : UiKeyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert ui key.</summary>
    /// <seealso cref="UiKeyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Globalization/UiKey/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing ui key (as needed).")]
    public partial class UpsertUiKey : UiKeyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update ui key.</summary>
    /// <seealso cref="UiKeyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Globalization.UiKey.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/UiKey/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing ui key.")]
    public partial class UpdateUiKey : UiKeyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate ui key.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.UiKey.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/UiKey/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ui key from the system [Soft-Delete]")]
    public partial class DeactivateUiKeyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate ui key by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.UiKey.Deactivate"),
        PublicAPI,
        Route("/Globalization/UiKey/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ui key from the system [Soft-Delete]")]
    public partial class DeactivateUiKeyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ui key.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.UiKey.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/UiKey/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ui key from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUiKeyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ui key by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.UiKey.Reactivate"),
        PublicAPI,
        Route("/Globalization/UiKey/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ui key from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUiKeyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ui key.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.UiKey.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/UiKey/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific ui key from the system [Hard-Delete]")]
    public partial class DeleteUiKeyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ui key by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.UiKey.Delete"),
        PublicAPI,
        Route("/Globalization/UiKey/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific ui key from the system [Hard-Delete]")]
    public partial class DeleteUiKeyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear ui key cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/UiKey/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all ui key calls.")]
    public class ClearUiKeyCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class UiKeyServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetUiKeys"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUiKeys request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IUiKeyModel, UiKeyModel, IUiKeySearchModel, UiKeyPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.UiKeys)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUiKeysForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetUiKeysForConnect request)
        {
            return await Workflows.UiKeys.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUiKeysDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUiKeysDigest request)
        {
            return await Workflows.UiKeys.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetUiKeyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUiKeyByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.UiKeys, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUiKeyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUiKeyByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.UiKeys, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckUiKeyExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUiKeyExistsByID request)
        {
            return await Workflows.UiKeys.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUiKeyExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUiKeyExistsByKey request)
        {
            return await Workflows.UiKeys.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertUiKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertUiKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiKeyDataAsync,
                    () => Workflows.UiKeys.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateUiKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateUiKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiKeyDataAsync,
                    () => Workflows.UiKeys.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateUiKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateUiKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiKeyDataAsync,
                    () => Workflows.UiKeys.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateUiKeyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUiKeyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiKeyDataAsync,
                    () => Workflows.UiKeys.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateUiKeyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUiKeyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiKeyDataAsync,
                    () => Workflows.UiKeys.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateUiKeyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUiKeyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiKeyDataAsync,
                    () => Workflows.UiKeys.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateUiKeyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUiKeyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiKeyDataAsync,
                    () => Workflows.UiKeys.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteUiKeyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUiKeyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiKeyDataAsync,
                    () => Workflows.UiKeys.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteUiKeyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUiKeyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiKeyDataAsync,
                    () => Workflows.UiKeys.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearUiKeyCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearUiKeyCache request)
        {
            await ClearCachedUiKeyDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedUiKeyDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetUiKeys>(string.Empty),
                    UrnId.Create<GetUiKeyByID>(string.Empty),
                    UrnId.Create<GetUiKeyByKey>(string.Empty),
                    UrnId.Create<CheckUiKeyExistsByID>(string.Empty),
                    UrnId.Create<CheckUiKeyExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class UiKeyService : UiKeyServiceBase { }
}
