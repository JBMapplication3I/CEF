// <autogenerated>
// <copyright file="CartItemTargetService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the cart item target service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of cart item targets.</summary>
    /// <seealso cref="SalesItemTargetBaseSearchModel"/>
    /// <seealso cref="IReturn{CartItemTargetPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartItemTargets", "GET", Priority = 1,
            Summary = "Use to get a list of cart item targets")]
    public partial class GetCartItemTargets : SalesItemTargetBaseSearchModel, IReturn<CartItemTargetPagedResults> { }

    /// <summary>A ServiceStack Route to get cart item targets for connect.</summary>
    /// <seealso cref="SalesItemTargetBaseSearchModel"/>
    /// <seealso cref="IReturn{List{SalesItemTargetBaseModel}}"/>
    [Authenticate, RequiredPermission("Shopping.CartItemTarget.View"),
        PublicAPI,
        Route("/Shopping/CartItemTargetsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all cart item targets")]
    public partial class GetCartItemTargetsForConnect : SalesItemTargetBaseSearchModel, IReturn<List<SalesItemTargetBaseModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all cart item targets.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shopping.CartItemTarget.View"),
        PublicAPI,
        Route("/Shopping/CartItemTargetsDigest", "GET",
            Summary = "Use to get a hash representing each cart item targets")]
    public partial class GetCartItemTargetsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get cart item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesItemTargetBaseModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartItemTarget/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific cart item target")]
    public partial class GetCartItemTargetByID : ImplementsIDBase, IReturn<SalesItemTargetBaseModel> { }

    /// <summary>A ServiceStack Route to get cart item target.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesItemTargetBaseModel}"/>
    [PublicAPI,
        Route("/Shopping/CartItemTarget/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific cart item target by the custom key")]
    public partial class GetCartItemTargetByKey : ImplementsKeyBase, IReturn<SalesItemTargetBaseModel> { }

    /// <summary>A ServiceStack Route to check cart item target exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartItemTarget.View"),
        PublicAPI,
        Route("/Shopping/CartItemTarget/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCartItemTargetExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart item target exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartItemTarget.View"),
        PublicAPI,
        Route("/Shopping/CartItemTarget/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCartItemTargetExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create cart item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.CartItemTarget.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartItemTarget/Create", "POST", Priority = 1,
            Summary = "Use to create a new cart item target.")]
    public partial class CreateCartItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert cart item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shopping/CartItemTarget/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing cart item target (as needed).")]
    public partial class UpsertCartItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update cart item target.</summary>
    /// <seealso cref="SalesItemTargetBaseModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.CartItemTarget.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartItemTarget/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing cart item target.")]
    public partial class UpdateCartItemTarget : SalesItemTargetBaseModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate cart item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartItemTarget.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartItemTarget/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart item target from the system [Soft-Delete]")]
    public partial class DeactivateCartItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate cart item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartItemTarget.Deactivate"),
        PublicAPI,
        Route("/Shopping/CartItemTarget/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart item target from the system [Soft-Delete]")]
    public partial class DeactivateCartItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartItemTarget.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartItemTarget/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart item target from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartItemTarget.Reactivate"),
        PublicAPI,
        Route("/Shopping/CartItemTarget/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart item target from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart item target.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartItemTarget.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartItemTarget/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific cart item target from the system [Hard-Delete]")]
    public partial class DeleteCartItemTargetByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart item target by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartItemTarget.Delete"),
        PublicAPI,
        Route("/Shopping/CartItemTarget/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific cart item target from the system [Hard-Delete]")]
    public partial class DeleteCartItemTargetByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear cart item target cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartItemTarget/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all cart item target calls.")]
    public class ClearCartItemTargetCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CartItemTargetServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCartItemTargets"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartItemTargets request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesItemTargetBaseModel, SalesItemTargetBaseModel, ISalesItemTargetBaseSearchModel, CartItemTargetPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CartItemTargets)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartItemTargetsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCartItemTargetsForConnect request)
        {
            return await Workflows.CartItemTargets.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartItemTargetsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartItemTargetsDigest request)
        {
            return await Workflows.CartItemTargets.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCartItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartItemTargetByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CartItemTargets, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartItemTargetByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CartItemTargets, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCartItemTargetExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartItemTargetExistsByID request)
        {
            return await Workflows.CartItemTargets.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartItemTargetExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartItemTargetExistsByKey request)
        {
            return await Workflows.CartItemTargets.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCartItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCartItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemTargetDataAsync,
                    () => Workflows.CartItemTargets.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCartItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCartItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemTargetDataAsync,
                    () => Workflows.CartItemTargets.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCartItemTarget"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCartItemTarget request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemTargetDataAsync,
                    () => Workflows.CartItemTargets.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCartItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemTargetDataAsync,
                    () => Workflows.CartItemTargets.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCartItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemTargetDataAsync,
                    () => Workflows.CartItemTargets.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCartItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemTargetDataAsync,
                    () => Workflows.CartItemTargets.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCartItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemTargetDataAsync,
                    () => Workflows.CartItemTargets.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCartItemTargetByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartItemTargetByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemTargetDataAsync,
                    () => Workflows.CartItemTargets.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCartItemTargetByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartItemTargetByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartItemTargetDataAsync,
                    () => Workflows.CartItemTargets.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCartItemTargetCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCartItemTargetCache request)
        {
            await ClearCachedCartItemTargetDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCartItemTargetDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCartItemTargets>(string.Empty),
                    UrnId.Create<GetCartItemTargetByID>(string.Empty),
                    UrnId.Create<GetCartItemTargetByKey>(string.Empty),
                    UrnId.Create<CheckCartItemTargetExistsByID>(string.Empty),
                    UrnId.Create<CheckCartItemTargetExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CartItemTargetService : CartItemTargetServiceBase { }
}
