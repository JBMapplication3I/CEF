// <autogenerated>
// <copyright file="FranchiseUserService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise user service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise users.</summary>
    /// <seealso cref="FranchiseUserSearchModel"/>
    /// <seealso cref="IReturn{FranchiseUserPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseUsers", "GET", Priority = 1,
            Summary = "Use to get a list of franchise users")]
    public partial class GetFranchiseUsers : FranchiseUserSearchModel, IReturn<FranchiseUserPagedResults> { }

    /// <summary>A ServiceStack Route to get franchise users for connect.</summary>
    /// <seealso cref="FranchiseUserSearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseUserModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseUser.View"),
        PublicAPI,
        Route("/Franchises/FranchiseUsersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise users")]
    public partial class GetFranchiseUsersForConnect : FranchiseUserSearchModel, IReturn<List<FranchiseUserModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise users.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseUser.View"),
        PublicAPI,
        Route("/Franchises/FranchiseUsersDigest", "GET",
            Summary = "Use to get a hash representing each franchise users")]
    public partial class GetFranchiseUsersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseUserModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseUser/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise user")]
    public partial class GetFranchiseUserByID : ImplementsIDBase, IReturn<FranchiseUserModel> { }

    /// <summary>A ServiceStack Route to get franchise user.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseUserModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseUser/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise user by the custom key")]
    public partial class GetFranchiseUserByKey : ImplementsKeyBase, IReturn<FranchiseUserModel> { }

    /// <summary>A ServiceStack Route to check franchise user exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseUser.View"),
        PublicAPI,
        Route("/Franchises/FranchiseUser/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseUserExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise user exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseUser.View"),
        PublicAPI,
        Route("/Franchises/FranchiseUser/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseUserExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise user.</summary>
    /// <seealso cref="FranchiseUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseUser.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseUser/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise user.")]
    public partial class CreateFranchiseUser : FranchiseUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise user.</summary>
    /// <seealso cref="FranchiseUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseUser/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise user (as needed).")]
    public partial class UpsertFranchiseUser : FranchiseUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise user.</summary>
    /// <seealso cref="FranchiseUserModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseUser.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseUser/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise user.")]
    public partial class UpdateFranchiseUser : FranchiseUserModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseUser.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseUser/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise user from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseUser.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseUser/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise user from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseUser.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseUser/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise user from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseUser.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseUser/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise user from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise user.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseUser.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseUser/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise user from the system [Hard-Delete]")]
    public partial class DeleteFranchiseUserByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise user by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseUser.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseUser/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise user from the system [Hard-Delete]")]
    public partial class DeleteFranchiseUserByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise user cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseUser/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise user calls.")]
    public class ClearFranchiseUserCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseUserServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseUsers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseUsers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseUserModel, FranchiseUserModel, IFranchiseUserSearchModel, FranchiseUserPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseUsers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseUsersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseUsersForConnect request)
        {
            return await Workflows.FranchiseUsers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseUsersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseUsersDigest request)
        {
            return await Workflows.FranchiseUsers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseUserByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseUsers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseUserByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseUsers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseUserExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseUserExistsByID request)
        {
            return await Workflows.FranchiseUsers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseUserExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseUserExistsByKey request)
        {
            return await Workflows.FranchiseUsers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseUserDataAsync,
                    () => Workflows.FranchiseUsers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseUserDataAsync,
                    () => Workflows.FranchiseUsers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseUser"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseUser request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseUserDataAsync,
                    () => Workflows.FranchiseUsers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseUserDataAsync,
                    () => Workflows.FranchiseUsers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseUserDataAsync,
                    () => Workflows.FranchiseUsers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseUserDataAsync,
                    () => Workflows.FranchiseUsers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseUserDataAsync,
                    () => Workflows.FranchiseUsers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseUserByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseUserByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseUserDataAsync,
                    () => Workflows.FranchiseUsers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseUserByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseUserByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseUserDataAsync,
                    () => Workflows.FranchiseUsers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseUserCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseUserCache request)
        {
            await ClearCachedFranchiseUserDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseUserDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseUsers>(string.Empty),
                    UrnId.Create<GetFranchiseUserByID>(string.Empty),
                    UrnId.Create<GetFranchiseUserByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseUserExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseUserExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseUserService : FranchiseUserServiceBase { }
}
