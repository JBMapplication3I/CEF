// <autogenerated>
// <copyright file="DiscountStoreService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the discount store service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of discount stores.</summary>
    /// <seealso cref="DiscountStoreSearchModel"/>
    /// <seealso cref="IReturn{DiscountStorePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountStores", "GET", Priority = 1,
            Summary = "Use to get a list of discount stores")]
    public partial class GetDiscountStores : DiscountStoreSearchModel, IReturn<DiscountStorePagedResults> { }

    /// <summary>A ServiceStack Route to get discount stores for connect.</summary>
    /// <seealso cref="DiscountStoreSearchModel"/>
    /// <seealso cref="IReturn{List{DiscountStoreModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountStore.View"),
        PublicAPI,
        Route("/Discounts/DiscountStoresForConnect", "POST,GET", Priority = 1,
            Summary = "Get all discount stores")]
    public partial class GetDiscountStoresForConnect : DiscountStoreSearchModel, IReturn<List<DiscountStoreModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all discount stores.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountStore.View"),
        PublicAPI,
        Route("/Discounts/DiscountStoresDigest", "GET",
            Summary = "Use to get a hash representing each discount stores")]
    public partial class GetDiscountStoresDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get discount store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{DiscountStoreModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountStore/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific discount store")]
    public partial class GetDiscountStoreByID : ImplementsIDBase, IReturn<DiscountStoreModel> { }

    /// <summary>A ServiceStack Route to get discount store.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{DiscountStoreModel}"/>
    [PublicAPI,
        Route("/Discounts/DiscountStore/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific discount store by the custom key")]
    public partial class GetDiscountStoreByKey : ImplementsKeyBase, IReturn<DiscountStoreModel> { }

    /// <summary>A ServiceStack Route to check discount store exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountStore.View"),
        PublicAPI,
        Route("/Discounts/DiscountStore/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountStoreExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check discount store exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountStore.View"),
        PublicAPI,
        Route("/Discounts/DiscountStore/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckDiscountStoreExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create discount store.</summary>
    /// <seealso cref="DiscountStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountStore.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountStore/Create", "POST", Priority = 1,
            Summary = "Use to create a new discount store.")]
    public partial class CreateDiscountStore : DiscountStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert discount store.</summary>
    /// <seealso cref="DiscountStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/DiscountStore/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing discount store (as needed).")]
    public partial class UpsertDiscountStore : DiscountStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update discount store.</summary>
    /// <seealso cref="DiscountStoreModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountStore.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountStore/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing discount store.")]
    public partial class UpdateDiscountStore : DiscountStoreModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate discount store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountStore.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountStore/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount store from the system [Soft-Delete]")]
    public partial class DeactivateDiscountStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate discount store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountStore.Deactivate"),
        PublicAPI,
        Route("/Discounts/DiscountStore/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific discount store from the system [Soft-Delete]")]
    public partial class DeactivateDiscountStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountStore.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountStore/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount store from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate discount store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountStore.Reactivate"),
        PublicAPI,
        Route("/Discounts/DiscountStore/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific discount store from the system [Restore from Soft-Delete]")]
    public partial class ReactivateDiscountStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount store.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountStore.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/DiscountStore/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific discount store from the system [Hard-Delete]")]
    public partial class DeleteDiscountStoreByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete discount store by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.DiscountStore.Delete"),
        PublicAPI,
        Route("/Discounts/DiscountStore/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific discount store from the system [Hard-Delete]")]
    public partial class DeleteDiscountStoreByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear discount store cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/DiscountStore/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all discount store calls.")]
    public class ClearDiscountStoreCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class DiscountStoreServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetDiscountStores"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountStores request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IDiscountStoreModel, DiscountStoreModel, IDiscountStoreSearchModel, DiscountStorePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.DiscountStores)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountStoresForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetDiscountStoresForConnect request)
        {
            return await Workflows.DiscountStores.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountStoresDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountStoresDigest request)
        {
            return await Workflows.DiscountStores.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetDiscountStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountStoreByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.DiscountStores, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetDiscountStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetDiscountStoreByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.DiscountStores, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckDiscountStoreExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountStoreExistsByID request)
        {
            return await Workflows.DiscountStores.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckDiscountStoreExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckDiscountStoreExistsByKey request)
        {
            return await Workflows.DiscountStores.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertDiscountStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertDiscountStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountStoreDataAsync,
                    () => Workflows.DiscountStores.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateDiscountStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateDiscountStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountStoreDataAsync,
                    () => Workflows.DiscountStores.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateDiscountStore"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateDiscountStore request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountStoreDataAsync,
                    () => Workflows.DiscountStores.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateDiscountStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountStoreDataAsync,
                    () => Workflows.DiscountStores.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateDiscountStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateDiscountStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountStoreDataAsync,
                    () => Workflows.DiscountStores.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateDiscountStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountStoreDataAsync,
                    () => Workflows.DiscountStores.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateDiscountStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateDiscountStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountStoreDataAsync,
                    () => Workflows.DiscountStores.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteDiscountStoreByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountStoreByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountStoreDataAsync,
                    () => Workflows.DiscountStores.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteDiscountStoreByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteDiscountStoreByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedDiscountStoreDataAsync,
                    () => Workflows.DiscountStores.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearDiscountStoreCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearDiscountStoreCache request)
        {
            await ClearCachedDiscountStoreDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedDiscountStoreDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetDiscountStores>(string.Empty),
                    UrnId.Create<GetDiscountStoreByID>(string.Empty),
                    UrnId.Create<GetDiscountStoreByKey>(string.Empty),
                    UrnId.Create<CheckDiscountStoreExistsByID>(string.Empty),
                    UrnId.Create<CheckDiscountStoreExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class DiscountStoreService : DiscountStoreServiceBase { }
}
