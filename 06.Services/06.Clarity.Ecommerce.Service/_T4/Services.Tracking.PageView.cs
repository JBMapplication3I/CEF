// <autogenerated>
// <copyright file="PageViewService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the page view service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of page views.</summary>
    /// <seealso cref="PageViewSearchModel"/>
    /// <seealso cref="IReturn{PageViewPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/PageViews", "GET", Priority = 1,
            Summary = "Use to get a list of page views")]
    public partial class GetPageViews : PageViewSearchModel, IReturn<PageViewPagedResults> { }

    /// <summary>A ServiceStack Route to get page views for connect.</summary>
    /// <seealso cref="PageViewSearchModel"/>
    /// <seealso cref="IReturn{List{PageViewModel}}"/>
    [Authenticate, RequiredPermission("Tracking.PageView.View"),
        PublicAPI,
        Route("/Tracking/PageViewsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all page views")]
    public partial class GetPageViewsForConnect : PageViewSearchModel, IReturn<List<PageViewModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all page views.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tracking.PageView.View"),
        PublicAPI,
        Route("/Tracking/PageViewsDigest", "GET",
            Summary = "Use to get a hash representing each page views")]
    public partial class GetPageViewsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get page view.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PageViewModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/PageView/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific page view")]
    public partial class GetPageViewByID : ImplementsIDBase, IReturn<PageViewModel> { }

    /// <summary>A ServiceStack Route to get page view.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PageViewModel}"/>
    [PublicAPI,
        Route("/Tracking/PageView/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific page view by the custom key")]
    public partial class GetPageViewByKey : ImplementsKeyBase, IReturn<PageViewModel> { }

    /// <summary>A ServiceStack Route to get page view.</summary>
    /// <seealso cref="IReturn{PageViewModel}"/>
    [PublicAPI,
        Route("/Tracking/PageView/Name", "GET", Priority = 1,
            Summary = "Use to get a specific page view by the name")]
    public partial class GetPageViewByName : ImplementsNameBase, IReturn<PageViewModel> { }

    /// <summary>A ServiceStack Route to check page view exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.PageView.View"),
        PublicAPI,
        Route("/Tracking/PageView/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPageViewExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check page view exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.PageView.View"),
        PublicAPI,
        Route("/Tracking/PageView/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPageViewExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check page view exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.PageView.View"),
        PublicAPI,
        Route("/Tracking/PageView/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPageViewExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create page view.</summary>
    /// <seealso cref="PageViewModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.PageView.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageView/Create", "POST", Priority = 1,
            Summary = "Use to create a new page view.")]
    public partial class CreatePageView : PageViewModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert page view.</summary>
    /// <seealso cref="PageViewModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tracking/PageView/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing page view (as needed).")]
    public partial class UpsertPageView : PageViewModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update page view.</summary>
    /// <seealso cref="PageViewModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.PageView.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageView/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing page view.")]
    public partial class UpdatePageView : PageViewModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate page view.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageView.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageView/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific page view from the system [Soft-Delete]")]
    public partial class DeactivatePageViewByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate page view by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageView.Deactivate"),
        PublicAPI,
        Route("/Tracking/PageView/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific page view from the system [Soft-Delete]")]
    public partial class DeactivatePageViewByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate page view.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageView.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageView/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific page view from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePageViewByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate page view by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageView.Reactivate"),
        PublicAPI,
        Route("/Tracking/PageView/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific page view from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePageViewByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete page view.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageView.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageView/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific page view from the system [Hard-Delete]")]
    public partial class DeletePageViewByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete page view by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageView.Delete"),
        PublicAPI,
        Route("/Tracking/PageView/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific page view from the system [Hard-Delete]")]
    public partial class DeletePageViewByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear page view cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/PageView/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all page view calls.")]
    public class ClearPageViewCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PageViewServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPageViews"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViews request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPageViewModel, PageViewModel, IPageViewSearchModel, PageViewPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PageViews)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPageViewsForConnect request)
        {
            return await Workflows.PageViews.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewsDigest request)
        {
            return await Workflows.PageViews.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPageViewByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PageViews, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PageViews, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.PageViews, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPageViewExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPageViewExistsByID request)
        {
            return await Workflows.PageViews.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPageViewExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPageViewExistsByKey request)
        {
            return await Workflows.PageViews.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPageViewExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPageViewExistsByName request)
        {
            return await Workflows.PageViews.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPageView"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPageView request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewDataAsync,
                    () => Workflows.PageViews.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePageView"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePageView request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewDataAsync,
                    () => Workflows.PageViews.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePageView"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePageView request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewDataAsync,
                    () => Workflows.PageViews.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePageViewByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePageViewByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewDataAsync,
                    () => Workflows.PageViews.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePageViewByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePageViewByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewDataAsync,
                    () => Workflows.PageViews.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePageViewByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePageViewByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewDataAsync,
                    () => Workflows.PageViews.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePageViewByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePageViewByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewDataAsync,
                    () => Workflows.PageViews.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePageViewByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePageViewByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewDataAsync,
                    () => Workflows.PageViews.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePageViewByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePageViewByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewDataAsync,
                    () => Workflows.PageViews.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPageViewCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPageViewCache request)
        {
            await ClearCachedPageViewDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPageViewDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPageViews>(string.Empty),
                    UrnId.Create<GetPageViewByID>(string.Empty),
                    UrnId.Create<GetPageViewByKey>(string.Empty),
                    UrnId.Create<GetPageViewByName>(string.Empty),
                    UrnId.Create<CheckPageViewExistsByID>(string.Empty),
                    UrnId.Create<CheckPageViewExistsByKey>(string.Empty),
                    UrnId.Create<CheckPageViewExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PageViewService : PageViewServiceBase { }
}
