// <autogenerated>
// <copyright file="SampleRequestStateService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sample request state service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sample request states.</summary>
    /// <seealso cref="StateSearchModel"/>
    /// <seealso cref="IReturn{SampleRequestStatePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestStates", "GET", Priority = 1,
            Summary = "Use to get a list of sample request states")]
    public partial class GetSampleRequestStates : StateSearchModel, IReturn<SampleRequestStatePagedResults> { }

    /// <summary>A ServiceStack Route to get sample request states for connect.</summary>
    /// <seealso cref="StateSearchModel"/>
    /// <seealso cref="IReturn{List{StateModel}}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestState.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestStatesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sample request states")]
    public partial class GetSampleRequestStatesForConnect : StateSearchModel, IReturn<List<StateModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sample request states.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestState.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestStatesDigest", "GET",
            Summary = "Use to get a hash representing each sample request states")]
    public partial class GetSampleRequestStatesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sample request state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestState/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sample request state")]
    public partial class GetSampleRequestStateByID : ImplementsIDBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get sample request state.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequestState/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sample request state by the custom key")]
    public partial class GetSampleRequestStateByKey : ImplementsKeyBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get sample request state.</summary>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequestState/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sample request state by the name")]
    public partial class GetSampleRequestStateByName : ImplementsNameBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get sample request state.</summary>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequestState/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific sample request state by the name")]
    public partial class GetSampleRequestStateByDisplayName : ImplementsDisplayNameBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to check sample request state exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestState.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestState/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestStateExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request state exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestState.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestState/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestStateExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request state exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestState.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestState/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestStateExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request state exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestState.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestState/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestStateExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sample request state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestState.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestState/Create", "POST", Priority = 1,
            Summary = "Use to create a new sample request state.")]
    public partial class CreateSampleRequestState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sample request state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Sampling/SampleRequestState/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sample request state (as needed).")]
    public partial class UpsertSampleRequestState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sample request state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestState.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestState/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sample request state.")]
    public partial class UpdateSampleRequestState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sample request state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestState.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestState/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sample request state from the system [Soft-Delete]")]
    public partial class DeactivateSampleRequestStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sample request state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestState.Deactivate"),
        PublicAPI,
        Route("/Sampling/SampleRequestState/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sample request state from the system [Soft-Delete]")]
    public partial class DeactivateSampleRequestStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sample request state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestState.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestState/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sample request state from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSampleRequestStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sample request state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestState.Reactivate"),
        PublicAPI,
        Route("/Sampling/SampleRequestState/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sample request state from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSampleRequestStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sample request state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestState.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestState/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sample request state from the system [Hard-Delete]")]
    public partial class DeleteSampleRequestStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sample request state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestState.Delete"),
        PublicAPI,
        Route("/Sampling/SampleRequestState/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sample request state from the system [Hard-Delete]")]
    public partial class DeleteSampleRequestStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sample request state cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestState/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sample request state calls.")]
    public class ClearSampleRequestStateCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SampleRequestStateServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSampleRequestStates"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestStates request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStateModel, StateModel, IStateSearchModel, SampleRequestStatePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SampleRequestStates)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestStatesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSampleRequestStatesForConnect request)
        {
            return await Workflows.SampleRequestStates.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestStatesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestStatesDigest request)
        {
            return await Workflows.SampleRequestStates.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSampleRequestStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestStateByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SampleRequestStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestStateByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SampleRequestStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestStateByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestStateByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SampleRequestStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestStateByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestStateByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.SampleRequestStates, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSampleRequestStateExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestStateExistsByID request)
        {
            return await Workflows.SampleRequestStates.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestStateExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestStateExistsByKey request)
        {
            return await Workflows.SampleRequestStates.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestStateExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestStateExistsByName request)
        {
            return await Workflows.SampleRequestStates.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestStateExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestStateExistsByDisplayName request)
        {
            return await Workflows.SampleRequestStates.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSampleRequestState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSampleRequestState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestStateDataAsync,
                    () => Workflows.SampleRequestStates.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSampleRequestState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSampleRequestState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestStateDataAsync,
                    () => Workflows.SampleRequestStates.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSampleRequestState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSampleRequestState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestStateDataAsync,
                    () => Workflows.SampleRequestStates.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSampleRequestStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSampleRequestStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestStateDataAsync,
                    () => Workflows.SampleRequestStates.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSampleRequestStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSampleRequestStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestStateDataAsync,
                    () => Workflows.SampleRequestStates.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSampleRequestStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSampleRequestStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestStateDataAsync,
                    () => Workflows.SampleRequestStates.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSampleRequestStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSampleRequestStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestStateDataAsync,
                    () => Workflows.SampleRequestStates.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSampleRequestStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSampleRequestStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestStateDataAsync,
                    () => Workflows.SampleRequestStates.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSampleRequestStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSampleRequestStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestStateDataAsync,
                    () => Workflows.SampleRequestStates.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSampleRequestStateCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSampleRequestStateCache request)
        {
            await ClearCachedSampleRequestStateDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSampleRequestStateDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSampleRequestStates>(string.Empty),
                    UrnId.Create<GetSampleRequestStateByID>(string.Empty),
                    UrnId.Create<GetSampleRequestStateByKey>(string.Empty),
                    UrnId.Create<GetSampleRequestStateByName>(string.Empty),
                    UrnId.Create<CheckSampleRequestStateExistsByID>(string.Empty),
                    UrnId.Create<CheckSampleRequestStateExistsByKey>(string.Empty),
                    UrnId.Create<CheckSampleRequestStateExistsByName>(string.Empty),
                    UrnId.Create<CheckSampleRequestStateExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SampleRequestStateService : SampleRequestStateServiceBase { }
}
