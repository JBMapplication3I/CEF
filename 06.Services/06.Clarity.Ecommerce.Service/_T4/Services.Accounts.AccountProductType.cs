// <autogenerated>
// <copyright file="AccountProductTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the account product type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of account product types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{AccountProductTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountProductTypes", "GET", Priority = 1,
            Summary = "Use to get a list of account product types")]
    public partial class GetAccountProductTypes : TypeSearchModel, IReturn<AccountProductTypePagedResults> { }

    /// <summary>A ServiceStack Route to get account product types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountProductType.View"),
        PublicAPI,
        Route("/Accounts/AccountProductTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all account product types")]
    public partial class GetAccountProductTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all account product types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountProductType.View"),
        PublicAPI,
        Route("/Accounts/AccountProductTypesDigest", "GET",
            Summary = "Use to get a hash representing each account product types")]
    public partial class GetAccountProductTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get account product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountProductType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific account product type")]
    public partial class GetAccountProductTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get account product type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountProductType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific account product type by the custom key")]
    public partial class GetAccountProductTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get account product type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountProductType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific account product type by the name")]
    public partial class GetAccountProductTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get account product type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountProductType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific account product type by the name")]
    public partial class GetAccountProductTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check account product type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountProductType.View"),
        PublicAPI,
        Route("/Accounts/AccountProductType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountProductTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account product type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountProductType.View"),
        PublicAPI,
        Route("/Accounts/AccountProductType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountProductTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account product type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountProductType.View"),
        PublicAPI,
        Route("/Accounts/AccountProductType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountProductTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account product type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountProductType.View"),
        PublicAPI,
        Route("/Accounts/AccountProductType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountProductTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create account product type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountProductType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountProductType/Create", "POST", Priority = 1,
            Summary = "Use to create a new account product type.")]
    public partial class CreateAccountProductType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert account product type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Accounts/AccountProductType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing account product type (as needed).")]
    public partial class UpsertAccountProductType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update account product type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountProductType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountProductType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing account product type.")]
    public partial class UpdateAccountProductType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate account product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountProductType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountProductType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account product type from the system [Soft-Delete]")]
    public partial class DeactivateAccountProductTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate account product type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountProductType.Deactivate"),
        PublicAPI,
        Route("/Accounts/AccountProductType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account product type from the system [Soft-Delete]")]
    public partial class DeactivateAccountProductTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountProductType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountProductType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account product type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountProductTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account product type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountProductType.Reactivate"),
        PublicAPI,
        Route("/Accounts/AccountProductType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account product type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountProductTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account product type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountProductType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountProductType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific account product type from the system [Hard-Delete]")]
    public partial class DeleteAccountProductTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account product type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountProductType.Delete"),
        PublicAPI,
        Route("/Accounts/AccountProductType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific account product type from the system [Hard-Delete]")]
    public partial class DeleteAccountProductTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear account product type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountProductType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all account product type calls.")]
    public class ClearAccountProductTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AccountProductTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAccountProductTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountProductTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, AccountProductTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AccountProductTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountProductTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAccountProductTypesForConnect request)
        {
            return await Workflows.AccountProductTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountProductTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountProductTypesDigest request)
        {
            return await Workflows.AccountProductTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAccountProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountProductTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AccountProductTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountProductTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AccountProductTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountProductTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountProductTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.AccountProductTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountProductTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountProductTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.AccountProductTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAccountProductTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountProductTypeExistsByID request)
        {
            return await Workflows.AccountProductTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountProductTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountProductTypeExistsByKey request)
        {
            return await Workflows.AccountProductTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountProductTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountProductTypeExistsByName request)
        {
            return await Workflows.AccountProductTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountProductTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountProductTypeExistsByDisplayName request)
        {
            return await Workflows.AccountProductTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAccountProductType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAccountProductType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountProductTypeDataAsync,
                    () => Workflows.AccountProductTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAccountProductType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAccountProductType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountProductTypeDataAsync,
                    () => Workflows.AccountProductTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAccountProductType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAccountProductType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountProductTypeDataAsync,
                    () => Workflows.AccountProductTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAccountProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountProductTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountProductTypeDataAsync,
                    () => Workflows.AccountProductTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAccountProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountProductTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountProductTypeDataAsync,
                    () => Workflows.AccountProductTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAccountProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountProductTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountProductTypeDataAsync,
                    () => Workflows.AccountProductTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAccountProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountProductTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountProductTypeDataAsync,
                    () => Workflows.AccountProductTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAccountProductTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountProductTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountProductTypeDataAsync,
                    () => Workflows.AccountProductTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAccountProductTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountProductTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountProductTypeDataAsync,
                    () => Workflows.AccountProductTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAccountProductTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAccountProductTypeCache request)
        {
            await ClearCachedAccountProductTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAccountProductTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAccountProductTypes>(string.Empty),
                    UrnId.Create<GetAccountProductTypeByID>(string.Empty),
                    UrnId.Create<GetAccountProductTypeByKey>(string.Empty),
                    UrnId.Create<GetAccountProductTypeByName>(string.Empty),
                    UrnId.Create<CheckAccountProductTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckAccountProductTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckAccountProductTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckAccountProductTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AccountProductTypeService : AccountProductTypeServiceBase { }
}
