// <autogenerated>
// <copyright file="SettingTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the setting type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of setting types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{SettingTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/SettingTypes", "GET", Priority = 1,
            Summary = "Use to get a list of setting types")]
    public partial class GetSettingTypes : TypeSearchModel, IReturn<SettingTypePagedResults> { }

    /// <summary>A ServiceStack Route to get setting types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Structure.SettingType.View"),
        PublicAPI,
        Route("/Structure/SettingTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all setting types")]
    public partial class GetSettingTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all setting types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Structure.SettingType.View"),
        PublicAPI,
        Route("/Structure/SettingTypesDigest", "GET",
            Summary = "Use to get a hash representing each setting types")]
    public partial class GetSettingTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get setting type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/SettingType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific setting type")]
    public partial class GetSettingTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get setting type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Structure/SettingType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific setting type by the custom key")]
    public partial class GetSettingTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get setting type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Structure/SettingType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific setting type by the name")]
    public partial class GetSettingTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get setting type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Structure/SettingType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific setting type by the name")]
    public partial class GetSettingTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check setting type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.SettingType.View"),
        PublicAPI,
        Route("/Structure/SettingType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSettingTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check setting type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.SettingType.View"),
        PublicAPI,
        Route("/Structure/SettingType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSettingTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check setting type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.SettingType.View"),
        PublicAPI,
        Route("/Structure/SettingType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSettingTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check setting type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.SettingType.View"),
        PublicAPI,
        Route("/Structure/SettingType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSettingTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create setting type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.SettingType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/SettingType/Create", "POST", Priority = 1,
            Summary = "Use to create a new setting type.")]
    public partial class CreateSettingType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert setting type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Structure/SettingType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing setting type (as needed).")]
    public partial class UpsertSettingType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update setting type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.SettingType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/SettingType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing setting type.")]
    public partial class UpdateSettingType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate setting type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.SettingType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/SettingType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific setting type from the system [Soft-Delete]")]
    public partial class DeactivateSettingTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate setting type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.SettingType.Deactivate"),
        PublicAPI,
        Route("/Structure/SettingType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific setting type from the system [Soft-Delete]")]
    public partial class DeactivateSettingTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate setting type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.SettingType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/SettingType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific setting type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSettingTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate setting type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.SettingType.Reactivate"),
        PublicAPI,
        Route("/Structure/SettingType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific setting type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSettingTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete setting type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.SettingType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/SettingType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific setting type from the system [Hard-Delete]")]
    public partial class DeleteSettingTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete setting type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.SettingType.Delete"),
        PublicAPI,
        Route("/Structure/SettingType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific setting type from the system [Hard-Delete]")]
    public partial class DeleteSettingTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear setting type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/SettingType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all setting type calls.")]
    public class ClearSettingTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SettingTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSettingTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSettingTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, SettingTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SettingTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSettingTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSettingTypesForConnect request)
        {
            return await Workflows.SettingTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSettingTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSettingTypesDigest request)
        {
            return await Workflows.SettingTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSettingTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSettingTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SettingTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSettingTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSettingTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SettingTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSettingTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSettingTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SettingTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSettingTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSettingTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.SettingTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSettingTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSettingTypeExistsByID request)
        {
            return await Workflows.SettingTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSettingTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSettingTypeExistsByKey request)
        {
            return await Workflows.SettingTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSettingTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSettingTypeExistsByName request)
        {
            return await Workflows.SettingTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSettingTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSettingTypeExistsByDisplayName request)
        {
            return await Workflows.SettingTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSettingType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSettingType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingTypeDataAsync,
                    () => Workflows.SettingTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSettingType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSettingType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingTypeDataAsync,
                    () => Workflows.SettingTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSettingType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSettingType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingTypeDataAsync,
                    () => Workflows.SettingTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSettingTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSettingTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingTypeDataAsync,
                    () => Workflows.SettingTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSettingTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSettingTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingTypeDataAsync,
                    () => Workflows.SettingTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSettingTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSettingTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingTypeDataAsync,
                    () => Workflows.SettingTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSettingTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSettingTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingTypeDataAsync,
                    () => Workflows.SettingTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSettingTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSettingTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingTypeDataAsync,
                    () => Workflows.SettingTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSettingTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSettingTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSettingTypeDataAsync,
                    () => Workflows.SettingTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSettingTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSettingTypeCache request)
        {
            await ClearCachedSettingTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSettingTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSettingTypes>(string.Empty),
                    UrnId.Create<GetSettingTypeByID>(string.Empty),
                    UrnId.Create<GetSettingTypeByKey>(string.Empty),
                    UrnId.Create<GetSettingTypeByName>(string.Empty),
                    UrnId.Create<CheckSettingTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckSettingTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckSettingTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckSettingTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SettingTypeService : SettingTypeServiceBase { }
}
