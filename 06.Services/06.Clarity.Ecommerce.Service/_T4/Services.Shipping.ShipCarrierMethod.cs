// <autogenerated>
// <copyright file="ShipCarrierMethodService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the ship carrier method service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of ship carrier methods.</summary>
    /// <seealso cref="ShipCarrierMethodSearchModel"/>
    /// <seealso cref="IReturn{ShipCarrierMethodPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipCarrierMethods", "GET", Priority = 1,
            Summary = "Use to get a list of ship carrier methods")]
    public partial class GetShipCarrierMethods : ShipCarrierMethodSearchModel, IReturn<ShipCarrierMethodPagedResults> { }

    /// <summary>A ServiceStack Route to get ship carrier methods for connect.</summary>
    /// <seealso cref="ShipCarrierMethodSearchModel"/>
    /// <seealso cref="IReturn{List{ShipCarrierMethodModel}}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrierMethod.View"),
        PublicAPI,
        Route("/Shipping/ShipCarrierMethodsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all ship carrier methods")]
    public partial class GetShipCarrierMethodsForConnect : ShipCarrierMethodSearchModel, IReturn<List<ShipCarrierMethodModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all ship carrier methods.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrierMethod.View"),
        PublicAPI,
        Route("/Shipping/ShipCarrierMethodsDigest", "GET",
            Summary = "Use to get a hash representing each ship carrier methods")]
    public partial class GetShipCarrierMethodsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get ship carrier method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ShipCarrierMethodModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipCarrierMethod/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific ship carrier method")]
    public partial class GetShipCarrierMethodByID : ImplementsIDBase, IReturn<ShipCarrierMethodModel> { }

    /// <summary>A ServiceStack Route to get ship carrier method.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ShipCarrierMethodModel}"/>
    [PublicAPI,
        Route("/Shipping/ShipCarrierMethod/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific ship carrier method by the custom key")]
    public partial class GetShipCarrierMethodByKey : ImplementsKeyBase, IReturn<ShipCarrierMethodModel> { }

    /// <summary>A ServiceStack Route to get ship carrier method.</summary>
    /// <seealso cref="IReturn{ShipCarrierMethodModel}"/>
    [PublicAPI,
        Route("/Shipping/ShipCarrierMethod/Name", "GET", Priority = 1,
            Summary = "Use to get a specific ship carrier method by the name")]
    public partial class GetShipCarrierMethodByName : ImplementsNameBase, IReturn<ShipCarrierMethodModel> { }

    /// <summary>A ServiceStack Route to check ship carrier method exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrierMethod.View"),
        PublicAPI,
        Route("/Shipping/ShipCarrierMethod/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckShipCarrierMethodExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ship carrier method exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrierMethod.View"),
        PublicAPI,
        Route("/Shipping/ShipCarrierMethod/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckShipCarrierMethodExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ship carrier method exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrierMethod.View"),
        PublicAPI,
        Route("/Shipping/ShipCarrierMethod/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckShipCarrierMethodExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create ship carrier method.</summary>
    /// <seealso cref="ShipCarrierMethodModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrierMethod.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipCarrierMethod/Create", "POST", Priority = 1,
            Summary = "Use to create a new ship carrier method.")]
    public partial class CreateShipCarrierMethod : ShipCarrierMethodModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert ship carrier method.</summary>
    /// <seealso cref="ShipCarrierMethodModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shipping/ShipCarrierMethod/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing ship carrier method (as needed).")]
    public partial class UpsertShipCarrierMethod : ShipCarrierMethodModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update ship carrier method.</summary>
    /// <seealso cref="ShipCarrierMethodModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrierMethod.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipCarrierMethod/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing ship carrier method.")]
    public partial class UpdateShipCarrierMethod : ShipCarrierMethodModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate ship carrier method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrierMethod.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipCarrierMethod/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ship carrier method from the system [Soft-Delete]")]
    public partial class DeactivateShipCarrierMethodByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate ship carrier method by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrierMethod.Deactivate"),
        PublicAPI,
        Route("/Shipping/ShipCarrierMethod/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ship carrier method from the system [Soft-Delete]")]
    public partial class DeactivateShipCarrierMethodByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ship carrier method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrierMethod.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipCarrierMethod/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ship carrier method from the system [Restore from Soft-Delete]")]
    public partial class ReactivateShipCarrierMethodByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ship carrier method by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrierMethod.Reactivate"),
        PublicAPI,
        Route("/Shipping/ShipCarrierMethod/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ship carrier method from the system [Restore from Soft-Delete]")]
    public partial class ReactivateShipCarrierMethodByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ship carrier method.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrierMethod.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipCarrierMethod/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific ship carrier method from the system [Hard-Delete]")]
    public partial class DeleteShipCarrierMethodByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ship carrier method by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipCarrierMethod.Delete"),
        PublicAPI,
        Route("/Shipping/ShipCarrierMethod/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific ship carrier method from the system [Hard-Delete]")]
    public partial class DeleteShipCarrierMethodByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear ship carrier method cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipCarrierMethod/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all ship carrier method calls.")]
    public class ClearShipCarrierMethodCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ShipCarrierMethodServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetShipCarrierMethods"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipCarrierMethods request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IShipCarrierMethodModel, ShipCarrierMethodModel, IShipCarrierMethodSearchModel, ShipCarrierMethodPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ShipCarrierMethods)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipCarrierMethodsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetShipCarrierMethodsForConnect request)
        {
            return await Workflows.ShipCarrierMethods.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipCarrierMethodsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipCarrierMethodsDigest request)
        {
            return await Workflows.ShipCarrierMethods.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetShipCarrierMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipCarrierMethodByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ShipCarrierMethods, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipCarrierMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipCarrierMethodByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ShipCarrierMethods, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipCarrierMethodByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipCarrierMethodByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.ShipCarrierMethods, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckShipCarrierMethodExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipCarrierMethodExistsByID request)
        {
            return await Workflows.ShipCarrierMethods.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckShipCarrierMethodExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipCarrierMethodExistsByKey request)
        {
            return await Workflows.ShipCarrierMethods.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckShipCarrierMethodExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipCarrierMethodExistsByName request)
        {
            return await Workflows.ShipCarrierMethods.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertShipCarrierMethod"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertShipCarrierMethod request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierMethodDataAsync,
                    () => Workflows.ShipCarrierMethods.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateShipCarrierMethod"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateShipCarrierMethod request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierMethodDataAsync,
                    () => Workflows.ShipCarrierMethods.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateShipCarrierMethod"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateShipCarrierMethod request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierMethodDataAsync,
                    () => Workflows.ShipCarrierMethods.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateShipCarrierMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateShipCarrierMethodByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierMethodDataAsync,
                    () => Workflows.ShipCarrierMethods.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateShipCarrierMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateShipCarrierMethodByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierMethodDataAsync,
                    () => Workflows.ShipCarrierMethods.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateShipCarrierMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateShipCarrierMethodByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierMethodDataAsync,
                    () => Workflows.ShipCarrierMethods.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateShipCarrierMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateShipCarrierMethodByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierMethodDataAsync,
                    () => Workflows.ShipCarrierMethods.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteShipCarrierMethodByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteShipCarrierMethodByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierMethodDataAsync,
                    () => Workflows.ShipCarrierMethods.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteShipCarrierMethodByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteShipCarrierMethodByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipCarrierMethodDataAsync,
                    () => Workflows.ShipCarrierMethods.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearShipCarrierMethodCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearShipCarrierMethodCache request)
        {
            await ClearCachedShipCarrierMethodDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedShipCarrierMethodDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetShipCarrierMethods>(string.Empty),
                    UrnId.Create<GetShipCarrierMethodByID>(string.Empty),
                    UrnId.Create<GetShipCarrierMethodByKey>(string.Empty),
                    UrnId.Create<GetShipCarrierMethodByName>(string.Empty),
                    UrnId.Create<CheckShipCarrierMethodExistsByID>(string.Empty),
                    UrnId.Create<CheckShipCarrierMethodExistsByKey>(string.Empty),
                    UrnId.Create<CheckShipCarrierMethodExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ShipCarrierMethodService : ShipCarrierMethodServiceBase { }
}
