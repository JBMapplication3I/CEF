// <autogenerated>
// <copyright file="AppliedPurchaseOrderItemDiscountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the applied purchase order item discount service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of applied purchase order item discounts.</summary>
    /// <seealso cref="AppliedPurchaseOrderItemDiscountSearchModel"/>
    /// <seealso cref="IReturn{AppliedPurchaseOrderItemDiscountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedPurchaseOrderItemDiscounts", "GET", Priority = 1,
            Summary = "Use to get a list of applied purchase order item discounts")]
    public partial class GetAppliedPurchaseOrderItemDiscounts : AppliedPurchaseOrderItemDiscountSearchModel, IReturn<AppliedPurchaseOrderItemDiscountPagedResults> { }

    /// <summary>A ServiceStack Route to get applied purchase order item discounts for connect.</summary>
    /// <seealso cref="AppliedPurchaseOrderItemDiscountSearchModel"/>
    /// <seealso cref="IReturn{List{AppliedPurchaseOrderItemDiscountModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderItemDiscountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all applied purchase order item discounts")]
    public partial class GetAppliedPurchaseOrderItemDiscountsForConnect : AppliedPurchaseOrderItemDiscountSearchModel, IReturn<List<AppliedPurchaseOrderItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all applied purchase order item discounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderItemDiscountsDigest", "GET",
            Summary = "Use to get a hash representing each applied purchase order item discounts")]
    public partial class GetAppliedPurchaseOrderItemDiscountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get applied purchase order item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AppliedPurchaseOrderItemDiscountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedPurchaseOrderItemDiscount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific applied purchase order item discount")]
    public partial class GetAppliedPurchaseOrderItemDiscountByID : ImplementsIDBase, IReturn<AppliedPurchaseOrderItemDiscountModel> { }

    /// <summary>A ServiceStack Route to get applied purchase order item discount.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AppliedPurchaseOrderItemDiscountModel}"/>
    [PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderItemDiscount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific applied purchase order item discount by the custom key")]
    public partial class GetAppliedPurchaseOrderItemDiscountByKey : ImplementsKeyBase, IReturn<AppliedPurchaseOrderItemDiscountModel> { }

    /// <summary>A ServiceStack Route to check applied purchase order item discount exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderItemDiscount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedPurchaseOrderItemDiscountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check applied purchase order item discount exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderItemDiscount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedPurchaseOrderItemDiscountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create applied purchase order item discount.</summary>
    /// <seealso cref="AppliedPurchaseOrderItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderItemDiscount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderItemDiscount/Create", "POST", Priority = 1,
            Summary = "Use to create a new applied purchase order item discount.")]
    public partial class CreateAppliedPurchaseOrderItemDiscount : AppliedPurchaseOrderItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert applied purchase order item discount.</summary>
    /// <seealso cref="AppliedPurchaseOrderItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderItemDiscount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing applied purchase order item discount (as needed).")]
    public partial class UpsertAppliedPurchaseOrderItemDiscount : AppliedPurchaseOrderItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update applied purchase order item discount.</summary>
    /// <seealso cref="AppliedPurchaseOrderItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderItemDiscount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderItemDiscount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing applied purchase order item discount.")]
    public partial class UpdateAppliedPurchaseOrderItemDiscount : AppliedPurchaseOrderItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate applied purchase order item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderItemDiscount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderItemDiscount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied purchase order item discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedPurchaseOrderItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate applied purchase order item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderItemDiscount.Deactivate"),
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderItemDiscount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied purchase order item discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedPurchaseOrderItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied purchase order item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderItemDiscount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderItemDiscount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied purchase order item discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedPurchaseOrderItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied purchase order item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderItemDiscount.Reactivate"),
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderItemDiscount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied purchase order item discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedPurchaseOrderItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied purchase order item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderItemDiscount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderItemDiscount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific applied purchase order item discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedPurchaseOrderItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied purchase order item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedPurchaseOrderItemDiscount.Delete"),
        PublicAPI,
        Route("/Discounts/AppliedPurchaseOrderItemDiscount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific applied purchase order item discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedPurchaseOrderItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear applied purchase order item discount cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedPurchaseOrderItemDiscount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all applied purchase order item discount calls.")]
    public class ClearAppliedPurchaseOrderItemDiscountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AppliedPurchaseOrderItemDiscountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAppliedPurchaseOrderItemDiscounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedPurchaseOrderItemDiscounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAppliedPurchaseOrderItemDiscountModel, AppliedPurchaseOrderItemDiscountModel, IAppliedPurchaseOrderItemDiscountSearchModel, AppliedPurchaseOrderItemDiscountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AppliedPurchaseOrderItemDiscounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedPurchaseOrderItemDiscountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAppliedPurchaseOrderItemDiscountsForConnect request)
        {
            return await Workflows.AppliedPurchaseOrderItemDiscounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedPurchaseOrderItemDiscountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedPurchaseOrderItemDiscountsDigest request)
        {
            return await Workflows.AppliedPurchaseOrderItemDiscounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAppliedPurchaseOrderItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedPurchaseOrderItemDiscountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AppliedPurchaseOrderItemDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedPurchaseOrderItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedPurchaseOrderItemDiscountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AppliedPurchaseOrderItemDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAppliedPurchaseOrderItemDiscountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedPurchaseOrderItemDiscountExistsByID request)
        {
            return await Workflows.AppliedPurchaseOrderItemDiscounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppliedPurchaseOrderItemDiscountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedPurchaseOrderItemDiscountExistsByKey request)
        {
            return await Workflows.AppliedPurchaseOrderItemDiscounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAppliedPurchaseOrderItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAppliedPurchaseOrderItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderItemDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderItemDiscounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAppliedPurchaseOrderItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAppliedPurchaseOrderItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderItemDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderItemDiscounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAppliedPurchaseOrderItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAppliedPurchaseOrderItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderItemDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderItemDiscounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAppliedPurchaseOrderItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedPurchaseOrderItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderItemDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderItemDiscounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAppliedPurchaseOrderItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedPurchaseOrderItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderItemDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderItemDiscounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAppliedPurchaseOrderItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedPurchaseOrderItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderItemDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderItemDiscounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAppliedPurchaseOrderItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedPurchaseOrderItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderItemDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderItemDiscounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAppliedPurchaseOrderItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedPurchaseOrderItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderItemDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderItemDiscounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAppliedPurchaseOrderItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedPurchaseOrderItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedPurchaseOrderItemDiscountDataAsync,
                    () => Workflows.AppliedPurchaseOrderItemDiscounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAppliedPurchaseOrderItemDiscountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAppliedPurchaseOrderItemDiscountCache request)
        {
            await ClearCachedAppliedPurchaseOrderItemDiscountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAppliedPurchaseOrderItemDiscountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAppliedPurchaseOrderItemDiscounts>(string.Empty),
                    UrnId.Create<GetAppliedPurchaseOrderItemDiscountByID>(string.Empty),
                    UrnId.Create<GetAppliedPurchaseOrderItemDiscountByKey>(string.Empty),
                    UrnId.Create<CheckAppliedPurchaseOrderItemDiscountExistsByID>(string.Empty),
                    UrnId.Create<CheckAppliedPurchaseOrderItemDiscountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AppliedPurchaseOrderItemDiscountService : AppliedPurchaseOrderItemDiscountServiceBase { }
}
