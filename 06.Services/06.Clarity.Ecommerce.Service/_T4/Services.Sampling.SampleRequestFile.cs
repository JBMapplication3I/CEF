// <autogenerated>
// <copyright file="SampleRequestFileService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sample request file service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sample request files.</summary>
    /// <seealso cref="SampleRequestFileSearchModel"/>
    /// <seealso cref="IReturn{SampleRequestFilePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestFiles", "GET", Priority = 1,
            Summary = "Use to get a list of sample request files")]
    public partial class GetSampleRequestFiles : SampleRequestFileSearchModel, IReturn<SampleRequestFilePagedResults> { }

    /// <summary>A ServiceStack Route to get sample request files for connect.</summary>
    /// <seealso cref="SampleRequestFileSearchModel"/>
    /// <seealso cref="IReturn{List{SampleRequestFileModel}}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestFile.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestFilesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sample request files")]
    public partial class GetSampleRequestFilesForConnect : SampleRequestFileSearchModel, IReturn<List<SampleRequestFileModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sample request files.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestFile.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestFilesDigest", "GET",
            Summary = "Use to get a hash representing each sample request files")]
    public partial class GetSampleRequestFilesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sample request file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SampleRequestFileModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestFile/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sample request file")]
    public partial class GetSampleRequestFileByID : ImplementsIDBase, IReturn<SampleRequestFileModel> { }

    /// <summary>A ServiceStack Route to get sample request file.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SampleRequestFileModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequestFile/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sample request file by the custom key")]
    public partial class GetSampleRequestFileByKey : ImplementsKeyBase, IReturn<SampleRequestFileModel> { }

    /// <summary>A ServiceStack Route to get sample request file.</summary>
    /// <seealso cref="IReturn{SampleRequestFileModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequestFile/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sample request file by the name")]
    public partial class GetSampleRequestFileByName : ImplementsNameBase, IReturn<SampleRequestFileModel> { }

    /// <summary>A ServiceStack Route to get sample request file.</summary>
    /// <seealso cref="IReturn{SampleRequestFileModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequestFile/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific sample request file by the SEO URL")]
    public partial class GetSampleRequestFileBySeoUrl : ImplementsSeoUrlBase, IReturn<SampleRequestFileModel> { }

    /// <summary>A ServiceStack Route to check sample request file exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestFile.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestFile/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestFileExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request file exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestFile.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestFile/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestFileExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request file exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestFile.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestFile/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestFileExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request file exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestFile.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestFile/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestFileExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sample request file.</summary>
    /// <seealso cref="SampleRequestFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestFile.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestFile/Create", "POST", Priority = 1,
            Summary = "Use to create a new sample request file.")]
    public partial class CreateSampleRequestFile : SampleRequestFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sample request file.</summary>
    /// <seealso cref="SampleRequestFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Sampling/SampleRequestFile/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sample request file (as needed).")]
    public partial class UpsertSampleRequestFile : SampleRequestFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sample request file.</summary>
    /// <seealso cref="SampleRequestFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestFile.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestFile/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sample request file.")]
    public partial class UpdateSampleRequestFile : SampleRequestFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sample request file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestFile.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestFile/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sample request file from the system [Soft-Delete]")]
    public partial class DeactivateSampleRequestFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sample request file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestFile.Deactivate"),
        PublicAPI,
        Route("/Sampling/SampleRequestFile/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sample request file from the system [Soft-Delete]")]
    public partial class DeactivateSampleRequestFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sample request file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestFile.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestFile/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sample request file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSampleRequestFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sample request file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestFile.Reactivate"),
        PublicAPI,
        Route("/Sampling/SampleRequestFile/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sample request file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSampleRequestFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sample request file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestFile.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequestFile/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sample request file from the system [Hard-Delete]")]
    public partial class DeleteSampleRequestFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sample request file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequestFile.Delete"),
        PublicAPI,
        Route("/Sampling/SampleRequestFile/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sample request file from the system [Hard-Delete]")]
    public partial class DeleteSampleRequestFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sample request file cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequestFile/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sample request file calls.")]
    public class ClearSampleRequestFileCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SampleRequestFileServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSampleRequestFiles"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestFiles request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISampleRequestFileModel, SampleRequestFileModel, ISampleRequestFileSearchModel, SampleRequestFilePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SampleRequestFiles)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestFilesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSampleRequestFilesForConnect request)
        {
            return await Workflows.SampleRequestFiles.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestFilesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestFilesDigest request)
        {
            return await Workflows.SampleRequestFiles.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSampleRequestFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestFileByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SampleRequestFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestFileByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SampleRequestFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestFileByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestFileByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SampleRequestFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestFileBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestFileBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.SampleRequestFiles, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSampleRequestFileExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestFileExistsByID request)
        {
            return await Workflows.SampleRequestFiles.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestFileExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestFileExistsByKey request)
        {
            return await Workflows.SampleRequestFiles.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestFileExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestFileExistsByName request)
        {
            return await Workflows.SampleRequestFiles.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestFileExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestFileExistsBySeoUrl request)
        {
            return await Workflows.SampleRequestFiles.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSampleRequestFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSampleRequestFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestFileDataAsync,
                    () => Workflows.SampleRequestFiles.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSampleRequestFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSampleRequestFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestFileDataAsync,
                    () => Workflows.SampleRequestFiles.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSampleRequestFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSampleRequestFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestFileDataAsync,
                    () => Workflows.SampleRequestFiles.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSampleRequestFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSampleRequestFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestFileDataAsync,
                    () => Workflows.SampleRequestFiles.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSampleRequestFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSampleRequestFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestFileDataAsync,
                    () => Workflows.SampleRequestFiles.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSampleRequestFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSampleRequestFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestFileDataAsync,
                    () => Workflows.SampleRequestFiles.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSampleRequestFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSampleRequestFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestFileDataAsync,
                    () => Workflows.SampleRequestFiles.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSampleRequestFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSampleRequestFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestFileDataAsync,
                    () => Workflows.SampleRequestFiles.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSampleRequestFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSampleRequestFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestFileDataAsync,
                    () => Workflows.SampleRequestFiles.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSampleRequestFileCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSampleRequestFileCache request)
        {
            await ClearCachedSampleRequestFileDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSampleRequestFileDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSampleRequestFiles>(string.Empty),
                    UrnId.Create<GetSampleRequestFileByID>(string.Empty),
                    UrnId.Create<GetSampleRequestFileByKey>(string.Empty),
                    UrnId.Create<GetSampleRequestFileByName>(string.Empty),
                    UrnId.Create<GetSampleRequestFileBySeoUrl>(string.Empty),
                    UrnId.Create<CheckSampleRequestFileExistsByID>(string.Empty),
                    UrnId.Create<CheckSampleRequestFileExistsByKey>(string.Empty),
                    UrnId.Create<CheckSampleRequestFileExistsByName>(string.Empty),
                    UrnId.Create<CheckSampleRequestFileExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SampleRequestFileService : SampleRequestFileServiceBase { }
}
