// <autogenerated>
// <copyright file="UiTranslationService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the ui translation service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of ui translations.</summary>
    /// <seealso cref="UiTranslationSearchModel"/>
    /// <seealso cref="IReturn{UiTranslationPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/UiTranslations", "GET", Priority = 1,
            Summary = "Use to get a list of ui translations")]
    public partial class GetUiTranslations : UiTranslationSearchModel, IReturn<UiTranslationPagedResults> { }

    /// <summary>A ServiceStack Route to get ui translations for connect.</summary>
    /// <seealso cref="UiTranslationSearchModel"/>
    /// <seealso cref="IReturn{List{UiTranslationModel}}"/>
    [Authenticate, RequiredPermission("Globalization.UiTranslation.View"),
        PublicAPI,
        Route("/Globalization/UiTranslationsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all ui translations")]
    public partial class GetUiTranslationsForConnect : UiTranslationSearchModel, IReturn<List<UiTranslationModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all ui translations.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Globalization.UiTranslation.View"),
        PublicAPI,
        Route("/Globalization/UiTranslationsDigest", "GET",
            Summary = "Use to get a hash representing each ui translations")]
    public partial class GetUiTranslationsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get ui translation.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{UiTranslationModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/UiTranslation/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific ui translation")]
    public partial class GetUiTranslationByID : ImplementsIDBase, IReturn<UiTranslationModel> { }

    /// <summary>A ServiceStack Route to get ui translation.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{UiTranslationModel}"/>
    [PublicAPI,
        Route("/Globalization/UiTranslation/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific ui translation by the custom key")]
    public partial class GetUiTranslationByKey : ImplementsKeyBase, IReturn<UiTranslationModel> { }

    /// <summary>A ServiceStack Route to check ui translation exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Globalization.UiTranslation.View"),
        PublicAPI,
        Route("/Globalization/UiTranslation/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckUiTranslationExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ui translation exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Globalization.UiTranslation.View"),
        PublicAPI,
        Route("/Globalization/UiTranslation/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckUiTranslationExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create ui translation.</summary>
    /// <seealso cref="UiTranslationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Globalization.UiTranslation.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/UiTranslation/Create", "POST", Priority = 1,
            Summary = "Use to create a new ui translation.")]
    public partial class CreateUiTranslation : UiTranslationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert ui translation.</summary>
    /// <seealso cref="UiTranslationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Globalization/UiTranslation/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing ui translation (as needed).")]
    public partial class UpsertUiTranslation : UiTranslationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update ui translation.</summary>
    /// <seealso cref="UiTranslationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Globalization.UiTranslation.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/UiTranslation/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing ui translation.")]
    public partial class UpdateUiTranslation : UiTranslationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate ui translation.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.UiTranslation.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/UiTranslation/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ui translation from the system [Soft-Delete]")]
    public partial class DeactivateUiTranslationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate ui translation by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.UiTranslation.Deactivate"),
        PublicAPI,
        Route("/Globalization/UiTranslation/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ui translation from the system [Soft-Delete]")]
    public partial class DeactivateUiTranslationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ui translation.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.UiTranslation.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/UiTranslation/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ui translation from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUiTranslationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ui translation by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.UiTranslation.Reactivate"),
        PublicAPI,
        Route("/Globalization/UiTranslation/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ui translation from the system [Restore from Soft-Delete]")]
    public partial class ReactivateUiTranslationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ui translation.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.UiTranslation.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Globalization/UiTranslation/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific ui translation from the system [Hard-Delete]")]
    public partial class DeleteUiTranslationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ui translation by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Globalization.UiTranslation.Delete"),
        PublicAPI,
        Route("/Globalization/UiTranslation/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific ui translation from the system [Hard-Delete]")]
    public partial class DeleteUiTranslationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear ui translation cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Globalization/UiTranslation/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all ui translation calls.")]
    public class ClearUiTranslationCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class UiTranslationServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetUiTranslations"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUiTranslations request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IUiTranslationModel, UiTranslationModel, IUiTranslationSearchModel, UiTranslationPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.UiTranslations)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUiTranslationsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetUiTranslationsForConnect request)
        {
            return await Workflows.UiTranslations.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUiTranslationsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUiTranslationsDigest request)
        {
            return await Workflows.UiTranslations.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetUiTranslationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUiTranslationByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.UiTranslations, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetUiTranslationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetUiTranslationByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.UiTranslations, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckUiTranslationExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUiTranslationExistsByID request)
        {
            return await Workflows.UiTranslations.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckUiTranslationExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckUiTranslationExistsByKey request)
        {
            return await Workflows.UiTranslations.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertUiTranslation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertUiTranslation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiTranslationDataAsync,
                    () => Workflows.UiTranslations.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateUiTranslation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateUiTranslation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiTranslationDataAsync,
                    () => Workflows.UiTranslations.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateUiTranslation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateUiTranslation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiTranslationDataAsync,
                    () => Workflows.UiTranslations.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateUiTranslationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUiTranslationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiTranslationDataAsync,
                    () => Workflows.UiTranslations.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateUiTranslationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateUiTranslationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiTranslationDataAsync,
                    () => Workflows.UiTranslations.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateUiTranslationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUiTranslationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiTranslationDataAsync,
                    () => Workflows.UiTranslations.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateUiTranslationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateUiTranslationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiTranslationDataAsync,
                    () => Workflows.UiTranslations.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteUiTranslationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUiTranslationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiTranslationDataAsync,
                    () => Workflows.UiTranslations.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteUiTranslationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteUiTranslationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedUiTranslationDataAsync,
                    () => Workflows.UiTranslations.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearUiTranslationCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearUiTranslationCache request)
        {
            await ClearCachedUiTranslationDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedUiTranslationDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetUiTranslations>(string.Empty),
                    UrnId.Create<GetUiTranslationByID>(string.Empty),
                    UrnId.Create<GetUiTranslationByKey>(string.Empty),
                    UrnId.Create<CheckUiTranslationExistsByID>(string.Empty),
                    UrnId.Create<CheckUiTranslationExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class UiTranslationService : UiTranslationServiceBase { }
}
