// <autogenerated>
// <copyright file="QuestionOptionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the question option service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of question options.</summary>
    /// <seealso cref="QuestionOptionSearchModel"/>
    /// <seealso cref="IReturn{QuestionOptionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Questionnaire/QuestionOptions", "GET", Priority = 1,
            Summary = "Use to get a list of question options")]
    public partial class GetQuestionOptions : QuestionOptionSearchModel, IReturn<QuestionOptionPagedResults> { }

    /// <summary>A ServiceStack Route to get question options for connect.</summary>
    /// <seealso cref="QuestionOptionSearchModel"/>
    /// <seealso cref="IReturn{List{QuestionOptionModel}}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionOption.View"),
        PublicAPI,
        Route("/Questionnaire/QuestionOptionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all question options")]
    public partial class GetQuestionOptionsForConnect : QuestionOptionSearchModel, IReturn<List<QuestionOptionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all question options.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionOption.View"),
        PublicAPI,
        Route("/Questionnaire/QuestionOptionsDigest", "GET",
            Summary = "Use to get a hash representing each question options")]
    public partial class GetQuestionOptionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get question option.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{QuestionOptionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Questionnaire/QuestionOption/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific question option")]
    public partial class GetQuestionOptionByID : ImplementsIDBase, IReturn<QuestionOptionModel> { }

    /// <summary>A ServiceStack Route to get question option.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{QuestionOptionModel}"/>
    [PublicAPI,
        Route("/Questionnaire/QuestionOption/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific question option by the custom key")]
    public partial class GetQuestionOptionByKey : ImplementsKeyBase, IReturn<QuestionOptionModel> { }

    /// <summary>A ServiceStack Route to check question option exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionOption.View"),
        PublicAPI,
        Route("/Questionnaire/QuestionOption/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckQuestionOptionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check question option exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionOption.View"),
        PublicAPI,
        Route("/Questionnaire/QuestionOption/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckQuestionOptionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create question option.</summary>
    /// <seealso cref="QuestionOptionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionOption.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/QuestionOption/Create", "POST", Priority = 1,
            Summary = "Use to create a new question option.")]
    public partial class CreateQuestionOption : QuestionOptionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert question option.</summary>
    /// <seealso cref="QuestionOptionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Questionnaire/QuestionOption/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing question option (as needed).")]
    public partial class UpsertQuestionOption : QuestionOptionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update question option.</summary>
    /// <seealso cref="QuestionOptionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionOption.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/QuestionOption/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing question option.")]
    public partial class UpdateQuestionOption : QuestionOptionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate question option.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionOption.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/QuestionOption/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific question option from the system [Soft-Delete]")]
    public partial class DeactivateQuestionOptionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate question option by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionOption.Deactivate"),
        PublicAPI,
        Route("/Questionnaire/QuestionOption/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific question option from the system [Soft-Delete]")]
    public partial class DeactivateQuestionOptionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate question option.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionOption.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/QuestionOption/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific question option from the system [Restore from Soft-Delete]")]
    public partial class ReactivateQuestionOptionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate question option by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionOption.Reactivate"),
        PublicAPI,
        Route("/Questionnaire/QuestionOption/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific question option from the system [Restore from Soft-Delete]")]
    public partial class ReactivateQuestionOptionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete question option.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionOption.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Questionnaire/QuestionOption/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific question option from the system [Hard-Delete]")]
    public partial class DeleteQuestionOptionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete question option by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Questionnaire.QuestionOption.Delete"),
        PublicAPI,
        Route("/Questionnaire/QuestionOption/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific question option from the system [Hard-Delete]")]
    public partial class DeleteQuestionOptionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear question option cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Questionnaire/QuestionOption/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all question option calls.")]
    public class ClearQuestionOptionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class QuestionOptionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetQuestionOptions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetQuestionOptions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IQuestionOptionModel, QuestionOptionModel, IQuestionOptionSearchModel, QuestionOptionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.QuestionOptions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetQuestionOptionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetQuestionOptionsForConnect request)
        {
            return await Workflows.QuestionOptions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetQuestionOptionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetQuestionOptionsDigest request)
        {
            return await Workflows.QuestionOptions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetQuestionOptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetQuestionOptionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.QuestionOptions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetQuestionOptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetQuestionOptionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.QuestionOptions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckQuestionOptionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckQuestionOptionExistsByID request)
        {
            return await Workflows.QuestionOptions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckQuestionOptionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckQuestionOptionExistsByKey request)
        {
            return await Workflows.QuestionOptions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertQuestionOption"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertQuestionOption request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionOptionDataAsync,
                    () => Workflows.QuestionOptions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateQuestionOption"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateQuestionOption request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionOptionDataAsync,
                    () => Workflows.QuestionOptions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateQuestionOption"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateQuestionOption request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionOptionDataAsync,
                    () => Workflows.QuestionOptions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateQuestionOptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateQuestionOptionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionOptionDataAsync,
                    () => Workflows.QuestionOptions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateQuestionOptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateQuestionOptionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionOptionDataAsync,
                    () => Workflows.QuestionOptions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateQuestionOptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateQuestionOptionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionOptionDataAsync,
                    () => Workflows.QuestionOptions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateQuestionOptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateQuestionOptionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionOptionDataAsync,
                    () => Workflows.QuestionOptions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteQuestionOptionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteQuestionOptionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionOptionDataAsync,
                    () => Workflows.QuestionOptions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteQuestionOptionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteQuestionOptionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedQuestionOptionDataAsync,
                    () => Workflows.QuestionOptions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearQuestionOptionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearQuestionOptionCache request)
        {
            await ClearCachedQuestionOptionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedQuestionOptionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetQuestionOptions>(string.Empty),
                    UrnId.Create<GetQuestionOptionByID>(string.Empty),
                    UrnId.Create<GetQuestionOptionByKey>(string.Empty),
                    UrnId.Create<CheckQuestionOptionExistsByID>(string.Empty),
                    UrnId.Create<CheckQuestionOptionExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class QuestionOptionService : QuestionOptionServiceBase { }
}
