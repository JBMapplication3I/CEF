// <autogenerated>
// <copyright file="InventoryLocationService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the inventory location service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of inventory locations.</summary>
    /// <seealso cref="InventoryLocationSearchModel"/>
    /// <seealso cref="IReturn{InventoryLocationPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Inventory/InventoryLocations", "GET", Priority = 1,
            Summary = "Use to get a list of inventory locations")]
    public partial class GetInventoryLocations : InventoryLocationSearchModel, IReturn<InventoryLocationPagedResults> { }

    /// <summary>A ServiceStack Route to get inventory locations for connect.</summary>
    /// <seealso cref="InventoryLocationSearchModel"/>
    /// <seealso cref="IReturn{List{InventoryLocationModel}}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocation.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all inventory locations")]
    public partial class GetInventoryLocationsForConnect : InventoryLocationSearchModel, IReturn<List<InventoryLocationModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all inventory locations.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocation.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocationsDigest", "GET",
            Summary = "Use to get a hash representing each inventory locations")]
    public partial class GetInventoryLocationsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{InventoryLocationModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Inventory/InventoryLocation/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific inventory location")]
    public partial class GetInventoryLocationByID : ImplementsIDBase, IReturn<InventoryLocationModel> { }

    /// <summary>A ServiceStack Route to get inventory location.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{InventoryLocationModel}"/>
    [PublicAPI,
        Route("/Inventory/InventoryLocation/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific inventory location by the custom key")]
    public partial class GetInventoryLocationByKey : ImplementsKeyBase, IReturn<InventoryLocationModel> { }

    /// <summary>A ServiceStack Route to get inventory location.</summary>
    /// <seealso cref="IReturn{InventoryLocationModel}"/>
    [PublicAPI,
        Route("/Inventory/InventoryLocation/Name", "GET", Priority = 1,
            Summary = "Use to get a specific inventory location by the name")]
    public partial class GetInventoryLocationByName : ImplementsNameBase, IReturn<InventoryLocationModel> { }

    /// <summary>A ServiceStack Route to check inventory location exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocation.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocation/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckInventoryLocationExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check inventory location exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocation.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocation/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckInventoryLocationExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check inventory location exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocation.View"),
        PublicAPI,
        Route("/Inventory/InventoryLocation/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckInventoryLocationExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create inventory location.</summary>
    /// <seealso cref="InventoryLocationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocation.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocation/Create", "POST", Priority = 1,
            Summary = "Use to create a new inventory location.")]
    public partial class CreateInventoryLocation : InventoryLocationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert inventory location.</summary>
    /// <seealso cref="InventoryLocationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Inventory/InventoryLocation/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing inventory location (as needed).")]
    public partial class UpsertInventoryLocation : InventoryLocationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update inventory location.</summary>
    /// <seealso cref="InventoryLocationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocation.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocation/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing inventory location.")]
    public partial class UpdateInventoryLocation : InventoryLocationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocation.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocation/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific inventory location from the system [Soft-Delete]")]
    public partial class DeactivateInventoryLocationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate inventory location by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocation.Deactivate"),
        PublicAPI,
        Route("/Inventory/InventoryLocation/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific inventory location from the system [Soft-Delete]")]
    public partial class DeactivateInventoryLocationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocation.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocation/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific inventory location from the system [Restore from Soft-Delete]")]
    public partial class ReactivateInventoryLocationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate inventory location by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocation.Reactivate"),
        PublicAPI,
        Route("/Inventory/InventoryLocation/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific inventory location from the system [Restore from Soft-Delete]")]
    public partial class ReactivateInventoryLocationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete inventory location.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocation.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Inventory/InventoryLocation/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific inventory location from the system [Hard-Delete]")]
    public partial class DeleteInventoryLocationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete inventory location by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Inventory.InventoryLocation.Delete"),
        PublicAPI,
        Route("/Inventory/InventoryLocation/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific inventory location from the system [Hard-Delete]")]
    public partial class DeleteInventoryLocationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear inventory location cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Inventory/InventoryLocation/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all inventory location calls.")]
    public class ClearInventoryLocationCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class InventoryLocationServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetInventoryLocations"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocations request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IInventoryLocationModel, InventoryLocationModel, IInventoryLocationSearchModel, InventoryLocationPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.InventoryLocations)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetInventoryLocationsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetInventoryLocationsForConnect request)
        {
            return await Workflows.InventoryLocations.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetInventoryLocationsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationsDigest request)
        {
            return await Workflows.InventoryLocations.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.InventoryLocations, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.InventoryLocations, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetInventoryLocationByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetInventoryLocationByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.InventoryLocations, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckInventoryLocationExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckInventoryLocationExistsByID request)
        {
            return await Workflows.InventoryLocations.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckInventoryLocationExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckInventoryLocationExistsByKey request)
        {
            return await Workflows.InventoryLocations.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckInventoryLocationExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckInventoryLocationExistsByName request)
        {
            return await Workflows.InventoryLocations.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertInventoryLocation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertInventoryLocation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationDataAsync,
                    () => Workflows.InventoryLocations.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateInventoryLocation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateInventoryLocation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationDataAsync,
                    () => Workflows.InventoryLocations.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateInventoryLocation"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateInventoryLocation request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationDataAsync,
                    () => Workflows.InventoryLocations.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateInventoryLocationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationDataAsync,
                    () => Workflows.InventoryLocations.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateInventoryLocationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationDataAsync,
                    () => Workflows.InventoryLocations.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateInventoryLocationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationDataAsync,
                    () => Workflows.InventoryLocations.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateInventoryLocationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationDataAsync,
                    () => Workflows.InventoryLocations.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteInventoryLocationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteInventoryLocationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationDataAsync,
                    () => Workflows.InventoryLocations.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteInventoryLocationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteInventoryLocationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedInventoryLocationDataAsync,
                    () => Workflows.InventoryLocations.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearInventoryLocationCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearInventoryLocationCache request)
        {
            await ClearCachedInventoryLocationDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedInventoryLocationDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetInventoryLocations>(string.Empty),
                    UrnId.Create<GetInventoryLocationByID>(string.Empty),
                    UrnId.Create<GetInventoryLocationByKey>(string.Empty),
                    UrnId.Create<GetInventoryLocationByName>(string.Empty),
                    UrnId.Create<CheckInventoryLocationExistsByID>(string.Empty),
                    UrnId.Create<CheckInventoryLocationExistsByKey>(string.Empty),
                    UrnId.Create<CheckInventoryLocationExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class InventoryLocationService : InventoryLocationServiceBase { }
}
