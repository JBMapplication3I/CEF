// <autogenerated>
// <copyright file="ReviewService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the review service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of reviews.</summary>
    /// <seealso cref="ReviewSearchModel"/>
    /// <seealso cref="IReturn{ReviewPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Reviews/Reviews", "GET", Priority = 1,
            Summary = "Use to get a list of reviews")]
    public partial class GetReviews : ReviewSearchModel, IReturn<ReviewPagedResults> { }

    /// <summary>A ServiceStack Route to get reviews for connect.</summary>
    /// <seealso cref="ReviewSearchModel"/>
    /// <seealso cref="IReturn{List{ReviewModel}}"/>
    [Authenticate, RequiredPermission("Reviews.Review.View"),
        PublicAPI,
        Route("/Reviews/ReviewsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all reviews")]
    public partial class GetReviewsForConnect : ReviewSearchModel, IReturn<List<ReviewModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all reviews.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Reviews.Review.View"),
        PublicAPI,
        Route("/Reviews/ReviewsDigest", "GET",
            Summary = "Use to get a hash representing each reviews")]
    public partial class GetReviewsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get review.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ReviewModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Reviews/Review/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific review")]
    public partial class GetReviewByID : ImplementsIDBase, IReturn<ReviewModel> { }

    /// <summary>A ServiceStack Route to get review.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ReviewModel}"/>
    [PublicAPI,
        Route("/Reviews/Review/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific review by the custom key")]
    public partial class GetReviewByKey : ImplementsKeyBase, IReturn<ReviewModel> { }

    /// <summary>A ServiceStack Route to get review.</summary>
    /// <seealso cref="IReturn{ReviewModel}"/>
    [PublicAPI,
        Route("/Reviews/Review/Name", "GET", Priority = 1,
            Summary = "Use to get a specific review by the name")]
    public partial class GetReviewByName : ImplementsNameBase, IReturn<ReviewModel> { }

    /// <summary>A ServiceStack Route to check review exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Reviews.Review.View"),
        PublicAPI,
        Route("/Reviews/Review/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckReviewExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check review exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Reviews.Review.View"),
        PublicAPI,
        Route("/Reviews/Review/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckReviewExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check review exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Reviews.Review.View"),
        PublicAPI,
        Route("/Reviews/Review/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckReviewExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create review.</summary>
    /// <seealso cref="ReviewModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Reviews.Review.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reviews/Review/Create", "POST", Priority = 1,
            Summary = "Use to create a new review.")]
    public partial class CreateReview : ReviewModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert review.</summary>
    /// <seealso cref="ReviewModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Reviews/Review/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing review (as needed).")]
    public partial class UpsertReview : ReviewModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update review.</summary>
    /// <seealso cref="ReviewModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Reviews.Review.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reviews/Review/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing review.")]
    public partial class UpdateReview : ReviewModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate review.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reviews.Review.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reviews/Review/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific review from the system [Soft-Delete]")]
    public partial class DeactivateReviewByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate review by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reviews.Review.Deactivate"),
        PublicAPI,
        Route("/Reviews/Review/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific review from the system [Soft-Delete]")]
    public partial class DeactivateReviewByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate review.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reviews.Review.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reviews/Review/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific review from the system [Restore from Soft-Delete]")]
    public partial class ReactivateReviewByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate review by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reviews.Review.Reactivate"),
        PublicAPI,
        Route("/Reviews/Review/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific review from the system [Restore from Soft-Delete]")]
    public partial class ReactivateReviewByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete review.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reviews.Review.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Reviews/Review/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific review from the system [Hard-Delete]")]
    public partial class DeleteReviewByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete review by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Reviews.Review.Delete"),
        PublicAPI,
        Route("/Reviews/Review/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific review from the system [Hard-Delete]")]
    public partial class DeleteReviewByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear review cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Reviews/Review/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all review calls.")]
    public class ClearReviewCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ReviewServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetReviews"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReviews request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IReviewModel, ReviewModel, IReviewSearchModel, ReviewPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Reviews)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReviewsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetReviewsForConnect request)
        {
            return await Workflows.Reviews.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReviewsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReviewsDigest request)
        {
            return await Workflows.Reviews.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetReviewByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReviewByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Reviews, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReviewByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReviewByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Reviews, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetReviewByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetReviewByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Reviews, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckReviewExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReviewExistsByID request)
        {
            return await Workflows.Reviews.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReviewExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReviewExistsByKey request)
        {
            return await Workflows.Reviews.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckReviewExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckReviewExistsByName request)
        {
            return await Workflows.Reviews.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertReview"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertReview request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewDataAsync,
                    () => Workflows.Reviews.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateReview"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateReview request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewDataAsync,
                    () => Workflows.Reviews.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateReview"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateReview request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewDataAsync,
                    () => Workflows.Reviews.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateReviewByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateReviewByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewDataAsync,
                    () => Workflows.Reviews.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateReviewByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateReviewByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewDataAsync,
                    () => Workflows.Reviews.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateReviewByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateReviewByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewDataAsync,
                    () => Workflows.Reviews.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateReviewByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateReviewByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewDataAsync,
                    () => Workflows.Reviews.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteReviewByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteReviewByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewDataAsync,
                    () => Workflows.Reviews.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteReviewByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteReviewByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedReviewDataAsync,
                    () => Workflows.Reviews.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearReviewCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearReviewCache request)
        {
            await ClearCachedReviewDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedReviewDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetReviews>(string.Empty),
                    UrnId.Create<GetReviewByID>(string.Empty),
                    UrnId.Create<GetReviewByKey>(string.Empty),
                    UrnId.Create<GetReviewByName>(string.Empty),
                    UrnId.Create<CheckReviewExistsByID>(string.Empty),
                    UrnId.Create<CheckReviewExistsByKey>(string.Empty),
                    UrnId.Create<CheckReviewExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ReviewService : ReviewServiceBase { }
}
