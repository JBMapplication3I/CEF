// <autogenerated>
// <copyright file="ProductCategoryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the product category service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of product categories.</summary>
    /// <seealso cref="ProductCategorySearchModel"/>
    /// <seealso cref="IReturn{ProductCategoryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductCategories", "GET", Priority = 1,
            Summary = "Use to get a list of product categories")]
    public partial class GetProductCategories : ProductCategorySearchModel, IReturn<ProductCategoryPagedResults> { }

    /// <summary>A ServiceStack Route to get product categories for connect.</summary>
    /// <seealso cref="ProductCategorySearchModel"/>
    /// <seealso cref="IReturn{List{ProductCategoryModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductCategory.View"),
        PublicAPI,
        Route("/Products/ProductCategoriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all product categories")]
    public partial class GetProductCategoriesForConnect : ProductCategorySearchModel, IReturn<List<ProductCategoryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all product categories.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductCategory.View"),
        PublicAPI,
        Route("/Products/ProductCategoriesDigest", "GET",
            Summary = "Use to get a hash representing each product categories")]
    public partial class GetProductCategoriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get product category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ProductCategoryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductCategory/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific product category")]
    public partial class GetProductCategoryByID : ImplementsIDBase, IReturn<ProductCategoryModel> { }

    /// <summary>A ServiceStack Route to get product category.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ProductCategoryModel}"/>
    [PublicAPI,
        Route("/Products/ProductCategory/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific product category by the custom key")]
    public partial class GetProductCategoryByKey : ImplementsKeyBase, IReturn<ProductCategoryModel> { }

    /// <summary>A ServiceStack Route to check product category exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductCategory.View"),
        PublicAPI,
        Route("/Products/ProductCategory/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckProductCategoryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product category exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductCategory.View"),
        PublicAPI,
        Route("/Products/ProductCategory/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckProductCategoryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create product category.</summary>
    /// <seealso cref="ProductCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductCategory.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductCategory/Create", "POST", Priority = 1,
            Summary = "Use to create a new product category.")]
    public partial class CreateProductCategory : ProductCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert product category.</summary>
    /// <seealso cref="ProductCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Products/ProductCategory/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing product category (as needed).")]
    public partial class UpsertProductCategory : ProductCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update product category.</summary>
    /// <seealso cref="ProductCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductCategory.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductCategory/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing product category.")]
    public partial class UpdateProductCategory : ProductCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate product category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductCategory.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductCategory/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product category from the system [Soft-Delete]")]
    public partial class DeactivateProductCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate product category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductCategory.Deactivate"),
        PublicAPI,
        Route("/Products/ProductCategory/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product category from the system [Soft-Delete]")]
    public partial class DeactivateProductCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductCategory.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductCategory/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductCategory.Reactivate"),
        PublicAPI,
        Route("/Products/ProductCategory/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductCategory.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductCategory/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific product category from the system [Hard-Delete]")]
    public partial class DeleteProductCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductCategory.Delete"),
        PublicAPI,
        Route("/Products/ProductCategory/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific product category from the system [Hard-Delete]")]
    public partial class DeleteProductCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear product category cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductCategory/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all product category calls.")]
    public class ClearProductCategoryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ProductCategoryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetProductCategories"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductCategories request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IProductCategoryModel, ProductCategoryModel, IProductCategorySearchModel, ProductCategoryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ProductCategories)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductCategoriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetProductCategoriesForConnect request)
        {
            return await Workflows.ProductCategories.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductCategoriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductCategoriesDigest request)
        {
            return await Workflows.ProductCategories.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetProductCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductCategoryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ProductCategories, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductCategoryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ProductCategories, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckProductCategoryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductCategoryExistsByID request)
        {
            return await Workflows.ProductCategories.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductCategoryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductCategoryExistsByKey request)
        {
            return await Workflows.ProductCategories.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertProductCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertProductCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductCategoryDataAsync,
                    () => Workflows.ProductCategories.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateProductCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateProductCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductCategoryDataAsync,
                    () => Workflows.ProductCategories.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateProductCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateProductCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductCategoryDataAsync,
                    () => Workflows.ProductCategories.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateProductCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductCategoryDataAsync,
                    () => Workflows.ProductCategories.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateProductCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductCategoryDataAsync,
                    () => Workflows.ProductCategories.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateProductCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductCategoryDataAsync,
                    () => Workflows.ProductCategories.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateProductCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductCategoryDataAsync,
                    () => Workflows.ProductCategories.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteProductCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductCategoryDataAsync,
                    () => Workflows.ProductCategories.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteProductCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductCategoryDataAsync,
                    () => Workflows.ProductCategories.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearProductCategoryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearProductCategoryCache request)
        {
            await ClearCachedProductCategoryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedProductCategoryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetProductCategories>(string.Empty),
                    UrnId.Create<GetProductCategoryByID>(string.Empty),
                    UrnId.Create<GetProductCategoryByKey>(string.Empty),
                    UrnId.Create<CheckProductCategoryExistsByID>(string.Empty),
                    UrnId.Create<CheckProductCategoryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ProductCategoryService : ProductCategoryServiceBase { }
}
