// <autogenerated>
// <copyright file="FranchiseImageTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise image type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise image types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{FranchiseImageTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseImageTypes", "GET", Priority = 1,
            Summary = "Use to get a list of franchise image types")]
    public partial class GetFranchiseImageTypes : TypeSearchModel, IReturn<FranchiseImageTypePagedResults> { }

    /// <summary>A ServiceStack Route to get franchise image types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImageType.View"),
        PublicAPI,
        Route("/Franchises/FranchiseImageTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise image types")]
    public partial class GetFranchiseImageTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise image types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImageType.View"),
        PublicAPI,
        Route("/Franchises/FranchiseImageTypesDigest", "GET",
            Summary = "Use to get a hash representing each franchise image types")]
    public partial class GetFranchiseImageTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseImageType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise image type")]
    public partial class GetFranchiseImageTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get franchise image type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseImageType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise image type by the custom key")]
    public partial class GetFranchiseImageTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get franchise image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseImageType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific franchise image type by the name")]
    public partial class GetFranchiseImageTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get franchise image type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseImageType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific franchise image type by the name")]
    public partial class GetFranchiseImageTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check franchise image type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImageType.View"),
        PublicAPI,
        Route("/Franchises/FranchiseImageType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseImageTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise image type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImageType.View"),
        PublicAPI,
        Route("/Franchises/FranchiseImageType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseImageTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise image type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImageType.View"),
        PublicAPI,
        Route("/Franchises/FranchiseImageType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseImageTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise image type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImageType.View"),
        PublicAPI,
        Route("/Franchises/FranchiseImageType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseImageTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImageType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseImageType/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise image type.")]
    public partial class CreateFranchiseImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseImageType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise image type (as needed).")]
    public partial class UpsertFranchiseImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise image type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImageType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseImageType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise image type.")]
    public partial class UpdateFranchiseImageType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImageType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseImageType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise image type from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImageType.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseImageType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise image type from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImageType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseImageType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImageType.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseImageType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise image type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise image type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImageType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseImageType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise image type from the system [Hard-Delete]")]
    public partial class DeleteFranchiseImageTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise image type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImageType.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseImageType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise image type from the system [Hard-Delete]")]
    public partial class DeleteFranchiseImageTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise image type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseImageType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise image type calls.")]
    public class ClearFranchiseImageTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseImageTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseImageTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseImageTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, FranchiseImageTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseImageTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseImageTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseImageTypesForConnect request)
        {
            return await Workflows.FranchiseImageTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseImageTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseImageTypesDigest request)
        {
            return await Workflows.FranchiseImageTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseImageTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseImageTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseImageTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseImageTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.FranchiseImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseImageTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseImageTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.FranchiseImageTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseImageTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseImageTypeExistsByID request)
        {
            return await Workflows.FranchiseImageTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseImageTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseImageTypeExistsByKey request)
        {
            return await Workflows.FranchiseImageTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseImageTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseImageTypeExistsByName request)
        {
            return await Workflows.FranchiseImageTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseImageTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseImageTypeExistsByDisplayName request)
        {
            return await Workflows.FranchiseImageTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageTypeDataAsync,
                    () => Workflows.FranchiseImageTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageTypeDataAsync,
                    () => Workflows.FranchiseImageTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseImageType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseImageType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageTypeDataAsync,
                    () => Workflows.FranchiseImageTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageTypeDataAsync,
                    () => Workflows.FranchiseImageTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageTypeDataAsync,
                    () => Workflows.FranchiseImageTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageTypeDataAsync,
                    () => Workflows.FranchiseImageTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageTypeDataAsync,
                    () => Workflows.FranchiseImageTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseImageTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseImageTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageTypeDataAsync,
                    () => Workflows.FranchiseImageTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseImageTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseImageTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageTypeDataAsync,
                    () => Workflows.FranchiseImageTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseImageTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseImageTypeCache request)
        {
            await ClearCachedFranchiseImageTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseImageTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseImageTypes>(string.Empty),
                    UrnId.Create<GetFranchiseImageTypeByID>(string.Empty),
                    UrnId.Create<GetFranchiseImageTypeByKey>(string.Empty),
                    UrnId.Create<GetFranchiseImageTypeByName>(string.Empty),
                    UrnId.Create<CheckFranchiseImageTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseImageTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseImageTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckFranchiseImageTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseImageTypeService : FranchiseImageTypeServiceBase { }
}
