// <autogenerated>
// <copyright file="AdZoneService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the ad zone service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of ad zones.</summary>
    /// <seealso cref="AdZoneSearchModel"/>
    /// <seealso cref="IReturn{AdZonePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdZones", "GET", Priority = 1,
            Summary = "Use to get a list of ad zones")]
    public partial class GetAdZones : AdZoneSearchModel, IReturn<AdZonePagedResults> { }

    /// <summary>A ServiceStack Route to get ad zones for connect.</summary>
    /// <seealso cref="AdZoneSearchModel"/>
    /// <seealso cref="IReturn{List{AdZoneModel}}"/>
    [Authenticate, RequiredPermission("Advertising.AdZone.View"),
        PublicAPI,
        Route("/Advertising/AdZonesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all ad zones")]
    public partial class GetAdZonesForConnect : AdZoneSearchModel, IReturn<List<AdZoneModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all ad zones.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Advertising.AdZone.View"),
        PublicAPI,
        Route("/Advertising/AdZonesDigest", "GET",
            Summary = "Use to get a hash representing each ad zones")]
    public partial class GetAdZonesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get ad zone.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AdZoneModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdZone/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific ad zone")]
    public partial class GetAdZoneByID : ImplementsIDBase, IReturn<AdZoneModel> { }

    /// <summary>A ServiceStack Route to get ad zone.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AdZoneModel}"/>
    [PublicAPI,
        Route("/Advertising/AdZone/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific ad zone by the custom key")]
    public partial class GetAdZoneByKey : ImplementsKeyBase, IReturn<AdZoneModel> { }

    /// <summary>A ServiceStack Route to check ad zone exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdZone.View"),
        PublicAPI,
        Route("/Advertising/AdZone/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAdZoneExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ad zone exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Advertising.AdZone.View"),
        PublicAPI,
        Route("/Advertising/AdZone/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAdZoneExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create ad zone.</summary>
    /// <seealso cref="AdZoneModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.AdZone.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdZone/Create", "POST", Priority = 1,
            Summary = "Use to create a new ad zone.")]
    public partial class CreateAdZone : AdZoneModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert ad zone.</summary>
    /// <seealso cref="AdZoneModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Advertising/AdZone/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing ad zone (as needed).")]
    public partial class UpsertAdZone : AdZoneModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update ad zone.</summary>
    /// <seealso cref="AdZoneModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Advertising.AdZone.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdZone/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing ad zone.")]
    public partial class UpdateAdZone : AdZoneModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate ad zone.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdZone.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdZone/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ad zone from the system [Soft-Delete]")]
    public partial class DeactivateAdZoneByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate ad zone by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdZone.Deactivate"),
        PublicAPI,
        Route("/Advertising/AdZone/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ad zone from the system [Soft-Delete]")]
    public partial class DeactivateAdZoneByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ad zone.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdZone.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdZone/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ad zone from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAdZoneByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ad zone by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdZone.Reactivate"),
        PublicAPI,
        Route("/Advertising/AdZone/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ad zone from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAdZoneByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ad zone.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdZone.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Advertising/AdZone/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific ad zone from the system [Hard-Delete]")]
    public partial class DeleteAdZoneByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ad zone by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Advertising.AdZone.Delete"),
        PublicAPI,
        Route("/Advertising/AdZone/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific ad zone from the system [Hard-Delete]")]
    public partial class DeleteAdZoneByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear ad zone cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Advertising/AdZone/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all ad zone calls.")]
    public class ClearAdZoneCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AdZoneServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAdZones"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdZones request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAdZoneModel, AdZoneModel, IAdZoneSearchModel, AdZonePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AdZones)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdZonesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAdZonesForConnect request)
        {
            return await Workflows.AdZones.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdZonesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdZonesDigest request)
        {
            return await Workflows.AdZones.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAdZoneByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdZoneByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AdZones, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAdZoneByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAdZoneByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AdZones, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAdZoneExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdZoneExistsByID request)
        {
            return await Workflows.AdZones.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAdZoneExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAdZoneExistsByKey request)
        {
            return await Workflows.AdZones.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAdZone"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAdZone request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneDataAsync,
                    () => Workflows.AdZones.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAdZone"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAdZone request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneDataAsync,
                    () => Workflows.AdZones.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAdZone"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAdZone request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneDataAsync,
                    () => Workflows.AdZones.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAdZoneByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAdZoneByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneDataAsync,
                    () => Workflows.AdZones.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAdZoneByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAdZoneByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneDataAsync,
                    () => Workflows.AdZones.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAdZoneByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAdZoneByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneDataAsync,
                    () => Workflows.AdZones.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAdZoneByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAdZoneByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneDataAsync,
                    () => Workflows.AdZones.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAdZoneByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAdZoneByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneDataAsync,
                    () => Workflows.AdZones.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAdZoneByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAdZoneByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAdZoneDataAsync,
                    () => Workflows.AdZones.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAdZoneCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAdZoneCache request)
        {
            await ClearCachedAdZoneDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAdZoneDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAdZones>(string.Empty),
                    UrnId.Create<GetAdZoneByID>(string.Empty),
                    UrnId.Create<GetAdZoneByKey>(string.Empty),
                    UrnId.Create<CheckAdZoneExistsByID>(string.Empty),
                    UrnId.Create<CheckAdZoneExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AdZoneService : AdZoneServiceBase { }
}
