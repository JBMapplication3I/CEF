// <autogenerated>
// <copyright file="AccountAssociationTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the account association type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of account association types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{AccountAssociationTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountAssociationTypes", "GET", Priority = 1,
            Summary = "Use to get a list of account association types")]
    public partial class GetAccountAssociationTypes : TypeSearchModel, IReturn<AccountAssociationTypePagedResults> { }

    /// <summary>A ServiceStack Route to get account association types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociationType.View"),
        PublicAPI,
        Route("/Accounts/AccountAssociationTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all account association types")]
    public partial class GetAccountAssociationTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all account association types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociationType.View"),
        PublicAPI,
        Route("/Accounts/AccountAssociationTypesDigest", "GET",
            Summary = "Use to get a hash representing each account association types")]
    public partial class GetAccountAssociationTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get account association type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountAssociationType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific account association type")]
    public partial class GetAccountAssociationTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get account association type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountAssociationType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific account association type by the custom key")]
    public partial class GetAccountAssociationTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get account association type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountAssociationType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific account association type by the name")]
    public partial class GetAccountAssociationTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get account association type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountAssociationType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific account association type by the name")]
    public partial class GetAccountAssociationTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check account association type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociationType.View"),
        PublicAPI,
        Route("/Accounts/AccountAssociationType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountAssociationTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account association type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociationType.View"),
        PublicAPI,
        Route("/Accounts/AccountAssociationType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountAssociationTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account association type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociationType.View"),
        PublicAPI,
        Route("/Accounts/AccountAssociationType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountAssociationTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account association type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociationType.View"),
        PublicAPI,
        Route("/Accounts/AccountAssociationType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountAssociationTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create account association type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociationType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountAssociationType/Create", "POST", Priority = 1,
            Summary = "Use to create a new account association type.")]
    public partial class CreateAccountAssociationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert account association type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Accounts/AccountAssociationType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing account association type (as needed).")]
    public partial class UpsertAccountAssociationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update account association type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociationType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountAssociationType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing account association type.")]
    public partial class UpdateAccountAssociationType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate account association type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociationType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountAssociationType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account association type from the system [Soft-Delete]")]
    public partial class DeactivateAccountAssociationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate account association type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociationType.Deactivate"),
        PublicAPI,
        Route("/Accounts/AccountAssociationType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account association type from the system [Soft-Delete]")]
    public partial class DeactivateAccountAssociationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account association type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociationType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountAssociationType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account association type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountAssociationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account association type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociationType.Reactivate"),
        PublicAPI,
        Route("/Accounts/AccountAssociationType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account association type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountAssociationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account association type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociationType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountAssociationType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific account association type from the system [Hard-Delete]")]
    public partial class DeleteAccountAssociationTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account association type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountAssociationType.Delete"),
        PublicAPI,
        Route("/Accounts/AccountAssociationType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific account association type from the system [Hard-Delete]")]
    public partial class DeleteAccountAssociationTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear account association type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountAssociationType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all account association type calls.")]
    public class ClearAccountAssociationTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AccountAssociationTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAccountAssociationTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountAssociationTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, AccountAssociationTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AccountAssociationTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountAssociationTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAccountAssociationTypesForConnect request)
        {
            return await Workflows.AccountAssociationTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountAssociationTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountAssociationTypesDigest request)
        {
            return await Workflows.AccountAssociationTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAccountAssociationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountAssociationTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AccountAssociationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountAssociationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountAssociationTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AccountAssociationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountAssociationTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountAssociationTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.AccountAssociationTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountAssociationTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountAssociationTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.AccountAssociationTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAccountAssociationTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountAssociationTypeExistsByID request)
        {
            return await Workflows.AccountAssociationTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountAssociationTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountAssociationTypeExistsByKey request)
        {
            return await Workflows.AccountAssociationTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountAssociationTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountAssociationTypeExistsByName request)
        {
            return await Workflows.AccountAssociationTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountAssociationTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountAssociationTypeExistsByDisplayName request)
        {
            return await Workflows.AccountAssociationTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAccountAssociationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAccountAssociationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationTypeDataAsync,
                    () => Workflows.AccountAssociationTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAccountAssociationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAccountAssociationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationTypeDataAsync,
                    () => Workflows.AccountAssociationTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAccountAssociationType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAccountAssociationType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationTypeDataAsync,
                    () => Workflows.AccountAssociationTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAccountAssociationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountAssociationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationTypeDataAsync,
                    () => Workflows.AccountAssociationTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAccountAssociationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountAssociationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationTypeDataAsync,
                    () => Workflows.AccountAssociationTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAccountAssociationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountAssociationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationTypeDataAsync,
                    () => Workflows.AccountAssociationTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAccountAssociationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountAssociationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationTypeDataAsync,
                    () => Workflows.AccountAssociationTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAccountAssociationTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountAssociationTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationTypeDataAsync,
                    () => Workflows.AccountAssociationTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAccountAssociationTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountAssociationTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountAssociationTypeDataAsync,
                    () => Workflows.AccountAssociationTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAccountAssociationTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAccountAssociationTypeCache request)
        {
            await ClearCachedAccountAssociationTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAccountAssociationTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAccountAssociationTypes>(string.Empty),
                    UrnId.Create<GetAccountAssociationTypeByID>(string.Empty),
                    UrnId.Create<GetAccountAssociationTypeByKey>(string.Empty),
                    UrnId.Create<GetAccountAssociationTypeByName>(string.Empty),
                    UrnId.Create<CheckAccountAssociationTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckAccountAssociationTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckAccountAssociationTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckAccountAssociationTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AccountAssociationTypeService : AccountAssociationTypeServiceBase { }
}
