// <autogenerated>
// <copyright file="ScoutService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the scout service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of scouts.</summary>
    /// <seealso cref="ScoutSearchModel"/>
    /// <seealso cref="IReturn{ScoutPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scouting/Scouts", "GET", Priority = 1,
            Summary = "Use to get a list of scouts")]
    public partial class GetScouts : ScoutSearchModel, IReturn<ScoutPagedResults> { }

    /// <summary>A ServiceStack Route to get scouts for connect.</summary>
    /// <seealso cref="ScoutSearchModel"/>
    /// <seealso cref="IReturn{List{ScoutModel}}"/>
    [Authenticate, RequiredPermission("Scouting.Scout.View"),
        PublicAPI,
        Route("/Scouting/ScoutsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all scouts")]
    public partial class GetScoutsForConnect : ScoutSearchModel, IReturn<List<ScoutModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all scouts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Scouting.Scout.View"),
        PublicAPI,
        Route("/Scouting/ScoutsDigest", "GET",
            Summary = "Use to get a hash representing each scouts")]
    public partial class GetScoutsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get scout.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ScoutModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scouting/Scout/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific scout")]
    public partial class GetScoutByID : ImplementsIDBase, IReturn<ScoutModel> { }

    /// <summary>A ServiceStack Route to get scout.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ScoutModel}"/>
    [PublicAPI,
        Route("/Scouting/Scout/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific scout by the custom key")]
    public partial class GetScoutByKey : ImplementsKeyBase, IReturn<ScoutModel> { }

    /// <summary>A ServiceStack Route to check scout exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scouting.Scout.View"),
        PublicAPI,
        Route("/Scouting/Scout/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckScoutExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check scout exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scouting.Scout.View"),
        PublicAPI,
        Route("/Scouting/Scout/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckScoutExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create scout.</summary>
    /// <seealso cref="ScoutModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scouting.Scout.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/Scout/Create", "POST", Priority = 1,
            Summary = "Use to create a new scout.")]
    public partial class CreateScout : ScoutModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert scout.</summary>
    /// <seealso cref="ScoutModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Scouting/Scout/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing scout (as needed).")]
    public partial class UpsertScout : ScoutModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update scout.</summary>
    /// <seealso cref="ScoutModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scouting.Scout.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/Scout/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing scout.")]
    public partial class UpdateScout : ScoutModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate scout.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.Scout.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/Scout/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific scout from the system [Soft-Delete]")]
    public partial class DeactivateScoutByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate scout by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.Scout.Deactivate"),
        PublicAPI,
        Route("/Scouting/Scout/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific scout from the system [Soft-Delete]")]
    public partial class DeactivateScoutByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate scout.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.Scout.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/Scout/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific scout from the system [Restore from Soft-Delete]")]
    public partial class ReactivateScoutByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate scout by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.Scout.Reactivate"),
        PublicAPI,
        Route("/Scouting/Scout/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific scout from the system [Restore from Soft-Delete]")]
    public partial class ReactivateScoutByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete scout.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.Scout.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/Scout/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific scout from the system [Hard-Delete]")]
    public partial class DeleteScoutByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete scout by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.Scout.Delete"),
        PublicAPI,
        Route("/Scouting/Scout/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific scout from the system [Hard-Delete]")]
    public partial class DeleteScoutByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear scout cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scouting/Scout/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all scout calls.")]
    public class ClearScoutCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ScoutServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetScouts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScouts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IScoutModel, ScoutModel, IScoutSearchModel, ScoutPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Scouts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScoutsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetScoutsForConnect request)
        {
            return await Workflows.Scouts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScoutsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScoutsDigest request)
        {
            return await Workflows.Scouts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetScoutByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScoutByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Scouts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScoutByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScoutByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Scouts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckScoutExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckScoutExistsByID request)
        {
            return await Workflows.Scouts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckScoutExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckScoutExistsByKey request)
        {
            return await Workflows.Scouts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertScout"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertScout request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutDataAsync,
                    () => Workflows.Scouts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateScout"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateScout request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutDataAsync,
                    () => Workflows.Scouts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateScout"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateScout request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutDataAsync,
                    () => Workflows.Scouts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateScoutByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateScoutByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutDataAsync,
                    () => Workflows.Scouts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateScoutByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateScoutByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutDataAsync,
                    () => Workflows.Scouts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateScoutByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateScoutByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutDataAsync,
                    () => Workflows.Scouts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateScoutByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateScoutByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutDataAsync,
                    () => Workflows.Scouts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteScoutByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteScoutByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutDataAsync,
                    () => Workflows.Scouts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteScoutByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteScoutByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutDataAsync,
                    () => Workflows.Scouts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearScoutCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearScoutCache request)
        {
            await ClearCachedScoutDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedScoutDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetScouts>(string.Empty),
                    UrnId.Create<GetScoutByID>(string.Empty),
                    UrnId.Create<GetScoutByKey>(string.Empty),
                    UrnId.Create<CheckScoutExistsByID>(string.Empty),
                    UrnId.Create<CheckScoutExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ScoutService : ScoutServiceBase { }
}
