// <autogenerated>
// <copyright file="RateQuoteService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the rate quote service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of rate quotes.</summary>
    /// <seealso cref="RateQuoteSearchModel"/>
    /// <seealso cref="IReturn{RateQuotePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/RateQuotes", "GET", Priority = 1,
            Summary = "Use to get a list of rate quotes")]
    public partial class GetRateQuotes : RateQuoteSearchModel, IReturn<RateQuotePagedResults> { }

    /// <summary>A ServiceStack Route to get rate quotes for connect.</summary>
    /// <seealso cref="RateQuoteSearchModel"/>
    /// <seealso cref="IReturn{List{RateQuoteModel}}"/>
    [Authenticate, RequiredPermission("Shipping.RateQuote.View"),
        PublicAPI,
        Route("/Shipping/RateQuotesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all rate quotes")]
    public partial class GetRateQuotesForConnect : RateQuoteSearchModel, IReturn<List<RateQuoteModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all rate quotes.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shipping.RateQuote.View"),
        PublicAPI,
        Route("/Shipping/RateQuotesDigest", "GET",
            Summary = "Use to get a hash representing each rate quotes")]
    public partial class GetRateQuotesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get rate quote.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{RateQuoteModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/RateQuote/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific rate quote")]
    public partial class GetRateQuoteByID : ImplementsIDBase, IReturn<RateQuoteModel> { }

    /// <summary>A ServiceStack Route to get rate quote.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{RateQuoteModel}"/>
    [PublicAPI,
        Route("/Shipping/RateQuote/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific rate quote by the custom key")]
    public partial class GetRateQuoteByKey : ImplementsKeyBase, IReturn<RateQuoteModel> { }

    /// <summary>A ServiceStack Route to get rate quote.</summary>
    /// <seealso cref="IReturn{RateQuoteModel}"/>
    [PublicAPI,
        Route("/Shipping/RateQuote/Name", "GET", Priority = 1,
            Summary = "Use to get a specific rate quote by the name")]
    public partial class GetRateQuoteByName : ImplementsNameBase, IReturn<RateQuoteModel> { }

    /// <summary>A ServiceStack Route to check rate quote exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.RateQuote.View"),
        PublicAPI,
        Route("/Shipping/RateQuote/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckRateQuoteExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check rate quote exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.RateQuote.View"),
        PublicAPI,
        Route("/Shipping/RateQuote/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckRateQuoteExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check rate quote exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.RateQuote.View"),
        PublicAPI,
        Route("/Shipping/RateQuote/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckRateQuoteExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create rate quote.</summary>
    /// <seealso cref="RateQuoteModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.RateQuote.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/RateQuote/Create", "POST", Priority = 1,
            Summary = "Use to create a new rate quote.")]
    public partial class CreateRateQuote : RateQuoteModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert rate quote.</summary>
    /// <seealso cref="RateQuoteModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shipping/RateQuote/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing rate quote (as needed).")]
    public partial class UpsertRateQuote : RateQuoteModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update rate quote.</summary>
    /// <seealso cref="RateQuoteModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.RateQuote.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/RateQuote/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing rate quote.")]
    public partial class UpdateRateQuote : RateQuoteModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate rate quote.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.RateQuote.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/RateQuote/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific rate quote from the system [Soft-Delete]")]
    public partial class DeactivateRateQuoteByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate rate quote by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.RateQuote.Deactivate"),
        PublicAPI,
        Route("/Shipping/RateQuote/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific rate quote from the system [Soft-Delete]")]
    public partial class DeactivateRateQuoteByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate rate quote.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.RateQuote.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/RateQuote/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific rate quote from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRateQuoteByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate rate quote by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.RateQuote.Reactivate"),
        PublicAPI,
        Route("/Shipping/RateQuote/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific rate quote from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRateQuoteByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete rate quote.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.RateQuote.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/RateQuote/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific rate quote from the system [Hard-Delete]")]
    public partial class DeleteRateQuoteByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete rate quote by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.RateQuote.Delete"),
        PublicAPI,
        Route("/Shipping/RateQuote/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific rate quote from the system [Hard-Delete]")]
    public partial class DeleteRateQuoteByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear rate quote cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/RateQuote/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all rate quote calls.")]
    public class ClearRateQuoteCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class RateQuoteServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetRateQuotes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRateQuotes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IRateQuoteModel, RateQuoteModel, IRateQuoteSearchModel, RateQuotePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.RateQuotes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRateQuotesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetRateQuotesForConnect request)
        {
            return await Workflows.RateQuotes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRateQuotesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRateQuotesDigest request)
        {
            return await Workflows.RateQuotes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetRateQuoteByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRateQuoteByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.RateQuotes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRateQuoteByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRateQuoteByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.RateQuotes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRateQuoteByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRateQuoteByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.RateQuotes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckRateQuoteExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRateQuoteExistsByID request)
        {
            return await Workflows.RateQuotes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRateQuoteExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRateQuoteExistsByKey request)
        {
            return await Workflows.RateQuotes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRateQuoteExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRateQuoteExistsByName request)
        {
            return await Workflows.RateQuotes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertRateQuote"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertRateQuote request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRateQuoteDataAsync,
                    () => Workflows.RateQuotes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateRateQuote"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateRateQuote request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRateQuoteDataAsync,
                    () => Workflows.RateQuotes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateRateQuote"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateRateQuote request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRateQuoteDataAsync,
                    () => Workflows.RateQuotes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateRateQuoteByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRateQuoteByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRateQuoteDataAsync,
                    () => Workflows.RateQuotes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateRateQuoteByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRateQuoteByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRateQuoteDataAsync,
                    () => Workflows.RateQuotes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateRateQuoteByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRateQuoteByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRateQuoteDataAsync,
                    () => Workflows.RateQuotes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateRateQuoteByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRateQuoteByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRateQuoteDataAsync,
                    () => Workflows.RateQuotes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteRateQuoteByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRateQuoteByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRateQuoteDataAsync,
                    () => Workflows.RateQuotes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteRateQuoteByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRateQuoteByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRateQuoteDataAsync,
                    () => Workflows.RateQuotes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearRateQuoteCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearRateQuoteCache request)
        {
            await ClearCachedRateQuoteDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedRateQuoteDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetRateQuotes>(string.Empty),
                    UrnId.Create<GetRateQuoteByID>(string.Empty),
                    UrnId.Create<GetRateQuoteByKey>(string.Empty),
                    UrnId.Create<GetRateQuoteByName>(string.Empty),
                    UrnId.Create<CheckRateQuoteExistsByID>(string.Empty),
                    UrnId.Create<CheckRateQuoteExistsByKey>(string.Empty),
                    UrnId.Create<CheckRateQuoteExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class RateQuoteService : RateQuoteServiceBase { }
}
