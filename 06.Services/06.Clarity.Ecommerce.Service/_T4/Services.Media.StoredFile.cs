// <autogenerated>
// <copyright file="StoredFileService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the stored file service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of stored files.</summary>
    /// <seealso cref="StoredFileSearchModel"/>
    /// <seealso cref="IReturn{StoredFilePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Media/StoredFiles", "GET", Priority = 1,
            Summary = "Use to get a list of stored files")]
    public partial class GetStoredFiles : StoredFileSearchModel, IReturn<StoredFilePagedResults> { }

    /// <summary>A ServiceStack Route to get stored files for connect.</summary>
    /// <seealso cref="StoredFileSearchModel"/>
    /// <seealso cref="IReturn{List{StoredFileModel}}"/>
    [Authenticate, RequiredPermission("Media.StoredFile.View"),
        PublicAPI,
        Route("/Media/StoredFilesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all stored files")]
    public partial class GetStoredFilesForConnect : StoredFileSearchModel, IReturn<List<StoredFileModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all stored files.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Media.StoredFile.View"),
        PublicAPI,
        Route("/Media/StoredFilesDigest", "GET",
            Summary = "Use to get a hash representing each stored files")]
    public partial class GetStoredFilesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get stored file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoredFileModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Media/StoredFile/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific stored file")]
    public partial class GetStoredFileByID : ImplementsIDBase, IReturn<StoredFileModel> { }

    /// <summary>A ServiceStack Route to get stored file.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoredFileModel}"/>
    [PublicAPI,
        Route("/Media/StoredFile/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific stored file by the custom key")]
    public partial class GetStoredFileByKey : ImplementsKeyBase, IReturn<StoredFileModel> { }

    /// <summary>A ServiceStack Route to get stored file.</summary>
    /// <seealso cref="IReturn{StoredFileModel}"/>
    [PublicAPI,
        Route("/Media/StoredFile/Name", "GET", Priority = 1,
            Summary = "Use to get a specific stored file by the name")]
    public partial class GetStoredFileByName : ImplementsNameBase, IReturn<StoredFileModel> { }

    /// <summary>A ServiceStack Route to check stored file exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Media.StoredFile.View"),
        PublicAPI,
        Route("/Media/StoredFile/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoredFileExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check stored file exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Media.StoredFile.View"),
        PublicAPI,
        Route("/Media/StoredFile/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoredFileExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check stored file exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Media.StoredFile.View"),
        PublicAPI,
        Route("/Media/StoredFile/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckStoredFileExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create stored file.</summary>
    /// <seealso cref="StoredFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Media.StoredFile.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Media/StoredFile/Create", "POST", Priority = 1,
            Summary = "Use to create a new stored file.")]
    public partial class CreateStoredFile : StoredFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert stored file.</summary>
    /// <seealso cref="StoredFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Media/StoredFile/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing stored file (as needed).")]
    public partial class UpsertStoredFile : StoredFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update stored file.</summary>
    /// <seealso cref="StoredFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Media.StoredFile.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Media/StoredFile/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing stored file.")]
    public partial class UpdateStoredFile : StoredFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate stored file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Media.StoredFile.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Media/StoredFile/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific stored file from the system [Soft-Delete]")]
    public partial class DeactivateStoredFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate stored file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Media.StoredFile.Deactivate"),
        PublicAPI,
        Route("/Media/StoredFile/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific stored file from the system [Soft-Delete]")]
    public partial class DeactivateStoredFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate stored file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Media.StoredFile.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Media/StoredFile/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific stored file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoredFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate stored file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Media.StoredFile.Reactivate"),
        PublicAPI,
        Route("/Media/StoredFile/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific stored file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoredFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete stored file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Media.StoredFile.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Media/StoredFile/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific stored file from the system [Hard-Delete]")]
    public partial class DeleteStoredFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete stored file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Media.StoredFile.Delete"),
        PublicAPI,
        Route("/Media/StoredFile/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific stored file from the system [Hard-Delete]")]
    public partial class DeleteStoredFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear stored file cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Media/StoredFile/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all stored file calls.")]
    public class ClearStoredFileCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoredFileServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoredFiles"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoredFiles request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoredFileModel, StoredFileModel, IStoredFileSearchModel, StoredFilePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoredFiles)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoredFilesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoredFilesForConnect request)
        {
            return await Workflows.StoredFiles.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoredFilesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoredFilesDigest request)
        {
            return await Workflows.StoredFiles.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoredFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoredFileByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoredFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoredFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoredFileByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoredFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoredFileByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoredFileByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.StoredFiles, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoredFileExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoredFileExistsByID request)
        {
            return await Workflows.StoredFiles.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoredFileExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoredFileExistsByKey request)
        {
            return await Workflows.StoredFiles.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoredFileExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoredFileExistsByName request)
        {
            return await Workflows.StoredFiles.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoredFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoredFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoredFileDataAsync,
                    () => Workflows.StoredFiles.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoredFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoredFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoredFileDataAsync,
                    () => Workflows.StoredFiles.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoredFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoredFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoredFileDataAsync,
                    () => Workflows.StoredFiles.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoredFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoredFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoredFileDataAsync,
                    () => Workflows.StoredFiles.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoredFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoredFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoredFileDataAsync,
                    () => Workflows.StoredFiles.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoredFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoredFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoredFileDataAsync,
                    () => Workflows.StoredFiles.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoredFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoredFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoredFileDataAsync,
                    () => Workflows.StoredFiles.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoredFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoredFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoredFileDataAsync,
                    () => Workflows.StoredFiles.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoredFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoredFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoredFileDataAsync,
                    () => Workflows.StoredFiles.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoredFileCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoredFileCache request)
        {
            await ClearCachedStoredFileDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoredFileDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoredFiles>(string.Empty),
                    UrnId.Create<GetStoredFileByID>(string.Empty),
                    UrnId.Create<GetStoredFileByKey>(string.Empty),
                    UrnId.Create<GetStoredFileByName>(string.Empty),
                    UrnId.Create<CheckStoredFileExistsByID>(string.Empty),
                    UrnId.Create<CheckStoredFileExistsByKey>(string.Empty),
                    UrnId.Create<CheckStoredFileExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoredFileService : StoredFileServiceBase { }
}
