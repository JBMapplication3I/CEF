// <autogenerated>
// <copyright file="ProductSubscriptionTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the product subscription type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of product subscription types.</summary>
    /// <seealso cref="ProductSubscriptionTypeSearchModel"/>
    /// <seealso cref="IReturn{ProductSubscriptionTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductSubscriptionTypes", "GET", Priority = 1,
            Summary = "Use to get a list of product subscription types")]
    public partial class GetProductSubscriptionTypes : ProductSubscriptionTypeSearchModel, IReturn<ProductSubscriptionTypePagedResults> { }

    /// <summary>A ServiceStack Route to get product subscription types for connect.</summary>
    /// <seealso cref="ProductSubscriptionTypeSearchModel"/>
    /// <seealso cref="IReturn{List{ProductSubscriptionTypeModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductSubscriptionType.View"),
        PublicAPI,
        Route("/Products/ProductSubscriptionTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all product subscription types")]
    public partial class GetProductSubscriptionTypesForConnect : ProductSubscriptionTypeSearchModel, IReturn<List<ProductSubscriptionTypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all product subscription types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductSubscriptionType.View"),
        PublicAPI,
        Route("/Products/ProductSubscriptionTypesDigest", "GET",
            Summary = "Use to get a hash representing each product subscription types")]
    public partial class GetProductSubscriptionTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get product subscription type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ProductSubscriptionTypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductSubscriptionType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific product subscription type")]
    public partial class GetProductSubscriptionTypeByID : ImplementsIDBase, IReturn<ProductSubscriptionTypeModel> { }

    /// <summary>A ServiceStack Route to get product subscription type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ProductSubscriptionTypeModel}"/>
    [PublicAPI,
        Route("/Products/ProductSubscriptionType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific product subscription type by the custom key")]
    public partial class GetProductSubscriptionTypeByKey : ImplementsKeyBase, IReturn<ProductSubscriptionTypeModel> { }

    /// <summary>A ServiceStack Route to check product subscription type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductSubscriptionType.View"),
        PublicAPI,
        Route("/Products/ProductSubscriptionType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckProductSubscriptionTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product subscription type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductSubscriptionType.View"),
        PublicAPI,
        Route("/Products/ProductSubscriptionType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckProductSubscriptionTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create product subscription type.</summary>
    /// <seealso cref="ProductSubscriptionTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductSubscriptionType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductSubscriptionType/Create", "POST", Priority = 1,
            Summary = "Use to create a new product subscription type.")]
    public partial class CreateProductSubscriptionType : ProductSubscriptionTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert product subscription type.</summary>
    /// <seealso cref="ProductSubscriptionTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Products/ProductSubscriptionType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing product subscription type (as needed).")]
    public partial class UpsertProductSubscriptionType : ProductSubscriptionTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update product subscription type.</summary>
    /// <seealso cref="ProductSubscriptionTypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductSubscriptionType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductSubscriptionType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing product subscription type.")]
    public partial class UpdateProductSubscriptionType : ProductSubscriptionTypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate product subscription type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductSubscriptionType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductSubscriptionType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product subscription type from the system [Soft-Delete]")]
    public partial class DeactivateProductSubscriptionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate product subscription type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductSubscriptionType.Deactivate"),
        PublicAPI,
        Route("/Products/ProductSubscriptionType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product subscription type from the system [Soft-Delete]")]
    public partial class DeactivateProductSubscriptionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product subscription type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductSubscriptionType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductSubscriptionType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product subscription type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductSubscriptionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product subscription type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductSubscriptionType.Reactivate"),
        PublicAPI,
        Route("/Products/ProductSubscriptionType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product subscription type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductSubscriptionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product subscription type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductSubscriptionType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductSubscriptionType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific product subscription type from the system [Hard-Delete]")]
    public partial class DeleteProductSubscriptionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product subscription type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductSubscriptionType.Delete"),
        PublicAPI,
        Route("/Products/ProductSubscriptionType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific product subscription type from the system [Hard-Delete]")]
    public partial class DeleteProductSubscriptionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear product subscription type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductSubscriptionType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all product subscription type calls.")]
    public class ClearProductSubscriptionTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ProductSubscriptionTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetProductSubscriptionTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductSubscriptionTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IProductSubscriptionTypeModel, ProductSubscriptionTypeModel, IProductSubscriptionTypeSearchModel, ProductSubscriptionTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ProductSubscriptionTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductSubscriptionTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetProductSubscriptionTypesForConnect request)
        {
            return await Workflows.ProductSubscriptionTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductSubscriptionTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductSubscriptionTypesDigest request)
        {
            return await Workflows.ProductSubscriptionTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetProductSubscriptionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductSubscriptionTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ProductSubscriptionTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductSubscriptionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductSubscriptionTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ProductSubscriptionTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckProductSubscriptionTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductSubscriptionTypeExistsByID request)
        {
            return await Workflows.ProductSubscriptionTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductSubscriptionTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductSubscriptionTypeExistsByKey request)
        {
            return await Workflows.ProductSubscriptionTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertProductSubscriptionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertProductSubscriptionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductSubscriptionTypeDataAsync,
                    () => Workflows.ProductSubscriptionTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateProductSubscriptionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateProductSubscriptionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductSubscriptionTypeDataAsync,
                    () => Workflows.ProductSubscriptionTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateProductSubscriptionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateProductSubscriptionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductSubscriptionTypeDataAsync,
                    () => Workflows.ProductSubscriptionTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateProductSubscriptionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductSubscriptionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductSubscriptionTypeDataAsync,
                    () => Workflows.ProductSubscriptionTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateProductSubscriptionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductSubscriptionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductSubscriptionTypeDataAsync,
                    () => Workflows.ProductSubscriptionTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateProductSubscriptionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductSubscriptionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductSubscriptionTypeDataAsync,
                    () => Workflows.ProductSubscriptionTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateProductSubscriptionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductSubscriptionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductSubscriptionTypeDataAsync,
                    () => Workflows.ProductSubscriptionTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteProductSubscriptionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductSubscriptionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductSubscriptionTypeDataAsync,
                    () => Workflows.ProductSubscriptionTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteProductSubscriptionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductSubscriptionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductSubscriptionTypeDataAsync,
                    () => Workflows.ProductSubscriptionTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearProductSubscriptionTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearProductSubscriptionTypeCache request)
        {
            await ClearCachedProductSubscriptionTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedProductSubscriptionTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetProductSubscriptionTypes>(string.Empty),
                    UrnId.Create<GetProductSubscriptionTypeByID>(string.Empty),
                    UrnId.Create<GetProductSubscriptionTypeByKey>(string.Empty),
                    UrnId.Create<CheckProductSubscriptionTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckProductSubscriptionTypeExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ProductSubscriptionTypeService : ProductSubscriptionTypeServiceBase { }
}
