// <autogenerated>
// <copyright file="AppliedSalesQuoteItemDiscountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the applied sales quote item discount service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of applied sales quote item discounts.</summary>
    /// <seealso cref="AppliedSalesQuoteItemDiscountSearchModel"/>
    /// <seealso cref="IReturn{AppliedSalesQuoteItemDiscountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesQuoteItemDiscounts", "GET", Priority = 1,
            Summary = "Use to get a list of applied sales quote item discounts")]
    public partial class GetAppliedSalesQuoteItemDiscounts : AppliedSalesQuoteItemDiscountSearchModel, IReturn<AppliedSalesQuoteItemDiscountPagedResults> { }

    /// <summary>A ServiceStack Route to get applied sales quote item discounts for connect.</summary>
    /// <seealso cref="AppliedSalesQuoteItemDiscountSearchModel"/>
    /// <seealso cref="IReturn{List{AppliedSalesQuoteItemDiscountModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteItemDiscountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all applied sales quote item discounts")]
    public partial class GetAppliedSalesQuoteItemDiscountsForConnect : AppliedSalesQuoteItemDiscountSearchModel, IReturn<List<AppliedSalesQuoteItemDiscountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all applied sales quote item discounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteItemDiscountsDigest", "GET",
            Summary = "Use to get a hash representing each applied sales quote item discounts")]
    public partial class GetAppliedSalesQuoteItemDiscountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get applied sales quote item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AppliedSalesQuoteItemDiscountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesQuoteItemDiscount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sales quote item discount")]
    public partial class GetAppliedSalesQuoteItemDiscountByID : ImplementsIDBase, IReturn<AppliedSalesQuoteItemDiscountModel> { }

    /// <summary>A ServiceStack Route to get applied sales quote item discount.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AppliedSalesQuoteItemDiscountModel}"/>
    [PublicAPI,
        Route("/Discounts/AppliedSalesQuoteItemDiscount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sales quote item discount by the custom key")]
    public partial class GetAppliedSalesQuoteItemDiscountByKey : ImplementsKeyBase, IReturn<AppliedSalesQuoteItemDiscountModel> { }

    /// <summary>A ServiceStack Route to check applied sales quote item discount exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteItemDiscount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSalesQuoteItemDiscountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check applied sales quote item discount exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteItemDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteItemDiscount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSalesQuoteItemDiscountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create applied sales quote item discount.</summary>
    /// <seealso cref="AppliedSalesQuoteItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteItemDiscount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteItemDiscount/Create", "POST", Priority = 1,
            Summary = "Use to create a new applied sales quote item discount.")]
    public partial class CreateAppliedSalesQuoteItemDiscount : AppliedSalesQuoteItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert applied sales quote item discount.</summary>
    /// <seealso cref="AppliedSalesQuoteItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteItemDiscount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing applied sales quote item discount (as needed).")]
    public partial class UpsertAppliedSalesQuoteItemDiscount : AppliedSalesQuoteItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update applied sales quote item discount.</summary>
    /// <seealso cref="AppliedSalesQuoteItemDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteItemDiscount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteItemDiscount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing applied sales quote item discount.")]
    public partial class UpdateAppliedSalesQuoteItemDiscount : AppliedSalesQuoteItemDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate applied sales quote item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteItemDiscount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteItemDiscount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sales quote item discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSalesQuoteItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate applied sales quote item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteItemDiscount.Deactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteItemDiscount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sales quote item discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSalesQuoteItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sales quote item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteItemDiscount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteItemDiscount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sales quote item discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSalesQuoteItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sales quote item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteItemDiscount.Reactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteItemDiscount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sales quote item discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSalesQuoteItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sales quote item discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteItemDiscount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteItemDiscount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific applied sales quote item discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSalesQuoteItemDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sales quote item discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesQuoteItemDiscount.Delete"),
        PublicAPI,
        Route("/Discounts/AppliedSalesQuoteItemDiscount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific applied sales quote item discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSalesQuoteItemDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear applied sales quote item discount cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesQuoteItemDiscount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all applied sales quote item discount calls.")]
    public class ClearAppliedSalesQuoteItemDiscountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AppliedSalesQuoteItemDiscountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAppliedSalesQuoteItemDiscounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesQuoteItemDiscounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAppliedSalesQuoteItemDiscountModel, AppliedSalesQuoteItemDiscountModel, IAppliedSalesQuoteItemDiscountSearchModel, AppliedSalesQuoteItemDiscountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AppliedSalesQuoteItemDiscounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesQuoteItemDiscountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAppliedSalesQuoteItemDiscountsForConnect request)
        {
            return await Workflows.AppliedSalesQuoteItemDiscounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesQuoteItemDiscountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesQuoteItemDiscountsDigest request)
        {
            return await Workflows.AppliedSalesQuoteItemDiscounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAppliedSalesQuoteItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesQuoteItemDiscountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AppliedSalesQuoteItemDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesQuoteItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesQuoteItemDiscountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AppliedSalesQuoteItemDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAppliedSalesQuoteItemDiscountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSalesQuoteItemDiscountExistsByID request)
        {
            return await Workflows.AppliedSalesQuoteItemDiscounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppliedSalesQuoteItemDiscountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSalesQuoteItemDiscountExistsByKey request)
        {
            return await Workflows.AppliedSalesQuoteItemDiscounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAppliedSalesQuoteItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAppliedSalesQuoteItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteItemDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteItemDiscounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAppliedSalesQuoteItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAppliedSalesQuoteItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteItemDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteItemDiscounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAppliedSalesQuoteItemDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAppliedSalesQuoteItemDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteItemDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteItemDiscounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSalesQuoteItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSalesQuoteItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteItemDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteItemDiscounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSalesQuoteItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSalesQuoteItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteItemDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteItemDiscounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSalesQuoteItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSalesQuoteItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteItemDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteItemDiscounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSalesQuoteItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSalesQuoteItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteItemDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteItemDiscounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAppliedSalesQuoteItemDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSalesQuoteItemDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteItemDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteItemDiscounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAppliedSalesQuoteItemDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSalesQuoteItemDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesQuoteItemDiscountDataAsync,
                    () => Workflows.AppliedSalesQuoteItemDiscounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAppliedSalesQuoteItemDiscountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAppliedSalesQuoteItemDiscountCache request)
        {
            await ClearCachedAppliedSalesQuoteItemDiscountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAppliedSalesQuoteItemDiscountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAppliedSalesQuoteItemDiscounts>(string.Empty),
                    UrnId.Create<GetAppliedSalesQuoteItemDiscountByID>(string.Empty),
                    UrnId.Create<GetAppliedSalesQuoteItemDiscountByKey>(string.Empty),
                    UrnId.Create<CheckAppliedSalesQuoteItemDiscountExistsByID>(string.Empty),
                    UrnId.Create<CheckAppliedSalesQuoteItemDiscountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AppliedSalesQuoteItemDiscountService : AppliedSalesQuoteItemDiscountServiceBase { }
}
