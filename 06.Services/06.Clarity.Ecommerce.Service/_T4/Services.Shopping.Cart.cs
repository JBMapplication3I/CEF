// <autogenerated>
// <copyright file="CartService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the cart service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of carts.</summary>
    /// <seealso cref="CartSearchModel"/>
    /// <seealso cref="IReturn{CartPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/Carts", "GET", Priority = 1,
            Summary = "Use to get a list of carts")]
    public partial class GetCarts : CartSearchModel, IReturn<CartPagedResults> { }

    /// <summary>A ServiceStack Route to get carts for connect.</summary>
    /// <seealso cref="CartSearchModel"/>
    /// <seealso cref="IReturn{List{CartModel}}"/>
    [Authenticate, RequiredPermission("Shopping.Cart.View"),
        PublicAPI,
        Route("/Shopping/CartsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all carts")]
    public partial class GetCartsForConnect : CartSearchModel, IReturn<List<CartModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all carts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shopping.Cart.View"),
        PublicAPI,
        Route("/Shopping/CartsDigest", "GET",
            Summary = "Use to get a hash representing each carts")]
    public partial class GetCartsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get cart.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CartModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/Cart/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific cart")]
    public partial class GetCartByID : ImplementsIDBase, IReturn<CartModel> { }

    /// <summary>A ServiceStack Route to get cart.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CartModel}"/>
    [PublicAPI,
        Route("/Shopping/Cart/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific cart by the custom key")]
    public partial class GetCartByKey : ImplementsKeyBase, IReturn<CartModel> { }

    /// <summary>A ServiceStack Route to check cart exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.Cart.View"),
        PublicAPI,
        Route("/Shopping/Cart/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCartExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.Cart.View"),
        PublicAPI,
        Route("/Shopping/Cart/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCartExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create cart.</summary>
    /// <seealso cref="CartModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.Cart.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/Cart/Create", "POST", Priority = 1,
            Summary = "Use to create a new cart.")]
    public partial class CreateCart : CartModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert cart.</summary>
    /// <seealso cref="CartModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shopping/Cart/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing cart (as needed).")]
    public partial class UpsertCart : CartModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update cart.</summary>
    /// <seealso cref="CartModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.Cart.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/Cart/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing cart.")]
    public partial class UpdateCart : CartModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate cart.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.Cart.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/Cart/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart from the system [Soft-Delete]")]
    public partial class DeactivateCartByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate cart by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.Cart.Deactivate"),
        PublicAPI,
        Route("/Shopping/Cart/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart from the system [Soft-Delete]")]
    public partial class DeactivateCartByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.Cart.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/Cart/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.Cart.Reactivate"),
        PublicAPI,
        Route("/Shopping/Cart/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.Cart.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/Cart/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific cart from the system [Hard-Delete]")]
    public partial class DeleteCartByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.Cart.Delete"),
        PublicAPI,
        Route("/Shopping/Cart/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific cart from the system [Hard-Delete]")]
    public partial class DeleteCartByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear cart cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/Cart/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all cart calls.")]
    public class ClearCartCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CartServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCarts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCarts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICartModel, CartModel, ICartSearchModel, CartPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Carts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCartsForConnect request)
        {
            return await Workflows.Carts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartsDigest request)
        {
            return await Workflows.Carts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCartByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Carts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Carts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCartExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartExistsByID request)
        {
            return await Workflows.Carts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartExistsByKey request)
        {
            return await Workflows.Carts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCart"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCart request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartDataAsync,
                    () => Workflows.Carts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCart"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCart request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartDataAsync,
                    () => Workflows.Carts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCart"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCart request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartDataAsync,
                    () => Workflows.Carts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCartByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartDataAsync,
                    () => Workflows.Carts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCartByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartDataAsync,
                    () => Workflows.Carts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCartByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartDataAsync,
                    () => Workflows.Carts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCartByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartDataAsync,
                    () => Workflows.Carts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCartByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartDataAsync,
                    () => Workflows.Carts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCartByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartDataAsync,
                    () => Workflows.Carts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCartCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCartCache request)
        {
            await ClearCachedCartDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCartDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCarts>(string.Empty),
                    UrnId.Create<GetCartByID>(string.Empty),
                    UrnId.Create<GetCartByKey>(string.Empty),
                    UrnId.Create<CheckCartExistsByID>(string.Empty),
                    UrnId.Create<CheckCartExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CartService : CartServiceBase { }
}
