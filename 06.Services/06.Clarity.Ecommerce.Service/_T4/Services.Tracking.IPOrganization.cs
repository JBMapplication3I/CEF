// <autogenerated>
// <copyright file="IPOrganizationService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the ip organization service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of ip organizations.</summary>
    /// <seealso cref="IPOrganizationSearchModel"/>
    /// <seealso cref="IReturn{IPOrganizationPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/IPOrganizations", "GET", Priority = 1,
            Summary = "Use to get a list of ip organizations")]
    public partial class GetIPOrganizations : IPOrganizationSearchModel, IReturn<IPOrganizationPagedResults> { }

    /// <summary>A ServiceStack Route to get ip organizations for connect.</summary>
    /// <seealso cref="IPOrganizationSearchModel"/>
    /// <seealso cref="IReturn{List{IPOrganizationModel}}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganization.View"),
        PublicAPI,
        Route("/Tracking/IPOrganizationsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all ip organizations")]
    public partial class GetIPOrganizationsForConnect : IPOrganizationSearchModel, IReturn<List<IPOrganizationModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all ip organizations.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganization.View"),
        PublicAPI,
        Route("/Tracking/IPOrganizationsDigest", "GET",
            Summary = "Use to get a hash representing each ip organizations")]
    public partial class GetIPOrganizationsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get ip organization.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{IPOrganizationModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/IPOrganization/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific ip organization")]
    public partial class GetIPOrganizationByID : ImplementsIDBase, IReturn<IPOrganizationModel> { }

    /// <summary>A ServiceStack Route to get ip organization.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{IPOrganizationModel}"/>
    [PublicAPI,
        Route("/Tracking/IPOrganization/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific ip organization by the custom key")]
    public partial class GetIPOrganizationByKey : ImplementsKeyBase, IReturn<IPOrganizationModel> { }

    /// <summary>A ServiceStack Route to get ip organization.</summary>
    /// <seealso cref="IReturn{IPOrganizationModel}"/>
    [PublicAPI,
        Route("/Tracking/IPOrganization/Name", "GET", Priority = 1,
            Summary = "Use to get a specific ip organization by the name")]
    public partial class GetIPOrganizationByName : ImplementsNameBase, IReturn<IPOrganizationModel> { }

    /// <summary>A ServiceStack Route to check ip organization exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganization.View"),
        PublicAPI,
        Route("/Tracking/IPOrganization/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckIPOrganizationExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ip organization exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganization.View"),
        PublicAPI,
        Route("/Tracking/IPOrganization/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckIPOrganizationExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check ip organization exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganization.View"),
        PublicAPI,
        Route("/Tracking/IPOrganization/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckIPOrganizationExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create ip organization.</summary>
    /// <seealso cref="IPOrganizationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganization.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/IPOrganization/Create", "POST", Priority = 1,
            Summary = "Use to create a new ip organization.")]
    public partial class CreateIPOrganization : IPOrganizationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert ip organization.</summary>
    /// <seealso cref="IPOrganizationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tracking/IPOrganization/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing ip organization (as needed).")]
    public partial class UpsertIPOrganization : IPOrganizationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update ip organization.</summary>
    /// <seealso cref="IPOrganizationModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganization.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/IPOrganization/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing ip organization.")]
    public partial class UpdateIPOrganization : IPOrganizationModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate ip organization.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganization.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/IPOrganization/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ip organization from the system [Soft-Delete]")]
    public partial class DeactivateIPOrganizationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate ip organization by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganization.Deactivate"),
        PublicAPI,
        Route("/Tracking/IPOrganization/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific ip organization from the system [Soft-Delete]")]
    public partial class DeactivateIPOrganizationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ip organization.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganization.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/IPOrganization/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ip organization from the system [Restore from Soft-Delete]")]
    public partial class ReactivateIPOrganizationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate ip organization by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganization.Reactivate"),
        PublicAPI,
        Route("/Tracking/IPOrganization/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific ip organization from the system [Restore from Soft-Delete]")]
    public partial class ReactivateIPOrganizationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ip organization.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganization.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/IPOrganization/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific ip organization from the system [Hard-Delete]")]
    public partial class DeleteIPOrganizationByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete ip organization by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.IPOrganization.Delete"),
        PublicAPI,
        Route("/Tracking/IPOrganization/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific ip organization from the system [Hard-Delete]")]
    public partial class DeleteIPOrganizationByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear ip organization cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/IPOrganization/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all ip organization calls.")]
    public class ClearIPOrganizationCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class IPOrganizationServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetIPOrganizations"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetIPOrganizations request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IIPOrganizationModel, IPOrganizationModel, IIPOrganizationSearchModel, IPOrganizationPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.IPOrganizations)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetIPOrganizationsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetIPOrganizationsForConnect request)
        {
            return await Workflows.IPOrganizations.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetIPOrganizationsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetIPOrganizationsDigest request)
        {
            return await Workflows.IPOrganizations.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetIPOrganizationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetIPOrganizationByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.IPOrganizations, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetIPOrganizationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetIPOrganizationByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.IPOrganizations, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetIPOrganizationByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetIPOrganizationByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.IPOrganizations, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckIPOrganizationExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckIPOrganizationExistsByID request)
        {
            return await Workflows.IPOrganizations.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckIPOrganizationExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckIPOrganizationExistsByKey request)
        {
            return await Workflows.IPOrganizations.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckIPOrganizationExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckIPOrganizationExistsByName request)
        {
            return await Workflows.IPOrganizations.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertIPOrganization"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertIPOrganization request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationDataAsync,
                    () => Workflows.IPOrganizations.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateIPOrganization"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateIPOrganization request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationDataAsync,
                    () => Workflows.IPOrganizations.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateIPOrganization"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateIPOrganization request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationDataAsync,
                    () => Workflows.IPOrganizations.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateIPOrganizationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateIPOrganizationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationDataAsync,
                    () => Workflows.IPOrganizations.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateIPOrganizationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateIPOrganizationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationDataAsync,
                    () => Workflows.IPOrganizations.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateIPOrganizationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateIPOrganizationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationDataAsync,
                    () => Workflows.IPOrganizations.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateIPOrganizationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateIPOrganizationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationDataAsync,
                    () => Workflows.IPOrganizations.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteIPOrganizationByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteIPOrganizationByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationDataAsync,
                    () => Workflows.IPOrganizations.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteIPOrganizationByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteIPOrganizationByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedIPOrganizationDataAsync,
                    () => Workflows.IPOrganizations.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearIPOrganizationCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearIPOrganizationCache request)
        {
            await ClearCachedIPOrganizationDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedIPOrganizationDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetIPOrganizations>(string.Empty),
                    UrnId.Create<GetIPOrganizationByID>(string.Empty),
                    UrnId.Create<GetIPOrganizationByKey>(string.Empty),
                    UrnId.Create<GetIPOrganizationByName>(string.Empty),
                    UrnId.Create<CheckIPOrganizationExistsByID>(string.Empty),
                    UrnId.Create<CheckIPOrganizationExistsByKey>(string.Empty),
                    UrnId.Create<CheckIPOrganizationExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class IPOrganizationService : IPOrganizationServiceBase { }
}
