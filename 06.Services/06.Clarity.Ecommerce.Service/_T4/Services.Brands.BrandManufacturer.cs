// <autogenerated>
// <copyright file="BrandManufacturerService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the brand manufacturer service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of brand manufacturers.</summary>
    /// <seealso cref="BrandManufacturerSearchModel"/>
    /// <seealso cref="IReturn{BrandManufacturerPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandManufacturers", "GET", Priority = 1,
            Summary = "Use to get a list of brand manufacturers")]
    public partial class GetBrandManufacturers : BrandManufacturerSearchModel, IReturn<BrandManufacturerPagedResults> { }

    /// <summary>A ServiceStack Route to get brand manufacturers for connect.</summary>
    /// <seealso cref="BrandManufacturerSearchModel"/>
    /// <seealso cref="IReturn{List{BrandManufacturerModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandManufacturer.View"),
        PublicAPI,
        Route("/Brands/BrandManufacturersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all brand manufacturers")]
    public partial class GetBrandManufacturersForConnect : BrandManufacturerSearchModel, IReturn<List<BrandManufacturerModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all brand manufacturers.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandManufacturer.View"),
        PublicAPI,
        Route("/Brands/BrandManufacturersDigest", "GET",
            Summary = "Use to get a hash representing each brand manufacturers")]
    public partial class GetBrandManufacturersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get brand manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{BrandManufacturerModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandManufacturer/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific brand manufacturer")]
    public partial class GetBrandManufacturerByID : ImplementsIDBase, IReturn<BrandManufacturerModel> { }

    /// <summary>A ServiceStack Route to get brand manufacturer.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{BrandManufacturerModel}"/>
    [PublicAPI,
        Route("/Brands/BrandManufacturer/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific brand manufacturer by the custom key")]
    public partial class GetBrandManufacturerByKey : ImplementsKeyBase, IReturn<BrandManufacturerModel> { }

    /// <summary>A ServiceStack Route to check brand manufacturer exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandManufacturer.View"),
        PublicAPI,
        Route("/Brands/BrandManufacturer/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandManufacturerExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand manufacturer exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandManufacturer.View"),
        PublicAPI,
        Route("/Brands/BrandManufacturer/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandManufacturerExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create brand manufacturer.</summary>
    /// <seealso cref="BrandManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandManufacturer.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandManufacturer/Create", "POST", Priority = 1,
            Summary = "Use to create a new brand manufacturer.")]
    public partial class CreateBrandManufacturer : BrandManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert brand manufacturer.</summary>
    /// <seealso cref="BrandManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Brands/BrandManufacturer/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing brand manufacturer (as needed).")]
    public partial class UpsertBrandManufacturer : BrandManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update brand manufacturer.</summary>
    /// <seealso cref="BrandManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandManufacturer.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandManufacturer/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing brand manufacturer.")]
    public partial class UpdateBrandManufacturer : BrandManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate brand manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandManufacturer.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandManufacturer/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand manufacturer from the system [Soft-Delete]")]
    public partial class DeactivateBrandManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate brand manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandManufacturer.Deactivate"),
        PublicAPI,
        Route("/Brands/BrandManufacturer/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand manufacturer from the system [Soft-Delete]")]
    public partial class DeactivateBrandManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandManufacturer.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandManufacturer/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand manufacturer from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandManufacturer.Reactivate"),
        PublicAPI,
        Route("/Brands/BrandManufacturer/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand manufacturer from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandManufacturer.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandManufacturer/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific brand manufacturer from the system [Hard-Delete]")]
    public partial class DeleteBrandManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandManufacturer.Delete"),
        PublicAPI,
        Route("/Brands/BrandManufacturer/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific brand manufacturer from the system [Hard-Delete]")]
    public partial class DeleteBrandManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear brand manufacturer cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandManufacturer/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all brand manufacturer calls.")]
    public class ClearBrandManufacturerCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BrandManufacturerServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBrandManufacturers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandManufacturers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IBrandManufacturerModel, BrandManufacturerModel, IBrandManufacturerSearchModel, BrandManufacturerPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BrandManufacturers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandManufacturersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBrandManufacturersForConnect request)
        {
            return await Workflows.BrandManufacturers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandManufacturersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandManufacturersDigest request)
        {
            return await Workflows.BrandManufacturers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBrandManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandManufacturerByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BrandManufacturers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandManufacturerByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BrandManufacturers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBrandManufacturerExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandManufacturerExistsByID request)
        {
            return await Workflows.BrandManufacturers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandManufacturerExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandManufacturerExistsByKey request)
        {
            return await Workflows.BrandManufacturers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBrandManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBrandManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandManufacturerDataAsync,
                    () => Workflows.BrandManufacturers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBrandManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBrandManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandManufacturerDataAsync,
                    () => Workflows.BrandManufacturers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBrandManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBrandManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandManufacturerDataAsync,
                    () => Workflows.BrandManufacturers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBrandManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandManufacturerDataAsync,
                    () => Workflows.BrandManufacturers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBrandManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandManufacturerDataAsync,
                    () => Workflows.BrandManufacturers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBrandManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandManufacturerDataAsync,
                    () => Workflows.BrandManufacturers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBrandManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandManufacturerDataAsync,
                    () => Workflows.BrandManufacturers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBrandManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandManufacturerDataAsync,
                    () => Workflows.BrandManufacturers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBrandManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandManufacturerDataAsync,
                    () => Workflows.BrandManufacturers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBrandManufacturerCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBrandManufacturerCache request)
        {
            await ClearCachedBrandManufacturerDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBrandManufacturerDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBrandManufacturers>(string.Empty),
                    UrnId.Create<GetBrandManufacturerByID>(string.Empty),
                    UrnId.Create<GetBrandManufacturerByKey>(string.Empty),
                    UrnId.Create<CheckBrandManufacturerExistsByID>(string.Empty),
                    UrnId.Create<CheckBrandManufacturerExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BrandManufacturerService : BrandManufacturerServiceBase { }
}
