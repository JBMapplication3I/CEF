// <autogenerated>
// <copyright file="TaxDistrictService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the tax district service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of tax districts.</summary>
    /// <seealso cref="TaxDistrictSearchModel"/>
    /// <seealso cref="IReturn{TaxDistrictPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tax/TaxDistricts", "GET", Priority = 1,
            Summary = "Use to get a list of tax districts")]
    public partial class GetTaxDistricts : TaxDistrictSearchModel, IReturn<TaxDistrictPagedResults> { }

    /// <summary>A ServiceStack Route to get tax districts for connect.</summary>
    /// <seealso cref="TaxDistrictSearchModel"/>
    /// <seealso cref="IReturn{List{TaxDistrictModel}}"/>
    [Authenticate, RequiredPermission("Tax.TaxDistrict.View"),
        PublicAPI,
        Route("/Tax/TaxDistrictsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all tax districts")]
    public partial class GetTaxDistrictsForConnect : TaxDistrictSearchModel, IReturn<List<TaxDistrictModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all tax districts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tax.TaxDistrict.View"),
        PublicAPI,
        Route("/Tax/TaxDistrictsDigest", "GET",
            Summary = "Use to get a hash representing each tax districts")]
    public partial class GetTaxDistrictsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get tax district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TaxDistrictModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tax/TaxDistrict/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific tax district")]
    public partial class GetTaxDistrictByID : ImplementsIDBase, IReturn<TaxDistrictModel> { }

    /// <summary>A ServiceStack Route to get tax district.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TaxDistrictModel}"/>
    [PublicAPI,
        Route("/Tax/TaxDistrict/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific tax district by the custom key")]
    public partial class GetTaxDistrictByKey : ImplementsKeyBase, IReturn<TaxDistrictModel> { }

    /// <summary>A ServiceStack Route to get tax district.</summary>
    /// <seealso cref="IReturn{TaxDistrictModel}"/>
    [PublicAPI,
        Route("/Tax/TaxDistrict/Name", "GET", Priority = 1,
            Summary = "Use to get a specific tax district by the name")]
    public partial class GetTaxDistrictByName : ImplementsNameBase, IReturn<TaxDistrictModel> { }

    /// <summary>A ServiceStack Route to check tax district exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tax.TaxDistrict.View"),
        PublicAPI,
        Route("/Tax/TaxDistrict/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckTaxDistrictExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check tax district exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tax.TaxDistrict.View"),
        PublicAPI,
        Route("/Tax/TaxDistrict/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckTaxDistrictExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check tax district exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tax.TaxDistrict.View"),
        PublicAPI,
        Route("/Tax/TaxDistrict/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckTaxDistrictExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create tax district.</summary>
    /// <seealso cref="TaxDistrictModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tax.TaxDistrict.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxDistrict/Create", "POST", Priority = 1,
            Summary = "Use to create a new tax district.")]
    public partial class CreateTaxDistrict : TaxDistrictModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert tax district.</summary>
    /// <seealso cref="TaxDistrictModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tax/TaxDistrict/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing tax district (as needed).")]
    public partial class UpsertTaxDistrict : TaxDistrictModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update tax district.</summary>
    /// <seealso cref="TaxDistrictModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tax.TaxDistrict.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxDistrict/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing tax district.")]
    public partial class UpdateTaxDistrict : TaxDistrictModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate tax district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxDistrict.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxDistrict/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific tax district from the system [Soft-Delete]")]
    public partial class DeactivateTaxDistrictByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate tax district by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxDistrict.Deactivate"),
        PublicAPI,
        Route("/Tax/TaxDistrict/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific tax district from the system [Soft-Delete]")]
    public partial class DeactivateTaxDistrictByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate tax district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxDistrict.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxDistrict/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific tax district from the system [Restore from Soft-Delete]")]
    public partial class ReactivateTaxDistrictByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate tax district by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxDistrict.Reactivate"),
        PublicAPI,
        Route("/Tax/TaxDistrict/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific tax district from the system [Restore from Soft-Delete]")]
    public partial class ReactivateTaxDistrictByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete tax district.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxDistrict.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxDistrict/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific tax district from the system [Hard-Delete]")]
    public partial class DeleteTaxDistrictByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete tax district by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxDistrict.Delete"),
        PublicAPI,
        Route("/Tax/TaxDistrict/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific tax district from the system [Hard-Delete]")]
    public partial class DeleteTaxDistrictByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear tax district cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tax/TaxDistrict/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all tax district calls.")]
    public class ClearTaxDistrictCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class TaxDistrictServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetTaxDistricts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxDistricts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITaxDistrictModel, TaxDistrictModel, ITaxDistrictSearchModel, TaxDistrictPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.TaxDistricts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetTaxDistrictsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetTaxDistrictsForConnect request)
        {
            return await Workflows.TaxDistricts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetTaxDistrictsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxDistrictsDigest request)
        {
            return await Workflows.TaxDistricts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetTaxDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxDistrictByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.TaxDistricts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetTaxDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxDistrictByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.TaxDistricts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetTaxDistrictByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxDistrictByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.TaxDistricts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckTaxDistrictExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckTaxDistrictExistsByID request)
        {
            return await Workflows.TaxDistricts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckTaxDistrictExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckTaxDistrictExistsByKey request)
        {
            return await Workflows.TaxDistricts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckTaxDistrictExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckTaxDistrictExistsByName request)
        {
            return await Workflows.TaxDistricts.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertTaxDistrict"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertTaxDistrict request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxDistrictDataAsync,
                    () => Workflows.TaxDistricts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateTaxDistrict"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateTaxDistrict request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxDistrictDataAsync,
                    () => Workflows.TaxDistricts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateTaxDistrict"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateTaxDistrict request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxDistrictDataAsync,
                    () => Workflows.TaxDistricts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateTaxDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateTaxDistrictByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxDistrictDataAsync,
                    () => Workflows.TaxDistricts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateTaxDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateTaxDistrictByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxDistrictDataAsync,
                    () => Workflows.TaxDistricts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateTaxDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateTaxDistrictByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxDistrictDataAsync,
                    () => Workflows.TaxDistricts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateTaxDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateTaxDistrictByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxDistrictDataAsync,
                    () => Workflows.TaxDistricts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteTaxDistrictByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteTaxDistrictByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxDistrictDataAsync,
                    () => Workflows.TaxDistricts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteTaxDistrictByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteTaxDistrictByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxDistrictDataAsync,
                    () => Workflows.TaxDistricts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearTaxDistrictCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearTaxDistrictCache request)
        {
            await ClearCachedTaxDistrictDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedTaxDistrictDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetTaxDistricts>(string.Empty),
                    UrnId.Create<GetTaxDistrictByID>(string.Empty),
                    UrnId.Create<GetTaxDistrictByKey>(string.Empty),
                    UrnId.Create<GetTaxDistrictByName>(string.Empty),
                    UrnId.Create<CheckTaxDistrictExistsByID>(string.Empty),
                    UrnId.Create<CheckTaxDistrictExistsByKey>(string.Empty),
                    UrnId.Create<CheckTaxDistrictExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class TaxDistrictService : TaxDistrictServiceBase { }
}
