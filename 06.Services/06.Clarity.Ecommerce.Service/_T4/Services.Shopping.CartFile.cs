// <autogenerated>
// <copyright file="CartFileService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the cart file service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of cart files.</summary>
    /// <seealso cref="CartFileSearchModel"/>
    /// <seealso cref="IReturn{CartFilePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartFiles", "GET", Priority = 1,
            Summary = "Use to get a list of cart files")]
    public partial class GetCartFiles : CartFileSearchModel, IReturn<CartFilePagedResults> { }

    /// <summary>A ServiceStack Route to get cart files for connect.</summary>
    /// <seealso cref="CartFileSearchModel"/>
    /// <seealso cref="IReturn{List{CartFileModel}}"/>
    [Authenticate, RequiredPermission("Shopping.CartFile.View"),
        PublicAPI,
        Route("/Shopping/CartFilesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all cart files")]
    public partial class GetCartFilesForConnect : CartFileSearchModel, IReturn<List<CartFileModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all cart files.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shopping.CartFile.View"),
        PublicAPI,
        Route("/Shopping/CartFilesDigest", "GET",
            Summary = "Use to get a hash representing each cart files")]
    public partial class GetCartFilesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get cart file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CartFileModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartFile/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific cart file")]
    public partial class GetCartFileByID : ImplementsIDBase, IReturn<CartFileModel> { }

    /// <summary>A ServiceStack Route to get cart file.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CartFileModel}"/>
    [PublicAPI,
        Route("/Shopping/CartFile/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific cart file by the custom key")]
    public partial class GetCartFileByKey : ImplementsKeyBase, IReturn<CartFileModel> { }

    /// <summary>A ServiceStack Route to get cart file.</summary>
    /// <seealso cref="IReturn{CartFileModel}"/>
    [PublicAPI,
        Route("/Shopping/CartFile/Name", "GET", Priority = 1,
            Summary = "Use to get a specific cart file by the name")]
    public partial class GetCartFileByName : ImplementsNameBase, IReturn<CartFileModel> { }

    /// <summary>A ServiceStack Route to get cart file.</summary>
    /// <seealso cref="IReturn{CartFileModel}"/>
    [PublicAPI,
        Route("/Shopping/CartFile/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific cart file by the SEO URL")]
    public partial class GetCartFileBySeoUrl : ImplementsSeoUrlBase, IReturn<CartFileModel> { }

    /// <summary>A ServiceStack Route to check cart file exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartFile.View"),
        PublicAPI,
        Route("/Shopping/CartFile/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCartFileExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart file exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartFile.View"),
        PublicAPI,
        Route("/Shopping/CartFile/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCartFileExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart file exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartFile.View"),
        PublicAPI,
        Route("/Shopping/CartFile/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCartFileExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check cart file exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shopping.CartFile.View"),
        PublicAPI,
        Route("/Shopping/CartFile/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckCartFileExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create cart file.</summary>
    /// <seealso cref="CartFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.CartFile.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartFile/Create", "POST", Priority = 1,
            Summary = "Use to create a new cart file.")]
    public partial class CreateCartFile : CartFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert cart file.</summary>
    /// <seealso cref="CartFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shopping/CartFile/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing cart file (as needed).")]
    public partial class UpsertCartFile : CartFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update cart file.</summary>
    /// <seealso cref="CartFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shopping.CartFile.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartFile/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing cart file.")]
    public partial class UpdateCartFile : CartFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate cart file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartFile.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartFile/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart file from the system [Soft-Delete]")]
    public partial class DeactivateCartFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate cart file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartFile.Deactivate"),
        PublicAPI,
        Route("/Shopping/CartFile/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific cart file from the system [Soft-Delete]")]
    public partial class DeactivateCartFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartFile.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartFile/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate cart file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartFile.Reactivate"),
        PublicAPI,
        Route("/Shopping/CartFile/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific cart file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCartFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartFile.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shopping/CartFile/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific cart file from the system [Hard-Delete]")]
    public partial class DeleteCartFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete cart file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shopping.CartFile.Delete"),
        PublicAPI,
        Route("/Shopping/CartFile/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific cart file from the system [Hard-Delete]")]
    public partial class DeleteCartFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear cart file cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shopping/CartFile/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all cart file calls.")]
    public class ClearCartFileCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CartFileServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCartFiles"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartFiles request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICartFileModel, CartFileModel, ICartFileSearchModel, CartFilePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CartFiles)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartFilesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCartFilesForConnect request)
        {
            return await Workflows.CartFiles.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartFilesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartFilesDigest request)
        {
            return await Workflows.CartFiles.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCartFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartFileByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CartFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartFileByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CartFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartFileByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartFileByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CartFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCartFileBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCartFileBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.CartFiles, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCartFileExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartFileExistsByID request)
        {
            return await Workflows.CartFiles.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartFileExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartFileExistsByKey request)
        {
            return await Workflows.CartFiles.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartFileExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartFileExistsByName request)
        {
            return await Workflows.CartFiles.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCartFileExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCartFileExistsBySeoUrl request)
        {
            return await Workflows.CartFiles.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCartFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCartFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartFileDataAsync,
                    () => Workflows.CartFiles.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCartFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCartFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartFileDataAsync,
                    () => Workflows.CartFiles.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCartFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCartFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartFileDataAsync,
                    () => Workflows.CartFiles.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCartFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartFileDataAsync,
                    () => Workflows.CartFiles.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCartFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCartFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartFileDataAsync,
                    () => Workflows.CartFiles.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCartFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartFileDataAsync,
                    () => Workflows.CartFiles.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCartFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCartFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartFileDataAsync,
                    () => Workflows.CartFiles.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCartFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartFileDataAsync,
                    () => Workflows.CartFiles.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCartFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCartFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCartFileDataAsync,
                    () => Workflows.CartFiles.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCartFileCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCartFileCache request)
        {
            await ClearCachedCartFileDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCartFileDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCartFiles>(string.Empty),
                    UrnId.Create<GetCartFileByID>(string.Empty),
                    UrnId.Create<GetCartFileByKey>(string.Empty),
                    UrnId.Create<GetCartFileByName>(string.Empty),
                    UrnId.Create<GetCartFileBySeoUrl>(string.Empty),
                    UrnId.Create<CheckCartFileExistsByID>(string.Empty),
                    UrnId.Create<CheckCartFileExistsByKey>(string.Empty),
                    UrnId.Create<CheckCartFileExistsByName>(string.Empty),
                    UrnId.Create<CheckCartFileExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CartFileService : CartFileServiceBase { }
}
