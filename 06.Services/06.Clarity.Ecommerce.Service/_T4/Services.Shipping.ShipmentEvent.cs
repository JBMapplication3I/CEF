// <autogenerated>
// <copyright file="ShipmentEventService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the shipment event service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of shipment events.</summary>
    /// <seealso cref="ShipmentEventSearchModel"/>
    /// <seealso cref="IReturn{ShipmentEventPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipmentEvents", "GET", Priority = 1,
            Summary = "Use to get a list of shipment events")]
    public partial class GetShipmentEvents : ShipmentEventSearchModel, IReturn<ShipmentEventPagedResults> { }

    /// <summary>A ServiceStack Route to get shipment events for connect.</summary>
    /// <seealso cref="ShipmentEventSearchModel"/>
    /// <seealso cref="IReturn{List{ShipmentEventModel}}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentEvent.View"),
        PublicAPI,
        Route("/Shipping/ShipmentEventsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all shipment events")]
    public partial class GetShipmentEventsForConnect : ShipmentEventSearchModel, IReturn<List<ShipmentEventModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all shipment events.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentEvent.View"),
        PublicAPI,
        Route("/Shipping/ShipmentEventsDigest", "GET",
            Summary = "Use to get a hash representing each shipment events")]
    public partial class GetShipmentEventsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get shipment event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ShipmentEventModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipmentEvent/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific shipment event")]
    public partial class GetShipmentEventByID : ImplementsIDBase, IReturn<ShipmentEventModel> { }

    /// <summary>A ServiceStack Route to get shipment event.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ShipmentEventModel}"/>
    [PublicAPI,
        Route("/Shipping/ShipmentEvent/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific shipment event by the custom key")]
    public partial class GetShipmentEventByKey : ImplementsKeyBase, IReturn<ShipmentEventModel> { }

    /// <summary>A ServiceStack Route to check shipment event exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentEvent.View"),
        PublicAPI,
        Route("/Shipping/ShipmentEvent/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckShipmentEventExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check shipment event exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentEvent.View"),
        PublicAPI,
        Route("/Shipping/ShipmentEvent/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckShipmentEventExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create shipment event.</summary>
    /// <seealso cref="ShipmentEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentEvent.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentEvent/Create", "POST", Priority = 1,
            Summary = "Use to create a new shipment event.")]
    public partial class CreateShipmentEvent : ShipmentEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert shipment event.</summary>
    /// <seealso cref="ShipmentEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shipping/ShipmentEvent/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing shipment event (as needed).")]
    public partial class UpsertShipmentEvent : ShipmentEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update shipment event.</summary>
    /// <seealso cref="ShipmentEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentEvent.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentEvent/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing shipment event.")]
    public partial class UpdateShipmentEvent : ShipmentEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate shipment event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentEvent.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentEvent/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific shipment event from the system [Soft-Delete]")]
    public partial class DeactivateShipmentEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate shipment event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentEvent.Deactivate"),
        PublicAPI,
        Route("/Shipping/ShipmentEvent/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific shipment event from the system [Soft-Delete]")]
    public partial class DeactivateShipmentEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate shipment event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentEvent.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentEvent/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific shipment event from the system [Restore from Soft-Delete]")]
    public partial class ReactivateShipmentEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate shipment event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentEvent.Reactivate"),
        PublicAPI,
        Route("/Shipping/ShipmentEvent/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific shipment event from the system [Restore from Soft-Delete]")]
    public partial class ReactivateShipmentEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete shipment event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentEvent.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/ShipmentEvent/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific shipment event from the system [Hard-Delete]")]
    public partial class DeleteShipmentEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete shipment event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.ShipmentEvent.Delete"),
        PublicAPI,
        Route("/Shipping/ShipmentEvent/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific shipment event from the system [Hard-Delete]")]
    public partial class DeleteShipmentEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear shipment event cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/ShipmentEvent/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all shipment event calls.")]
    public class ClearShipmentEventCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ShipmentEventServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetShipmentEvents"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentEvents request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IShipmentEventModel, ShipmentEventModel, IShipmentEventSearchModel, ShipmentEventPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ShipmentEvents)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentEventsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetShipmentEventsForConnect request)
        {
            return await Workflows.ShipmentEvents.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentEventsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentEventsDigest request)
        {
            return await Workflows.ShipmentEvents.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetShipmentEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentEventByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ShipmentEvents, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetShipmentEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetShipmentEventByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ShipmentEvents, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckShipmentEventExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipmentEventExistsByID request)
        {
            return await Workflows.ShipmentEvents.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckShipmentEventExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckShipmentEventExistsByKey request)
        {
            return await Workflows.ShipmentEvents.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertShipmentEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertShipmentEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentEventDataAsync,
                    () => Workflows.ShipmentEvents.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateShipmentEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateShipmentEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentEventDataAsync,
                    () => Workflows.ShipmentEvents.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateShipmentEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateShipmentEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentEventDataAsync,
                    () => Workflows.ShipmentEvents.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateShipmentEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateShipmentEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentEventDataAsync,
                    () => Workflows.ShipmentEvents.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateShipmentEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateShipmentEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentEventDataAsync,
                    () => Workflows.ShipmentEvents.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateShipmentEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateShipmentEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentEventDataAsync,
                    () => Workflows.ShipmentEvents.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateShipmentEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateShipmentEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentEventDataAsync,
                    () => Workflows.ShipmentEvents.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteShipmentEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteShipmentEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentEventDataAsync,
                    () => Workflows.ShipmentEvents.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteShipmentEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteShipmentEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedShipmentEventDataAsync,
                    () => Workflows.ShipmentEvents.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearShipmentEventCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearShipmentEventCache request)
        {
            await ClearCachedShipmentEventDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedShipmentEventDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetShipmentEvents>(string.Empty),
                    UrnId.Create<GetShipmentEventByID>(string.Empty),
                    UrnId.Create<GetShipmentEventByKey>(string.Empty),
                    UrnId.Create<CheckShipmentEventExistsByID>(string.Empty),
                    UrnId.Create<CheckShipmentEventExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ShipmentEventService : ShipmentEventServiceBase { }
}
