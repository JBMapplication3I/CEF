// <autogenerated>
// <copyright file="FranchiseManufacturerService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise manufacturer service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise manufacturers.</summary>
    /// <seealso cref="FranchiseManufacturerSearchModel"/>
    /// <seealso cref="IReturn{FranchiseManufacturerPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseManufacturers", "GET", Priority = 1,
            Summary = "Use to get a list of franchise manufacturers")]
    public partial class GetFranchiseManufacturers : FranchiseManufacturerSearchModel, IReturn<FranchiseManufacturerPagedResults> { }

    /// <summary>A ServiceStack Route to get franchise manufacturers for connect.</summary>
    /// <seealso cref="FranchiseManufacturerSearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseManufacturerModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseManufacturer.View"),
        PublicAPI,
        Route("/Franchises/FranchiseManufacturersForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise manufacturers")]
    public partial class GetFranchiseManufacturersForConnect : FranchiseManufacturerSearchModel, IReturn<List<FranchiseManufacturerModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise manufacturers.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseManufacturer.View"),
        PublicAPI,
        Route("/Franchises/FranchiseManufacturersDigest", "GET",
            Summary = "Use to get a hash representing each franchise manufacturers")]
    public partial class GetFranchiseManufacturersDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseManufacturerModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseManufacturer/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise manufacturer")]
    public partial class GetFranchiseManufacturerByID : ImplementsIDBase, IReturn<FranchiseManufacturerModel> { }

    /// <summary>A ServiceStack Route to get franchise manufacturer.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseManufacturerModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseManufacturer/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise manufacturer by the custom key")]
    public partial class GetFranchiseManufacturerByKey : ImplementsKeyBase, IReturn<FranchiseManufacturerModel> { }

    /// <summary>A ServiceStack Route to check franchise manufacturer exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseManufacturer.View"),
        PublicAPI,
        Route("/Franchises/FranchiseManufacturer/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseManufacturerExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise manufacturer exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseManufacturer.View"),
        PublicAPI,
        Route("/Franchises/FranchiseManufacturer/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseManufacturerExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise manufacturer.</summary>
    /// <seealso cref="FranchiseManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseManufacturer.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseManufacturer/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise manufacturer.")]
    public partial class CreateFranchiseManufacturer : FranchiseManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise manufacturer.</summary>
    /// <seealso cref="FranchiseManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseManufacturer/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise manufacturer (as needed).")]
    public partial class UpsertFranchiseManufacturer : FranchiseManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise manufacturer.</summary>
    /// <seealso cref="FranchiseManufacturerModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseManufacturer.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseManufacturer/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise manufacturer.")]
    public partial class UpdateFranchiseManufacturer : FranchiseManufacturerModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseManufacturer.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseManufacturer/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise manufacturer from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseManufacturer.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseManufacturer/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise manufacturer from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseManufacturer.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseManufacturer/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise manufacturer from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseManufacturer.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseManufacturer/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise manufacturer from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise manufacturer.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseManufacturer.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseManufacturer/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise manufacturer from the system [Hard-Delete]")]
    public partial class DeleteFranchiseManufacturerByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise manufacturer by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseManufacturer.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseManufacturer/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise manufacturer from the system [Hard-Delete]")]
    public partial class DeleteFranchiseManufacturerByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise manufacturer cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseManufacturer/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise manufacturer calls.")]
    public class ClearFranchiseManufacturerCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseManufacturerServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseManufacturers"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseManufacturers request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseManufacturerModel, FranchiseManufacturerModel, IFranchiseManufacturerSearchModel, FranchiseManufacturerPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseManufacturers)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseManufacturersForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseManufacturersForConnect request)
        {
            return await Workflows.FranchiseManufacturers.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseManufacturersDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseManufacturersDigest request)
        {
            return await Workflows.FranchiseManufacturers.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseManufacturerByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseManufacturers, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseManufacturerByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseManufacturers, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseManufacturerExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseManufacturerExistsByID request)
        {
            return await Workflows.FranchiseManufacturers.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseManufacturerExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseManufacturerExistsByKey request)
        {
            return await Workflows.FranchiseManufacturers.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseManufacturerDataAsync,
                    () => Workflows.FranchiseManufacturers.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseManufacturerDataAsync,
                    () => Workflows.FranchiseManufacturers.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseManufacturer"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseManufacturer request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseManufacturerDataAsync,
                    () => Workflows.FranchiseManufacturers.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseManufacturerDataAsync,
                    () => Workflows.FranchiseManufacturers.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseManufacturerDataAsync,
                    () => Workflows.FranchiseManufacturers.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseManufacturerDataAsync,
                    () => Workflows.FranchiseManufacturers.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseManufacturerDataAsync,
                    () => Workflows.FranchiseManufacturers.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseManufacturerByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseManufacturerByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseManufacturerDataAsync,
                    () => Workflows.FranchiseManufacturers.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseManufacturerByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseManufacturerByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseManufacturerDataAsync,
                    () => Workflows.FranchiseManufacturers.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseManufacturerCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseManufacturerCache request)
        {
            await ClearCachedFranchiseManufacturerDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseManufacturerDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseManufacturers>(string.Empty),
                    UrnId.Create<GetFranchiseManufacturerByID>(string.Empty),
                    UrnId.Create<GetFranchiseManufacturerByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseManufacturerExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseManufacturerExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseManufacturerService : FranchiseManufacturerServiceBase { }
}
