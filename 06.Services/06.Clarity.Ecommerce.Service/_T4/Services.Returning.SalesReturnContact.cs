// <autogenerated>
// <copyright file="SalesReturnContactService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales return contact service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales return contacts.</summary>
    /// <seealso cref="SalesReturnContactSearchModel"/>
    /// <seealso cref="IReturn{SalesReturnContactPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturnContacts", "GET", Priority = 1,
            Summary = "Use to get a list of sales return contacts")]
    public partial class GetSalesReturnContacts : SalesReturnContactSearchModel, IReturn<SalesReturnContactPagedResults> { }

    /// <summary>A ServiceStack Route to get sales return contacts for connect.</summary>
    /// <seealso cref="SalesReturnContactSearchModel"/>
    /// <seealso cref="IReturn{List{SalesReturnContactModel}}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnContact.View"),
        PublicAPI,
        Route("/Returning/SalesReturnContactsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales return contacts")]
    public partial class GetSalesReturnContactsForConnect : SalesReturnContactSearchModel, IReturn<List<SalesReturnContactModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales return contacts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnContact.View"),
        PublicAPI,
        Route("/Returning/SalesReturnContactsDigest", "GET",
            Summary = "Use to get a hash representing each sales return contacts")]
    public partial class GetSalesReturnContactsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales return contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesReturnContactModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturnContact/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales return contact")]
    public partial class GetSalesReturnContactByID : ImplementsIDBase, IReturn<SalesReturnContactModel> { }

    /// <summary>A ServiceStack Route to get sales return contact.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesReturnContactModel}"/>
    [PublicAPI,
        Route("/Returning/SalesReturnContact/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales return contact by the custom key")]
    public partial class GetSalesReturnContactByKey : ImplementsKeyBase, IReturn<SalesReturnContactModel> { }

    /// <summary>A ServiceStack Route to check sales return contact exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnContact.View"),
        PublicAPI,
        Route("/Returning/SalesReturnContact/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnContactExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales return contact exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnContact.View"),
        PublicAPI,
        Route("/Returning/SalesReturnContact/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesReturnContactExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales return contact.</summary>
    /// <seealso cref="SalesReturnContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnContact.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnContact/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales return contact.")]
    public partial class CreateSalesReturnContact : SalesReturnContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales return contact.</summary>
    /// <seealso cref="SalesReturnContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Returning/SalesReturnContact/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales return contact (as needed).")]
    public partial class UpsertSalesReturnContact : SalesReturnContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales return contact.</summary>
    /// <seealso cref="SalesReturnContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnContact.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnContact/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales return contact.")]
    public partial class UpdateSalesReturnContact : SalesReturnContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales return contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnContact.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnContact/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales return contact from the system [Soft-Delete]")]
    public partial class DeactivateSalesReturnContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales return contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnContact.Deactivate"),
        PublicAPI,
        Route("/Returning/SalesReturnContact/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales return contact from the system [Soft-Delete]")]
    public partial class DeactivateSalesReturnContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales return contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnContact.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnContact/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales return contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesReturnContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales return contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnContact.Reactivate"),
        PublicAPI,
        Route("/Returning/SalesReturnContact/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales return contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesReturnContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales return contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnContact.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Returning/SalesReturnContact/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales return contact from the system [Hard-Delete]")]
    public partial class DeleteSalesReturnContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales return contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Returning.SalesReturnContact.Delete"),
        PublicAPI,
        Route("/Returning/SalesReturnContact/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales return contact from the system [Hard-Delete]")]
    public partial class DeleteSalesReturnContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales return contact cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Returning/SalesReturnContact/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales return contact calls.")]
    public class ClearSalesReturnContactCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesReturnContactServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesReturnContacts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnContacts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesReturnContactModel, SalesReturnContactModel, ISalesReturnContactSearchModel, SalesReturnContactPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesReturnContacts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnContactsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesReturnContactsForConnect request)
        {
            return await Workflows.SalesReturnContacts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnContactsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnContactsDigest request)
        {
            return await Workflows.SalesReturnContacts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesReturnContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnContactByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesReturnContacts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesReturnContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesReturnContactByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesReturnContacts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesReturnContactExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnContactExistsByID request)
        {
            return await Workflows.SalesReturnContacts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesReturnContactExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesReturnContactExistsByKey request)
        {
            return await Workflows.SalesReturnContacts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesReturnContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesReturnContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnContactDataAsync,
                    () => Workflows.SalesReturnContacts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesReturnContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesReturnContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnContactDataAsync,
                    () => Workflows.SalesReturnContacts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesReturnContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesReturnContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnContactDataAsync,
                    () => Workflows.SalesReturnContacts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesReturnContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesReturnContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnContactDataAsync,
                    () => Workflows.SalesReturnContacts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesReturnContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesReturnContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnContactDataAsync,
                    () => Workflows.SalesReturnContacts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesReturnContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesReturnContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnContactDataAsync,
                    () => Workflows.SalesReturnContacts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesReturnContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesReturnContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnContactDataAsync,
                    () => Workflows.SalesReturnContacts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesReturnContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesReturnContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnContactDataAsync,
                    () => Workflows.SalesReturnContacts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesReturnContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesReturnContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesReturnContactDataAsync,
                    () => Workflows.SalesReturnContacts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesReturnContactCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesReturnContactCache request)
        {
            await ClearCachedSalesReturnContactDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesReturnContactDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesReturnContacts>(string.Empty),
                    UrnId.Create<GetSalesReturnContactByID>(string.Empty),
                    UrnId.Create<GetSalesReturnContactByKey>(string.Empty),
                    UrnId.Create<CheckSalesReturnContactExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesReturnContactExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesReturnContactService : SalesReturnContactServiceBase { }
}
