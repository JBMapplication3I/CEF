// <autogenerated>
// <copyright file="RecordVersionTypeService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the record version type service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of record version types.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{RecordVersionTypePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/RecordVersionTypes", "GET", Priority = 1,
            Summary = "Use to get a list of record version types")]
    public partial class GetRecordVersionTypes : TypeSearchModel, IReturn<RecordVersionTypePagedResults> { }

    /// <summary>A ServiceStack Route to get record version types for connect.</summary>
    /// <seealso cref="TypeSearchModel"/>
    /// <seealso cref="IReturn{List{TypeModel}}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersionType.View"),
        PublicAPI,
        Route("/Structure/RecordVersionTypesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all record version types")]
    public partial class GetRecordVersionTypesForConnect : TypeSearchModel, IReturn<List<TypeModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all record version types.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersionType.View"),
        PublicAPI,
        Route("/Structure/RecordVersionTypesDigest", "GET",
            Summary = "Use to get a hash representing each record version types")]
    public partial class GetRecordVersionTypesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get record version type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/RecordVersionType/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific record version type")]
    public partial class GetRecordVersionTypeByID : ImplementsIDBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get record version type.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Structure/RecordVersionType/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific record version type by the custom key")]
    public partial class GetRecordVersionTypeByKey : ImplementsKeyBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get record version type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Structure/RecordVersionType/Name", "GET", Priority = 1,
            Summary = "Use to get a specific record version type by the name")]
    public partial class GetRecordVersionTypeByName : ImplementsNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to get record version type.</summary>
    /// <seealso cref="IReturn{TypeModel}"/>
    [PublicAPI,
        Route("/Structure/RecordVersionType/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific record version type by the name")]
    public partial class GetRecordVersionTypeByDisplayName : ImplementsDisplayNameBase, IReturn<TypeModel> { }

    /// <summary>A ServiceStack Route to check record version type exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersionType.View"),
        PublicAPI,
        Route("/Structure/RecordVersionType/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckRecordVersionTypeExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check record version type exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersionType.View"),
        PublicAPI,
        Route("/Structure/RecordVersionType/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckRecordVersionTypeExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check record version type exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersionType.View"),
        PublicAPI,
        Route("/Structure/RecordVersionType/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckRecordVersionTypeExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check record version type exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersionType.View"),
        PublicAPI,
        Route("/Structure/RecordVersionType/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckRecordVersionTypeExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create record version type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersionType.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/RecordVersionType/Create", "POST", Priority = 1,
            Summary = "Use to create a new record version type.")]
    public partial class CreateRecordVersionType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert record version type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Structure/RecordVersionType/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing record version type (as needed).")]
    public partial class UpsertRecordVersionType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update record version type.</summary>
    /// <seealso cref="TypeModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersionType.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/RecordVersionType/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing record version type.")]
    public partial class UpdateRecordVersionType : TypeModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate record version type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersionType.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/RecordVersionType/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific record version type from the system [Soft-Delete]")]
    public partial class DeactivateRecordVersionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate record version type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersionType.Deactivate"),
        PublicAPI,
        Route("/Structure/RecordVersionType/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific record version type from the system [Soft-Delete]")]
    public partial class DeactivateRecordVersionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate record version type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersionType.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/RecordVersionType/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific record version type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRecordVersionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate record version type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersionType.Reactivate"),
        PublicAPI,
        Route("/Structure/RecordVersionType/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific record version type from the system [Restore from Soft-Delete]")]
    public partial class ReactivateRecordVersionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete record version type.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersionType.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Structure/RecordVersionType/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific record version type from the system [Hard-Delete]")]
    public partial class DeleteRecordVersionTypeByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete record version type by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Structure.RecordVersionType.Delete"),
        PublicAPI,
        Route("/Structure/RecordVersionType/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific record version type from the system [Hard-Delete]")]
    public partial class DeleteRecordVersionTypeByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear record version type cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Structure/RecordVersionType/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all record version type calls.")]
    public class ClearRecordVersionTypeCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class RecordVersionTypeServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetRecordVersionTypes"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRecordVersionTypes request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITypeModel, TypeModel, ITypeSearchModel, RecordVersionTypePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.RecordVersionTypes)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRecordVersionTypesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetRecordVersionTypesForConnect request)
        {
            return await Workflows.RecordVersionTypes.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRecordVersionTypesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRecordVersionTypesDigest request)
        {
            return await Workflows.RecordVersionTypes.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetRecordVersionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRecordVersionTypeByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.RecordVersionTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRecordVersionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRecordVersionTypeByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.RecordVersionTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRecordVersionTypeByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRecordVersionTypeByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.RecordVersionTypes, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetRecordVersionTypeByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetRecordVersionTypeByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.RecordVersionTypes, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckRecordVersionTypeExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRecordVersionTypeExistsByID request)
        {
            return await Workflows.RecordVersionTypes.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRecordVersionTypeExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRecordVersionTypeExistsByKey request)
        {
            return await Workflows.RecordVersionTypes.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRecordVersionTypeExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRecordVersionTypeExistsByName request)
        {
            return await Workflows.RecordVersionTypes.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckRecordVersionTypeExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckRecordVersionTypeExistsByDisplayName request)
        {
            return await Workflows.RecordVersionTypes.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertRecordVersionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertRecordVersionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionTypeDataAsync,
                    () => Workflows.RecordVersionTypes.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateRecordVersionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateRecordVersionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionTypeDataAsync,
                    () => Workflows.RecordVersionTypes.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateRecordVersionType"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateRecordVersionType request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionTypeDataAsync,
                    () => Workflows.RecordVersionTypes.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateRecordVersionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRecordVersionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionTypeDataAsync,
                    () => Workflows.RecordVersionTypes.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateRecordVersionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateRecordVersionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionTypeDataAsync,
                    () => Workflows.RecordVersionTypes.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateRecordVersionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRecordVersionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionTypeDataAsync,
                    () => Workflows.RecordVersionTypes.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateRecordVersionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateRecordVersionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionTypeDataAsync,
                    () => Workflows.RecordVersionTypes.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteRecordVersionTypeByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRecordVersionTypeByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionTypeDataAsync,
                    () => Workflows.RecordVersionTypes.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteRecordVersionTypeByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteRecordVersionTypeByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedRecordVersionTypeDataAsync,
                    () => Workflows.RecordVersionTypes.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearRecordVersionTypeCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearRecordVersionTypeCache request)
        {
            await ClearCachedRecordVersionTypeDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedRecordVersionTypeDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetRecordVersionTypes>(string.Empty),
                    UrnId.Create<GetRecordVersionTypeByID>(string.Empty),
                    UrnId.Create<GetRecordVersionTypeByKey>(string.Empty),
                    UrnId.Create<GetRecordVersionTypeByName>(string.Empty),
                    UrnId.Create<CheckRecordVersionTypeExistsByID>(string.Empty),
                    UrnId.Create<CheckRecordVersionTypeExistsByKey>(string.Empty),
                    UrnId.Create<CheckRecordVersionTypeExistsByName>(string.Empty),
                    UrnId.Create<CheckRecordVersionTypeExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class RecordVersionTypeService : RecordVersionTypeServiceBase { }
}
