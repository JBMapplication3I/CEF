// <autogenerated>
// <copyright file="StoreCountryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the store country service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of store countries.</summary>
    /// <seealso cref="StoreCountrySearchModel"/>
    /// <seealso cref="IReturn{StoreCountryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreCountries", "GET", Priority = 1,
            Summary = "Use to get a list of store countries")]
    public partial class GetStoreCountries : StoreCountrySearchModel, IReturn<StoreCountryPagedResults> { }

    /// <summary>A ServiceStack Route to get store countries for connect.</summary>
    /// <seealso cref="StoreCountrySearchModel"/>
    /// <seealso cref="IReturn{List{StoreCountryModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreCountry.View"),
        PublicAPI,
        Route("/Stores/StoreCountriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all store countries")]
    public partial class GetStoreCountriesForConnect : StoreCountrySearchModel, IReturn<List<StoreCountryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all store countries.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Stores.StoreCountry.View"),
        PublicAPI,
        Route("/Stores/StoreCountriesDigest", "GET",
            Summary = "Use to get a hash representing each store countries")]
    public partial class GetStoreCountriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get store country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StoreCountryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreCountry/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific store country")]
    public partial class GetStoreCountryByID : ImplementsIDBase, IReturn<StoreCountryModel> { }

    /// <summary>A ServiceStack Route to get store country.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StoreCountryModel}"/>
    [PublicAPI,
        Route("/Stores/StoreCountry/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific store country by the custom key")]
    public partial class GetStoreCountryByKey : ImplementsKeyBase, IReturn<StoreCountryModel> { }

    /// <summary>A ServiceStack Route to check store country exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreCountry.View"),
        PublicAPI,
        Route("/Stores/StoreCountry/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreCountryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check store country exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Stores.StoreCountry.View"),
        PublicAPI,
        Route("/Stores/StoreCountry/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckStoreCountryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create store country.</summary>
    /// <seealso cref="StoreCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreCountry.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreCountry/Create", "POST", Priority = 1,
            Summary = "Use to create a new store country.")]
    public partial class CreateStoreCountry : StoreCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert store country.</summary>
    /// <seealso cref="StoreCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Stores/StoreCountry/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing store country (as needed).")]
    public partial class UpsertStoreCountry : StoreCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update store country.</summary>
    /// <seealso cref="StoreCountryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Stores.StoreCountry.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreCountry/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing store country.")]
    public partial class UpdateStoreCountry : StoreCountryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate store country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreCountry.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreCountry/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store country from the system [Soft-Delete]")]
    public partial class DeactivateStoreCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate store country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreCountry.Deactivate"),
        PublicAPI,
        Route("/Stores/StoreCountry/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific store country from the system [Soft-Delete]")]
    public partial class DeactivateStoreCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreCountry.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreCountry/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store country from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate store country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreCountry.Reactivate"),
        PublicAPI,
        Route("/Stores/StoreCountry/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific store country from the system [Restore from Soft-Delete]")]
    public partial class ReactivateStoreCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store country.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreCountry.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Stores/StoreCountry/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific store country from the system [Hard-Delete]")]
    public partial class DeleteStoreCountryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete store country by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Stores.StoreCountry.Delete"),
        PublicAPI,
        Route("/Stores/StoreCountry/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific store country from the system [Hard-Delete]")]
    public partial class DeleteStoreCountryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear store country cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Stores/StoreCountry/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all store country calls.")]
    public class ClearStoreCountryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class StoreCountryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetStoreCountries"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreCountries request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStoreCountryModel, StoreCountryModel, IStoreCountrySearchModel, StoreCountryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.StoreCountries)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreCountriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetStoreCountriesForConnect request)
        {
            return await Workflows.StoreCountries.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreCountriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreCountriesDigest request)
        {
            return await Workflows.StoreCountries.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetStoreCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreCountryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.StoreCountries, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetStoreCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetStoreCountryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.StoreCountries, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckStoreCountryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreCountryExistsByID request)
        {
            return await Workflows.StoreCountries.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckStoreCountryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckStoreCountryExistsByKey request)
        {
            return await Workflows.StoreCountries.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertStoreCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertStoreCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCountryDataAsync,
                    () => Workflows.StoreCountries.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateStoreCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateStoreCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCountryDataAsync,
                    () => Workflows.StoreCountries.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateStoreCountry"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateStoreCountry request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCountryDataAsync,
                    () => Workflows.StoreCountries.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateStoreCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCountryDataAsync,
                    () => Workflows.StoreCountries.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateStoreCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateStoreCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCountryDataAsync,
                    () => Workflows.StoreCountries.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateStoreCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCountryDataAsync,
                    () => Workflows.StoreCountries.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateStoreCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateStoreCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCountryDataAsync,
                    () => Workflows.StoreCountries.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteStoreCountryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreCountryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCountryDataAsync,
                    () => Workflows.StoreCountries.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteStoreCountryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteStoreCountryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedStoreCountryDataAsync,
                    () => Workflows.StoreCountries.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearStoreCountryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearStoreCountryCache request)
        {
            await ClearCachedStoreCountryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedStoreCountryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetStoreCountries>(string.Empty),
                    UrnId.Create<GetStoreCountryByID>(string.Empty),
                    UrnId.Create<GetStoreCountryByKey>(string.Empty),
                    UrnId.Create<CheckStoreCountryExistsByID>(string.Empty),
                    UrnId.Create<CheckStoreCountryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class StoreCountryService : StoreCountryServiceBase { }
}
