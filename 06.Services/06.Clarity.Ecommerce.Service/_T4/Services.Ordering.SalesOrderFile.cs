// <autogenerated>
// <copyright file="SalesOrderFileService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales order file service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales order files.</summary>
    /// <seealso cref="SalesOrderFileSearchModel"/>
    /// <seealso cref="IReturn{SalesOrderFilePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderFiles", "GET", Priority = 1,
            Summary = "Use to get a list of sales order files")]
    public partial class GetSalesOrderFiles : SalesOrderFileSearchModel, IReturn<SalesOrderFilePagedResults> { }

    /// <summary>A ServiceStack Route to get sales order files for connect.</summary>
    /// <seealso cref="SalesOrderFileSearchModel"/>
    /// <seealso cref="IReturn{List{SalesOrderFileModel}}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderFile.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderFilesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales order files")]
    public partial class GetSalesOrderFilesForConnect : SalesOrderFileSearchModel, IReturn<List<SalesOrderFileModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales order files.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderFile.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderFilesDigest", "GET",
            Summary = "Use to get a hash representing each sales order files")]
    public partial class GetSalesOrderFilesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales order file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SalesOrderFileModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderFile/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order file")]
    public partial class GetSalesOrderFileByID : ImplementsIDBase, IReturn<SalesOrderFileModel> { }

    /// <summary>A ServiceStack Route to get sales order file.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SalesOrderFileModel}"/>
    [PublicAPI,
        Route("/Ordering/SalesOrderFile/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales order file by the custom key")]
    public partial class GetSalesOrderFileByKey : ImplementsKeyBase, IReturn<SalesOrderFileModel> { }

    /// <summary>A ServiceStack Route to get sales order file.</summary>
    /// <seealso cref="IReturn{SalesOrderFileModel}"/>
    [PublicAPI,
        Route("/Ordering/SalesOrderFile/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sales order file by the name")]
    public partial class GetSalesOrderFileByName : ImplementsNameBase, IReturn<SalesOrderFileModel> { }

    /// <summary>A ServiceStack Route to get sales order file.</summary>
    /// <seealso cref="IReturn{SalesOrderFileModel}"/>
    [PublicAPI,
        Route("/Ordering/SalesOrderFile/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific sales order file by the SEO URL")]
    public partial class GetSalesOrderFileBySeoUrl : ImplementsSeoUrlBase, IReturn<SalesOrderFileModel> { }

    /// <summary>A ServiceStack Route to check sales order file exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderFile.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderFile/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderFileExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales order file exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderFile.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderFile/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderFileExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales order file exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderFile.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderFile/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderFileExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales order file exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderFile.View"),
        PublicAPI,
        Route("/Ordering/SalesOrderFile/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesOrderFileExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales order file.</summary>
    /// <seealso cref="SalesOrderFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderFile.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderFile/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales order file.")]
    public partial class CreateSalesOrderFile : SalesOrderFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales order file.</summary>
    /// <seealso cref="SalesOrderFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Ordering/SalesOrderFile/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales order file (as needed).")]
    public partial class UpsertSalesOrderFile : SalesOrderFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales order file.</summary>
    /// <seealso cref="SalesOrderFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderFile.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderFile/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales order file.")]
    public partial class UpdateSalesOrderFile : SalesOrderFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales order file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderFile.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderFile/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order file from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales order file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderFile.Deactivate"),
        PublicAPI,
        Route("/Ordering/SalesOrderFile/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales order file from the system [Soft-Delete]")]
    public partial class DeactivateSalesOrderFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderFile.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderFile/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales order file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderFile.Reactivate"),
        PublicAPI,
        Route("/Ordering/SalesOrderFile/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales order file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesOrderFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderFile.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Ordering/SalesOrderFile/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales order file from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales order file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Ordering.SalesOrderFile.Delete"),
        PublicAPI,
        Route("/Ordering/SalesOrderFile/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales order file from the system [Hard-Delete]")]
    public partial class DeleteSalesOrderFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales order file cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Ordering/SalesOrderFile/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales order file calls.")]
    public class ClearSalesOrderFileCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesOrderFileServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesOrderFiles"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderFiles request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISalesOrderFileModel, SalesOrderFileModel, ISalesOrderFileSearchModel, SalesOrderFilePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesOrderFiles)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderFilesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesOrderFilesForConnect request)
        {
            return await Workflows.SalesOrderFiles.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderFilesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderFilesDigest request)
        {
            return await Workflows.SalesOrderFiles.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesOrderFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderFileByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesOrderFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderFileByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesOrderFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderFileByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderFileByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SalesOrderFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesOrderFileBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesOrderFileBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.SalesOrderFiles, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesOrderFileExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderFileExistsByID request)
        {
            return await Workflows.SalesOrderFiles.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesOrderFileExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderFileExistsByKey request)
        {
            return await Workflows.SalesOrderFiles.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesOrderFileExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderFileExistsByName request)
        {
            return await Workflows.SalesOrderFiles.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesOrderFileExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesOrderFileExistsBySeoUrl request)
        {
            return await Workflows.SalesOrderFiles.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesOrderFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesOrderFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderFileDataAsync,
                    () => Workflows.SalesOrderFiles.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesOrderFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesOrderFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderFileDataAsync,
                    () => Workflows.SalesOrderFiles.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesOrderFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesOrderFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderFileDataAsync,
                    () => Workflows.SalesOrderFiles.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderFileDataAsync,
                    () => Workflows.SalesOrderFiles.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesOrderFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesOrderFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderFileDataAsync,
                    () => Workflows.SalesOrderFiles.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderFileDataAsync,
                    () => Workflows.SalesOrderFiles.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesOrderFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesOrderFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderFileDataAsync,
                    () => Workflows.SalesOrderFiles.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderFileDataAsync,
                    () => Workflows.SalesOrderFiles.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesOrderFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesOrderFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesOrderFileDataAsync,
                    () => Workflows.SalesOrderFiles.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesOrderFileCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesOrderFileCache request)
        {
            await ClearCachedSalesOrderFileDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesOrderFileDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesOrderFiles>(string.Empty),
                    UrnId.Create<GetSalesOrderFileByID>(string.Empty),
                    UrnId.Create<GetSalesOrderFileByKey>(string.Empty),
                    UrnId.Create<GetSalesOrderFileByName>(string.Empty),
                    UrnId.Create<GetSalesOrderFileBySeoUrl>(string.Empty),
                    UrnId.Create<CheckSalesOrderFileExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesOrderFileExistsByKey>(string.Empty),
                    UrnId.Create<CheckSalesOrderFileExistsByName>(string.Empty),
                    UrnId.Create<CheckSalesOrderFileExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesOrderFileService : SalesOrderFileServiceBase { }
}
