// <autogenerated>
// <copyright file="SalesInvoiceStateService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sales invoice state service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sales invoice states.</summary>
    /// <seealso cref="StateSearchModel"/>
    /// <seealso cref="IReturn{SalesInvoiceStatePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Invoicing/SalesInvoiceStates", "GET", Priority = 1,
            Summary = "Use to get a list of sales invoice states")]
    public partial class GetSalesInvoiceStates : StateSearchModel, IReturn<SalesInvoiceStatePagedResults> { }

    /// <summary>A ServiceStack Route to get sales invoice states for connect.</summary>
    /// <seealso cref="StateSearchModel"/>
    /// <seealso cref="IReturn{List{StateModel}}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceState.View"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceStatesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sales invoice states")]
    public partial class GetSalesInvoiceStatesForConnect : StateSearchModel, IReturn<List<StateModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sales invoice states.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceState.View"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceStatesDigest", "GET",
            Summary = "Use to get a hash representing each sales invoice states")]
    public partial class GetSalesInvoiceStatesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sales invoice state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Invoicing/SalesInvoiceState/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sales invoice state")]
    public partial class GetSalesInvoiceStateByID : ImplementsIDBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get sales invoice state.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sales invoice state by the custom key")]
    public partial class GetSalesInvoiceStateByKey : ImplementsKeyBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get sales invoice state.</summary>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Name", "GET", Priority = 1,
            Summary = "Use to get a specific sales invoice state by the name")]
    public partial class GetSalesInvoiceStateByName : ImplementsNameBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get sales invoice state.</summary>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Invoicing/SalesInvoiceState/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific sales invoice state by the name")]
    public partial class GetSalesInvoiceStateByDisplayName : ImplementsDisplayNameBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to check sales invoice state exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceState.View"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesInvoiceStateExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales invoice state exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceState.View"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesInvoiceStateExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales invoice state exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceState.View"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesInvoiceStateExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sales invoice state exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceState.View"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckSalesInvoiceStateExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sales invoice state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceState.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Create", "POST", Priority = 1,
            Summary = "Use to create a new sales invoice state.")]
    public partial class CreateSalesInvoiceState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sales invoice state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sales invoice state (as needed).")]
    public partial class UpsertSalesInvoiceState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sales invoice state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceState.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sales invoice state.")]
    public partial class UpdateSalesInvoiceState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sales invoice state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceState.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales invoice state from the system [Soft-Delete]")]
    public partial class DeactivateSalesInvoiceStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sales invoice state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceState.Deactivate"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sales invoice state from the system [Soft-Delete]")]
    public partial class DeactivateSalesInvoiceStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales invoice state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceState.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales invoice state from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesInvoiceStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sales invoice state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceState.Reactivate"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sales invoice state from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSalesInvoiceStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales invoice state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceState.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sales invoice state from the system [Hard-Delete]")]
    public partial class DeleteSalesInvoiceStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sales invoice state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Invoicing.SalesInvoiceState.Delete"),
        PublicAPI,
        Route("/Invoicing/SalesInvoiceState/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sales invoice state from the system [Hard-Delete]")]
    public partial class DeleteSalesInvoiceStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sales invoice state cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Invoicing/SalesInvoiceState/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sales invoice state calls.")]
    public class ClearSalesInvoiceStateCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SalesInvoiceStateServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSalesInvoiceStates"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoiceStates request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStateModel, StateModel, IStateSearchModel, SalesInvoiceStatePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SalesInvoiceStates)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesInvoiceStatesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSalesInvoiceStatesForConnect request)
        {
            return await Workflows.SalesInvoiceStates.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesInvoiceStatesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoiceStatesDigest request)
        {
            return await Workflows.SalesInvoiceStates.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSalesInvoiceStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoiceStateByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SalesInvoiceStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesInvoiceStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoiceStateByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SalesInvoiceStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesInvoiceStateByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoiceStateByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.SalesInvoiceStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSalesInvoiceStateByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSalesInvoiceStateByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.SalesInvoiceStates, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSalesInvoiceStateExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesInvoiceStateExistsByID request)
        {
            return await Workflows.SalesInvoiceStates.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesInvoiceStateExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesInvoiceStateExistsByKey request)
        {
            return await Workflows.SalesInvoiceStates.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesInvoiceStateExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesInvoiceStateExistsByName request)
        {
            return await Workflows.SalesInvoiceStates.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSalesInvoiceStateExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSalesInvoiceStateExistsByDisplayName request)
        {
            return await Workflows.SalesInvoiceStates.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSalesInvoiceState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSalesInvoiceState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceStateDataAsync,
                    () => Workflows.SalesInvoiceStates.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSalesInvoiceState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSalesInvoiceState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceStateDataAsync,
                    () => Workflows.SalesInvoiceStates.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSalesInvoiceState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSalesInvoiceState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceStateDataAsync,
                    () => Workflows.SalesInvoiceStates.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSalesInvoiceStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesInvoiceStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceStateDataAsync,
                    () => Workflows.SalesInvoiceStates.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSalesInvoiceStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSalesInvoiceStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceStateDataAsync,
                    () => Workflows.SalesInvoiceStates.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSalesInvoiceStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesInvoiceStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceStateDataAsync,
                    () => Workflows.SalesInvoiceStates.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSalesInvoiceStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSalesInvoiceStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceStateDataAsync,
                    () => Workflows.SalesInvoiceStates.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSalesInvoiceStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesInvoiceStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceStateDataAsync,
                    () => Workflows.SalesInvoiceStates.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSalesInvoiceStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSalesInvoiceStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSalesInvoiceStateDataAsync,
                    () => Workflows.SalesInvoiceStates.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSalesInvoiceStateCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSalesInvoiceStateCache request)
        {
            await ClearCachedSalesInvoiceStateDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSalesInvoiceStateDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSalesInvoiceStates>(string.Empty),
                    UrnId.Create<GetSalesInvoiceStateByID>(string.Empty),
                    UrnId.Create<GetSalesInvoiceStateByKey>(string.Empty),
                    UrnId.Create<GetSalesInvoiceStateByName>(string.Empty),
                    UrnId.Create<CheckSalesInvoiceStateExistsByID>(string.Empty),
                    UrnId.Create<CheckSalesInvoiceStateExistsByKey>(string.Empty),
                    UrnId.Create<CheckSalesInvoiceStateExistsByName>(string.Empty),
                    UrnId.Create<CheckSalesInvoiceStateExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SalesInvoiceStateService : SalesInvoiceStateServiceBase { }
}
