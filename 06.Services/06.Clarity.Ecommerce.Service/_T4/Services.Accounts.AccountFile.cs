// <autogenerated>
// <copyright file="AccountFileService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the account file service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of account files.</summary>
    /// <seealso cref="AccountFileSearchModel"/>
    /// <seealso cref="IReturn{AccountFilePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountFiles", "GET", Priority = 1,
            Summary = "Use to get a list of account files")]
    public partial class GetAccountFiles : AccountFileSearchModel, IReturn<AccountFilePagedResults> { }

    /// <summary>A ServiceStack Route to get account files for connect.</summary>
    /// <seealso cref="AccountFileSearchModel"/>
    /// <seealso cref="IReturn{List{AccountFileModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountFile.View"),
        PublicAPI,
        Route("/Accounts/AccountFilesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all account files")]
    public partial class GetAccountFilesForConnect : AccountFileSearchModel, IReturn<List<AccountFileModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all account files.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountFile.View"),
        PublicAPI,
        Route("/Accounts/AccountFilesDigest", "GET",
            Summary = "Use to get a hash representing each account files")]
    public partial class GetAccountFilesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get account file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AccountFileModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountFile/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific account file")]
    public partial class GetAccountFileByID : ImplementsIDBase, IReturn<AccountFileModel> { }

    /// <summary>A ServiceStack Route to get account file.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AccountFileModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountFile/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific account file by the custom key")]
    public partial class GetAccountFileByKey : ImplementsKeyBase, IReturn<AccountFileModel> { }

    /// <summary>A ServiceStack Route to get account file.</summary>
    /// <seealso cref="IReturn{AccountFileModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountFile/Name", "GET", Priority = 1,
            Summary = "Use to get a specific account file by the name")]
    public partial class GetAccountFileByName : ImplementsNameBase, IReturn<AccountFileModel> { }

    /// <summary>A ServiceStack Route to get account file.</summary>
    /// <seealso cref="IReturn{AccountFileModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountFile/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific account file by the SEO URL")]
    public partial class GetAccountFileBySeoUrl : ImplementsSeoUrlBase, IReturn<AccountFileModel> { }

    /// <summary>A ServiceStack Route to check account file exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountFile.View"),
        PublicAPI,
        Route("/Accounts/AccountFile/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountFileExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account file exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountFile.View"),
        PublicAPI,
        Route("/Accounts/AccountFile/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountFileExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account file exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountFile.View"),
        PublicAPI,
        Route("/Accounts/AccountFile/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountFileExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account file exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountFile.View"),
        PublicAPI,
        Route("/Accounts/AccountFile/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountFileExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create account file.</summary>
    /// <seealso cref="AccountFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountFile.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountFile/Create", "POST", Priority = 1,
            Summary = "Use to create a new account file.")]
    public partial class CreateAccountFile : AccountFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert account file.</summary>
    /// <seealso cref="AccountFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Accounts/AccountFile/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing account file (as needed).")]
    public partial class UpsertAccountFile : AccountFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update account file.</summary>
    /// <seealso cref="AccountFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountFile.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountFile/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing account file.")]
    public partial class UpdateAccountFile : AccountFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate account file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountFile.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountFile/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account file from the system [Soft-Delete]")]
    public partial class DeactivateAccountFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate account file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountFile.Deactivate"),
        PublicAPI,
        Route("/Accounts/AccountFile/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account file from the system [Soft-Delete]")]
    public partial class DeactivateAccountFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountFile.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountFile/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountFile.Reactivate"),
        PublicAPI,
        Route("/Accounts/AccountFile/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountFile.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountFile/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific account file from the system [Hard-Delete]")]
    public partial class DeleteAccountFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountFile.Delete"),
        PublicAPI,
        Route("/Accounts/AccountFile/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific account file from the system [Hard-Delete]")]
    public partial class DeleteAccountFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear account file cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountFile/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all account file calls.")]
    public class ClearAccountFileCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AccountFileServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAccountFiles"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountFiles request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAccountFileModel, AccountFileModel, IAccountFileSearchModel, AccountFilePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AccountFiles)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountFilesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAccountFilesForConnect request)
        {
            return await Workflows.AccountFiles.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountFilesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountFilesDigest request)
        {
            return await Workflows.AccountFiles.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAccountFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountFileByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AccountFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountFileByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AccountFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountFileByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountFileByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.AccountFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountFileBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountFileBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.AccountFiles, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAccountFileExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountFileExistsByID request)
        {
            return await Workflows.AccountFiles.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountFileExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountFileExistsByKey request)
        {
            return await Workflows.AccountFiles.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountFileExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountFileExistsByName request)
        {
            return await Workflows.AccountFiles.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountFileExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountFileExistsBySeoUrl request)
        {
            return await Workflows.AccountFiles.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAccountFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAccountFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountFileDataAsync,
                    () => Workflows.AccountFiles.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAccountFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAccountFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountFileDataAsync,
                    () => Workflows.AccountFiles.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAccountFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAccountFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountFileDataAsync,
                    () => Workflows.AccountFiles.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAccountFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountFileDataAsync,
                    () => Workflows.AccountFiles.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAccountFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountFileDataAsync,
                    () => Workflows.AccountFiles.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAccountFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountFileDataAsync,
                    () => Workflows.AccountFiles.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAccountFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountFileDataAsync,
                    () => Workflows.AccountFiles.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAccountFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountFileDataAsync,
                    () => Workflows.AccountFiles.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAccountFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountFileDataAsync,
                    () => Workflows.AccountFiles.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAccountFileCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAccountFileCache request)
        {
            await ClearCachedAccountFileDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAccountFileDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAccountFiles>(string.Empty),
                    UrnId.Create<GetAccountFileByID>(string.Empty),
                    UrnId.Create<GetAccountFileByKey>(string.Empty),
                    UrnId.Create<GetAccountFileByName>(string.Empty),
                    UrnId.Create<GetAccountFileBySeoUrl>(string.Empty),
                    UrnId.Create<CheckAccountFileExistsByID>(string.Empty),
                    UrnId.Create<CheckAccountFileExistsByKey>(string.Empty),
                    UrnId.Create<CheckAccountFileExistsByName>(string.Empty),
                    UrnId.Create<CheckAccountFileExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AccountFileService : AccountFileServiceBase { }
}
