// <autogenerated>
// <copyright file="ManufacturerProductService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the manufacturer product service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of manufacturer products.</summary>
    /// <seealso cref="ManufacturerProductSearchModel"/>
    /// <seealso cref="IReturn{ManufacturerProductPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Manufacturers/ManufacturerProducts", "GET", Priority = 1,
            Summary = "Use to get a list of manufacturer products")]
    public partial class GetManufacturerProducts : ManufacturerProductSearchModel, IReturn<ManufacturerProductPagedResults> { }

    /// <summary>A ServiceStack Route to get manufacturer products for connect.</summary>
    /// <seealso cref="ManufacturerProductSearchModel"/>
    /// <seealso cref="IReturn{List{ManufacturerProductModel}}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerProduct.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerProductsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all manufacturer products")]
    public partial class GetManufacturerProductsForConnect : ManufacturerProductSearchModel, IReturn<List<ManufacturerProductModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all manufacturer products.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerProduct.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerProductsDigest", "GET",
            Summary = "Use to get a hash representing each manufacturer products")]
    public partial class GetManufacturerProductsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get manufacturer product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ManufacturerProductModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Manufacturers/ManufacturerProduct/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific manufacturer product")]
    public partial class GetManufacturerProductByID : ImplementsIDBase, IReturn<ManufacturerProductModel> { }

    /// <summary>A ServiceStack Route to get manufacturer product.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ManufacturerProductModel}"/>
    [PublicAPI,
        Route("/Manufacturers/ManufacturerProduct/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific manufacturer product by the custom key")]
    public partial class GetManufacturerProductByKey : ImplementsKeyBase, IReturn<ManufacturerProductModel> { }

    /// <summary>A ServiceStack Route to check manufacturer product exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerProduct.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerProduct/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckManufacturerProductExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check manufacturer product exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerProduct.View"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerProduct/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckManufacturerProductExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create manufacturer product.</summary>
    /// <seealso cref="ManufacturerProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerProduct.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerProduct/Create", "POST", Priority = 1,
            Summary = "Use to create a new manufacturer product.")]
    public partial class CreateManufacturerProduct : ManufacturerProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert manufacturer product.</summary>
    /// <seealso cref="ManufacturerProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Manufacturers/ManufacturerProduct/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing manufacturer product (as needed).")]
    public partial class UpsertManufacturerProduct : ManufacturerProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update manufacturer product.</summary>
    /// <seealso cref="ManufacturerProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerProduct.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerProduct/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing manufacturer product.")]
    public partial class UpdateManufacturerProduct : ManufacturerProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate manufacturer product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerProduct.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerProduct/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific manufacturer product from the system [Soft-Delete]")]
    public partial class DeactivateManufacturerProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate manufacturer product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerProduct.Deactivate"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerProduct/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific manufacturer product from the system [Soft-Delete]")]
    public partial class DeactivateManufacturerProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate manufacturer product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerProduct.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerProduct/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific manufacturer product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateManufacturerProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate manufacturer product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerProduct.Reactivate"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerProduct/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific manufacturer product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateManufacturerProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete manufacturer product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerProduct.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Manufacturers/ManufacturerProduct/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific manufacturer product from the system [Hard-Delete]")]
    public partial class DeleteManufacturerProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete manufacturer product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Manufacturers.ManufacturerProduct.Delete"),
        PublicAPI,
        Route("/Manufacturers/ManufacturerProduct/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific manufacturer product from the system [Hard-Delete]")]
    public partial class DeleteManufacturerProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear manufacturer product cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Manufacturers/ManufacturerProduct/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all manufacturer product calls.")]
    public class ClearManufacturerProductCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ManufacturerProductServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetManufacturerProducts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerProducts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IManufacturerProductModel, ManufacturerProductModel, IManufacturerProductSearchModel, ManufacturerProductPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ManufacturerProducts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerProductsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetManufacturerProductsForConnect request)
        {
            return await Workflows.ManufacturerProducts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerProductsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerProductsDigest request)
        {
            return await Workflows.ManufacturerProducts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetManufacturerProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerProductByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ManufacturerProducts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetManufacturerProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetManufacturerProductByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ManufacturerProducts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckManufacturerProductExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckManufacturerProductExistsByID request)
        {
            return await Workflows.ManufacturerProducts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckManufacturerProductExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckManufacturerProductExistsByKey request)
        {
            return await Workflows.ManufacturerProducts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertManufacturerProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertManufacturerProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerProductDataAsync,
                    () => Workflows.ManufacturerProducts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateManufacturerProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateManufacturerProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerProductDataAsync,
                    () => Workflows.ManufacturerProducts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateManufacturerProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateManufacturerProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerProductDataAsync,
                    () => Workflows.ManufacturerProducts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateManufacturerProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateManufacturerProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerProductDataAsync,
                    () => Workflows.ManufacturerProducts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateManufacturerProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateManufacturerProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerProductDataAsync,
                    () => Workflows.ManufacturerProducts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateManufacturerProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateManufacturerProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerProductDataAsync,
                    () => Workflows.ManufacturerProducts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateManufacturerProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateManufacturerProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerProductDataAsync,
                    () => Workflows.ManufacturerProducts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteManufacturerProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteManufacturerProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerProductDataAsync,
                    () => Workflows.ManufacturerProducts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteManufacturerProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteManufacturerProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedManufacturerProductDataAsync,
                    () => Workflows.ManufacturerProducts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearManufacturerProductCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearManufacturerProductCache request)
        {
            await ClearCachedManufacturerProductDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedManufacturerProductDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetManufacturerProducts>(string.Empty),
                    UrnId.Create<GetManufacturerProductByID>(string.Empty),
                    UrnId.Create<GetManufacturerProductByKey>(string.Empty),
                    UrnId.Create<CheckManufacturerProductExistsByID>(string.Empty),
                    UrnId.Create<CheckManufacturerProductExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ManufacturerProductService : ManufacturerProductServiceBase { }
}
