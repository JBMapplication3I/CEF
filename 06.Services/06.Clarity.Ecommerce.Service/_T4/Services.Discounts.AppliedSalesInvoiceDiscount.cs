// <autogenerated>
// <copyright file="AppliedSalesInvoiceDiscountService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the applied sales invoice discount service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of applied sales invoice discounts.</summary>
    /// <seealso cref="AppliedSalesInvoiceDiscountSearchModel"/>
    /// <seealso cref="IReturn{AppliedSalesInvoiceDiscountPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesInvoiceDiscounts", "GET", Priority = 1,
            Summary = "Use to get a list of applied sales invoice discounts")]
    public partial class GetAppliedSalesInvoiceDiscounts : AppliedSalesInvoiceDiscountSearchModel, IReturn<AppliedSalesInvoiceDiscountPagedResults> { }

    /// <summary>A ServiceStack Route to get applied sales invoice discounts for connect.</summary>
    /// <seealso cref="AppliedSalesInvoiceDiscountSearchModel"/>
    /// <seealso cref="IReturn{List{AppliedSalesInvoiceDiscountModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceDiscountsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all applied sales invoice discounts")]
    public partial class GetAppliedSalesInvoiceDiscountsForConnect : AppliedSalesInvoiceDiscountSearchModel, IReturn<List<AppliedSalesInvoiceDiscountModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all applied sales invoice discounts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceDiscountsDigest", "GET",
            Summary = "Use to get a hash representing each applied sales invoice discounts")]
    public partial class GetAppliedSalesInvoiceDiscountsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get applied sales invoice discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AppliedSalesInvoiceDiscountModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesInvoiceDiscount/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sales invoice discount")]
    public partial class GetAppliedSalesInvoiceDiscountByID : ImplementsIDBase, IReturn<AppliedSalesInvoiceDiscountModel> { }

    /// <summary>A ServiceStack Route to get applied sales invoice discount.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AppliedSalesInvoiceDiscountModel}"/>
    [PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceDiscount/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific applied sales invoice discount by the custom key")]
    public partial class GetAppliedSalesInvoiceDiscountByKey : ImplementsKeyBase, IReturn<AppliedSalesInvoiceDiscountModel> { }

    /// <summary>A ServiceStack Route to check applied sales invoice discount exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceDiscount/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSalesInvoiceDiscountExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check applied sales invoice discount exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceDiscount.View"),
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceDiscount/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAppliedSalesInvoiceDiscountExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create applied sales invoice discount.</summary>
    /// <seealso cref="AppliedSalesInvoiceDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceDiscount.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceDiscount/Create", "POST", Priority = 1,
            Summary = "Use to create a new applied sales invoice discount.")]
    public partial class CreateAppliedSalesInvoiceDiscount : AppliedSalesInvoiceDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert applied sales invoice discount.</summary>
    /// <seealso cref="AppliedSalesInvoiceDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceDiscount/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing applied sales invoice discount (as needed).")]
    public partial class UpsertAppliedSalesInvoiceDiscount : AppliedSalesInvoiceDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update applied sales invoice discount.</summary>
    /// <seealso cref="AppliedSalesInvoiceDiscountModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceDiscount.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceDiscount/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing applied sales invoice discount.")]
    public partial class UpdateAppliedSalesInvoiceDiscount : AppliedSalesInvoiceDiscountModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate applied sales invoice discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceDiscount.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceDiscount/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sales invoice discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSalesInvoiceDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate applied sales invoice discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceDiscount.Deactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceDiscount/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific applied sales invoice discount from the system [Soft-Delete]")]
    public partial class DeactivateAppliedSalesInvoiceDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sales invoice discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceDiscount.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceDiscount/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sales invoice discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSalesInvoiceDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate applied sales invoice discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceDiscount.Reactivate"),
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceDiscount/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific applied sales invoice discount from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAppliedSalesInvoiceDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sales invoice discount.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceDiscount.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceDiscount/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific applied sales invoice discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSalesInvoiceDiscountByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete applied sales invoice discount by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Discounts.AppliedSalesInvoiceDiscount.Delete"),
        PublicAPI,
        Route("/Discounts/AppliedSalesInvoiceDiscount/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific applied sales invoice discount from the system [Hard-Delete]")]
    public partial class DeleteAppliedSalesInvoiceDiscountByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear applied sales invoice discount cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Discounts/AppliedSalesInvoiceDiscount/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all applied sales invoice discount calls.")]
    public class ClearAppliedSalesInvoiceDiscountCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AppliedSalesInvoiceDiscountServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAppliedSalesInvoiceDiscounts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesInvoiceDiscounts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAppliedSalesInvoiceDiscountModel, AppliedSalesInvoiceDiscountModel, IAppliedSalesInvoiceDiscountSearchModel, AppliedSalesInvoiceDiscountPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AppliedSalesInvoiceDiscounts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesInvoiceDiscountsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAppliedSalesInvoiceDiscountsForConnect request)
        {
            return await Workflows.AppliedSalesInvoiceDiscounts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesInvoiceDiscountsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesInvoiceDiscountsDigest request)
        {
            return await Workflows.AppliedSalesInvoiceDiscounts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAppliedSalesInvoiceDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesInvoiceDiscountByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AppliedSalesInvoiceDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAppliedSalesInvoiceDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAppliedSalesInvoiceDiscountByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AppliedSalesInvoiceDiscounts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAppliedSalesInvoiceDiscountExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSalesInvoiceDiscountExistsByID request)
        {
            return await Workflows.AppliedSalesInvoiceDiscounts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAppliedSalesInvoiceDiscountExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAppliedSalesInvoiceDiscountExistsByKey request)
        {
            return await Workflows.AppliedSalesInvoiceDiscounts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAppliedSalesInvoiceDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAppliedSalesInvoiceDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceDiscounts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAppliedSalesInvoiceDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAppliedSalesInvoiceDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceDiscounts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAppliedSalesInvoiceDiscount"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAppliedSalesInvoiceDiscount request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceDiscounts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSalesInvoiceDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSalesInvoiceDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceDiscounts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAppliedSalesInvoiceDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAppliedSalesInvoiceDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceDiscounts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSalesInvoiceDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSalesInvoiceDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceDiscounts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAppliedSalesInvoiceDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAppliedSalesInvoiceDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceDiscounts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAppliedSalesInvoiceDiscountByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSalesInvoiceDiscountByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceDiscounts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAppliedSalesInvoiceDiscountByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAppliedSalesInvoiceDiscountByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAppliedSalesInvoiceDiscountDataAsync,
                    () => Workflows.AppliedSalesInvoiceDiscounts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAppliedSalesInvoiceDiscountCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAppliedSalesInvoiceDiscountCache request)
        {
            await ClearCachedAppliedSalesInvoiceDiscountDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAppliedSalesInvoiceDiscountDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAppliedSalesInvoiceDiscounts>(string.Empty),
                    UrnId.Create<GetAppliedSalesInvoiceDiscountByID>(string.Empty),
                    UrnId.Create<GetAppliedSalesInvoiceDiscountByKey>(string.Empty),
                    UrnId.Create<CheckAppliedSalesInvoiceDiscountExistsByID>(string.Empty),
                    UrnId.Create<CheckAppliedSalesInvoiceDiscountExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AppliedSalesInvoiceDiscountService : AppliedSalesInvoiceDiscountServiceBase { }
}
