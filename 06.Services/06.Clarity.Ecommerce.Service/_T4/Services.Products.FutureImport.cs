// <autogenerated>
// <copyright file="FutureImportService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the future import service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of future imports.</summary>
    /// <seealso cref="FutureImportSearchModel"/>
    /// <seealso cref="IReturn{FutureImportPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/FutureImports", "GET", Priority = 1,
            Summary = "Use to get a list of future imports")]
    public partial class GetFutureImports : FutureImportSearchModel, IReturn<FutureImportPagedResults> { }

    /// <summary>A ServiceStack Route to get future imports for connect.</summary>
    /// <seealso cref="FutureImportSearchModel"/>
    /// <seealso cref="IReturn{List{FutureImportModel}}"/>
    [Authenticate, RequiredPermission("Products.FutureImport.View"),
        PublicAPI,
        Route("/Products/FutureImportsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all future imports")]
    public partial class GetFutureImportsForConnect : FutureImportSearchModel, IReturn<List<FutureImportModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all future imports.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Products.FutureImport.View"),
        PublicAPI,
        Route("/Products/FutureImportsDigest", "GET",
            Summary = "Use to get a hash representing each future imports")]
    public partial class GetFutureImportsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get future import.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FutureImportModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/FutureImport/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific future import")]
    public partial class GetFutureImportByID : ImplementsIDBase, IReturn<FutureImportModel> { }

    /// <summary>A ServiceStack Route to get future import.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FutureImportModel}"/>
    [PublicAPI,
        Route("/Products/FutureImport/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific future import by the custom key")]
    public partial class GetFutureImportByKey : ImplementsKeyBase, IReturn<FutureImportModel> { }

    /// <summary>A ServiceStack Route to get future import.</summary>
    /// <seealso cref="IReturn{FutureImportModel}"/>
    [PublicAPI,
        Route("/Products/FutureImport/Name", "GET", Priority = 1,
            Summary = "Use to get a specific future import by the name")]
    public partial class GetFutureImportByName : ImplementsNameBase, IReturn<FutureImportModel> { }

    /// <summary>A ServiceStack Route to check future import exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.FutureImport.View"),
        PublicAPI,
        Route("/Products/FutureImport/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFutureImportExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check future import exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.FutureImport.View"),
        PublicAPI,
        Route("/Products/FutureImport/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFutureImportExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check future import exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.FutureImport.View"),
        PublicAPI,
        Route("/Products/FutureImport/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckFutureImportExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create future import.</summary>
    /// <seealso cref="FutureImportModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.FutureImport.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/FutureImport/Create", "POST", Priority = 1,
            Summary = "Use to create a new future import.")]
    public partial class CreateFutureImport : FutureImportModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert future import.</summary>
    /// <seealso cref="FutureImportModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Products/FutureImport/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing future import (as needed).")]
    public partial class UpsertFutureImport : FutureImportModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update future import.</summary>
    /// <seealso cref="FutureImportModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.FutureImport.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/FutureImport/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing future import.")]
    public partial class UpdateFutureImport : FutureImportModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate future import.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.FutureImport.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/FutureImport/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific future import from the system [Soft-Delete]")]
    public partial class DeactivateFutureImportByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate future import by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.FutureImport.Deactivate"),
        PublicAPI,
        Route("/Products/FutureImport/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific future import from the system [Soft-Delete]")]
    public partial class DeactivateFutureImportByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate future import.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.FutureImport.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/FutureImport/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific future import from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFutureImportByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate future import by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.FutureImport.Reactivate"),
        PublicAPI,
        Route("/Products/FutureImport/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific future import from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFutureImportByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete future import.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.FutureImport.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/FutureImport/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific future import from the system [Hard-Delete]")]
    public partial class DeleteFutureImportByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete future import by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.FutureImport.Delete"),
        PublicAPI,
        Route("/Products/FutureImport/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific future import from the system [Hard-Delete]")]
    public partial class DeleteFutureImportByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear future import cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/FutureImport/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all future import calls.")]
    public class ClearFutureImportCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FutureImportServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFutureImports"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFutureImports request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFutureImportModel, FutureImportModel, IFutureImportSearchModel, FutureImportPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FutureImports)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFutureImportsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFutureImportsForConnect request)
        {
            return await Workflows.FutureImports.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFutureImportsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFutureImportsDigest request)
        {
            return await Workflows.FutureImports.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFutureImportByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFutureImportByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FutureImports, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFutureImportByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFutureImportByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FutureImports, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFutureImportByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFutureImportByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.FutureImports, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFutureImportExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFutureImportExistsByID request)
        {
            return await Workflows.FutureImports.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFutureImportExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFutureImportExistsByKey request)
        {
            return await Workflows.FutureImports.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFutureImportExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFutureImportExistsByName request)
        {
            return await Workflows.FutureImports.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFutureImport"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFutureImport request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportDataAsync,
                    () => Workflows.FutureImports.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFutureImport"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFutureImport request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportDataAsync,
                    () => Workflows.FutureImports.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFutureImport"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFutureImport request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportDataAsync,
                    () => Workflows.FutureImports.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFutureImportByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFutureImportByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportDataAsync,
                    () => Workflows.FutureImports.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFutureImportByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFutureImportByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportDataAsync,
                    () => Workflows.FutureImports.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFutureImportByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFutureImportByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportDataAsync,
                    () => Workflows.FutureImports.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFutureImportByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFutureImportByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportDataAsync,
                    () => Workflows.FutureImports.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFutureImportByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFutureImportByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportDataAsync,
                    () => Workflows.FutureImports.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFutureImportByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFutureImportByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFutureImportDataAsync,
                    () => Workflows.FutureImports.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFutureImportCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFutureImportCache request)
        {
            await ClearCachedFutureImportDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFutureImportDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFutureImports>(string.Empty),
                    UrnId.Create<GetFutureImportByID>(string.Empty),
                    UrnId.Create<GetFutureImportByKey>(string.Empty),
                    UrnId.Create<GetFutureImportByName>(string.Empty),
                    UrnId.Create<CheckFutureImportExistsByID>(string.Empty),
                    UrnId.Create<CheckFutureImportExistsByKey>(string.Empty),
                    UrnId.Create<CheckFutureImportExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FutureImportService : FutureImportServiceBase { }
}
