// <autogenerated>
// <copyright file="ScoutCategoryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the scout category service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of scout categories.</summary>
    /// <seealso cref="ScoutCategorySearchModel"/>
    /// <seealso cref="IReturn{ScoutCategoryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scouting/ScoutCategories", "GET", Priority = 1,
            Summary = "Use to get a list of scout categories")]
    public partial class GetScoutCategories : ScoutCategorySearchModel, IReturn<ScoutCategoryPagedResults> { }

    /// <summary>A ServiceStack Route to get scout categories for connect.</summary>
    /// <seealso cref="ScoutCategorySearchModel"/>
    /// <seealso cref="IReturn{List{ScoutCategoryModel}}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategory.View"),
        PublicAPI,
        Route("/Scouting/ScoutCategoriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all scout categories")]
    public partial class GetScoutCategoriesForConnect : ScoutCategorySearchModel, IReturn<List<ScoutCategoryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all scout categories.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategory.View"),
        PublicAPI,
        Route("/Scouting/ScoutCategoriesDigest", "GET",
            Summary = "Use to get a hash representing each scout categories")]
    public partial class GetScoutCategoriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get scout category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ScoutCategoryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scouting/ScoutCategory/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific scout category")]
    public partial class GetScoutCategoryByID : ImplementsIDBase, IReturn<ScoutCategoryModel> { }

    /// <summary>A ServiceStack Route to get scout category.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ScoutCategoryModel}"/>
    [PublicAPI,
        Route("/Scouting/ScoutCategory/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific scout category by the custom key")]
    public partial class GetScoutCategoryByKey : ImplementsKeyBase, IReturn<ScoutCategoryModel> { }

    /// <summary>A ServiceStack Route to check scout category exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategory.View"),
        PublicAPI,
        Route("/Scouting/ScoutCategory/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckScoutCategoryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check scout category exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategory.View"),
        PublicAPI,
        Route("/Scouting/ScoutCategory/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckScoutCategoryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create scout category.</summary>
    /// <seealso cref="ScoutCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategory.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/ScoutCategory/Create", "POST", Priority = 1,
            Summary = "Use to create a new scout category.")]
    public partial class CreateScoutCategory : ScoutCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert scout category.</summary>
    /// <seealso cref="ScoutCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Scouting/ScoutCategory/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing scout category (as needed).")]
    public partial class UpsertScoutCategory : ScoutCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update scout category.</summary>
    /// <seealso cref="ScoutCategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategory.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/ScoutCategory/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing scout category.")]
    public partial class UpdateScoutCategory : ScoutCategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate scout category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategory.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/ScoutCategory/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific scout category from the system [Soft-Delete]")]
    public partial class DeactivateScoutCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate scout category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategory.Deactivate"),
        PublicAPI,
        Route("/Scouting/ScoutCategory/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific scout category from the system [Soft-Delete]")]
    public partial class DeactivateScoutCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate scout category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategory.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/ScoutCategory/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific scout category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateScoutCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate scout category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategory.Reactivate"),
        PublicAPI,
        Route("/Scouting/ScoutCategory/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific scout category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateScoutCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete scout category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategory.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Scouting/ScoutCategory/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific scout category from the system [Hard-Delete]")]
    public partial class DeleteScoutCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete scout category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Scouting.ScoutCategory.Delete"),
        PublicAPI,
        Route("/Scouting/ScoutCategory/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific scout category from the system [Hard-Delete]")]
    public partial class DeleteScoutCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear scout category cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Scouting/ScoutCategory/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all scout category calls.")]
    public class ClearScoutCategoryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ScoutCategoryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetScoutCategories"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScoutCategories request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IScoutCategoryModel, ScoutCategoryModel, IScoutCategorySearchModel, ScoutCategoryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ScoutCategories)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScoutCategoriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetScoutCategoriesForConnect request)
        {
            return await Workflows.ScoutCategories.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScoutCategoriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScoutCategoriesDigest request)
        {
            return await Workflows.ScoutCategories.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetScoutCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScoutCategoryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ScoutCategories, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetScoutCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetScoutCategoryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ScoutCategories, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckScoutCategoryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckScoutCategoryExistsByID request)
        {
            return await Workflows.ScoutCategories.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckScoutCategoryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckScoutCategoryExistsByKey request)
        {
            return await Workflows.ScoutCategories.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertScoutCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertScoutCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryDataAsync,
                    () => Workflows.ScoutCategories.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateScoutCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateScoutCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryDataAsync,
                    () => Workflows.ScoutCategories.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateScoutCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateScoutCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryDataAsync,
                    () => Workflows.ScoutCategories.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateScoutCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateScoutCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryDataAsync,
                    () => Workflows.ScoutCategories.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateScoutCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateScoutCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryDataAsync,
                    () => Workflows.ScoutCategories.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateScoutCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateScoutCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryDataAsync,
                    () => Workflows.ScoutCategories.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateScoutCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateScoutCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryDataAsync,
                    () => Workflows.ScoutCategories.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteScoutCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteScoutCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryDataAsync,
                    () => Workflows.ScoutCategories.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteScoutCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteScoutCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedScoutCategoryDataAsync,
                    () => Workflows.ScoutCategories.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearScoutCategoryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearScoutCategoryCache request)
        {
            await ClearCachedScoutCategoryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedScoutCategoryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetScoutCategories>(string.Empty),
                    UrnId.Create<GetScoutCategoryByID>(string.Empty),
                    UrnId.Create<GetScoutCategoryByKey>(string.Empty),
                    UrnId.Create<CheckScoutCategoryExistsByID>(string.Empty),
                    UrnId.Create<CheckScoutCategoryExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ScoutCategoryService : ScoutCategoryServiceBase { }
}
