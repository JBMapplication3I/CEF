// <autogenerated>
// <copyright file="CategoryFileService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the category file service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of category files.</summary>
    /// <seealso cref="CategoryFileSearchModel"/>
    /// <seealso cref="IReturn{CategoryFilePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/CategoryFiles", "GET", Priority = 1,
            Summary = "Use to get a list of category files")]
    public partial class GetCategoryFiles : CategoryFileSearchModel, IReturn<CategoryFilePagedResults> { }

    /// <summary>A ServiceStack Route to get category files for connect.</summary>
    /// <seealso cref="CategoryFileSearchModel"/>
    /// <seealso cref="IReturn{List{CategoryFileModel}}"/>
    [Authenticate, RequiredPermission("Categories.CategoryFile.View"),
        PublicAPI,
        Route("/Categories/CategoryFilesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all category files")]
    public partial class GetCategoryFilesForConnect : CategoryFileSearchModel, IReturn<List<CategoryFileModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all category files.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Categories.CategoryFile.View"),
        PublicAPI,
        Route("/Categories/CategoryFilesDigest", "GET",
            Summary = "Use to get a hash representing each category files")]
    public partial class GetCategoryFilesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get category file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CategoryFileModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/CategoryFile/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific category file")]
    public partial class GetCategoryFileByID : ImplementsIDBase, IReturn<CategoryFileModel> { }

    /// <summary>A ServiceStack Route to get category file.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CategoryFileModel}"/>
    [PublicAPI,
        Route("/Categories/CategoryFile/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific category file by the custom key")]
    public partial class GetCategoryFileByKey : ImplementsKeyBase, IReturn<CategoryFileModel> { }

    /// <summary>A ServiceStack Route to get category file.</summary>
    /// <seealso cref="IReturn{CategoryFileModel}"/>
    [PublicAPI,
        Route("/Categories/CategoryFile/Name", "GET", Priority = 1,
            Summary = "Use to get a specific category file by the name")]
    public partial class GetCategoryFileByName : ImplementsNameBase, IReturn<CategoryFileModel> { }

    /// <summary>A ServiceStack Route to get category file.</summary>
    /// <seealso cref="IReturn{CategoryFileModel}"/>
    [PublicAPI,
        Route("/Categories/CategoryFile/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific category file by the SEO URL")]
    public partial class GetCategoryFileBySeoUrl : ImplementsSeoUrlBase, IReturn<CategoryFileModel> { }

    /// <summary>A ServiceStack Route to check category file exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryFile.View"),
        PublicAPI,
        Route("/Categories/CategoryFile/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryFileExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check category file exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryFile.View"),
        PublicAPI,
        Route("/Categories/CategoryFile/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryFileExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check category file exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryFile.View"),
        PublicAPI,
        Route("/Categories/CategoryFile/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryFileExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check category file exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryFile.View"),
        PublicAPI,
        Route("/Categories/CategoryFile/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryFileExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create category file.</summary>
    /// <seealso cref="CategoryFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Categories.CategoryFile.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryFile/Create", "POST", Priority = 1,
            Summary = "Use to create a new category file.")]
    public partial class CreateCategoryFile : CategoryFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert category file.</summary>
    /// <seealso cref="CategoryFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Categories/CategoryFile/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing category file (as needed).")]
    public partial class UpsertCategoryFile : CategoryFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update category file.</summary>
    /// <seealso cref="CategoryFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Categories.CategoryFile.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryFile/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing category file.")]
    public partial class UpdateCategoryFile : CategoryFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate category file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryFile.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryFile/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific category file from the system [Soft-Delete]")]
    public partial class DeactivateCategoryFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate category file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryFile.Deactivate"),
        PublicAPI,
        Route("/Categories/CategoryFile/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific category file from the system [Soft-Delete]")]
    public partial class DeactivateCategoryFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate category file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryFile.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryFile/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific category file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCategoryFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate category file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryFile.Reactivate"),
        PublicAPI,
        Route("/Categories/CategoryFile/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific category file from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCategoryFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete category file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryFile.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryFile/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific category file from the system [Hard-Delete]")]
    public partial class DeleteCategoryFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete category file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryFile.Delete"),
        PublicAPI,
        Route("/Categories/CategoryFile/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific category file from the system [Hard-Delete]")]
    public partial class DeleteCategoryFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear category file cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/CategoryFile/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all category file calls.")]
    public class ClearCategoryFileCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CategoryFileServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCategoryFiles"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryFiles request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICategoryFileModel, CategoryFileModel, ICategoryFileSearchModel, CategoryFilePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CategoryFiles)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryFilesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCategoryFilesForConnect request)
        {
            return await Workflows.CategoryFiles.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryFilesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryFilesDigest request)
        {
            return await Workflows.CategoryFiles.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCategoryFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryFileByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CategoryFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryFileByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CategoryFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryFileByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryFileByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CategoryFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryFileBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryFileBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.CategoryFiles, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCategoryFileExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryFileExistsByID request)
        {
            return await Workflows.CategoryFiles.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCategoryFileExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryFileExistsByKey request)
        {
            return await Workflows.CategoryFiles.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCategoryFileExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryFileExistsByName request)
        {
            return await Workflows.CategoryFiles.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCategoryFileExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryFileExistsBySeoUrl request)
        {
            return await Workflows.CategoryFiles.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCategoryFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCategoryFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryFileDataAsync,
                    () => Workflows.CategoryFiles.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCategoryFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCategoryFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryFileDataAsync,
                    () => Workflows.CategoryFiles.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCategoryFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCategoryFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryFileDataAsync,
                    () => Workflows.CategoryFiles.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCategoryFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCategoryFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryFileDataAsync,
                    () => Workflows.CategoryFiles.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCategoryFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCategoryFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryFileDataAsync,
                    () => Workflows.CategoryFiles.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCategoryFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCategoryFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryFileDataAsync,
                    () => Workflows.CategoryFiles.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCategoryFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCategoryFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryFileDataAsync,
                    () => Workflows.CategoryFiles.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCategoryFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCategoryFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryFileDataAsync,
                    () => Workflows.CategoryFiles.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCategoryFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCategoryFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryFileDataAsync,
                    () => Workflows.CategoryFiles.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCategoryFileCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCategoryFileCache request)
        {
            await ClearCachedCategoryFileDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCategoryFileDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCategoryFiles>(string.Empty),
                    UrnId.Create<GetCategoryFileByID>(string.Empty),
                    UrnId.Create<GetCategoryFileByKey>(string.Empty),
                    UrnId.Create<GetCategoryFileByName>(string.Empty),
                    UrnId.Create<GetCategoryFileBySeoUrl>(string.Empty),
                    UrnId.Create<CheckCategoryFileExistsByID>(string.Empty),
                    UrnId.Create<CheckCategoryFileExistsByKey>(string.Empty),
                    UrnId.Create<CheckCategoryFileExistsByName>(string.Empty),
                    UrnId.Create<CheckCategoryFileExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CategoryFileService : CategoryFileServiceBase { }
}
