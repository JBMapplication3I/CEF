// <autogenerated>
// <copyright file="SampleRequestService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the sample request service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of sample requests.</summary>
    /// <seealso cref="SampleRequestSearchModel"/>
    /// <seealso cref="IReturn{SampleRequestPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequests", "GET", Priority = 1,
            Summary = "Use to get a list of sample requests")]
    public partial class GetSampleRequests : SampleRequestSearchModel, IReturn<SampleRequestPagedResults> { }

    /// <summary>A ServiceStack Route to get sample requests for connect.</summary>
    /// <seealso cref="SampleRequestSearchModel"/>
    /// <seealso cref="IReturn{List{SampleRequestModel}}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequest.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all sample requests")]
    public partial class GetSampleRequestsForConnect : SampleRequestSearchModel, IReturn<List<SampleRequestModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all sample requests.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequest.View"),
        PublicAPI,
        Route("/Sampling/SampleRequestsDigest", "GET",
            Summary = "Use to get a hash representing each sample requests")]
    public partial class GetSampleRequestsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get sample request.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{SampleRequestModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequest/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific sample request")]
    public partial class GetSampleRequestByID : ImplementsIDBase, IReturn<SampleRequestModel> { }

    /// <summary>A ServiceStack Route to get sample request.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{SampleRequestModel}"/>
    [PublicAPI,
        Route("/Sampling/SampleRequest/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific sample request by the custom key")]
    public partial class GetSampleRequestByKey : ImplementsKeyBase, IReturn<SampleRequestModel> { }

    /// <summary>A ServiceStack Route to check sample request exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequest.View"),
        PublicAPI,
        Route("/Sampling/SampleRequest/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check sample request exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequest.View"),
        PublicAPI,
        Route("/Sampling/SampleRequest/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckSampleRequestExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create sample request.</summary>
    /// <seealso cref="SampleRequestModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequest.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequest/Create", "POST", Priority = 1,
            Summary = "Use to create a new sample request.")]
    public partial class CreateSampleRequest : SampleRequestModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert sample request.</summary>
    /// <seealso cref="SampleRequestModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Sampling/SampleRequest/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing sample request (as needed).")]
    public partial class UpsertSampleRequest : SampleRequestModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update sample request.</summary>
    /// <seealso cref="SampleRequestModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequest.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequest/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing sample request.")]
    public partial class UpdateSampleRequest : SampleRequestModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate sample request.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequest.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequest/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sample request from the system [Soft-Delete]")]
    public partial class DeactivateSampleRequestByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate sample request by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequest.Deactivate"),
        PublicAPI,
        Route("/Sampling/SampleRequest/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific sample request from the system [Soft-Delete]")]
    public partial class DeactivateSampleRequestByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sample request.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequest.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequest/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sample request from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSampleRequestByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate sample request by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequest.Reactivate"),
        PublicAPI,
        Route("/Sampling/SampleRequest/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific sample request from the system [Restore from Soft-Delete]")]
    public partial class ReactivateSampleRequestByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sample request.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequest.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Sampling/SampleRequest/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific sample request from the system [Hard-Delete]")]
    public partial class DeleteSampleRequestByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete sample request by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Sampling.SampleRequest.Delete"),
        PublicAPI,
        Route("/Sampling/SampleRequest/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific sample request from the system [Hard-Delete]")]
    public partial class DeleteSampleRequestByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear sample request cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Sampling/SampleRequest/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all sample request calls.")]
    public class ClearSampleRequestCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class SampleRequestServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetSampleRequests"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequests request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ISampleRequestModel, SampleRequestModel, ISampleRequestSearchModel, SampleRequestPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.SampleRequests)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetSampleRequestsForConnect request)
        {
            return await Workflows.SampleRequests.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestsDigest request)
        {
            return await Workflows.SampleRequests.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetSampleRequestByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.SampleRequests, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetSampleRequestByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetSampleRequestByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.SampleRequests, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckSampleRequestExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestExistsByID request)
        {
            return await Workflows.SampleRequests.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckSampleRequestExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckSampleRequestExistsByKey request)
        {
            return await Workflows.SampleRequests.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertSampleRequest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertSampleRequest request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestDataAsync,
                    () => Workflows.SampleRequests.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateSampleRequest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateSampleRequest request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestDataAsync,
                    () => Workflows.SampleRequests.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateSampleRequest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateSampleRequest request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestDataAsync,
                    () => Workflows.SampleRequests.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateSampleRequestByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSampleRequestByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestDataAsync,
                    () => Workflows.SampleRequests.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateSampleRequestByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateSampleRequestByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestDataAsync,
                    () => Workflows.SampleRequests.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateSampleRequestByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSampleRequestByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestDataAsync,
                    () => Workflows.SampleRequests.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateSampleRequestByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateSampleRequestByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestDataAsync,
                    () => Workflows.SampleRequests.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteSampleRequestByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSampleRequestByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestDataAsync,
                    () => Workflows.SampleRequests.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteSampleRequestByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteSampleRequestByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedSampleRequestDataAsync,
                    () => Workflows.SampleRequests.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearSampleRequestCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearSampleRequestCache request)
        {
            await ClearCachedSampleRequestDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedSampleRequestDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetSampleRequests>(string.Empty),
                    UrnId.Create<GetSampleRequestByID>(string.Empty),
                    UrnId.Create<GetSampleRequestByKey>(string.Empty),
                    UrnId.Create<CheckSampleRequestExistsByID>(string.Empty),
                    UrnId.Create<CheckSampleRequestExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class SampleRequestService : SampleRequestServiceBase { }
}
