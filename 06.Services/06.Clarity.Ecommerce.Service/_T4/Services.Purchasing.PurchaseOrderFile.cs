// <autogenerated>
// <copyright file="PurchaseOrderFileService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the purchase order file service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of purchase order files.</summary>
    /// <seealso cref="PurchaseOrderFileSearchModel"/>
    /// <seealso cref="IReturn{PurchaseOrderFilePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderFiles", "GET", Priority = 1,
            Summary = "Use to get a list of purchase order files")]
    public partial class GetPurchaseOrderFiles : PurchaseOrderFileSearchModel, IReturn<PurchaseOrderFilePagedResults> { }

    /// <summary>A ServiceStack Route to get purchase order files for connect.</summary>
    /// <seealso cref="PurchaseOrderFileSearchModel"/>
    /// <seealso cref="IReturn{List{PurchaseOrderFileModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderFile.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFilesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all purchase order files")]
    public partial class GetPurchaseOrderFilesForConnect : PurchaseOrderFileSearchModel, IReturn<List<PurchaseOrderFileModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all purchase order files.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderFile.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFilesDigest", "GET",
            Summary = "Use to get a hash representing each purchase order files")]
    public partial class GetPurchaseOrderFilesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get purchase order file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PurchaseOrderFileModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderFile/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order file")]
    public partial class GetPurchaseOrderFileByID : ImplementsIDBase, IReturn<PurchaseOrderFileModel> { }

    /// <summary>A ServiceStack Route to get purchase order file.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PurchaseOrderFileModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order file by the custom key")]
    public partial class GetPurchaseOrderFileByKey : ImplementsKeyBase, IReturn<PurchaseOrderFileModel> { }

    /// <summary>A ServiceStack Route to get purchase order file.</summary>
    /// <seealso cref="IReturn{PurchaseOrderFileModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Name", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order file by the name")]
    public partial class GetPurchaseOrderFileByName : ImplementsNameBase, IReturn<PurchaseOrderFileModel> { }

    /// <summary>A ServiceStack Route to get purchase order file.</summary>
    /// <seealso cref="IReturn{PurchaseOrderFileModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order file by the SEO URL")]
    public partial class GetPurchaseOrderFileBySeoUrl : ImplementsSeoUrlBase, IReturn<PurchaseOrderFileModel> { }

    /// <summary>A ServiceStack Route to check purchase order file exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderFile.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderFileExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order file exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderFile.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderFileExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order file exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderFile.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderFileExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order file exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderFile.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderFileExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create purchase order file.</summary>
    /// <seealso cref="PurchaseOrderFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderFile.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Create", "POST", Priority = 1,
            Summary = "Use to create a new purchase order file.")]
    public partial class CreatePurchaseOrderFile : PurchaseOrderFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert purchase order file.</summary>
    /// <seealso cref="PurchaseOrderFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing purchase order file (as needed).")]
    public partial class UpsertPurchaseOrderFile : PurchaseOrderFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update purchase order file.</summary>
    /// <seealso cref="PurchaseOrderFileModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderFile.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing purchase order file.")]
    public partial class UpdatePurchaseOrderFile : PurchaseOrderFileModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate purchase order file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderFile.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order file from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate purchase order file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderFile.Deactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order file from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderFile.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order file from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderFile.Reactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order file from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order file.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderFile.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific purchase order file from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderFileByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order file by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderFile.Delete"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderFile/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific purchase order file from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderFileByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear purchase order file cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderFile/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all purchase order file calls.")]
    public class ClearPurchaseOrderFileCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PurchaseOrderFileServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPurchaseOrderFiles"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderFiles request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPurchaseOrderFileModel, PurchaseOrderFileModel, IPurchaseOrderFileSearchModel, PurchaseOrderFilePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PurchaseOrderFiles)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderFilesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPurchaseOrderFilesForConnect request)
        {
            return await Workflows.PurchaseOrderFiles.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderFilesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderFilesDigest request)
        {
            return await Workflows.PurchaseOrderFiles.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPurchaseOrderFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderFileByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PurchaseOrderFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderFileByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PurchaseOrderFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderFileByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderFileByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.PurchaseOrderFiles, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderFileBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderFileBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.PurchaseOrderFiles, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPurchaseOrderFileExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderFileExistsByID request)
        {
            return await Workflows.PurchaseOrderFiles.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderFileExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderFileExistsByKey request)
        {
            return await Workflows.PurchaseOrderFiles.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderFileExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderFileExistsByName request)
        {
            return await Workflows.PurchaseOrderFiles.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderFileExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderFileExistsBySeoUrl request)
        {
            return await Workflows.PurchaseOrderFiles.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPurchaseOrderFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPurchaseOrderFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderFileDataAsync,
                    () => Workflows.PurchaseOrderFiles.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePurchaseOrderFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePurchaseOrderFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderFileDataAsync,
                    () => Workflows.PurchaseOrderFiles.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePurchaseOrderFile"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePurchaseOrderFile request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderFileDataAsync,
                    () => Workflows.PurchaseOrderFiles.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderFileDataAsync,
                    () => Workflows.PurchaseOrderFiles.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderFileDataAsync,
                    () => Workflows.PurchaseOrderFiles.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderFileDataAsync,
                    () => Workflows.PurchaseOrderFiles.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderFileDataAsync,
                    () => Workflows.PurchaseOrderFiles.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderFileByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderFileByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderFileDataAsync,
                    () => Workflows.PurchaseOrderFiles.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderFileByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderFileByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderFileDataAsync,
                    () => Workflows.PurchaseOrderFiles.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPurchaseOrderFileCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPurchaseOrderFileCache request)
        {
            await ClearCachedPurchaseOrderFileDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPurchaseOrderFileDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPurchaseOrderFiles>(string.Empty),
                    UrnId.Create<GetPurchaseOrderFileByID>(string.Empty),
                    UrnId.Create<GetPurchaseOrderFileByKey>(string.Empty),
                    UrnId.Create<GetPurchaseOrderFileByName>(string.Empty),
                    UrnId.Create<GetPurchaseOrderFileBySeoUrl>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderFileExistsByID>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderFileExistsByKey>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderFileExistsByName>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderFileExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PurchaseOrderFileService : PurchaseOrderFileServiceBase { }
}
