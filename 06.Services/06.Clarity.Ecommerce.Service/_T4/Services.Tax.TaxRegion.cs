// <autogenerated>
// <copyright file="TaxRegionService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the tax region service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of tax regions.</summary>
    /// <seealso cref="TaxRegionSearchModel"/>
    /// <seealso cref="IReturn{TaxRegionPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tax/TaxRegions", "GET", Priority = 1,
            Summary = "Use to get a list of tax regions")]
    public partial class GetTaxRegions : TaxRegionSearchModel, IReturn<TaxRegionPagedResults> { }

    /// <summary>A ServiceStack Route to get tax regions for connect.</summary>
    /// <seealso cref="TaxRegionSearchModel"/>
    /// <seealso cref="IReturn{List{TaxRegionModel}}"/>
    [Authenticate, RequiredPermission("Tax.TaxRegion.View"),
        PublicAPI,
        Route("/Tax/TaxRegionsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all tax regions")]
    public partial class GetTaxRegionsForConnect : TaxRegionSearchModel, IReturn<List<TaxRegionModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all tax regions.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tax.TaxRegion.View"),
        PublicAPI,
        Route("/Tax/TaxRegionsDigest", "GET",
            Summary = "Use to get a hash representing each tax regions")]
    public partial class GetTaxRegionsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get tax region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{TaxRegionModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tax/TaxRegion/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific tax region")]
    public partial class GetTaxRegionByID : ImplementsIDBase, IReturn<TaxRegionModel> { }

    /// <summary>A ServiceStack Route to get tax region.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{TaxRegionModel}"/>
    [PublicAPI,
        Route("/Tax/TaxRegion/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific tax region by the custom key")]
    public partial class GetTaxRegionByKey : ImplementsKeyBase, IReturn<TaxRegionModel> { }

    /// <summary>A ServiceStack Route to get tax region.</summary>
    /// <seealso cref="IReturn{TaxRegionModel}"/>
    [PublicAPI,
        Route("/Tax/TaxRegion/Name", "GET", Priority = 1,
            Summary = "Use to get a specific tax region by the name")]
    public partial class GetTaxRegionByName : ImplementsNameBase, IReturn<TaxRegionModel> { }

    /// <summary>A ServiceStack Route to check tax region exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tax.TaxRegion.View"),
        PublicAPI,
        Route("/Tax/TaxRegion/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckTaxRegionExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check tax region exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tax.TaxRegion.View"),
        PublicAPI,
        Route("/Tax/TaxRegion/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckTaxRegionExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check tax region exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tax.TaxRegion.View"),
        PublicAPI,
        Route("/Tax/TaxRegion/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckTaxRegionExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create tax region.</summary>
    /// <seealso cref="TaxRegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tax.TaxRegion.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxRegion/Create", "POST", Priority = 1,
            Summary = "Use to create a new tax region.")]
    public partial class CreateTaxRegion : TaxRegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert tax region.</summary>
    /// <seealso cref="TaxRegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tax/TaxRegion/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing tax region (as needed).")]
    public partial class UpsertTaxRegion : TaxRegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update tax region.</summary>
    /// <seealso cref="TaxRegionModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tax.TaxRegion.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxRegion/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing tax region.")]
    public partial class UpdateTaxRegion : TaxRegionModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate tax region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxRegion.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxRegion/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific tax region from the system [Soft-Delete]")]
    public partial class DeactivateTaxRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate tax region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxRegion.Deactivate"),
        PublicAPI,
        Route("/Tax/TaxRegion/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific tax region from the system [Soft-Delete]")]
    public partial class DeactivateTaxRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate tax region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxRegion.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxRegion/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific tax region from the system [Restore from Soft-Delete]")]
    public partial class ReactivateTaxRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate tax region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxRegion.Reactivate"),
        PublicAPI,
        Route("/Tax/TaxRegion/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific tax region from the system [Restore from Soft-Delete]")]
    public partial class ReactivateTaxRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete tax region.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxRegion.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tax/TaxRegion/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific tax region from the system [Hard-Delete]")]
    public partial class DeleteTaxRegionByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete tax region by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tax.TaxRegion.Delete"),
        PublicAPI,
        Route("/Tax/TaxRegion/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific tax region from the system [Hard-Delete]")]
    public partial class DeleteTaxRegionByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear tax region cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tax/TaxRegion/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all tax region calls.")]
    public class ClearTaxRegionCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class TaxRegionServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetTaxRegions"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxRegions request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ITaxRegionModel, TaxRegionModel, ITaxRegionSearchModel, TaxRegionPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.TaxRegions)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetTaxRegionsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetTaxRegionsForConnect request)
        {
            return await Workflows.TaxRegions.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetTaxRegionsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxRegionsDigest request)
        {
            return await Workflows.TaxRegions.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetTaxRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxRegionByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.TaxRegions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetTaxRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxRegionByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.TaxRegions, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetTaxRegionByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetTaxRegionByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.TaxRegions, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckTaxRegionExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckTaxRegionExistsByID request)
        {
            return await Workflows.TaxRegions.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckTaxRegionExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckTaxRegionExistsByKey request)
        {
            return await Workflows.TaxRegions.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckTaxRegionExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckTaxRegionExistsByName request)
        {
            return await Workflows.TaxRegions.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertTaxRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertTaxRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxRegionDataAsync,
                    () => Workflows.TaxRegions.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateTaxRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateTaxRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxRegionDataAsync,
                    () => Workflows.TaxRegions.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateTaxRegion"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateTaxRegion request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxRegionDataAsync,
                    () => Workflows.TaxRegions.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateTaxRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateTaxRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxRegionDataAsync,
                    () => Workflows.TaxRegions.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateTaxRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateTaxRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxRegionDataAsync,
                    () => Workflows.TaxRegions.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateTaxRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateTaxRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxRegionDataAsync,
                    () => Workflows.TaxRegions.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateTaxRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateTaxRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxRegionDataAsync,
                    () => Workflows.TaxRegions.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteTaxRegionByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteTaxRegionByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxRegionDataAsync,
                    () => Workflows.TaxRegions.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteTaxRegionByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteTaxRegionByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedTaxRegionDataAsync,
                    () => Workflows.TaxRegions.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearTaxRegionCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearTaxRegionCache request)
        {
            await ClearCachedTaxRegionDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedTaxRegionDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetTaxRegions>(string.Empty),
                    UrnId.Create<GetTaxRegionByID>(string.Empty),
                    UrnId.Create<GetTaxRegionByKey>(string.Empty),
                    UrnId.Create<GetTaxRegionByName>(string.Empty),
                    UrnId.Create<CheckTaxRegionExistsByID>(string.Empty),
                    UrnId.Create<CheckTaxRegionExistsByKey>(string.Empty),
                    UrnId.Create<CheckTaxRegionExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class TaxRegionService : TaxRegionServiceBase { }
}
