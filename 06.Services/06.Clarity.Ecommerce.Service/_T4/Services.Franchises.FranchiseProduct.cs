// <autogenerated>
// <copyright file="FranchiseProductService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise product service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise products.</summary>
    /// <seealso cref="FranchiseProductSearchModel"/>
    /// <seealso cref="IReturn{FranchiseProductPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseProducts", "GET", Priority = 1,
            Summary = "Use to get a list of franchise products")]
    public partial class GetFranchiseProducts : FranchiseProductSearchModel, IReturn<FranchiseProductPagedResults> { }

    /// <summary>A ServiceStack Route to get franchise products for connect.</summary>
    /// <seealso cref="FranchiseProductSearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseProductModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseProduct.View"),
        PublicAPI,
        Route("/Franchises/FranchiseProductsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise products")]
    public partial class GetFranchiseProductsForConnect : FranchiseProductSearchModel, IReturn<List<FranchiseProductModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise products.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseProduct.View"),
        PublicAPI,
        Route("/Franchises/FranchiseProductsDigest", "GET",
            Summary = "Use to get a hash representing each franchise products")]
    public partial class GetFranchiseProductsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseProductModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseProduct/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise product")]
    public partial class GetFranchiseProductByID : ImplementsIDBase, IReturn<FranchiseProductModel> { }

    /// <summary>A ServiceStack Route to get franchise product.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseProductModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseProduct/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise product by the custom key")]
    public partial class GetFranchiseProductByKey : ImplementsKeyBase, IReturn<FranchiseProductModel> { }

    /// <summary>A ServiceStack Route to check franchise product exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseProduct.View"),
        PublicAPI,
        Route("/Franchises/FranchiseProduct/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseProductExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise product exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseProduct.View"),
        PublicAPI,
        Route("/Franchises/FranchiseProduct/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseProductExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise product.</summary>
    /// <seealso cref="FranchiseProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseProduct.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseProduct/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise product.")]
    public partial class CreateFranchiseProduct : FranchiseProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise product.</summary>
    /// <seealso cref="FranchiseProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseProduct/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise product (as needed).")]
    public partial class UpsertFranchiseProduct : FranchiseProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise product.</summary>
    /// <seealso cref="FranchiseProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseProduct.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseProduct/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise product.")]
    public partial class UpdateFranchiseProduct : FranchiseProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseProduct.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseProduct/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise product from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseProduct.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseProduct/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise product from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseProduct.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseProduct/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseProduct.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseProduct/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseProduct.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseProduct/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise product from the system [Hard-Delete]")]
    public partial class DeleteFranchiseProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseProduct.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseProduct/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise product from the system [Hard-Delete]")]
    public partial class DeleteFranchiseProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise product cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseProduct/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise product calls.")]
    public class ClearFranchiseProductCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseProductServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseProducts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseProducts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseProductModel, FranchiseProductModel, IFranchiseProductSearchModel, FranchiseProductPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseProducts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseProductsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseProductsForConnect request)
        {
            return await Workflows.FranchiseProducts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseProductsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseProductsDigest request)
        {
            return await Workflows.FranchiseProducts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseProductByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseProducts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseProductByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseProducts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseProductExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseProductExistsByID request)
        {
            return await Workflows.FranchiseProducts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseProductExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseProductExistsByKey request)
        {
            return await Workflows.FranchiseProducts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseProductDataAsync,
                    () => Workflows.FranchiseProducts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseProductDataAsync,
                    () => Workflows.FranchiseProducts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseProductDataAsync,
                    () => Workflows.FranchiseProducts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseProductDataAsync,
                    () => Workflows.FranchiseProducts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseProductDataAsync,
                    () => Workflows.FranchiseProducts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseProductDataAsync,
                    () => Workflows.FranchiseProducts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseProductDataAsync,
                    () => Workflows.FranchiseProducts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseProductDataAsync,
                    () => Workflows.FranchiseProducts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseProductDataAsync,
                    () => Workflows.FranchiseProducts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseProductCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseProductCache request)
        {
            await ClearCachedFranchiseProductDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseProductDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseProducts>(string.Empty),
                    UrnId.Create<GetFranchiseProductByID>(string.Empty),
                    UrnId.Create<GetFranchiseProductByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseProductExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseProductExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseProductService : FranchiseProductServiceBase { }
}
