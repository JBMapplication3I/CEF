// <autogenerated>
// <copyright file="PurchaseOrderContactService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the purchase order contact service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of purchase order contacts.</summary>
    /// <seealso cref="PurchaseOrderContactSearchModel"/>
    /// <seealso cref="IReturn{PurchaseOrderContactPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderContacts", "GET", Priority = 1,
            Summary = "Use to get a list of purchase order contacts")]
    public partial class GetPurchaseOrderContacts : PurchaseOrderContactSearchModel, IReturn<PurchaseOrderContactPagedResults> { }

    /// <summary>A ServiceStack Route to get purchase order contacts for connect.</summary>
    /// <seealso cref="PurchaseOrderContactSearchModel"/>
    /// <seealso cref="IReturn{List{PurchaseOrderContactModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderContact.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderContactsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all purchase order contacts")]
    public partial class GetPurchaseOrderContactsForConnect : PurchaseOrderContactSearchModel, IReturn<List<PurchaseOrderContactModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all purchase order contacts.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderContact.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderContactsDigest", "GET",
            Summary = "Use to get a hash representing each purchase order contacts")]
    public partial class GetPurchaseOrderContactsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get purchase order contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PurchaseOrderContactModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderContact/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order contact")]
    public partial class GetPurchaseOrderContactByID : ImplementsIDBase, IReturn<PurchaseOrderContactModel> { }

    /// <summary>A ServiceStack Route to get purchase order contact.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PurchaseOrderContactModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderContact/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order contact by the custom key")]
    public partial class GetPurchaseOrderContactByKey : ImplementsKeyBase, IReturn<PurchaseOrderContactModel> { }

    /// <summary>A ServiceStack Route to check purchase order contact exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderContact.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderContact/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderContactExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order contact exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderContact.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderContact/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderContactExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create purchase order contact.</summary>
    /// <seealso cref="PurchaseOrderContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderContact.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderContact/Create", "POST", Priority = 1,
            Summary = "Use to create a new purchase order contact.")]
    public partial class CreatePurchaseOrderContact : PurchaseOrderContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert purchase order contact.</summary>
    /// <seealso cref="PurchaseOrderContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderContact/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing purchase order contact (as needed).")]
    public partial class UpsertPurchaseOrderContact : PurchaseOrderContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update purchase order contact.</summary>
    /// <seealso cref="PurchaseOrderContactModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderContact.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderContact/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing purchase order contact.")]
    public partial class UpdatePurchaseOrderContact : PurchaseOrderContactModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate purchase order contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderContact.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderContact/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order contact from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate purchase order contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderContact.Deactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderContact/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order contact from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderContact.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderContact/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderContact.Reactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderContact/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order contact from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order contact.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderContact.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderContact/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific purchase order contact from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderContactByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order contact by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderContact.Delete"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderContact/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific purchase order contact from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderContactByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear purchase order contact cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderContact/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all purchase order contact calls.")]
    public class ClearPurchaseOrderContactCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PurchaseOrderContactServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPurchaseOrderContacts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderContacts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPurchaseOrderContactModel, PurchaseOrderContactModel, IPurchaseOrderContactSearchModel, PurchaseOrderContactPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PurchaseOrderContacts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderContactsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPurchaseOrderContactsForConnect request)
        {
            return await Workflows.PurchaseOrderContacts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderContactsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderContactsDigest request)
        {
            return await Workflows.PurchaseOrderContacts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPurchaseOrderContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderContactByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PurchaseOrderContacts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderContactByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PurchaseOrderContacts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPurchaseOrderContactExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderContactExistsByID request)
        {
            return await Workflows.PurchaseOrderContacts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderContactExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderContactExistsByKey request)
        {
            return await Workflows.PurchaseOrderContacts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPurchaseOrderContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPurchaseOrderContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderContactDataAsync,
                    () => Workflows.PurchaseOrderContacts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePurchaseOrderContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePurchaseOrderContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderContactDataAsync,
                    () => Workflows.PurchaseOrderContacts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePurchaseOrderContact"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePurchaseOrderContact request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderContactDataAsync,
                    () => Workflows.PurchaseOrderContacts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderContactDataAsync,
                    () => Workflows.PurchaseOrderContacts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderContactDataAsync,
                    () => Workflows.PurchaseOrderContacts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderContactDataAsync,
                    () => Workflows.PurchaseOrderContacts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderContactDataAsync,
                    () => Workflows.PurchaseOrderContacts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderContactByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderContactByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderContactDataAsync,
                    () => Workflows.PurchaseOrderContacts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderContactByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderContactByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderContactDataAsync,
                    () => Workflows.PurchaseOrderContacts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPurchaseOrderContactCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPurchaseOrderContactCache request)
        {
            await ClearCachedPurchaseOrderContactDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPurchaseOrderContactDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPurchaseOrderContacts>(string.Empty),
                    UrnId.Create<GetPurchaseOrderContactByID>(string.Empty),
                    UrnId.Create<GetPurchaseOrderContactByKey>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderContactExistsByID>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderContactExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PurchaseOrderContactService : PurchaseOrderContactServiceBase { }
}
