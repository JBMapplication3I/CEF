// <autogenerated>
// <copyright file="BrandProductService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the brand product service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of brand products.</summary>
    /// <seealso cref="BrandProductSearchModel"/>
    /// <seealso cref="IReturn{BrandProductPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandProducts", "GET", Priority = 1,
            Summary = "Use to get a list of brand products")]
    public partial class GetBrandProducts : BrandProductSearchModel, IReturn<BrandProductPagedResults> { }

    /// <summary>A ServiceStack Route to get brand products for connect.</summary>
    /// <seealso cref="BrandProductSearchModel"/>
    /// <seealso cref="IReturn{List{BrandProductModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandProduct.View"),
        PublicAPI,
        Route("/Brands/BrandProductsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all brand products")]
    public partial class GetBrandProductsForConnect : BrandProductSearchModel, IReturn<List<BrandProductModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all brand products.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Brands.BrandProduct.View"),
        PublicAPI,
        Route("/Brands/BrandProductsDigest", "GET",
            Summary = "Use to get a hash representing each brand products")]
    public partial class GetBrandProductsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get brand product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{BrandProductModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandProduct/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific brand product")]
    public partial class GetBrandProductByID : ImplementsIDBase, IReturn<BrandProductModel> { }

    /// <summary>A ServiceStack Route to get brand product.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{BrandProductModel}"/>
    [PublicAPI,
        Route("/Brands/BrandProduct/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific brand product by the custom key")]
    public partial class GetBrandProductByKey : ImplementsKeyBase, IReturn<BrandProductModel> { }

    /// <summary>A ServiceStack Route to check brand product exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandProduct.View"),
        PublicAPI,
        Route("/Brands/BrandProduct/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandProductExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check brand product exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Brands.BrandProduct.View"),
        PublicAPI,
        Route("/Brands/BrandProduct/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckBrandProductExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create brand product.</summary>
    /// <seealso cref="BrandProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandProduct.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandProduct/Create", "POST", Priority = 1,
            Summary = "Use to create a new brand product.")]
    public partial class CreateBrandProduct : BrandProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert brand product.</summary>
    /// <seealso cref="BrandProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Brands/BrandProduct/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing brand product (as needed).")]
    public partial class UpsertBrandProduct : BrandProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update brand product.</summary>
    /// <seealso cref="BrandProductModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Brands.BrandProduct.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandProduct/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing brand product.")]
    public partial class UpdateBrandProduct : BrandProductModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate brand product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandProduct.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandProduct/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand product from the system [Soft-Delete]")]
    public partial class DeactivateBrandProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate brand product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandProduct.Deactivate"),
        PublicAPI,
        Route("/Brands/BrandProduct/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific brand product from the system [Soft-Delete]")]
    public partial class DeactivateBrandProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandProduct.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandProduct/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate brand product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandProduct.Reactivate"),
        PublicAPI,
        Route("/Brands/BrandProduct/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific brand product from the system [Restore from Soft-Delete]")]
    public partial class ReactivateBrandProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand product.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandProduct.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Brands/BrandProduct/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific brand product from the system [Hard-Delete]")]
    public partial class DeleteBrandProductByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete brand product by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Brands.BrandProduct.Delete"),
        PublicAPI,
        Route("/Brands/BrandProduct/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific brand product from the system [Hard-Delete]")]
    public partial class DeleteBrandProductByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear brand product cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Brands/BrandProduct/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all brand product calls.")]
    public class ClearBrandProductCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class BrandProductServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetBrandProducts"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandProducts request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IBrandProductModel, BrandProductModel, IBrandProductSearchModel, BrandProductPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.BrandProducts)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandProductsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetBrandProductsForConnect request)
        {
            return await Workflows.BrandProducts.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandProductsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandProductsDigest request)
        {
            return await Workflows.BrandProducts.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetBrandProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandProductByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.BrandProducts, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetBrandProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetBrandProductByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.BrandProducts, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckBrandProductExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandProductExistsByID request)
        {
            return await Workflows.BrandProducts.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckBrandProductExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckBrandProductExistsByKey request)
        {
            return await Workflows.BrandProducts.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertBrandProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertBrandProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandProductDataAsync,
                    () => Workflows.BrandProducts.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateBrandProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateBrandProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandProductDataAsync,
                    () => Workflows.BrandProducts.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateBrandProduct"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateBrandProduct request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandProductDataAsync,
                    () => Workflows.BrandProducts.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateBrandProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandProductDataAsync,
                    () => Workflows.BrandProducts.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateBrandProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateBrandProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandProductDataAsync,
                    () => Workflows.BrandProducts.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateBrandProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandProductDataAsync,
                    () => Workflows.BrandProducts.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateBrandProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateBrandProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandProductDataAsync,
                    () => Workflows.BrandProducts.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteBrandProductByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandProductByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandProductDataAsync,
                    () => Workflows.BrandProducts.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteBrandProductByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteBrandProductByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedBrandProductDataAsync,
                    () => Workflows.BrandProducts.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearBrandProductCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearBrandProductCache request)
        {
            await ClearCachedBrandProductDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedBrandProductDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetBrandProducts>(string.Empty),
                    UrnId.Create<GetBrandProductByID>(string.Empty),
                    UrnId.Create<GetBrandProductByKey>(string.Empty),
                    UrnId.Create<CheckBrandProductExistsByID>(string.Empty),
                    UrnId.Create<CheckBrandProductExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class BrandProductService : BrandProductServiceBase { }
}
