// <autogenerated>
// <copyright file="ProductMembershipLevelService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the product membership level service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of product membership levels.</summary>
    /// <seealso cref="ProductMembershipLevelSearchModel"/>
    /// <seealso cref="IReturn{ProductMembershipLevelPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductMembershipLevels", "GET", Priority = 1,
            Summary = "Use to get a list of product membership levels")]
    public partial class GetProductMembershipLevels : ProductMembershipLevelSearchModel, IReturn<ProductMembershipLevelPagedResults> { }

    /// <summary>A ServiceStack Route to get product membership levels for connect.</summary>
    /// <seealso cref="ProductMembershipLevelSearchModel"/>
    /// <seealso cref="IReturn{List{ProductMembershipLevelModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductMembershipLevel.View"),
        PublicAPI,
        Route("/Products/ProductMembershipLevelsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all product membership levels")]
    public partial class GetProductMembershipLevelsForConnect : ProductMembershipLevelSearchModel, IReturn<List<ProductMembershipLevelModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all product membership levels.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Products.ProductMembershipLevel.View"),
        PublicAPI,
        Route("/Products/ProductMembershipLevelsDigest", "GET",
            Summary = "Use to get a hash representing each product membership levels")]
    public partial class GetProductMembershipLevelsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get product membership level.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{ProductMembershipLevelModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductMembershipLevel/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific product membership level")]
    public partial class GetProductMembershipLevelByID : ImplementsIDBase, IReturn<ProductMembershipLevelModel> { }

    /// <summary>A ServiceStack Route to get product membership level.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{ProductMembershipLevelModel}"/>
    [PublicAPI,
        Route("/Products/ProductMembershipLevel/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific product membership level by the custom key")]
    public partial class GetProductMembershipLevelByKey : ImplementsKeyBase, IReturn<ProductMembershipLevelModel> { }

    /// <summary>A ServiceStack Route to check product membership level exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductMembershipLevel.View"),
        PublicAPI,
        Route("/Products/ProductMembershipLevel/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckProductMembershipLevelExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check product membership level exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Products.ProductMembershipLevel.View"),
        PublicAPI,
        Route("/Products/ProductMembershipLevel/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckProductMembershipLevelExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create product membership level.</summary>
    /// <seealso cref="ProductMembershipLevelModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductMembershipLevel.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductMembershipLevel/Create", "POST", Priority = 1,
            Summary = "Use to create a new product membership level.")]
    public partial class CreateProductMembershipLevel : ProductMembershipLevelModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert product membership level.</summary>
    /// <seealso cref="ProductMembershipLevelModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Products/ProductMembershipLevel/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing product membership level (as needed).")]
    public partial class UpsertProductMembershipLevel : ProductMembershipLevelModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update product membership level.</summary>
    /// <seealso cref="ProductMembershipLevelModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Products.ProductMembershipLevel.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductMembershipLevel/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing product membership level.")]
    public partial class UpdateProductMembershipLevel : ProductMembershipLevelModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate product membership level.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductMembershipLevel.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductMembershipLevel/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product membership level from the system [Soft-Delete]")]
    public partial class DeactivateProductMembershipLevelByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate product membership level by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductMembershipLevel.Deactivate"),
        PublicAPI,
        Route("/Products/ProductMembershipLevel/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific product membership level from the system [Soft-Delete]")]
    public partial class DeactivateProductMembershipLevelByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product membership level.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductMembershipLevel.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductMembershipLevel/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product membership level from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductMembershipLevelByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate product membership level by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductMembershipLevel.Reactivate"),
        PublicAPI,
        Route("/Products/ProductMembershipLevel/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific product membership level from the system [Restore from Soft-Delete]")]
    public partial class ReactivateProductMembershipLevelByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product membership level.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductMembershipLevel.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Products/ProductMembershipLevel/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific product membership level from the system [Hard-Delete]")]
    public partial class DeleteProductMembershipLevelByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete product membership level by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Products.ProductMembershipLevel.Delete"),
        PublicAPI,
        Route("/Products/ProductMembershipLevel/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific product membership level from the system [Hard-Delete]")]
    public partial class DeleteProductMembershipLevelByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear product membership level cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Products/ProductMembershipLevel/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all product membership level calls.")]
    public class ClearProductMembershipLevelCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class ProductMembershipLevelServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetProductMembershipLevels"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductMembershipLevels request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IProductMembershipLevelModel, ProductMembershipLevelModel, IProductMembershipLevelSearchModel, ProductMembershipLevelPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.ProductMembershipLevels)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductMembershipLevelsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetProductMembershipLevelsForConnect request)
        {
            return await Workflows.ProductMembershipLevels.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductMembershipLevelsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductMembershipLevelsDigest request)
        {
            return await Workflows.ProductMembershipLevels.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetProductMembershipLevelByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductMembershipLevelByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.ProductMembershipLevels, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetProductMembershipLevelByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetProductMembershipLevelByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.ProductMembershipLevels, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckProductMembershipLevelExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductMembershipLevelExistsByID request)
        {
            return await Workflows.ProductMembershipLevels.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckProductMembershipLevelExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckProductMembershipLevelExistsByKey request)
        {
            return await Workflows.ProductMembershipLevels.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertProductMembershipLevel"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertProductMembershipLevel request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductMembershipLevelDataAsync,
                    () => Workflows.ProductMembershipLevels.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateProductMembershipLevel"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateProductMembershipLevel request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductMembershipLevelDataAsync,
                    () => Workflows.ProductMembershipLevels.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateProductMembershipLevel"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateProductMembershipLevel request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductMembershipLevelDataAsync,
                    () => Workflows.ProductMembershipLevels.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateProductMembershipLevelByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductMembershipLevelByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductMembershipLevelDataAsync,
                    () => Workflows.ProductMembershipLevels.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateProductMembershipLevelByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateProductMembershipLevelByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductMembershipLevelDataAsync,
                    () => Workflows.ProductMembershipLevels.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateProductMembershipLevelByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductMembershipLevelByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductMembershipLevelDataAsync,
                    () => Workflows.ProductMembershipLevels.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateProductMembershipLevelByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateProductMembershipLevelByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductMembershipLevelDataAsync,
                    () => Workflows.ProductMembershipLevels.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteProductMembershipLevelByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductMembershipLevelByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductMembershipLevelDataAsync,
                    () => Workflows.ProductMembershipLevels.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteProductMembershipLevelByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteProductMembershipLevelByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedProductMembershipLevelDataAsync,
                    () => Workflows.ProductMembershipLevels.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearProductMembershipLevelCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearProductMembershipLevelCache request)
        {
            await ClearCachedProductMembershipLevelDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedProductMembershipLevelDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetProductMembershipLevels>(string.Empty),
                    UrnId.Create<GetProductMembershipLevelByID>(string.Empty),
                    UrnId.Create<GetProductMembershipLevelByKey>(string.Empty),
                    UrnId.Create<CheckProductMembershipLevelExistsByID>(string.Empty),
                    UrnId.Create<CheckProductMembershipLevelExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class ProductMembershipLevelService : ProductMembershipLevelServiceBase { }
}
