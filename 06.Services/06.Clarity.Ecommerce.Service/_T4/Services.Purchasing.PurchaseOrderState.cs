// <autogenerated>
// <copyright file="PurchaseOrderStateService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the purchase order state service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of purchase order states.</summary>
    /// <seealso cref="StateSearchModel"/>
    /// <seealso cref="IReturn{PurchaseOrderStatePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderStates", "GET", Priority = 1,
            Summary = "Use to get a list of purchase order states")]
    public partial class GetPurchaseOrderStates : StateSearchModel, IReturn<PurchaseOrderStatePagedResults> { }

    /// <summary>A ServiceStack Route to get purchase order states for connect.</summary>
    /// <seealso cref="StateSearchModel"/>
    /// <seealso cref="IReturn{List{StateModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderState.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all purchase order states")]
    public partial class GetPurchaseOrderStatesForConnect : StateSearchModel, IReturn<List<StateModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all purchase order states.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderState.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderStatesDigest", "GET",
            Summary = "Use to get a hash representing each purchase order states")]
    public partial class GetPurchaseOrderStatesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get purchase order state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderState/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order state")]
    public partial class GetPurchaseOrderStateByID : ImplementsIDBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get purchase order state.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order state by the custom key")]
    public partial class GetPurchaseOrderStateByKey : ImplementsKeyBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get purchase order state.</summary>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Name", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order state by the name")]
    public partial class GetPurchaseOrderStateByName : ImplementsNameBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to get purchase order state.</summary>
    /// <seealso cref="IReturn{StateModel}"/>
    [PublicAPI,
        Route("/Purchasing/PurchaseOrderState/DisplayName", "GET", Priority = 1,
            Summary = "Use to get a specific purchase order state by the name")]
    public partial class GetPurchaseOrderStateByDisplayName : ImplementsDisplayNameBase, IReturn<StateModel> { }

    /// <summary>A ServiceStack Route to check purchase order state exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderState.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderStateExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order state exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderState.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderStateExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order state exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderState.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderStateExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check purchase order state exists by Display Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderState.View"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Exists/DisplayName", "GET", Priority = 1,
            Summary = "Check if this Display Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPurchaseOrderStateExistsByDisplayName : ImplementsDisplayNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create purchase order state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderState.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Create", "POST", Priority = 1,
            Summary = "Use to create a new purchase order state.")]
    public partial class CreatePurchaseOrderState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert purchase order state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing purchase order state (as needed).")]
    public partial class UpsertPurchaseOrderState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update purchase order state.</summary>
    /// <seealso cref="StateModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderState.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing purchase order state.")]
    public partial class UpdatePurchaseOrderState : StateModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate purchase order state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderState.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order state from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate purchase order state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderState.Deactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific purchase order state from the system [Soft-Delete]")]
    public partial class DeactivatePurchaseOrderStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderState.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order state from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate purchase order state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderState.Reactivate"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific purchase order state from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePurchaseOrderStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order state.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderState.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific purchase order state from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderStateByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete purchase order state by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Purchasing.PurchaseOrderState.Delete"),
        PublicAPI,
        Route("/Purchasing/PurchaseOrderState/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific purchase order state from the system [Hard-Delete]")]
    public partial class DeletePurchaseOrderStateByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear purchase order state cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Purchasing/PurchaseOrderState/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all purchase order state calls.")]
    public class ClearPurchaseOrderStateCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PurchaseOrderStateServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPurchaseOrderStates"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderStates request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IStateModel, StateModel, IStateSearchModel, PurchaseOrderStatePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PurchaseOrderStates)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderStatesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPurchaseOrderStatesForConnect request)
        {
            return await Workflows.PurchaseOrderStates.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderStatesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderStatesDigest request)
        {
            return await Workflows.PurchaseOrderStates.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPurchaseOrderStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderStateByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PurchaseOrderStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderStateByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PurchaseOrderStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderStateByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderStateByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.PurchaseOrderStates, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPurchaseOrderStateByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPurchaseOrderStateByDisplayName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByDisplayNameSingleAsync(request, Workflows.PurchaseOrderStates, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPurchaseOrderStateExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderStateExistsByID request)
        {
            return await Workflows.PurchaseOrderStates.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderStateExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderStateExistsByKey request)
        {
            return await Workflows.PurchaseOrderStates.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderStateExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderStateExistsByName request)
        {
            return await Workflows.PurchaseOrderStates.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPurchaseOrderStateExistsByDisplayName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPurchaseOrderStateExistsByDisplayName request)
        {
            return await Workflows.PurchaseOrderStates.CheckExistsByDisplayNameAsync(request.DisplayName, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPurchaseOrderState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPurchaseOrderState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStateDataAsync,
                    () => Workflows.PurchaseOrderStates.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePurchaseOrderState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePurchaseOrderState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStateDataAsync,
                    () => Workflows.PurchaseOrderStates.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePurchaseOrderState"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePurchaseOrderState request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStateDataAsync,
                    () => Workflows.PurchaseOrderStates.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStateDataAsync,
                    () => Workflows.PurchaseOrderStates.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePurchaseOrderStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePurchaseOrderStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStateDataAsync,
                    () => Workflows.PurchaseOrderStates.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStateDataAsync,
                    () => Workflows.PurchaseOrderStates.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePurchaseOrderStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePurchaseOrderStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStateDataAsync,
                    () => Workflows.PurchaseOrderStates.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderStateByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderStateByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStateDataAsync,
                    () => Workflows.PurchaseOrderStates.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePurchaseOrderStateByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePurchaseOrderStateByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPurchaseOrderStateDataAsync,
                    () => Workflows.PurchaseOrderStates.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPurchaseOrderStateCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPurchaseOrderStateCache request)
        {
            await ClearCachedPurchaseOrderStateDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPurchaseOrderStateDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPurchaseOrderStates>(string.Empty),
                    UrnId.Create<GetPurchaseOrderStateByID>(string.Empty),
                    UrnId.Create<GetPurchaseOrderStateByKey>(string.Empty),
                    UrnId.Create<GetPurchaseOrderStateByName>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderStateExistsByID>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderStateExistsByKey>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderStateExistsByName>(string.Empty),
                    UrnId.Create<CheckPurchaseOrderStateExistsByDisplayName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PurchaseOrderStateService : PurchaseOrderStateServiceBase { }
}
