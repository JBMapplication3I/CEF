// <autogenerated>
// <copyright file="CategoryImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the category image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of category images.</summary>
    /// <seealso cref="CategoryImageSearchModel"/>
    /// <seealso cref="IReturn{CategoryImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/CategoryImages", "GET", Priority = 1,
            Summary = "Use to get a list of category images")]
    public partial class GetCategoryImages : CategoryImageSearchModel, IReturn<CategoryImagePagedResults> { }

    /// <summary>A ServiceStack Route to get category images for connect.</summary>
    /// <seealso cref="CategoryImageSearchModel"/>
    /// <seealso cref="IReturn{List{CategoryImageModel}}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImage.View"),
        PublicAPI,
        Route("/Categories/CategoryImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all category images")]
    public partial class GetCategoryImagesForConnect : CategoryImageSearchModel, IReturn<List<CategoryImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all category images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImage.View"),
        PublicAPI,
        Route("/Categories/CategoryImagesDigest", "GET",
            Summary = "Use to get a hash representing each category images")]
    public partial class GetCategoryImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get category image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CategoryImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/CategoryImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific category image")]
    public partial class GetCategoryImageByID : ImplementsIDBase, IReturn<CategoryImageModel> { }

    /// <summary>A ServiceStack Route to get category image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CategoryImageModel}"/>
    [PublicAPI,
        Route("/Categories/CategoryImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific category image by the custom key")]
    public partial class GetCategoryImageByKey : ImplementsKeyBase, IReturn<CategoryImageModel> { }

    /// <summary>A ServiceStack Route to get category image.</summary>
    /// <seealso cref="IReturn{CategoryImageModel}"/>
    [PublicAPI,
        Route("/Categories/CategoryImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific category image by the name")]
    public partial class GetCategoryImageByName : ImplementsNameBase, IReturn<CategoryImageModel> { }

    /// <summary>A ServiceStack Route to check category image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImage.View"),
        PublicAPI,
        Route("/Categories/CategoryImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check category image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImage.View"),
        PublicAPI,
        Route("/Categories/CategoryImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check category image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImage.View"),
        PublicAPI,
        Route("/Categories/CategoryImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create category image.</summary>
    /// <seealso cref="CategoryImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new category image.")]
    public partial class CreateCategoryImage : CategoryImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert category image.</summary>
    /// <seealso cref="CategoryImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Categories/CategoryImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing category image (as needed).")]
    public partial class UpsertCategoryImage : CategoryImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update category image.</summary>
    /// <seealso cref="CategoryImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing category image.")]
    public partial class UpdateCategoryImage : CategoryImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate category image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific category image from the system [Soft-Delete]")]
    public partial class DeactivateCategoryImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate category image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImage.Deactivate"),
        PublicAPI,
        Route("/Categories/CategoryImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific category image from the system [Soft-Delete]")]
    public partial class DeactivateCategoryImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate category image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific category image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCategoryImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate category image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImage.Reactivate"),
        PublicAPI,
        Route("/Categories/CategoryImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific category image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCategoryImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete category image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/CategoryImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific category image from the system [Hard-Delete]")]
    public partial class DeleteCategoryImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete category image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.CategoryImage.Delete"),
        PublicAPI,
        Route("/Categories/CategoryImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific category image from the system [Hard-Delete]")]
    public partial class DeleteCategoryImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear category image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/CategoryImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all category image calls.")]
    public class ClearCategoryImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CategoryImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCategoryImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICategoryImageModel, CategoryImageModel, ICategoryImageSearchModel, CategoryImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.CategoryImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCategoryImagesForConnect request)
        {
            return await Workflows.CategoryImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryImagesDigest request)
        {
            return await Workflows.CategoryImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCategoryImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.CategoryImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.CategoryImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.CategoryImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCategoryImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryImageExistsByID request)
        {
            return await Workflows.CategoryImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCategoryImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryImageExistsByKey request)
        {
            return await Workflows.CategoryImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCategoryImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryImageExistsByName request)
        {
            return await Workflows.CategoryImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCategoryImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCategoryImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageDataAsync,
                    () => Workflows.CategoryImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCategoryImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCategoryImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageDataAsync,
                    () => Workflows.CategoryImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCategoryImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCategoryImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageDataAsync,
                    () => Workflows.CategoryImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCategoryImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCategoryImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageDataAsync,
                    () => Workflows.CategoryImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCategoryImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCategoryImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageDataAsync,
                    () => Workflows.CategoryImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCategoryImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCategoryImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageDataAsync,
                    () => Workflows.CategoryImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCategoryImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCategoryImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageDataAsync,
                    () => Workflows.CategoryImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCategoryImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCategoryImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageDataAsync,
                    () => Workflows.CategoryImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCategoryImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCategoryImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryImageDataAsync,
                    () => Workflows.CategoryImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCategoryImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCategoryImageCache request)
        {
            await ClearCachedCategoryImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCategoryImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCategoryImages>(string.Empty),
                    UrnId.Create<GetCategoryImageByID>(string.Empty),
                    UrnId.Create<GetCategoryImageByKey>(string.Empty),
                    UrnId.Create<GetCategoryImageByName>(string.Empty),
                    UrnId.Create<CheckCategoryImageExistsByID>(string.Empty),
                    UrnId.Create<CheckCategoryImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckCategoryImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CategoryImageService : CategoryImageServiceBase { }
}
