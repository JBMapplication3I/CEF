// <autogenerated>
// <copyright file="PageViewEventService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the page view event service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of page view events.</summary>
    /// <seealso cref="PageViewEventSearchModel"/>
    /// <seealso cref="IReturn{PageViewEventPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/PageViewEvents", "GET", Priority = 1,
            Summary = "Use to get a list of page view events")]
    public partial class GetPageViewEvents : PageViewEventSearchModel, IReturn<PageViewEventPagedResults> { }

    /// <summary>A ServiceStack Route to get page view events for connect.</summary>
    /// <seealso cref="PageViewEventSearchModel"/>
    /// <seealso cref="IReturn{List{PageViewEventModel}}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewEvent.View"),
        PublicAPI,
        Route("/Tracking/PageViewEventsForConnect", "POST,GET", Priority = 1,
            Summary = "Get all page view events")]
    public partial class GetPageViewEventsForConnect : PageViewEventSearchModel, IReturn<List<PageViewEventModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all page view events.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewEvent.View"),
        PublicAPI,
        Route("/Tracking/PageViewEventsDigest", "GET",
            Summary = "Use to get a hash representing each page view events")]
    public partial class GetPageViewEventsDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get page view event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PageViewEventModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/PageViewEvent/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific page view event")]
    public partial class GetPageViewEventByID : ImplementsIDBase, IReturn<PageViewEventModel> { }

    /// <summary>A ServiceStack Route to get page view event.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PageViewEventModel}"/>
    [PublicAPI,
        Route("/Tracking/PageViewEvent/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific page view event by the custom key")]
    public partial class GetPageViewEventByKey : ImplementsKeyBase, IReturn<PageViewEventModel> { }

    /// <summary>A ServiceStack Route to check page view event exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewEvent.View"),
        PublicAPI,
        Route("/Tracking/PageViewEvent/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPageViewEventExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check page view event exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewEvent.View"),
        PublicAPI,
        Route("/Tracking/PageViewEvent/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPageViewEventExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create page view event.</summary>
    /// <seealso cref="PageViewEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewEvent.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewEvent/Create", "POST", Priority = 1,
            Summary = "Use to create a new page view event.")]
    public partial class CreatePageViewEvent : PageViewEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert page view event.</summary>
    /// <seealso cref="PageViewEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Tracking/PageViewEvent/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing page view event (as needed).")]
    public partial class UpsertPageViewEvent : PageViewEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update page view event.</summary>
    /// <seealso cref="PageViewEventModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewEvent.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewEvent/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing page view event.")]
    public partial class UpdatePageViewEvent : PageViewEventModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate page view event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewEvent.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewEvent/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific page view event from the system [Soft-Delete]")]
    public partial class DeactivatePageViewEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate page view event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewEvent.Deactivate"),
        PublicAPI,
        Route("/Tracking/PageViewEvent/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific page view event from the system [Soft-Delete]")]
    public partial class DeactivatePageViewEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate page view event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewEvent.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewEvent/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific page view event from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePageViewEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate page view event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewEvent.Reactivate"),
        PublicAPI,
        Route("/Tracking/PageViewEvent/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific page view event from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePageViewEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete page view event.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewEvent.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Tracking/PageViewEvent/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific page view event from the system [Hard-Delete]")]
    public partial class DeletePageViewEventByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete page view event by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Tracking.PageViewEvent.Delete"),
        PublicAPI,
        Route("/Tracking/PageViewEvent/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific page view event from the system [Hard-Delete]")]
    public partial class DeletePageViewEventByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear page view event cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Tracking/PageViewEvent/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all page view event calls.")]
    public class ClearPageViewEventCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PageViewEventServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPageViewEvents"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewEvents request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPageViewEventModel, PageViewEventModel, IPageViewEventSearchModel, PageViewEventPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.PageViewEvents)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewEventsForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPageViewEventsForConnect request)
        {
            return await Workflows.PageViewEvents.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewEventsDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewEventsDigest request)
        {
            return await Workflows.PageViewEvents.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPageViewEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewEventByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.PageViewEvents, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPageViewEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPageViewEventByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.PageViewEvents, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPageViewEventExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPageViewEventExistsByID request)
        {
            return await Workflows.PageViewEvents.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPageViewEventExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPageViewEventExistsByKey request)
        {
            return await Workflows.PageViewEvents.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPageViewEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPageViewEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewEventDataAsync,
                    () => Workflows.PageViewEvents.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePageViewEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePageViewEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewEventDataAsync,
                    () => Workflows.PageViewEvents.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePageViewEvent"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePageViewEvent request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewEventDataAsync,
                    () => Workflows.PageViewEvents.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePageViewEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePageViewEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewEventDataAsync,
                    () => Workflows.PageViewEvents.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePageViewEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePageViewEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewEventDataAsync,
                    () => Workflows.PageViewEvents.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePageViewEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePageViewEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewEventDataAsync,
                    () => Workflows.PageViewEvents.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePageViewEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePageViewEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewEventDataAsync,
                    () => Workflows.PageViewEvents.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePageViewEventByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePageViewEventByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewEventDataAsync,
                    () => Workflows.PageViewEvents.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePageViewEventByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePageViewEventByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPageViewEventDataAsync,
                    () => Workflows.PageViewEvents.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPageViewEventCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPageViewEventCache request)
        {
            await ClearCachedPageViewEventDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPageViewEventDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPageViewEvents>(string.Empty),
                    UrnId.Create<GetPageViewEventByID>(string.Empty),
                    UrnId.Create<GetPageViewEventByKey>(string.Empty),
                    UrnId.Create<CheckPageViewEventExistsByID>(string.Empty),
                    UrnId.Create<CheckPageViewEventExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PageViewEventService : PageViewEventServiceBase { }
}
