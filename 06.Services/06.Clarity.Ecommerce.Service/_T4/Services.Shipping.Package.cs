// <autogenerated>
// <copyright file="PackageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the package service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of packages.</summary>
    /// <seealso cref="PackageSearchModel"/>
    /// <seealso cref="IReturn{PackagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/Packages", "GET", Priority = 1,
            Summary = "Use to get a list of packages")]
    public partial class GetPackages : PackageSearchModel, IReturn<PackagePagedResults> { }

    /// <summary>A ServiceStack Route to get packages for connect.</summary>
    /// <seealso cref="PackageSearchModel"/>
    /// <seealso cref="IReturn{List{PackageModel}}"/>
    [Authenticate, RequiredPermission("Shipping.Package.View"),
        PublicAPI,
        Route("/Shipping/PackagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all packages")]
    public partial class GetPackagesForConnect : PackageSearchModel, IReturn<List<PackageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all packages.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Shipping.Package.View"),
        PublicAPI,
        Route("/Shipping/PackagesDigest", "GET",
            Summary = "Use to get a hash representing each packages")]
    public partial class GetPackagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get package.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{PackageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/Package/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific package")]
    public partial class GetPackageByID : ImplementsIDBase, IReturn<PackageModel> { }

    /// <summary>A ServiceStack Route to get package.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{PackageModel}"/>
    [PublicAPI,
        Route("/Shipping/Package/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific package by the custom key")]
    public partial class GetPackageByKey : ImplementsKeyBase, IReturn<PackageModel> { }

    /// <summary>A ServiceStack Route to get package.</summary>
    /// <seealso cref="IReturn{PackageModel}"/>
    [PublicAPI,
        Route("/Shipping/Package/Name", "GET", Priority = 1,
            Summary = "Use to get a specific package by the name")]
    public partial class GetPackageByName : ImplementsNameBase, IReturn<PackageModel> { }

    /// <summary>A ServiceStack Route to check package exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.Package.View"),
        PublicAPI,
        Route("/Shipping/Package/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckPackageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check package exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.Package.View"),
        PublicAPI,
        Route("/Shipping/Package/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckPackageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check package exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Shipping.Package.View"),
        PublicAPI,
        Route("/Shipping/Package/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckPackageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create package.</summary>
    /// <seealso cref="PackageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.Package.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/Package/Create", "POST", Priority = 1,
            Summary = "Use to create a new package.")]
    public partial class CreatePackage : PackageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert package.</summary>
    /// <seealso cref="PackageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Shipping/Package/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing package (as needed).")]
    public partial class UpsertPackage : PackageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update package.</summary>
    /// <seealso cref="PackageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Shipping.Package.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/Package/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing package.")]
    public partial class UpdatePackage : PackageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate package.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.Package.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/Package/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific package from the system [Soft-Delete]")]
    public partial class DeactivatePackageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate package by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.Package.Deactivate"),
        PublicAPI,
        Route("/Shipping/Package/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific package from the system [Soft-Delete]")]
    public partial class DeactivatePackageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate package.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.Package.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/Package/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific package from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePackageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate package by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.Package.Reactivate"),
        PublicAPI,
        Route("/Shipping/Package/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific package from the system [Restore from Soft-Delete]")]
    public partial class ReactivatePackageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete package.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.Package.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Shipping/Package/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific package from the system [Hard-Delete]")]
    public partial class DeletePackageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete package by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Shipping.Package.Delete"),
        PublicAPI,
        Route("/Shipping/Package/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific package from the system [Hard-Delete]")]
    public partial class DeletePackageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear package cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Shipping/Package/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all package calls.")]
    public class ClearPackageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class PackageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetPackages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPackages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IPackageModel, PackageModel, IPackageSearchModel, PackagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Packages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPackagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetPackagesForConnect request)
        {
            return await Workflows.Packages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPackagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPackagesDigest request)
        {
            return await Workflows.Packages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetPackageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPackageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Packages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPackageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPackageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Packages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetPackageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetPackageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Packages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckPackageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPackageExistsByID request)
        {
            return await Workflows.Packages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPackageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPackageExistsByKey request)
        {
            return await Workflows.Packages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckPackageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckPackageExistsByName request)
        {
            return await Workflows.Packages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertPackage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertPackage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPackageDataAsync,
                    () => Workflows.Packages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreatePackage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreatePackage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPackageDataAsync,
                    () => Workflows.Packages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdatePackage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdatePackage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPackageDataAsync,
                    () => Workflows.Packages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivatePackageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePackageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPackageDataAsync,
                    () => Workflows.Packages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivatePackageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivatePackageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPackageDataAsync,
                    () => Workflows.Packages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivatePackageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePackageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPackageDataAsync,
                    () => Workflows.Packages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivatePackageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivatePackageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPackageDataAsync,
                    () => Workflows.Packages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeletePackageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePackageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPackageDataAsync,
                    () => Workflows.Packages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeletePackageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeletePackageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedPackageDataAsync,
                    () => Workflows.Packages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearPackageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearPackageCache request)
        {
            await ClearCachedPackageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedPackageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetPackages>(string.Empty),
                    UrnId.Create<GetPackageByID>(string.Empty),
                    UrnId.Create<GetPackageByKey>(string.Empty),
                    UrnId.Create<GetPackageByName>(string.Empty),
                    UrnId.Create<CheckPackageExistsByID>(string.Empty),
                    UrnId.Create<CheckPackageExistsByKey>(string.Empty),
                    UrnId.Create<CheckPackageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class PackageService : PackageServiceBase { }
}
