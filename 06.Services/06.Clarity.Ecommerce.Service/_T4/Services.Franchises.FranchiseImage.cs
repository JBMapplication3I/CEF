// <autogenerated>
// <copyright file="FranchiseImageService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the franchise image service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of franchise images.</summary>
    /// <seealso cref="FranchiseImageSearchModel"/>
    /// <seealso cref="IReturn{FranchiseImagePagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseImages", "GET", Priority = 1,
            Summary = "Use to get a list of franchise images")]
    public partial class GetFranchiseImages : FranchiseImageSearchModel, IReturn<FranchiseImagePagedResults> { }

    /// <summary>A ServiceStack Route to get franchise images for connect.</summary>
    /// <seealso cref="FranchiseImageSearchModel"/>
    /// <seealso cref="IReturn{List{FranchiseImageModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImage.View"),
        PublicAPI,
        Route("/Franchises/FranchiseImagesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all franchise images")]
    public partial class GetFranchiseImagesForConnect : FranchiseImageSearchModel, IReturn<List<FranchiseImageModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all franchise images.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImage.View"),
        PublicAPI,
        Route("/Franchises/FranchiseImagesDigest", "GET",
            Summary = "Use to get a hash representing each franchise images")]
    public partial class GetFranchiseImagesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get franchise image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{FranchiseImageModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseImage/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise image")]
    public partial class GetFranchiseImageByID : ImplementsIDBase, IReturn<FranchiseImageModel> { }

    /// <summary>A ServiceStack Route to get franchise image.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{FranchiseImageModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseImage/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific franchise image by the custom key")]
    public partial class GetFranchiseImageByKey : ImplementsKeyBase, IReturn<FranchiseImageModel> { }

    /// <summary>A ServiceStack Route to get franchise image.</summary>
    /// <seealso cref="IReturn{FranchiseImageModel}"/>
    [PublicAPI,
        Route("/Franchises/FranchiseImage/Name", "GET", Priority = 1,
            Summary = "Use to get a specific franchise image by the name")]
    public partial class GetFranchiseImageByName : ImplementsNameBase, IReturn<FranchiseImageModel> { }

    /// <summary>A ServiceStack Route to check franchise image exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImage.View"),
        PublicAPI,
        Route("/Franchises/FranchiseImage/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseImageExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise image exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImage.View"),
        PublicAPI,
        Route("/Franchises/FranchiseImage/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseImageExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check franchise image exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImage.View"),
        PublicAPI,
        Route("/Franchises/FranchiseImage/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckFranchiseImageExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create franchise image.</summary>
    /// <seealso cref="FranchiseImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImage.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseImage/Create", "POST", Priority = 1,
            Summary = "Use to create a new franchise image.")]
    public partial class CreateFranchiseImage : FranchiseImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert franchise image.</summary>
    /// <seealso cref="FranchiseImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Franchises/FranchiseImage/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing franchise image (as needed).")]
    public partial class UpsertFranchiseImage : FranchiseImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update franchise image.</summary>
    /// <seealso cref="FranchiseImageModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImage.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseImage/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing franchise image.")]
    public partial class UpdateFranchiseImage : FranchiseImageModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate franchise image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImage.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseImage/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise image from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate franchise image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImage.Deactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseImage/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific franchise image from the system [Soft-Delete]")]
    public partial class DeactivateFranchiseImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImage.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseImage/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate franchise image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImage.Reactivate"),
        PublicAPI,
        Route("/Franchises/FranchiseImage/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific franchise image from the system [Restore from Soft-Delete]")]
    public partial class ReactivateFranchiseImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise image.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImage.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Franchises/FranchiseImage/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific franchise image from the system [Hard-Delete]")]
    public partial class DeleteFranchiseImageByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete franchise image by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Franchises.FranchiseImage.Delete"),
        PublicAPI,
        Route("/Franchises/FranchiseImage/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific franchise image from the system [Hard-Delete]")]
    public partial class DeleteFranchiseImageByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear franchise image cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Franchises/FranchiseImage/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all franchise image calls.")]
    public class ClearFranchiseImageCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class FranchiseImageServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetFranchiseImages"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseImages request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IFranchiseImageModel, FranchiseImageModel, IFranchiseImageSearchModel, FranchiseImagePagedResults>(
                    request,
                    request.AsListing,
                    Workflows.FranchiseImages)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseImagesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetFranchiseImagesForConnect request)
        {
            return await Workflows.FranchiseImages.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseImagesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseImagesDigest request)
        {
            return await Workflows.FranchiseImages.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetFranchiseImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseImageByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.FranchiseImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseImageByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.FranchiseImages, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetFranchiseImageByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetFranchiseImageByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.FranchiseImages, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckFranchiseImageExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseImageExistsByID request)
        {
            return await Workflows.FranchiseImages.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseImageExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseImageExistsByKey request)
        {
            return await Workflows.FranchiseImages.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckFranchiseImageExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckFranchiseImageExistsByName request)
        {
            return await Workflows.FranchiseImages.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertFranchiseImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertFranchiseImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageDataAsync,
                    () => Workflows.FranchiseImages.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateFranchiseImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateFranchiseImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageDataAsync,
                    () => Workflows.FranchiseImages.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateFranchiseImage"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateFranchiseImage request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageDataAsync,
                    () => Workflows.FranchiseImages.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageDataAsync,
                    () => Workflows.FranchiseImages.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateFranchiseImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateFranchiseImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageDataAsync,
                    () => Workflows.FranchiseImages.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageDataAsync,
                    () => Workflows.FranchiseImages.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateFranchiseImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateFranchiseImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageDataAsync,
                    () => Workflows.FranchiseImages.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteFranchiseImageByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseImageByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageDataAsync,
                    () => Workflows.FranchiseImages.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteFranchiseImageByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteFranchiseImageByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedFranchiseImageDataAsync,
                    () => Workflows.FranchiseImages.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearFranchiseImageCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearFranchiseImageCache request)
        {
            await ClearCachedFranchiseImageDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedFranchiseImageDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetFranchiseImages>(string.Empty),
                    UrnId.Create<GetFranchiseImageByID>(string.Empty),
                    UrnId.Create<GetFranchiseImageByKey>(string.Empty),
                    UrnId.Create<GetFranchiseImageByName>(string.Empty),
                    UrnId.Create<CheckFranchiseImageExistsByID>(string.Empty),
                    UrnId.Create<CheckFranchiseImageExistsByKey>(string.Empty),
                    UrnId.Create<CheckFranchiseImageExistsByName>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class FranchiseImageService : FranchiseImageServiceBase { }
}
