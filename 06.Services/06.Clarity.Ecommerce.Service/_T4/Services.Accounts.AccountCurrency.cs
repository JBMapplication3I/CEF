// <autogenerated>
// <copyright file="AccountCurrencyService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the account currency service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of account currencies.</summary>
    /// <seealso cref="AccountCurrencySearchModel"/>
    /// <seealso cref="IReturn{AccountCurrencyPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountCurrencies", "GET", Priority = 1,
            Summary = "Use to get a list of account currencies")]
    public partial class GetAccountCurrencies : AccountCurrencySearchModel, IReturn<AccountCurrencyPagedResults> { }

    /// <summary>A ServiceStack Route to get account currencies for connect.</summary>
    /// <seealso cref="AccountCurrencySearchModel"/>
    /// <seealso cref="IReturn{List{AccountCurrencyModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountCurrency.View"),
        PublicAPI,
        Route("/Accounts/AccountCurrenciesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all account currencies")]
    public partial class GetAccountCurrenciesForConnect : AccountCurrencySearchModel, IReturn<List<AccountCurrencyModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all account currencies.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Accounts.AccountCurrency.View"),
        PublicAPI,
        Route("/Accounts/AccountCurrenciesDigest", "GET",
            Summary = "Use to get a hash representing each account currencies")]
    public partial class GetAccountCurrenciesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get account currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{AccountCurrencyModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountCurrency/ID/{ID}", "GET", Priority = 1,
            Summary = "Use to get a specific account currency")]
    public partial class GetAccountCurrencyByID : ImplementsIDBase, IReturn<AccountCurrencyModel> { }

    /// <summary>A ServiceStack Route to get account currency.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{AccountCurrencyModel}"/>
    [PublicAPI,
        Route("/Accounts/AccountCurrency/Key/{Key*}", "GET", Priority = 1,
            Summary = "Use to get a specific account currency by the custom key")]
    public partial class GetAccountCurrencyByKey : ImplementsKeyBase, IReturn<AccountCurrencyModel> { }

    /// <summary>A ServiceStack Route to check account currency exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountCurrency.View"),
        PublicAPI,
        Route("/Accounts/AccountCurrency/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountCurrencyExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check account currency exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [Authenticate, RequiredPermission("Accounts.AccountCurrency.View"),
        PublicAPI,
        Route("/Accounts/AccountCurrency/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckAccountCurrencyExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create account currency.</summary>
    /// <seealso cref="AccountCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountCurrency.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountCurrency/Create", "POST", Priority = 1,
            Summary = "Use to create a new account currency.")]
    public partial class CreateAccountCurrency : AccountCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert account currency.</summary>
    /// <seealso cref="AccountCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Accounts/AccountCurrency/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing account currency (as needed).")]
    public partial class UpsertAccountCurrency : AccountCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update account currency.</summary>
    /// <seealso cref="AccountCurrencyModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Accounts.AccountCurrency.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountCurrency/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing account currency.")]
    public partial class UpdateAccountCurrency : AccountCurrencyModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate account currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountCurrency.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountCurrency/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account currency from the system [Soft-Delete]")]
    public partial class DeactivateAccountCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate account currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountCurrency.Deactivate"),
        PublicAPI,
        Route("/Accounts/AccountCurrency/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific account currency from the system [Soft-Delete]")]
    public partial class DeactivateAccountCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountCurrency.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountCurrency/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account currency from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate account currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountCurrency.Reactivate"),
        PublicAPI,
        Route("/Accounts/AccountCurrency/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific account currency from the system [Restore from Soft-Delete]")]
    public partial class ReactivateAccountCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account currency.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountCurrency.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Accounts/AccountCurrency/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific account currency from the system [Hard-Delete]")]
    public partial class DeleteAccountCurrencyByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete account currency by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Accounts.AccountCurrency.Delete"),
        PublicAPI,
        Route("/Accounts/AccountCurrency/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific account currency from the system [Hard-Delete]")]
    public partial class DeleteAccountCurrencyByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear account currency cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Accounts/AccountCurrency/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all account currency calls.")]
    public class ClearAccountCurrencyCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class AccountCurrencyServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetAccountCurrencies"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountCurrencies request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<IAccountCurrencyModel, AccountCurrencyModel, IAccountCurrencySearchModel, AccountCurrencyPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.AccountCurrencies)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountCurrenciesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetAccountCurrenciesForConnect request)
        {
            return await Workflows.AccountCurrencies.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountCurrenciesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountCurrenciesDigest request)
        {
            return await Workflows.AccountCurrencies.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetAccountCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountCurrencyByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.AccountCurrencies, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetAccountCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetAccountCurrencyByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.AccountCurrencies, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckAccountCurrencyExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountCurrencyExistsByID request)
        {
            return await Workflows.AccountCurrencies.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckAccountCurrencyExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckAccountCurrencyExistsByKey request)
        {
            return await Workflows.AccountCurrencies.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertAccountCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertAccountCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountCurrencyDataAsync,
                    () => Workflows.AccountCurrencies.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateAccountCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateAccountCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountCurrencyDataAsync,
                    () => Workflows.AccountCurrencies.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateAccountCurrency"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateAccountCurrency request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountCurrencyDataAsync,
                    () => Workflows.AccountCurrencies.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateAccountCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountCurrencyDataAsync,
                    () => Workflows.AccountCurrencies.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateAccountCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateAccountCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountCurrencyDataAsync,
                    () => Workflows.AccountCurrencies.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateAccountCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountCurrencyDataAsync,
                    () => Workflows.AccountCurrencies.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateAccountCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateAccountCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountCurrencyDataAsync,
                    () => Workflows.AccountCurrencies.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteAccountCurrencyByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountCurrencyByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountCurrencyDataAsync,
                    () => Workflows.AccountCurrencies.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteAccountCurrencyByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteAccountCurrencyByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedAccountCurrencyDataAsync,
                    () => Workflows.AccountCurrencies.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearAccountCurrencyCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearAccountCurrencyCache request)
        {
            await ClearCachedAccountCurrencyDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedAccountCurrencyDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetAccountCurrencies>(string.Empty),
                    UrnId.Create<GetAccountCurrencyByID>(string.Empty),
                    UrnId.Create<GetAccountCurrencyByKey>(string.Empty),
                    UrnId.Create<CheckAccountCurrencyExistsByID>(string.Empty),
                    UrnId.Create<CheckAccountCurrencyExistsByKey>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class AccountCurrencyService : AccountCurrencyServiceBase { }
}
