// <autogenerated>
// <copyright file="CategoryService.cs" company="clarity-ventures.com">
// Copyright (c) 2016-2023 clarity-ventures.com. All rights reserved.
// </copyright>
// <summary>Implements the category service class</summary>
// </autogenerated>
// ReSharper disable InvalidXmlDocComment, PartialTypeWithSinglePart, RedundantUsingDirective
#nullable enable
namespace Clarity.Ecommerce.Service
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Interfaces.Models;
    using JetBrains.Annotations;
    using Models;
    using ServiceStack;

    /// <summary>A ServiceStack Route to get a list of categories.</summary>
    /// <seealso cref="CategorySearchModel"/>
    /// <seealso cref="IReturn{CategoryPagedResults}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/Categories", "GET", Priority = 1,
            Summary = "Use to get a list of categories")]
    public partial class GetCategories : CategorySearchModel, IReturn<CategoryPagedResults> { }

    /// <summary>A ServiceStack Route to get categories for connect.</summary>
    /// <seealso cref="CategorySearchModel"/>
    /// <seealso cref="IReturn{List{CategoryModel}}"/>
    [Authenticate, RequiredPermission("Categories.Category.View"),
        PublicAPI,
        Route("/Categories/CategoriesForConnect", "POST,GET", Priority = 1,
            Summary = "Get all categories")]
    public partial class GetCategoriesForConnect : CategorySearchModel, IReturn<List<CategoryModel>> { }

    /// <summary>A ServiceStack Route to get a digest of all categories.</summary>
    /// <seealso cref="IReturn{List{DigestModel}}"/>
    [Authenticate, RequiredPermission("Categories.Category.View"),
        PublicAPI,
        Route("/Categories/CategoriesDigest", "GET",
            Summary = "Use to get a hash representing each categories")]
    public partial class GetCategoriesDigest : IReturn<List<DigestModel>> { }

    /// <summary>A ServiceStack Route to get category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CategoryModel}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/Category/ID", "GET", Priority = 1,
            Summary = "Use to get a specific category")]
    public partial class GetCategoryByID : ImplementsIDOnQueryBase, IReturn<CategoryModel> { }

    /// <summary>A ServiceStack Route to get category.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CategoryModel}"/>
    [PublicAPI,
        Route("/Categories/Category/Key", "GET", Priority = 1,
            Summary = "Use to get a specific category by the custom key")]
    public partial class GetCategoryByKey : ImplementsKeyOnQueryBase, IReturn<CategoryModel> { }

    /// <summary>A ServiceStack Route to get category.</summary>
    /// <seealso cref="IReturn{CategoryModel}"/>
    [PublicAPI,
        Route("/Categories/Category/Name", "GET", Priority = 1,
            Summary = "Use to get a specific category by the name")]
    public partial class GetCategoryByName : ImplementsNameBase, IReturn<CategoryModel> { }

    /// <summary>A ServiceStack Route to get category.</summary>
    /// <seealso cref="IReturn{CategoryModel}"/>
    [PublicAPI,
        Route("/Categories/Category/SeoUrl", "GET", Priority = 1,
            Summary = "Use to get a specific category by the SEO URL")]
    public partial class GetCategoryBySeoUrl : ImplementsSeoUrlBase, IReturn<CategoryModel> { }

    /// <summary>A ServiceStack Route to check category exists.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [PublicAPI,
        Route("/Categories/Category/Exists/ID/{ID}", "GET", Priority = 1,
            Summary = "Check if this ID exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryExistsByID : ImplementsIDBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check category exists by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{int?}"/>
    [PublicAPI,
        Route("/Categories/Category/Exists/Key/{Key*}", "GET", Priority = 1,
            Summary = "Check if this key exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryExistsByKey : ImplementsKeyBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check category exists by Name.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [PublicAPI,
        Route("/Categories/Category/Exists/Name", "GET", Priority = 1,
            Summary = "Check if this Name exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryExistsByName : ImplementsNameBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to check category exists by SEO URL.</summary>
    /// <seealso cref="IReturn{int?}"/>
    [PublicAPI,
        Route("/Categories/Category/Exists/SeoUrl", "GET", Priority = 1,
            Summary = "Check if this SEO URL exists and return the id if it does (null if it does not)")]
    public partial class CheckCategoryExistsBySeoUrl : ImplementsSeoUrlBase, IReturn<int?> { }

    /// <summary>A ServiceStack Route to create category.</summary>
    /// <seealso cref="CategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Categories.Category.Create"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/Category/Create", "POST", Priority = 1,
            Summary = "Use to create a new category.")]
    public partial class CreateCategory : CategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to upsert category.</summary>
    /// <seealso cref="CategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate,
        PublicAPI,
        Route("/Categories/Category/Upsert", "POST", Priority = 1,
            Summary = "Use to create a new or update an existing category (as needed).")]
    public partial class UpsertCategory : CategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to update category.</summary>
    /// <seealso cref="CategoryModel"/>
    /// <seealso cref="IReturn{CEFActionResponse_int}"/>
    [Authenticate, RequiredPermission("Categories.Category.Update"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/Category/Update", "PUT", Priority = 1,
            Summary = "Use to update an existing category.")]
    public partial class UpdateCategory : CategoryModel, IReturn<CEFActionResponse<int>> { }

    /// <summary>A ServiceStack Route to deactivate category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.Category.Deactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/Category/Deactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific category from the system [Soft-Delete]")]
    public partial class DeactivateCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to deactivate category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.Category.Deactivate"),
        PublicAPI,
        Route("/Categories/Category/Deactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Deactivate a specific category from the system [Soft-Delete]")]
    public partial class DeactivateCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.Category.Reactivate"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/Category/Reactivate/ID/{ID}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to reactivate category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.Category.Reactivate"),
        PublicAPI,
        Route("/Categories/Category/Reactivate/Key/{Key*}", "PATCH", Priority = 1,
            Summary = "Reactivate a specific category from the system [Restore from Soft-Delete]")]
    public partial class ReactivateCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete category.</summary>
    /// <seealso cref="ImplementsIDBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.Category.Delete"),
        UsedInAdmin,
        PublicAPI,
        Route("/Categories/Category/Delete/ID/{ID}", "DELETE", Priority = 1,
            Summary = "Removes a specific category from the system [Hard-Delete]")]
    public partial class DeleteCategoryByID : ImplementsIDBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to delete category by key.</summary>
    /// <seealso cref="ImplementsKeyBase"/>
    /// <seealso cref="IReturn{CEFActionResponse}"/>
    [Authenticate, RequiredPermission("Categories.Category.Delete"),
        PublicAPI,
        Route("/Categories/Category/Delete/Key/{Key*}", "DELETE", Priority = 1,
            Summary = "Removed a specific category from the system [Hard-Delete]")]
    public partial class DeleteCategoryByKey : ImplementsKeyBase, IReturn<CEFActionResponse> { }

    /// <summary>A ServiceStack Route to clear category cache.</summary>
    /// <seealso cref="IReturn{bool}"/>
    [PublicAPI,
        UsedInAdmin,
        Route("/Categories/Category/ClearCache", "DELETE",
            Summary = "Empties the server-side data cache for all category calls.")]
    public class ClearCategoryCache : IReturn<bool> { }

    [PublicAPI]
    public abstract partial class CategoryServiceBase : ClarityEcommerceServiceBase
    {
        private List<string>? coreUrnIDs;

        protected virtual List<string> AdditionalUrnIDs { get; } = new();

        #region Get Collections
        /// <summary>GET handler for the <see cref="GetCategories"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategories request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultSetAsync<ICategoryModel, CategoryModel, ICategorySearchModel, CategoryPagedResults>(
                    request,
                    request.AsListing,
                    Workflows.Categories)
                .ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoriesForConnect"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Any(GetCategoriesForConnect request)
        {
            return await Workflows.Categories.SearchForConnectAsync(request, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoriesDigest"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoriesDigest request)
        {
            return await Workflows.Categories.GetDigestAsync(null).ConfigureAwait(false);
        }
        #endregion

        #region Get Singles
        /// <summary>GET handler for the <see cref="GetCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryByID request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByIDSingleAsync(request, Workflows.Categories, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryByKey request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByKeySingleAsync(request, Workflows.Categories, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryByName request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultByNameSingleAsync(request, Workflows.Categories, noCache: request.noCache).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="GetCategoryBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(GetCategoryBySeoUrl request)
        {
            return await UseLastModifiedFor304OrCreateAndReturnCachedResultBySeoUrlSingleAsync(request, Workflows.Categories, noCache: request.noCache).ConfigureAwait(false);
        }
        #endregion

        #region Check if it exists
        /// <summary>GET handler for the <see cref="CheckCategoryExistsByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryExistsByID request)
        {
            return await Workflows.Categories.CheckExistsAsync(request.ID, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCategoryExistsByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryExistsByKey request)
        {
            return await Workflows.Categories.CheckExistsAsync(request.Key, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCategoryExistsByName"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryExistsByName request)
        {
            return await Workflows.Categories.CheckExistsByNameAsync(request.Name, contextProfileName: null).ConfigureAwait(false);
        }

        /// <summary>GET handler for the <see cref="CheckCategoryExistsBySeoUrl"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Get(CheckCategoryExistsBySeoUrl request)
        {
            return await Workflows.Categories.CheckExistsBySeoUrlAsync(request.SeoUrl, contextProfileName: null).ConfigureAwait(false);
        }
        #endregion

        #region Create/Update
        /// <summary>POST handler for the <see cref="UpsertCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(UpsertCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryDataAsync,
                    () => Workflows.Categories.UpsertAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>POST handler for the <see cref="CreateCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Post(CreateCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryDataAsync,
                    () => Workflows.Categories.CreateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PUT handler for the <see cref="UpdateCategory"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Put(UpdateCategory request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryDataAsync,
                    () => Workflows.Categories.UpdateAsync(request, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Deactivate
        /// <summary>PATCH handler for the <see cref="DeactivateCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryDataAsync,
                    () => Workflows.Categories.DeactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="DeactivateCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(DeactivateCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryDataAsync,
                    () => Workflows.Categories.DeactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Reactivate
        /// <summary>PATCH handler for the <see cref="ReactivateCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryDataAsync,
                    () => Workflows.Categories.ReactivateAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>PATCH handler for the <see cref="ReactivateCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Patch(ReactivateCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryDataAsync,
                    () => Workflows.Categories.ReactivateAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Delete
        /// <summary>DELETE handler for the <see cref="DeleteCategoryByID"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCategoryByID request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryDataAsync,
                    () => Workflows.Categories.DeleteAsync(request.ID, contextProfileName: null))
                .ConfigureAwait(false);
        }

        /// <summary>DELETE handler for the <see cref="DeleteCategoryByKey"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(DeleteCategoryByKey request)
        {
            return await DoClearCacheActionAndReturnResult(
                    ClearCachedCategoryDataAsync,
                    () => Workflows.Categories.DeleteAsync(request.Key, contextProfileName: null))
                .ConfigureAwait(false);
        }
        #endregion

        #region Clearing Caches
        /// <summary>DELETE handler for the <see cref="ClearCategoryCache"/> endpoint.</summary>
        /// <param name="request">The request body DTO.</param>
        /// <returns>The content for the reply over the wire.</returns>
        public virtual async Task<object?> Delete(ClearCategoryCache request)
        {
            await ClearCachedCategoryDataAsync().ConfigureAwait(false);
            return true;
        }

        protected async Task ClearCachedCategoryDataAsync()
        {
            var urn = string.Empty;
            if (JSConfigs.CEFConfigDictionary.BrandsEnabled)
            {
                urn += ":" + new System.Uri(Request.AbsoluteUri).Host.Replace(":", "{colon}");
            }
            foreach (var key in CoreUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
            if (AdditionalUrnIDs == null) { return; }
            foreach (var key in AdditionalUrnIDs)
            {
                await ClearCachePrefixedAsync($"{key}{urn}").ConfigureAwait(false);
            }
        }

        private List<string> CoreUrnIDs
        {
            get
            {
                if (coreUrnIDs != null) { return coreUrnIDs; }
                return coreUrnIDs = new()
                {
                    UrnId.Create<GetCategories>(string.Empty),
                    UrnId.Create<GetCategoryByID>(string.Empty),
                    UrnId.Create<GetCategoryByKey>(string.Empty),
                    UrnId.Create<GetCategoryByName>(string.Empty),
                    UrnId.Create<GetCategoryBySeoUrl>(string.Empty),
                    UrnId.Create<CheckCategoryExistsByID>(string.Empty),
                    UrnId.Create<CheckCategoryExistsByKey>(string.Empty),
                    UrnId.Create<CheckCategoryExistsByName>(string.Empty),
                    UrnId.Create<CheckCategoryExistsBySeoUrl>(string.Empty),
                };
            }
        }
        #endregion
    }

    public partial class CategoryService : CategoryServiceBase { }
}
